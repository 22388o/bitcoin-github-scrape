[
  {
    "sha": "59b87a27efea819e433c727756bf5fac57b33dd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWI4N2EyN2VmZWE4MTllNDMzYzcyNzc1NmJmNWZhYzU3YjMzZGQ2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-07T21:08:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-15T17:28:29Z"
      },
      "message": "[wallet] Fix potential memory leak in CreateWalletFromFile\n\nFix proposed by ryanofsky in\nhttps://github.com/bitcoin/bitcoin/pull/12647#discussion_r174875670",
      "tree": {
        "sha": "0e299fa24e8b6f2b8e4da9804be7f0352894b837",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e299fa24e8b6f2b8e4da9804be7f0352894b837"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59b87a27efea819e433c727756bf5fac57b33dd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b87a27efea819e433c727756bf5fac57b33dd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59b87a27efea819e433c727756bf5fac57b33dd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b87a27efea819e433c727756bf5fac57b33dd6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13da2899ae42d48547e5cb491ea6aba4882b3306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13da2899ae42d48547e5cb491ea6aba4882b3306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13da2899ae42d48547e5cb491ea6aba4882b3306"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f9f567009acdc421379ebeea38a58942a3a72565",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b87a27efea819e433c727756bf5fac57b33dd6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b87a27efea819e433c727756bf5fac57b33dd6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=59b87a27efea819e433c727756bf5fac57b33dd6",
        "patch": "@@ -4012,7 +4012,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    CWallet *walletInstance = new CWallet(name, WalletDatabase::Create(path));\n+    // Make a temporary wallet unique pointer so memory doesn't get leaked if\n+    // wallet creation fails.\n+    auto temp_wallet = MakeUnique<CWallet>(name, WalletDatabase::Create(path));\n+    CWallet* walletInstance = temp_wallet.get();\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n@@ -4224,7 +4227,6 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     }\n \n     walletInstance->m_last_block_processed = chainActive.Tip();\n-    RegisterValidationInterface(walletInstance);\n \n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n@@ -4290,6 +4292,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n             }\n         }\n     }\n+\n+    // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.\n+    RegisterValidationInterface(temp_wallet.release());\n+\n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {"
      }
    ]
  },
  {
    "sha": "470316c3bf5ca343d5d66b94839169a4572eceb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzAzMTZjM2JmNWNhMzQzZDVkNjZiOTQ4MzkxNjlhNDU3MmVjZWI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-19T21:42:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-15T17:28:29Z"
      },
      "message": "[wallet] setup wallet background flushing in WalletInit directly\n\nWalletInit::Start calls postInitProcess() for each wallet. Previously\neach call to postInitProcess() would attempt to schedule wallet\nbackground flushing.\n\nJust start wallet background flushing once from WalletInit::Start().",
      "tree": {
        "sha": "613ee4efd5748ce3356dfa4332c1b1b2b5c9ae1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/613ee4efd5748ce3356dfa4332c1b1b2b5c9ae1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/470316c3bf5ca343d5d66b94839169a4572eceb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470316c3bf5ca343d5d66b94839169a4572eceb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/470316c3bf5ca343d5d66b94839169a4572eceb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470316c3bf5ca343d5d66b94839169a4572eceb7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59b87a27efea819e433c727756bf5fac57b33dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b87a27efea819e433c727756bf5fac57b33dd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59b87a27efea819e433c727756bf5fac57b33dd6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e9710012b5f36dd22b6084a7497919e92debc274",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470316c3bf5ca343d5d66b94839169a4572eceb7/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470316c3bf5ca343d5d66b94839169a4572eceb7/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=470316c3bf5ca343d5d66b94839169a4572eceb7",
        "patch": "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <init.h>\n #include <net.h>\n+#include <scheduler.h>\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validation.h>\n@@ -264,8 +265,11 @@ bool WalletInit::Open() const\n void WalletInit::Start(CScheduler& scheduler) const\n {\n     for (CWallet* pwallet : GetWallets()) {\n-        pwallet->postInitProcess(scheduler);\n+        pwallet->postInitProcess();\n     }\n+\n+    // Run a thread to flush wallet periodically\n+    scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n }\n \n void WalletInit::Flush() const"
      },
      {
        "sha": "4d3e3813afe1ea948ec109eea5c652b3f12a4fb3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470316c3bf5ca343d5d66b94839169a4572eceb7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470316c3bf5ca343d5d66b94839169a4572eceb7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=470316c3bf5ca343d5d66b94839169a4572eceb7",
        "patch": "@@ -23,7 +23,6 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n-#include <scheduler.h>\n #include <timedata.h>\n #include <txmempool.h>\n #include <utilmoneystr.h>\n@@ -4308,18 +4307,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     return walletInstance;\n }\n \n-std::atomic<bool> CWallet::fFlushScheduled(false);\n-\n-void CWallet::postInitProcess(CScheduler& scheduler)\n+void CWallet::postInitProcess()\n {\n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n     ReacceptWalletTransactions();\n-\n-    // Run a thread to flush wallet periodically\n-    if (!CWallet::fFlushScheduled.exchange(true)) {\n-        scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n-    }\n }\n \n bool CWallet::BackupWallet(const std::string& strDest)"
      },
      {
        "sha": "ebf14d43861ffe2aafa3c32bd95662e33255750e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470316c3bf5ca343d5d66b94839169a4572eceb7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470316c3bf5ca343d5d66b94839169a4572eceb7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=470316c3bf5ca343d5d66b94839169a4572eceb7",
        "patch": "@@ -68,7 +68,6 @@ class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n-class CScheduler;\n class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n@@ -675,7 +674,6 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n class CWallet final : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n-    static std::atomic<bool> fFlushScheduled;\n     std::atomic<bool> fAbortRescan{false};\n     std::atomic<bool> fScanningWallet{false}; // controlled by WalletRescanReserver\n     std::mutex mutexScanning;\n@@ -1127,7 +1125,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * Wallet post-init setup\n      * Gives the wallet a chance to register repetitive tasks and complete post-init tasks\n      */\n-    void postInitProcess(CScheduler& scheduler);\n+    void postInitProcess();\n \n     bool BackupWallet(const std::string& strDest);\n "
      }
    ]
  },
  {
    "sha": "e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGU5MGRiMDdiNGU3OThkZDE2MjViZDIzYzJlOWJkOTZmYzZmZjQ5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-18T17:11:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T15:55:38Z"
      },
      "message": "[wallet] Add CWallet::Verify function\n\nThis allows a single wallet to be verified. Prior to this commit, all\nwallets were verified together by the WalletInit::Verify() function at\nstart-up.\n\nIndividual wallet verification will be done when loading wallets\ndynamically at runtime.",
      "tree": {
        "sha": "edc9d049cfbfc3b33f39ed1193db8765151fed74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edc9d049cfbfc3b33f39ed1193db8765151fed74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "470316c3bf5ca343d5d66b94839169a4572eceb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470316c3bf5ca343d5d66b94839169a4572eceb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/470316c3bf5ca343d5d66b94839169a4572eceb7"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 70,
      "deletions": 42
    },
    "files": [
      {
        "sha": "01c927f038639ce723dee20ce19f3fbba95f7a58",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 42,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
        "patch": "@@ -190,55 +190,24 @@ bool WalletInit::Verify() const\n \n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n \n+    std::vector<std::string> wallet_files = gArgs.GetArgs(\"-wallet\");\n+\n+    // Parameter interaction code should have thrown an error if -salvagewallet\n+    // was enabled with more than wallet file, so the wallet_files size check\n+    // here should have no effect.\n+    bool salvage_wallet = gArgs.GetBoolArg(\"-salvagewallet\", false) && wallet_files.size() <= 1;\n+\n     // Keep track of each wallet absolute path to detect duplicates.\n     std::set<fs::path> wallet_paths;\n \n-    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        // Do some checking on wallet path. It should be either a:\n-        //\n-        // 1. Path where a directory can be created.\n-        // 2. Path to an existing directory.\n-        // 3. Path to a symlink to a directory.\n-        // 4. For backwards compatibility, the name of a data file in -walletdir.\n-        fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n-        fs::file_type path_type = fs::symlink_status(wallet_path).type();\n-        if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n-              (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-              (path_type == fs::regular_file && fs::path(walletFile).filename() == walletFile))) {\n-            return InitError(strprintf(\n-                _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n-                  \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n-                  \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n-                walletFile, GetWalletDir()));\n-        }\n+    for (const auto wallet_file : wallet_files) {\n+        fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n \n         if (!wallet_paths.insert(wallet_path).second) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), walletFile));\n-        }\n-\n-        std::string strError;\n-        if (!WalletBatch::VerifyEnvironment(wallet_path, strError)) {\n-            return InitError(strError);\n+            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n         }\n \n-        if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n-            // Recover readable keypairs:\n-            CWallet dummyWallet(\"dummy\", WalletDatabase::CreateDummy());\n-            std::string backup_filename;\n-            if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n-                return false;\n-            }\n-        }\n-\n-        std::string strWarning;\n-        bool dbV = WalletBatch::VerifyDatabaseFile(wallet_path, strWarning, strError);\n-        if (!strWarning.empty()) {\n-            InitWarning(strWarning);\n-        }\n-        if (!dbV) {\n-            InitError(strError);\n-            return false;\n-        }\n+        if (!CWallet::Verify(wallet_file, salvage_wallet)) return false;\n     }\n \n     return true;"
      },
      {
        "sha": "d4bbb7f0692e2adb22ffe587fd0215077387a1db",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
        "patch": "@@ -27,6 +27,7 @@\n #include <txmempool.h>\n #include <utilmoneystr.h>\n #include <wallet/fees.h>\n+#include <wallet/walletutil.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -3989,6 +3990,61 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n+bool CWallet::Verify(std::string wallet_file, bool salvage_wallet)\n+{\n+    // Do some checking on wallet path. It should be either a:\n+    //\n+    // 1. Path where a directory can be created.\n+    // 2. Path to an existing directory.\n+    // 3. Path to a symlink to a directory.\n+    // 4. For backwards compatibility, the name of a data file in -walletdir.\n+    LOCK(cs_wallets);\n+    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+    fs::file_type path_type = fs::symlink_status(wallet_path).type();\n+    if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n+          (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n+          (path_type == fs::regular_file && fs::path(wallet_file).filename() == wallet_file))) {\n+        return InitError(strprintf(\n+            _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n+              \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n+              \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n+            wallet_file, GetWalletDir()));\n+    }\n+\n+    // Make sure that the wallet path doesn't clash with an existing wallet path\n+    for (auto wallet : GetWallets()) {\n+        if (fs::absolute(wallet->GetName(), GetWalletDir()) == wallet_path) {\n+            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+        }\n+    }\n+\n+    std::string strError;\n+    if (!WalletBatch::VerifyEnvironment(wallet_path, strError)) {\n+        return InitError(strError);\n+    }\n+\n+    if (salvage_wallet) {\n+        // Recover readable keypairs:\n+        CWallet dummyWallet(\"dummy\", WalletDatabase::CreateDummy());\n+        std::string backup_filename;\n+        if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n+            return false;\n+        }\n+    }\n+\n+    std::string strWarning;\n+    bool dbV = WalletBatch::VerifyDatabaseFile(wallet_path, strWarning, strError);\n+    if (!strWarning.empty()) {\n+        InitWarning(strWarning);\n+    }\n+    if (!dbV) {\n+        InitError(strError);\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n {\n     const std::string& walletFile = name;"
      },
      {
        "sha": "200248bcf59561f98b63d4402704592d8d5c0066",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
        "patch": "@@ -1118,6 +1118,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n+    //! Verify wallet naming and perform salvage on the wallet if required\n+    static bool Verify(std::string wallet_file, bool salvage_wallet);\n+\n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);\n "
      }
    ]
  },
  {
    "sha": "876eb64680968c8fe2a28d1ecfd88a08d8967ead",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzZlYjY0NjgwOTY4YzhmZTJhMjhkMWVjZmQ4OGEwOGQ4OTY3ZWFk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-18T18:17:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T15:59:58Z"
      },
      "message": "[wallet] Pass error message back from CWallet::Verify()\n\nPass an error message back from CWallet::Verify(), and call\nInitError/InitWarning from WalletInit::Verify().\n\nThis means that we can call CWallet::Verify() independently from\nWalletInit and not have InitErrors printed to stdout. It also means that\nthe error can be reported to the user if dynamic wallet load fails.",
      "tree": {
        "sha": "db3bbc04d2c7b5d3c992bc4fb02090a61623a78f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db3bbc04d2c7b5d3c992bc4fb02090a61623a78f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/876eb64680968c8fe2a28d1ecfd88a08d8967ead",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/876eb64680968c8fe2a28d1ecfd88a08d8967ead",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/876eb64680968c8fe2a28d1ecfd88a08d8967ead",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/876eb64680968c8fe2a28d1ecfd88a08d8967ead/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0e90db07b4e798dd1625bd23c2e9bd96fc6ff49"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 18,
      "deletions": 22
    },
    "files": [
      {
        "sha": "5cfa86451295a31583a342ba9df15c0ad3cb9b6c",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/876eb64680968c8fe2a28d1ecfd88a08d8967ead/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/876eb64680968c8fe2a28d1ecfd88a08d8967ead/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=876eb64680968c8fe2a28d1ecfd88a08d8967ead",
        "patch": "@@ -207,7 +207,12 @@ bool WalletInit::Verify() const\n             return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n         }\n \n-        if (!CWallet::Verify(wallet_file, salvage_wallet)) return false;\n+        std::string error_string;\n+        std::string warning_string;\n+        bool verify_success = CWallet::Verify(wallet_file, salvage_wallet, error_string, warning_string);\n+        if (!error_string.empty()) InitError(error_string);\n+        if (!warning_string.empty()) InitWarning(warning_string);\n+        if (!verify_success) return false;\n     }\n \n     return true;"
      },
      {
        "sha": "74f36e9abec32268187a8a8775e0bfa191ab857b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 20,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/876eb64680968c8fe2a28d1ecfd88a08d8967ead/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/876eb64680968c8fe2a28d1ecfd88a08d8967ead/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=876eb64680968c8fe2a28d1ecfd88a08d8967ead",
        "patch": "@@ -3990,7 +3990,7 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n-bool CWallet::Verify(std::string wallet_file, bool salvage_wallet)\n+bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -4004,23 +4004,24 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet)\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n           (path_type == fs::regular_file && fs::path(wallet_file).filename() == wallet_file))) {\n-        return InitError(strprintf(\n-            _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n+        error_string = strprintf(\n+              \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n-              \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n-            wallet_file, GetWalletDir()));\n+              \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n+              wallet_file, GetWalletDir());\n+        return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     for (auto wallet : GetWallets()) {\n         if (fs::absolute(wallet->GetName(), GetWalletDir()) == wallet_path) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", wallet_file);\n+            return false;\n         }\n     }\n \n-    std::string strError;\n-    if (!WalletBatch::VerifyEnvironment(wallet_path, strError)) {\n-        return InitError(strError);\n+    if (!WalletBatch::VerifyEnvironment(wallet_path, error_string)) {\n+        return false;\n     }\n \n     if (salvage_wallet) {\n@@ -4032,17 +4033,7 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet)\n         }\n     }\n \n-    std::string strWarning;\n-    bool dbV = WalletBatch::VerifyDatabaseFile(wallet_path, strWarning, strError);\n-    if (!strWarning.empty()) {\n-        InitWarning(strWarning);\n-    }\n-    if (!dbV) {\n-        InitError(strError);\n-        return false;\n-    }\n-\n-    return true;\n+    return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)"
      },
      {
        "sha": "fecc2178e43efd9bae4164616c7e86fe4281f8a6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/876eb64680968c8fe2a28d1ecfd88a08d8967ead/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/876eb64680968c8fe2a28d1ecfd88a08d8967ead/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=876eb64680968c8fe2a28d1ecfd88a08d8967ead",
        "patch": "@@ -1119,7 +1119,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(std::string wallet_file, bool salvage_wallet);\n+    static bool Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);"
      }
    ]
  },
  {
    "sha": "5d152601e940bd5f4043253b216a645679aff75d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDE1MjYwMWU5NDBiZDVmNDA0MzI1M2IyMTZhNjQ1Njc5YWZmNzVk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-18T20:01:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T16:00:01Z"
      },
      "message": "[wallet] [rpc] Add loadwallet RPC\n\nThe new `loadwallet` RPC method allows an existing wallet to be loaded\ndynamically at runtime.\n\n`unloadwallet` and `createwallet` are not implemented. Notably,\n`loadwallet` can only be used to load existing wallets, not to create a\nnew wallet.",
      "tree": {
        "sha": "f19def8acdbd3db1cfee4ecfe356b82335c69f42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f19def8acdbd3db1cfee4ecfe356b82335c69f42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d152601e940bd5f4043253b216a645679aff75d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d152601e940bd5f4043253b216a645679aff75d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d152601e940bd5f4043253b216a645679aff75d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d152601e940bd5f4043253b216a645679aff75d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "876eb64680968c8fe2a28d1ecfd88a08d8967ead",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/876eb64680968c8fe2a28d1ecfd88a08d8967ead",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/876eb64680968c8fe2a28d1ecfd88a08d8967ead"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8cd3952837366668c34cc467b1624fc70ba67525",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d152601e940bd5f4043253b216a645679aff75d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d152601e940bd5f4043253b216a645679aff75d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5d152601e940bd5f4043253b216a645679aff75d",
        "patch": "@@ -2994,6 +2994,53 @@ static UniValue listwallets(const JSONRPCRequest& request)\n     return obj;\n }\n \n+UniValue loadwallet(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"loadwallet \\\"filename\\\"\\n\"\n+            \"\\nLoads a wallet from a wallet file or directory.\"\n+            \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n+            \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"filename\\\"    (string, required) The wallet directory or .dat file.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if loaded successfully.\\n\"\n+            \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n+            + HelpExampleRpc(\"loadwallet\", \"\\\"test.dat\\\"\")\n+        );\n+    std::string wallet_file = request.params[0].get_str();\n+    std::string error;\n+\n+    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+    if (fs::symlink_status(wallet_path).type() == fs::file_not_found) {\n+        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + wallet_file + \" not found.\");\n+    }\n+\n+    std::string warning;\n+    if (!CWallet::Verify(wallet_file, false, error, warning)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n+    }\n+\n+    CWallet * const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));\n+    if (!wallet) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n+    }\n+    AddWallet(wallet);\n+\n+    wallet->postInitProcess();\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"name\", wallet->GetName());\n+    obj.pushKV(\"warning\", warning);\n+\n+    return obj;\n+}\n+\n static UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -4197,6 +4244,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n+    { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount|dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },"
      }
    ]
  },
  {
    "sha": "a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDZhZWI2OTAxNDFmODQ1N2NmN2QxOWY1YjRiODRmOTdjZTQxMGM4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-18T20:32:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T16:00:01Z"
      },
      "message": "[wallet] [tests] Test loadwallet\n\nAdd testcases to wallet_multiwallet.py to test the new `loadwallet` RPC\nmethod.",
      "tree": {
        "sha": "a8a66a834317d92ae280a13ba85ac72526023bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a66a834317d92ae280a13ba85ac72526023bb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46aeb690141f8457cf7d19f5b4b84f97ce410c8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d152601e940bd5f4043253b216a645679aff75d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d152601e940bd5f4043253b216a645679aff75d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d152601e940bd5f4043253b216a645679aff75d"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5671773528962fcc57ac1aaafd716366d50a55a0",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a46aeb690141f8457cf7d19f5b4b84f97ce410c8/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a46aeb690141f8457cf7d19f5b4b84f97ce410c8/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
        "patch": "@@ -170,5 +170,46 @@ def run_test(self):\n         assert_equal(w1.getwalletinfo()['paytxfee'], 0)\n         assert_equal(w2.getwalletinfo()['paytxfee'], 4.0)\n \n+        self.log.info(\"Test dynamic wallet loading\")\n+\n+        self.restart_node(0, ['-nowallet'])\n+        assert_equal(node.listwallets(), [])\n+        assert_raises_rpc_error(-32601, \"Method not found\", node.getwalletinfo)\n+\n+        self.log.info(\"Load first wallet\")\n+        loadwallet_name = node.loadwallet(wallet_names[0])\n+        assert_equal(loadwallet_name['name'], wallet_names[0])\n+        assert_equal(node.listwallets(), wallet_names[0:1])\n+        node.getwalletinfo()\n+        w1 = node.get_wallet_rpc(wallet_names[0])\n+        w1.getwalletinfo()\n+\n+        self.log.info(\"Load second wallet\")\n+        loadwallet_name = node.loadwallet(wallet_names[1])\n+        assert_equal(loadwallet_name['name'], wallet_names[1])\n+        assert_equal(node.listwallets(), wallet_names[0:2])\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n+        w2 = node.get_wallet_rpc(wallet_names[1])\n+        w2.getwalletinfo()\n+\n+        self.log.info(\"Load remaining wallets\")\n+        for wallet_name in wallet_names[2:]:\n+            loadwallet_name = self.nodes[0].loadwallet(wallet_name)\n+            assert_equal(loadwallet_name['name'], wallet_name)\n+\n+        assert_equal(set(self.nodes[0].listwallets()), set(wallet_names))\n+\n+        # Fail to load if wallet doesn't exist\n+        assert_raises_rpc_error(-18, 'Wallet wallets not found.', self.nodes[0].loadwallet, 'wallets')\n+\n+        # Fail to load duplicate wallets\n+        assert_raises_rpc_error(-4, 'Wallet file verification failed: Error loading wallet w1. Duplicate -wallet filename specified.', self.nodes[0].loadwallet, wallet_names[0])\n+\n+        # Fail to load if one wallet is a copy of another\n+        assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+\n+        # Fail to load if wallet file is a symlink\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n+\n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  },
  {
    "sha": "cd53981b3d0d4697ed46c7bedbf10f464aca4ccc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDUzOTgxYjNkMGQ0Njk3ZWQ0NmM3YmVkYmYxMGY0NjRhY2E0Y2Nj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-18T20:51:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T16:00:01Z"
      },
      "message": "[docs] Add release notes for `loadwallet` RPC.",
      "tree": {
        "sha": "1743c76ac157270ae12a241f9fe755f019496fca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1743c76ac157270ae12a241f9fe755f019496fca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd53981b3d0d4697ed46c7bedbf10f464aca4ccc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd53981b3d0d4697ed46c7bedbf10f464aca4ccc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd53981b3d0d4697ed46c7bedbf10f464aca4ccc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd53981b3d0d4697ed46c7bedbf10f464aca4ccc/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46aeb690141f8457cf7d19f5b4b84f97ce410c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a46aeb690141f8457cf7d19f5b4b84f97ce410c8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a57cbc79360e4f9cb13ce97fc4aa8d89c5d37856",
        "filename": "doc/release-notes-pr10740.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd53981b3d0d4697ed46c7bedbf10f464aca4ccc/doc/release-notes-pr10740.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd53981b3d0d4697ed46c7bedbf10f464aca4ccc/doc/release-notes-pr10740.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr10740.md?ref=cd53981b3d0d4697ed46c7bedbf10f464aca4ccc",
        "patch": "@@ -0,0 +1,8 @@\n+Dynamic loading of wallets\n+--------------------------\n+\n+Previously, wallets could only be loaded at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load wallets dynamically at runtime by calling the `loadwallet` RPC.\n+\n+The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n+\n+This feature is currently only available through the RPC interface. Wallets loaded in this way will not display in the bitcoin-qt GUI."
      }
    ]
  }
]