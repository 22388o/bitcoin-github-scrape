[
  {
    "sha": "557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTdjOWE2OGZiNzJhZWI1MzVmMmVmZTNjYzgyZDNmNWU2NmM2YWQz",
    "commit": {
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2017-01-14T01:06:50Z"
      },
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2017-03-24T23:57:05Z"
      },
      "message": "RPC: getblockchaininfo: BIP9 stats\n\nadd RPC tests for BIP9 counting stats",
      "tree": {
        "sha": "b347a1975468bcae82ee6c1bb051f001973c6408",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b347a1975468bcae82ee6c1bb051f001973c6408"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/comments",
    "author": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0b1e57b20a17177ed5a9a54e4a8aab597a546b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0b1e57b20a17177ed5a9a54e4a8aab597a546b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0b1e57b20a17177ed5a9a54e4a8aab597a546b4"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 121,
      "deletions": 7
    },
    "files": [
      {
        "sha": "bec87e613a31aa7f2776d156a27c2f6f9dfba8f0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
        "patch": "@@ -191,7 +191,7 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n         latestblock.hash = pindex->GetBlockHash();\n         latestblock.height = pindex->nHeight;\n     }\n-\tcond_blockchange.notify_all();\n+    cond_blockchange.notify_all();\n }\n \n UniValue waitfornewblock(const JSONRPCRequest& request)\n@@ -1064,6 +1064,17 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n     rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n     rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    if (THRESHOLD_STARTED == thresholdState)\n+    {\n+        UniValue statsUV(UniValue::VOBJ);\n+        BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n+        statsUV.push_back(Pair(\"period\", statsStruct.period));\n+        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n+        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n+        statsUV.push_back(Pair(\"count\", statsStruct.count));\n+        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n+        rv.push_back(Pair(\"statistics\", statsUV));\n+    }\n     return rv;\n }\n \n@@ -1109,7 +1120,14 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n             \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n             \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx            (numeric) height of the first block to which the status applies\\n\"\n+            \"        \\\"since\\\": xx,           (numeric) height of the first block to which the status applies\\n\"\n+            \"        \\\"statistics\\\": {        (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"period\\\": xx,       (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"           \\\"threshold\\\": xx,    (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"           \\\"elapsed\\\": xx,      (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"           \\\"count\\\": xx,        (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"           \\\"possible\\\": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"        }\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"}\\n\""
      },
      {
        "sha": "c1ca3ea8e9f9c6f128ca27f444c71772f0eb6033",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
        "patch": "@@ -4153,6 +4153,12 @@ ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::D\n     return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n+BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsStatistics(chainActive.Tip(), params, pos);\n+}\n+\n int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "3e5df68025d45d288bb4c796ee8a9c4b84ca971e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
        "patch": "@@ -333,6 +333,9 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n+/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n+BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n /** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      },
      {
        "sha": "80786233f5acddbf74ef22ef9449384fb94d765e",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 1,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"versionbits.h\"\n-\n #include \"consensus/params.h\"\n \n const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n@@ -105,6 +104,36 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n+// return the numerical statistics of blocks signalling the specified BIP9 condition in this current period\n+BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n+{\n+    BIP9Stats stats;\n+\n+    stats.period = Period(params);\n+    stats.threshold = Threshold(params);\n+\n+    if (pindex == NULL)\n+        return stats;\n+\n+    // Find beginning of period\n+    const CBlockIndex* pindexEndOfPrevPeriod = pindex->GetAncestor(pindex->nHeight - ((pindex->nHeight + 1) % stats.period));\n+    stats.elapsed = pindex->nHeight - pindexEndOfPrevPeriod->nHeight;\n+\n+    // Count from current block to beginning of period\n+    int count = 0;\n+    const CBlockIndex* currentIndex = pindex;\n+    while (pindexEndOfPrevPeriod->nHeight != currentIndex->nHeight){\n+        if (Condition(currentIndex, params))\n+            count++;\n+        currentIndex = currentIndex->pprev;\n+    }\n+\n+    stats.count = count;\n+    stats.possible = (stats.period - stats.threshold ) >= (stats.elapsed - count);\n+\n+    return stats;\n+}\n+\n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n     const ThresholdState initialState = GetStateFor(pindexPrev, params, cache);\n@@ -167,6 +196,11 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n+BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n+}\n+\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n     return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);"
      },
      {
        "sha": "f1d31ea0af9648299d657cc3898511cf794dc8ae",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
        "patch": "@@ -37,6 +37,14 @@ struct BIP9DeploymentInfo {\n     bool gbt_force;\n };\n \n+struct BIP9Stats {\n+    int period;\n+    int threshold;\n+    int elapsed;\n+    int count;\n+    bool possible;\n+};\n+\n extern const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[];\n \n /**\n@@ -51,6 +59,7 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n+    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n     // Note that the functions below take a pindexPrev as input: they compute information for block B based on its parent.\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n@@ -64,6 +73,7 @@ struct VersionBitsCache\n };\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      },
      {
        "sha": "a82dfd85c665a17fbb8b3f035354dadde3bb57f7",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 47,
        "deletions": 4,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=557c9a68fb72aeb535f2efe3cc82d3f5e66c6ad3",
        "patch": "@@ -104,12 +104,43 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n         assert_equal(self.get_bip9_status(bipName)['since'], 144)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['elapsed'], 0)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['count'], 0)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n         assert_equal(tmpl['vbrequired'], 0)\n         assert(tmpl['version'] & activated_version)\n \n+        # Test 1-A\n+        # check stats after max number of \"signalling not\" blocks such that LOCKED_IN still possible this period\n+        test_blocks = self.generate_blocks(36, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(10, activated_version) # 0x20000001 (signalling ready)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['elapsed'], 46)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['count'], 10)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['possible'], True)\n+\n+        # Test 1-B\n+        # check stats after one additional \"signalling not\" block --  LOCKED_IN no longer possible this period\n+        test_blocks = self.generate_blocks(1, 4, test_blocks) # 0x00000004 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['elapsed'], 47)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['count'], 10)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['possible'], False)\n+\n+        # Test 1-C\n+        # finish period with \"ready\" blocks, but soft fork will still fail to advance to LOCKED_IN\n+        test_blocks = self.generate_blocks(97, activated_version) # 0x20000001 (signalling ready)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['elapsed'], 0)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['count'], 0)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['possible'], True)\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n         # Test 2\n         # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n         # using a variety of bits to simulate multiple parallel softforks\n@@ -121,6 +152,8 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n         assert_equal(self.get_bip9_status(bipName)['since'], 144)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['elapsed'], 0)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['count'], 0)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -130,14 +163,24 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Test 3\n         # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n         # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(57, activated_version) # 0x20000001 (signalling ready)\n         test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n         test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n         test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n+        # check counting stats and \"possible\" flag before last block of this period achieves LOCKED_IN...\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['elapsed'], 143)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['count'], 107)\n+        assert_equal(self.get_bip9_status(bipName)['statistics']['possible'], True)\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # ...continue with Test 3\n+        test_blocks = self.generate_blocks(1, activated_version) # 0x20000001 (signalling ready)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n-        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n+        assert_equal(self.get_bip9_status(bipName)['since'], 576)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -147,7 +190,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n-        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n+        assert_equal(self.get_bip9_status(bipName)['since'], 576)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -173,7 +216,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, True]])\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n-        assert_equal(self.get_bip9_status(bipName)['since'], 576)\n+        assert_equal(self.get_bip9_status(bipName)['since'], 720)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])"
      }
    ]
  }
]