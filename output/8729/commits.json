[
  {
    "sha": "fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRlODg4YTAyZTRjZWRiZjQzYTFkMDM3ZGQ1MzMyYWJhNGE0ZjMw",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:50:17Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T18:46:52Z"
      },
      "message": "Make net debug more granular (move some into net2, block, tx)",
      "tree": {
        "sha": "99a1a65851cb4e9a3cad5ac6d5721ca8790c8dbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99a1a65851cb4e9a3cad5ac6d5721ca8790c8dbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a82e5d8220bbc8b5d786bed99b0876f530b9b7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a82e5d8220bbc8b5d786bed99b0876f530b9b7cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a82e5d8220bbc8b5d786bed99b0876f530b9b7cc"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 36,
      "deletions": 31
    },
    "files": [
      {
        "sha": "10f0edad39d84caa8e0fcca8ce4ae15748ca0601",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "bc9bdcfe80dd7a8f236722d9c97aa34bb53e4170",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 30,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
        "patch": "@@ -4805,7 +4805,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n                 if (send && connman.OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n-                    LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+                    LogPrint(\"block\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n                     //disconnect node\n                     pfrom->fDisconnect = true;\n@@ -4931,7 +4931,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -5234,7 +5234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5265,14 +5265,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n                     }\n-                    LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n             else\n             {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly)\n-                    LogPrint(\"net\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n                     pfrom->AskFor(inv);\n             }\n@@ -5303,10 +5303,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n+            LogPrint(\"net2\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n \n         if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n+            LogPrint(\"net2\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n@@ -5369,7 +5369,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (it->second->nHeight < chainActive.Height() - 15) {\n-            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n+            LogPrint(\"block\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n             return true;\n         }\n \n@@ -5397,7 +5397,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LOCK(cs_main);\n         if (IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n-            LogPrint(\"net\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n+            LogPrint(\"block\", \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5444,7 +5444,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         if (!fRelayTxes && (!pfrom->fWhitelisted || !GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n-            LogPrint(\"net\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n+            LogPrint(\"tx\", \"transaction sent in violation of protocol peer=%d\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5672,7 +5672,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"net\", \"Peer sent us compact block we were already syncing!\\n\");\n+                        LogPrint(\"block\", \"Peer sent us compact block we were already syncing!\\n\");\n                         return true;\n                     }\n                 }\n@@ -5741,7 +5741,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+            LogPrint(\"block\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n             return true;\n         }\n \n@@ -5813,7 +5813,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n-            LogPrint(\"net\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            LogPrint(\"block\", \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n                     pindexBestHeader->nHeight,\n@@ -5847,7 +5847,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(\"net\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n+            LogPrint(\"block\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n         }\n         nodestate->nUnconnectingHeaders = 0;\n \n@@ -5858,7 +5858,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n-            LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n+            LogPrint(\"block\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n         }\n \n@@ -5883,7 +5883,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // the main chain -- this shouldn't really happen.  Bail out on the\n             // direct fetch and rely on parallel download instead.\n             if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(\"net\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                LogPrint(\"block\", \"Large reorg, won't direct fetch to %s (%d)\\n\",\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n@@ -5897,11 +5897,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n+                    LogPrint(\"block\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n                 }\n                 if (vGetData.size() > 1) {\n-                    LogPrint(\"net\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                    LogPrint(\"block\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n@@ -5928,7 +5928,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"block\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n@@ -5966,7 +5966,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Only send one GetAddr response per connection to reduce resource waste\n         //  and discourage addr stamping of INV announcements.\n         if (pfrom->fSentAddr) {\n-            LogPrint(\"net\", \"Ignoring repeated \\\"getaddr\\\". peer=%d\\n\", pfrom->id);\n+            LogPrint(\"net2\", \"Ignoring repeated \\\"getaddr\\\". peer=%d\\n\", pfrom->id);\n             return true;\n         }\n         pfrom->fSentAddr = true;\n@@ -6150,7 +6150,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     vRecv >> hash;\n                     ss << \": hash \" << hash.ToString();\n                 }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+                if (strMsg == NetMsgType::BLOCK)\n+                    LogPrint(\"block\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else if (strMsg == NetMsgType::TX)\n+                    LogPrint(\"tx\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else\n+                    LogPrint(\"net\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n             } catch (const std::ios_base::failure&) {\n                 // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n                 LogPrint(\"net\", \"Unparseable reject message received\\n\");\n@@ -6445,7 +6450,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n-                LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n+                LogPrint(\"block\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n@@ -6529,7 +6534,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"net\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"block\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n@@ -6539,12 +6544,12 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: sending header %s to peer=%d\\n\", __func__,\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6566,14 +6571,14 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     // This should be very rare and could be optimized out.\n                     // Just log for now.\n                     if (chainActive[pindex->nHeight] != pindex) {\n-                        LogPrint(\"net\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n+                        LogPrint(\"block\", \"Announcing block %s not on main chain (tip=%s)\\n\",\n                             hashToAnnounce.ToString(), chainActive.Tip()->GetBlockHash().ToString());\n                     }\n \n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"net\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n+                        LogPrint(\"block\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n                             pto->id, hashToAnnounce.ToString());\n                     }\n                 }\n@@ -6750,13 +6755,13 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                LogPrint(\"block\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {\n                     State(staller)->nStallingSince = nNow;\n-                    LogPrint(\"net\", \"Stall started peer=%d\\n\", staller);\n+                    LogPrint(\"block\", \"Stall started peer=%d\\n\", staller);\n                 }\n             }\n         }\n@@ -6770,7 +6775,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             if (!AlreadyHave(inv))\n             {\n                 if (fDebug)\n-                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                    LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      }
    ]
  },
  {
    "sha": "4f5cfe5734d786f02e44cd3206c29491cb0e5877",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjVjZmU1NzM0ZDc4NmYwMmU0NGNkMzIwNmMyOTQ5MWNiMGU1ODc3",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T15:05:46Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T18:47:39Z"
      },
      "message": "Split debug for estimatefee into {estimatefee,2}",
      "tree": {
        "sha": "3b762ab7307f935c200b5876e1850d6539995b64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b762ab7307f935c200b5876e1850d6539995b64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f5cfe5734d786f02e44cd3206c29491cb0e5877",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5cfe5734d786f02e44cd3206c29491cb0e5877",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f5cfe5734d786f02e44cd3206c29491cb0e5877",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5cfe5734d786f02e44cd3206c29491cb0e5877/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4e888a02e4cedbf43a1d037dd5332aba4a4f30"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f011e0dd3e274b2e1880ff8f6dce049f92b9d137",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f5cfe5734d786f02e44cd3206c29491cb0e5877/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f5cfe5734d786f02e44cd3206c29491cb0e5877/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4f5cfe5734d786f02e44cd3206c29491cb0e5877",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "a6b9a0024c8a055f1e05def3c2de7a0f80ff4f78",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f5cfe5734d786f02e44cd3206c29491cb0e5877/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f5cfe5734d786f02e44cd3206c29491cb0e5877/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=4f5cfe5734d786f02e44cd3206c29491cb0e5877",
        "patch": "@@ -251,7 +251,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n-    LogPrint(\"estimatefee\", \"adding to %s\", dataTypeString);\n+    LogPrint(\"estimatefee2\", \"adding to %s\", dataTypeString);\n     return bucketindex;\n }\n \n@@ -380,7 +380,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     double curPri = entry.GetPriority(txHeight);\n     mapMemPoolTxs[hash].blockHeight = txHeight;\n \n-    LogPrint(\"estimatefee\", \"Blockpolicy mempool tx %s \", hash.ToString().substr(0,10));\n+    LogPrint(\"estimatefee2\", \"Blockpolicy mempool tx %s \", hash.ToString().substr(0,10));\n     // Record this as a priority estimate\n     if (entry.GetFee() == 0 || isPriDataPoint(feeRate, curPri)) {\n         mapMemPoolTxs[hash].stats = &priStats;\n@@ -392,9 +392,9 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n         mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n     }\n     else {\n-        LogPrint(\"estimatefee\", \"not adding\");\n+        LogPrint(\"estimatefee2\", \"not adding\");\n     }\n-    LogPrint(\"estimatefee\", \"\\n\");\n+    LogPrint(\"estimatefee2\", \"\\n\");\n }\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)"
      }
    ]
  },
  {
    "sha": "0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmZiMDBkYWRmZWEzMGYxMGFiYmM2NWU2YzMwOTMzMjFhMmExZTg0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T14:51:49Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T18:48:20Z"
      },
      "message": "Move a bunch of fairly verbose debug messages from mempool to mempool2",
      "tree": {
        "sha": "41fe4c330c753ae2334ff806a9fd976aaf28dbdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41fe4c330c753ae2334ff806a9fd976aaf28dbdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfb00dadfea30f10abbc65e6c3093321a2a1e84/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f5cfe5734d786f02e44cd3206c29491cb0e5877",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5cfe5734d786f02e44cd3206c29491cb0e5877",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f5cfe5734d786f02e44cd3206c29491cb0e5877"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e423e2a991c84f246a751e031a6a3827002c724a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfb00dadfea30f10abbc65e6c3093321a2a1e84/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfb00dadfea30f10abbc65e6c3093321a2a1e84/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej,2}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "7f1faf53950c7ff3c220c05ae1f9c89fbf29b496",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bfb00dadfea30f10abbc65e6c3093321a2a1e84/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bfb00dadfea30f10abbc65e6c3093321a2a1e84/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
        "patch": "@@ -689,7 +689,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     unsigned int sz = GetTransactionWeight(tx);\n     if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n-        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        LogPrint(\"mempool2\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n     }\n \n@@ -699,7 +699,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+    LogPrint(\"mempool2\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n              mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n@@ -1320,7 +1320,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            LogPrint(\"mempool2\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n@@ -5473,7 +5473,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             pfrom->nLastTXTime = GetTime();\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n+            LogPrint(\"mempool2\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n@@ -5502,7 +5502,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n-                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"mempool2\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                             vWorkQueue.emplace_back(orphanHash, i);\n@@ -5517,11 +5517,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             // Punish peer that gave us an invalid orphan tx\n                             Misbehaving(fromPeer, nDos);\n                             setMisbehaving.insert(fromPeer);\n-                            LogPrint(\"mempool\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+                            LogPrint(\"mempool2\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                         }\n                         // Has inputs but not accepted to mempool\n                         // Probably non-standard or insufficient fee/priority\n-                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"mempool2\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n                         if (orphanTx.wit.IsNull() && !stateDummy.CorruptionPossible()) {\n                             // Do not use rejection cache for witness transactions or\n@@ -5559,9 +5559,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n                 if (nEvicted > 0)\n-                    LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+                    LogPrint(\"mempool2\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n             } else {\n-                LogPrint(\"mempool\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n+                LogPrint(\"mempool2\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n             }\n         } else {\n             if (tx.wit.IsNull() && !state.CorruptionPossible()) {"
      }
    ]
  },
  {
    "sha": "5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzMxYmI1YWM2ZDgzODA3MzU3NmY0MWNhNmFhY2M5YjhiZDMxZDg5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T06:30:32Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T18:48:22Z"
      },
      "message": "Move logic for TX INVs together",
      "tree": {
        "sha": "d6040fbe8669760c0f3d0727f66df85d5ab9c36a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6040fbe8669760c0f3d0727f66df85d5ab9c36a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bfb00dadfea30f10abbc65e6c3093321a2a1e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bfb00dadfea30f10abbc65e6c3093321a2a1e84"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e56230f59e802fd5a19315370f39ff295ca25157",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
        "patch": "@@ -5238,8 +5238,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n+                pfrom->AddInventoryKnown(inv);\n+                if (fBlocksOnly)\n+                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n+                    pfrom->AskFor(inv);\n             }\n-\n+            else\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -5268,14 +5273,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n             }\n-            else\n-            {\n-                pfrom->AddInventoryKnown(inv);\n-                if (fBlocksOnly)\n-                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n-                else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n-                    pfrom->AskFor(inv);\n-            }\n \n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);"
      }
    ]
  },
  {
    "sha": "1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDhkNTAwMWNmMGU2MWMzMjliMTZmMzQyMWY1YTk3NzFlNjkwZGJk",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:51:04Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T18:48:22Z"
      },
      "message": "Improve conformity in debug messages",
      "tree": {
        "sha": "83964c771fddfdf40c788ffb978fdd690e4dafec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83964c771fddfdf40c788ffb978fdd690e4dafec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8d5001cf0e61c329b16f3421f5a9771e690dbd/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c31bb5ac6d838073576f41ca6aacc9b8bd31d89"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 17,
      "deletions": 23
    },
    "files": [
      {
        "sha": "83b48b934a3bec2d0877277a1e8f8d1ecf6d1b19",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 23,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d8d5001cf0e61c329b16f3421f5a9771e690dbd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d8d5001cf0e61c329b16f3421f5a9771e690dbd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
        "patch": "@@ -734,7 +734,7 @@ void EraseOrphansFor(NodeId peer)\n             nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n         }\n     }\n-    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n }\n \n \n@@ -4931,7 +4931,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n-    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"recv %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -5234,7 +5234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5419,7 +5419,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n-        LogPrint(\"net\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n+        LogPrint(\"net\", \"recv getheaders %d to %s peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -5625,7 +5625,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0)\n                     Misbehaving(pfrom->GetId(), nDoS);\n-                LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->id);\n+                LogPrintf(\"recv cmpctblock. INVALID HEADER peer=%d\\n\", pfrom->id);\n                 return true;\n             }\n         }\n@@ -5669,7 +5669,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n                         // The block was already in flight using compact blocks from the same peer\n-                        LogPrint(\"block\", \"Peer sent us compact block we were already syncing!\\n\");\n+                        LogPrint(\"block\", \"recv cmpctblock. already being synced! peer=%d\\n\", pfrom->id);\n                         return true;\n                     }\n                 }\n@@ -5738,7 +5738,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n         if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                 it->second.first != pfrom->GetId()) {\n-            LogPrint(\"block\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn %s not expected peer=%d\\n\", resp.blockhash.ToString(), pfrom->id);\n             return true;\n         }\n \n@@ -5748,7 +5748,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (status == READ_STATUS_INVALID) {\n             MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n             Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n+            LogPrint(\"block\", \"recv blocktxn. INVALID. peer=%d\\n\", pfrom->id);\n             return true;\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :(\n@@ -5894,12 +5894,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"block\", \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->id);\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(\"block\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                    LogPrint(\"block\", \"send getdata block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight, pfrom->id);\n                 }\n                 if (vGetData.size() > 0) {\n                     if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n@@ -5925,7 +5920,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlock block;\n         vRecv >> block;\n \n-        LogPrint(\"block\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"block\", \"recv %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n         CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n@@ -6531,7 +6526,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n                     // We only send up to 1 block as header-and-ids, as otherwise\n                     // probably means we're doing an initial-ish-sync or they're slow\n-                    LogPrint(\"block\", \"%s sending header-and-ids %s to peer %d\\n\", __func__,\n+                    LogPrint(\"block\", \"send cmpctblock %s peer=%d\\n\",\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n@@ -6541,12 +6536,12 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"block\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"send %u headers(%s to %s) peer=%d\\n\",\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"block\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"block\", \"send header %s peer=%d\\n\",\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6575,8 +6570,8 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"block\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n-                            pto->id, hashToAnnounce.ToString());\n+                        LogPrint(\"block\", \"send inv block %s (%d) peer=%d\\n\",\n+                            hashToAnnounce.ToString(), pindex->nHeight, pto->id);\n                     }\n                 }\n             }\n@@ -6752,7 +6747,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"block\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                LogPrint(\"block\", \"send getdata block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n@@ -6771,8 +6766,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(inv))\n             {\n-                if (fDebug)\n-                    LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                LogPrint(\"tx2\", \"send getdata %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      }
    ]
  },
  {
    "sha": "4445a316f8ac69eca53787eed5d2d18450ee11a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQ1YTMxNmY4YWM2OWVjYTUzNzg3ZWVkNWQyZDE4NDUwZWUxMWE1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-13T14:01:50Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T18:48:58Z"
      },
      "message": "Split logging of invs into debug: tx2, block{,2}\n\nblock2 is used for older block invs where nodes are in IBD, so it can be quite verbose.\nThe debug message is now sent after calling UpdateBlockAvailability() and therefore can include the block height if we have received the header.",
      "tree": {
        "sha": "79bb3ba3af3013781c236f8f03f0a299a6bde09c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79bb3ba3af3013781c236f8f03f0a299a6bde09c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4445a316f8ac69eca53787eed5d2d18450ee11a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4445a316f8ac69eca53787eed5d2d18450ee11a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4445a316f8ac69eca53787eed5d2d18450ee11a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4445a316f8ac69eca53787eed5d2d18450ee11a5/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8d5001cf0e61c329b16f3421f5a9771e690dbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d8d5001cf0e61c329b16f3421f5a9771e690dbd"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8dbfa6e71e1f847b644b93277cb25d751e3ee7fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4445a316f8ac69eca53787eed5d2d18450ee11a5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4445a316f8ac69eca53787eed5d2d18450ee11a5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4445a316f8ac69eca53787eed5d2d18450ee11a5",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, block, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej,2}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block{,2}, coindb, db, estimatefee{,2}, http, libevent, lock, mempool{,rej,2}, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx{,2}, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "8d1b0940a9ba2c7b1de035e53a0ac37619a29f7b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4445a316f8ac69eca53787eed5d2d18450ee11a5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4445a316f8ac69eca53787eed5d2d18450ee11a5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4445a316f8ac69eca53787eed5d2d18450ee11a5",
        "patch": "@@ -5234,19 +5234,27 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n+                LogPrint(\"tx2\", \"recv inv %s (%s) peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n                 inv.type |= nFetchFlags;\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly)\n-                    LogPrint(\"tx\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"tx\", \"recv inv %s in violation of protocol peer=%d\\n\", inv.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n                     pfrom->AskFor(inv);\n             }\n             else\n             if (inv.type == MSG_BLOCK) {\n-                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+                UpdateBlockAvailability(pfrom->GetId(), inv.hash); // update pindexBestKnownBlock\n+                if (!fAlreadyHave) {\n+                    LogPrint(\"block\", \"recv inv %s (new) peer=%d\\n\", inv.ToString(), pfrom->id);\n+                } else {\n+                    int theirheight = State(pfrom->id)->pindexBestKnownBlock ? State(pfrom->id)->pindexBestKnownBlock->nHeight : -1;\n+                    bool fRecent = false;\n+                    if (theirheight >= chainActive.Height()-2) fRecent = true;\n+                    LogPrint(fRecent ? \"block\" : \"block2\", \"recv inv %s (%d) peer=%d\\n\", inv.ToString(), theirheight, pfrom->id);\n+                }\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n                     // First request the headers preceding the announced block. In the normal fully-synced\n                     // case where a new block is announced that succeeds the current tip (no reorganization),\n@@ -5272,7 +5280,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     }\n                     LogPrint(\"block\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n-            }\n+            } else\n+                LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);"
      }
    ]
  }
]