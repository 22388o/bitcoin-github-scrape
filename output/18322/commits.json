[
  {
    "sha": "1a50f348fac2527e594b480fc5946fd46f24055c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTUwZjM0OGZhYzI1MjdlNTk0YjQ4MGZjNTk0NmZkNDZmMjQwNTVj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-11T21:30:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-10T22:26:21Z"
      },
      "message": "node: Add params to node context",
      "tree": {
        "sha": "72247d26b0932b95e5ea3851f293ea786bb53d9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72247d26b0932b95e5ea3851f293ea786bb53d9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a50f348fac2527e594b480fc5946fd46f24055c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a50f348fac2527e594b480fc5946fd46f24055c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a50f348fac2527e594b480fc5946fd46f24055c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a50f348fac2527e594b480fc5946fd46f24055c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75917591c840ca61f5e2c6f5858e6882e834a911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75917591c840ca61f5e2c6f5858e6882e834a911",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75917591c840ca61f5e2c6f5858e6882e834a911"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 38,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9c04d490d9b69ea6a8f3bcdbae347bd311525ab7",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -85,9 +85,9 @@ static bool AppInit(int argc, char* argv[])\n         if (!gArgs.ReadConfigFiles(error, true)) {\n             return InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n         }\n-        // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+        // Check for chain parameter; Params() calls are only valid after this clause\n         try {\n-            SelectParams(gArgs.GetChainName());\n+            SelectParams(gArgs.GetChainName(), node.base_params, node.params);\n         } catch (const std::exception& e) {\n             return InitError(strprintf(\"%s\\n\", e.what()));\n         }"
      },
      {
        "sha": "56cbade54e5eb0493c6e7503de6a00dbd8e00fb3",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -8,8 +8,8 @@\n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n #include <versionbitsinfo.h>\n \n #include <assert.h>\n@@ -399,8 +399,9 @@ std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-void SelectParams(const std::string& network)\n+void SelectParams(const std::string& network, const CBaseChainParams* out_base, const CChainParams* out)\n {\n-    SelectBaseParams(network);\n+    SelectBaseParams(network, out_base);\n     globalChainParams = CreateChainParams(network);\n+    if (out) out = globalChainParams.get();\n }"
      },
      {
        "sha": "d6384a53e13ad6f23a11043eeac1b12b31e39b81",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -126,6 +126,6 @@ const CChainParams &Params();\n  * Sets the params returned by Params() to those for the given chain name.\n  * @throws std::runtime_error when the chain is not supported.\n  */\n-void SelectParams(const std::string& chain);\n+void SelectParams(const std::string& chain, const CBaseChainParams* out_base = nullptr, const CChainParams* out = nullptr);\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "ddef4829d1d2d12bb92089fddf9bb1c8abf2dfbe",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -6,8 +6,8 @@\n #include <chainparamsbase.h>\n \n #include <tinyformat.h>\n-#include <util/system.h>\n #include <util/memory.h>\n+#include <util/system.h>\n \n #include <assert.h>\n \n@@ -25,7 +25,7 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n-static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n+static std::unique_ptr<const CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n@@ -45,8 +45,9 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-void SelectBaseParams(const std::string& chain)\n+void SelectBaseParams(const std::string& chain, const CBaseChainParams* out)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n+    if (out) out = globalChainBaseParams.get();\n     gArgs.SelectConfigNetwork(chain);\n }"
      },
      {
        "sha": "2f90075681b134143d5cc8078b7f522c5b6f0c8e",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -52,6 +52,6 @@ void SetupChainParamsBaseOptions();\n const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(const std::string& chain);\n+void SelectBaseParams(const std::string& chain, const CBaseChainParams* out = nullptr);\n \n #endif // BITCOIN_CHAINPARAMSBASE_H"
      },
      {
        "sha": "171eeef068056a140475ae8f87c170c3004f2b70",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -299,6 +299,8 @@ void Shutdown(NodeContext& node)\n     ECC_Stop();\n     if (node.mempool) node.mempool = nullptr;\n     node.scheduler.reset();\n+    node.base_params = nullptr;\n+    node.params = nullptr;\n \n     try {\n         if (!fs::remove(GetPidFile())) {"
      },
      {
        "sha": "e42aaa9c59cca20b95be786bfd253d27a78c2b05",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -63,7 +63,7 @@ class NodeImpl : public Node\n     void forceSetArg(const std::string& arg, const std::string& value) override { gArgs.ForceSetArg(arg, value); }\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n-    void selectParams(const std::string& network) override { SelectParams(network); }\n+    void selectParams(const std::string& network) override { SelectParams(network, m_context.base_params, m_context.params); }\n     uint64_t getAssumedBlockchainSize() override { return Params().AssumedBlockchainSize(); }\n     uint64_t getAssumedChainStateSize() override { return Params().AssumedChainStateSize(); }\n     std::string getNetwork() override { return Params().NetworkIDString(); }"
      },
      {
        "sha": "fdc4e90827cbfbbe4c6f470510bce0469fea301b",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -5,10 +5,13 @@\n #ifndef BITCOIN_NODE_CONTEXT_H\n #define BITCOIN_NODE_CONTEXT_H\n \n+#include <cassert>\n #include <memory>\n #include <vector>\n \n class BanMan;\n+class CBaseChainParams;\n+class CChainParams;\n class CConnman;\n class CScheduler;\n class CTxMemPool;\n@@ -33,6 +36,8 @@ struct NodeContext {\n     CTxMemPool* mempool{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<PeerLogicValidation> peer_logic;\n     std::unique_ptr<BanMan> banman;\n+    const CBaseChainParams* base_params{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n+    const CChainParams* params{nullptr};          // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n@@ -44,4 +49,16 @@ struct NodeContext {\n     ~NodeContext();\n };\n \n+inline const CBaseChainParams& EnsureBaseParams(const NodeContext& node)\n+{\n+    assert(node.base_params);\n+    return *node.base_params;\n+};\n+\n+inline const CChainParams& EnsureParams(const NodeContext& node)\n+{\n+    assert(node.params);\n+    return *node.params;\n+}\n+\n #endif // BITCOIN_NODE_CONTEXT_H"
      },
      {
        "sha": "567ca954216f87a8054233c01116dce2d6397c69",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -511,7 +511,7 @@ int GuiMain(int argc, char* argv[])\n     // - QSettings() will use the new application name after this, resulting in network-specific settings\n     // - Needs to be done before createOptionsModel\n \n-    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for chain parameter; Params() calls are only valid after this clause\n     try {\n         node->selectParams(gArgs.GetChainName());\n     } catch(std::exception &e) {"
      },
      {
        "sha": "827a366e012c752462939cc3de38cda6962fc4c8",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -71,7 +71,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n     fs::create_directories(m_path_root);\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\n     ClearDatadirCache();\n-    SelectParams(chainName);\n+    SelectParams(chainName, m_node.base_params, m_node.params);\n     SeedInsecureRand();\n     gArgs.ForceSetArg(\"-printtoconsole\", \"0\");\n     if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n@@ -93,6 +93,8 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n \n BasicTestingSetup::~BasicTestingSetup()\n {\n+    m_node.base_params = nullptr;\n+    m_node.params = nullptr;\n     LogInstance().DisconnectTestLogger();\n     fs::remove_all(m_path_root);\n     ECC_Stop();\n@@ -172,7 +174,7 @@ TestChain100Setup::TestChain100Setup()\n     // TODO: fix the code to support SegWit blocks.\n     gArgs.ForceSetArg(\"-segwitheight\", \"432\");\n     // Need to recreate chainparams\n-    SelectParams(CBaseChainParams::REGTEST);\n+    SelectParams(CBaseChainParams::REGTEST, m_node.base_params, m_node.params);\n \n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);"
      },
      {
        "sha": "08458f1ddc313e8c2940a5a9705ad01ff53106d4",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a50f348fac2527e594b480fc5946fd46f24055c/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a50f348fac2527e594b480fc5946fd46f24055c/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=1a50f348fac2527e594b480fc5946fd46f24055c",
        "patch": "@@ -73,6 +73,7 @@ static constexpr CAmount CENT{1000000};\n  */\n struct BasicTestingSetup {\n     ECCVerifyHandle globalVerifyHandle;\n+    NodeContext m_node;\n \n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n@@ -84,7 +85,6 @@ struct BasicTestingSetup {\n  * Included are coins database, script check threads setup.\n  */\n struct TestingSetup : public BasicTestingSetup {\n-    NodeContext m_node;\n     boost::thread_group threadGroup;\n \n     explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);"
      }
    ]
  },
  {
    "sha": "775f893dd783cdbd0d4374c64f50969cca6c5845",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzVmODkzZGQ3ODNjZGJkMGQ0Mzc0YzY0ZjUwOTY5Y2NhNmM1ODQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-11T21:29:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-10T22:26:42Z"
      },
      "message": "fuzz: Use node context params instead of Params()",
      "tree": {
        "sha": "c30173dc4bd57fc5831291bca112aff322d8992d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c30173dc4bd57fc5831291bca112aff322d8992d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/775f893dd783cdbd0d4374c64f50969cca6c5845",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775f893dd783cdbd0d4374c64f50969cca6c5845",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/775f893dd783cdbd0d4374c64f50969cca6c5845",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775f893dd783cdbd0d4374c64f50969cca6c5845/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a50f348fac2527e594b480fc5946fd46f24055c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a50f348fac2527e594b480fc5946fd46f24055c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a50f348fac2527e594b480fc5946fd46f24055c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c6ce04fa4aec54d7c432d7e9d088d7491a505fc0",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775f893dd783cdbd0d4374c64f50969cca6c5845/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775f893dd783cdbd0d4374c64f50969cca6c5845/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=775f893dd783cdbd0d4374c64f50969cca6c5845",
        "patch": "@@ -85,7 +85,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), EnsureParams(g_setup->m_node), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n     } catch (const std::ios_base::failure& e) {\n         const std::string exception_message{e.what()};\n         const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);"
      }
    ]
  }
]