[
  {
    "sha": "fa5da469388ad5ef4520eed59c279ce220dca4b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVkYTQ2OTM4OGFkNWVmNDUyMGVlZDU5YzI3OWNlMjIwZGNhNGI1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-26T16:45:12Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-27T10:25:07Z"
      },
      "message": "Remove miner optimizations",
      "tree": {
        "sha": "00d8c9e9d5aa96d20826317b9a204f3790c26d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00d8c9e9d5aa96d20826317b9a204f3790c26d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5da469388ad5ef4520eed59c279ce220dca4b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5da469388ad5ef4520eed59c279ce220dca4b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5da469388ad5ef4520eed59c279ce220dca4b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5da469388ad5ef4520eed59c279ce220dca4b5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffb32acfab33a58c32e0249a22dd56e39c82d417",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb32acfab33a58c32e0249a22dd56e39c82d417",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb32acfab33a58c32e0249a22dd56e39c82d417"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 13,
      "deletions": 72
    },
    "files": [
      {
        "sha": "1daac2c49ef3f2920930f6cb2aa3307cdcdb0b46",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 71,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5da469388ad5ef4520eed59c279ce220dca4b5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5da469388ad5ef4520eed59c279ce220dca4b5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=fa5da469388ad5ef4520eed59c279ce220dca4b5",
        "patch": "@@ -357,41 +357,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n double dHashesPerSec = 0.0;\n int64_t nHPSTimerStart = 0;\n \n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// The nonce is usually preserved between calls, but periodically or if the\n-// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n-// zero.\n-//\n-bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash)\n-{\n-    // Write the first 76 bytes of the block header to a double-SHA256 state.\n-    CHash256 hasher;\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss << *pblock;\n-    assert(ss.size() == 80);\n-    hasher.Write((unsigned char*)&ss[0], 76);\n-\n-    while (true) {\n-        nNonce++;\n-\n-        // Write the last 4 bytes of the block header (the nonce) to a copy of\n-        // the double-SHA256 state, and compute the result.\n-        CHash256(hasher).Write((unsigned char*)&nNonce, 4).Finalize((unsigned char*)phash);\n-\n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((uint16_t*)phash)[15] == 0)\n-            return true;\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-            return false;\n-        if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n-    }\n-}\n-\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n {\n     CPubKey pubkey;\n@@ -404,15 +369,9 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n \n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n-    uint256 hash = pblock->GetHash();\n-    uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n-\n-    if (hash > hashTarget)\n-        return false;\n-\n     //// debug print\n     LogPrintf(\"BitcoinMiner:\\n\");\n-    LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n+    LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", pblock->GetHash().GetHex(), uint256().SetCompact(pblock->nBits).GetHex());\n     pblock->print();\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n \n@@ -478,34 +437,21 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n-            uint256 hash;\n-            uint32_t nNonce = 0;\n-            uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock, nNonce, &hash);\n-                uint32_t nHashesDone = nNonce - nOldNonce;\n-                nOldNonce = nNonce;\n \n+                pblock->nNonce++;\n                 // Check if something found\n-                if (fFound)\n+                if (CheckProofOfWork(pblock->GetHash(), pblock->nBits))\n                 {\n-                    if (hash <= hashTarget)\n-                    {\n-                        // Found a solution\n-                        pblock->nNonce = nNonce;\n-                        assert(hash == pblock->GetHash());\n-\n-                        SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                        CheckWork(pblock, *pwallet, reservekey);\n-                        SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+                    SetThreadPriority(THREAD_PRIORITY_NORMAL);\n+                    CheckWork(pblock, *pwallet, reservekey);\n+                    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n-                        // In regression test mode, stop mining after a block is found.\n-                        if (Params().MineBlocksOnDemand())\n-                            throw boost::thread_interrupted();\n+                    // In regression test mode, stop mining after a block is found.\n+                    if (Params().MineBlocksOnDemand())\n+                        throw boost::thread_interrupted();\n \n-                        break;\n-                    }\n+                    break;\n                 }\n \n                 // Meter hashes/sec\n@@ -516,7 +462,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     nHashCounter = 0;\n                 }\n                 else\n-                    nHashCounter += nHashesDone;\n+                    nHashCounter++;\n                 if (GetTimeMillis() - nHPSTimerStart > 4000)\n                 {\n                     static CCriticalSection cs;\n@@ -542,7 +488,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Regtest mode doesn't require peers\n                 if (vNodes.empty() && Params().MiningRequiresPeers())\n                     break;\n-                if (nNonce >= 0xffff0000)\n+                if (uint256().SetCompact(pblock->nNonce) >= 0xffff0000)\n                     break;\n                 if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n                     break;\n@@ -551,11 +497,6 @@ void static BitcoinMiner(CWallet *pwallet)\n \n                 // Update nTime every few seconds\n                 UpdateTime(*pblock, pindexPrev);\n-                if (Params().AllowMinDifficultyBlocks())\n-                {\n-                    // Changing pblock->nTime can change work required on testnet:\n-                    hashTarget.SetCompact(pblock->nBits);\n-                }\n             }\n         }\n     }"
      },
      {
        "sha": "9e44dfa0c42322c47c29cf554ab482301a762da6",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5da469388ad5ef4520eed59c279ce220dca4b5/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5da469388ad5ef4520eed59c279ce220dca4b5/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=fa5da469388ad5ef4520eed59c279ce220dca4b5",
        "patch": "@@ -87,7 +87,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check proof of work matches claimed amount\n     if (hash > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return false;\n \n     return true;\n }"
      }
    ]
  }
]