sipa,2014-06-26T23:08:01Z,2014-06-26 23:07:19 ERROR: CheckProofOfWork() : hash doesn't match nBits\n,https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47291289,47291289,
sipa,2014-06-26T23:30:36Z,"If you additionally remove the ""CheckProofOfWork() : hash doesn't match nBits"" (which causes a few 100000 lines of logging to be written while mining otherwise), the speed of the miner only drops by a factor 2-2.5x. I'm not sure I consider that acceptable, but I expected a lot more (it's decoding nBits into a uint256 in every iterations...).\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47292793,47292793,
laanwj,2014-06-27T06:30:56Z,"Could as well remove the internal miner completely, instead of crippling it first...\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47311920,47311920,
Diapolo,2014-06-27T07:28:29Z,Still NACK on removing.\n,https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47315261,47315261,
laanwj,2014-06-27T07:33:02Z,"Anyhow, I don't feel like this discussion again, ACK if the pulltester OK.\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47315604,47315604,
jtimon,2014-06-27T10:12:02Z,Made changes suggested by @sipa \n@laanwj isn't it already crippled (when compared to other miners)? We still need a minimal miner for testing.\n,https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47328070,47328070,
BitcoinPullTester,2014-06-27T11:05:49Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4423_fa5da469388ad5ef4520eed59c279ce220dca4b5/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47331681,47331681,
jgarzik,2014-06-27T13:44:16Z,"NAK.  Just leave it as-is, or remove it completely.\n\nMaking it slower is just dumb.  If you want an example of mining code, look at in-tree pyminer or out-of-tree cpuminer.\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47345428,47345428,
luke-jr,2014-06-27T13:50:20Z,(there's also BFGMiner and libblkmaker's GBT example which uses libgcrypt for hashing)\n,https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47346107,47346107,
Diapolo,2014-06-27T14:03:44Z,"Perhaps you really should create a pull, which removes everything related to the internal miner. If this is done properly and we add some doc how to quickly mine regtest or testnet, I'm going to accept the voice of the majority!\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47347613,47347613,
sipa,2014-06-27T14:12:47Z,"The python tests do create blocks, I believe. We'll need a replacement for those committed to the repo if we want to drop the internal miner completely.\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47348881,47348881,
gavinandresen,2014-06-27T16:10:49Z,"Yes, the regression tests use the internal miner to create chains.\n\nSo NACK from me on removing (unless replaced by something better).\nAnd NACK on making the internal miner slower. As jgarzik says, see contrib/pyminer for a slow-but-easy-to-understand miner.\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47367873,47367873,
laanwj,2014-06-27T16:17:32Z,"Ok, closing.\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-47368700,47368700,
jtimon,2014-07-28T13:17:53Z,Did anyone tested how much slower this is for the regtest case (the one we're using and want to keep)?\nDo we really need to print the hashes per second? Removing that would also make it simpler to refactor the POW generation out to pow.h as in #4377 \n,https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-50336367,50336367,
sipa,2014-07-28T13:20:07Z,I benchamrked your earlier naive miner (which just looped and performed CheckProofOfWork on each solution); IIRC it was 2-3x slower.\n,https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-50336614,50336614,
jtimon,2014-08-28T14:59:52Z,"@sipa I understand that your benchmarks have been maybe in hash/s which is what someone CPU mining with bitcoind in either mainnet or testnet would care about. My point is, as discussed we want to maintain the regtest miner which we use for testing. So my question was, did anybody tested how the performance of the tests suffers with this?\nIt is plausible that is even faster.\n\nAnyway there's oth",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-53732277,53732277,
sipa,2014-10-10T17:46:02Z,"For regtest mode the speed of the internal miner is not relevant, which is why I don't care strongly about this. It seems other don't like making it slower (presumably for other purposes?), though.\n",https://github.com/bitcoin/bitcoin/pull/4423#issuecomment-58690811,58690811,
sipa,2014-06-26T23:28:15Z,Remove the negation. Did you test this?\n,https://github.com/bitcoin/bitcoin/pull/4423#discussion_r14272993,14272993,src/miner.cpp
Diapolo,2014-06-27T09:10:49Z,"Isn't this the only usage of `AllowMinDifficultyBlocks()` anyway? I also think this is testnet related and has nothing to do with just making the code here more clear, right?\n",https://github.com/bitcoin/bitcoin/pull/4423#discussion_r14284835,14284835,src/miner.cpp
jtimon,2014-06-27T10:14:45Z,"Params().AllowMinDifficultyBlocks() is for testnet, yes. It's also called inside UpdateTime and inside GetNextWorkRequired.\nBut this condition is no longer necessary because UpdateTime already updates pblock->nBits in testnet case and there's no hashTarget variable to update with pblock->nBits\n",https://github.com/bitcoin/bitcoin/pull/4423#discussion_r14286733,14286733,src/miner.cpp
