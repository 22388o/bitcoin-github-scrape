[
  {
    "sha": "f58f1aa36fee5993c92f44321d279e644303bd23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNThmMWFhMzZmZWU1OTkzYzkyZjQ0MzIxZDI3OWU2NDQzMDNiZDIz",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-07-26T20:43:01Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-07-27T23:07:53Z"
      },
      "message": "refactor: Make mapBlocksUnknownParent local, and rename it",
      "tree": {
        "sha": "db1daf40f532f9b469937884cf037d8f1779082a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db1daf40f532f9b469937884cf037d8f1779082a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f58f1aa36fee5993c92f44321d279e644303bd23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f58f1aa36fee5993c92f44321d279e644303bd23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f58f1aa36fee5993c92f44321d279e644303bd23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f58f1aa36fee5993c92f44321d279e644303bd23/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61cefde7a7492db606db546389ac6ac8cbfc7a6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61cefde7a7492db606db546389ac6ac8cbfc7a6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61cefde7a7492db606db546389ac6ac8cbfc7a6b"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 29,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c05b477d029822af081f51574b3724a7bfb8f9b4",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f58f1aa36fee5993c92f44321d279e644303bd23/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f58f1aa36fee5993c92f44321d279e644303bd23/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=f58f1aa36fee5993c92f44321d279e644303bd23",
        "patch": "@@ -501,6 +501,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n         // -reindex\n         if (fReindex) {\n             int nFile = 0;\n+            std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n             while (true) {\n                 FlatFilePos pos(nFile, 0);\n                 if (!fs::exists(GetBlockPosFilename(pos))) {\n@@ -511,7 +512,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n                     break; // This error is logged in OpenBlockFile\n                 }\n                 LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.ActiveChainstate().LoadExternalBlockFile(file, &pos);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;"
      },
      {
        "sha": "f4b7dc08fdd050fab5da0a9b03adeb25cf26a0c5",
        "filename": "src/test/fuzz/load_external_block_file.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f58f1aa36fee5993c92f44321d279e644303bd23/src/test/fuzz/load_external_block_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f58f1aa36fee5993c92f44321d279e644303bd23/src/test/fuzz/load_external_block_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/load_external_block_file.cpp?ref=f58f1aa36fee5993c92f44321d279e644303bd23",
        "patch": "@@ -31,6 +31,13 @@ FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n     if (fuzzed_block_file == nullptr) {\n         return;\n     }\n-    FlatFilePos flat_file_pos;\n-    g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        // Corresponds to the -reindex case (track orphan blocks across files).\n+        FlatFilePos flat_file_pos;\n+        std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n+        g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(fuzzed_block_file, &flat_file_pos, &blocks_with_unknown_parent);\n+    } else {\n+        // Corresponds to the -loadblock= case (orphan blocks aren't tracked across files).\n+        g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(fuzzed_block_file);\n+    }\n }"
      },
      {
        "sha": "2ddec2fd7c943ac120a3a7b6f35685bd9244cc45",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f58f1aa36fee5993c92f44321d279e644303bd23/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f58f1aa36fee5993c92f44321d279e644303bd23/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f58f1aa36fee5993c92f44321d279e644303bd23",
        "patch": "@@ -4163,10 +4163,13 @@ bool CChainState::LoadGenesisBlock()\n     return true;\n }\n \n-void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n+void CChainState::LoadExternalBlockFile(\n+    FILE* fileIn,\n+    FlatFilePos* dbp,\n+    std::multimap<uint256, FlatFilePos>* blocks_with_unknown_parent)\n {\n-    // Map of disk positions for blocks with unknown parent (only used for reindex)\n-    static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n+    assert((dbp && blocks_with_unknown_parent) || (!dbp && !blocks_with_unknown_parent));\n+\n     int64_t nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n@@ -4216,8 +4219,9 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                     if (hash != m_params.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n-                        if (dbp)\n-                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                        if (dbp && blocks_with_unknown_parent) {\n+                            blocks_with_unknown_parent->emplace(block.hashPrevBlock, *dbp);\n+                        }\n                         continue;\n                     }\n \n@@ -4246,15 +4250,17 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n \n                 NotifyHeaderTip(*this);\n \n+                if (!blocks_with_unknown_parent) continue;\n+\n                 // Recursively process earlier encountered successors of this block\n                 std::deque<uint256> queue;\n                 queue.push_back(hash);\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();\n                     queue.pop_front();\n-                    std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n+                    auto range = blocks_with_unknown_parent->equal_range(head);\n                     while (range.first != range.second) {\n-                        std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n+                        auto it = range.first;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n                         if (ReadBlockFromDisk(*pblockrecursive, it->second, m_params.GetConsensus())) {\n                             LogPrint(BCLog::REINDEX, \"%s: Processing out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n@@ -4267,7 +4273,7 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n                             }\n                         }\n                         range.first++;\n-                        mapBlocksUnknownParent.erase(it);\n+                        blocks_with_unknown_parent->erase(it);\n                         NotifyHeaderTip(*this);\n                     }\n                 }"
      },
      {
        "sha": "1bd219e63d7eabd591a2dabd1012fe5d8e6868c9",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f58f1aa36fee5993c92f44321d279e644303bd23/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f58f1aa36fee5993c92f44321d279e644303bd23/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f58f1aa36fee5993c92f44321d279e644303bd23",
        "patch": "@@ -685,7 +685,10 @@ class CChainState\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     /** Import blocks from an external file */\n-    void LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp = nullptr);\n+    void LoadExternalBlockFile(\n+        FILE* fileIn,\n+        FlatFilePos* dbp = nullptr,\n+        std::multimap<uint256, FlatFilePos>* blocks_with_unknown_parent = nullptr);\n \n     /**\n      * Update the on-disk chain state."
      }
    ]
  },
  {
    "sha": "130508ebf8da2a269b80950cba7771669a9351e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzA1MDhlYmY4ZGEyYTI2OWI4MDk1MGNiYTc3NzE2NjlhOTM1MWU4",
    "commit": {
      "author": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2020-12-04T02:22:41Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-07-27T23:07:53Z"
      },
      "message": "refactor: Add a new version of `ReadBlockFromDisk()`\n\nThis lower-level version takes a path and a seek offset as arguments.\nCurrently unused but is needed by the next commit.",
      "tree": {
        "sha": "22341ba8f4842663bd76f9e767ef6ad84381c4b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22341ba8f4842663bd76f9e767ef6ad84381c4b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/130508ebf8da2a269b80950cba7771669a9351e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/130508ebf8da2a269b80950cba7771669a9351e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/130508ebf8da2a269b80950cba7771669a9351e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/130508ebf8da2a269b80950cba7771669a9351e8/comments",
    "author": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f58f1aa36fee5993c92f44321d279e644303bd23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f58f1aa36fee5993c92f44321d279e644303bd23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f58f1aa36fee5993c92f44321d279e644303bd23"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 17,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f1f3a8dfb9268d1d81dee71e372b115038b15976",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130508ebf8da2a269b80950cba7771669a9351e8/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130508ebf8da2a269b80950cba7771669a9351e8/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=130508ebf8da2a269b80950cba7771669a9351e8",
        "patch": "@@ -363,30 +363,40 @@ bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& st\n }\n \n bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n+{\n+    return ReadBlockFromDisk(block, BlockFileSeq().FileName(pos), pos.nPos, consensusParams);\n+}\n+\n+bool ReadBlockFromDisk(CBlock& block, const fs::path& path, unsigned int offset, const Consensus::Params& consensusParams)\n {\n     block.SetNull();\n \n     // Open history file to read\n-    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull()) {\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n+    FILE* file = fsbridge::fopen(path, \"rb\");\n+    if (!file) {\n+        return error(\"%s: open failed for %s\", __func__, path.string());\n+    }\n+    if (offset > 0 && fseek(file, offset, SEEK_SET)) {\n+        fclose(file);\n+        return error(\"%s: fseek failed for %s offset %u\", __func__, path.string(), offset);\n     }\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n \n     // Read block\n     try {\n         filein >> block;\n     } catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n+        return error(\"%s: Deserialize or I/O error - %s at %s, %u\", __func__, e.what(), path, offset);\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams)) {\n-        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+        return error(\"%s: Errors in block header at %s, %u\", __func__, path, offset);\n     }\n \n     // Signet only: check block solution\n     if (consensusParams.signet_blocks && !CheckSignetBlockSolution(block, consensusParams)) {\n-        return error(\"ReadBlockFromDisk: Errors in block solution at %s\", pos.ToString());\n+        return error(\"%s: Errors in block solution at %s, %u\", __func__, path, offset);\n     }\n \n     return true;"
      },
      {
        "sha": "b39c32ef5a088adc1f6f466e6d57a93a3bb3fddf",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130508ebf8da2a269b80950cba7771669a9351e8/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130508ebf8da2a269b80950cba7771669a9351e8/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=130508ebf8da2a269b80950cba7771669a9351e8",
        "patch": "@@ -68,6 +68,7 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Functions for disk access for blocks */\n bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const fs::path& path, unsigned int offset, const Consensus::Params& consensusParams);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);"
      }
    ]
  },
  {
    "sha": "0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzk3ZmEzZDIyYTQwNWUyNDRhNmM5YjVjNzg0OWI0OWYwYzU0NTRm",
    "commit": {
      "author": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-04-23T15:35:35Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-07-27T23:50:29Z"
      },
      "message": "allow -loadblock blocks to be unsorted\n\nAdd LoadExternalBlockFiles() (plural) that accepts a list of paths and\nloads all the blocks found in these paths. The blocks can be completely\nout of order; block C (child) can be seen first and its parent P not\nseen until a later file, then block C will be processed.  This requires\nre-reading block C from the earlier file; block C isn't kept in memory\nduring this interval.\n\nThe list of paths is either the blocks/blk*.dat files (during reindexing)\nor given with one or more -loadblk arguments.\n\nLoadExternalBlockFiles() calls LoadExternalBlockFile() (singular) to\nread a single file, but out-of-order blocks requires that this function\nbe able to read individual blocks from earlier files.",
      "tree": {
        "sha": "c3e759c445e3bf10882947b3b9767b9bce2e9254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3e759c445e3bf10882947b3b9767b9bce2e9254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/comments",
    "author": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "130508ebf8da2a269b80950cba7771669a9351e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/130508ebf8da2a269b80950cba7771669a9351e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/130508ebf8da2a269b80950cba7771669a9351e8"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 84,
      "deletions": 55
    },
    "files": [
      {
        "sha": "f99adcfca00c95eaf01d10018e599d6e424bddd5",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 25,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
        "patch": "@@ -510,25 +510,25 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n \n         // -reindex\n         if (fReindex) {\n+            // Create a list of block file path names to be loaded.\n+            std::vector<fs::path> blk_paths;\n             int nFile = 0;\n-            std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n             while (true) {\n-                FlatFilePos pos(nFile, 0);\n-                if (!fs::exists(GetBlockPosFilename(pos))) {\n+                const FlatFilePos pos(nFile, 0);\n+                const fs::path blk_file_name = GetBlockPosFilename(pos);\n+                if (!fs::exists(blk_file_name)) {\n                     break; // No block files left to reindex\n                 }\n-                FILE* file = OpenBlockFile(pos, true);\n-                if (!file) {\n-                    break; // This error is logged in OpenBlockFile\n-                }\n-                LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.ActiveChainstate().LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n-                if (ShutdownRequested()) {\n-                    LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n+                blk_paths.push_back(blk_file_name);\n                 nFile++;\n             }\n+\n+            // Load blocks into memory and the index, but it's not necessary to\n+            // write the blocks to the data directory (they're already there).\n+            chainman.ActiveChainstate().LoadExternalBlockFiles(blk_paths, false);\n+            if (ShutdownRequested()) return;\n+\n+            // Clear the reindexing flag only after successful completion.\n             WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n             fReindex = false;\n             LogPrintf(\"Reindexing finished\\n\");\n@@ -537,18 +537,10 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n         }\n \n         // -loadblock=\n-        for (const fs::path& path : vImportFiles) {\n-            FILE* file = fsbridge::fopen(path, \"rb\");\n-            if (file) {\n-                LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-                chainman.ActiveChainstate().LoadExternalBlockFile(file);\n-                if (ShutdownRequested()) {\n-                    LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-            } else {\n-                LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n-            }\n+        if (vImportFiles.size() > 0) {\n+            // Load blocks into memory and the index, and also write them to the data directory (true argument).\n+            chainman.ActiveChainstate().LoadExternalBlockFiles(vImportFiles, true);\n+            if (ShutdownRequested()) return;\n         }\n \n         // scan for better chains in the block chain database, that are not yet connected in the active best chain"
      },
      {
        "sha": "e2c11cc5506f55775493f630bbaae765455c5ea8",
        "filename": "src/test/fuzz/load_external_block_file.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/test/fuzz/load_external_block_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/test/fuzz/load_external_block_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/load_external_block_file.cpp?ref=0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
        "patch": "@@ -31,13 +31,8 @@ FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n     if (fuzzed_block_file == nullptr) {\n         return;\n     }\n-    if (fuzzed_data_provider.ConsumeBool()) {\n-        // Corresponds to the -reindex case (track orphan blocks across files).\n-        FlatFilePos flat_file_pos;\n-        std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n-        g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(fuzzed_block_file, &flat_file_pos, &blocks_with_unknown_parent);\n-    } else {\n-        // Corresponds to the -loadblock= case (orphan blocks aren't tracked across files).\n-        g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(fuzzed_block_file);\n-    }\n+    std::vector<fs::path> blk_paths = {\"no_such_file\"};\n+    std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n+    bool write_to_disk = fuzzed_data_provider.ConsumeBool();\n+    g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(blk_paths, 0, fuzzed_block_file, blocks_with_unknown_parent, write_to_disk);\n }"
      },
      {
        "sha": "bf7a71b2429012470644ed8c273540b3d29286ea",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 18,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
        "patch": "@@ -4163,19 +4163,21 @@ bool CChainState::LoadGenesisBlock()\n     return true;\n }\n \n+//! Read all blocks found in blk_paths[n_file].\n void CChainState::LoadExternalBlockFile(\n-    FILE* fileIn,\n-    FlatFilePos* dbp,\n-    std::multimap<uint256, FlatFilePos>* blocks_with_unknown_parent)\n+    const std::vector<fs::path>& blk_paths,\n+    size_t n_file,\n+    FILE* file,\n+    std::multimap<uint256, FlatFilePos>& blocks_with_unknown_parent,\n+    bool write_to_disk)\n {\n-    assert((dbp && blocks_with_unknown_parent) || (!dbp && !blocks_with_unknown_parent));\n-\n     int64_t nStart = GetTimeMillis();\n \n+    FlatFilePos pos(n_file, 0);\n     int nLoaded = 0;\n     try {\n-        // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        // This takes over file and calls fclose() on it in the CBufferedFile destructor\n+        CBufferedFile blkdat(file, 2 * MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE + 8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             if (ShutdownRequested()) return;\n@@ -4204,8 +4206,7 @@ void CChainState::LoadExternalBlockFile(\n             try {\n                 // read block\n                 uint64_t nBlockPos = blkdat.GetPos();\n-                if (dbp)\n-                    dbp->nPos = nBlockPos;\n+                pos.nPos = nBlockPos;\n                 blkdat.SetLimit(nBlockPos + nSize);\n                 std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n                 CBlock& block = *pblock;\n@@ -4219,16 +4220,17 @@ void CChainState::LoadExternalBlockFile(\n                     if (hash != m_params.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n-                        if (dbp && blocks_with_unknown_parent) {\n-                            blocks_with_unknown_parent->emplace(block.hashPrevBlock, *dbp);\n-                        }\n+                        blocks_with_unknown_parent.emplace(block.hashPrevBlock, pos);\n                         continue;\n                     }\n \n                     // process in case the block isn't known yet\n                     CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n+                      // Passing nullptr to AcceptBlock() means that the block doesn't already\n+                      // exist on disk (datadir/blocks/blk*); it will write the block.\n+                      const FlatFilePos* dbp = write_to_disk ? nullptr : &pos;\n                       if (AcceptBlock(pblock, state, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n@@ -4250,30 +4252,30 @@ void CChainState::LoadExternalBlockFile(\n \n                 NotifyHeaderTip(*this);\n \n-                if (!blocks_with_unknown_parent) continue;\n-\n                 // Recursively process earlier encountered successors of this block\n                 std::deque<uint256> queue;\n                 queue.push_back(hash);\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();\n                     queue.pop_front();\n-                    auto range = blocks_with_unknown_parent->equal_range(head);\n+                    auto range = blocks_with_unknown_parent.equal_range(head);\n                     while (range.first != range.second) {\n                         auto it = range.first;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n-                        if (ReadBlockFromDisk(*pblockrecursive, it->second, m_params.GetConsensus())) {\n+                        const FlatFilePos& child_pos = it->second;\n+                        if (ReadBlockFromDisk(*pblockrecursive, blk_paths[child_pos.nFile], child_pos.nPos, m_params.GetConsensus())) {\n                             LogPrint(BCLog::REINDEX, \"%s: Processing out of order child %s of %s\\n\", __func__, pblockrecursive->GetHash().ToString(),\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, nullptr, true, &it->second, nullptr)) {\n+                            const FlatFilePos* dbp = write_to_disk ? nullptr : &child_pos;\n+                            if (AcceptBlock(pblockrecursive, dummy, nullptr, true, dbp, nullptr)) {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n                             }\n                         }\n                         range.first++;\n-                        blocks_with_unknown_parent->erase(it);\n+                        blocks_with_unknown_parent.erase(it);\n                         NotifyHeaderTip(*this);\n                     }\n                 }\n@@ -4287,6 +4289,27 @@ void CChainState::LoadExternalBlockFile(\n     LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);\n }\n \n+void CChainState::LoadExternalBlockFiles(\n+    const std::vector<fs::path>& blk_paths,\n+    bool write_to_disk)\n+{\n+    std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n+    for (size_t n_file = 0; n_file < blk_paths.size(); ++n_file) {\n+        LogPrintf(\"Loading block file %s ...\\n\", blk_paths[n_file].filename().string());\n+        FILE* file = fsbridge::fopen(blk_paths[n_file], \"rb\");\n+        if (file == nullptr) {\n+            LogPrintf(\"%s: Warning: Could not open blocks file %s\\n\", __func__, blk_paths[n_file]);\n+            return;\n+        }\n+        LoadExternalBlockFile(blk_paths, n_file, file, blocks_with_unknown_parent, write_to_disk);\n+        if (ShutdownRequested()) return;\n+    }\n+    if (blocks_with_unknown_parent.size() > 0) {\n+        // Headers-first sync should ensure that this never happens.\n+        LogPrintf(\"Warning: %i blocks have no parent, ignored\\n\", blocks_with_unknown_parent.size());\n+    }\n+}\n+\n void CChainState::CheckBlockIndex()\n {\n     if (!fCheckBlockIndex) {"
      },
      {
        "sha": "4c1fcf9346d54a1baa29a4cf5b5ef780a04d63bd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
        "patch": "@@ -686,9 +686,16 @@ class CChainState\n \n     /** Import blocks from an external file */\n     void LoadExternalBlockFile(\n-        FILE* fileIn,\n-        FlatFilePos* dbp = nullptr,\n-        std::multimap<uint256, FlatFilePos>* blocks_with_unknown_parent = nullptr);\n+        const std::vector<fs::path>& blk_paths,\n+        size_t n_file,\n+        FILE* file,\n+        std::multimap<uint256, FlatFilePos>& blocks_with_unknown_parent,\n+        bool write_to_disk);\n+\n+    /** Import blocks from one or more external files */\n+    void LoadExternalBlockFiles(\n+        const std::vector<fs::path>& blk_paths,\n+        bool write_to_disk);\n \n     /**\n      * Update the on-disk chain state."
      },
      {
        "sha": "c599bb381e01d87f310ab2384e465f2d995b83fd",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c97fa3d22a405e244a6c9b5c7849b49f0c5454f/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=0c97fa3d22a405e244a6c9b5c7849b49f0c5454f",
        "patch": "@@ -71,6 +71,18 @@ def run_test(self):\n         subprocess.run([sys.executable, linearize_data_file, cfg_file],\n                        check=True)\n \n+        # Test that -loadblock can work with blocks that are out of order.\n+        # In this test environment, blocks will always be in order (since\n+        # we're generating them rather than getting them from peers), so to\n+        # test out-of-order handling, swap blocks 1 and 2 on disk.\n+        with open(bootstrap_file, 'r+b') as bf:\n+            b = bf.read(814)\n+\n+            # Swap the same-size second and third blocks (don't change genesis).\n+            bf.seek(293)\n+            bf.write(b[553:813])\n+            bf.write(b[293:553])\n+\n         self.log.info(\"Restart second, unsynced node with bootstrap file\")\n         self.restart_node(1, extra_args=[\"-loadblock=\" + bootstrap_file])\n         assert_equal(self.nodes[1].getblockcount(), 100)  # start_node is blocking on all block files being imported"
      }
    ]
  }
]