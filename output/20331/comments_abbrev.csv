DrahtBot,2020-11-07 12:45:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22937](https://github.com/bitcoin/bitcoin/pull/22937) (refactor: Forbid calling unsafe fs::path(std::string) constructor",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-723441919,723441919,
LarryRuane,2020-11-09 18:00:25,"A useful follow-on to this PR, since loading unordered blocks would become possible, might be the addition of a `-loadblocksdir=` argument that takes a directory path and loads all blocks found in the directory. That way it's not necessary to specify a very large number of `-loadblock` arguments. It would then be easy to import an entire blockchain. \n\nAnother way to accomplish approximately th",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-724176941,724176941,
adamjonas,2020-11-10 00:37:00,"Appears that the CI picked up a couple of argument issues with the `LoadExternalBlockFile` fuzz test:\n\n```\ntest/fuzz/load_external_block_file.cpp:33:9: error: no matching function for call to 'LoadExternalBlockFile'\n        LoadExternalBlockFile(Params(), fuzzed_block_file, &flat_file_pos, &blocks_with_unknown_parent);\n        ^~~~~~~~~~~~~~~~~~~~~\n./validation.h:162:6: note: candidate",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-724371601,724371601,
LarryRuane,2020-11-10 03:03:23,"I don't know if anyone has been confused by `-loadblock` not loading all the blocks, but that did happen on the zcash network (a bitcoin core fork that I also work on): https://github.com/zcash/zcash/issues/4679",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-724419011,724419011,
LarryRuane,2020-11-10 03:32:46,"Thanks, @adamjonas, force-pushed to fix the fuzz test.",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-724427698,724427698,
LarryRuane,2020-11-12 17:00:00,"Here's a manual test procedure (I'll describe testnet because it's faster, but mainnet works too)\n- testnet node is not running\n- wait for your testnet3 data directory to get out of date (don't run the client for at least several days)\n- change directory to your `.bitcoin` data directory\n- rename `testnet3` to `testnet3-save`\n- start the node with `-testnet`, wait for it to sync (IBD), i",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-726206231,726206231,
promag,2020-11-14 11:15:50,@LarryRuane I guess it's possible to make a functional test then?,https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-727190555,727190555,
LarryRuane,2020-11-14 16:02:39,"@promag I didn't write a new functional test, but I did [modify](https://github.com/bitcoin/bitcoin/pull/20331/files#diff-cabb34205d48861dbb53b2ad0df92776bf7d917150caf17778e15fbc8e63e123R73) the existing loadblock functional test to cover the new behavior (the test fails without the PR). Is that sufficient?",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-727227721,727227721,
dongcarl,2020-12-03 17:26:38,"Verified that the test fails without the new behaviour, cool!\n\nA couple of things that could be done:\n1. Instead of asserting based on the debug log (which is a bit more fragile), perhaps the assertion can be made based on the number of blocks connected (tip height). We may need to disable networking for this to work reliably.\n2. I think the changes in `test/functional` should be split int",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-738161531,738161531,
LarryRuane,2020-12-04 02:42:18,"Force-pushed to implement both suggestions from @dongcarl (thank you!).\n\nReminder, this PR is layered on top of #19594 so please review only the last _two_ commits (of the 3).\n\nUPDATE Mar 5, 2021: I squashed the last two commits, so only review the last commit.",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-738524266,738524266,
LarryRuane,2021-02-04 15:25:11,"Rebased, no functional changes.",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-773391046,773391046,
LarryRuane,2021-04-23 16:10:18,This required rebase also splits the second commit into two commits to separate refactoring from the functional changes. Ready for review.,https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-825762813,825762813,
LarryRuane,2021-05-07 04:38:54,Rebased. The second commit is now much simpler because of #21727.,https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-834058984,834058984,
sipa,2021-06-10 22:45:51,utACK dbd7f729f42d58a1d47700dc75fb1a5a6d76cdf2,https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-859132786,859132786,
LarryRuane,2021-06-14 03:40:18,Rebased to resolve merge conflicts.,https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-860341739,860341739,
DrahtBot,2021-10-15 09:40:34,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20331#issuecomment-944151965,944151965,
mjdietzx,2020-11-11 18:45:30,"Why was this change made? Could you explain how the behavior of this is changing, aside from the function signature taking `const fs::path& path, unsigned int offset` instead of `const FlatFilePos& pos`?",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521565897,521565897,src/validation.cpp
mjdietzx,2020-11-11 18:46:48,"Do you need the additional code branch here? Would it be preferable to just invoke `LoadExternalBlockFiles(""Importing"", chainparams, vImportFiles, true);` no matter what, and the for loop just won't iterate through anything if `vImportFiles` is empty?",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521566574,521566574,src/init.cpp
mjdietzx,2020-11-11 19:09:18,"Isn't this kinda duplication of what `ReadBlockFromDisk` does? I'm wondering why `FlatFilePos pos(n_file, 0);` isn't created, passed to  `ReadBlockFromDisk` (like before, when signature took `FlatFilePos`), and then you can pass it to `LoadExternalBlockFile`",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521578329,521578329,src/validation.cpp
mjdietzx,2020-11-11 19:11:42,"Given the name `LoadExternalBlockFile` I'm confused why `blk_paths` plural is passed as a param, instead of just a single file/path",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521579611,521579611,src/validation.h
mjdietzx,2020-11-11 19:15:00,"Note: I'm guessing this change was made bc of what you do at line 4810: `ReadBlockFromDisk(*pblockrecursive, blk_paths[child_pos.nFile], child_pos.nPos, chainparams.GetConsensus())`\n\nBut I'm failing to understand why you can't just do: `ReadBlockFromDisk(*pblockrecursive, child_pos, chainparams.GetConsensus())`\n\nI'm probably missing something here, but I just want to check",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521581342,521581342,src/validation.cpp
LarryRuane,2020-11-11 20:14:36,"You're right, it's not really needed, but I think it's useful to show the reader here that loading blocks this isn't always being done; otherwise, to know nothing's being done, the reader has to go look at `LoadExternalBlockFiles()`. \n\nI also like that the conditional makes this part of the code similar to the `if (fReindex)` code just above it; they are doing very similar work.\n\nBut I cou",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521612378,521612378,src/init.cpp
LarryRuane,2020-11-11 20:34:43,"Yes, I reached several dead-ends before arriving at this code factoring. We can't use `ReadBlockFromDisk(..., child_pos, ...)` here because the `pos` argument is used in lower-level code (`OpenFlockFile()`) to construct and open a pathname like `.../.bitcoin/blocks/blknnnnn.dat`, which is just what we want for the `-reindex` case, but not for the `-loadblock` case (both share this code), because i",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521622592,521622592,src/validation.cpp
LarryRuane,2020-11-11 23:09:51,"This duplication exists even without this PR. Before this PR, this `fopen()` happens [here](https://github.com/bitcoin/bitcoin/pull/20331/files#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dL729). \n\nTo summarize why this happens in two places: There are two ways blocks are ""loaded"" into memory when reindexing (and, now, with this PR, when using `-loadblock`). First, a bl",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521692298,521692298,src/validation.cpp
LarryRuane,2020-11-11 23:20:17,"That function, `LoadExternalBlockFile()`, does (attempt to) load the blocks from exactly one block file, _but_, doing so may cause, as a side effect, the loading of blocks seen earlier (in earlier files) but that could not be loaded then because their parent was missing (and is now present, see my earlier comment). This requires reaching back and reading specific blocks from earlier files, and tha",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521696666,521696666,src/validation.h
LarryRuane,2020-11-11 23:22:10,"This isn't needed, I'll remove in a later force-push.",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521697943,521697943,src/validation.cpp
LarryRuane,2020-11-11 23:22:30,"This isn't needed, I'll remove in a later force-push.",https://github.com/bitcoin/bitcoin/pull/20331#discussion_r521698200,521698200,src/test/fuzz/load_external_block_file.cpp
