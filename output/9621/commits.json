[
  {
    "sha": "db626ef05a72c8474d35f865d3011040e48193ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjYyNmVmMDVhNzJjODQ3NGQzNWY4NjVkMzAxMTA0MGU0ODE5M2Fl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-24T03:58:08Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-24T04:00:09Z"
      },
      "message": "Define, check, and use MIN_TRANSACTION_SIZE as a const\n\nTwo places use the minimal transaction size to calculate a maximum transaction count.\nFor compact blocks, the value used is actually incorrect: 10 (no inputs/outputs) instead of 60 (at least one input and output is required), because it is calculated on demand based on the CTransaction() constructor.\n\nThis commit defines a const with the correct value (60), and uses it in both locations.\nTo ensure the value is always correct, InitSanityCheck makes sure at startup that it in fact matches the size of such a minimal transaction.",
      "tree": {
        "sha": "17954bf6a63a5bcd3a6e9b35b09a2ec64a302ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17954bf6a63a5bcd3a6e9b35b09a2ec64a302ab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db626ef05a72c8474d35f865d3011040e48193ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db626ef05a72c8474d35f865d3011040e48193ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db626ef05a72c8474d35f865d3011040e48193ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db626ef05a72c8474d35f865d3011040e48193ae/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71148b8947fe8b4d756822420a7f31c380159425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "65f0bf088f72ad405d39b03a3933e58d7d1ab6a8",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db626ef05a72c8474d35f865d3011040e48193ae/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db626ef05a72c8474d35f865d3011040e48193ae/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=db626ef05a72c8474d35f865d3011040e48193ae",
        "patch": "@@ -15,8 +15,6 @@\n \n #include <unordered_map>\n \n-#define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n-\n CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :\n         nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n         shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n@@ -50,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_SIZE)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "c7c0a65f7e17eb451af3ca55240c6201e8578773",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db626ef05a72c8474d35f865d3011040e48193ae/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db626ef05a72c8474d35f865d3011040e48193ae/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=db626ef05a72c8474d35f865d3011040e48193ae",
        "patch": "@@ -16,6 +16,8 @@ static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n+/** Smallest possible transaction size */\n+static const unsigned int MIN_TRANSACTION_SIZE = 60;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "f0c1f2de6c8474f7136f66398e88037f5ed9b71e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db626ef05a72c8474d35f865d3011040e48193ae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db626ef05a72c8474d35f865d3011040e48193ae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=db626ef05a72c8474d35f865d3011040e48193ae",
        "patch": "@@ -693,6 +693,16 @@ bool InitSanityCheck(void)\n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n         return false;\n \n+    CMutableTransaction tx;\n+    tx.vin.resize(1);\n+    tx.vout.resize(1);\n+    size_t nMinTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    size_t nMinStrippedTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+    if (MIN_TRANSACTION_SIZE != nMinTxSize || MIN_TRANSACTION_SIZE != nMinStrippedTxSize) {\n+        InitError(strprintf(\"MIN_TRANSACTION_SIZE verification failure: const %u vs min=%u vs minstripped=%u\", MIN_TRANSACTION_SIZE, nMinTxSize, nMinStrippedTxSize));\n+        return false;\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "662bac8a03998977558b3c98710d9c54446369c9",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db626ef05a72c8474d35f865d3011040e48193ae/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db626ef05a72c8474d35f865d3011040e48193ae/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=db626ef05a72c8474d35f865d3011040e48193ae",
        "patch": "@@ -155,7 +155,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_SIZE)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      }
    ]
  }
]