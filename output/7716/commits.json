[
  {
    "sha": "f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODBmZTBkOTU4NTI0ZDc0MjY1NTg5OGJlOGM0YjliOGM4ZTJlZTFl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-15T04:13:27Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:38:10Z"
      },
      "message": "BIP9 Implementation\n\nInspired by former implementations by Eric Lombrozo and Rusty Russell, and\nbased on code by Jorge Timon.",
      "tree": {
        "sha": "8e3e66e3bd1f557a3f25a6ee965c6b1555efb515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e3e66e3bd1f557a3f25a6ee965c6b1555efb515"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ba7020cf6f9b83f3b2c004695a792c264255d49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ba7020cf6f9b83f3b2c004695a792c264255d49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ba7020cf6f9b83f3b2c004695a792c264255d49"
      }
    ],
    "stats": {
      "total": 363,
      "additions": 345,
      "deletions": 18
    },
    "files": [
      {
        "sha": "6a614f4299ef834fd14de7d6aeac386c30df3f41",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -149,6 +149,7 @@ BITCOIN_CORE_H = \\\n   utiltime.h \\\n   validationinterface.h \\\n   version.h \\\n+  versionbits.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/wallet.h \\\n@@ -201,6 +202,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   validationinterface.cpp \\\n+  versionbits.cpp \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "8d9c6c7602f4d02a5a5299e6b03f1def1d45d86e",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <vector>\n \n-#include <boost/foreach.hpp>\n-\n struct CDiskBlockPos\n {\n     int nFile;"
      },
      {
        "sha": "40e407e3af72b8939716fe6455355ca93b28b654",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -39,6 +39,8 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -141,6 +143,8 @@ class CTestNetParams : public CMainParams {\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -203,6 +207,8 @@ class CRegTestParams : public CTestNetParams {\n         consensus.nMajorityRejectBlockOutdated = 950;\n         consensus.nMajorityWindow = 1000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "87bf0045685690964d6e6cd1948ed4f81cbf0a4f",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -7,8 +7,28 @@\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n #include \"uint256.h\"\n+#include <map>\n+#include <string>\n \n namespace Consensus {\n+\n+enum DeploymentPos\n+{\n+    MAX_VERSION_BITS_DEPLOYMENTS = 0,\n+};\n+\n+/**\n+ * Struct for each individual consensus rule change using BIP9.\n+ */\n+struct BIP9Deployment {\n+    /** Bit position to select the particular bit in nVersion. */\n+    int bit;\n+    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n+    int64_t nStartTime;\n+    /** Timeout/expiry MedianTime for the deployment attempt. */\n+    int64_t nTimeout;\n+};\n+\n /**\n  * Parameters that influence chain consensus.\n  */\n@@ -19,6 +39,14 @@ struct Params {\n     int nMajorityEnforceBlockUpgrade;\n     int nMajorityRejectBlockOutdated;\n     int nMajorityWindow;\n+    /**\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n+     * Examples: 1916 for 95%, 1512 for testchains.\n+     */\n+    uint32_t nRuleChangeActivationThreshold;\n+    uint32_t nMinerConfirmationWindow;\n+    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "8485ad38efc94ad4b40a93dc02146f595b9d27c5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -406,6 +406,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));"
      },
      {
        "sha": "b9f07038a5a24e09a228219dac7386bbb9c34072",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 6,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -23,6 +23,7 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n+#include \"versionbits.h\"\n \n #include <sstream>\n \n@@ -1817,6 +1818,51 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     }\n }\n \n+// Protected by cs_main\n+static VersionBitsCache versionbitscache;\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n+        if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n+            nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n+/**\n+ * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n+ */\n+class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    int bit;\n+\n+public:\n+    WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n+\n+    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    {\n+        return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n+               ((pindex->nVersion >> bit) & 1) != 0 &&\n+               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+    }\n+};\n+\n+// Protected by cs_main\n+static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n+\n static int64_t nTimeVerify = 0;\n static int64_t nTimeConnect = 0;\n static int64_t nTimeIndex = 0;\n@@ -2139,24 +2185,42 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n \n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     static bool fWarned = false;\n-    if (!IsInitialBlockDownload() && !fWarned)\n+    if (!IsInitialBlockDownload())\n     {\n         int nUpgraded = 0;\n         const CBlockIndex* pindex = chainActive.Tip();\n+        for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n+            WarningBitsConditionChecker checker(bit);\n+            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            if (state == THRESHOLD_ACTIVE || state == THRESHOLD_LOCKED_IN) {\n+                if (state == THRESHOLD_ACTIVE) {\n+                    strMiscWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n+                    if (!fWarned) {\n+                        CAlert::Notify(strMiscWarning, true);\n+                        fWarned = true;\n+                    }\n+                } else {\n+                    LogPrintf(\"%s: unknown new rules are about to activate (versionbit %i)\\n\", __func__, bit);\n+                }\n+            }\n+        }\n         for (int i = 0; i < 100 && pindex != NULL; i++)\n         {\n-            if (pindex->nVersion > CBlock::CURRENT_VERSION)\n+            int32_t nExpectedVersion = ComputeBlockVersion(pindex->pprev, chainParams.GetConsensus());\n+            if (pindex->nVersion > VERSIONBITS_LAST_OLD_BLOCK_VERSION && (pindex->nVersion & ~nExpectedVersion) != 0)\n                 ++nUpgraded;\n             pindex = pindex->pprev;\n         }\n         if (nUpgraded > 0)\n-            LogPrintf(\"%s: %d of last 100 blocks above version %d\\n\", __func__, nUpgraded, (int)CBlock::CURRENT_VERSION);\n+            LogPrintf(\"%s: %d of last 100 blocks have unexpected version\\n\", __func__, nUpgraded);\n         if (nUpgraded > 100/2)\n         {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n-            CAlert::Notify(strMiscWarning, true);\n-            fWarned = true;\n+            strMiscWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n+            if (!fWarned) {\n+                CAlert::Notify(strMiscWarning, true);\n+                fWarned = true;\n+            }\n         }\n     }\n }\n@@ -3428,6 +3492,10 @@ void UnloadBlockIndex()\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n     recentRejects.reset(NULL);\n+    versionbitscache.Clear();\n+    for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n+        warningcache[b].clear();\n+    }\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;"
      },
      {
        "sha": "c3069d25ea7a96980626f7ef6da508c0fa4a6e26",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -492,4 +492,8 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n+/**\n+ * Determine what nVersion a new block should use.\n+ */\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n #endif // BITCOIN_MAIN_H"
      },
      {
        "sha": "bb67989cd11da987bf448953b83242d09bafb34e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -99,11 +99,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n-    // -regtest only: allow overriding block.nVersion with\n-    // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n-        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n-\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);\n@@ -142,6 +137,12 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n+        pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+        // -regtest only: allow overriding block.nVersion with\n+        // -blockversion=N to test forking scenarios\n+        if (Params().MineBlocksOnDemand())\n+            pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n         map<uint256, vector<COrphan*> > mapDependers;"
      },
      {
        "sha": "daf0a250e388140437d56cec9a286ec4c01ae066",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -21,7 +21,6 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n@@ -49,7 +48,7 @@ class CBlockHeader\n \n     void SetNull()\n     {\n-        nVersion = CBlockHeader::CURRENT_VERSION;\n+        nVersion = 0;\n         hashPrevBlock.SetNull();\n         hashMerkleRoot.SetNull();\n         nTime = 0;"
      },
      {
        "sha": "c0e1d23506633b7bf0f57a837145fde736101a03",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -203,13 +203,40 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n-    chainActive.Tip()->nHeight = 209999;\n+    // Create an actual 209999-long block chain (without valid blocks).\n+    while (chainActive.Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = 210000;\n+    // Extend to a 210000-long block chain.\n+    while (chainActive.Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = nHeight;\n+    // Delete the dummy blocks again.\n+    while (chainActive.Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = chainActive.Tip();\n+        chainActive.SetTip(del->pprev);\n+        pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n+        delete del->phashBlock;\n+        delete del;\n+    }\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);"
      },
      {
        "sha": "fbb60c0fc598eca274bed0f386f157bfacdc238e",
        "filename": "src/versionbits.cpp",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"versionbits.h\"\n+\n+ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+{\n+    int nPeriod = Period(params);\n+    int nThreshold = Threshold(params);\n+    int64_t nTimeStart = BeginTime(params);\n+    int64_t nTimeTimeout = EndTime(params);\n+\n+    // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n+    if (pindexPrev != NULL) {\n+        pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+    }\n+\n+    // Walk backwards in steps of nPeriod to find a pindexPrev whose information is known\n+    std::vector<const CBlockIndex*> vToCompute;\n+    while (cache.count(pindexPrev) == 0) {\n+        if (pindexPrev == NULL) {\n+            // The genesis block is by definition defined.\n+            cache[pindexPrev] = THRESHOLD_DEFINED;\n+            break;\n+        }\n+        if (pindexPrev->GetMedianTimePast() < nTimeStart) {\n+            // Optimizaton: don't recompute down further, as we know every earlier block will be before the start time\n+            cache[pindexPrev] = THRESHOLD_DEFINED;\n+            break;\n+        }\n+        vToCompute.push_back(pindexPrev);\n+        pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+    }\n+\n+    // At this point, cache[pindexPrev] is known\n+    assert(cache.count(pindexPrev));\n+    ThresholdState state = cache[pindexPrev];\n+\n+    // Now walk forward and compute the state of descendants of pindexPrev\n+    while (!vToCompute.empty()) {\n+        ThresholdState stateNext = state;\n+        pindexPrev = vToCompute.back();\n+        vToCompute.pop_back();\n+\n+        switch (state) {\n+            case THRESHOLD_DEFINED: {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = THRESHOLD_FAILED;\n+                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                    stateNext = THRESHOLD_STARTED;\n+                }\n+                break;\n+            }\n+            case THRESHOLD_STARTED: {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = THRESHOLD_FAILED;\n+                    break;\n+                }\n+                // We need to count\n+                const CBlockIndex* pindexCount = pindexPrev;\n+                int count = 0;\n+                for (int i = 0; i < nPeriod; i++) {\n+                    if (Condition(pindexCount, params)) {\n+                        count++;\n+                    }\n+                    pindexCount = pindexCount->pprev;\n+                }\n+                if (count >= nThreshold) {\n+                    stateNext = THRESHOLD_LOCKED_IN;\n+                }\n+                break;\n+            }\n+            case THRESHOLD_LOCKED_IN: {\n+                // Always progresses into ACTIVE.\n+                stateNext = THRESHOLD_ACTIVE;\n+                break;\n+            }\n+            case THRESHOLD_FAILED:\n+            case THRESHOLD_ACTIVE: {\n+                // Nothing happens, these are terminal states.\n+                break;\n+            }\n+        }\n+        cache[pindexPrev] = state = stateNext;\n+    }\n+\n+    return state;\n+}\n+\n+namespace\n+{\n+/**\n+ * Class to implement versionbits logic.\n+ */\n+class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n+private:\n+    const Consensus::DeploymentPos id;\n+\n+protected:\n+    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    {\n+        return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n+    }\n+\n+public:\n+    VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}\n+    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }\n+};\n+\n+}\n+\n+ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+}\n+\n+uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    return VersionBitsConditionChecker(pos).Mask(params);\n+}\n+\n+void VersionBitsCache::Clear()\n+{\n+    for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n+        caches[d].clear();\n+    }\n+}"
      },
      {
        "sha": "04f47382727968b0014164b91f0930d4013bd7b3",
        "filename": "src/versionbits.h",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80fe0d958524d742655898be8c4b9b8c8e2ee1e/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VERSIONBITS\n+#define BITCOIN_CONSENSUS_VERSIONBITS\n+\n+#include \"chain.h\"\n+#include <map>\n+\n+/** What block version to use for new blocks (pre versionbits) */\n+static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n+/** What bits to set in version for versionbits blocks */\n+static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;\n+/** What bitmask determines whether versionbits is in use */\n+static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n+/** Total bits available for versionbits */\n+static const int32_t VERSIONBITS_NUM_BITS = 29;\n+\n+enum ThresholdState {\n+    THRESHOLD_DEFINED,\n+    THRESHOLD_STARTED,\n+    THRESHOLD_LOCKED_IN,\n+    THRESHOLD_ACTIVE,\n+    THRESHOLD_FAILED,\n+};\n+\n+// A map that gives the state for blocks whose height is a multiple of Period().\n+// The map is indexed by the block's parent, however, so all keys in the map\n+// will either be NULL or a block with (height + 1) % Period() == 0.\n+typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n+\n+/**\n+ * Abstract class that implements BIP9-style threshold logic, and caches results.\n+ */\n+class AbstractThresholdConditionChecker {\n+protected:\n+    virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n+    virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n+    virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual int Period(const Consensus::Params& params) const =0;\n+    virtual int Threshold(const Consensus::Params& params) const =0;\n+\n+public:\n+    // Note that the function below takes a pindexPrev as input: they compute information for block B based on its parent.\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+};\n+\n+struct VersionBitsCache\n+{\n+    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+    void Clear();\n+};\n+\n+ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDA1N2ZhNDdiOGFhZGYwNzhmNWY2NDk0YTljYjYxZTJkNTIyZTIw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T01:57:36Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:39:34Z"
      },
      "message": "Versionbits tests",
      "tree": {
        "sha": "3b34ead1d3a0be0253057aa0d827e14b676f164e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b34ead1d3a0be0253057aa0d827e14b676f164e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4057fa47b8aadf078f5f6494a9cb61e2d522e20/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80fe0d958524d742655898be8c4b9b8c8e2ee1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f80fe0d958524d742655898be8c4b9b8c8e2ee1e"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 186,
      "deletions": 0
    },
    "files": [
      {
        "sha": "47643c5e93622cdf58ead2a739fc9f043e463893",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4057fa47b8aadf078f5f6494a9cb61e2d522e20/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4057fa47b8aadf078f5f6494a9cb61e2d522e20/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
        "patch": "@@ -74,6 +74,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "9de8461d847be4fb1c089089bb246c115c0b1a76",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "added",
        "additions": 185,
        "deletions": 0,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4057fa47b8aadf078f5f6494a9cb61e2d522e20/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4057fa47b8aadf078f5f6494a9cb61e2d522e20/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
        "patch": "@@ -0,0 +1,185 @@\n+// Copyright (c) 2014-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"random.h\"\n+#include \"versionbits.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+/* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n+int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n+\n+static const Consensus::Params paramsDummy = Consensus::Params();\n+\n+class TestConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    mutable ThresholdConditionCache cache;\n+\n+public:\n+    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const { return 1000; }\n+    int Threshold(const Consensus::Params& params) const { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n+};\n+\n+#define CHECKERS 6\n+\n+class VersionBitsTester\n+{\n+    // A fake blockchain\n+    std::vector<CBlockIndex*> vpblock;\n+\n+    // 6 independent checkers for the same bit.\n+    // The first one performs all checks, the second only 50%, the third only 25%, etc...\n+    // This is to test whether lack of cached information leads to the same results.\n+    TestConditionChecker checker[CHECKERS];\n+\n+    // Test counter (to identify failures)\n+    int num;\n+\n+public:\n+    VersionBitsTester() : num(0) {}\n+\n+    VersionBitsTester& Reset() {\n+        for (unsigned int i = 0; i < vpblock.size(); i++) {\n+            delete vpblock[i];\n+        }\n+        for (unsigned int  i = 0; i < CHECKERS; i++) {\n+            checker[i] = TestConditionChecker();\n+        }\n+        vpblock.clear();\n+        return *this;\n+    }\n+\n+    ~VersionBitsTester() {\n+         Reset();\n+    }\n+\n+    VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {\n+        while (vpblock.size() < height) {\n+            CBlockIndex* pindex = new CBlockIndex();\n+            pindex->nHeight = vpblock.size();\n+            pindex->pprev = vpblock.size() > 0 ? vpblock.back() : NULL;\n+            pindex->nTime = nTime;\n+            pindex->nVersion = nVersion;\n+            pindex->BuildSkip();\n+            vpblock.push_back(pindex);\n+        }\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestDefined() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_DEFINED, strprintf(\"Test %i for DEFINED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestStarted() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_STARTED, strprintf(\"Test %i for STARTED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestLockedIn() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestActive() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestFailed() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_FAILED, strprintf(\"Test %i for FAILED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(versionbits_test)\n+{\n+    for (int i = 0; i < 64; i++) {\n+        // DEFINED -> FAILED\n+        VersionBitsTester().TestDefined()\n+                           .Mine(1, TestTime(1), 0x100).TestDefined()\n+                           .Mine(11, TestTime(11), 0x100).TestDefined()\n+                           .Mine(989, TestTime(989), 0x100).TestDefined()\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined()\n+                           .Mine(1000, TestTime(20000), 0x100).TestFailed()\n+                           .Mine(1999, TestTime(30001), 0x100).TestFailed()\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed()\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed()\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed()\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed()\n+\n+        // DEFINED -> STARTED -> FAILED\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x100).TestStarted() // So that's what happens the next period\n+                           .Mine(2051, TestTime(10010), 0).TestStarted() // 51 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 899 new blocks\n+                           .Mine(3000, TestTime(20000), 0).TestFailed() // 50 old blocks (so 899 out of the past 1000)\n+                           .Mine(4000, TestTime(20010), 0x100).TestFailed()\n+\n+        // DEFINED -> STARTED -> FAILED while threshold reached\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n+                           .Mine(2999, TestTime(30000), 0x100).TestStarted() // 999 new blocks\n+                           .Mine(3000, TestTime(30000), 0x100).TestFailed() // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestFailed()\n+                           .Mine(4000, TestTime(30002), 0).TestFailed()\n+                           .Mine(14333, TestTime(30003), 0).TestFailed()\n+                           .Mine(24000, TestTime(40000), 0).TestFailed()\n+\n+        // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted() // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 900 new blocks\n+                           .Mine(2999, TestTime(19999), 0x200).TestStarted() // 49 old blocks\n+                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn() // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn()\n+                           .Mine(4000, TestTime(30002), 0).TestActive()\n+                           .Mine(14333, TestTime(30003), 0).TestActive()\n+                           .Mine(24000, TestTime(40000), 0).TestActive();\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGNjZGM0ZDUxOWY0YTkzMzFiYWNlOGU1ZDMzZWM3ZjU2YjY2Mzk5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-03T20:00:03Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:44:16Z"
      },
      "message": "Softfork status report in RPC",
      "tree": {
        "sha": "199c764061d63b552ad560150e760d173d6b1b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/199c764061d63b552ad560150e760d173d6b1b46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4057fa47b8aadf078f5f6494a9cb61e2d522e20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4057fa47b8aadf078f5f6494a9cb61e2d522e20"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "43270e7ccc3780d4824362fcd6d0cf1fc4bb6c95",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
        "patch": "@@ -5285,7 +5285,11 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n      return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n  }\n \n-\n+ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n+}\n \n class CMainCleanup\n {"
      },
      {
        "sha": "bb77b570b0d9983062b81fa67fa8872879c7d5c8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
        "patch": "@@ -25,6 +25,7 @@\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\"\n+#include \"versionbits.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -238,6 +239,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n \n \n+/** Get the BIP9 state for a given deployment at the current tip. */\n+ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;"
      },
      {
        "sha": "f475ec7f06c3e2a4d7e5f789f4bffbf68021681b",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38ccdc4d519f4a9331bace8e5d33ec7f56b66399/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
        "patch": "@@ -496,6 +496,20 @@ Object SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, c\n     return rv;\n }\n \n+static Value BIP9SoftForkDesc(const std::string& name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+{\n+    Object rv;\n+    rv.push_back(Pair(\"id\", name));\n+    switch (VersionBitsTipState(consensusParams, id)) {\n+    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n+    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n+    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n+    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n+    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    }\n+    return rv;\n+}\n+\n Value getblockchaininfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -523,6 +537,12 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n             \"        },\\n\"\n             \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n             \"     }, ...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"bip9_softforks\\\": [       (array) status of BIP9 softforks in progress\\n\"\n+            \"     {\\n\"\n+            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of the softfork\\n\"\n+            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"lockedin\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"     }\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -545,10 +565,12 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n     Array softforks;\n+    Array bip9_softforks;\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n+    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n     if (fPruneMode)\n     {"
      }
    ]
  },
  {
    "sha": "b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2FiOGUyMDhhMTE4MWQ4YzIwMTQwZGNmZDYwMDNmMzc1ZjQ0YjJh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-03-09T21:00:53Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:46:17Z"
      },
      "message": "Add testing of ComputeBlockVersion",
      "tree": {
        "sha": "593a30b963f637855356651f5ea0d212b19c0f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/593a30b963f637855356651f5ea0d212b19c0f5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38ccdc4d519f4a9331bace8e5d33ec7f56b66399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38ccdc4d519f4a9331bace8e5d33ec7f56b66399"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 120,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c139f8a893fce800a75d726ff735672abbd39bd1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
        "patch": "@@ -41,6 +41,9 @@ class CMainParams : public CChainParams {\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -145,6 +148,9 @@ class CTestNetParams : public CMainParams {\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -209,6 +215,9 @@ class CRegTestParams : public CTestNetParams {\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "66f3b9c360b1571a6750c878b4f772016ab3b2bc",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
        "patch": "@@ -14,7 +14,8 @@ namespace Consensus {\n \n enum DeploymentPos\n {\n-    MAX_VERSION_BITS_DEPLOYMENTS = 0,\n+    DEPLOYMENT_TESTDUMMY,\n+    MAX_VERSION_BITS_DEPLOYMENTS\n };\n \n /**"
      },
      {
        "sha": "63dc4726bc8ea00d580943daabe1564771987295",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ab8e208a1181d8c20140dcfd6003f375f44b2a/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
        "patch": "@@ -6,6 +6,9 @@\n #include \"random.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"consensus/params.h\"\n \n #include <boost/test/unit_test.hpp>\n \n@@ -124,6 +127,8 @@ class VersionBitsTester\n         num++;\n         return *this;\n     }\n+\n+    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : NULL; }\n };\n \n BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n@@ -182,4 +187,108 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n+{\n+    // Check that ComputeBlockVersion will set the appropriate bit correctly\n+    // on mainnet.\n+    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n+    // Use the TESTDUMMY deployment for testing purposes.\n+    int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n+    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n+    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+\n+    assert(nStartTime < nTimeout);\n+\n+    // In the first chain, test that the bit is set by CBV until it has failed.\n+    // In the second chain, test the bit is set by CBV while STARTED and\n+    // LOCKED-IN, and then no longer set while ACTIVE.\n+    VersionBitsTester firstChain, secondChain;\n+\n+    // Start generating blocks before nStartTime\n+    int64_t nTime = nStartTime - 1;\n+\n+    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n+    // should not be set.\n+    CBlockIndex *lastBlock = NULL;\n+    lastBlock = firstChain.Mine(2016, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // Mine 2011 more blocks at the old time, and check that CBV isn't setting the bit yet.\n+    for (int i=1; i<2012; i++) {\n+        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n+        // to be 4, and the bit we're testing happens to be bit 28.\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    }\n+    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n+    // CBV should still not yet set the bit.\n+    nTime = nStartTime;\n+    for (int i=2012; i<=2016; i++) {\n+        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    }\n+\n+    // Advance to the next period and transition to STARTED,\n+    lastBlock = firstChain.Mine(6048, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // so ComputeBlockVersion should now set the bit,\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    // and should also be using the VERSIONBITS_TOP_BITS.\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+\n+    // Check that ComputeBlockVersion will set the bit until nTimeout\n+    nTime += 600;\n+    int blocksToMine = 4032; // test blocks for up to 2 time periods\n+    int nHeight = 6048;\n+    // These blocks are all before nTimeout is reached.\n+    while (nTime < nTimeout && blocksToMine > 0) {\n+        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        blocksToMine--;\n+        nTime += 600;\n+        nHeight += 1;\n+    };\n+\n+    nTime = nTimeout;\n+    // FAILED is only triggered at the end of a period, so CBV should be setting\n+    // the bit until the period transition.\n+    for (int i=0; i<2015; i++) {\n+        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        nHeight += 1;\n+    }\n+    // The next block should trigger no longer setting the bit.\n+    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // On a new chain:\n+    // verify that the bit will be set after lock-in, and then stop being set\n+    // after activation.\n+    nTime = nStartTime;\n+\n+    // Mine one period worth of blocks, and check that the bit will be on for the\n+    // next period.\n+    lastBlock = secondChain.Mine(2016, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+\n+    // Mine another period worth of blocks, signaling the new bit.\n+    lastBlock = secondChain.Mine(4032, nStartTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    // After one period of setting the bit on each block, it should have locked in.\n+    // We keep setting the bit for one more period though, until activation.\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+\n+    // Now check that we keep mining the block until the end of this period, and\n+    // then stop at the beginning of the next period.\n+    lastBlock = secondChain.Mine(6047, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    lastBlock = secondChain.Mine(6048, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // Finally, verify that after a soft fork has activated, CBV no longer uses\n+    // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n+    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+}\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "741a06aa4d34d97875e850e47801b93b967ef6e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDFhMDZhYTRkMzRkOTc4NzVlODUwZTQ3ODAxYjkzYjk2N2VmNmU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-09T14:48:20Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:46:26Z"
      },
      "message": "Test versionbits deployments",
      "tree": {
        "sha": "207cf5463723b0ac5fc815dcefad153c01122fb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/207cf5463723b0ac5fc815dcefad153c01122fb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/741a06aa4d34d97875e850e47801b93b967ef6e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741a06aa4d34d97875e850e47801b93b967ef6e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/741a06aa4d34d97875e850e47801b93b967ef6e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741a06aa4d34d97875e850e47801b93b967ef6e5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ab8e208a1181d8c20140dcfd6003f375f44b2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ab8e208a1181d8c20140dcfd6003f375f44b2a"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f86a06a3f7f70f0b12f0236f36635fe3d3556fb",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/741a06aa4d34d97875e850e47801b93b967ef6e5/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/741a06aa4d34d97875e850e47801b93b967ef6e5/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=741a06aa4d34d97875e850e47801b93b967ef6e5",
        "patch": "@@ -185,6 +185,28 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(14333, TestTime(30003), 0).TestActive()\n                            .Mine(24000, TestTime(40000), 0).TestActive();\n     }\n+\n+    // Sanity checks of version bit deployments\n+    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n+        // Make sure that no deployment tries to set an invalid bit.\n+        BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n+\n+        // Verify that the deployment windows of different deployment using the\n+        // same bit are disjoint.\n+        // This test may need modification at such time as a new deployment\n+        // is proposed that reuses the bit of an activated soft fork, before the\n+        // end time of that soft fork.  (Alternatively, the end time of that\n+        // activated soft fork could be later changed to be earlier to avoid\n+        // overlap.)\n+        for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n+            if (VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)j) == bitmask) {\n+                BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n+                        mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n+            }\n+        }\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)"
      }
    ]
  },
  {
    "sha": "148e3ba757128f12f43889bfba2007aff9d6820a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDhlM2JhNzU3MTI4ZjEyZjQzODg5YmZiYTIwMDdhZmY5ZDY4MjBh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-15T20:28:56Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:52:03Z"
      },
      "message": "Make GetAncestor more robust\n\nThis check for pskip != NULL was introduced in #5927 for 0.12.\nIt is in general safer and allows GetAncestor to be used in more places, specifically in the mining tests for the backport of BIP 68 to 0.11.",
      "tree": {
        "sha": "8347cb79f172ffe5a523e37557a26cebc5b6380a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8347cb79f172ffe5a523e37557a26cebc5b6380a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/148e3ba757128f12f43889bfba2007aff9d6820a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/148e3ba757128f12f43889bfba2007aff9d6820a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/148e3ba757128f12f43889bfba2007aff9d6820a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/148e3ba757128f12f43889bfba2007aff9d6820a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "741a06aa4d34d97875e850e47801b93b967ef6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741a06aa4d34d97875e850e47801b93b967ef6e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/741a06aa4d34d97875e850e47801b93b967ef6e5"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f2573c6d4829d8874f7464cec863013ef41c0480",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/148e3ba757128f12f43889bfba2007aff9d6820a/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/148e3ba757128f12f43889bfba2007aff9d6820a/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=148e3ba757128f12f43889bfba2007aff9d6820a",
        "patch": "@@ -82,9 +82,10 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n     while (heightWalk > height) {\n         int heightSkip = GetSkipHeight(heightWalk);\n         int heightSkipPrev = GetSkipHeight(heightWalk - 1);\n-        if (heightSkip == height ||\n-            (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n-                                      heightSkipPrev >= height))) {\n+         if (pindexWalk->pskip != NULL &&\n+             (heightSkip == height ||\n+              (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n+                                        heightSkipPrev >= height)))) {\n             // Only follow pskip if pprev->pskip isn't better than pskip->pprev.\n             pindexWalk = pindexWalk->pskip;\n             heightWalk = heightSkip;"
      }
    ]
  },
  {
    "sha": "57b7a5231e4fbf771343d5e56855d6513d9caea5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2I3YTUyMzFlNGZiZjc3MTM0M2Q1ZTU2ODU1ZDY1MTNkOWNhZWE1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-07T20:44:16Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:52:03Z"
      },
      "message": "[0.11] Backport BIP 68",
      "tree": {
        "sha": "45263ef399af79636231f80f1e64bd05ecb64cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45263ef399af79636231f80f1e64bd05ecb64cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57b7a5231e4fbf771343d5e56855d6513d9caea5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b7a5231e4fbf771343d5e56855d6513d9caea5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57b7a5231e4fbf771343d5e56855d6513d9caea5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b7a5231e4fbf771343d5e56855d6513d9caea5/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "148e3ba757128f12f43889bfba2007aff9d6820a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/148e3ba757128f12f43889bfba2007aff9d6820a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/148e3ba757128f12f43889bfba2007aff9d6820a"
      }
    ],
    "stats": {
      "total": 743,
      "additions": 696,
      "deletions": 47
    },
    "files": [
      {
        "sha": "bd61282fa18e49a2530cd2ba89db137f713bee21",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "added",
        "additions": 387,
        "deletions": 0,
        "changes": 387,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -0,0 +1,387 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test BIP68 implementation (mempool only)\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+\n+COIN = 100000000\n+SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n+SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n+SEQUENCE_LOCKTIME_GRANULARITY = 9 # this is a bit-shift\n+SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n+\n+# RPC error for non-BIP68 final transactions\n+NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+\n+class BIP68Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\"]))\n+        self.is_network_split = False\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+\n+    def run_test(self):\n+        # Generate some coins\n+        self.nodes[0].generate(110)\n+\n+        print \"Running test disable flag\"\n+        self.test_disable_flag()\n+\n+        print \"Running test sequence-lock-confirmed-inputs\"\n+        self.test_sequence_lock_confirmed_inputs()\n+\n+        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        self.test_sequence_lock_unconfirmed_inputs()\n+\n+        # This test needs to change when BIP68 becomes consensus\n+        print \"Running test BIP68 not consensus\"\n+        self.test_bip68_not_consensus()\n+\n+        print \"Passed\\n\"\n+\n+    # Test that BIP68 is not in effect if tx version is 1, or if\n+    # the first sequence bit is set.\n+    def test_disable_flag(self):\n+        # Create some unconfirmed inputs\n+        new_addr = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(new_addr, 2) # send 2 BTC\n+\n+        utxos = self.nodes[0].listunspent(0, 0)\n+        assert(len(utxos) > 0)\n+\n+        utxo = utxos[0]\n+\n+        tx1 = CTransaction()\n+        value = satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN\n+\n+        # Check that the disable flag disables relative locktime.\n+        # If sequence locks were used, this would require 1 block for the\n+        # input to mature.\n+        sequence_value = SEQUENCE_LOCKTIME_DISABLE_FLAG | 1\n+        tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n+        tx1.vout = [CTxOut(value, CScript([b'a']))]\n+\n+        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n+        tx1_id = int(tx1_id, 16)\n+\n+        # This transaction will enable sequence-locks, so this transaction should\n+        # fail\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        sequence_value = sequence_value & 0x7fffffff\n+        tx2.vin = [CTxIn(COutPoint(tx1_id, 0), nSequence=sequence_value)]\n+        tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n+        tx2.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Setting the version back down to 1 should disable the sequence lock,\n+        # so this should be accepted.\n+        tx2.nVersion = 1\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+\n+    # Calculate the median time past of a prior block (\"confirmations\" before\n+    # the current tip).\n+    def get_median_time_past(self, confirmations):\n+        block_hash = self.nodes[0].getblockhash(self.nodes[0].getblockcount()-confirmations)\n+        return self.nodes[0].getblockheader(block_hash)[\"mediantime\"]\n+\n+    # Test that sequence locks are respected for transactions spending confirmed inputs.\n+    def test_sequence_lock_confirmed_inputs(self):\n+        # Create lots of confirmed utxos, and use them to generate lots of random\n+        # transactions.\n+        max_outputs = 50\n+        addresses = []\n+        while len(addresses) < max_outputs:\n+            addresses.append(self.nodes[0].getnewaddress())\n+        while len(self.nodes[0].listunspent()) < 200:\n+            import random\n+            random.shuffle(addresses)\n+            num_outputs = random.randint(1, max_outputs)\n+            outputs = {}\n+            for i in xrange(num_outputs):\n+                outputs[addresses[i]] = random.randint(1, 20)*0.01\n+            self.nodes[0].sendmany(\"\", outputs)\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+\n+        # Try creating a lot of random transactions.\n+        # Each time, choose a random number of inputs, and randomly set\n+        # some of those inputs to be sequence locked (and randomly choose\n+        # between height/time locking). Small random chance of making the locks\n+        # all pass.\n+        for i in xrange(400):\n+            # Randomly choose up to 10 inputs\n+            num_inputs = random.randint(1, 10)\n+            random.shuffle(utxos)\n+\n+            # Track whether any sequence locks used should fail\n+            should_pass = True\n+            \n+            # Track whether this transaction was built with sequence locks\n+            using_sequence_locks = False\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            value = 0\n+            for j in xrange(num_inputs):\n+                sequence_value = 0xfffffffe # this disables sequence locks\n+\n+                # 50% chance we enable sequence locks\n+                if random.randint(0,1):\n+                    using_sequence_locks = True\n+\n+                    # 10% of the time, make the input sequence value pass\n+                    input_will_pass = (random.randint(1,10) == 1)\n+                    sequence_value = utxos[j][\"confirmations\"]\n+                    if not input_will_pass:\n+                        sequence_value += 1\n+                        should_pass = False\n+\n+                    # Figure out what the median-time-past was for the confirmed input\n+                    # Note that if an input has N confirmations, we're going back N blocks\n+                    # from the tip so that we're looking up MTP of the block\n+                    # PRIOR to the one the input appears in, as per the BIP68 spec.\n+                    orig_time = self.get_median_time_past(utxos[j][\"confirmations\"])\n+                    cur_time = self.get_median_time_past(0) # MTP of the tip\n+\n+                    # can only timelock this input if it's not too old -- otherwise use height\n+                    can_time_lock = True\n+                    if ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY) >= SEQUENCE_LOCKTIME_MASK:\n+                        can_time_lock = False\n+\n+                    # if time-lockable, then 50% chance we make this a time lock\n+                    if random.randint(0,1) and can_time_lock:\n+                        # Find first time-lock value that fails, or latest one that succeeds\n+                        time_delta = sequence_value << SEQUENCE_LOCKTIME_GRANULARITY\n+                        if input_will_pass and time_delta > cur_time - orig_time:\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)\n+                        elif (not input_will_pass and time_delta <= cur_time - orig_time):\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)+1\n+                        sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+                tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n+                value += utxos[j][\"amount\"]*COIN\n+            # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n+            tx_size = len(ToHex(tx))/2 + 120*num_inputs + 50\n+            tx.vout.append(CTxOut(value-self.relayfee*tx_size*COIN/1000, CScript([b'a'])))\n+            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+\n+            try:\n+                self.nodes[0].sendrawtransaction(rawtx)\n+            except JSONRPCException as exp:\n+                assert(not should_pass and using_sequence_locks)\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+            else:\n+                assert(should_pass or not using_sequence_locks)\n+                # Recalculate utxos if we successfully sent the transaction\n+                utxos = self.nodes[0].listunspent()\n+\n+    # Test that sequence locks on unconfirmed inputs must have nSequence\n+    # height or time of 0 to be accepted.\n+    # Then test that BIP68-invalid transactions are removed from the mempool\n+    # after a reorg.\n+    def test_sequence_lock_unconfirmed_inputs(self):\n+        # Store height so we can easily reset the chain at the end of the test\n+        cur_height = self.nodes[0].getblockcount()\n+\n+        # Create a mempool tx.\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Anyone-can-spend mempool tx.\n+        # Sequence lock of 0 should pass.\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(tx2_raw)\n+\n+        # Create a spend of the 0th output of orig_tx with a sequence lock\n+        # of 1, and test what happens when submitting.\n+        # orig_tx.vout[0] must be an anyone-can-spend output\n+        def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n+            sequence_value = 1\n+            if not use_height_lock:\n+                sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            tx.vin = [CTxIn(COutPoint(orig_tx.sha256, 0), nSequence=sequence_value)]\n+            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee*COIN), CScript([b'a']))]\n+            tx.rehash()\n+\n+            try:\n+                node.sendrawtransaction(ToHex(tx))\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+                assert(orig_tx.hash in node.getrawmempool())\n+            else:\n+                # orig_tx must not be in mempool\n+                assert(orig_tx.hash not in node.getrawmempool())\n+            return tx\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Now mine some blocks, but make sure tx2 doesn't get mined.\n+        # Use prioritisetransaction to lower the effective feerate to 0\n+        self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n+        cur_time = int(time.time())\n+        for i in xrange(10):\n+            self.nodes[0].setmocktime(cur_time + 600)\n+            self.nodes[0].generate(1)\n+            cur_time += 600\n+\n+        assert(tx2.hash in self.nodes[0].getrawmempool())\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Mine tx2, and then try again\n+        self.nodes[0].prioritisetransaction(tx2.hash, 1e15, int(self.relayfee*COIN))\n+\n+        # Advance the time on the node so that we can test timelocks\n+        self.nodes[0].setmocktime(cur_time+600)\n+        self.nodes[0].generate(1)\n+        assert(tx2.hash not in self.nodes[0].getrawmempool())\n+\n+        # Now that tx2 is not in the mempool, a sequence locked spend should\n+        # succeed\n+        tx3 = test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        self.nodes[0].generate(1)\n+        assert(tx3.hash not in self.nodes[0].getrawmempool())\n+\n+        # One more test, this time using height locks\n+        tx4 = test_nonzero_locks(tx3, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx4.hash in self.nodes[0].getrawmempool())\n+\n+        # Now try combining confirmed and unconfirmed inputs\n+        tx5 = test_nonzero_locks(tx4, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx5.hash not in self.nodes[0].getrawmempool())\n+\n+        utxos = self.nodes[0].listunspent()\n+        tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n+        tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n+        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(raw_tx5)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Test mempool-BIP68 consistency after reorg\n+        #\n+        # State of the transactions in the last blocks:\n+        # ... -> [ tx2 ] ->  [ tx3 ]\n+        #         tip-1        tip\n+        # And currently tx4 is in the mempool.\n+        #\n+        # If we invalidate the tip, tx3 should get added to the mempool, causing\n+        # tx4 to be removed (fails sequence-lock).\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        assert(tx4.hash not in self.nodes[0].getrawmempool())\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        # Now mine 2 empty blocks to reorg out the current tip (labeled tip-1 in\n+        # diagram above).\n+        # This would cause tx2 to be added back to the mempool, which in turn causes\n+        # tx3 to be removed.\n+        tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n+        height = self.nodes[0].getblockcount()\n+        for i in xrange(2):\n+            block = create_block(tip, create_coinbase(height), cur_time)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            tip = block.sha256\n+            height += 1\n+            self.nodes[0].submitblock(ToHex(block))\n+            cur_time += 1\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(tx3.hash not in mempool)\n+        assert(tx2.hash in mempool)\n+\n+        # Reset the chain and get rid of the mocktimed-blocks\n+        self.nodes[0].setmocktime(0)\n+        self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n+        self.nodes[0].generate(10)\n+\n+    # Make sure that BIP68 isn't being used to validate blocks.\n+    def test_bip68_not_consensus(self):\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Make an anyone-can-spend transaction\n+        tx2 = CTransaction()\n+        tx2.nVersion = 1\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+\n+        # sign tx2\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        \n+        # Now make an invalid spend of tx2 according to BIP68\n+        sequence_value = 100 # 100 block relative locktime\n+\n+        tx3 = CTransaction()\n+        tx3.nVersion = 2\n+        tx3.vin = [CTxIn(COutPoint(tx2.sha256, 0), nSequence=sequence_value)]\n+        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx3.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx3))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # make a block that violates bip68; ensure that the tip updates\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        block = create_block(tip, create_coinbase(self.nodes[0].getblockcount()+1))\n+        block.nVersion = 3\n+        block.vtx.extend([tx1, tx2, tx3])\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.nodes[0].submitblock(ToHex(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+\n+if __name__ == '__main__':\n+    BIP68Test().main()"
      },
      {
        "sha": "359a841705b3f9d8adecc5fc5e2bc34c56fa6684",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -230,6 +230,14 @@ def ser_int_vector(l):\n         r += struct.pack(\"<i\", i)\n     return r\n \n+# Deserialize from a hex string representation (eg from RPC)\n+def FromHex(obj, hex_string):\n+    obj.deserialize(cStringIO.StringIO(binascii.unhexlify(hex_string)))\n+    return obj\n+\n+# Convert a binary-serializable object to hex (eg for submission via RPC)\n+def ToHex(obj):\n+    return binascii.hexlify(obj.serialize()).decode('utf-8')\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n "
      },
      {
        "sha": "39bc68f6d66d0b96e5f94dffbd6fe234fd1f87e6",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -13,13 +13,17 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for LockTime() */\n+/** Flags for nSequence and nLockTime locks */\n enum {\n+    /* Interpret sequence numbers as relative lock-time constraints. */\n+    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n+\n     /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n     LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n };\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+/** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n+                                                           LOCKTIME_MEDIAN_TIME_PAST;\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "d267766d3d74e8b3a1fd6e2e9eb24b0a5c309480",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 148,
        "deletions": 2,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -704,9 +704,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;\n+    }\n     return true;\n }\n \n@@ -809,6 +810,127 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(mempool.cs);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // ConnectBlock(), the height of the block *being*\n+    // evaluated is what is used.\n+    // Thus if we want to know if a transaction can be part of the\n+    // *next* block, we need to use one more than chainActive.Height()\n+    index.nHeight = tip->nHeight + 1;\n+\n+    // pcoinsTip contains the UTXO set for chainActive.Tip()\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    std::vector<int> prevheights;\n+    prevheights.resize(tx.vin.size());\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+        CCoins coins;\n+        if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n+            return error(\"%s: Missing input\", __func__);\n+        }\n+        if (coins.nHeight == MEMPOOL_HEIGHT) {\n+            // Assume all mempool transaction confirm in the next block\n+            prevheights[txinIndex] = tip->nHeight + 1;\n+        } else {\n+            prevheights[txinIndex] = coins.nHeight;\n+        }\n+    }\n+\n+    std::pair<int, int64_t> lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n+    return EvaluateSequenceLocks(index, lockPair);\n+}\n+\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n@@ -1016,6 +1138,14 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n+\n+        // Only accept BIP68 sequence locked transactions that can be mined in the next\n+        // block; we don't want our mempool filled up with transactions that can't\n+        // be mined yet.\n+        // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n+        // CoinsViewCache instead of create its own\n+        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n@@ -1937,7 +2067,10 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+\n     int64_t nTimeStart = GetTimeMicros();\n+    std::vector<int> prevheights;\n+    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n@@ -1961,6 +2094,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            // Check that transaction is BIP68 final\n+            // BIP68 lock checks (as opposed to nLockTime checks) must\n+            // be in ConnectBlock because they require the UTXO set\n+            prevheights.resize(tx.vin.size());\n+            for (size_t j = 0; j < tx.vin.size(); j++) {\n+                prevheights[j] = view.AccessCoins(tx.vin[j].prevout.hash)->nHeight;\n+            }\n+\n+            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+                return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n+                                 REJECT_INVALID, \"bad-txns-nonfinal\");\n+            }\n+\n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;"
      },
      {
        "sha": "3a9b2543208070478680f7dab3a067856801152f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -347,7 +347,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n-/** \n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n+ * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n+ */\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+/**\n+ * Check if transaction will be BIP 68 final in the next block to be created.\n+ *\n+ * Simulates calling SequenceLocks() with data from the tip of the current active chain.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n+ */\n+bool CheckSequenceLocks(const CTransaction &tx, int flags);\n+\n+/**\n  * Closure representing one script verification\n  * Note that this stores references to the spending transaction \n  */"
      },
      {
        "sha": "f44d795c6d58a8912a964678522fc8bd7639b15f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -163,6 +163,10 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n+            // Check that transaction is BIP68 final\n+            if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+                continue;\n+\n             COrphan* porphan = NULL;\n             double dPriority = 0;\n             CAmount nTotalIn = 0;"
      },
      {
        "sha": "0c8c0c64818572fdbb790fe37843a81f7e0e587b",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -37,7 +37,7 @@ std::string CTxIn::ToString() const\n         str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n     else\n         str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24));\n-    if (nSequence != std::numeric_limits<unsigned int>::max())\n+    if (nSequence != SEQUENCE_FINAL)\n         str += strprintf(\", nSequence=%u\", nSequence);\n     str += \")\";\n     return str;"
      },
      {
        "sha": "0ac8ee03ffde19eaebd83160e79a8e44897338c7",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 30,
        "deletions": 8,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -61,13 +61,40 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+\n+    /* Below flags apply in the context of BIP 68*/\n+    /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n+     * relative lock-time. */\n+    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n+\n+    /* If CTxIn::nSequence encodes a relative lock-time and this flag\n+     * is set, the relative lock-time has units of 512 seconds,\n+     * otherwise it specifies blocks with a granularity of 1. */\n+    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n+\n+    /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n+     * applied to extract that lock-time from the sequence field. */\n+    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n+\n+    /* In order to use the same number of bits to encode roughly the\n+     * same wall-clock duration, and because blocks are naturally\n+     * limited to occur every 600s on average, the minimum granularity\n+     * for time-based relative lock-time is fixed at 512 seconds.\n+     * Converting from CTxIn::nSequence to seconds is performed by\n+     * multiplying by 512 = 2^9, or equivalently shifting up by\n+     * 9 bits. */\n+    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n+\n     CTxIn()\n     {\n-        nSequence = std::numeric_limits<unsigned int>::max();\n+        nSequence = SEQUENCE_FINAL;\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -78,11 +105,6 @@ class CTxIn\n         READWRITE(nSequence);\n     }\n \n-    bool IsFinal() const\n-    {\n-        return (nSequence == std::numeric_limits<uint32_t>::max());\n-    }\n-\n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n         return (a.prevout   == b.prevout &&"
      },
      {
        "sha": "91f6446d1bfc8be627eb4f92427fdeeafe0daa4c",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -1156,7 +1156,7 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (txTo->vin[nIn].IsFinal())\n+    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n     return true;"
      },
      {
        "sha": "35816fba88f72078ef7e5becd83446d675e12906",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 29,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -50,6 +50,20 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n+CBlockIndex CreateBlockIndex(int nHeight)\n+{\n+    CBlockIndex index;\n+    index.nHeight = nHeight;\n+    index.pprev = chainActive.Tip();\n+    return index;\n+}\n+\n+bool TestSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    LOCK(mempool.cs);\n+    return CheckSequenceLocks(tx, flags);\n+}\n+\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n@@ -67,6 +81,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n+    int baseheight = 0;\n     std::vector<CTransaction*>txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n@@ -79,7 +94,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = CTransaction(txCoinbase);\n-        if (txFirst.size() < 2)\n+        if (txFirst.size() == 0)\n+            baseheight = chainActive.Height();\n+        if (txFirst.size() < 4)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n         pblock->nNonce = blockinfo[i].nonce;\n@@ -240,49 +257,95 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n+    // height map\n+    std::vector<int> prevheights;\n \n-    // height locked\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    // relative height locked\n+    tx.nVersion = 2;\n+    tx.vin.resize(1);\n+    prevheights.resize(1);\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n+    tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = 0;\n+    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    prevheights[0] = baseheight + 1;\n+    tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx.nLockTime = chainActive.Tip()->nHeight+1;\n+    tx.nLockTime = 0;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+\n+    // relative time locked\n+    tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n-\n-    // time locked\n-    tx2.vin.resize(1);\n-    tx2.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx2.vin[0].prevout.n = 0;\n-    tx2.vin[0].scriptSig = CScript() << OP_1;\n-    tx2.vin[0].nSequence = 0;\n-    tx2.vout.resize(1);\n-    tx2.vout[0].nValue = 4900000000LL;\n-    tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n-    hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+\n+    // absolute height locked\n+    tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n+    prevheights[0] = baseheight + 3;\n+    tx.nLockTime = chainActive.Tip()->nHeight + 1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+\n+    // absolute time locked\n+    tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n+    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n+    prevheights.resize(1);\n+    prevheights[0] = baseheight + 4;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+\n+    // mempool-dependent transactions (not added)\n+    tx.vin[0].prevout.hash = hash;\n+    prevheights[0] = chainActive.Tip()->nHeight + 1;\n+    tx.nLockTime = 0;\n+    tx.vin[0].nSequence = 0;\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    tx.vin[0].nSequence = 1;\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG;\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n-    // Neither tx should have make it into the template.\n+    // None of the of the height/time locked tx should have made\n+    // it into the template because we check IsFinalTx and SequenceLocks in CreateNewBlock,\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n     delete pblocktemplate;\n \n-    // However if we advance height and time by one, both will.\n+    // However if we advance height by 1 and time by 512, all of them should be mined\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n-\n-    // FIXME: we should *actually* create a new block so the following test\n-    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.\n-    //BOOST_CHECK(CheckFinalTx(tx));\n-    //BOOST_CHECK(CheckFinalTx(tx2));\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      },
      {
        "sha": "185d2862eb91a1c1e9283a5ccaa24dc6c343f374",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b7a5231e4fbf771343d5e56855d6513d9caea5/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "patch": "@@ -65,7 +65,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     txCredit.vout.resize(1);\n     txCredit.vin[0].prevout.SetNull();\n     txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n-    txCredit.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txCredit.vout[0].scriptPubKey = scriptPubKey;\n     txCredit.vout[0].nValue = 0;\n \n@@ -82,7 +82,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txSpend.vout[0].scriptPubKey = CScript();\n     txSpend.vout[0].nValue = 0;\n "
      }
    ]
  },
  {
    "sha": "988d84691ebf8a9b896994b89992da610eadbe55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODhkODQ2OTFlYmY4YTliODk2OTk0Yjg5OTkyZGE2MTBlYWRiZTU1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-15T21:05:42Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:52:03Z"
      },
      "message": "fixup RPC test to work with 0.11",
      "tree": {
        "sha": "6c667a6c4134913d155e79f778e1015fff2803ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c667a6c4134913d155e79f778e1015fff2803ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/988d84691ebf8a9b896994b89992da610eadbe55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988d84691ebf8a9b896994b89992da610eadbe55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/988d84691ebf8a9b896994b89992da610eadbe55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988d84691ebf8a9b896994b89992da610eadbe55/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b7a5231e4fbf771343d5e56855d6513d9caea5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57b7a5231e4fbf771343d5e56855d6513d9caea5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 30,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c112ca171cf5b66b890dd429cf025630f2921d75",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988d84691ebf8a9b896994b89992da610eadbe55/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988d84691ebf8a9b896994b89992da610eadbe55/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=988d84691ebf8a9b896994b89992da610eadbe55",
        "patch": "@@ -27,6 +27,7 @@ testScripts=(\n     'merkle_blocks.py'\n     'signrawtransactions.py'\n     'walletbackup.py'\n+    'bip68-sequence.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'"
      },
      {
        "sha": "94744206a4b022cdc94023ee4eed5a91351047c5",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988d84691ebf8a9b896994b89992da610eadbe55/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988d84691ebf8a9b896994b89992da610eadbe55/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=988d84691ebf8a9b896994b89992da610eadbe55",
        "patch": "@@ -22,6 +22,9 @@\n # RPC error for non-BIP68 final transactions\n NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n \n+def satoshi_round(amount):\n+    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+\n class BIP68Test(BitcoinTestFramework):\n \n     def setup_network(self):\n@@ -101,7 +104,16 @@ def test_disable_flag(self):\n     # the current tip).\n     def get_median_time_past(self, confirmations):\n         block_hash = self.nodes[0].getblockhash(self.nodes[0].getblockcount()-confirmations)\n-        return self.nodes[0].getblockheader(block_hash)[\"mediantime\"]\n+        # Recreate calculation of median time past\n+        times = []\n+        while len(times) < 11:\n+            block = self.nodes[0].getblock(block_hash)\n+            times.append(block[\"time\"])\n+            if block[\"height\"] == 0:\n+                break;\n+            block_hash = block[\"previousblockhash\"]\n+        samples = len(times)\n+        return sorted(times)[samples/2]\n \n     # Test that sequence locks are respected for transactions spending confirmed inputs.\n     def test_sequence_lock_confirmed_inputs(self):\n@@ -304,15 +316,21 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # And currently tx4 is in the mempool.\n         #\n         # If we invalidate the tip, tx3 should get added to the mempool, causing\n-        # tx4 to be removed (fails sequence-lock).\n+        # tx4 to fail sequence lock\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n-        assert(tx4.hash not in self.nodes[0].getrawmempool())\n+        assert(tx4.hash in self.nodes[0].getrawmempool())\n         assert(tx3.hash in self.nodes[0].getrawmempool())\n+        # txs in the mempool which fail sequence locks should not make it into blocks\n+        self.nodes[0].setmocktime(cur_time+601) # increment mock time so different block is created\n+        blockhash = self.nodes[0].generate(1)[0]\n+        assert(tx3.hash in self.nodes[0].getblock(blockhash)[\"tx\"])\n+        assert(tx4.hash not in self.nodes[0].getblock(blockhash)[\"tx\"])\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Now mine 2 empty blocks to reorg out the current tip (labeled tip-1 in\n         # diagram above).\n         # This would cause tx2 to be added back to the mempool, which in turn causes\n-        # tx3 to be removed.\n+        # tx3 to fail sequence lock\n         tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n         height = self.nodes[0].getblockcount()\n         for i in xrange(2):\n@@ -326,8 +344,14 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             cur_time += 1\n \n         mempool = self.nodes[0].getrawmempool()\n-        assert(tx3.hash not in mempool)\n+        assert(tx3.hash in mempool)\n         assert(tx2.hash in mempool)\n+        # txs in the mempool which fail sequence locks should not make it into blocks\n+        blockhash = self.nodes[0].generate(1)[0]\n+        assert(tx2.hash in self.nodes[0].getblock(blockhash)[\"tx\"])\n+        assert(tx3.hash not in self.nodes[0].getblock(blockhash)[\"tx\"])\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n \n         # Reset the chain and get rid of the mocktimed-blocks\n         self.nodes[0].setmocktime(0)"
      }
    ]
  },
  {
    "sha": "e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODA2N2M0NDAxZWQ3ZTNlN2VlMGRjMjUyM2VjYTNjZDBjNmEzNGY5",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-09-25T23:18:51Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:54:12Z"
      },
      "message": "BIP112: Implement CHECKSEQUENCEVERIFY\n\n- Replace NOP3 with CHECKSEQUENCEVERIFY (BIP112)\n  <nSequence> CHECKSEQUENCEVERIFY -> <nSequence>\n- Fails if txin.nSequence < nSequence, allowing funds of a txout to be locked for a number of blocks or a duration of time after its inclusion in a block.\n- Pull most of CheckLockTime() out into VerifyLockTime(), a local function that will be reused for CheckSequence()\n- Add bitwise AND operator to CScriptNum\n- Enable CHECKSEQUENCEVERIFY as a standard script verify flag\n- Transactions that fail CSV verification will be rejected from the mempool, making it easy to test the feature. However blocks containing \"invalid\" CSV-using transactions will still be accepted; this is *not* the soft-fork required to actually enable CSV for production use.",
      "tree": {
        "sha": "5b2bd2967ba74048e55af96aa83d67063438166e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b2bd2967ba74048e55af96aa83d67063438166e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "988d84691ebf8a9b896994b89992da610eadbe55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988d84691ebf8a9b896994b89992da610eadbe55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988d84691ebf8a9b896994b89992da610eadbe55"
      }
    ],
    "stats": {
      "total": 264,
      "additions": 255,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ad13c29c666686a8ab2bed28195f96d3f3d55b0a",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 7,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -379,7 +379,44 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKSEQUENCEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n+                        // not enabled; treat as a NOP3\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // nSequence, like nLockTime, is a 32-bit unsigned integer\n+                    // field. See the comment in CHECKLOCKTIMEVERIFY regarding\n+                    // 5-byte numeric operands.\n+                    const CScriptNum nSequence(stacktop(-1), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX CHECKSEQUENCEVERIFY.\n+                    if (nSequence < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // To provide for future soft-fork extensibility, if the\n+                    // operand has the disabled lock-time flag set,\n+                    // CHECKSEQUENCEVERIFY behaves as a NOP.\n+                    if ((nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) != 0)\n+                        break;\n+\n+                    // Compare the specified sequence number with the input.\n+                    if (!checker.CheckSequence(nSequence))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n+\n+                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1126,27 +1163,33 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+static bool VerifyLockTime(int64_t txToLockTime, int64_t nThreshold, const CScriptNum& nLockTime)\n {\n     // There are two times of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < LOCKTIME_THRESHOLD.\n+    // nLockTime < nThreshold (either LOCKTIME_THRESHOLD or\n+    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG).\n     //\n     // We want to compare apples to apples, so fail the script\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n-        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+        (txToLockTime <  nThreshold && nLockTime <  nThreshold) ||\n+        (txToLockTime >= nThreshold && nLockTime >= nThreshold)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > (int64_t)txTo->nLockTime)\n+    if (nLockTime > txToLockTime)\n         return false;\n \n-    // Finally the nLockTime feature can be disabled and thus\n+    return true;\n+}\n+\n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // The nLockTime feature can be disabled and thus\n     // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n     // finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n@@ -1159,6 +1202,38 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n+    if (!::VerifyLockTime((int64_t)txTo->nLockTime, LOCKTIME_THRESHOLD, nLockTime))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) const\n+{\n+    // Relative lock times are supported by comparing the passed\n+    // in operand to the sequence number of the input.\n+    const int64_t txToSequence = (int64_t)txTo->vin[nIn].nSequence;\n+\n+    // Fail if the transaction's version number is not set high\n+    // enough to trigger BIP 68 rules.\n+    if (static_cast<uint32_t>(txTo->nVersion) < 2)\n+        return false;\n+\n+    // Sequence numbers with their most significant bit set are not\n+    // consensus constrained. Testing that the transaction's sequence\n+    // number do not have this bit set prevents using this property\n+    // to get around a CHECKSEQUENCEVERIFY check.\n+    if (txToSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG)\n+        return false;\n+\n+    // Mask off any bits that do not have consensus-enforced meaning\n+    // before doing the integer comparisons of ::VerifyLockTime.\n+    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\n+                                 | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+\n+    if (!::VerifyLockTime(txToSequence & nLockTimeMask, CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG, nSequence & nLockTimeMask))\n+        return false;\n+\n     return true;\n }\n "
      },
      {
        "sha": "261128d04a08da309b66f387b55b88661dd98333",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -81,6 +81,11 @@ enum\n     //\n     // See BIP65 for details.\n     SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n+\n+    // support CHECKSEQUENCEVERIFY opcode\n+    //\n+    // See BIP112 for details\n+    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n };\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n@@ -98,6 +103,11 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckSequence(const CScriptNum& nSequence) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -114,6 +124,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n+    bool CheckSequence(const CScriptNum& nSequence) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "d74067fa0c6dee77ca569354815751f260dbdace",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -157,6 +157,7 @@ enum opcodetype\n     OP_NOP2 = 0xb1,\n     OP_CHECKLOCKTIMEVERIFY = OP_NOP2,\n     OP_NOP3 = 0xb2,\n+    OP_CHECKSEQUENCEVERIFY = OP_NOP3,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,\n     OP_NOP6 = 0xb5,\n@@ -252,6 +253,11 @@ class CScriptNum\n     inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }\n     inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }\n \n+    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}\n+    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }\n+\n+    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }\n+\n     inline CScriptNum operator-()                         const\n     {\n         assert(m_value != std::numeric_limits<int64_t>::min());\n@@ -280,6 +286,12 @@ class CScriptNum\n         return *this;\n     }\n \n+    inline CScriptNum& operator&=( const int64_t& rhs)\n+    {\n+        m_value &= rhs;\n+        return *this;\n+    }\n+\n     int getint() const\n     {\n         if (m_value > std::numeric_limits<int>::max())"
      },
      {
        "sha": "26df33932fdd690db0122d36ca64557acff1d018",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -35,7 +35,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n-    /* OP_CHECKLOCKTIMEVERIFY */\n+    /* CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY */\n     SCRIPT_ERR_NEGATIVE_LOCKTIME,\n     SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n "
      },
      {
        "sha": "6f4ab660b1f5c9b0b0571ea70d82a204c1ade8b6",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -52,6 +52,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n                                                          SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                         SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S;\n \n /** For convenience, standard but not mandatory verify flags. */"
      },
      {
        "sha": "45129ed40df765fb8d85ac2a8f346ea90949e911",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -193,5 +193,63 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH,DERSIG\"],\n+\n+[\"CHECKSEQUENCEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond txin.nSequence (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194305 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight txin.nSequence=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime txin.nSequence=CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to failing CHECKSEQUENCEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"02000000010001000000000000000000000000000000000000000000000000000000000000000000000251b2000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to failing CHECKSEQUENCEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n+\"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to insufficient tx.nVersion (<2)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "69ca11a7dbe48eb18b75504acd11dec688853a71",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -229,5 +229,93 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH\"],\n+\n+[\"CHECKSEQUENCEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"By-time locks, with argument == 0 and == txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Upper sequence with upper sequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 2^31 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 2^32-1 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 3<<31 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded operandss are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194303 1ADD NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 1SUB NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"An ADD producing a 5-byte result that sets CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 65536 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 4259840 ADD NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Valid CHECKSEQUENCEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"02000000010001000000000000000000000000000000000000000000000000000000000000000000000251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Valid CHECKSEQUENCEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n+\"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "986f89c39247f78996e51b01b20bf9e65c85d36e",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "patch": "@@ -41,7 +41,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n     (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n-    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n+    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "aa6973e8f4fb92234395b627fa5da8221eefd31b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTY5NzNlOGY0ZmI5MjIzNDM5NWI2MjdmYTVkYTgyMjFlZWZkMzFi",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-12T20:02:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:54:21Z"
      },
      "message": "Separate CheckLockTime() and CheckSequence() logic\n\nFor the sake of a little repetition, make code more readable.",
      "tree": {
        "sha": "ee8235c8ed1edb0a7c04c2c0dc271e3393f060fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee8235c8ed1edb0a7c04c2c0dc271e3393f060fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa6973e8f4fb92234395b627fa5da8221eefd31b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa6973e8f4fb92234395b627fa5da8221eefd31b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa6973e8f4fb92234395b627fa5da8221eefd31b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa6973e8f4fb92234395b627fa5da8221eefd31b/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8067c4401ed7e3e7ee0dc2523eca3cd0c6a34f9"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "aaac6b4c29768c012b7c9b92438f880195784a65",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa6973e8f4fb92234395b627fa5da8221eefd31b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa6973e8f4fb92234395b627fa5da8221eefd31b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=aa6973e8f4fb92234395b627fa5da8221eefd31b",
        "patch": "@@ -1163,33 +1163,27 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-static bool VerifyLockTime(int64_t txToLockTime, int64_t nThreshold, const CScriptNum& nLockTime)\n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n {\n     // There are two times of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < nThreshold (either LOCKTIME_THRESHOLD or\n-    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG).\n+    // nLockTime < LOCKTIME_THRESHOLD.\n     //\n     // We want to compare apples to apples, so fail the script\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txToLockTime <  nThreshold && nLockTime <  nThreshold) ||\n-        (txToLockTime >= nThreshold && nLockTime >= nThreshold)\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > txToLockTime)\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n         return false;\n \n-    return true;\n-}\n-\n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n-{\n-    // The nLockTime feature can be disabled and thus\n+    // Finally the nLockTime feature can be disabled and thus\n     // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n     // finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n@@ -1202,9 +1196,6 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n-    if (!::VerifyLockTime((int64_t)txTo->nLockTime, LOCKTIME_THRESHOLD, nLockTime))\n-        return false;\n-\n     return true;\n }\n \n@@ -1227,17 +1218,32 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n         return false;\n \n     // Mask off any bits that do not have consensus-enforced meaning\n-    // before doing the integer comparisons of ::VerifyLockTime.\n-    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\n-                                 | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+    // before doing the integer comparisons\n+    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+    const int64_t txToSequenceMasked = txToSequence & nLockTimeMask;\n+    const CScriptNum nSequenceMasked = nSequence & nLockTimeMask;\n+\n+    // There are two kinds of nSequence: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nSequenceMasked < CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nSequenceMasked being tested is the same as\n+    // the nSequenceMasked in the transaction.\n+    if (!(\n+        (txToSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) ||\n+        (txToSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG)\n+    ))\n+        return false;\n \n-    if (!::VerifyLockTime(txToSequence & nLockTimeMask, CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG, nSequence & nLockTimeMask))\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nSequenceMasked > txToSequenceMasked)\n         return false;\n \n     return true;\n }\n \n-\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      }
    ]
  },
  {
    "sha": "6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjFmNmVlMDFkNzJjMDNiYzM0MzVmZWU3Yzg1MWYyOTUwYWIwZmYz",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T09:39:44Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-16T20:54:21Z"
      },
      "message": "Code style fix.\n\nThis if statement is a little obtuse and using braces here\nimproves readability.",
      "tree": {
        "sha": "9b3bb8d6b8d2dcccbfe60b2593b3efb84ac4e79e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b3bb8d6b8d2dcccbfe60b2593b3efb84ac4e79e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa6973e8f4fb92234395b627fa5da8221eefd31b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa6973e8f4fb92234395b627fa5da8221eefd31b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa6973e8f4fb92234395b627fa5da8221eefd31b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7daa998f08a5d71f9d4e320c12a10e979ee63c49",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
        "patch": "@@ -1233,8 +1233,9 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     if (!(\n         (txToSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) ||\n         (txToSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG)\n-    ))\n+    )) {\n         return false;\n+    }\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one."
      }
    ]
  },
  {
    "sha": "3d46c721d3523d19bae35829e27b54478efb5ecd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDQ2YzcyMWQzNTIzZDE5YmFlMzU4MjllMjdiNTQ0NzhlZmI1ZWNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T22:37:13Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-18T16:35:36Z"
      },
      "message": "Add CHECKSEQUENCEVERIFY softfork through BIP9",
      "tree": {
        "sha": "43380e8ebfbd456ce6619c141e39c2ccc6db44b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43380e8ebfbd456ce6619c141e39c2ccc6db44b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d46c721d3523d19bae35829e27b54478efb5ecd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d46c721d3523d19bae35829e27b54478efb5ecd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d46c721d3523d19bae35829e27b54478efb5ecd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d46c721d3523d19bae35829e27b54478efb5ecd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1f6ee01d72c03bc3435fee7c851f2950ab0ff3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 23,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c1173438ecf5eb48ee6e5f4615a9c88b995a496b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d46c721d3523d19bae35829e27b54478efb5ecd/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d46c721d3523d19bae35829e27b54478efb5ecd/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3d46c721d3523d19bae35829e27b54478efb5ecd",
        "patch": "@@ -44,7 +44,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n-        /** \n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n+        /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n          * a large 32-bit integer with any alignment.\n@@ -151,6 +157,12 @@ class CTestNetParams : public CMainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -218,6 +230,9 @@ class CRegTestParams : public CTestNetParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "50298a2ddc20518ed9d92f5a9c551f38b32edc12",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d46c721d3523d19bae35829e27b54478efb5ecd/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d46c721d3523d19bae35829e27b54478efb5ecd/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=3d46c721d3523d19bae35829e27b54478efb5ecd",
        "patch": "@@ -15,6 +15,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "3a08ef238cfc509919e5b94243a567e74e66fd65",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d46c721d3523d19bae35829e27b54478efb5ecd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d46c721d3523d19bae35829e27b54478efb5ecd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3d46c721d3523d19bae35829e27b54478efb5ecd",
        "patch": "@@ -2063,6 +2063,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    // Start enforcing CHECKSEQUENCEVERIFY using versionbits logic.\n+    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);"
      },
      {
        "sha": "d4e8ca73b2723d736d69c649b93615863b1a31db",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d46c721d3523d19bae35829e27b54478efb5ecd/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d46c721d3523d19bae35829e27b54478efb5ecd/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=3d46c721d3523d19bae35829e27b54478efb5ecd",
        "patch": "@@ -569,6 +569,7 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n+    bip9_softforks.push_back(BIP9SoftForkDesc(\"csv\", consensusParams, Consensus::DEPLOYMENT_CSV));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "d18480e7e236d3d5bf710c557b611d6e4e3c7053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTg0ODBlN2UyMzZkM2Q1YmY3MTBjNTU3YjYxMWQ2ZTRlM2M3MDUz",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:33:31Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-18T16:35:36Z"
      },
      "message": "Soft fork logic for BIP113",
      "tree": {
        "sha": "4dd2cf01e523bc05aa28cbffd62118a7f9440714",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dd2cf01e523bc05aa28cbffd62118a7f9440714"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d18480e7e236d3d5bf710c557b611d6e4e3c7053",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d18480e7e236d3d5bf710c557b611d6e4e3c7053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d18480e7e236d3d5bf710c557b611d6e4e3c7053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d18480e7e236d3d5bf710c557b611d6e4e3c7053/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d46c721d3523d19bae35829e27b54478efb5ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d46c721d3523d19bae35829e27b54478efb5ecd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d46c721d3523d19bae35829e27b54478efb5ecd"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b521520b2b36c037ab63cad844f00dfbaa992fb0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d18480e7e236d3d5bf710c557b611d6e4e3c7053/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d18480e7e236d3d5bf710c557b611d6e4e3c7053/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d18480e7e236d3d5bf710c557b611d6e4e3c7053",
        "patch": "@@ -3050,12 +3050,18 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n+    // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n+    int nLockTimeFlags = 0;\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n+    }\n+\n+    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                              ? pindexPrev->GetMedianTimePast()\n+                              : block.GetBlockTime();\n+\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }"
      }
    ]
  },
  {
    "sha": "cbb76c5ce762a1639090c588040f0410c1e289bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmI3NmM1Y2U3NjJhMTYzOTA5MGM1ODgwNDBmMDQxMGMxZTI4OWJk",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:37:43Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-18T16:35:37Z"
      },
      "message": "Soft fork logic for BIP68",
      "tree": {
        "sha": "28f2531693c74c762b7326f20db53091df00b8d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28f2531693c74c762b7326f20db53091df00b8d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbb76c5ce762a1639090c588040f0410c1e289bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb76c5ce762a1639090c588040f0410c1e289bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb76c5ce762a1639090c588040f0410c1e289bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb76c5ce762a1639090c588040f0410c1e289bd/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d18480e7e236d3d5bf710c557b611d6e4e3c7053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d18480e7e236d3d5bf710c557b611d6e4e3c7053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d18480e7e236d3d5bf710c557b611d6e4e3c7053"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5cc97b63684f4de57298719a4f69f4fd33ef5637",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbb76c5ce762a1639090c588040f0410c1e289bd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbb76c5ce762a1639090c588040f0410c1e289bd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cbb76c5ce762a1639090c588040f0410c1e289bd",
        "patch": "@@ -2063,9 +2063,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing CHECKSEQUENCEVERIFY using versionbits logic.\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    int nLockTimeFlags = 0;\n     if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+        nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n     CBlockUndo blockundo;\n@@ -2075,7 +2077,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     int64_t nTimeStart = GetTimeMicros();\n     std::vector<int> prevheights;\n-    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;"
      }
    ]
  },
  {
    "sha": "afb99c68c538cb045071f6ebe0dd2b69ad82656f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmI5OWM2OGM1MzhjYjA0NTA3MWY2ZWJlMGRkMmI2OWFkODI2NTZm",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T19:52:31Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-18T16:35:37Z"
      },
      "message": "Policy: allow transaction version 2 relay policy.\n\nThis commit introduces a way to gracefully bump the default\ntransaction version in a two step process.",
      "tree": {
        "sha": "436352c906a307eaf7a5021a6b02911813916b40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436352c906a307eaf7a5021a6b02911813916b40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afb99c68c538cb045071f6ebe0dd2b69ad82656f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afb99c68c538cb045071f6ebe0dd2b69ad82656f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afb99c68c538cb045071f6ebe0dd2b69ad82656f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afb99c68c538cb045071f6ebe0dd2b69ad82656f/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb76c5ce762a1639090c588040f0410c1e289bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb76c5ce762a1639090c588040f0410c1e289bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb76c5ce762a1639090c588040f0410c1e289bd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6139f866cf1ee2b86dd4b1a05a7db8039387192",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afb99c68c538cb045071f6ebe0dd2b69ad82656f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afb99c68c538cb045071f6ebe0dd2b69ad82656f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=afb99c68c538cb045071f6ebe0dd2b69ad82656f",
        "patch": "@@ -636,7 +636,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n bool IsStandardTx(const CTransaction& tx, string& reason)\n {\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+    if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n     }"
      },
      {
        "sha": "e439d48cf5e8227fd1ccc19dcca452a58d34f35e",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afb99c68c538cb045071f6ebe0dd2b69ad82656f/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afb99c68c538cb045071f6ebe0dd2b69ad82656f/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=afb99c68c538cb045071f6ebe0dd2b69ad82656f",
        "patch": "@@ -203,8 +203,15 @@ class CTransaction\n     void UpdateHash() const;\n \n public:\n+    // Default transaction version.\n     static const int32_t CURRENT_VERSION=1;\n \n+    // Changing the default transaction version requires a two step process: first\n+    // adapting relay policy by bumping MAX_STANDARD_VERSION, and then later date\n+    // bumping the default CURRENT_VERSION at which point both CURRENT_VERSION and\n+    // MAX_STANDARD_VERSION will be equal.\n+    static const int32_t MAX_STANDARD_VERSION=2;\n+\n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not\n     // actually immutable; deserialization and assignment are implemented,"
      }
    ]
  }
]