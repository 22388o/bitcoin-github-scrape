jnewbery,2019-04-29 16:53:20,"~This is built on #15141. Only commit _[validation] Add CValidationState subclasses_ onwards are for review in this PR.~\n\n#15141 is merged. This is ready for review.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-487657620,487657620,
JeremyRubin,2019-04-30 05:58:01,"Concept ACK.\n\nI'd like to see `Invalid` and ilk return void instead of always false, and clean up the call sites correspondingly. This adds a  lines here and there, but I think it improves the readability of the code to see a false literal returned explicitly.\n\nI also somewhat think that ideally there should be a third state class which handles Corruption cases for 'system state' or someth",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-487829136,487829136,
laanwj,2019-04-30 19:33:00,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-488085122,488085122,
ajtowns,2019-05-03 00:02:19,"> I also somewhat think that ideally there should be a third state class which handles Corruption cases for 'system state' or something. This covers the notion that the issue is not the fault of the block or the transaction,\n\nThe current split is more about ""what was being tested"" not ""what was at fault"" -- that's easy to deal with via types, because you know what's being tested at compile tim",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-488873982,488873982,
DrahtBot,2019-05-04 19:58:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17268](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17268.html) (Epoch Mempool by JeremyRubin)\n* [#17037](h",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-489360735,489360735,
jnewbery,2019-05-08 21:07:21,rebased: 8d88c8608,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-490651253,490651253,
jnewbery,2019-05-08 21:08:02,Fixed @practicalswift's comment: b4c8f0079059772f1bb662820c5cce8dab66237d,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-490651419,490651419,
jnewbery,2019-05-16 15:45:09,rebased,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-493122379,493122379,
jnewbery,2019-05-20 15:09:44,rebased,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-494028352,494028352,
jnewbery,2019-05-23 21:07:54,rebased,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-495385456,495385456,
jnewbery,2019-05-30 22:09:45,Thanks for the review @ryanofsky and @ajtowns . I've addressed all the feedback on commit _CValidationState subclasses_.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-497503677,497503677,
jnewbery,2019-06-05 11:12:07,rebased,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-499041078,499041078,
l2a5b1,2019-07-02 13:26:20,"Not critical, but nice to have since we are tidying things up here:\n\nIn this PR the return type of `ValidationState::Invalid` method has been changed to `void`.\n\nPerhaps you can also change the return type of `ValidationState::Error`, `TxValidationState ::Invalid`, `BlockValidationState::Invalid` methods to `void`? \n\nI don't think it is the responsibility of these methods to return `fa",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-507676087,507676087,
jnewbery,2019-07-18 18:49:25,"Rebased on master: https://github.com/bitcoin/bitcoin/compare/b7e1600e4df926da35b1664c32911d909899dd44..d79797b61ef986f6457235febdf5797a68683ad1\n\nI still have to address all of Russ's feedback.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-512941146,512941146,
jnewbery,2019-07-18 20:15:54,I've removed the _[validation] Remove Reject Code from ValidationState_ commit from this PR (https://github.com/bitcoin/bitcoin/compare/d79797b61ef986f6457235febdf5797a68683ad1..47380ebccfb426d3cfbb44b901dafbbde839559b). See https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305096212 for reason.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-512970717,512970717,
jnewbery,2019-07-18 23:01:04,"I believe I've now addressed all comments. This should be ready for review.\n\n@l2a5b1\n> Perhaps you can also change the return type of ValidationState::Error, TxValidationState ::Invalid, BlockValidationState::Invalid methods to void?\n\nSeems like a reasonable change, but I'd rather not expand this PR even more. It's already making a lot of changes.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-513024794,513024794,
jnewbery,2019-07-18 23:55:39,Fixed the bad rebase in validation_block_tests.cpp.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-513037026,513037026,
jnewbery,2019-07-19 19:57:31,rebased,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-513358160,513358160,
jnewbery,2019-10-01 22:37:50,Rebased on master. This is now based on #17004. Please review that first.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-537261168,537261168,
ryanofsky,2019-10-02 14:28:15,"re: https://github.com/bitcoin/bitcoin/pull/15921#pullrequestreview-247365826\n\n> Conditional utACK [b7e1600](https://github.com/bitcoin/bitcoin/commit/b7e1600e4df926da35b1664c32911d909899dd44) if a few comments are addressed\n\nIt's been a while, but this is next on my review list after 16341 (giant achow keyman pr), so I didn't forget about this. It may help to add ""**Based on  #15437 and #",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-537519003,537519003,
jnewbery,2019-10-08 20:29:23,Thanks for the review @ryanofsky . I've addressed both of your comments.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-539690190,539690190,
jnewbery,2019-10-09 14:14:19,"rebased. Still depends on #17004, so please review that PR first.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-540020284,540020284,
jnewbery,2019-10-15 19:06:28,Fixed the bad rebase pointed out by @ryanofsky (https://github.com/bitcoin/bitcoin/pull/15921#discussion_r335106673): https://github.com/bitcoin/bitcoin/compare/6fec91c1212c41698d1c9464379d17627cccf42a..b68a33829827c51048784a6f83f8acea3351d3c0,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-542359905,542359905,
jnewbery,2019-10-15 19:20:11,rebased: https://github.com/bitcoin/bitcoin/compare/b68a33829827c51048784a6f83f8acea3351d3c0..735e86fac20adee2c42e34ee382aaea95fbdbbb3,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-542364989,542364989,
jnewbery,2019-10-15 19:47:44,Thanks for the rereview @ryanofsky !,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-542375333,542375333,
jnewbery,2019-10-23 21:27:57,rebased,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-545644105,545644105,
jnewbery,2019-10-24 15:57:08,Rebased on master. Also tidied up a few small details (no functional changes),https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-545985143,545985143,
jnewbery,2019-10-24 19:21:44,The linter caught a log that wasn't terminated with a newline. Pushed a fix.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-546064954,546064954,
mzumsande,2019-10-25 13:00:24,The fuzzing harness `src/test/fuzz/transaction.cpp` added in #17076 uses `CValidationState` and needs an update.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-546343925,546343925,
jnewbery,2019-10-25 14:26:03,"> The fuzzing harness src/test/fuzz/transaction.cpp added in #17076 uses CValidationState and needs an update.\n\nThanks @mzumsande . Now fixed. I've also rebased on master.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-546376001,546376001,
laanwj,2019-10-27 18:44:39,"~~ACK dcf5003ca0d8927f3e2457a32394a70ed683f01e~~\nACK 3004d5a12d09d94bfc4dee2a8e8f2291996a4aaf",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-546722151,546722151,
jnewbery,2019-10-29 14:07:13,"Thanks for the reviews @mzumsande and @fjahr . I've added a couple of fixup commits that address your comments. Let me know if you like them and I'll squash into the appropriate commits.\n\n@mzumsande - I had to add a consensus/validation.cpp file to define the `ValidationState` destructor. Let me know if you know of a better way to do this.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547437238,547437238,
mzumsande,2019-10-29 15:55:18,"For me, `inline ValidationState::~ValidationState() {};` in the header works as well to make the class abstract (the `inline` prevents `multiple definition` linker errors). I am not sure about the cause for the MSVC/AppVeyor error of the current implementation.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547493802,547493802,
jnewbery,2019-10-29 17:00:23,"> For me, inline ValidationState::~ValidationState() {}; in the header works \n\nThanks. Much better!",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547526297,547526297,
fjahr,2019-10-29 17:08:35,"> Thanks for the reviews @mzumsande and @fjahr . I've added a couple of fixup commits that address your comments. Let me know if you like them and I'll squash into the appropriate commits.\n> \n> @mzumsande - I had to add a consensus/validation.cpp file to define the `ValidationState` destructor. Let me know if you know of a better way to do this.\n\nLooks good to me!",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547530457,547530457,
jnewbery,2019-10-29 19:46:54,squashed fixup commits.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547598181,547598181,
amitiuttarwar,2019-10-29 23:41:08,code review ACK 3004d5a12d09d94bfc4dee2a8e8f2291996a4aaf. Also built & ran tests locally. ,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547676649,547676649,
fjahr,2019-10-29 23:52:24,Code review ACK 3004d5a12d09d94bfc4dee2a8e8f2291996a4aaf . Only nit style change and pure virtual destructor added since my last review.,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547679097,547679097,
jonatack,2019-10-30 14:44:12,"There oughta be a rule about merging review club PRs right before the meeting :)\n",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547940767,547940767,
laanwj,2019-10-30 14:46:59,"@jonatack whoops …\nnah, reviewing doesn't necessarily stop after merging :smile: ",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547942235,547942235,
mzumsande,2019-10-30 14:50:33,"Ok, will still mention my code-review ACK for 3004d5a12d09d94bfc4dee2a8e8f2291996a4aaf that I was just about to write when this got merged :-) ",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547944066,547944066,
MarcoFalke,2019-10-30 14:55:52,">  nah, reviewing doesn't necessarily stop after merging\n\nAgree. The only downside is that review comments (with the reviewer's name) can not be included in the merge commit.",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547947006,547947006,
jonatack,2019-10-30 16:05:37,Could possibly use a `review club` tag :label:,https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-547982871,547982871,
laanwj,2019-10-30 18:47:03,"> Could possibly use a review club tag label\n\nDone",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-548059693,548059693,
jonatack,2019-10-30 19:02:19,"Perhaps helpful context for future readers/reviewers, here are two comments motivating a27a2957ed9afbe5a96caa5f0f4cbec730d27460 (CValidationState subclasses) from discussion in #15141:\n\n- sipa: https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-461933821\n- theBlueMatt: https://github.com/bitcoin/bitcoin/pull/15141#discussion_r273667031\n",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-548065747,548065747,
jonatack,2019-10-30 19:04:16,"> > Could possibly use a review club tag label\n> \n> Done\n\nThanks!",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-548066555,548066555,
practicalswift,2019-11-27 22:20:45,"Reviewers of this PR are encouraged to review PR #17624 (""net: Fix an uninitialized read in ProcessMessage(…, ""tx"", …) when receiving a transaction we already have"") which fixes a quite serious bug introduced in this PR. Luckily it was caught before being part of any release :)",https://github.com/bitcoin/bitcoin/pull/15921#issuecomment-559270257,559270257,
practicalswift,2019-05-07 16:01:02,"`first_invalid` has been dropped, right? :-)",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r281706562,281706562,src/validation.h
jnewbery,2019-05-08 21:07:38,Good catch. Fixed.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r282250123,282250123,src/validation.h
flack,2019-05-09 12:46:54,"nit: `*` is not aligned quite right\n\n```suggestion\n  * TODO: remove support for BIP 61 reject messages.\n```",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r282468808,282468808,src/consensus/validation.h
jnewbery,2019-05-09 14:46:58,thanks. Fixed!,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r282520548,282520548,src/consensus/validation.h
ryanofsky,2019-05-29 18:27:42,"In commit ""[validation] Add CValidationState subclasses"" (1faf0c4b0120995b4361d38ca0cc0114e633955d)\n\nIt seems error prone that calls to `FromTxValidationState` and `Invalid` might actually change the state from invalid to valid. I wonder if both of these methods should start off asserting that `m_result == NONE` to reduce the risk that a previously invalid transaction or block is later treated",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r288708634,288708634,src/consensus/validation.h
ryanofsky,2019-05-29 18:34:50,"In commit ""[validation] Add CValidationState subclasses"" (1faf0c4b0120995b4361d38ca0cc0114e633955d)\n\nI might be missing something but it seems like the previous code is rewriting TX_NOT_STANDARD to CONSENSUS and the new code in FromTxValidationState would rewrite it to NONE.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r288711702,288711702,src/validation.cpp
ryanofsky,2019-05-29 18:42:53,"In commit ""[validation] Add CValidationState subclasses"" (1faf0c4b0120995b4361d38ca0cc0114e633955d)\n\nWhy the change from BLOCK_INVALID_HEADER to CONSENSUS here?",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r288715120,288715120,src/validation.cpp
ryanofsky,2019-05-29 18:51:27,"In commit ""[validation] Add CValidationState subclasses"" (1faf0c4b0120995b4361d38ca0cc0114e633955d)\n\nThis should say TxValidationResult instead of TxValidationInvalidReason",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r288718619,288718619,src/validation.cpp
ryanofsky,2019-05-29 19:01:21,"In commit ""[validation] Add CValidationState subclasses"" (1faf0c4b0120995b4361d38ca0cc0114e633955d)\n\nNote to other reviewers: This first commit is huge and can be easier to start reviewing if you revert the rote, mechanical changes:\n\n```sh\ngit checkout 1faf0c4b0120995b4361d38ca0cc0114e633955d\ngit grep -l ValidationState | xargs sed -i 's/BlockValidationState\|TxValidationState/CValidat",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r288722379,288722379,src/bench/block_assemble.cpp
ajtowns,2019-05-30 06:54:12,That looks wrong to me too. Might be clearer to tell `CheckInputs()` which validation rules are consensus vs standardness though?,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r288878476,288878476,src/validation.cpp
ryanofsky,2019-05-30 14:56:23,"In commit ""[validation] Remove Reject Code from ValidationState"" (a3076817588a642b4de107dc96a76ea8939070df)\n\nIt might clearer to return an entirely new code instead of REJECT_INVALID. Calling transactions invalid when they just have low fees or are nonstandard seems to stretch the definition of invalid.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289028051,289028051,src/consensus/validation.h
ryanofsky,2019-05-30 15:03:28,"In commit ""[validation] Remove Reject Code from ValidationState"" (a3076817588a642b4de107dc96a76ea8939070df)\n\nCan you add a comment about what why BLOCK_MISSING_PREV and BLOCK_CACHED_INVALID are special here? Missing prev case seems to make sense and I see that the cached_invalid case isn't changing behavior, but I don't understand it.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289031186,289031186,src/net_processing.cpp
ryanofsky,2019-05-30 15:10:06,"In commit ""[validation] Remove Reject Code from ValidationState"" (a3076817588a642b4de107dc96a76ea8939070df):\n\nNote: IIUC, there is no change in behavior here because previous `state.GetRejectCode() < REJECT_INTERNAL` condition was always true. REJECT_HIGHFEE is never triggered for p2p transactions.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289033939,289033939,src/net_processing.cpp
ryanofsky,2019-05-30 15:12:03,"In commit ""[validation] Remove Reject Code from ValidationState"" (a3076817588a642b4de107dc96a76ea8939070df)\n\nUnintentional change? Doesn't serve an obvious purpose.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289034715,289034715,src/validation.cpp
ryanofsky,2019-05-30 15:15:41,"In commit ""[validation] Remove Reject Code from ValidationState"" (a3076817588a642b4de107dc96a76ea8939070df)\n\nCode predates this commit, but TX_MEMPOOL_POLICY would seem to make more sense here than TX_NOT_STANDARD. It might be good to add a comment if using TX_NOT_STANDARD is important here, since it's not the obvious choice.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289036289,289036289,src/validation.cpp
jnewbery,2019-05-30 15:20:59,"For `FromTxValidationState()` should we assert that `tx_state.GetResult()` does not return `TX_NOT_STANDARD` or `TX_MEMPOOL_POLICY`? This should only be called from block validation code, where transactions shouldn't fail for standardness or policy reasons.\n\nI don't think `Invalid()` can change state from invalid to valid: `m_mode` is either kept as `MODE_ERROR` or changed to `MODE_INVALID`. C",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289038543,289038543,src/consensus/validation.h
jnewbery,2019-05-30 15:24:56,fixed,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289040293,289040293,src/validation.cpp
jnewbery,2019-05-30 15:29:28,Thanks Russ. I've added that review tip to the PR description.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289042306,289042306,src/bench/block_assemble.cpp
ryanofsky,2019-05-30 15:35:38,"I'm just saying that this seems error prone, not that there currently is an error. Adding asserts to check the previous state and ensure that calling these methods never changes it from invalid to valid seems like an easy change that could prevent a serious bug. But I could be wrong about this. Maybe it wouldn't be an easy change or wouldn't be helpful in preventing bugs.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289045019,289045019,src/consensus/validation.h
jnewbery,2019-05-30 17:19:22,"In fact, I think I should just remove this method entirely. `FromTxValidationState()` is only called from three places and in each case we want the `BlockValidationState.m_result` to be set to `CONSENSUS`.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289086882,289086882,src/consensus/validation.h
jnewbery,2019-05-30 17:21:05,"Yes, this is a bug (and a very bad one!) I'm going to remove the `FromTxValidationState()` method entirely and just set the `BlockValidationState.m_result` through a call to `Invalid()` (see https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289086882).",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289087527,289087527,src/validation.cpp
jnewbery,2019-05-30 21:45:14,No idea. Fixed!,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289185259,289185259,src/validation.cpp
jnewbery,2019-05-30 22:08:00,"I'm not sure if that's possible. The BIP61 reject codes are defined here: https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki#reject_version_codes.\n\nI hope we'll remove REJECT messages soon (https://github.com/bitcoin/bitcoin/pull/15437)",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289191664,289191664,src/consensus/validation.h
ryanofsky,2019-06-06 13:36:35,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nThe previous name BLOCK_TIME_FUTURE seems more descriptive than BLOCK_BAD_TIME. It's nice how it says more specifically how the time is bad.\n",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291185888,291185888,src/consensus/validation.h
ryanofsky,2019-06-07 10:10:28,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nAny reason this comment is being deleted? It's little vague, but I think it's just saying that this function bans peers, and that TxRelayMayResultInDisconnect tries to avoid being banned by peers, so a change here might require a change there.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291531592,291531592,src/net_processing.cpp
ryanofsky,2019-06-07 10:19:03,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nspelling ConnectBlock",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291534439,291534439,src/validation.cpp
ryanofsky,2019-06-07 10:19:40,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nspelling ConnectBlock",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291534635,291534635,src/validation.cpp
ryanofsky,2019-06-07 10:23:38,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nTo be sure, is there no change in behavior here because IsBlockReason would always return false if CheckTxInputs set failed with any reason other than CONSENSUS? Or is there no change in behavior for some other reason? Or is there a actually a change in some cases?\n\nRelated question: Is it ",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291535754,291535754,src/validation.cpp
ryanofsky,2019-06-07 10:31:03,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nSimilar questions here as for the CheckTxInputs check above. What's the explanation for why there's no change in behavior here? Would CheckInputs never set reasons other than CONSENSUS and TX_NOT_STANDARD?\n\nAnd is it a problem that the recent_consensus code will be translated to just consen",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291538099,291538099,src/validation.cpp
ryanofsky,2019-06-07 10:59:33,"In commit ""[validation] Add CValidationState subclasses"" (b31987c45045cc26ca7867d9d8aa645f5d36b5e6)\n\nSimilar questions here as for the ConnectBlock checks above. What's the explanation for why there's no change in behavior here? Would CheckTransaction never set a reason besides CONSENSUS? Is it a problem that the recent_consensus code will be translated to just consensus?",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291545634,291545634,src/validation.cpp
ryanofsky,2019-06-07 11:41:26,"re: https://github.com/bitcoin/bitcoin/pull/15921#discussion_r289028051\n\nIn commit ""[validation] Remove Reject Code from ValidationState"" (22be379c54eb03e77803b0bbd8270082452d8fff)\n\nIt seems like this commit changing p2p codes would make more sense as a separate PR (maybe based on this PR) not mixed in with all the refactoring changes in this PR. Someone could be indifferent to the refacto",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291556494,291556494,src/consensus/validation.h
ryanofsky,2019-06-08 10:47:44,"In commit ""[validation] Remove error() calls from Invalid() calls"" (1550f781fc0a86fd318883512a7104d018cf7c56)\n\nIs it intentional to drop the `ERROR:` prefix here and elsewhere in this PR?\n\nhttps://github.com/bitcoin/bitcoin/blob/5d2ccf0ce9ca1571c650a69319fb9c1e0b626ecb/src/util/system.h#L60-L65\n\nIf so, it would be good to mention the change in behavior in the commit message, and maybe ",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291802797,291802797,src/validation.cpp
ryanofsky,2019-06-08 11:23:59,"In commit ""[validation] Remove unused first_invalid parameter from ProcessNewBlockHeaders()"" (3b578fdca854d230592023baf5ef7863ead317b6)\n\nNote: it looks like the last place a `first_invalid` output value was actually used was removed in 7df16e70e67c753c871797ce947ea09d7cb0e519 from #15141",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291803779,291803779,src/validation.h
ryanofsky,2019-06-08 11:37:18,"In commit ""[validation] Remove fMissingInputs from AcceptToMemoryPool()"" (b7e1600e4df926da35b1664c32911d909899dd44)\n\nShould remove the ""missing inputs"" argument instead of ""txn replaced"" here.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291804116,291804116,src/interfaces/chain.cpp
ryanofsky,2019-06-08 11:41:52,"In commit ""[validation] Remove fMissingInputs from AcceptToMemoryPool()"" (b7e1600e4df926da35b1664c32911d909899dd44)\n\nThis is not a change in behavior, but it seems strange that err_string is not set in this case. It would be good to add a comment if this is intentional, because otherwise it seems like a bug.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291804277,291804277,src/node/transaction.cpp
ryanofsky,2019-06-08 11:49:35,"In commit ""[validation] Remove fMissingInputs from AcceptToMemoryPool()"" (b7e1600e4df926da35b1664c32911d909899dd44)\n\nSeems like a bug here. It looks like this pushKV will overwrite the value set by the pushKV call added above, making it have no effect. If this is fixed, maybe the python tests below don't have to change.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291804420,291804420,src/rpc/rawtransaction.cpp
promag,2019-06-09 01:28:11,Good catch.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291823953,291823953,src/node/transaction.cpp
promag,2019-06-09 01:33:38,"Just one more case where univalue should have different modifiers.\n\nAnyway looks like it's should be in ` else { ... }` block.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r291824033,291824033,src/rpc/rawtransaction.cpp
l2a5b1,2019-07-01 21:50:34,"Happy to see that `Invalid`'s parameter-declaration-clause has been cleaned-up.\n\nPerhaps you can take it one step further and also remove the two empty string default arguments here and in `TxValidationState::Invalid(..)` and `BlockValidationState::Invalid(..)`? As far as I can tell `Invalid` is always called with a reason and debug message (the way it should be called).",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r299230759,299230759,src/consensus/validation.h
l2a5b1,2019-07-01 21:50:47,"Not sure if you consider `ValidationState` to be an abstract base class that should not be instantiated directly, but if you do perhaps you could add a pure virtual destructor to protect against this.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r299230821,299230821,src/consensus/validation.h
jnewbery,2019-07-18 20:15:00,"I wanted to get all of these changes into the same PR. All the commits touch the same lines, so splitting the changes across multiple PRs means more rebasing for other PRs. However, what you say makes sense - I shouldn't mix P2P changes with a refactor.\n\nI've removed this commit from the branch, so this PR should be basically a refactor with very minor logging/error message changes.\n\nThe r",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305096212,305096212,src/consensus/validation.h
jnewbery,2019-07-18 20:16:15,No longer part of this PR.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305096666,305096666,src/validation.cpp
jnewbery,2019-07-18 20:16:31,No longer part of this PR.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305096781,305096781,src/net_processing.cpp
jnewbery,2019-07-18 20:16:40,No longer part of this PR.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305096830,305096830,src/net_processing.cpp
jnewbery,2019-07-18 20:16:53,No longer part of this PR.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305096904,305096904,src/validation.cpp
jnewbery,2019-07-18 20:21:14,"Reverted. This PR was based on an earlier version of 15141, which I guess had the name BLOCK_BAD_TIME.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305098449,305098449,src/consensus/validation.h
jnewbery,2019-07-18 20:24:03,Because this function is to decide whether to punish a peer for a bad block. The function below is to decide whether to punish a peer for a bad tx. Changes to that function need to be reflected in `TxRelayMayResultInDisconnect()` since they're both concerned with txs.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305099507,305099507,src/net_processing.cpp
jnewbery,2019-07-18 20:26:35,fixed,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305100417,305100417,src/validation.cpp
jnewbery,2019-07-18 20:26:40,fixed,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305100443,305100443,src/validation.cpp
jnewbery,2019-07-18 21:53:29,"Take a look at `CheckTxInputs()`. Prior to this commit, if it returned false, then `state.m_reason` could be set to:\n\n- `TX_MISSING_INPUTS`\n- `TX_PREMATURE_SPEND`\n- `CONSENSUS`\n\nIn all cases, that would be converted to `CONSENSUS`, so this is not a change in behaviour.\n\n> Is it a problem going forward that TxValidationResult::RECENT_CONSENSUS_CHANGE will be translated to BlockValid",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305130523,305130523,src/validation.cpp
jnewbery,2019-07-18 21:55:40,"> Would CheckInputs never set reasons other than CONSENSUS and TX_NOT_STANDARD?\n\nExactly correct.\n\n> And is it a problem that the recent_consensus code will be translated to just consensus?\n\nAs above. Any PR that introduces recent_consensus should include tests to make sure it does what it's supposed to.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305131125,305131125,src/validation.cpp
jnewbery,2019-07-18 21:59:19,"> Would CheckTransaction never set a reason besides CONSENSUS?\n\nCorrect - CheckTransaction only ever sets `CONSENSUS`.\n\n> Is it a problem that the recent_consensus\n\nas above",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305132168,305132168,src/validation.cpp
jnewbery,2019-07-18 22:08:52,I can't remember whether it was intentional or not. I've re-added the `ERROR: ` prefix so there's no change in logging behaviour.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305134736,305134736,src/validation.cpp
jnewbery,2019-07-18 22:10:32,fixed,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305135189,305135189,src/interfaces/chain.cpp
jnewbery,2019-07-18 22:15:40,"It was intentional to maintain existing behaviour, but you're right that it looks odd and buggy to anyone reading the code now. Rather than write a comment explaining that I'm maintaining existing behaviour, I'm just going to set `err_string` in all cases.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305136560,305136560,src/node/transaction.cpp
jnewbery,2019-07-18 22:43:05,"I'd like to remove the optional parameters, but there are many calls to `Invalid()` that don't set a debug message.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305143245,305143245,src/consensus/validation.h
jnewbery,2019-07-18 22:59:24,Done. Thanks for the review!,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305146828,305146828,src/consensus/validation.h
jnewbery,2019-07-18 23:55:02,"Wow, that's an embarrassing bug. I think I just misread the `pushKVs` as early returns. Thanks for catching!\n\nYes, the fix here is to put this code in an `else` block. Done.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305158010,305158010,src/rpc/rawtransaction.cpp
ryanofsky,2019-10-08 16:08:57,"In commit ""[validation] Add CValidationState subclasses"" (907ef02667b6c224df1457b67b7d7950cd58494f)\n\nA previous version of this commit changed ""something"" to ""a transaction"" and ""object"" to ""tx"". Would be nice to keep these changes.",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r332602177,332602177,src/consensus/validation.h
ryanofsky,2019-10-08 16:16:06,"In commit ""[validation] Add CValidationState subclasses"" (907ef02667b6c224df1457b67b7d7950cd58494f)\n\nCould s/ValidationInvalidReason/TxValidationResult/ here like previous versions of this commit",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r332605565,332605565,src/validation.cpp
jnewbery,2019-10-08 20:29:04,fixed,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r332717532,332717532,src/consensus/validation.h
jnewbery,2019-10-08 20:29:07,fixed,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r332717563,332717563,src/validation.cpp
ryanofsky,2019-10-15 18:21:24,"In commit ""[validation] Add CValidationState subclasses"" (b885aec88a627363bf6771c941e855fa735145c6)\n\nIs it intentional to drop the `fScriptChecks && ` condition above?",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r335106673,335106673,src/validation.cpp
jnewbery,2019-10-15 19:03:34,eeek. Good catch. This was a bad rebase (and would have broken `-assumevalid` if it'd been merged).,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r335125629,335125629,src/validation.cpp
mzumsande,2019-10-29 01:52:27,"Your old [answer](https://github.com/bitcoin/bitcoin/pull/15921#discussion_r305146828) to  to an old [comment](https://github.com/bitcoin/bitcoin/pull/15921#discussion_r299230821) indicates that at some point you wanted to make the base class `ValidationState` abstract. However, the class has a (non-pure) virtual destructor and no pure virtual functions, so instantiation of `ValidationState` shoul",https://github.com/bitcoin/bitcoin/pull/15921#discussion_r339864187,339864187,src/consensus/validation.h
fjahr,2019-10-29 12:16:15,nit: the `&` was moved from the type to the variable name. For consistency I would keep it at end of the type. That's also how it is still declared in the header file.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r340039641,340039641,src/consensus/tx_check.cpp
jkczyz,2019-10-30 23:34:35,Sorry for the late comment. Would a template class be more suitable? It appears that the subclasses only differ by the type of a member variable. So making this a template would remove a bit of boilerplate. Then a typedef could be used to keep the subclass names if desired.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r340905612,340905612,src/consensus/validation.h
jkczyz,2019-11-07 01:17:11,Made the change in #17399. Happy to close the PR if this isn't desirable for some reason.,https://github.com/bitcoin/bitcoin/pull/15921#discussion_r343409501,343409501,src/consensus/validation.h
