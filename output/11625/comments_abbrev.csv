fanquake,2017-11-07T01:49:40Z,"Travis failures:\n```\nIn file included from /usr/include/qt4/QtGui/QLineEdit:1:0,\n                 from qt/test/apptests.cpp:20:\n/usr/include/qt4/QtGui/qlineedit.h: In function ‘void {anonymous}::TestRpcCommand(RPCConsole*)’:\n/usr/include/qt4/QtGui/qlineedit.h:198:10: error: ‘void QLineEdit::returnPressed()’ is protected\n     void returnPressed();\n          ^\nqt/test/apptests.cpp:34",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-342349306,342349306,
promag,2017-11-09T01:16:19Z,"Any hint?\n```sh\nmake clean && make\n\n...\n\n  CXXLD    qt/test/test_bitcoin-qt\nUndefined symbols for architecture x86_64:\n  ""MacNotificationHandler::instance()"", referenced from:\n      Notificator::Notificator(QString const&, QSystemTrayIcon*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\n      Notificator::notify(Notificator::Class, QString const&, QString const&, ",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-343015756,343015756,
jonasschnelli,2017-11-29T23:40:41Z,"Have the same compile issue (clang):\n```\nUndefined symbols for architecture x86_64:\n  ""MacNotificationHandler::instance()"", referenced from:\n      Notificator::Notificator(QString const&, QSystemTrayIcon*, QWidget*) in libbitcoinqt.a(qt_libbitcoinqt_a-notificator.o)\n      Notificator::notifyMacUserNotificationCenter(Notificator::Class, QString const&, QString const&, QIcon const&) in lib",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348034015,348034015,
ryanofsky,2017-11-30T20:53:03Z,"Looking into the link error, but @jonasschnelli do you have an idea why the build might be failing for you even though the apple target succeeds on travis?",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348317424,348317424,
ryanofsky,2017-11-30T21:08:18Z,"> Looking into the link error, but @jonasschnelli do you have an idea why the build might be failing for you even though the apple target succeeds on travis?\n\nSeems like the reason is that travis doesn't build tests for the apple target (it is just running `make deploy`).\n\nI also think I see the reason for the error. `BITCOIN_MM` files seem to get directly linked into the `qt/bitcoin-qt` e",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348321229,348321229,
promag,2017-11-30T21:55:32Z,I can dig a little to see if I can find a fix.,https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-348333506,348333506,
laanwj,2018-01-30T10:29:56Z,"Travis was passing, but I just re-triggered it (to test it on top of master), now https://travis-ci.org/bitcoin/bitcoin/jobs/309721182 :(\n\nStrange:\n```\n0.01s$ if [ ""$CHECK_DOC"" = 1 -a ""$TRAVIS_EVENT_TYPE"" = ""pull_request"" ]; then contrib/devtools/lint-all.sh; fi\ncontrib/devtools/lint-python.sh: 10: contrib/devtools/lint-python.sh: flake8: not found\n^---- failure generated from contrib/",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-361550451,361550451,
MarcoFalke,2018-01-30T12:51:09Z,"@laanwj It is a travis bug :( They use the source code from master (merged with this pull) but the .travis.yml of only the pull...\n\nNeeds rebase",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-361583994,361583994,
jonasschnelli,2018-02-12T10:58:56Z,"Just ran this locally (on top of master) and got the error blow (while master passes):\n```\n********* Start testing of AppTests *********\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\nPASS   : AppTests::initTestCase()\nQWARN  : AppTests::appTests() Backing up GUI settings to ""/var/folders",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-364889944,364889944,
ryanofsky,2018-02-12T14:53:26Z,"> Just ran this locally (on top of master) and got the error blow (while master passes):\n\nI don't have easy access to a mac, but it looks like this could be caused by the following Qt bug: https://bugreports.qt.io/browse/QTBUG-49686\n\nIssue described there is failing to check for `d->createPlatformMenu()` null return value before calling `SetDockMenuFunction` here: http://code.qt.io/cgit/qt",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-364945646,364945646,
ryanofsky,2018-02-12T18:06:40Z,"@jonasschnelli, added commit a6f6182fb02c38a13982e3edcd03db3da316f1b3 to try to address mac qt test crash. Do you think you could test it?\n\nRebased b67d524b69350e131dd102ef716cc095130e72d7 -> 328eb8610d123bf748f829a4db9fc4214e5d5606 ([pr/apptest.6](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.6) -> [pr/apptest.7](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.7)) due to con",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365009167,365009167,
Sjors,2018-02-12T19:08:55Z,"`make check` on MacOS 10.13.3 fails. More specifically:\n\n```\niMac:bitcoin bitcoin$ src/qt/test/test_bitcoin-qt\n********* Start testing of AppTests *********\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\nPASS   : AppTests::initTestCase()\nQWARN  : AppTests::appTests() Backing up GUI s",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365028973,365028973,
Sjors,2018-02-12T19:13:58Z,"I notice that it pops up a firewall notice on MacOS, which doesn't happen on master. That's generally the result of trying to bind on anything other than `127.0.0.*` (see also #12200). Turning the firewall off doesn't prevent the error though.",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365030503,365030503,
ryanofsky,2018-02-12T19:28:12Z,"> QFATAL : AppTests::appTests() Received signal 11\n\nWould be useful to have a stack trace to debug further. Any chance you could run the test under gdb?\n",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365034668,365034668,
Sjors,2018-02-12T20:30:01Z,"I'm not really familiar with how to use `gdb`... So far I was able to produce this:\n\n```\ngdb src/qt/test/test_bitcoin-qt\nGNU gdb (GDB) 8.1\nThis GDB was configured as ""x86_64-apple-darwin17.3.0"".\nReading symbols from src/qt/test/test_bitcoin-qt...\nwarning: can't find symbol '_Z10ParseHexUVRK8UniValueRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE' in minsymtab\n\n",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365052052,365052052,
Sjors,2018-02-12T20:34:22Z,"`lldb` output might be more useful:\n```\nlldb src/qt/test/test_bitcoin-qt\n(lldb) target create ""src/qt/test/test_bitcoin-qt""\nCurrent executable set to 'src/qt/test/test_bitcoin-qt' (x86_64).\n(lldb) run\nProcess 58456 launched: '[...]/src/qt/test/test_bitcoin-qt' (x86_64)\n********* Start testing of AppTests *********\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365053151,365053151,
ryanofsky,2018-02-12T20:36:59Z,"Could you try typing ""bt"" at the gdb/lldb prompt to get a stack trace?",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365053871,365053871,
Sjors,2018-02-13T09:04:17Z,"```\n(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x8)\n  * frame #0: 0x0000000102e92c61 QtWidgets`QWidget::insertAction(QAction*, QAction*) + 33\n    frame #1: 0x00000001000bdb84 test_bitcoin-qt`BitcoinGUI::createTrayIconMenu(this=0x00000001042125e0) at bitcoingui.cpp:614\n    frame #2: 0x00000001000bd665 test_bitcoin-qt`BitcoinGUI::s",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365194324,365194324,
Sjors,2018-02-13T09:07:45Z,"By the way, I can launch QT just fine, no crash.",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365195668,365195668,
ryanofsky,2018-02-19T22:25:09Z,"@theuni this is the issue I was referring to.\n\nLooking at the stack trace: https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-365194324 it doesn't immediately make sense to me because BitcoinGUI::createTrayIconMenu does not appear to be directly calling QWidget::insertAction. Also, I'd be curious if the issue might be fixed by extending the workaround in a6f6182fb02c38a13982e3edcd03db3",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-366816943,366816943,
theuni,2018-02-19T22:40:47Z,"Same crash here. Here's a backtrace of relevant threads with a few things commented out as requested:\n```\n* thread #1: tid = 0x36e12a, 0x00000001018deaf5 QtWidgets`QToolBar::event(QEvent*) + 501, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n    frame #0: 0x00000001018deaf5 QtWidgets`QToolBar::event(QEvent*) + 501\nQtWidgets`QToolBar::event:\n->  0x101",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-366819563,366819563,
ryanofsky,2018-02-19T23:23:06Z,"Cory found you could get around the last crash by -passing the `-min` option to avoid showing the main window and triggering the broken window border code (`setContentBorderAreaEnabled`) that runs when the minimal platform is selected on mac:\n\nhttps://github.com/bitcoin/bitcoin/blob/4aeec0ebccb4d55800e1f2271f1af15dae4d7eca/src/qt/bitcoin.cpp#L406-L413\n\nBut there is similar crash soon after",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-366825629,366825629,
ryanofsky,2018-02-20T16:10:37Z,"> I'm going to see if it's possible to make a small change that would try to show both windows minimized and avoid the crashes.\n\nReplacing the `showNormal` and `show` calls with `showMinimized` apparently resulted in another segfault on Cory's machine. I'd be curious to see the stack trace, but it seems easier right now to just skip the test on the mac minimal platform (while continuing to run",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367028134,367028134,
Sjors,2018-02-20T17:44:34Z,That made make [unhappy](https://gist.github.com/Sjors/d76c9af02d7bfa619b4278d652e1d086).,https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367058800,367058800,
ryanofsky,2018-02-20T18:59:40Z,"> That made make unhappy.\n\n@Sjors thanks for testing! Added a new commit which should help.\n\nAdded 1 commits 452367f0a46d6ea61746819680faebd8a6456633 -> f5ef4a12b5d7467f17145663e3ad9ab45517ce58 ([pr/apptest.11](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.11) -> [pr/apptest.12](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.12), [compare](https://github.com/ryanofsky/bi",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367082024,367082024,
Sjors,2018-02-22T09:05:12Z,"`make` is happy now, but `qt/test/test_bitcoin-qt` fails:\n[test-suite.log](https://github.com/bitcoin/bitcoin/files/1747218/test-suite.log)\n",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367612793,367612793,
ryanofsky,2018-02-22T14:18:44Z,"> make is happy now, but qt/test/test_bitcoin-qt fails: test-suite.log\n\nWow, the problems this test is causing on the Qt mac minimal platform seem to be endless. Now even though the new test is being skipped, the startup tweaks I made to support it are causing an old test to fail with a UniValue exception. I think I'm going mark this PR work in progress and wait until I have a mac handy to deb",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367694351,367694351,
Sjors,2018-02-22T18:20:19Z,"What exactly does ""Qt mac minimal platform"" mean?",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367772829,367772829,
ryanofsky,2018-02-22T19:40:32Z,"> What exactly does ""Qt mac minimal platform"" mean?\n\nIt means running with QT_QPA_PLATFORM=minimal on a mac Qt build. A lot of Qt bugs seem to get triggered if you try this. Running with QT_QPA_PLATFORM=minimal with a linux or windows qt build works fine. Running with QT_QPA_PLATFORM=cocoa on with a mac Qt build also seems to work fine (according to Cory).\n\nOur Qt unit tests run by default",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367796523,367796523,
Sjors,2018-02-22T19:48:25Z,"Thanks. Just to clarify further, do we know any use case other than running tests that requires QT support with `QT_QPA_PLATFORM=minimal`? ",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367799040,367799040,
ryanofsky,2018-02-22T20:20:25Z,"> Thanks. Just to clarify further, do we know any use case other than running tests that requires QT support with QT_QPA_PLATFORM=minimal?\n\nI don't think so. Conceivably somebody could choose to run `bitcoin-qt` with `QT_QPA_PLATFORM=minimal` instead of running `bitcoind`, in order to run be able to run a bitcoin node headlessly and still have access coin selection or some other feature that o",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367809295,367809295,
ryanofsky,2018-03-27T13:34:47Z,"Rebased f4b25d498233cf2a894fa27616d65f56b99af390 -> 391bd7d0acac733ade77fa37003b6dae8496b9c8 ([pr/apptest.13](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.13) -> [pr/apptest.14](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.14)) due to conflict with #12610.\n",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376526837,376526837,
Sjors,2018-03-28T11:49:16Z,"Sadly `make` fails for me on macOS 10.13.3:\n\n```\nmake clean\n./autogen.sh\n./configure --disable-bench --with-miniupnpc=no  --with-incompatible-bdb --with-qrencode\nmake -j5\n\n...\n\n CXXLD    test/test_bitcoin_fuzzy\nqt/test/apptests.cpp:80:7: error: no member named 'bitdb' in the global namespace\n    ::bitdb.Close();\n    ~~^\n```",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376858528,376858528,
Sjors,2018-03-28T14:54:30Z,"If I remove the two `::bitdb` lines I can compile, but tests still fail. Trace (using `--enable-debug`): \n\n```\n********* Start testing of RPCNestedTests *********\nConfig: Using QtTest library 5.10.0, Qt 5.10.0 (x86_64-little_endian-lp64 shared (dynamic) release build; by Clang 9.0.0 (clang-900.0.39.2) (Apple))\nPASS   : RPCNestedTests::initTestCase()\nFAIL!  : RPCNestedTests::rpcNestedTe",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376916368,376916368,
ryanofsky,2018-03-28T15:02:58Z,"This is the same UniValue exception that was happening before: https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-367694351. Next step for debugging should probably be to catch the exception and print it.\n\nThis PR is marked work in progress because the UniValue error only happens on macs and I don't currently have one to test with, but I was going to revisit this at some point (and wou",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-376919398,376919398,
ryanofsky,2018-06-26T17:17:09Z,">  Needs rebase \n\nRebased d764545fa6bcddf5b5aa97f503d61d4cd570b45b -> 48f1dec14469270b1e3ca3f9f6d22341ce7009ee ([pr/apptest.22](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.22) -> [pr/apptest.23](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.23)) due to conflict with #13111\nUpdated 48f1dec14469270b1e3ca3f9f6d22341ce7009ee -> 54f9280bb9d6a561b5b358d88281c9cf2d5ff1d0 ([pr/",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-400394509,400394509,
ryanofsky,2018-08-20T20:25:33Z,"Updated 9a062963f588913c1bb3ad824aa60c312d68a49e -> bd1028c45d784539f03de07582a33e466cc5c721 ([pr/apptest.26](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.26) -> [pr/apptest.27](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.27)), fixing some of bugs and finally getting this working on macOS with `-platform minimal` and `-platform cocoa` options.\nUpdated bd1028c45d784539f03de",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-414451195,414451195,
DrahtBot,2018-09-21T13:30:29Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15101](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15101.html) (gui: Add WalletController by promag)\n* [#1",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-423531533,423531533,
MarcoFalke,2018-09-26T15:58:34Z,"This fails to compile due to\n\n```\nqt/libbitcoinqt.a(qt_libbitcoinqt_a-bitcoin.o):(.bss+0x0): multiple definition of `G_TRANSLATION_FUN[abi:cxx11]'",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-424770766,424770766,
ryanofsky,2018-09-26T18:45:36Z,"> multiple definition of `G_TRANSLATION_FUN[abi:cxx11]\n\nThis is from #13961 being merged. It's fixed with the latest rebase.\n\nUpdated bbe0cc9ea20975807de69d8a0e9e30d94981280c -> 91f623f3dff697c570d070fddc05265e7555ba9b ([pr/apptest.28](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.28) -> [pr/apptest.29](https://github.com/ryanofsky/bitcoin/commits/pr/apptest.29)) with whitespace ",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-424827479,424827479,
Sjors,2018-11-20T14:54:08Z,"Tests pass for me on macOS 10.14.1, with and without `--disable-bip70`.\n\nShouldn't this be run as part of `make check`? Otherwise, maybe add them to Travis in a followup?",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-440300834,440300834,
MarcoFalke,2018-12-06T21:19:36Z,"Could move the first commit to a separate pull request, since that is what needs rebase all the time?",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-445033163,445033163,
jonasschnelli,2019-01-04T06:20:34Z,@ryanofsky: interested to pick this up again?,https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-451361866,451361866,
ryanofsky,2019-01-08T15:53:11Z,"> @ryanofsky: interested to pick this up again?\n\nThere was a minor conflict with #15000 last week, but I am maintaining this (and think it probably could be merged).",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-452348613,452348613,
jonasschnelli,2019-01-09T07:48:03Z,"Tested ACK ca20b65cc04825bb317f1a59d02c77912f6bf097\n\nI don't ran into problems when running on macOS with `QT_QPA_PLATFORM=cocoa`, I can see then GUI window opening and closing.\n\nDid also ran without issues on Ubuntu Bionic with `minimal` and `xcb` Platform.\n\n@ryanofsky any reasons why – on Ubuntu – I see the window opening/closing during the AddressBookTests but not during the AppTest",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-452602462,452602462,
ryanofsky,2019-01-09T15:30:03Z,"> @ryanofsky any reasons why – on Ubuntu – I see the window opening/closing during the AddressBookTests but not during the AppTests?\n\nThat would be an unexpected bug. I'm not seeing any windows shown by default with 699d0bd9fe5d39dd078ae4996079af2caf29a4e3 (current master) running `qt/test/test_bitcoin-qt`. I do see windows if I set `QT_QPA_PLATFORM=xcb` (as expected).\n\nYou may want to exp",https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-452737327,452737327,
promag,2017-11-07T14:19:15Z,"```cpp\nbitdb.Close();\nbitdb.Reset();\n```",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149379211,149379211,src/qt/test/apptests.cpp
promag,2017-11-07T14:59:16Z,How about storing the name? Is this supposed to be stack like?,https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149392737,149392737,src/qt/test/apptests.cpp
promag,2017-11-07T15:01:11Z,`QStack<QString> m_callbacks;`. See above.,https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149393582,149393582,src/qt/test/apptests.h
ryanofsky,2017-11-07T23:01:55Z,"> How about storing the name? Is this supposed to be stack like?\n\nKind of, but it's a pool, not a stack. The idea is just for AppTests to just create a bunch of windows and let appropriate tests run as the windows are created, without having to worry about the order events happen. To track names instead of using a counter, `int m_callbacks` could be replaced with `std::multiset<std::string> m_",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531077,149531077,src/qt/test/apptests.cpp
ryanofsky,2017-11-07T23:02:00Z,"Responded above, would have to be a multiset instead of a stack.",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531095,149531095,src/qt/test/apptests.h
ryanofsky,2017-11-07T23:02:24Z,"Thanks, switched.",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531172,149531172,src/qt/test/apptests.cpp
promag,2017-11-07T23:39:21Z,"I see 2 advantages over counting:\n - the comment is optional but the argument is not;\n - better hint if the set is not empty at the end.\n\nBTW, have you thought using QSignalSpy?",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149538105,149538105,src/qt/test/apptests.cpp
ryanofsky,2017-11-08T18:32:48Z,"> I see 2 advantages over counting:\n>\n> * the comment is optional but the argument is not;\n> * better hint if the set is not empty at the end.\n>\n> BTW, have you thought using QSignalSpy?\n\nOk, switched from an int to a set. I didn't know about signal spy, but it doesn't seem quite right for this because it can track signals but not run handlers. Here I am tracking signals (to trigger ",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149757196,149757196,src/qt/test/apptests.cpp
promag,2017-11-08T22:19:27Z,Different commit?,https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149814290,149814290,src/qt/bitcoingui.cpp
promag,2017-11-08T22:20:46Z,Remove?,https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149814564,149814564,src/qt/test/apptests.cpp
promag,2017-11-08T22:33:24Z,"Nit, sort includes.",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149817317,149817317,src/qt/test/apptests.cpp
ryanofsky,2017-11-30T21:47:15Z,"> Different commit?\n\nI'm not a fan of putting code changes in separate commits from test changes. Having related code changes, test changes, and documentation changes together in a single atomic unit makes understanding history simpler, and can let you run automated checks for things like the new test failing before the code change, and succeeding after the code change.",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r154211022,154211022,src/qt/bitcoingui.cpp
ryanofsky,2017-11-30T21:49:04Z,"> Nit, sort includes.\n\nThese are sorted (case is significant).",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r154211551,154211551,src/qt/test/apptests.cpp
ryanofsky,2017-11-30T21:52:21Z,"> Remove?\n\nI don't see why it should be removed. This was added by iwyu, and I tend to agree with the rationales they give for including things at https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/WhyIWYU.md",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r154212332,154212332,src/qt/test/apptests.cpp
Sjors,2018-03-28T11:55:22Z,Should `bitdb` be used directly? See https://github.com/bitcoin/bitcoin/pull/9951/commits/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e,https://github.com/bitcoin/bitcoin/pull/11625#discussion_r177723467,177723467,src/qt/test/apptests.cpp
ryanofsky,2018-03-28T12:09:21Z,"> Should bitdb be used directly? See be9e1a9\n\nProbably these calls should just be dropped. I had to make similar changes to wallettests.cpp \nin #11687 (which was merged since the PR was opened): https://github.com/bitcoin/bitcoin/pull/11687/commits/d8a99f65e53019becdd8d2631396012bafb29741#diff-6fcb1829ce66ad65046d6896dbcc910b\n",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r177726439,177726439,src/qt/test/apptests.cpp
Sjors,2018-03-28T14:49:38Z,"If I remove those lines `make` is happy (but tests still fail, see below).",https://github.com/bitcoin/bitcoin/pull/11625#discussion_r177777072,177777072,src/qt/test/apptests.cpp
practicalswift,2018-10-23T04:37:53Z,This file lacks a copyright message :-),https://github.com/bitcoin/bitcoin/pull/11625#discussion_r227221479,227221479,src/qt/test/apptests.cpp
practicalswift,2018-10-23T04:38:16Z,This file lacks a copyright message :-),https://github.com/bitcoin/bitcoin/pull/11625#discussion_r227221518,227221518,src/qt/test/apptests.h
practicalswift,2018-10-23T04:38:42Z,Should be `explicit` :-),https://github.com/bitcoin/bitcoin/pull/11625#discussion_r227221576,227221576,src/qt/test/apptests.h
