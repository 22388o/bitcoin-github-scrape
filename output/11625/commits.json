[
  {
    "sha": "ca20b65cc04825bb317f1a59d02c77912f6bf097",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTIwYjY1Y2MwNDgyNWJiMzE3ZjFhNTlkMDJjNzc5MTJmNmJmMDk3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-05-18T20:41:56Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-01-04T11:31:07Z"
      },
      "message": "Move BitcoinApplication to header so it can be tested\n\nMove-only commit, no code changes",
      "tree": {
        "sha": "2a49f41cea31d2fffe005d67bebcde9ddc3cf48d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a49f41cea31d2fffe005d67bebcde9ddc3cf48d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca20b65cc04825bb317f1a59d02c77912f6bf097",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca20b65cc04825bb317f1a59d02c77912f6bf097",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca20b65cc04825bb317f1a59d02c77912f6bf097",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca20b65cc04825bb317f1a59d02c77912f6bf097/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7e182a973ed66b4c11dc6239e57016655503b4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7e182a973ed66b4c11dc6239e57016655503b4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7e182a973ed66b4c11dc6239e57016655503b4c"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 125,
      "deletions": 96
    },
    "files": [
      {
        "sha": "e4b75a14b3b8c242dea74a7050739038aa1ff356",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca20b65cc04825bb317f1a59d02c77912f6bf097/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca20b65cc04825bb317f1a59d02c77912f6bf097/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=ca20b65cc04825bb317f1a59d02c77912f6bf097",
        "patch": "@@ -120,6 +120,7 @@ QT_MOC_CPP = \\\n   qt/moc_bantablemodel.cpp \\\n   qt/moc_bitcoinaddressvalidator.cpp \\\n   qt/moc_bitcoinamountfield.cpp \\\n+  qt/moc_bitcoin.cpp \\\n   qt/moc_bitcoingui.cpp \\\n   qt/moc_bitcoinunits.cpp \\\n   qt/moc_clientmodel.cpp \\\n@@ -166,7 +167,6 @@ BITCOIN_MM = \\\n   qt/macos_appnap.mm\n \n QT_MOC = \\\n-  qt/bitcoin.moc \\\n   qt/bitcoinamountfield.moc \\\n   qt/intro.moc \\\n   qt/overviewpage.moc \\\n@@ -194,6 +194,7 @@ BITCOIN_QT_H = \\\n   qt/bantablemodel.h \\\n   qt/bitcoinaddressvalidator.h \\\n   qt/bitcoinamountfield.h \\\n+  qt/bitcoin.h \\\n   qt/bitcoingui.h \\\n   qt/bitcoinunits.h \\\n   qt/clientmodel.h \\"
      },
      {
        "sha": "279723c4f98822e76cae04066d1184eb9593bdbf",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 95,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca20b65cc04825bb317f1a59d02c77912f6bf097/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca20b65cc04825bb317f1a59d02c77912f6bf097/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ca20b65cc04825bb317f1a59d02c77912f6bf097",
        "patch": "@@ -6,6 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <qt/bitcoin.h>\n #include <qt/bitcoingui.h>\n \n #include <chainparams.h>\n@@ -140,101 +141,6 @@ void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, cons\n     }\n }\n \n-/** Class encapsulating Bitcoin Core startup and shutdown.\n- * Allows running startup and shutdown in a different thread from the UI thread.\n- */\n-class BitcoinCore: public QObject\n-{\n-    Q_OBJECT\n-public:\n-    explicit BitcoinCore(interfaces::Node& node);\n-\n-public Q_SLOTS:\n-    void initialize();\n-    void shutdown();\n-\n-Q_SIGNALS:\n-    void initializeResult(bool success);\n-    void shutdownResult();\n-    void runawayException(const QString &message);\n-\n-private:\n-    /// Pass fatal exception message to UI thread\n-    void handleRunawayException(const std::exception *e);\n-\n-    interfaces::Node& m_node;\n-};\n-\n-/** Main Bitcoin application object */\n-class BitcoinApplication: public QApplication\n-{\n-    Q_OBJECT\n-public:\n-    explicit BitcoinApplication(interfaces::Node& node, int &argc, char **argv);\n-    ~BitcoinApplication();\n-\n-#ifdef ENABLE_WALLET\n-    /// Create payment server\n-    void createPaymentServer();\n-#endif\n-    /// parameter interaction/setup based on rules\n-    void parameterSetup();\n-    /// Create options model\n-    void createOptionsModel(bool resetSettings);\n-    /// Create main window\n-    void createWindow(const NetworkStyle *networkStyle);\n-    /// Create splash screen\n-    void createSplashScreen(const NetworkStyle *networkStyle);\n-\n-    /// Request core initialization\n-    void requestInitialize();\n-    /// Request core shutdown\n-    void requestShutdown();\n-\n-    /// Get process return value\n-    int getReturnValue() const { return returnValue; }\n-\n-    /// Get window identifier of QMainWindow (BitcoinGUI)\n-    WId getMainWinId() const;\n-\n-    /// Setup platform style\n-    void setupPlatformStyle();\n-\n-public Q_SLOTS:\n-    void initializeResult(bool success);\n-    void shutdownResult();\n-    /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n-    void handleRunawayException(const QString &message);\n-    void addWallet(WalletModel* walletModel);\n-    void removeWallet();\n-\n-Q_SIGNALS:\n-    void requestedInitialize();\n-    void requestedShutdown();\n-    void stopThread();\n-    void splashFinished();\n-\n-private:\n-    QThread *coreThread;\n-    interfaces::Node& m_node;\n-    OptionsModel *optionsModel;\n-    ClientModel *clientModel;\n-    BitcoinGUI *window;\n-    QTimer *pollShutdownTimer;\n-#ifdef ENABLE_WALLET\n-    PaymentServer* paymentServer;\n-    std::vector<WalletModel*> m_wallet_models;\n-    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n-#endif\n-    int returnValue;\n-    const PlatformStyle *platformStyle;\n-    std::unique_ptr<QWidget> shutdownWindow;\n-\n-    void startThread();\n-};\n-\n-#include <qt/bitcoin.moc>\n-\n BitcoinCore::BitcoinCore(interfaces::Node& node) :\n     QObject(), m_node(node)\n {"
      },
      {
        "sha": "ec0ed5bed728cbaf75c140f952e48de09c549a17",
        "filename": "src/qt/bitcoin.h",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca20b65cc04825bb317f1a59d02c77912f6bf097/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca20b65cc04825bb317f1a59d02c77912f6bf097/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=ca20b65cc04825bb317f1a59d02c77912f6bf097",
        "patch": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_BITCOIN_H\n+#define BITCOIN_QT_BITCOIN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <QApplication>\n+#include <memory>\n+#include <vector>\n+\n+class BitcoinGUI;\n+class ClientModel;\n+class NetworkStyle;\n+class OptionsModel;\n+class PaymentServer;\n+class PlatformStyle;\n+class WalletModel;\n+\n+namespace interfaces {\n+class Handler;\n+class Node;\n+} // namespace interfaces\n+\n+/** Class encapsulating Bitcoin Core startup and shutdown.\n+ * Allows running startup and shutdown in a different thread from the UI thread.\n+ */\n+class BitcoinCore: public QObject\n+{\n+    Q_OBJECT\n+public:\n+    explicit BitcoinCore(interfaces::Node& node);\n+\n+public Q_SLOTS:\n+    void initialize();\n+    void shutdown();\n+\n+Q_SIGNALS:\n+    void initializeResult(bool success);\n+    void shutdownResult();\n+    void runawayException(const QString &message);\n+\n+private:\n+    /// Pass fatal exception message to UI thread\n+    void handleRunawayException(const std::exception *e);\n+\n+    interfaces::Node& m_node;\n+};\n+\n+/** Main Bitcoin application object */\n+class BitcoinApplication: public QApplication\n+{\n+    Q_OBJECT\n+public:\n+    explicit BitcoinApplication(interfaces::Node& node, int &argc, char **argv);\n+    ~BitcoinApplication();\n+\n+#ifdef ENABLE_WALLET\n+    /// Create payment server\n+    void createPaymentServer();\n+#endif\n+    /// parameter interaction/setup based on rules\n+    void parameterSetup();\n+    /// Create options model\n+    void createOptionsModel(bool resetSettings);\n+    /// Create main window\n+    void createWindow(const NetworkStyle *networkStyle);\n+    /// Create splash screen\n+    void createSplashScreen(const NetworkStyle *networkStyle);\n+\n+    /// Request core initialization\n+    void requestInitialize();\n+    /// Request core shutdown\n+    void requestShutdown();\n+\n+    /// Get process return value\n+    int getReturnValue() const { return returnValue; }\n+\n+    /// Get window identifier of QMainWindow (BitcoinGUI)\n+    WId getMainWinId() const;\n+\n+    /// Setup platform style\n+    void setupPlatformStyle();\n+\n+public Q_SLOTS:\n+    void initializeResult(bool success);\n+    void shutdownResult();\n+    /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n+    void handleRunawayException(const QString &message);\n+    void addWallet(WalletModel* walletModel);\n+    void removeWallet();\n+\n+Q_SIGNALS:\n+    void requestedInitialize();\n+    void requestedShutdown();\n+    void stopThread();\n+    void splashFinished();\n+\n+private:\n+    QThread *coreThread;\n+    interfaces::Node& m_node;\n+    OptionsModel *optionsModel;\n+    ClientModel *clientModel;\n+    BitcoinGUI *window;\n+    QTimer *pollShutdownTimer;\n+#ifdef ENABLE_WALLET\n+    PaymentServer* paymentServer;\n+    std::vector<WalletModel*> m_wallet_models;\n+    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n+#endif\n+    int returnValue;\n+    const PlatformStyle *platformStyle;\n+    std::unique_ptr<QWidget> shutdownWindow;\n+\n+    void startThread();\n+};\n+\n+#endif // BITCOIN_QT_BITCOIN_H"
      }
    ]
  },
  {
    "sha": "7e4bd19785ff9120b7242ff9f15231868aaf7db4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTRiZDE5Nzg1ZmY5MTIwYjcyNDJmZjlmMTUyMzE4NjhhYWY3ZGI0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-07T01:11:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-01-04T11:31:07Z"
      },
      "message": "Add BitcoinApplication & RPCConsole tests\n\nAdd test coverage for Qt initialization code & basic RPC console functionality.",
      "tree": {
        "sha": "6a08b07a7be3233661b9a1bf973d77fa81a31109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a08b07a7be3233661b9a1bf973d77fa81a31109"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e4bd19785ff9120b7242ff9f15231868aaf7db4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e4bd19785ff9120b7242ff9f15231868aaf7db4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e4bd19785ff9120b7242ff9f15231868aaf7db4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e4bd19785ff9120b7242ff9f15231868aaf7db4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca20b65cc04825bb317f1a59d02c77912f6bf097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca20b65cc04825bb317f1a59d02c77912f6bf097",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca20b65cc04825bb317f1a59d02c77912f6bf097"
      }
    ],
    "stats": {
      "total": 259,
      "additions": 235,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f4f84e2a99ea0a65f8a3338a44471c1c4da75d30",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -303,6 +303,7 @@ RES_ICONS = \\\n \n BITCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n+  qt/bitcoin.cpp \\\n   qt/bitcoinaddressvalidator.cpp \\\n   qt/bitcoinamountfield.cpp \\\n   qt/bitcoingui.cpp \\\n@@ -383,6 +384,9 @@ qt_libbitcoinqt_a_OBJCXXFLAGS = $(AM_OBJCXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n   $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n+if TARGET_DARWIN\n+  qt_libbitcoinqt_a_SOURCES += $(BITCOIN_MM)\n+endif\n \n nodist_qt_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(PROTOBUF_CC) \\\n   $(PROTOBUF_H) $(QT_QRC_CPP) $(QT_QRC_LOCALE_CPP)\n@@ -405,10 +409,7 @@ qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDE\n   $(QT_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n-qt_bitcoin_qt_SOURCES = qt/bitcoin.cpp\n-if TARGET_DARWIN\n-  qt_bitcoin_qt_SOURCES += $(BITCOIN_MM)\n-endif\n+qt_bitcoin_qt_SOURCES = qt/main.cpp\n if TARGET_WINDOWS\n   qt_bitcoin_qt_SOURCES += $(BITCOIN_RC)\n endif"
      },
      {
        "sha": "61977b50cd45e790fadc6a9cd769876cacf6a6b7",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -6,6 +6,7 @@ bin_PROGRAMS += qt/test/test_bitcoin-qt\n TESTS += qt/test/test_bitcoin-qt\n \n TEST_QT_MOC_CPP = \\\n+  qt/test/moc_apptests.cpp \\\n   qt/test/moc_compattests.cpp \\\n   qt/test/moc_rpcnestedtests.cpp \\\n   qt/test/moc_uritests.cpp\n@@ -22,6 +23,7 @@ endif # ENABLE_WALLET\n \n TEST_QT_H = \\\n   qt/test/addressbooktests.h \\\n+  qt/test/apptests.h \\\n   qt/test/compattests.h \\\n   qt/test/rpcnestedtests.h \\\n   qt/test/uritests.h \\\n@@ -40,6 +42,7 @@ qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n+  qt/test/apptests.cpp \\\n   qt/test/compattests.cpp \\\n   qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\"
      },
      {
        "sha": "12b3b1992d1ede16916f383e07b5a07db5f7bfce",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -72,11 +72,6 @@ Q_DECLARE_METATYPE(bool*)\n Q_DECLARE_METATYPE(CAmount)\n Q_DECLARE_METATYPE(uint256)\n \n-/** Translate string to current locale using Qt. */\n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = [](const char* psz) {\n-    return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n-};\n-\n static QString GetLangTerritory()\n {\n     QSettings settings;\n@@ -264,6 +259,11 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     connect(this, &BitcoinApplication::requestedShutdown, splash, &QWidget::close);\n }\n \n+bool BitcoinApplication::baseInitialize()\n+{\n+    return m_node.baseInitialize();\n+}\n+\n void BitcoinApplication::startThread()\n {\n     if(coreThread)\n@@ -373,7 +373,7 @@ void BitcoinApplication::initializeResult(bool success)\n #ifdef ENABLE_BIP70\n         PaymentServer::LoadRootCAs();\n #endif\n-        paymentServer->setOptionsModel(optionsModel);\n+        if (paymentServer) paymentServer->setOptionsModel(optionsModel);\n #endif\n \n         clientModel = new ClientModel(m_node, optionsModel);\n@@ -402,16 +402,19 @@ void BitcoinApplication::initializeResult(bool success)\n             window->show();\n         }\n         Q_EMIT splashFinished();\n+        Q_EMIT windowShown(window);\n \n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line\n         // bitcoin: URIs or payment requests:\n-        connect(paymentServer, &PaymentServer::receivedPaymentRequest, window, &BitcoinGUI::handlePaymentRequest);\n-        connect(window, &BitcoinGUI::receivedURI, paymentServer, &PaymentServer::handleURIOrFile);\n-        connect(paymentServer, &PaymentServer::message, [this](const QString& title, const QString& message, unsigned int style) {\n-            window->message(title, message, style);\n-        });\n-        QTimer::singleShot(100, paymentServer, &PaymentServer::uiReady);\n+        if (paymentServer) {\n+            connect(paymentServer, &PaymentServer::receivedPaymentRequest, window, &BitcoinGUI::handlePaymentRequest);\n+            connect(window, &BitcoinGUI::receivedURI, paymentServer, &PaymentServer::handleURIOrFile);\n+            connect(paymentServer, &PaymentServer::message, [this](const QString& title, const QString& message, unsigned int style) {\n+                window->message(title, message, style);\n+            });\n+            QTimer::singleShot(100, paymentServer, &PaymentServer::uiReady);\n+        }\n #endif\n         pollShutdownTimer->start(200);\n     } else {\n@@ -454,7 +457,7 @@ static void SetupUIArgs()\n }\n \n #ifndef BITCOIN_QT_TEST\n-int main(int argc, char *argv[])\n+int GuiMain(int argc, char* argv[])\n {\n #ifdef WIN32\n     util::WinCmdLineArgs winArgs;\n@@ -612,7 +615,7 @@ int main(int argc, char *argv[])\n         // Perform base initialization before spinning up initialization/shutdown thread\n         // This is acceptable because this function only contains steps that are quick to execute,\n         // so the GUI thread won't be held up.\n-        if (node->baseInitialize()) {\n+        if (app.baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN)\n             WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());"
      },
      {
        "sha": "48b5907570a5e88f9f3667df17f9ba2f5dbe985f",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -71,6 +71,8 @@ class BitcoinApplication: public QApplication\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n     void createSplashScreen(const NetworkStyle *networkStyle);\n+    /// Basic initialization, before starting initialization/shutdown thread. Return true on success.\n+    bool baseInitialize();\n \n     /// Request core initialization\n     void requestInitialize();\n@@ -99,6 +101,7 @@ public Q_SLOTS:\n     void requestedShutdown();\n     void stopThread();\n     void splashFinished();\n+    void windowShown(BitcoinGUI* window);\n \n private:\n     QThread *coreThread;\n@@ -119,4 +122,6 @@ public Q_SLOTS:\n     void startThread();\n };\n \n+int GuiMain(int argc, char* argv[]);\n+\n #endif // BITCOIN_QT_BITCOIN_H"
      },
      {
        "sha": "04a2f938c4eef43d82f69fa6371c4691e7ae2d45",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -110,6 +110,7 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n          * the central widget is the rpc console.\n          */\n         setCentralWidget(rpcConsole);\n+        Q_EMIT consoleShown(rpcConsole);\n     }\n \n     // Accept D&D of URIs\n@@ -324,6 +325,7 @@ void BitcoinGUI::createActions()\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n     // initially disable the debug window menu item\n     openRPCConsoleAction->setEnabled(false);\n+    openRPCConsoleAction->setObjectName(\"openRPCConsoleAction\");\n \n     usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n@@ -642,9 +644,11 @@ void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n     assert(QSystemTrayIcon::isSystemTrayAvailable());\n \n #ifndef Q_OS_MAC\n-    trayIcon = new QSystemTrayIcon(networkStyle->getTrayAndWindowIcon(), this);\n-    QString toolTip = tr(\"%1 client\").arg(tr(PACKAGE_NAME)) + \" \" + networkStyle->getTitleAddText();\n-    trayIcon->setToolTip(toolTip);\n+    if (QSystemTrayIcon::isSystemTrayAvailable()) {\n+        trayIcon = new QSystemTrayIcon(networkStyle->getTrayAndWindowIcon(), this);\n+        QString toolTip = tr(\"%1 client\").arg(tr(PACKAGE_NAME)) + \" \" + networkStyle->getTitleAddText();\n+        trayIcon->setToolTip(toolTip);\n+    }\n #endif\n }\n \n@@ -724,6 +728,7 @@ void BitcoinGUI::aboutClicked()\n void BitcoinGUI::showDebugWindow()\n {\n     GUIUtil::bringToFront(rpcConsole);\n+    Q_EMIT consoleShown(rpcConsole);\n }\n \n void BitcoinGUI::showDebugWindowActivateConsole()"
      },
      {
        "sha": "c48a6fc496653764839d86a841de5b1374a2abeb",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -187,6 +187,8 @@ class BitcoinGUI : public QMainWindow\n Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n+    /** Signal raised when RPC console shown */\n+    void consoleShown(RPCConsole* console);\n \n public Q_SLOTS:\n     /** Set number of connections shown in the UI */"
      },
      {
        "sha": "6a3c2249d1b99873e102141def3c9e60856ef24b",
        "filename": "src/qt/main.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/main.cpp?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/bitcoin.h>\n+\n+#include <QCoreApplication>\n+\n+#include <functional>\n+#include <string>\n+\n+/** Translate string to current locale using Qt. */\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = [](const char* psz) {\n+    return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n+};\n+\n+int main(int argc, char* argv[]) { return GuiMain(argc, argv); }"
      },
      {
        "sha": "2c477a2e9871fbe696e8a67e94251aa4a781515c",
        "filename": "src/qt/test/apptests.cpp",
        "status": "added",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/test/apptests.h>\n+\n+#include <chainparams.h>\n+#include <init.h>\n+#include <qt/bitcoin.h>\n+#include <qt/bitcoingui.h>\n+#include <qt/networkstyle.h>\n+#include <qt/rpcconsole.h>\n+#include <shutdown.h>\n+#include <validation.h>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+#ifdef ENABLE_WALLET\n+#include <wallet/db.h>\n+#endif\n+\n+#include <QAction>\n+#include <QEventLoop>\n+#include <QLineEdit>\n+#include <QScopedPointer>\n+#include <QTest>\n+#include <QTextEdit>\n+#include <QtGlobal>\n+#if QT_VERSION >= 0x050000\n+#include <QtTest/QtTestWidgets>\n+#endif\n+#include <QtTest/QtTestGui>\n+#include <new>\n+#include <string>\n+#include <univalue.h>\n+\n+namespace {\n+//! Call getblockchaininfo RPC and check first field of JSON output.\n+void TestRpcCommand(RPCConsole* console)\n+{\n+    QEventLoop loop;\n+    QTextEdit* messagesWidget = console->findChild<QTextEdit*>(\"messagesWidget\");\n+    QObject::connect(messagesWidget, &QTextEdit::textChanged, &loop, &QEventLoop::quit);\n+    QLineEdit* lineEdit = console->findChild<QLineEdit*>(\"lineEdit\");\n+    QTest::keyClicks(lineEdit, \"getblockchaininfo\");\n+    QTest::keyClick(lineEdit, Qt::Key_Return);\n+    loop.exec();\n+    QString output = messagesWidget->toPlainText();\n+    UniValue value;\n+    value.read(output.right(output.size() - output.lastIndexOf(QChar::ObjectReplacementCharacter) - 1).toStdString());\n+    QCOMPARE(value[\"chain\"].get_str(), std::string(\"regtest\"));\n+}\n+} // namespace\n+\n+//! Entry point for BitcoinApplication tests.\n+void AppTests::appTests()\n+{\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping AppTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n+\n+    m_app.parameterSetup();\n+    m_app.createOptionsModel(true /* reset settings */);\n+    QScopedPointer<const NetworkStyle> style(\n+        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    m_app.setupPlatformStyle();\n+    m_app.createWindow(style.data());\n+    connect(&m_app, &BitcoinApplication::windowShown, this, &AppTests::guiTests);\n+    expectCallback(\"guiTests\");\n+    m_app.baseInitialize();\n+    m_app.requestInitialize();\n+    m_app.exec();\n+    m_app.requestShutdown();\n+    m_app.exec();\n+\n+    // Reset global state to avoid interfering with later tests.\n+    AbortShutdown();\n+    UnloadBlockIndex();\n+}\n+\n+//! Entry point for BitcoinGUI tests.\n+void AppTests::guiTests(BitcoinGUI* window)\n+{\n+    HandleCallback callback{\"guiTests\", *this};\n+    connect(window, &BitcoinGUI::consoleShown, this, &AppTests::consoleTests);\n+    expectCallback(\"consoleTests\");\n+    QAction* action = window->findChild<QAction*>(\"openRPCConsoleAction\");\n+    action->activate(QAction::Trigger);\n+}\n+\n+//! Entry point for RPCConsole tests.\n+void AppTests::consoleTests(RPCConsole* console)\n+{\n+    HandleCallback callback{\"consoleTests\", *this};\n+    TestRpcCommand(console);\n+}\n+\n+//! Destructor to shut down after the last expected callback completes.\n+AppTests::HandleCallback::~HandleCallback()\n+{\n+    auto& callbacks = m_app_tests.m_callbacks;\n+    auto it = callbacks.find(m_callback);\n+    assert(it != callbacks.end());\n+    callbacks.erase(it);\n+    if (callbacks.empty()) {\n+        m_app_tests.m_app.quit();\n+    }\n+}"
      },
      {
        "sha": "83bf56f1e464eb540e62e393331932533e61175f",
        "filename": "src/qt/test/apptests.h",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_TEST_APPTESTS_H\n+#define BITCOIN_QT_TEST_APPTESTS_H\n+\n+#include <QObject>\n+#include <set>\n+#include <string>\n+#include <utility>\n+\n+class BitcoinApplication;\n+class BitcoinGUI;\n+class RPCConsole;\n+\n+class AppTests : public QObject\n+{\n+    Q_OBJECT\n+public:\n+    explicit AppTests(BitcoinApplication& app) : m_app(app) {}\n+\n+private Q_SLOTS:\n+    void appTests();\n+    void guiTests(BitcoinGUI* window);\n+    void consoleTests(RPCConsole* console);\n+\n+private:\n+    //! Add expected callback name to list of pending callbacks.\n+    void expectCallback(std::string callback) { m_callbacks.emplace(std::move(callback)); }\n+\n+    //! RAII helper to remove no-longer-pending callback.\n+    struct HandleCallback\n+    {\n+        std::string m_callback;\n+        AppTests& m_app_tests;\n+        ~HandleCallback();\n+    };\n+\n+    //! Bitcoin application.\n+    BitcoinApplication& m_app;\n+\n+    //! Set of pending callback names. Used to track expected callbacks and shut\n+    //! down the app after the last callback has been handled and all tests have\n+    //! either run or thrown exceptions. This could be a simple int counter\n+    //! instead of a set of names, but the names might be useful for debugging.\n+    std::multiset<std::string> m_callbacks;\n+};\n+\n+#endif // BITCOIN_QT_TEST_APPTESTS_H"
      },
      {
        "sha": "173c814f1eb3686ea27b39b55dd0ccc64ac19a01",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -41,7 +41,7 @@ void RPCNestedTests::rpcNestedTests()\n \n     TestingSetup test;\n \n-    SetRPCWarmupFinished();\n+    if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();\n \n     std::string result;\n     std::string result2;"
      },
      {
        "sha": "a2bf53973b1d6bb07c5f05b10f1f55e9305f1b0b",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e4bd19785ff9120b7242ff9f15231868aaf7db4/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=7e4bd19785ff9120b7242ff9f15231868aaf7db4",
        "patch": "@@ -7,6 +7,9 @@\n #endif\n \n #include <chainparams.h>\n+#include <interfaces/node.h>\n+#include <qt/bitcoin.h>\n+#include <qt/test/apptests.h>\n #include <qt/test/rpcnestedtests.h>\n #include <util/system.h>\n #include <qt/test/uritests.h>\n@@ -47,12 +50,13 @@ int main(int argc, char *argv[])\n {\n     SetupEnvironment();\n     SetupNetworking();\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::REGTEST);\n     noui_connect();\n     ClearDatadirCache();\n     fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n     fs::create_directories(pathTemp);\n     gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+    auto node = interfaces::MakeNode();\n \n     bool fInvalid = false;\n \n@@ -67,11 +71,15 @@ int main(int argc, char *argv[])\n \n     // Don't remove this, it's needed to access\n     // QApplication:: and QCoreApplication:: in the tests\n-    QApplication app(argc, argv);\n+    BitcoinApplication app(*node, argc, argv);\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n \n     SSL_library_init();\n \n+    AppTests app_tests(app);\n+    if (QTest::qExec(&app_tests) != 0) {\n+        fInvalid = true;\n+    }\n     URITests test1;\n     if (QTest::qExec(&test1) != 0) {\n         fInvalid = true;"
      }
    ]
  }
]