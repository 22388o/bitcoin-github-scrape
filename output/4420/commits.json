[
  {
    "sha": "aa815647005bc8467f467c35a9e617794446cd64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTgxNTY0NzAwNWJjODQ2N2Y0NjdjMzVhOWU2MTc3OTQ0NDZjZDY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-22T22:00:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-29T19:50:55Z"
      },
      "message": "Track peers' available blocks",
      "tree": {
        "sha": "9b97cad3ab2f673aadda08802d7aa74edc483552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b97cad3ab2f673aadda08802d7aa74edc483552"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa815647005bc8467f467c35a9e617794446cd64",
      "comment_count": 5,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa815647005bc8467f467c35a9e617794446cd64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa815647005bc8467f467c35a9e617794446cd64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa815647005bc8467f467c35a9e617794446cd64/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a11f648585ce29ae0be1a572ccbd7611f3dd2b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11f648585ce29ae0be1a572ccbd7611f3dd2b1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a11f648585ce29ae0be1a572ccbd7611f3dd2b1d"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc6843128238e594b6f55a8b6a863a6dc41890db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa815647005bc8467f467c35a9e617794446cd64/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa815647005bc8467f467c35a9e617794446cd64/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aa815647005bc8467f467c35a9e617794446cd64",
        "patch": "@@ -207,6 +207,10 @@ struct CNodeState {\n     std::string name;\n     // List of asynchronously-determined block rejections to notify this peer about.\n     std::vector<CBlockReject> rejects;\n+    // The best known block we know this peer has announced.\n+    CBlockIndex *pindexBestKnownBlock;\n+    // The hash of the last unknown block this peer has announced.\n+    uint256 hashLastUnknownBlock;\n     list<QueuedBlock> vBlocksInFlight;\n     int nBlocksInFlight;\n     list<uint256> vBlocksToDownload;\n@@ -217,6 +221,8 @@ struct CNodeState {\n     CNodeState() {\n         nMisbehavior = 0;\n         fShouldBan = false;\n+        pindexBestKnownBlock = NULL;\n+        hashLastUnknownBlock = uint256(0);\n         nBlocksToDownload = 0;\n         nBlocksInFlight = 0;\n         nLastBlockReceive = 0;\n@@ -313,6 +319,39 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash) {\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n+/** Check whether the last unknown block a peer advertized is not yet known. */\n+void ProcessBlockAvailability(NodeId nodeid) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != NULL);\n+\n+    if (state->hashLastUnknownBlock != 0) {\n+        map<uint256, CBlockIndex*>::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n+        if (itOld != mapBlockIndex.end() && itOld->second->nChainWork > 0) {\n+            if (state->pindexBestKnownBlock == NULL || itOld->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n+                state->pindexBestKnownBlock = itOld->second;\n+            state->hashLastUnknownBlock = uint256(0);\n+        }\n+    }\n+}\n+\n+/** Update tracking information about which blocks a peer is assumed to have. */\n+void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != NULL);\n+\n+    ProcessBlockAvailability(nodeid);\n+\n+    map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(hash);\n+    if (it != mapBlockIndex.end() && it->second->nChainWork > 0) {\n+        // An actually better block was announced.\n+        if (state->pindexBestKnownBlock == NULL || it->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n+            state->pindexBestKnownBlock = it->second;\n+    } else {\n+        // An unknown block was announced; just assume that the latest one is the best one.\n+        state->hashLastUnknownBlock = hash;\n+    }\n+}\n+\n } // anon namespace\n \n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n@@ -321,6 +360,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     if (state == NULL)\n         return false;\n     stats.nMisbehavior = state->nMisbehavior;\n+    stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n     return true;\n }\n \n@@ -3613,6 +3653,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+\n             // Track requests for our stuff\n             g_signals.Inventory(inv.hash);\n         }\n@@ -4359,6 +4402,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->fDisconnect = true;\n         }\n \n+        // Update knowledge of peer's block availability.\n+        ProcessBlockAvailability(pto->GetId());\n+\n         //\n         // Message: getdata (blocks)\n         //"
      },
      {
        "sha": "9487078b749158a1daeb7a4a9ad3d3170a14f0b2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa815647005bc8467f467c35a9e617794446cd64/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa815647005bc8467f467c35a9e617794446cd64/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aa815647005bc8467f467c35a9e617794446cd64",
        "patch": "@@ -185,6 +185,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n struct CNodeStateStats {\n     int nMisbehavior;\n+    int nSyncHeight;\n };\n \n struct CDiskBlockPos"
      },
      {
        "sha": "2d7abb2d5872c4c5051791a9443215c21dbcc5ae",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa815647005bc8467f467c35a9e617794446cd64/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa815647005bc8467f467c35a9e617794446cd64/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=aa815647005bc8467f467c35a9e617794446cd64",
        "patch": "@@ -134,6 +134,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+            obj.push_back(Pair(\"syncheight\", statestats.nSyncHeight));\n         }\n         obj.push_back(Pair(\"syncnode\", stats.fSyncNode));\n "
      }
    ]
  },
  {
    "sha": "c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWEwOTE4MzMwZjMxZGNiMWQ1ZTg2YjU2YWY2M2MzZjUyMWQzY2Yy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2014-06-24T22:56:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-29T19:51:54Z"
      },
      "message": "Add a skiplist to the CBlockIndex structure.\n\nThis allows fast (O(log n)) access to far predecessor blocks.\nUse it to speed up CChain::FindFork and CChain::GetLocator.",
      "tree": {
        "sha": "66ff2a641ab21415f41dd6c602538a406ab206ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66ff2a641ab21415f41dd6c602538a406ab206ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa815647005bc8467f467c35a9e617794446cd64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa815647005bc8467f467c35a9e617794446cd64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa815647005bc8467f467c35a9e617794446cd64"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 69,
      "deletions": 2
    },
    "files": [
      {
        "sha": "41125cb57732a2165f3dad94b0f35fbf4e81acaf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 1,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
        "patch": "@@ -414,8 +414,11 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n             break;\n         // Exponentially larger steps back, plus the genesis block.\n         int nHeight = std::max(pindex->nHeight - nStep, 0);\n+        // Jump back quickly to the same height as the chain.\n+        if (pindex->nHeight > nHeight)\n+            pindex = pindex->GetAncestor(nHeight);\n         // In case pindex is not in this chain, iterate pindex->pprev to find blocks.\n-        while (pindex->nHeight > nHeight && !Contains(pindex))\n+        while (!Contains(pindex))\n             pindex = pindex->pprev;\n         // If pindex is in this chain, use direct height-based access.\n         if (pindex->nHeight > nHeight)\n@@ -442,6 +445,8 @@ CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n }\n \n CBlockIndex *CChain::FindFork(CBlockIndex *pindex) const {\n+    if (pindex->nHeight > Height())\n+        pindex = pindex->GetAncestor(Height());\n     while (pindex && !Contains(pindex))\n         pindex = pindex->pprev;\n     return pindex;\n@@ -2151,6 +2156,7 @@ CBlockIndex* AddToBlockIndex(CBlockHeader& block)\n     {\n         pindexNew->pprev = (*miPrev).second;\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n+        pindexNew->BuildSkip();\n     }\n     pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork();\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n@@ -2508,6 +2514,55 @@ bool CBlockIndex::IsSuperMajority(int minVersion, const CBlockIndex* pstart, uns\n     return (nFound >= nRequired);\n }\n \n+/** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n+int static inline InvertLowestOne(int n) { return n & (n - 1); }\n+\n+/** Compute what height to jump back to with the CBlockIndex::pskip pointer. */\n+int static inline GetSkipHeight(int height) {\n+    if (height < 2)\n+        return 0;\n+\n+    // Determine which height to jump back to. Any number strictly lower than height is acceptable,\n+    // but the following expression seems to perform well in simulations (max 110 steps to go back\n+    // up to 2**18 blocks).\n+    return (height & 1) ? InvertLowestOne(InvertLowestOne(height - 1)) + 1 : InvertLowestOne(height);\n+}\n+\n+CBlockIndex* CBlockIndex::GetAncestor(int height)\n+{\n+    if (height > nHeight || height < 0)\n+        return NULL;\n+\n+    CBlockIndex* pindexWalk = this;\n+    int heightWalk = nHeight;\n+    while (heightWalk > height) {\n+        int heightSkip = GetSkipHeight(heightWalk);\n+        int heightSkipPrev = GetSkipHeight(heightWalk - 1);\n+        if (heightSkip == height ||\n+            (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n+                                      heightSkipPrev >= height))) {\n+            // Only follow pskip if pprev->pskip isn't better than pskip->pprev.\n+            pindexWalk = pindexWalk->pskip;\n+            heightWalk = heightSkip;\n+        } else {\n+            pindexWalk = pindexWalk->pprev;\n+            heightWalk--;\n+        }\n+    }\n+    return pindexWalk;\n+}\n+\n+const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n+{\n+    return const_cast<CBlockIndex*>(this)->GetAncestor(height);\n+}\n+\n+void CBlockIndex::BuildSkip()\n+{\n+    if (pprev)\n+        pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n+}\n+\n void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd)\n {\n     AssertLockHeld(cs_main);\n@@ -2858,6 +2913,8 @@ bool static LoadBlockIndexDB()\n             setBlockIndexValid.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n             pindexBestInvalid = pindex;\n+        if (pindex->pprev)\n+            pindex->BuildSkip();\n     }\n \n     // Load block file info"
      },
      {
        "sha": "1af86b065fa2fa1572d509c702024f94f2b0d6fa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
        "patch": "@@ -677,6 +677,9 @@ class CBlockIndex\n     // pointer to the index of the predecessor of this block\n     CBlockIndex* pprev;\n \n+    // pointer to the index of some further predecessor of this block\n+    CBlockIndex* pskip;\n+\n     // height of the entry in the chain. The genesis block has height 0\n     int nHeight;\n \n@@ -716,6 +719,7 @@ class CBlockIndex\n     {\n         phashBlock = NULL;\n         pprev = NULL;\n+        pskip = NULL;\n         nHeight = 0;\n         nFile = 0;\n         nDataPos = 0;\n@@ -737,6 +741,7 @@ class CBlockIndex\n     {\n         phashBlock = NULL;\n         pprev = NULL;\n+        pskip = NULL;\n         nHeight = 0;\n         nFile = 0;\n         nDataPos = 0;\n@@ -869,9 +874,14 @@ class CBlockIndex\n         }\n         return false;\n     }\n-};\n \n+    // Build the skiplist pointer for this entry.\n+    void BuildSkip();\n \n+    // Efficiently find an ancestor of this block.\n+    CBlockIndex* GetAncestor(int height);\n+    const CBlockIndex* GetAncestor(int height) const;\n+};\n \n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex"
      }
    ]
  },
  {
    "sha": "236982c2b6de619f0744c9c17ea7208b64a4afb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzY5ODJjMmI2ZGU2MTlmMDc0NGM5YzE3ZWE3MjA4YjY0YTRhZmIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-29T13:26:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-29T19:51:55Z"
      },
      "message": "Add skiplist unit tests",
      "tree": {
        "sha": "a8b8c2de488fbe6b4dd23dd2f95e6d2ec3c5c708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8b8c2de488fbe6b4dd23dd2f95e6d2ec3c5c708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236982c2b6de619f0744c9c17ea7208b64a4afb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236982c2b6de619f0744c9c17ea7208b64a4afb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/236982c2b6de619f0744c9c17ea7208b64a4afb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236982c2b6de619f0744c9c17ea7208b64a4afb3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a0918330f31dcb1d5e86b56af63c3f521d3cf2"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8685452c7b7e245274488d3ea028f8c17ad1f583",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236982c2b6de619f0744c9c17ea7208b64a4afb3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236982c2b6de619f0744c9c17ea7208b64a4afb3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=236982c2b6de619f0744c9c17ea7208b64a4afb3",
        "patch": "@@ -47,6 +47,7 @@ BITCOIN_TESTS =\\\n   test/script_tests.cpp \\\n   test/serialize_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n+  test/skiplist_tests.cpp \\\n   test/test_bitcoin.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "ea301685c91794ffb2cb09cd009602c3dfec2c53",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236982c2b6de619f0744c9c17ea7208b64a4afb3/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236982c2b6de619f0744c9c17ea7208b64a4afb3/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=236982c2b6de619f0744c9c17ea7208b64a4afb3",
        "patch": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <vector>\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+\n+#define SKIPLIST_LENGTH 300000\n+\n+BOOST_AUTO_TEST_SUITE(skiplist_tests)\n+\n+BOOST_AUTO_TEST_CASE(skiplist_test)\n+{\n+    std::vector<CBlockIndex> vIndex(SKIPLIST_LENGTH);\n+\n+    for (int i=0; i<SKIPLIST_LENGTH; i++) {\n+        vIndex[i].nHeight = i;\n+        vIndex[i].pprev = (i == 0) ? NULL : &vIndex[i - 1];\n+        vIndex[i].BuildSkip();\n+    }\n+\n+    for (int i=0; i<SKIPLIST_LENGTH; i++) {\n+        if (i > 0) {\n+            BOOST_CHECK(vIndex[i].pskip == &vIndex[vIndex[i].pskip->nHeight]);\n+            BOOST_CHECK(vIndex[i].pskip->nHeight < i);\n+        } else {\n+            BOOST_CHECK(vIndex[i].pskip == NULL);\n+        }\n+    }\n+\n+    for (int i=0; i < 1000; i++) {\n+        int from = insecure_rand() % (SKIPLIST_LENGTH - 1);\n+        int to = insecure_rand() % (from + 1);\n+\n+        BOOST_CHECK(vIndex[SKIPLIST_LENGTH - 1].GetAncestor(from) == &vIndex[from]);\n+        BOOST_CHECK(vIndex[from].GetAncestor(to) == &vIndex[to]);\n+        BOOST_CHECK(vIndex[from].GetAncestor(0) == &vIndex[0]);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  }
]