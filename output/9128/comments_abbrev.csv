theuni,2016-11-11T07:04:18Z,"Grr, will fix up the Windows build problem in the morning.\n",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-259894936,259894936,
TheBlueMatt,2016-11-12T02:46:11Z,"Concept ACK, though I'm not convinced there arent too many copies when making the message and passing it into CConnman, but will audit when you fix up build, etc.\n",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-260096967,260096967,
theuni,2016-11-12T04:11:50Z,"@TheBlueMatt there's only 1 copy (other than the serialization itself), and it comes from combining the header and payload. See the note here: https://github.com/bitcoin/bitcoin/pull/9128/files#diff-9a82240fe7dfe86564178691cc57f2f1R2590\n\nEither way, it for sure cuts down on copies compared to before.\n",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-260100422,260100422,
jonasschnelli,2016-11-15T07:54:01Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-260572024,260572024,
laanwj,2016-11-15T09:49:19Z,"winsok needs an extra cast:\n\n```\n../../src/net.cpp: In function ‘size_t SocketSendData(CNode*)’:\n../../src/net.cpp:777:131: error: invalid conversion from ‘const value_type* {aka const unsigned char*}’ to ‘const char*’ [-fpermissive]\n         int nBytes = send(pnode->hSocket, &data[pnode->nSendOffset], data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);    \n```\n",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-260595573,260595573,
theuni,2016-11-16T05:39:25Z,"Fixed several things:\n- Fixed @jonasschnelli's whitespace nit\n- Fixed win32 build, broken due to missing cast\n- Addressed @TheBlueMatt's complaints:\n  - Back to using `pnode->nVersion == 0` to detect lack of version message\n  - Added a change to hold off on setting fDisconnect for feelers until later, to avoid attempting to send messages to a disconnected node. The behavior is kept the same h",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-260858970,260858970,
laanwj,2016-11-17T15:09:56Z,I'm testing this + #9125\n,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-261271735,261271735,
sipa,2016-11-17T21:25:24Z,Needs rebase after #9075.\n,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-261374227,261374227,
theuni,2016-11-18T08:09:26Z,Rebased and updated for comments from @sipa and @TheBlueMatt.\n- Combined the vector serializers into CVectorWriter as requested.\n- skip() -> seek()\n- Added tests for CVectorWriter.\n- PushMessage requires an rvalue\n,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-261472435,261472435,
sipa,2016-11-18T08:13:34Z,"Hmm, I would consider CNode and CConnman to be the same layer (after all\nits processing related stated is moved out, and the rest is made private to\nthe net module).\n",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-261473136,261473136,
TheBlueMatt,2016-11-18T08:16:49Z,"Heh, well if you consider CNode to be a part of CConnman, then the type-of-message-to-send logic should be in net_processing...either way CConnman shouldnt know anything about the serialization of messages on the wire.\n",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-261473622,261473622,
MarcoFalke,2016-11-21T23:08:15Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262096693,262096693,
laanwj,2016-11-23T07:02:16Z,"Code review ACK 02d463d\nHave been testing an earlier revision on a node for 6 days without issues.",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262445640,262445640,
theuni,2016-11-23T22:08:57Z,"updated after a discussion with @TheBlueMatt and @sipa today, I think we're all finally aligned.\n\n@laanwj Sadly removing the ""skb"" was part of the compromise as it was a slight layer violation. We instead use 2 send()s (later scatter/gather) to avoid the copy.",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262642102,262642102,
sipa,2016-11-24T00:18:51Z,"Needs rebase, sorry!",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262661247,262661247,
theuni,2016-11-24T01:09:04Z,Rebased after ca8549d2bd32f17f8b69d1edbe3f2976fba504b4.,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262666966,262666966,
sipa,2016-11-24T03:30:44Z,utACK 09a92c27d46a62d10aed95b742e891e204dcee4e,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262682552,262682552,
paveljanik,2016-11-24T11:33:33Z,ACK 09a92c2,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-262755652,262755652,
theuni,2016-11-25T17:40:26Z,"Updated and squashed for @TheBlueMatt's comments. The diff from before is very straightforward:\n```diff\ncory@cory-i7:~/dev/bitcoin/src(connman-send)$ git diff theuni/connman-send\ndiff --git a/src/main.cpp b/src/main.cpp\nindex 4520afb..5595381 100644\n--- a/src/main.cpp\n+++ b/src/main.cpp\n@@ -6983,7 +6983,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         // Message: feef",https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-263003342,263003342,
TheBlueMatt,2016-11-25T18:14:51Z,utACK c7be56dceff625991cb2884f2ce053996ac613cd,https://github.com/bitcoin/bitcoin/pull/9128#issuecomment-263007054,263007054,
rebroad,2016-11-11T06:50:46Z,thank you!!\n,https://github.com/bitcoin/bitcoin/pull/9128#discussion_r87544540,87544540,src/main.cpp
dcousens,2016-11-11T06:52:30Z,> // Don't send anything until we get its version message\n\nComment is out-of-date?\n,https://github.com/bitcoin/bitcoin/pull/9128#discussion_r87544654,87544654,src/main.cpp
theuni,2016-11-11T07:03:53Z,"@dcousens the version message sets fSuccessfullyConnected, but I guess that's not as clear after this change.\n\nHow about ""don't send anything until we're successfully connected and ok with the peer's version"" ?\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r87545473,87545473,src/main.cpp
dcousens,2016-11-11T07:27:19Z,"I think if we are still referencing version here to explain why,  then `fSuccessfullyConnected` isn't appropriate.\nOtherwise,  just say ""don't send anything until we're successfully connected"".\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r87547251,87547251,src/main.cpp
jonasschnelli,2016-11-15T07:52:01Z,nit: indent\n,https://github.com/bitcoin/bitcoin/pull/9128#discussion_r87962952,87962952,src/main.cpp
sipa,2016-11-17T22:01:34Z,"CSizeComputer uses 'seek' for this function (inspired by the dd command, where skip is something you do on input, and seek is something you do on output).\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88556871,88556871,src/streams.h
theuni,2016-11-17T22:06:08Z,Makes sense. Will change.\n,https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88557735,88557735,src/streams.h
sipa,2016-11-17T22:11:18Z,"I'm not convinced there is a need to separate CVectorOverWriter and and CVectorInserter. Couldn't you have a single one, which a constructor that initialized the write pointer at the beginning, and one that initializes it at the end?\n\nWrites would involve first checking whether we'd not go out of bounds, and resizing if necessary.\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88558738,88558738,src/streams.h
theuni,2016-11-17T22:23:47Z,"Yes, I think that should work fine. Will change.\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88560893,88560893,src/streams.h
TheBlueMatt,2016-11-18T06:27:26Z,Shouldnt this happen inside CNetMsgMaker::Make? That way we can just have a BIP151MsgMaker?\n,https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88605429,88605429,src/net.cpp
TheBlueMatt,2016-11-18T06:30:08Z,"Shouldn't this be CSerializedNetMsg&&? It seems super strange that we're secretly destroying the object passed in, but only because the CSerializedNetMsg class doesnt have a copy-constructor.\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88605598,88605598,src/net.cpp
TheBlueMatt,2016-11-18T06:34:35Z,"Over-use of std::move, much? Can we stick with const std::string& in the function declaration and then use operator=() to make the copy instead of creating a new object just to std::move the data over?\n(Also, could definitely be missing some part of rvalue stuff, here)\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88605935,88605935,src/netmessagemaker.h
theuni,2016-11-18T07:25:43Z,Sure.\n,https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88609971,88609971,src/net.cpp
sipa,2016-11-18T07:30:14Z,"Nothing secret is being done. This would fail, for example:\n\n``` c++\nCSerializedNetMsg x = ...;\npconman->PushMessage(pnode, x);\n```\n\nas the binding of the actual parameter x would need a copy constructor to assign to the formal parameter msg.\n\nPassing a && would be preferable, though. The move construction here is slower, and only adds the possibility of passing in something that is impli",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88610354,88610354,src/net.cpp
theuni,2016-11-18T07:42:52Z,"This is standard c++11 pass-by-value-by-default. If you pass in a const-reference, a copy is guaranteed since we're storing the result. If you pass by value, it can be moved and the copy can be skipped.\n\nNot sure why you'd prefer a copy over 2 cheap moves.\n\nArguably NetMsgType should become a\n`std::array<char, CMessageHeader::COMMAND_SIZE>`\nso we can do away with the char arrays/strings, but",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88611323,88611323,src/netmessagemaker.h
theuni,2016-11-18T07:50:21Z,"It was left out of CNetMsgMaker because I assumed that we'd want CNode making the decision about how to wrap the data for sending. If it's to be encrypted, we'll need some per-node state vars.\n\nSo I guess it depends whether encryption status and state are to end up somewhere in main like CNodeState, or in CNode. Since (for once) this seems like something CConnman should know about but nobody els",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88612000,88612000,src/net.cpp
TheBlueMatt,2016-11-18T07:51:08Z,"Yup, didnt realize it would avoid a copy there (though I'd be OK copying the sCommand field...), anyway, comment withdrawn.\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88612064,88612064,src/netmessagemaker.h
theuni,2016-11-18T07:58:34Z,"I should mention: I've gone back and forth a few times on this (probably in this PR even). If anyone has a strong preference for a different approach that makes sense, I'm fine with changing it.\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88612774,88612774,src/net.cpp
theuni,2016-11-18T08:03:47Z,"It was done this way originally so that a message could be serialized once and sent to multiple peers. If an rvalue is required, we can't do that.\n\nI don't think there's a use-case for that at the moment, though, so changing to && is fine by me.\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88613291,88613291,src/net.cpp
TheBlueMatt,2016-11-18T08:09:33Z,"This isnt in CNode, though? If it were in CNode I'd be OK with that, but putting it in CConnman seems like /the/ layer violation this PR intends to fix?\n",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88613811,88613811,src/net.cpp
theuni,2016-11-18T08:18:58Z,"The result of this PR is that CConnman now receives only dumb bytes with no knowledge of what they are. All internal structures could change without affecting the net side.\n\nDealing with wrapping the raw bytes up for transmission is something different, and arguably not something that the bitcoin side should have to know/care about. If you have a different model in your mind, please suggest it.\",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r88614744,88614744,src/net.cpp
TheBlueMatt,2016-11-24T21:03:43Z,"This comment is very confusing...if nPos is 1 and vchData.size() is 1, the documentation implies that vchData will be resized so that nPos isnt past-the-end, but it will not be. Instead, vchData is resized so that, at maximum, nPos is 1-past-the-end.",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r89545990,89545990,src/streams.h
TheBlueMatt,2016-11-24T21:29:21Z,"You changed the print - should print nMessageSize, not nTotalSize.",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r89547250,89547250,src/net.cpp
theuni,2016-11-25T16:13:53Z,"Good call. I assumed it'd never say ""sending 0 bytes"", but you're right, I'll avoid a behavioral change here.",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r89637922,89637922,src/net.cpp
theuni,2016-11-25T16:57:54Z,"Hmm, yes. Will clarify.",https://github.com/bitcoin/bitcoin/pull/9128#discussion_r89642554,89642554,src/streams.h
