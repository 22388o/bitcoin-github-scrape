[
  {
    "sha": "b2b361926215eadd6bf43ed1d7110b925fc7cae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmIzNjE5MjYyMTVlYWRkNmJmNDNlZDFkNzExMGI5MjVmYzdjYWU1",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-03-11T23:48:53Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-04-12T02:03:58Z"
      },
      "message": "Implement CTransaction::IsEquivalentTo(...)\n\nDefine CTransaction::IsEquivalentTo(const CTransaction& tx)\n\nTrue if only scriptSigs are different.  In other words, true if\nthe two transactions are malleability clones.  In other words,\ntrue if the two transactions have the same effect on the\noutside universe.\n\nIn the wallet, only SyncMetaData for equivalent transactions.",
      "tree": {
        "sha": "82db9091d3556b309368bbe63806602ef26cfe87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82db9091d3556b309368bbe63806602ef26cfe87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2b361926215eadd6bf43ed1d7110b925fc7cae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2b361926215eadd6bf43ed1d7110b925fc7cae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2b361926215eadd6bf43ed1d7110b925fc7cae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2b361926215eadd6bf43ed1d7110b925fc7cae5/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8a13501196fc79a3f728683b74f9d586dda46c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8a13501196fc79a3f728683b74f9d586dda46c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8a13501196fc79a3f728683b74f9d586dda46c1"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d864a9b6d3b01e4e244819c0fb09ab7493889137",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2b361926215eadd6bf43ed1d7110b925fc7cae5/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2b361926215eadd6bf43ed1d7110b925fc7cae5/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=b2b361926215eadd6bf43ed1d7110b925fc7cae5",
        "patch": "@@ -87,6 +87,15 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n+bool CTransaction::IsEquivalentTo(const CTransaction& tx) const\n+{\n+\tCMutableTransaction tx1 = *this;\n+\tCMutableTransaction tx2 = tx;\n+\tfor (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n+\tfor (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n+\treturn CTransaction(tx1) == CTransaction(tx2);\n+}\n+\n CAmount CTransaction::GetValueOut() const\n {\n     CAmount nValueOut = 0;"
      },
      {
        "sha": "0c9ebb7b881a7c15e2a0bc5fd8b0723285cc9304",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2b361926215eadd6bf43ed1d7110b925fc7cae5/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2b361926215eadd6bf43ed1d7110b925fc7cae5/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=b2b361926215eadd6bf43ed1d7110b925fc7cae5",
        "patch": "@@ -222,6 +222,9 @@ class CTransaction\n         return hash;\n     }\n \n+    // True if only scriptSigs are different\n+    bool IsEquivalentTo(const CTransaction& tx) const;\n+\n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because"
      },
      {
        "sha": "92bb972cf35ea50f7d77cd6a60df31f98c3aa09c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2b361926215eadd6bf43ed1d7110b925fc7cae5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2b361926215eadd6bf43ed1d7110b925fc7cae5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b2b361926215eadd6bf43ed1d7110b925fc7cae5",
        "patch": "@@ -417,6 +417,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n+        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n         copyTo->vOrderForm = copyFrom->vOrderForm;\n         // fTimeReceivedIsTxTime not copied on purpose"
      }
    ]
  },
  {
    "sha": "defd2d55b789163be4a863d0887d5d309ff9cde3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWZkMmQ1NWI3ODkxNjNiZTRhODYzZDA4ODdkNWQzMDlmZjljZGUz",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-03-11T21:29:06Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-04-12T02:05:54Z"
      },
      "message": "Better txn_doublespend.py test\n\nRemove reliance on accounting \"move\" ledger entries.  Instead,\ncreate funding transactions (and deal with fee complexities).\n\nDo not rely on broken SyncMetaData.  Instead expect double-spend\namount to be debited from the default \"\" account.",
      "tree": {
        "sha": "4594a274229e560f8eed69ea63b03554bcf7f361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4594a274229e560f8eed69ea63b03554bcf7f361"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/defd2d55b789163be4a863d0887d5d309ff9cde3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/defd2d55b789163be4a863d0887d5d309ff9cde3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/defd2d55b789163be4a863d0887d5d309ff9cde3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/defd2d55b789163be4a863d0887d5d309ff9cde3/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2b361926215eadd6bf43ed1d7110b925fc7cae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2b361926215eadd6bf43ed1d7110b925fc7cae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2b361926215eadd6bf43ed1d7110b925fc7cae5"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 52,
      "deletions": 27
    },
    "files": [
      {
        "sha": "9551080039d99fe50ca9657044b45ecbd2404b93",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 52,
        "deletions": 27,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/defd2d55b789163be4a863d0887d5d309ff9cde3/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/defd2d55b789163be4a863d0887d5d309ff9cde3/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=defd2d55b789163be4a863d0887d5d309ff9cde3",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test proper accounting with malleable transactions\n+# Test proper accounting with a double-spend conflict\n #\n \n from test_framework import BitcoinTestFramework\n@@ -32,28 +32,40 @@ def run_test(self):\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n         \n         # Assign coins to foo and bar accounts:\n-        self.nodes[0].move(\"\", \"foo\", 1220)\n-        self.nodes[0].move(\"\", \"bar\", 30)\n-        assert_equal(self.nodes[0].getbalance(\"\"), 0)\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n+        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n+        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n+\n+        assert_equal(self.nodes[0].getbalance(\"\"),\n+                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n \n         # Coins are sent to node1_address\n         node1_address = self.nodes[1].getnewaddress(\"from0\")\n \n-        # First: use raw transaction API to send 1210 BTC to node1_address,\n+        # First: use raw transaction API to send 1240 BTC to node1_address,\n         # but don't broadcast:\n-        (total_in, inputs) = gather_inputs(self.nodes[0], 1210)\n-        change_address = self.nodes[0].getnewaddress(\"foo\")\n+        doublespend_fee = Decimal('-.02')\n+        rawtx_input_0 = {}\n+        rawtx_input_0[\"txid\"] = fund_foo_txid\n+        rawtx_input_0[\"vout\"] = find_output(self.nodes[0], fund_foo_txid, 1219)\n+        rawtx_input_1 = {}\n+        rawtx_input_1[\"txid\"] = fund_bar_txid\n+        rawtx_input_1[\"vout\"] = find_output(self.nodes[0], fund_bar_txid, 29)\n+        inputs = [rawtx_input_0, rawtx_input_1]\n+        change_address = self.nodes[0].getnewaddress()\n         outputs = {}\n-        outputs[change_address] = 40\n-        outputs[node1_address] = 1210\n+        outputs[node1_address] = 1240\n+        outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         doublespend = self.nodes[0].signrawtransaction(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n-        # Create two transaction from node[0] to node[1]; the\n-        # second must spend change from the first because the first\n-        # spends all mature inputs:\n-        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 1210, 0)\n+        # Create two spends using 1 50 BTC coin each\n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n         txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n         \n         # Have node0 mine a block:\n@@ -65,16 +77,16 @@ def run_test(self):\n         tx2 = self.nodes[0].gettransaction(txid2)\n \n         # Node0's balance should be starting balance, plus 50BTC for another\n-        # matured block, minus 1210, minus 20, and minus transaction fees:\n-        expected = starting_balance\n+        # matured block, minus 40, minus 20, and minus transaction fees:\n+        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n         if self.options.mine_block: expected += 50\n         expected += tx1[\"amount\"] + tx1[\"fee\"]\n         expected += tx2[\"amount\"] + tx2[\"fee\"]\n         assert_equal(self.nodes[0].getbalance(), expected)\n \n         # foo and bar accounts should be debited:\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220+tx1[\"amount\"]+tx1[\"fee\"])\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 30+tx2[\"amount\"]+tx2[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219+tx1[\"amount\"]+tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29+tx2[\"amount\"]+tx2[\"fee\"])\n \n         if self.options.mine_block:\n             assert_equal(tx1[\"confirmations\"], 1)\n@@ -85,8 +97,10 @@ def run_test(self):\n             assert_equal(tx1[\"confirmations\"], 0)\n             assert_equal(tx2[\"confirmations\"], 0)\n         \n-        # Now give doublespend to miner:\n-        mutated_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        # Now give doublespend and its parents to miner:\n+        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])\n+        self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n         self.nodes[2].generate(1)\n \n@@ -104,17 +118,28 @@ def run_test(self):\n         assert_equal(tx2[\"confirmations\"], -1)\n \n         # Node0's total balance should be starting balance, plus 100BTC for \n-        # two more matured blocks, minus 1210 for the double-spend:\n-        expected = starting_balance + 100 - 1210\n+        # two more matured blocks, minus 1240 for the double-spend, plus fees (which are\n+        # negative):\n+        expected = starting_balance + 100 - 1240 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"] + doublespend_fee\n         assert_equal(self.nodes[0].getbalance(), expected)\n         assert_equal(self.nodes[0].getbalance(\"*\"), expected)\n \n-        # foo account should be debited, but bar account should not:\n-        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220-1210)\n-        assert_equal(self.nodes[0].getbalance(\"bar\"), 30)\n-\n-        # Node1's \"from\" account balance should be just the mutated send:\n-        assert_equal(self.nodes[1].getbalance(\"from0\"), 1210)\n+        # Final \"\" balance is starting_balance - amount moved to accounts - doublespend + subsidies +\n+        # fees (which are negative)\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219)\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 29)\n+        assert_equal(self.nodes[0].getbalance(\"\"), starting_balance\n+                                                              -1219\n+                                                              -  29\n+                                                              -1240\n+                                                              + 100\n+                                                              + fund_foo_tx[\"fee\"]\n+                                                              + fund_bar_tx[\"fee\"]\n+                                                              + doublespend_fee)\n+\n+        # Node1's \"from0\" account balance should be just the doublespend:\n+        assert_equal(self.nodes[1].getbalance(\"from0\"), 1240)\n \n if __name__ == '__main__':\n     TxnMallTest().main()\n+"
      }
    ]
  },
  {
    "sha": "5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDM0ZTE2ZDNhMWU2ZWYzN2Q1ZTZkMjU0MDYzYzM0MmIwZTVmZTM5",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-03-24T03:56:53Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-05-12T00:09:14Z"
      },
      "message": "Add txn_clone.py test\n\nDoes what the old txnmall.sh test did.\n\nCreates an equivalent malleated clone and tests that SyncMetaData\nsyncs the accounting effects from the original transaction to the\nconfirmed clone.",
      "tree": {
        "sha": "92c04d434ddd246c18211e572c5d32878076efd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92c04d434ddd246c18211e572c5d32878076efd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "defd2d55b789163be4a863d0887d5d309ff9cde3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/defd2d55b789163be4a863d0887d5d309ff9cde3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/defd2d55b789163be4a863d0887d5d309ff9cde3"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 169,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ffddfa306d582c848108bd8ac54ac08e53986dcb",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39",
        "patch": "@@ -21,6 +21,8 @@ testScripts=(\n     'mempool_resurrect_test.py'\n     'txn_doublespend.py'\n     'txn_doublespend.py --mineblock'\n+    'txn_clone.py'\n+    'txn_clone.py --mineblock'\n     'getchaintips.py'\n     'rest.py'\n     'mempool_spendcoinbase.py'"
      },
      {
        "sha": "19bc34e3f9bc77b4e324c0de7f2e8d3b8f487519",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "added",
        "additions": 167,
        "deletions": 0,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=5d34e16d3a1e6ef37d5e6d254063c342b0e5fe39",
        "patch": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test proper accounting with an equivalent malleability clone\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from decimal import Decimal\n+from util import *\n+import os\n+import shutil\n+\n+class TxnMallTest(BitcoinTestFramework):\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n+                          help=\"Test double-spend of 1-confirmed transaction\")\n+\n+    def setup_network(self):\n+        # Start with split network:\n+        return super(TxnMallTest, self).setup_network(True)\n+\n+    def run_test(self):\n+        # All nodes should start with 1,250 BTC:\n+        starting_balance = 1250\n+        for i in range(4):\n+            assert_equal(self.nodes[i].getbalance(), starting_balance)\n+            self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n+\n+        # Assign coins to foo and bar accounts:\n+        self.nodes[0].settxfee(.001)\n+\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n+        fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n+        fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n+\n+        assert_equal(self.nodes[0].getbalance(\"\"),\n+                     starting_balance - 1219 - 29 + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"])\n+\n+        # Coins are sent to node1_address\n+        node1_address = self.nodes[1].getnewaddress(\"from0\")\n+\n+        # Send tx1, and another transaction tx2 that won't be cloned \n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n+        txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n+\n+        # Construct a clone of tx1, to be malleated \n+        rawtx1 = self.nodes[0].getrawtransaction(txid1,1)\n+        clone_inputs = [{\"txid\":rawtx1[\"vin\"][0][\"txid\"],\"vout\":rawtx1[\"vin\"][0][\"vout\"]}]\n+        clone_outputs = {rawtx1[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][0][\"value\"],\n+                         rawtx1[\"vout\"][1][\"scriptPubKey\"][\"addresses\"][0]:rawtx1[\"vout\"][1][\"value\"]}\n+        clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs)\n+\n+        # 3 hex manipulations on the clone are required\n+\n+        # manipulation 1. sequence is at version+#inputs+input+sigstub\n+        posseq = 2*(4+1+36+1)\n+        seqbe = '%08x' % rawtx1[\"vin\"][0][\"sequence\"]\n+        clone_raw = clone_raw[:posseq] + seqbe[6:8] + seqbe[4:6] + seqbe[2:4] + seqbe[0:2] + clone_raw[posseq + 8:]\n+\n+        # manipulation 2. createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n+        # output 0 is at version+#inputs+input+sigstub+sequence+#outputs\n+        # 40 BTC serialized is 00286bee00000000\n+        pos0 = 2*(4+1+36+1+4+1)\n+        hex40 = \"00286bee00000000\"\n+        output_len = 16 + 2 + 2 * int(\"0x\" + clone_raw[pos0 + 16 : pos0 + 16 + 2], 0)\n+        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_raw[pos0 : pos0 + 16] != hex40 or\n+            rawtx1[\"vout\"][0][\"value\"] != 40 and clone_raw[pos0 : pos0 + 16] == hex40):\n+            output0 = clone_raw[pos0 : pos0 + output_len]\n+            output1 = clone_raw[pos0 + output_len : pos0 + 2 * output_len]\n+            clone_raw = clone_raw[:pos0] + output1 + output0 + clone_raw[pos0 + 2 * output_len:]\n+\n+        # manipulation 3. locktime is after outputs\n+        poslt = pos0 + 2 * output_len\n+        ltbe = '%08x' % rawtx1[\"locktime\"]\n+        clone_raw = clone_raw[:poslt] + ltbe[6:8] + ltbe[4:6] + ltbe[2:4] + ltbe[0:2] + clone_raw[poslt + 8:]\n+\n+        # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n+        # Don't send the clone anywhere yet\n+        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        assert_equal(tx1_clone[\"complete\"], True)\n+\n+        # Have node0 mine a block, if requested:\n+        if (self.options.mine_block):\n+            self.nodes[0].generate(1)\n+            sync_blocks(self.nodes[0:2])\n+\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+\n+        # Node0's balance should be starting balance, plus 50BTC for another\n+        # matured block, minus tx1 and tx2 amounts, and minus transaction fees:\n+        expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n+        if self.options.mine_block: expected += 50\n+        expected += tx1[\"amount\"] + tx1[\"fee\"]\n+        expected += tx2[\"amount\"] + tx2[\"fee\"]\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+\n+        # foo and bar accounts should be debited:\n+        assert_equal(self.nodes[0].getbalance(\"foo\", 0), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n+\n+        if self.options.mine_block:\n+            assert_equal(tx1[\"confirmations\"], 1)\n+            assert_equal(tx2[\"confirmations\"], 1)\n+            # Node1's \"from0\" balance should be both transaction amounts:\n+            assert_equal(self.nodes[1].getbalance(\"from0\"), -(tx1[\"amount\"] + tx2[\"amount\"]))\n+        else:\n+            assert_equal(tx1[\"confirmations\"], 0)\n+            assert_equal(tx2[\"confirmations\"], 0)\n+\n+        # Send clone and its parent to miner\n+        self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n+        txid1_clone = self.nodes[2].sendrawtransaction(tx1_clone[\"hex\"])\n+        # ... mine a block...\n+        self.nodes[2].generate(1)\n+\n+        # Reconnect the split network, and sync chain:\n+        connect_nodes(self.nodes[1], 2)\n+        self.nodes[2].generate(1)  # Mine another block to make sure we sync\n+        sync_blocks(self.nodes)\n+\n+        # Re-fetch transaction info:\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx1_clone = self.nodes[0].gettransaction(txid1_clone)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        \n+        # Verify expected confirmations\n+        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx1_clone[\"confirmations\"], 2)\n+        assert_equal(tx2[\"confirmations\"], 0)\n+\n+        # Check node0's total balance; should be same as before the clone, + 100 BTC for 2 matured,\n+        # less possible orphaned matured subsidy\n+        expected += 100\n+        if (self.options.mine_block): \n+            expected -= 50\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 0), expected)\n+\n+        # Check node0's individual account balances.\n+        # \"foo\" should have been debited by the equivalent clone of tx1\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1219 + tx1[\"amount\"] + tx1[\"fee\"])\n+        # \"bar\" should have been debited by (possibly unconfirmed) tx2\n+        assert_equal(self.nodes[0].getbalance(\"bar\", 0), 29 + tx2[\"amount\"] + tx2[\"fee\"])\n+        # \"\" should have starting balance, less funding txes, plus subsidies\n+        assert_equal(self.nodes[0].getbalance(\"\", 0), starting_balance\n+                                                                - 1219\n+                                                                + fund_foo_tx[\"fee\"]\n+                                                                -   29\n+                                                                + fund_bar_tx[\"fee\"]\n+                                                                +  100)\n+\n+        # Node1's \"from0\" account balance\n+        assert_equal(self.nodes[1].getbalance(\"from0\", 0), -(tx1[\"amount\"] + tx2[\"amount\"]))\n+\n+if __name__ == '__main__':\n+    TxnMallTest().main()\n+"
      }
    ]
  }
]