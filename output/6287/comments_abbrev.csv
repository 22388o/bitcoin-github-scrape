Diapolo,2015-06-16T10:18:29Z,This looks very nice and it's great to be able to use such static analyzers with our codebase. Looking forward to see what issues can be uncovered with this.\n,https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-112374837,112374837,
sipa,2015-06-16T13:46:02Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-112435238,112435238,
fanquake,2015-06-16T15:12:03Z,Tested building with -Wthread-safety. Warning is generated as expected when commenting out the LOCK() in FinalizeNode()\n\n```\nmain.cpp:293:5: warning: calling function 'EraseOrphansFor' requires holding mutex 'cs_main' exclusively [-Wthread-safety-analysis]\n    EraseOrphansFor(nodeid);\n    ^\n1 warning generated.\n```\n,https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-112465472,112465472,
fanquake,2015-06-16T19:00:36Z,The other warnings fixed by 2b890dd424b32320be6fc0333e67e2d7c9616065\n\n```\n  CXX      libbitcoin_server_a-net.o\nnet.cpp:2059:1: warning: mutex 'cs_vSend' is not held on every path through here\n      [-Wthread-safety-analysis]\n}\n^\nnet.cpp:2020:26: note: mutex acquired here\nvoid CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n                         ^\n./threadsafety.h:28:45: note: expanded ,https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-112529241,112529241,
laanwj,2015-06-17T07:00:32Z,"Concept ACK, still need to review in detail.\nVery nice to see the static analysis annotations finally used.\n",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-112682441,112682441,
theuni,2015-06-17T15:47:19Z,"@laanwj There are a few details that aren't quite right, but I didn't want to change too much in this PR until there was some interest. I can take a stab at fixing them up before/after pull, whichever you'd prefer:\n- during analysis, TRY_LOCKs are interpreted as always gaining the lock. I don't think that's much of an issue in practice, since from a static point-of-view there's not much differenc",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-112856793,112856793,
laanwj,2015-06-19T14:56:09Z,"> I think that's not really an issue either, since clang points out when we're locking a mutex that's already locked (see rpcwallet in 2b890dd)\n\nCould this be an issue if a lock is held multiple times along one code path, but only once along another code path? If you then remove the locking (according to clang's warning) in one place it may result in the lock not held anymore at all in one of th",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-113537880,113537880,
theuni,2015-06-23T20:14:54Z,"@laanwj I've looked deeper into this, here's a good sample of some snags we hit:\n\n``` c++\nstatic RecursiveMutex cs_main;\nstatic int myint = 3;\nstatic std::vector<int*> GUARDED_BY(cs_main) vec(1,&myint);\nint* func2()\n{\n  LOCK(cs_main);\n  return vec[0];\n}\n\nvoid func1() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n{\n  func2();\n  vec.clear();\n}\n\nint main()\n{\n    int* unguarded = func2();\n   ",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-114629688,114629688,
gavinandresen,2015-06-23T20:20:45Z,I vote for noisy annotations-- locking bugs are NASTY.\n,https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-114631003,114631003,
theuni,2015-06-23T20:41:45Z,"For anyone wanting to try out the semantics, here's an easy test that simulates our environment and conventions: https://gist.github.com/theuni/f5d6d3db9434ca546422.\nCompile with: `clang++ -std=c++11 -fsyntax-only -Wthread-safety locks.cpp`\n",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-114635652,114635652,
laanwj,2015-07-20T17:26:23Z,"Is this ready for merging? If not, can we get a useful subset in?\n",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-122960774,122960774,
theuni,2015-07-22T22:33:31Z,"Yes, this is useful as a starting point.\n",https://github.com/bitcoin/bitcoin/pull/6287#issuecomment-123891673,123891673,
