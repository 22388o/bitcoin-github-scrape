hebasto,2021-10-30 17:30:44,cc @ajtowns @theuni @martinus @jonatack,https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-955533025,955533025,
jamesob,2021-11-01 14:11:16,@hebasto do you expect there are significant performance implications for this change? Should I benchmark?,https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-956267838,956267838,
hebasto,2021-11-01 14:25:24,"@jamesob\n> @hebasto do you expect there are significant performance implications for this change?\n\nNot sure about ""significant"" :)\n\n> Should I benchmark?\n\nI'll appreciate it! Also I have a plan to improve `CCheckQueue` performance further (not here, of course).\n\n",https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-956280061,956280061,
sipa,2021-11-01 15:33:35,"Concept ACK, but left some nits.",https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-956337186,956337186,
JeremyRubin,2021-11-01 18:59:18,"would love to see some thorough testing on this. I could be misremembering, but check cross platform that there's no reason to continue to hold the lock. IIRC there was some sort of edge condition (maybe in window?) around a notify being able to be missed or something, but the details are like 5-6 years out of my cache :)",https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-956502379,956502379,
hebasto,2021-11-03 09:36:11,"@sipa @martinus @vasild\n\nThank you for your reviews and your suggestions!\n\nUpdated 5bcfd70a3b0e008d7a80e37a29fe90887a0f8c66 -> 459e208276a4d1457d37bf41c977e62caf05456d ([pr23397.01](https://github.com/hebasto/bitcoin/commits/pr23397.01) -> [pr23397.02](https://github.com/hebasto/bitcoin/commits/pr23397.02), [diff](https://github.com/hebasto/bitcoin/compare/pr23397.01..pr23397.02)):\n\n- ",https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-958782982,958782982,
jamesob,2021-11-03 12:44:25,"ACKish - I haven't reviewed the code, but it works for the benchmarks and so I guess in some sense I've tested it. As expected, no big diff in performance.\n\n\n\n### #23397 vs. $mergebase (absolute)\n|                  bench name                   |  x  |           #23397           |         $mergebase         |\n|-----------------------------------------------|----:|-----------------------",https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-958997095,958997095,
martinus,2021-11-03 17:23:34,"ACK 459e208, codereview and tested. I first thought this introduced a segfault in `psbt_wallet_tests/psbt_updater_test` because that test failed for me, but thats a different issue fixed in #23403.",https://github.com/bitcoin/bitcoin/pull/23397#issuecomment-959754739,959754739,
sipa,2021-11-01 15:31:42,"`unsigned int` is typically smaller than the size of a vector. Use `size_t` or `std::vector<T>::size_type` perhaps?\n\nI very much doubt we'll ever have more than 4 billion checks queued up, but it also seems simpler to make the type can just account for everything.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740305376,740305376,src/checkqueue.h
sipa,2021-11-01 15:32:51,"If you're touching this code, make it follow style? (no indentation without brances).",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740306424,740306424,src/checkqueue.h
hebasto,2021-11-01 15:51:09,Style is fixed in the second commit. Or do you want me to follow style here?,https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740321362,740321362,src/checkqueue.h
hebasto,2021-11-01 15:54:56,"I've chosen `unsinged int` due to https://github.com/bitcoin/bitcoin/blob/5adc5c02800f00d1e6e8812a2b0559b1800e82e9/src/checkqueue.h#L60\n\nMaybe use `size_t` for `nTodo` as well?",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740325089,740325089,src/checkqueue.h
sipa,2021-11-01 16:49:01,"Ah, I see, that makes sense. I think changing to size_t everywhere can be done in a separate PR, if desires.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740366532,740366532,src/checkqueue.h
sipa,2021-11-01 17:45:56,"Oh, that's fine.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740407348,740407348,src/checkqueue.h
martinus,2021-11-01 18:24:45,"nit: I think you could also write `const auto num_of_new_checks = vChecks.size();` above, saves one line of code in the lock and doesn't keep an uninitialized variable around for a few lines.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740433358,740433358,src/checkqueue.h
martinus,2021-11-01 18:25:42,"nit: maybe not part of this PR, but using `queue.emplace_back()` instead `queue.push_back(T())` would save one move/copy constructor and one destructor because the object could be directly constructed in the queue",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740433985,740433985,src/checkqueue.h
JeremyRubin,2021-11-01 18:56:23,the max number of checks is IIRC something slightly above 100k,https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740454221,740454221,src/checkqueue.h
sipa,2021-11-01 19:09:07,Actually none of that is necessary. `vChecks` doesn't change size during the adding loop. The old `vChecks.size()` based checks can be kept.,https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740461509,740461509,src/checkqueue.h
hebasto,2021-11-01 20:48:06,">  `vChecks` doesn't change size during the adding loop.\n\nCorrect. But `vChecks` is passed in `CCheckQueue::Add` by a non-const reference, and that makes possible its modification by a concurrent thread between leaving a critical section and checking `num_of_new_checks == 1`.\n\nAlthough, the only caller is located in `CChainState::ConnectBlock` which is guarded by the `cs_main` mutex. There",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r740519896,740519896,src/checkqueue.h
vasild,2021-11-02 15:36:41,What about `queue.push_back(std::move(check))`?,https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741207782,741207782,src/checkqueue.h
vasild,2021-11-02 15:50:10,"I would never think that a reference argument could be changed by another thread while the function is executing. I hope we don't do that anywhere in the code. Because how would the function avoid races? Which mutex protects the argument? That would require something like (it does not compile, of course):\n\n```cpp\nvoid func(T& arg GUARDED_BY(some_mutex), ...)\n{\n    ...\n    LOCK(some_mut",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741224832,741224832,src/checkqueue.h
vasild,2021-11-02 15:56:17,"The code below assumes `vChecks` may be modified by another thread while this is executing (it cannot actually). I guess either remove that assumption or move this access to `vChecks` under `m_mutex` (if that mutex it supposed to protect `vChecks`!?).\n\nIt is a race to call `std::vector::empty()` while modifying it concurrently.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741232993,741232993,src/checkqueue.h
sipa,2021-11-02 16:06:47,"@hebasto That's not how `const` works in C++. The lack thereof means *you* (the called function in this case) are allowed to modify the argument; it says nothing at all about whether another thread might be modifying the same variable. Even if the argument was `const`, nothing prevents another thread from holding a mutable reference to the same object.\n\nThat said, passing an argument (const or",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741247135,741247135,src/checkqueue.h
martinus,2021-11-02 16:21:05,"I tried that once but then tests fail, I think for the types used here `std::swap` is implemented but a move constructor isn't. I didn't have a closer look why that fails.\n\nI think the nicest c++ solution would be to replace the whole loop with\n\n```cpp\nqueue.insert(queue.end(), std::make_move_iterator(vChecks.begin()), std::make_move_iterator(vChecks.end()));\n```\n\nBut this too requ",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741260491,741260491,src/checkqueue.h
hebasto,2021-11-02 16:36:19,"@sipa Thanks for your detailed explanation.\n\nGoing to address all of the comments.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741274241,741274241,src/checkqueue.h
hebasto,2021-11-02 16:38:42,"You are right.\n\n> I guess either remove that assumption or move this access to `vChecks` under `m_mutex` (if that mutex it supposed to protect `vChecks`!?).\n\nThe former will go.",https://github.com/bitcoin/bitcoin/pull/23397#discussion_r741276311,741276311,src/checkqueue.h
