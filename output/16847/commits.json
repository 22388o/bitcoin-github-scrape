[
  {
    "sha": "82e53f37e1bfa6e34eac16b33329d70c3c0127da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmU1M2YzN2UxYmZhNmUzNGVhYzE2YjMzMzI5ZDcwYzNjMDEyN2Rh",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-10T17:09:12Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-11T14:24:44Z"
      },
      "message": "doc: add comments clarifying how local services are advertised\n\nRecent questions have come up regarding dynamic service registration\n(see https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676\nand the assumeutxo project, which needs to dynamically flip NODE_NETWORK).\n\nWhile investigating how dynamic service registration might work, I was\nconfused about how we convey local services to peers. This adds some\ndocumentation that hopefully clarifies this process.",
      "tree": {
        "sha": "f65e290eca64080b3e33370f37b26eebcff4c031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f65e290eca64080b3e33370f37b26eebcff4c031"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82e53f37e1bfa6e34eac16b33329d70c3c0127da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e53f37e1bfa6e34eac16b33329d70c3c0127da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82e53f37e1bfa6e34eac16b33329d70c3c0127da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e53f37e1bfa6e34eac16b33329d70c3c0127da/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1985c4efda56b48f6f9c04f39d69268ee8f0b40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1985c4efda56b48f6f9c04f39d69268ee8f0b40a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1985c4efda56b48f6f9c04f39d69268ee8f0b40a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 38,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f33147155a33982fa48e91e98d3d3bc54f3cd27f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e53f37e1bfa6e34eac16b33329d70c3c0127da/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e53f37e1bfa6e34eac16b33329d70c3c0127da/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=82e53f37e1bfa6e34eac16b33329d70c3c0127da",
        "patch": "@@ -282,6 +282,12 @@ class CConnman\n     bool DisconnectNode(const CNetAddr& addr);\n     bool DisconnectNode(NodeId id);\n \n+    //! Used to convey which local services we are offering peers during node\n+    //! connection.\n+    //!\n+    //! The data returned by this is used in CNode construction,\n+    //! which is used to advertise which services we are offering\n+    //! that peer during `net_processing.cpp:PushNodeVersion()`.\n     ServiceFlags GetLocalServices() const;\n \n     //!set the max outbound target in bytes\n@@ -413,7 +419,18 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n-    /** Services this instance offers */\n+    /**\n+     * Services this instance offers.\n+     *\n+     * This data is replicated in each CNode instance we create during peer\n+     * connection (in ConnectNode()) under a member also called\n+     * nLocalServices.\n+     *\n+     * This data is not marked const, but after being set it should not\n+     * change. See the note in CNode::nLocalServices documentation.\n+     *\n+     * \\sa CNode::nLocalServices\n+     */\n     ServiceFlags nLocalServices;\n \n     std::unique_ptr<CSemaphore> semOutbound;\n@@ -786,8 +803,24 @@ class CNode\n private:\n     const NodeId id;\n     const uint64_t nLocalHostNonce;\n-    // Services offered to this peer\n+\n+    //! Services offered to this peer.\n+    //!\n+    //! This is supplied by the parent CConnman during peer connection\n+    //! (CConnman::ConnectNode()) from its attribute of the same name.\n+    //!\n+    //! This is const because there is no protocol defined for renegotiating\n+    //! services initially offered to a peer. The set of local services we\n+    //! offer should not change after initialization.\n+    //!\n+    //! An interesting example of this is NODE_NETWORK and initial block\n+    //! download: a node which starts up from scratch doesn't have any blocks\n+    //! to serve, but still advertises NODE_NETWORK because it will eventually\n+    //! fulfill this role after IBD completes. P2P code is written in such a\n+    //! way that it can gracefully handle peers who don't make good on their\n+    //! service advertisements.\n     const ServiceFlags nLocalServices;\n+\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n     NetPermissionFlags m_permissionFlags{ PF_NONE };"
      },
      {
        "sha": "93a98974eb2400b38a79a2ae10773a931d153599",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e53f37e1bfa6e34eac16b33329d70c3c0127da/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e53f37e1bfa6e34eac16b33329d70c3c0127da/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=82e53f37e1bfa6e34eac16b33329d70c3c0127da",
        "patch": "@@ -415,6 +415,9 @@ static void UpdatePreferredDownload(CNode* node, CNodeState* state) EXCLUSIVE_LO\n \n static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n {\n+    // Note that pnode->GetLocalServices() is a reflection of the local\n+    // services we were offering when the CNode object was created for this\n+    // peer.\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n     int nNodeStartingHeight = pnode->GetMyStartingHeight();"
      }
    ]
  }
]