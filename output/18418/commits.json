[
  {
    "sha": "8f073076b102b77897e5a025ae555baae3d1f671",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjA3MzA3NmIxMDJiNzc4OTdlNWEwMjVhZTU1NWJhYWUzZDFmNjcx",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-24T14:04:36Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-18T00:09:18Z"
      },
      "message": "wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100",
      "tree": {
        "sha": "18cac8f87812c2f05d5119a09dc2cd7f44f8483e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18cac8f87812c2f05d5119a09dc2cd7f44f8483e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f073076b102b77897e5a025ae555baae3d1f671",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmCjBbAVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNngoP/2RoqxvXECBM0cHOGj0O2q4eXK00\nikB8PXaPEZEm7qku6Jj2RZf/zwOHKVjJurbYsj6L7bFsF5qikYU5/SmYJXBNqFWE\nf2YnLglIGRgzrEwY87kC9vsg+Cufn0+GDiDIA01iFeR+MUrITaje70bTnJygSqGQ\nPdcl3T77t2fo2YHAc6jBUk3Gm0vO2MW6xAP8B+jQshaz/dtONwkoYugNpZgIMxgH\nizENM1PEFm9sNtJJ8JpbOMY6PZlVixgG5Fg+pdot5ZliWYfeHvyZQqBG8Se5UstA\n8I9Xzvduu8rslohH3Lms2GduKa911+kTnWicHFLwDAsNZCttHYcWKf1qWlBZGf38\n5mmTbQqRH66YkYnY4Y2P0rd53zdcUMhkYD8XTn4YB58mFaMyloWTs0oZHqtXGe6I\nHw9PcEKYyzS5DvvMxDGJ9O1I6edVw23JWL++W3rQoAUKfnSOTNrZ9Gxp8WclvQE6\nLAxyQjUNWxmq4Yd/O2Sx1YWgvzfNXP4KaHMeUSq9/Wv/PyThD+5ZeibanoL1/1/x\nfHdDkEGiVhMxSo7JRNdtFPgzbFzG23+RkgB1R6OQyKtEDPbvWNLs1NPezU9D5Bm9\nvRZdyIxRVyDX6oEVEq5i/+uJdm75LuH8AH4kae1EF+DOBGLMsC+fmc4g/gyDWUIY\nJVX9c1jR1ZODE4sd\n=3ook\n-----END PGP SIGNATURE-----",
        "payload": "tree 18cac8f87812c2f05d5119a09dc2cd7f44f8483e\nparent 13d27b452d4b60010c54d4f80757dea9805076be\nauthor Fabian Jahr <fjahr@protonmail.com> 1585058676 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1621296558 +0200\n\nwallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f073076b102b77897e5a025ae555baae3d1f671",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f073076b102b77897e5a025ae555baae3d1f671",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f073076b102b77897e5a025ae555baae3d1f671/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13d27b452d4b60010c54d4f80757dea9805076be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13d27b452d4b60010c54d4f80757dea9805076be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13d27b452d4b60010c54d4f80757dea9805076be"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 25,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c21cefa8e0585c2dc8acf5535a450b791e472086",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f073076b102b77897e5a025ae555baae3d1f671/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f073076b102b77897e5a025ae555baae3d1f671/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8f073076b102b77897e5a025ae555baae3d1f671",
        "patch": "@@ -53,7 +53,7 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n     },\n };\n \n-static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n+static constexpr size_t OUTPUT_GROUP_MAX_ENTRIES{100};\n \n RecursiveMutex cs_wallets;\n static std::vector<std::shared_ptr<CWallet>> vpwallets GUARDED_BY(cs_wallets);\n@@ -2497,7 +2497,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     // form groups from remaining coins; note that preset coins will not\n     // automatically have their associated (same address) coins included\n     if (coin_control.m_avoid_partial_spends && vCoins.size() > OUTPUT_GROUP_MAX_ENTRIES) {\n-        // Cases where we have 11+ outputs all pointing to the same destination may result in\n+        // Cases where we have 101+ outputs all pointing to the same destination may result in\n         // privacy leaks as they will potentially be deterministically sorted. We solve that by\n         // explicitly shuffling the outputs before processing\n         Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());"
      },
      {
        "sha": "c13d8de4b5517b73dce3792e7d2b7de625873c22",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f073076b102b77897e5a025ae555baae3d1f671/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f073076b102b77897e5a025ae555baae3d1f671/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=8f073076b102b77897e5a025ae555baae3d1f671",
        "patch": "@@ -42,25 +42,25 @@ def count_unspent(node):\n     r[\"reused\"][\"supported\"] = supports_reused\n     return r\n \n-def assert_unspent(node, total_count=None, total_sum=None, reused_supported=None, reused_count=None, reused_sum=None):\n+def assert_unspent(node, total_count=None, total_sum=None, reused_supported=None, reused_count=None, reused_sum=None, margin=0.001):\n     '''Make assertions about a node's unspent output statistics'''\n     stats = count_unspent(node)\n     if total_count is not None:\n         assert_equal(stats[\"total\"][\"count\"], total_count)\n     if total_sum is not None:\n-        assert_approx(stats[\"total\"][\"sum\"], total_sum, 0.001)\n+        assert_approx(stats[\"total\"][\"sum\"], total_sum, margin)\n     if reused_supported is not None:\n         assert_equal(stats[\"reused\"][\"supported\"], reused_supported)\n     if reused_count is not None:\n         assert_equal(stats[\"reused\"][\"count\"], reused_count)\n     if reused_sum is not None:\n-        assert_approx(stats[\"reused\"][\"sum\"], reused_sum, 0.001)\n+        assert_approx(stats[\"reused\"][\"sum\"], reused_sum, margin)\n \n-def assert_balances(node, mine):\n+def assert_balances(node, mine, margin=0.001):\n     '''Make assertions about a node's getbalances output'''\n     got = node.getbalances()[\"mine\"]\n     for k,v in mine.items():\n-        assert_approx(got[k], v, 0.001)\n+        assert_approx(got[k], v, margin)\n \n class AvoidReuseTest(BitcoinTestFramework):\n \n@@ -299,7 +299,7 @@ def test_getbalances_used(self):\n         ret_addr = self.nodes[0].getnewaddress()\n \n         # send multiple transactions, reusing one address\n-        for _ in range(11):\n+        for _ in range(101):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.nodes[0].generate(1)\n@@ -311,14 +311,14 @@ def test_getbalances_used(self):\n \n         # getbalances and listunspent should show the remaining outputs\n         # in the reused address as used/reused\n-        assert_unspent(self.nodes[1], total_count=2, total_sum=6, reused_count=1, reused_sum=1)\n-        assert_balances(self.nodes[1], mine={\"used\": 1, \"trusted\": 5})\n+        assert_unspent(self.nodes[1], total_count=2, total_sum=96, reused_count=1, reused_sum=1, margin=0.01)\n+        assert_balances(self.nodes[1], mine={\"used\": 1, \"trusted\": 95}, margin=0.01)\n \n     def test_full_destination_group_is_preferred(self):\n         '''\n-        Test the case where [1] only has 11 outputs of 1 BTC in the same reused\n+        Test the case where [1] only has 101 outputs of 1 BTC in the same reused\n         address and tries to send a small payment of 0.5 BTC. The wallet\n-        should use 10 outputs from the reused address as inputs and not a\n+        should use 100 outputs from the reused address as inputs and not a\n         single 1 BTC input, in order to join several outputs from the reused\n         address.\n         '''\n@@ -330,8 +330,8 @@ def test_full_destination_group_is_preferred(self):\n         new_addr = self.nodes[1].getnewaddress()\n         ret_addr = self.nodes[0].getnewaddress()\n \n-        # Send 11 outputs of 1 BTC to the same, reused address in the wallet\n-        for _ in range(11):\n+        # Send 101 outputs of 1 BTC to the same, reused address in the wallet\n+        for _ in range(101):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.nodes[0].generate(1)\n@@ -342,14 +342,14 @@ def test_full_destination_group_is_preferred(self):\n         txid = self.nodes[1].sendtoaddress(address=ret_addr, amount=0.5)\n         inputs = self.nodes[1].getrawtransaction(txid, 1)[\"vin\"]\n \n-        # The transaction should use 10 inputs exactly\n-        assert_equal(len(inputs), 10)\n+        # The transaction should use 100 inputs exactly\n+        assert_equal(len(inputs), 100)\n \n     def test_all_destination_groups_are_used(self):\n         '''\n-        Test the case where [1] only has 22 outputs of 1 BTC in the same reused\n-        address and tries to send a payment of 20.5 BTC. The wallet\n-        should use all 22 outputs from the reused address as inputs.\n+        Test the case where [1] only has 202 outputs of 1 BTC in the same reused\n+        address and tries to send a payment of 200.5 BTC. The wallet\n+        should use all 202 outputs from the reused address as inputs.\n         '''\n         self.log.info(\"Test that all destination groups are used\")\n \n@@ -359,20 +359,20 @@ def test_all_destination_groups_are_used(self):\n         new_addr = self.nodes[1].getnewaddress()\n         ret_addr = self.nodes[0].getnewaddress()\n \n-        # Send 22 outputs of 1 BTC to the same, reused address in the wallet\n-        for _ in range(22):\n+        # Send 202 outputs of 1 BTC to the same, reused address in the wallet\n+        for _ in range(202):\n             self.nodes[0].sendtoaddress(new_addr, 1)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # Sending a transaction that needs to use the full groups\n-        # of 10 inputs but also the incomplete group of 2 inputs.\n-        txid = self.nodes[1].sendtoaddress(address=ret_addr, amount=20.5)\n+        # of 100 inputs but also the incomplete group of 2 inputs.\n+        txid = self.nodes[1].sendtoaddress(address=ret_addr, amount=200.5)\n         inputs = self.nodes[1].getrawtransaction(txid, 1)[\"vin\"]\n \n-        # The transaction should use 22 inputs exactly\n-        assert_equal(len(inputs), 22)\n+        # The transaction should use 202 inputs exactly\n+        assert_equal(len(inputs), 202)\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "e6fe1c37d0a2f8037996dd80619d6c23ec028729",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmZlMWMzN2QwYTJmODAzNzk5NmRkODA2MTlkNmMyM2VjMDI4NzI5",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-24T14:49:21Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-18T00:11:47Z"
      },
      "message": "rpc: Improve avoidpartialspends and avoid_reuse documentation",
      "tree": {
        "sha": "9745e9e148e9aa7c10fe32b77d1c58bf82844842",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9745e9e148e9aa7c10fe32b77d1c58bf82844842"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6fe1c37d0a2f8037996dd80619d6c23ec028729",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmCjBkMVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNyTIP/1SMAm6ZUGfQey7Er0GrwcC+HaH+\nJuOyWRPAjMlu8MrRKUuOSOvpEijymk13R5Z/8X3KWGrplB3bUAfH1+KVHrwrIxzL\nB4HjaF+N4a0LaItp0c0q8Nm58vWlzEfQXk3emNlyE8Kp+0kguTJxLAX3qS+S3Yat\nDqQ3RnzFT13aYIW5eIfDKn6W1XAK7GN8xfGjQqOfFoR0oa91Q0cmd6xScsJeozgc\nQMz0P/1IjlG03bsWFmHSa6zZ02kGSFvwmJG8YisyxWwJGFmzr6p9S5lkTsktm4Rh\nx/ywmRL4+qGkfu3aYjOmKIdGHaj0NnGVlsoD/K4imdZMoHW03YslgkXWifQG+68O\nfvyK9sF/EtTQ6b0nF/UVlT38eKXKuc/K1TEpolFMsrpWBhgh/IOGc84kLQZg0AEO\ntuK+GjNsmpjdxlg9bp+MqmW5Ip4aChx1+whWtNBQsWrjViSrBvYb1oxaJPfP3Muk\nP7C3xs1n0Bzz9jwor5ZJlG1txarh8QIhZKO2rMn3efG2a398DA8BL0rLB0Z7T/Zn\nYs8b7eYsnUvrEdLIWWBaVjHcr2J0JG4W2SQViyZxcjCNHQWJtTUUWy0VC9w7Tz3w\naArQkdIDs3njk4dpS08v+TuqxXaq/CHd0UwT9Y6KLGKjEtPsfstSylZOUc8I0pSc\nVL2kgCbkuSe6I04n\n=Nzbn\n-----END PGP SIGNATURE-----",
        "payload": "tree 9745e9e148e9aa7c10fe32b77d1c58bf82844842\nparent 8f073076b102b77897e5a025ae555baae3d1f671\nauthor Fabian Jahr <fjahr@protonmail.com> 1585061361 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1621296707 +0200\n\nrpc: Improve avoidpartialspends and avoid_reuse documentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6fe1c37d0a2f8037996dd80619d6c23ec028729",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6fe1c37d0a2f8037996dd80619d6c23ec028729",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6fe1c37d0a2f8037996dd80619d6c23ec028729/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f073076b102b77897e5a025ae555baae3d1f671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f073076b102b77897e5a025ae555baae3d1f671",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f073076b102b77897e5a025ae555baae3d1f671"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f5347ca5fe50fd46a85370672f2811537f2a083",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6fe1c37d0a2f8037996dd80619d6c23ec028729/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6fe1c37d0a2f8037996dd80619d6c23ec028729/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e6fe1c37d0a2f8037996dd80619d6c23ec028729",
        "patch": "@@ -43,7 +43,7 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n     argsman.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as addresses are mostly swept with fewer transactions and outputs are aggregated in clean change addresses. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a larger-than-necessary number of inputs being used. Always enabled for wallets with \\\"avoid_reuse\\\" enabled, otherwise default: %u.\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \""
      },
      {
        "sha": "1fa3104c4165ef5d04b37350cbd2a0420348603e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6fe1c37d0a2f8037996dd80619d6c23ec028729/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6fe1c37d0a2f8037996dd80619d6c23ec028729/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e6fe1c37d0a2f8037996dd80619d6c23ec028729",
        "patch": "@@ -446,7 +446,7 @@ static RPCHelpMan sendtoaddress()\n                     {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n-                                         \"dirty if they have previously been used in a transaction.\"},\n+                                         \"dirty if they have previously been used in a transaction. If true, this also activates avoidpartialspends, grouping outputs by their addresses.\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n                     {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra information about the transaction.\"},\n                 },"
      }
    ]
  }
]