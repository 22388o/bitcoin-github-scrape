jonatack,2020-03-24 15:59:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-603328299,603328299,
DrahtBot,2020-03-24 16:20:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21207 (MOVEONLY: CWallet transaction code out of wallet.cpp/.h by ryanofsky)\n* #21206 (refactor: Make CWalletTx sync sta",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-603342688,603342688,
jonatack,2020-03-31 15:38:20,"Will review when #17824 is merged and this is rebased.\n\nSome context for reviewers: https://bitcoincore.reviews/17824.html#l-327 (from here to the end of the discussion)",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-606704558,606704558,
fjahr,2020-04-02 13:51:14,Added some minor cleanups from #17824 ,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-607859587,607859587,
fjahr,2020-04-14 13:07:06,"Rebased, no code changes.",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-613431501,613431501,
fjahr,2020-04-17 14:33:07,"Rebased, since #17824 was merged.",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-615278513,615278513,
fjahr,2020-07-30 18:24:33,Rebased,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-666581777,666581777,
fjahr,2020-09-30 19:30:17,rebased,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-701597648,701597648,
fjahr,2020-11-29 00:21:16,Rebased,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-735309215,735309215,
fjahr,2021-02-07 20:41:07,"Thanks a lot for reviving this @jonatack ! I took your suggestions and rebased. The changes in the first commit were made redundant by changes in master, so I dropped it.",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-774756877,774756877,
fjahr,2021-04-19 19:34:20,Rebased,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-822730560,822730560,
Xekyo,2021-04-22 14:43:11,tACK 241e14162fdfdddf697536113a68a3b11449db63,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-824904118,824904118,
prayank23,2021-05-18 20:37:04,"Reading the comments about increasing `OUTPUT_GROUP_MAX_ENTRIES` from 10 to 100: https://bitcoincore.reviews/17824.html\n\nnit: I think it will be better if we have MIN, MAX and DEFAULT in such cases and allow user to set anything between MIN and MAX. For `OUTPUT_GROUP_MAX_ENTRIES`:\n\n`OUTPUT_GROUP_DEFAULT_ENTRIES`:10\n`OUTPUT_GROUP_MIN_ENTRIES`: 10\n`OUTPUT_GROUP_MAX_ENTRIES`: 100\n\nMen",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-843542279,843542279,
jnewbery,2021-05-19 09:08:46,ACK e6fe1c37d0,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-843906705,843906705,
michaelfolkson,2021-05-19 10:53:57,@prayank23: Please try to focus on the PR in question. Additional features can be added in a separate PR e.g. user configurable max. The StackExchange post is interesting but I would argue not relevant to the intent of this PR. Relay connections are certainly not relevant. ,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-843986904,843986904,
prayank23,2021-05-19 11:04:04,"> The StackExchange post is interesting but I would argue not relevant to the intent of this PR. \n\nTo review this PR you need to test `avoidpartialspends`, it didn't work as I expected it to be.\n\n> Relay connections are certainly not relevant.\n\nNever mentioned anything about relay. The link of other PR is about use of different constants in Bitcoin Core. It is relevant because value of",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-843994397,843994397,
michaelfolkson,2021-05-19 11:16:31,"> It is relevant because value of OUTPUT_GROUP_MAX_ENTRIES was 10 earlier and 100 after this PR with not enough reasons to justify those numbers which affects Bitcoin Core users unaware of these things.\n\nI agree with you that the rationale (upsides and downsides to this change) for increasing from 10 to 100 seems weakly explained/explored and hence it is hard to assess Concept ACK/NACK. As @Xe",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-844003295,844003295,
glozow,2021-05-19 13:19:06,"> I agree with you that the rationale (upsides and downsides to this change) for increasing from 10 to 100 seems weakly explained/explored and hence it is hard to assess Concept ACK/NACK.\n\n@michaelfolkson I've had a think about this and my rough framework for the soundness of a `OUTPUT_GROUP_MAX_ENTRIES` is\n- high enough so that, if a user turned on `avoid_reuse` and that triggered `-avoidpa",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-844099084,844099084,
Xekyo,2021-05-19 15:03:27,"`OUTPUT_GROUP_MAX_ENTRIES` is only relevant when users are privacy conscious enough to enable avoid partial spend, but then on the other hand also heavily reuse addresses. It seems unlikely that this constellation occurs so frequently that it would be worth adding and maintaining configuration options for it.",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-844192808,844192808,
Xekyo,2021-05-19 16:12:39,retACK e6fe1c37d0a2f8037996dd80619d6c23ec028729,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-844254107,844254107,
rajarshimaitra,2021-05-21 09:22:24,"tACK `e6fe1c3`\n\nVerified the tests are checking against intended behaviour.\n\nNo strong feeling over the value of `OUTPUT_GROUP_MAX_ENTRIES`.  \n\n@glozow 's rationale here https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-844099084 makes sense to me. \n\nBut in the end this is also as arbitrary as 10. Would be better if this rationale could be included in the PR description. W",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-845814584,845814584,
prayank23,2021-05-21 13:22:32,"> OUTPUT_GROUP_MAX_ENTRIES is only relevant when users are privacy conscious enough to enable avoid partial spend, but then on the other hand also heavily reuse addresses. It seems unlikely that this constellation occurs so frequently\n\nI was thinking about possible examples in which a user has saved `avoidpartialspends=1` in bitcoin.conf but still reusing addresses. Two examples that I could t",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-845946696,845946696,
achow101,2021-05-25 04:54:44,ACK e6fe1c37d0a2f8037996dd80619d6c23ec028729,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-847528872,847528872,
prayank23,2021-05-25 06:05:27,"Concept NACK\n\n- It should not just be 100 but 'all` same-scriptpubkey coins\n- If there needs to be value for it, let the users decide with some option in bitcoin.conf\n\nReason: Privacy. There are few other related issues as well which are mentioned in https://github.com/bitcoin/bitcoin/issues/22018",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-847564511,847564511,
michaelfolkson,2021-05-25 12:26:50,"@prayank23: I suspect that increasing OUTPUT_GROUP_MAX_ENTRIES to unlimited (no max) would get some NACKs based on the discussions at the PR review clubs and @glozow's ""low enough to not be a footgun (fee-wise) for users that turn on -avoidpartialspends""\n\nAnd an option in bitcoin.conf would have greater scope and more complexity than this PR though anyone is free to open that PR before or afte",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-847825592,847825592,
prayank23,2021-05-25 12:45:26,"> Hence I think this PR is a choice between the status quo (10) or 100 rather than the two choices you outline as your preferences. And there seems to be consensus amongst the wallet devs that 100 is better than 10.\n\n10 or 100, both are bad for privacy. Increasing it from 10 to 100 is worse if you consider attacker will be able to know more about the version of core used by victim.\n\n> I su",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-847837980,847837980,
michaelfolkson,2021-05-25 12:55:13,"> 10 or 100, both are bad for privacy. Increasing it from 10 to 100 is worse if you consider attacker can now know more about the version of core used by victim.\n\nI'm pretty sure keeping the version of Core private is near the bottom of the privacy priority wishlist. Otherwise we would make no improvements and add no features to Core that leak the Core version being used. The general advice ap",https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-847844669,847844669,
fanquake,2021-05-26 11:33:42,cc @meshcollider @instagibbs ,https://github.com/bitcoin/bitcoin/pull/18418#issuecomment-848694448,848694448,
jonatack,2021-02-06 19:01:17,"```suggestion\nstatic constexpr size_t OUTPUT_GROUP_MAX_ENTRIES = 100;\n```",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r571471956,571471956,src/wallet/wallet.cpp
jonatack,2021-02-06 19:43:57,"```suggestion\n    argsman.AddArg(""-avoidpartialspends"", strprintf(""Group outputs by public key, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as the public key is mostly swept and outputs are aggregated in a clean change address. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a ",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r571478045,571478045,src/wallet/init.cpp
fjahr,2021-02-07 20:39:51,Done,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r571689510,571689510,src/wallet/wallet.cpp
fjahr,2021-02-07 20:39:59,Done,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r571689522,571689522,src/wallet/init.cpp
Xekyo,2021-04-21 16:28:34,"The 'mostly' was a bit begging the question in what cases it doesn't sweep all UTXOs. Maybe:\n```suggestion\n    argsman.AddArg(""-avoidpartialspends"", strprintf(""Group outputs by public key, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as public keys are swept with fewer transactions and outputs are aggregated in clean change addresses. I",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r617704032,617704032,src/wallet/init.cpp
fjahr,2021-04-21 21:34:10,"Thanks, makes sense! Done.",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r617891653,617891653,src/wallet/init.cpp
glozow,2021-05-15 13:50:12,"```suggestion\nstatic constexpr size_t OUTPUT_GROUP_MAX_ENTRIES{100};\n```",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r632951912,632951912,src/wallet/wallet.cpp
glozow,2021-05-15 17:17:03,"Isn't it by scriptPubKey? It seems to me that ""address"" might be more accurate / intuitive for users than public key?",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r632984351,632984351,src/wallet/init.cpp
glozow,2021-05-15 18:11:30,"Hmm, I added a line to grab the amount and fee for this transaction here, i.e. \n```py\ntxinfo = self.nodes[1].gettransaction(txid)\nprint(""Paid fee of {} when sending {}"".format(txinfo[""fee""], txinfo[""amount""]))\n```\nIt looks like the fee would be 0.00136966BTC :scream: I thought it might get caught by `maxapsfee` but it went through. Am I missing something else that would catch this case?",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r632989577,632989577,test/functional/wallet_avoidreuse.py
jnewbery,2021-05-17 13:40:45,"I agree. UTXOs could be sent to multiple addresses corresponding to the same pubkey, and they'd be grouped into different Output Groups.",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633540334,633540334,src/wallet/init.cpp
jnewbery,2021-05-17 13:48:48,"I don't think this is a problem (or at least not worse than any alternative). The high fees are intrinsic in the UTXOs that are already owned by the wallet. The fact that they get realized when making this 0.001BTC payment is no better/worse than if they were realized when making a subsequent payment for 100BTC, or if they were used to make a subsequent payment of 0.00001 BTC.\n\nThe only way th",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633547209,633547209,test/functional/wallet_avoidreuse.py
jnewbery,2021-05-17 13:53:33,I think this could be confusing for users if you don't also describe what `avoidpartialspends` means.,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633551255,633551255,src/wallet/rpcwallet.cpp
mzumsande,2021-05-17 21:03:25,"There is a [comment](https://github.com/fjahr/bitcoin/blob/241e14162fdfdddf697536113a68a3b11449db63/src/wallet/wallet.cpp#L2500) that became outdated and should maybe just refer to OUTPUT_GROUP_MAX_ENTRIES:\n`// Cases where we have 11+ outputs all pointing to the same destination may result in privacy leaks as they will potentially be deterministically sorted.`",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633867647,633867647,src/wallet/wallet.cpp
fjahr,2021-05-18 00:13:03,done,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633943873,633943873,src/wallet/wallet.cpp
fjahr,2021-05-18 00:14:00,"A scriptPubKey can also have multiple address types and those would be grouped in the same output group, which was the motivation to make this more precise if I remember correctly. So spk would be the correct term to use here IMO. But it seems there is a lot of support for not making a change and spk might be too technical here, so I have reverted this bit.",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633944167,633944167,src/wallet/init.cpp
fjahr,2021-05-18 00:14:06,(typed this before github showed johns anwer so there is some duplication here I think) It's not great in theory. But I think we can expect that users know what they are getting into here. The users have reused addresses a lot (willingly or unwillingly) and realized that this is a threat to their privacy. Then they have opted in to avoid reuse which warns users that this can create higher fees via,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633944210,633944210,test/functional/wallet_avoidreuse.py
fjahr,2021-05-18 00:14:58,I added a very minimal description but I think more is not needed because we reference so many things in these docs (BIPs etc.) without explanation that I would expect users to look up what they don't know in general.,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633944562,633944562,src/wallet/rpcwallet.cpp
fjahr,2021-05-18 00:15:03,Very nice find! Fixed!,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r633944583,633944583,src/wallet/wallet.cpp
prayank23,2021-05-18 19:57:19,"nit: Can mention avoidpartialspends in single quotes or a complete sentence to describe what it does: _If true, it will avoid partial spends and group unspent outputs by address._\n",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r634705094,634705094,src/wallet/rpcwallet.cpp
jnewbery,2021-05-19 08:58:08,Minimal description looks good. Thanks!,https://github.com/bitcoin/bitcoin/pull/18418#discussion_r635046414,635046414,src/wallet/rpcwallet.cpp
jnewbery,2021-05-19 09:02:04,"> A scriptPubKey can also have multiple address types\n\nI don't believe this is true. A scriptPubKey will encode deterministically to a single address (base58 for P2PKH and P2SH, bech32 for P2WPKH and P2WSH, bech32m for segwit v1+).",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r635049424,635049424,src/wallet/init.cpp
glozow,2021-05-19 11:03:44,"Ahh thanks for explaining this. I can see how a user turning `-avoidpartialspends` on would be consciously choosing to opt for privacy over lower short-term fees.\n\n> maxapsfee is only relevant if avoid partial spends is not activated. If avoid partial spends is not set, the wallet will still try to avoid partial spends and prefer to use those coins that avoid partial spends of those that don't",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r635134220,635134220,test/functional/wallet_avoidreuse.py
fjahr,2021-05-26 20:34:56,"I guess this code changed since I opened this PR then. It used to be an issue, see #17605. As sipa mentions there it was never an issue on descriptor wallets but I didn't expect that behavior was changed on legacy wallets as well.",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r640102319,640102319,src/wallet/init.cpp
fjahr,2021-05-26 20:59:18,"Never mind, this was about marking as reused, not the grouping. I guess this is what made me do the doc change in the first place but I was just confused.",https://github.com/bitcoin/bitcoin/pull/18418#discussion_r640116791,640116791,src/wallet/init.cpp
