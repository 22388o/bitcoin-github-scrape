DrahtBot,2019-09-04 04:11:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17056](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17056.html) (descriptors: Introduce sortedmulti descript",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-527731575,527731575,
practicalswift,2019-09-04 08:23:16,"Concept ACK\n\nThanks for the great work on miniscript and the C++ implementation!\n\nThis version seems to deviate somewhat to the version in the [upstream repo](https://github.com/sipa/miniscript) which makes it unclear to me which of the issues I found during my review that have been addressed:\n* [Avoid termination due to unhandled exception when parsing invalid arguments to after(...), o",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-527797423,527797423,
sipa,2019-09-04 18:18:15,"@practicalswift Thanks for reminding me, I had forgotten about those (and wasn't really looking at the miniscript repo while working on this PR). Specifically:\n* The overflow/underflow issue and the OOM issue don't apply here, as they're in the compiler code which I'm not PR'ing here.\n* The unhandled exception I've fixed independently because `stoul` and friends are locale dependent (both here",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-528022659,528022659,
practicalswift,2019-09-12 12:46:18,"I'm afraid a carefully constructed script is able to trigger a heap out-of-bounds read in `Node::CalcOps` (called indirectly from `miniscript::FromScript`). \n\n`Node::CalcOps` appears to be reachable  via RPC calls `listunspent`, `scantxoutset` and `getaddressinfo` (see call graph below).\n\nCode:\n\nhttps://github.com/bitcoin/bitcoin/blob/037e55adc005e9d8253d3d35e7a30b2e8521389c/src/script",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530808234,530808234,
practicalswift,2019-09-12 15:09:20,The smallest Bitcoin script I've been able to construct that triggers this heap out-of-bounds read is `OP_0 OP_2 OP_EQUAL` (`00 52 87`).,https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530871000,530871000,
practicalswift,2019-09-12 15:22:28,"Found another somewhat related issue: an assertion failure in `ComputeType` is hit when processing the script `OP_0 OP_0 OP_EQUAL` (`00 00 87`).\n\n```\nbitcoin/script/miniscript.cpp:54: \n    miniscript::Type miniscript::internal::ComputeType(â€¦):\n    Assertion `k > 1 && k < n_subs' failed.\n```\n\nIt is AFAICT reachable via the same code paths as the `Node::CalcOps` discussed above.\n\",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530876527,530876527,
promag,2019-09-15 22:36:57,"Concept ACK.\n\nYou could submit the refactors as separate pulls one by one. For instance, one for fc4691899d128cd4d8a8b60503803fc53d43eb9f which I think is acceptable on its own.",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-531605482,531605482,
DrahtBot,2019-10-08 19:13:39,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-539660256,539660256,
practicalswift,2019-10-27 23:09:53,@sipa Would you mind cherry-picking in the `miniscript::FromScript(...)` fuzzer from #17129 in to this PR? That would allow for closing #17129 which is entirely dependent on the merge of this one anyway :),https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-546744758,546744758,
practicalswift,2019-11-12 18:55:16,"@fanquake Could you add ""Waiting for author""? :)",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-553057542,553057542,
MarcoFalke,2019-11-12 18:59:39,"""Needs rebase"" implies ""Waiting for author""",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-553059597,553059597,
achow101,2020-02-07 19:09:26,"I've noticed that there are some Miniscript functions that may conflict in naming or functionality with existing output descriptors that may cause issues.\n\n* `multi()` and `thresh_m()` are functionally the same. So the easy thing to do would be to just make `multi()` an alias for `thresh_m()`\n* `sortedmulti()` currently has no Miniscript counterpart. But I think that is easily solved by havi",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-583559190,583559190,
Sjors,2020-02-10 15:29:02,"Concept ACK, after many hours of @apoelstra explaining Miniscript and its relation to Output Descriptors :-)\n\nI like @achow101's suggestion:\n>   * Alternatively we could deprecate and remove the usage of `pk()` and replace it with `c:pk()`. We could add `c:pk()` now (for 0.20) and have it mean the same thing as `pk()` now.\n\nWould be great to get a rebase of this before 0.20 splits off, s",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-584178250,584178250,
sipa,2020-02-12 20:00:07,"After a number of discussions, I think this highlights the possibility to decrease the gap between Miniscript and non-Miniscript descriptors.\n\nMy suggestion is making the following changes to Miniscript:\n* Rename `thresh_m` to `multi`.\n* Rename `pk` to `pk_k`.\n* Add an alias `pk(A)=c:pk_k(A)` (just like `and_n(A,B)=andor(A,B,0)` for example).\n* Add an alias `pkh(A)=c:pk_h(A)`.\n\nTha",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-585391070,585391070,
practicalswift,2020-02-13 07:16:18,"@sipa I would like to continue my robustness testing of this PR. Could you please rebase on `master` and perhaps also pull in my fix for the heap out-of-bounds read present in the current version of this PR: [""Avoid heap out-of-bounds read in Node::CalcOps (test case: OP_0 OP_2 OP_EQUAL) and assertion failure in ComputeType (test case: OP_0 OP_0 OP_EQUAL)""](https://github.com/sipa/miniscript/pull/",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-585586131,585586131,
darosior,2020-07-24 12:37:15,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-663517488,663517488,
michaelfolkson,2021-07-30 17:28:19,"Scratching the surface on what would be needed to revitalize this PR. Obviously there is a mega rebase to do as it has been sitting here for a while but there have also been some changes since to the [C++ implementation](https://github.com/sipa/miniscript) of Miniscript. Presumably it would make sense to work on the Core rebase first and then the Miniscript updates?\n\nedit: \n\n> This version",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-890043893,890043893,
meshcollider,2021-08-22 04:27:41,"(Just for the information of those wondering what's happening here, there are currently a few things being finished up in the miniscript repository before this PR is rebased, but it is a current WIP so expect something soon-ish!)",https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-903211605,903211605,
MarcoFalke,2019-09-04 11:32:07,"Looks like these already are macros on mac from `/home/travis/build/bitcoin/bitcoin/depends/SDKs/MacOSX10.11.sdk/usr/include/mach/boolean.h`?\n\nAnd also in windows: https://travis-ci.org/bitcoin/bitcoin/jobs/580527642#L3384",https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320708381,320708381,src/script/miniscript.h
MarcoFalke,2019-09-04 11:35:27,"```\ntest/miniscript_tests.cpp:115:20: error: default initialization of an object of const type 'const (anonymous namespace)::KeyConverter' without a user-provided default constructor\n```\n\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/580527646#L3225",https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320709735,320709735,src/test/miniscript_tests.cpp
MarcoFalke,2019-09-04 11:38:09,"```\nRunning tests: miniscript_tests from test/miniscript_tests.cpp\nRunning 2 test cases...\nTest cases order is shuffled using seed: 1580527639\nEntering test module ""Bitcoin Core Test Suite""\ntest/miniscript_tests.cpp(282): Entering test suite ""miniscript_tests""\ntest/miniscript_tests.cpp(322): Entering test case ""random_tests""\nscript/miniscript.h:599:33: runtime error: unsigned integer",https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320710696,320710696,src/script/miniscript.h
sipa,2019-09-04 18:13:21,Thanks for investigating; fixed.,https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320902315,320902315,src/script/miniscript.h
sipa,2019-09-04 18:13:43,Fixed pedantry by using `const KeyConverter CONVERTER{};` instead.,https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320902469,320902469,src/test/miniscript_tests.cpp
sipa,2019-09-04 18:13:59,Fixed by renaming to `JUST_0` and `JUST_1`.,https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320902597,320902597,src/script/miniscript.h
MarcoFalke,2019-09-04 23:41:26,"Looks like this is still failing on https://bitcoinbuilds.org/index.php?job=e1623137-779c-47dd-8a8a-ebaee60766ec\n\n```\nEntering test module ""Bitcoin Core Test Suite""\ntest/miniscript_tests.cpp(282): Entering test suite ""miniscript_tests""\ntest/miniscript_tests.cpp(284): Entering test case ""fixed_tests""\ntest/miniscript_tests.cpp(284): Leaving test case ""fixed_tests""; testing time: 35249us",https://github.com/bitcoin/bitcoin/pull/16800#discussion_r321021420,321021420,src/script/miniscript.h
sipa,2019-09-06 17:12:38,Fixed by switching to a different algorithm.,https://github.com/bitcoin/bitcoin/pull/16800#discussion_r321829854,321829854,src/script/miniscript.h
