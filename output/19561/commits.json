[
  {
    "sha": "a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzE2ZTljZTI2NTIxMmE3YzZjNGVmNzkyMjQyMGY2ZWNiYTllN2Iw",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-19T07:31:51Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-29T09:36:44Z"
      },
      "message": "refactor: add unused ArgsManager to replace gArgs",
      "tree": {
        "sha": "1520d2825059fd44380bbf3f17605f4ca0dc4b04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1520d2825059fd44380bbf3f17605f4ca0dc4b04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f71a1ea35667b3873197201531e7ae198ec5bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f71a1ea35667b3873197201531e7ae198ec5bf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f71a1ea35667b3873197201531e7ae198ec5bf4"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 28,
      "deletions": 23
    },
    "files": [
      {
        "sha": "0651d250a85c42e18d80712af468e4dfe3ea0edc",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -43,9 +43,9 @@ static const int CONTINUE_EXECUTION=-1;\n /** Default number of blocks to generate for RPC generatetoaddress. */\n static const std::string DEFAULT_NBLOCKS = \"1\";\n \n-static void SetupCliArgs()\n+static void SetupCliArgs(ArgsManager& argsman)\n {\n-    SetupHelpOptions(gArgs);\n+    SetupHelpOptions(argsman);\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n@@ -56,7 +56,7 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-generate\", strprintf(\"Generate blocks immediately, equivalent to RPC generatenewaddress followed by RPC generatetoaddress. Optional positional integer arguments are number of blocks to generate (default: %s) and maximum iterations to try (default: %s), equivalent to RPC generatetoaddress nblocks and maxtries arguments. Example: bitcoin-cli -generate 4 1000\", DEFAULT_NBLOCKS, DEFAULT_MAX_TRIES), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    SetupChainParamsBaseOptions();\n+    SetupChainParamsBaseOptions(argsman);\n     gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -111,7 +111,7 @@ static int AppInitRPC(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    SetupCliArgs();\n+    SetupCliArgs(gArgs);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);"
      },
      {
        "sha": "f785eebafa6562e156827b54798ba8151ce825be",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -36,14 +36,14 @@ static const int CONTINUE_EXECUTION=-1;\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n-static void SetupBitcoinTxArgs()\n+static void SetupBitcoinTxArgs(ArgsManager &argsman)\n {\n-    SetupHelpOptions(gArgs);\n+    SetupHelpOptions(argsman);\n \n     gArgs.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    SetupChainParamsBaseOptions();\n+    SetupChainParamsBaseOptions(argsman);\n \n     gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n@@ -81,7 +81,7 @@ static int AppInitRawTx(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    SetupBitcoinTxArgs();\n+    SetupBitcoinTxArgs(gArgs);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);"
      },
      {
        "sha": "742f3e8c5d450fb9212a7c9453cced27fba730c4",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -19,10 +19,10 @@\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = nullptr;\n \n-static void SetupWalletToolArgs()\n+static void SetupWalletToolArgs(ArgsManager& argsman)\n {\n-    SetupHelpOptions(gArgs);\n-    SetupChainParamsBaseOptions();\n+    SetupHelpOptions(argsman);\n+    SetupChainParamsBaseOptions(argsman);\n \n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n@@ -36,7 +36,7 @@ static void SetupWalletToolArgs()\n \n static bool WalletAppInit(int argc, char* argv[])\n {\n-    SetupWalletToolArgs();\n+    SetupWalletToolArgs(gArgs);\n     std::string error_message;\n     if (!gArgs.ParseParameters(argc, argv, error_message)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message);"
      },
      {
        "sha": "08f605949d0ff25ed5b1993e53f099906578aaea",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -15,7 +15,7 @@ const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n-void SetupChainParamsBaseOptions()\n+void SetupChainParamsBaseOptions(ArgsManager& argsman)\n {\n     gArgs.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \""
      },
      {
        "sha": "1c52d0ea97b51f85ff081b45b98435a0aa23dc11",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -8,6 +8,8 @@\n #include <memory>\n #include <string>\n \n+class ArgsManager;\n+\n /**\n  * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)\n  * of a given instance of the Bitcoin system.\n@@ -43,7 +45,7 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n /**\n  *Set the arguments for chainparams\n  */\n-void SetupChainParamsBaseOptions();\n+void SetupChainParamsBaseOptions(ArgsManager& argsman);\n \n /**\n  * Return the currently selected parameters. This won't change after app"
      },
      {
        "sha": "51bc67c7b76273598537a3c1cf6e713feb6fb6d3",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -20,12 +20,12 @@ class DummyWalletInit : public WalletInitInterface {\n public:\n \n     bool HasWalletSupport() const override {return false;}\n-    void AddWalletOptions() const override;\n+    void AddWalletOptions(ArgsManager& argsman) const override;\n     bool ParameterInteraction() const override {return true;}\n     void Construct(NodeContext& node) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n };\n \n-void DummyWalletInit::AddWalletOptions() const\n+void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n     gArgs.AddHiddenArgs({\n         \"-addresstype\","
      },
      {
        "sha": "7bcb95dc9c31344f722ba7d897f207b7ba991cb6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -369,6 +369,7 @@ void SetupServerArgs(NodeContext& node)\n {\n     assert(!node.args);\n     node.args = &gArgs;\n+    ArgsManager& argsman = *node.args;\n \n     SetupHelpOptions(gArgs);\n     gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n@@ -478,7 +479,7 @@ void SetupServerArgs(NodeContext& node)\n         \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n         \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n-    g_wallet_init_interface.AddWalletOptions();\n+    g_wallet_init_interface.AddWalletOptions(argsman);\n \n #if ENABLE_ZMQ\n     gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n@@ -534,7 +535,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n-    SetupChainParamsBaseOptions();\n+    SetupChainParamsBaseOptions(argsman);\n \n     gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);"
      },
      {
        "sha": "f590579d45d4bd8e4cc8637bb6c0aae0a0f04580",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -411,7 +411,7 @@ WId BitcoinApplication::getMainWinId() const\n     return window->winId();\n }\n \n-static void SetupUIArgs()\n+static void SetupUIArgs(ArgsManager& argsman)\n {\n     gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n     gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n@@ -454,7 +454,7 @@ int GuiMain(int argc, char* argv[])\n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n     node->setupServerArgs();\n-    SetupUIArgs();\n+    SetupUIArgs(gArgs);\n     std::string error;\n     if (!node->parseParameters(argc, argv, error)) {\n         node->initError(strprintf(Untranslated(\"Error parsing command line arguments: %s\\n\"), error));"
      },
      {
        "sha": "a7e0853a82530fde74843594a386e7e24809c376",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -24,7 +24,7 @@ class WalletInit : public WalletInitInterface\n     bool HasWalletSupport() const override {return true;}\n \n     //! Return the wallets help message.\n-    void AddWalletOptions() const override;\n+    void AddWalletOptions(ArgsManager& argsman) const override;\n \n     //! Wallets parameter interaction\n     bool ParameterInteraction() const override;\n@@ -35,7 +35,7 @@ class WalletInit : public WalletInitInterface\n \n const WalletInitInterface& g_wallet_init_interface = WalletInit();\n \n-void WalletInit::AddWalletOptions() const\n+void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);"
      },
      {
        "sha": "a55e02f2dcacbab00134667fccddfafee865f2a5",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "patch": "@@ -5,14 +5,16 @@\n #ifndef BITCOIN_WALLETINITINTERFACE_H\n #define BITCOIN_WALLETINITINTERFACE_H\n \n+class ArgsManager;\n+\n struct NodeContext;\n \n class WalletInitInterface {\n public:\n     /** Is the wallet component enabled */\n     virtual bool HasWalletSupport() const = 0;\n     /** Get wallet help string */\n-    virtual void AddWalletOptions() const = 0;\n+    virtual void AddWalletOptions(ArgsManager& argsman) const = 0;\n     /** Check wallet parameter interaction */\n     virtual bool ParameterInteraction() const = 0;\n     /** Add wallets that should be opened to list of chain clients. */"
      }
    ]
  },
  {
    "sha": "9b20f6682845870d6ac53a01d3166fb83c467e7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjIwZjY2ODI4NDU4NzBkNmFjNTNhMDFkMzE2NmZiODNjNDY3ZTdk",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-19T07:47:05Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-29T09:39:00Z"
      },
      "message": "scripted-diff: Replace gArgs with local argsman\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/gArgs.Add/argsman.Add/g' `git grep -l \"gArgs.Add\"`\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9c2a32286924d5cbed6e2280e9b0ebb5cac4bb63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c2a32286924d5cbed6e2280e9b0ebb5cac4bb63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b20f6682845870d6ac53a01d3166fb83c467e7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20f6682845870d6ac53a01d3166fb83c467e7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b20f6682845870d6ac53a01d3166fb83c467e7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20f6682845870d6ac53a01d3166fb83c467e7d/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a316e9ce265212a7c6c4ef7922420f6ecba9e7b0"
      }
    ],
    "stats": {
      "total": 418,
      "additions": 209,
      "deletions": 209
    },
    "files": [
      {
        "sha": "cf52b710cb2123be2f3507d83aa2eb1a66d7a4bb",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -51,24 +51,24 @@ static void SetupCliArgs(ArgsManager& argsman)\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-generate\", strprintf(\"Generate blocks immediately, equivalent to RPC generatenewaddress followed by RPC generatetoaddress. Optional positional integer arguments are number of blocks to generate (default: %s) and maximum iterations to try (default: %s), equivalent to RPC generatetoaddress nblocks and maxtries arguments. Example: bitcoin-cli -generate 4 1000\", DEFAULT_NBLOCKS, DEFAULT_MAX_TRIES), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-generate\", strprintf(\"Generate blocks immediately, equivalent to RPC generatenewaddress followed by RPC generatetoaddress. Optional positional integer arguments are number of blocks to generate (default: %s) and maximum iterations to try (default: %s), equivalent to RPC generatetoaddress nblocks and maxtries arguments. Example: bitcoin-cli -generate 4 1000\", DEFAULT_NBLOCKS, DEFAULT_MAX_TRIES), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions(argsman);\n-    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdinwalletpassphrase\", \"Read wallet passphrase from standard input as a single line. When combined with -stdin, the first line from standard input is used for the wallet passphrase.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-stdinwalletpassphrase\", \"Read wallet passphrase from standard input as a single line. When combined with -stdin, the first line from standard input is used for the wallet passphrase.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n /** libevent event log callback */"
      },
      {
        "sha": "56afcb6ded1c1664ec3536326a58f5f5cc37b96e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -40,36 +40,36 @@ static void SetupBitcoinTxArgs(ArgsManager &argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions(argsman);\n \n-    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", \"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS. \"\n+    argsman.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"locktime=N\", \"Set TX lock time to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"nversion=N\", \"Set TX version to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", \"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n         \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", \"Add pay-to-pubkey output to TX. \"\n+    argsman.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", \"Add pay-to-pubkey output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output. \"\n         \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", \"Add raw script output to TX. \"\n+    argsman.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", \"Add raw script output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n         \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"sign=SIGHASH-FLAGS\", \"Add zero or more signatures to transaction. \"\n+    argsman.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"sign=SIGHASH-FLAGS\", \"Add zero or more signatures to transaction. \"\n         \"This command requires JSON registers:\"\n         \"prevtxs=JSON object, \"\n         \"privatekeys=JSON object. \"\n         \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n \n-    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n-    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n+    argsman.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n+    argsman.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n }\n \n //"
      },
      {
        "sha": "06b0c864765aeff6009dc98dbf4728a23d7ee37e",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -24,14 +24,14 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     SetupHelpOptions(argsman);\n     SetupChainParamsBaseOptions(argsman);\n \n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-\n-    gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+\n+    argsman.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "1825ced64051951b06f742840d2830fb712d741f",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -17,12 +17,12 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void SetupChainParamsBaseOptions(ArgsManager& argsman)\n {\n-    gArgs.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n+    argsman.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "18dc7a69e22f408f225961c85ef7069a3a9cbabb",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -27,7 +27,7 @@ class DummyWalletInit : public WalletInitInterface {\n \n void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n-    gArgs.AddHiddenArgs({\n+    argsman.AddHiddenArgs({\n         \"-addresstype\",\n         \"-avoidpartialspends\",\n         \"-changetype\","
      },
      {
        "sha": "ad500702d736f984b96dcabeedd6c7d4d8777885",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 132,
        "deletions": 132,
        "changes": 264,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -372,7 +372,7 @@ void SetupServerArgs(NodeContext& node)\n     ArgsManager& argsman = *node.args;\n \n     SetupHelpOptions(gArgs);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n+    argsman.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n@@ -387,109 +387,109 @@ void SetupServerArgs(NodeContext& node)\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-splash\", \"-uiplatform\"};\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n+    argsman.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-conf=<file>\", strprintf(\"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    argsman.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-settings=<file>\", strprintf(\"Specify path to dynamic settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by users (use %s instead for custom settings). Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-settings=<file>\", strprintf(\"Specify path to dynamic settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by users (use %s instead for custom settings). Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n-    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blockfilterindex=<type>\",\n+    argsman.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blockfilterindex=<type>\",\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n-    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n-    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #endif\n #else\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n-    gArgs.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to the given address and add permission flags to the peers connecting to it. \"\n+    argsman.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to the given address and add permission flags to the peers connecting to it. \"\n         \"Use [host]:port notation for IPv6. Allowed permissions: \" + Join(NET_PERMISSIONS_DOC, \", \") + \". \"\n         \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n-    gArgs.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n+    argsman.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n         \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n         \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions(argsman);\n \n #if ENABLE_ZMQ\n-    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n #else\n     hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n@@ -501,82 +501,82 @@ void SetupServerArgs(NodeContext& node)\n     hidden_args.emplace_back(\"-zmqpubrawtxhwm=<n>\");\n #endif\n \n-    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: %s (0-4, default: %u)\", Join(CHECKLEVEL_DOC, \", \"), DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a consistency check for the block tree, chainstate, and other validation data structures occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkpoints\", strprintf(\"Enable rejection of any forks from the known historical chain until block 295000 (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n+    argsman.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: %s (0-4, default: %u)\", Join(CHECKLEVEL_DOC, \", \"), DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-checkblockindex\", strprintf(\"Do a consistency check for the block tree, chainstate, and other validation data structures occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-checkpoints\", strprintf(\"Enable rejection of any forks from the known historical chain until block 295000 (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \".\",\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n #ifdef HAVE_THREAD_LOCAL\n-    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n #else\n     hidden_args.emplace_back(\"-logthreadnames\");\n #endif\n-    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions(argsman);\n \n-    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n+    argsman.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-\n-\n-    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n-\n-    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+\n+\n+    argsman.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    argsman.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    argsman.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n+\n+    argsman.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_DAEMON\n-    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n #endif\n \n     // Add the hidden options\n-    gArgs.AddHiddenArgs(hidden_args);\n+    argsman.AddHiddenArgs(hidden_args);\n }\n \n std::string LicenseInfo()"
      },
      {
        "sha": "523f5c429b9b4c4bc696916c8aa451cc28f679b8",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -413,12 +413,12 @@ WId BitcoinApplication::getMainWinId() const\n \n static void SetupUIArgs(ArgsManager& argsman)\n {\n-    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n+    argsman.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    argsman.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    argsman.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    argsman.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    argsman.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    argsman.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n }\n \n int GuiMain(int argc, char* argv[])"
      },
      {
        "sha": "52162ab521cf2afec388f55ab675679f9f005f9c",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20f6682845870d6ac53a01d3166fb83c467e7d/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "patch": "@@ -37,40 +37,40 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n \n void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n {\n-    gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n+    argsman.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n-    gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data. 0 to entirely disable the fallbackfee feature. (default: %s)\",\n+    argsman.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data. 0 to entirely disable the fallbackfee feature. (default: %s)\",\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u). Warning: Smaller sizes may increase the risk of losing funds when restoring from an old backup, if none of the addresses in the original keypool have been used.\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n+    argsman.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u). Warning: Smaller sizes may increase the risk of losing funds when restoring from an old backup, if none of the addresses in the original keypool have been used.\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+    argsman.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n+    argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID and %w is replaced by wallet name. %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID and %w is replaced by wallet name. %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n-    gArgs.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n+    argsman.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n                                \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n-    gArgs.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n }\n \n bool WalletInit::ParameterInteraction() const"
      }
    ]
  },
  {
    "sha": "8ed9002cd14165f751442f738fbf1fb8a37611b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWQ5MDAyY2QxNDE2NWY3NTE0NDJmNzM4ZmJmMWZiOGEzNzYxMWIy",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-21T10:58:45Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-07-29T09:39:03Z"
      },
      "message": "refactor: use local argsmanager in CRegTestParams",
      "tree": {
        "sha": "10792c2db63d0bd326e65df1cdc0f0f6410273d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10792c2db63d0bd326e65df1cdc0f0f6410273d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ed9002cd14165f751442f738fbf1fb8a37611b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ed9002cd14165f751442f738fbf1fb8a37611b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ed9002cd14165f751442f738fbf1fb8a37611b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ed9002cd14165f751442f738fbf1fb8a37611b2/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20f6682845870d6ac53a01d3166fb83c467e7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b20f6682845870d6ac53a01d3166fb83c467e7d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a7c9e33f07330633fb972c33061698de1b611420",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ed9002cd14165f751442f738fbf1fb8a37611b2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ed9002cd14165f751442f738fbf1fb8a37611b2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8ed9002cd14165f751442f738fbf1fb8a37611b2",
        "patch": "@@ -341,8 +341,8 @@ class CRegTestParams : public CChainParams {\n \n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n-    if (gArgs.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+    if (args.IsArgSet(\"-segwitheight\")) {\n+        int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < -1 || height >= std::numeric_limits<int>::max()) {\n             throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n         } else if (height == -1) {"
      }
    ]
  }
]