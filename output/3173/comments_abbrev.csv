laanwj,2013-10-28T06:56:47Z,"I agree that this is useful. However I'm not sure whether we should include test/fuzzing/stresstest code in the core.\n\nIf we want this we should put it in #ifdefs, add a configure option to enable it and not ship it in gitian builds (IMO).\n",https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27192285,27192285,
Diapolo,2013-10-28T07:18:33Z,"I tend to agree, I remember I wanted to include an GCC stack smashing protection test via a switch, which seemed not like a good idea in the end. A guard via `#ifdef ALLOW_FUZZTEST` and a compiler option would be good IMO.\n",https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27192916,27192916,
gmaxwell,2013-10-28T07:49:13Z,make it only fuzz localhost peers? :)\n,https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27193912,27193912,
petertodd,2013-10-28T11:13:34Z,"ACK\n\nLets not make barriers to this kind of testing like having to compile it in; implementations should be robust enough to handle junk getting sent at them from the occasional buggy peer. If they aren't that robust, they need to be improved frankly.\n\nedit: been running this for a few hours, and it looks like Bitcoin itself can be crashed due to the fuzz-tester...\n",https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27203419,27203419,
jgarzik,2013-10-28T12:52:05Z,ACK.. no objection to it being a runtime feature.\n,https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27208210,27208210,
laanwj,2013-10-28T13:03:23Z,"At least keep it undocumented in `-help` then. There is already such a huge list of command line options, let's not add options that are not useful for 99.9% users and will cause them to be banned if they add it by accident.\n",https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27208902,27208902,
gavinandresen,2013-10-28T23:20:29Z,"Added a comment to make it clear the -*messagestest options are not documented on purpose, since they are for implementors, not end-users.\n\nI do think this should be a built-in run-time feature, it should be very helpful to re-implementors who are likely to be programming in a different language and might not want to bother setting up a dev environment to build themselves.\n\nTweaked with @Diapo",https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27266317,27266317,
gavinandresen,2013-10-29T01:31:41Z,Rebased; fixed a crashing (assertion failed) bug caused by the fuzz-tester deleting at the beginning of the CDataStream (normal bitcoin usage never does that).\n,https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27272198,27272198,
BitcoinPullTester,2013-10-29T02:14:02Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/9038b18f4655a5b8ad119d768decd1c693ebd7dd for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27273652,27273652,
petertodd,2013-10-30T06:15:10Z,@gavinandresen Been running this for about a day with the crash fix and -fuzzmessagestest=100 No problems found.\n,https://github.com/bitcoin/bitcoin/pull/3173#issuecomment-27367469,27367469,
Diapolo,2013-10-28T11:28:29Z,"`Fuzz(GetArg(""-fuzzmessagestest"", 0));`?\n",https://github.com/bitcoin/bitcoin/pull/3173#discussion_r7245095,7245095,src/net.h
