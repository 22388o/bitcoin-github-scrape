[
  {
    "sha": "21b8f3db31f05f7756c4291e460544ce0457fd87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWI4ZjNkYjMxZjA1Zjc3NTZjNDI5MWU0NjA1NDRjZTA0NTdmZDg3",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-11-02T21:03:50Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-11-02T21:05:07Z"
      },
      "message": "LockedPool: test handling of invalid allocations\n\n(Currently fails due to bug)",
      "tree": {
        "sha": "cad5ae454a73cd7248d4bf9bdffabc0ed3df18dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cad5ae454a73cd7248d4bf9bdffabc0ed3df18dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21b8f3db31f05f7756c4291e460544ce0457fd87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21b8f3db31f05f7756c4291e460544ce0457fd87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21b8f3db31f05f7756c4291e460544ce0457fd87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21b8f3db31f05f7756c4291e460544ce0457fd87/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a853aececb4780612f4496041630b32168d637cf",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b8f3db31f05f7756c4291e460544ce0457fd87/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b8f3db31f05f7756c4291e460544ce0457fd87/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=21b8f3db31f05f7756c4291e460544ce0457fd87",
        "patch": "@@ -166,6 +166,16 @@ BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)\n     BOOST_CHECK(pool.stats().total == 0);\n     BOOST_CHECK(pool.stats().locked == 0);\n \n+    // Ensure unreasonable requests are refused without allocating anything\n+    void *invalid_toosmall = pool.alloc(0);\n+    BOOST_CHECK(invalid_toosmall == nullptr);\n+    BOOST_CHECK(pool.stats().used == 0);\n+    BOOST_CHECK(pool.stats().free == 0);\n+    void *invalid_toobig = pool.alloc(LockedPool::ARENA_SIZE+1);\n+    BOOST_CHECK(invalid_toobig == nullptr);\n+    BOOST_CHECK(pool.stats().used == 0);\n+    BOOST_CHECK(pool.stats().free == 0);\n+\n     void *a0 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n     BOOST_CHECK(a0);\n     BOOST_CHECK(pool.stats().locked == LockedPool::ARENA_SIZE);"
      }
    ]
  },
  {
    "sha": "0b59f80625923978583efca08f8e763ea1710bb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjU5ZjgwNjI1OTIzOTc4NTgzZWZjYTA4ZjhlNzYzZWExNzEwYmIy",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-11-02T21:11:07Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-11-02T21:41:40Z"
      },
      "message": "LockedPool: fix explosion for illegal-sized alloc\n\nCheck for unreasonable alloc size in LockedPool rather than lancing through new\nArenas until we improbably find one worthy of the quixotic request or the system\ncan support no more Arenas.",
      "tree": {
        "sha": "47f951130b8fc915117a246a97a47697f506f8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47f951130b8fc915117a246a97a47697f506f8df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b59f80625923978583efca08f8e763ea1710bb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b59f80625923978583efca08f8e763ea1710bb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b59f80625923978583efca08f8e763ea1710bb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b59f80625923978583efca08f8e763ea1710bb2/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21b8f3db31f05f7756c4291e460544ce0457fd87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21b8f3db31f05f7756c4291e460544ce0457fd87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21b8f3db31f05f7756c4291e460544ce0457fd87"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "be5aac8227127d5038390d887adab12623bc0fe1",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b59f80625923978583efca08f8e763ea1710bb2/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b59f80625923978583efca08f8e763ea1710bb2/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=0b59f80625923978583efca08f8e763ea1710bb2",
        "patch": "@@ -276,6 +276,11 @@ LockedPool::~LockedPool()\n void* LockedPool::alloc(size_t size)\n {\n     std::lock_guard<std::mutex> lock(mutex);\n+\n+    // Don't handle impossible sizes\n+    if (size == 0 || size > ARENA_SIZE)\n+        return nullptr;\n+\n     // Try allocating from each current arena\n     for (auto &arena: arenas) {\n         void *addr = arena.alloc(size);"
      }
    ]
  },
  {
    "sha": "b3ddc5e76f457d504b05273429e06e684e76f5de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2RkYzVlNzZmNDU3ZDUwNGIwNTI3MzQyOWUwNmU2ODRlNzZmNWRl",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-11-02T21:09:03Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-11-02T23:52:56Z"
      },
      "message": "LockedPool: avoid quadratic-time allocation\n\nUse separate maps for used/free chunks to avoid linear scan through alloced\nchunks for each alloc.",
      "tree": {
        "sha": "3ef7ad8ffc31c9cb49a7bbcf2352aadf89763846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ef7ad8ffc31c9cb49a7bbcf2352aadf89763846"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3ddc5e76f457d504b05273429e06e684e76f5de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ddc5e76f457d504b05273429e06e684e76f5de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ddc5e76f457d504b05273429e06e684e76f5de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ddc5e76f457d504b05273429e06e684e76f5de/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b59f80625923978583efca08f8e763ea1710bb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b59f80625923978583efca08f8e763ea1710bb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b59f80625923978583efca08f8e763ea1710bb2"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 60,
      "deletions": 90
    },
    "files": [
      {
        "sha": "01273c9791727ee079b22e9d2dcfec24c4137c1d",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 66,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ddc5e76f457d504b05273429e06e684e76f5de/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ddc5e76f457d504b05273429e06e684e76f5de/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=b3ddc5e76f457d504b05273429e06e684e76f5de",
        "patch": "@@ -26,6 +26,8 @@\n #include <unistd.h> // for sysconf\n #endif\n \n+#include <algorithm>\n+\n LockedPoolManager* LockedPoolManager::_instance = NULL;\n std::once_flag LockedPoolManager::init_flag;\n \n@@ -45,7 +47,7 @@ Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):\n     base(static_cast<char*>(base_in)), end(static_cast<char*>(base_in) + size_in), alignment(alignment_in)\n {\n     // Start with one free chunk that covers the entire arena\n-    chunks.emplace(base, Chunk(size_in, false));\n+    chunks_free.emplace(base, size_in);\n }\n \n Arena::~Arena()\n@@ -57,24 +59,30 @@ void* Arena::alloc(size_t size)\n     // Round to next multiple of alignment\n     size = align_up(size, alignment);\n \n-    // Don't handle zero-sized chunks, or those bigger than MAX_SIZE\n-    if (size == 0 || size >= Chunk::MAX_SIZE) {\n+    // Don't handle zero-sized chunks\n+    if (size == 0)\n         return nullptr;\n-    }\n \n-    for (auto& chunk: chunks) {\n-        if (!chunk.second.isInUse() && size <= chunk.second.getSize()) {\n-            char* _base = chunk.first;\n-            size_t leftover = chunk.second.getSize() - size;\n-            if (leftover > 0) { // Split chunk\n-                chunks.emplace(_base + size, Chunk(leftover, false));\n-                chunk.second.setSize(size);\n-            }\n-            chunk.second.setInUse(true);\n-            return reinterpret_cast<void*>(_base);\n-        }\n+    // Pick a large enough free-chunk\n+    auto it = std::find_if(chunks_free.begin(), chunks_free.end(),\n+        [=](const std::map<char*, size_t>::value_type& chunk){ return chunk.second >= size; });\n+    if (it == chunks_free.end())\n+        return nullptr;\n+\n+    // Create the used-chunk, taking its space from the end of the free-chunk\n+    auto alloced = chunks_used.emplace(it->first + it->second - size, size).first;\n+    if (!(it->second -= size))\n+        chunks_free.erase(it);\n+    return reinterpret_cast<void*>(alloced->first);\n+}\n+\n+/* extend the Iterator if other begins at its end */\n+template <class Iterator, class Pair> bool extend(Iterator it, const Pair& other) {\n+    if (it->first + it->second == other.first) {\n+        it->second += other.second;\n+        return true;\n     }\n-    return nullptr;\n+    return false;\n }\n \n void Arena::free(void *ptr)\n@@ -83,65 +91,49 @@ void Arena::free(void *ptr)\n     if (ptr == nullptr) {\n         return;\n     }\n-    auto i = chunks.find(static_cast<char*>(ptr));\n-    if (i == chunks.end() || !i->second.isInUse()) {\n-        throw std::runtime_error(\"Arena: invalid or double free\");\n-    }\n \n-    i->second.setInUse(false);\n-\n-    if (i != chunks.begin()) { // Absorb into previous chunk if exists and free\n-        auto prev = i;\n-        --prev;\n-        if (!prev->second.isInUse()) {\n-            // Absorb current chunk size into previous chunk.\n-            prev->second.setSize(prev->second.getSize() + i->second.getSize());\n-            // Erase current chunk. Erasing does not invalidate current\n-            // iterators for a map, except for that pointing to the object\n-            // itself, which will be overwritten in the next statement.\n-            chunks.erase(i);\n-            // From here on, the previous chunk is our current chunk.\n-            i = prev;\n-        }\n-    }\n-    auto next = i;\n-    ++next;\n-    if (next != chunks.end()) { // Absorb next chunk if exists and free\n-        if (!next->second.isInUse()) {\n-            // Absurb next chunk size into current chunk\n-            i->second.setSize(i->second.getSize() + next->second.getSize());\n-            // Erase next chunk.\n-            chunks.erase(next);\n-        }\n+    // Remove chunk from used map\n+    auto i = chunks_used.find(static_cast<char*>(ptr));\n+    if (i == chunks_used.end()) {\n+        throw std::runtime_error(\"Arena: invalid or double free\");\n     }\n+    auto freed = *i;\n+    chunks_used.erase(i);\n+\n+    // Add space to free map, coalescing contiguous chunks\n+    auto next = chunks_free.upper_bound(freed.first);\n+    auto prev = (next == chunks_free.begin()) ? chunks_free.end() : std::prev(next);\n+    if (prev == chunks_free.end() || !extend(prev, freed))\n+        prev = chunks_free.emplace_hint(next, freed);\n+    if (next != chunks_free.end() && extend(prev, *next))\n+        chunks_free.erase(next);\n }\n \n Arena::Stats Arena::stats() const\n {\n-    Arena::Stats r;\n-    r.used = r.free = r.total = r.chunks_used = r.chunks_free = 0;\n-    for (const auto& chunk: chunks) {\n-        if (chunk.second.isInUse()) {\n-            r.used += chunk.second.getSize();\n-            r.chunks_used += 1;\n-        } else {\n-            r.free += chunk.second.getSize();\n-            r.chunks_free += 1;\n-        }\n-        r.total += chunk.second.getSize();\n-    }\n+    Arena::Stats r{ 0, 0, 0, chunks_used.size(), chunks_free.size() };\n+    for (const auto& chunk: chunks_used)\n+        r.used += chunk.second;\n+    for (const auto& chunk: chunks_free)\n+        r.free += chunk.second;\n+    r.total = r.used + r.free;\n     return r;\n }\n \n #ifdef ARENA_DEBUG\n+void printchunk(char* base, size_t sz, bool used) {\n+    std::cout <<\n+        \"0x\" << std::hex << std::setw(16) << std::setfill('0') << base <<\n+        \" 0x\" << std::hex << std::setw(16) << std::setfill('0') << sz <<\n+        \" 0x\" << used << std::endl;\n+}\n void Arena::walk() const\n {\n-    for (const auto& chunk: chunks) {\n-        std::cout <<\n-            \"0x\" << std::hex << std::setw(16) << std::setfill('0') << chunk.first <<\n-            \" 0x\" << std::hex << std::setw(16) << std::setfill('0') << chunk.second.getSize() <<\n-            \" 0x\" << chunk.second.isInUse() << std::endl;\n-    }\n+    for (const auto& chunk: chunks_used)\n+        printchunk(chunk.first, chunk.second, true);\n+    std::cout << std::endl;\n+    for (const auto& chunk: chunks_free)\n+        printchunk(chunk.first, chunk.second, false);\n     std::cout << std::endl;\n }\n #endif\n@@ -312,9 +304,7 @@ void LockedPool::free(void *ptr)\n LockedPool::Stats LockedPool::stats() const\n {\n     std::lock_guard<std::mutex> lock(mutex);\n-    LockedPool::Stats r;\n-    r.used = r.free = r.total = r.chunks_used = r.chunks_free = 0;\n-    r.locked = cumulative_bytes_locked;\n+    LockedPool::Stats r{0, 0, 0, cumulative_bytes_locked, 0, 0};\n     for (const auto &arena: arenas) {\n         Arena::Stats i = arena.stats();\n         r.used += i.used;"
      },
      {
        "sha": "3403415436cc24b0b95e1967f0376c69fbc0e092",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 22,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ddc5e76f457d504b05273429e06e684e76f5de/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ddc5e76f457d504b05273429e06e684e76f5de/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=b3ddc5e76f457d504b05273429e06e684e76f5de",
        "patch": "@@ -50,27 +50,6 @@ class Arena\n     Arena(void *base, size_t size, size_t alignment);\n     virtual ~Arena();\n \n-    /** A chunk of memory.\n-     */\n-    struct Chunk\n-    {\n-        /** Most significant bit of size_t. This is used to mark\n-         * in-usedness of chunk.\n-         */\n-        const static size_t SIZE_MSB = 1LLU << ((sizeof(size_t)*8)-1);\n-        /** Maximum size of a chunk */\n-        const static size_t MAX_SIZE = SIZE_MSB - 1;\n-\n-        Chunk(size_t size_in, bool used_in):\n-            size(size_in | (used_in ? SIZE_MSB : 0)) {}\n-\n-        bool isInUse() const { return size & SIZE_MSB; }\n-        void setInUse(bool used_in) { size = (size & ~SIZE_MSB) | (used_in ? SIZE_MSB : 0); }\n-        size_t getSize() const { return size & ~SIZE_MSB; }\n-        void setSize(size_t size_in) { size = (size & SIZE_MSB) | size_in; }\n-    private:\n-        size_t size;\n-    };\n     /** Memory statistics. */\n     struct Stats\n     {\n@@ -112,7 +91,8 @@ class Arena\n     /** Map of chunk address to chunk information. This class makes use of the\n      * sorted order to merge previous and next chunks during deallocation.\n      */\n-    std::map<char*, Chunk> chunks;\n+    std::map<char*, size_t> chunks_free;\n+    std::map<char*, size_t> chunks_used;\n     /** Base address of arena */\n     char* base;\n     /** End address of arena */"
      },
      {
        "sha": "77e9df5d828be2b8f8ea40de87304dbffbfd6d79",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ddc5e76f457d504b05273429e06e684e76f5de/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ddc5e76f457d504b05273429e06e684e76f5de/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=b3ddc5e76f457d504b05273429e06e684e76f5de",
        "patch": "@@ -39,7 +39,6 @@ BOOST_AUTO_TEST_CASE(arena_tests)\n     }\n \n     void *a0 = b.alloc(128);\n-    BOOST_CHECK(a0 == synth_base); // first allocation must start at beginning\n     void *a1 = b.alloc(256);\n     void *a2 = b.alloc(512);\n     BOOST_CHECK(b.stats().used == 896);\n@@ -63,8 +62,10 @@ BOOST_AUTO_TEST_CASE(arena_tests)\n     BOOST_CHECK(b.stats().used == 128);\n     b.free(a3);\n     BOOST_CHECK(b.stats().used == 0);\n+    BOOST_CHECK_EQUAL(b.stats().chunks_used, 0);\n     BOOST_CHECK(b.stats().total == synth_size);\n     BOOST_CHECK(b.stats().free == synth_size);\n+    BOOST_CHECK_EQUAL(b.stats().chunks_free, 1);\n \n     std::vector<void*> addr;\n     BOOST_CHECK(b.alloc(0) == nullptr); // allocating 0 always returns nullptr\n@@ -74,7 +75,6 @@ BOOST_AUTO_TEST_CASE(arena_tests)\n     // Sweeping allocate all memory\n     for (int x=0; x<1024; ++x)\n         addr.push_back(b.alloc(1024));\n-    BOOST_CHECK(addr[0] == synth_base); // first allocation must start at beginning\n     BOOST_CHECK(b.stats().free == 0);\n     BOOST_CHECK(b.alloc(1024) == nullptr); // memory is full, this must return nullptr\n     BOOST_CHECK(b.alloc(0) == nullptr);"
      }
    ]
  }
]