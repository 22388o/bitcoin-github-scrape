[
  {
    "sha": "c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzcxNzBmYmRiZGZjZDJiYTgzMGExNzU1NDUwYTJlNTQ2OWY0ZTM1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-19T15:05:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-12T18:59:21Z"
      },
      "message": "[Wallet] add rescanblockchain <start_height> <stop_height> RPC command",
      "tree": {
        "sha": "fca101eb24308c9f68f7cf629e3263dff6015fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fca101eb24308c9f68f7cf629e3263dff6015fae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnfu4oACgkQHrd2uwPH\nki1o9g/+Kob6Si/uvcexRSfLGRyoOtSwjq6uWt2HUBIbZ9TwdHbmaTuMgbt1aKXy\nSaRJeNhMSgYEdA6O8XTrNXV9Ru4ihMGm/aT3tPH03LB08U/ObHTQMTI9uJzlhDNW\nCIg0JFBYoXzz8rZP8C6Vgg5CZN6Z30eHkG5q5ANQ+YNG6LscU4BokpXkjT9G0Mle\nrsLjtj/bWxrnyRAf0fKU61zVCLODESQ4kVFWFAz01KeGYacO5bHJId1kBQKXePDi\nZ2vs0BPYNaoOtfz3phN9rXqaSRhPDbup3LOBcM8Fn9aT0hK4qRS/dU5wZX6J5vHm\n9wL8rF8AYYG3BQm0Je7S7wL/FJHiSTFHeenIOmgetJABqmx+nkxOKCTepta6UvUf\nI4Olqw8tMF3DPUCVbbShkYrzkr+2/sv3lO08ltLoDcKJn0Ae0wgsPvXm4pMXqTHa\nJUcf/y64v5id3VI4bnv9tKnS1h/hJ5/3vOL/96NEjygu8/L5CHff1X3lzKQ0o0O7\nYCDt8KoKgCdK9Z0t5LDrvIPIaIJLJdnbIinMPaBBYg3CV2LGwsnMY1PUkly/Poua\n0aFjpgMPxLgA6Ip9lAUXeP4d47IdhO29mt2uG4heMf7zI0zawIVhCrUIPLqVmdGi\nnPNsOjouBYcIivM08KVpS/xYHWxKBUJ6ko1K2q/CO5pNcajhNY8=\n=4cdt\n-----END PGP SIGNATURE-----",
        "payload": "tree fca101eb24308c9f68f7cf629e3263dff6015fae\nparent 777519bd96f68c18150a0f5942f8f97a91937f5e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1447945537 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507834761 -0700\n\n[Wallet] add rescanblockchain <start_height> <stop_height> RPC command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "777519bd96f68c18150a0f5942f8f97a91937f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/777519bd96f68c18150a0f5942f8f97a91937f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/777519bd96f68c18150a0f5942f8f97a91937f5e"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 97,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ebd9102f84b5a57e40b88ffbd525f6b0e275099d",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -157,7 +157,7 @@ void TestSendCoins()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), true);\n+    wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "d471cef0799aa9c46642418247f8150def56c3c2",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -140,6 +140,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"echojson\", 7, \"arg7\" },\n     { \"echojson\", 8, \"arg8\" },\n     { \"echojson\", 9, \"arg9\" },\n+    { \"rescanblockchain\", 0, \"start_height\"},\n+    { \"rescanblockchain\", 1, \"stop_height\"},\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "09075c6e9429362cb14d90de27364a4b951cfa2f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -3169,6 +3169,81 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue rescanblockchain(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"rescanblockchain (\\\"start_height\\\") (\\\"stop_height\\\")\\n\"\n+            \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start_height\\\"    (numeric, optional) block height where the rescan should start\\n\"\n+            \"2. \\\"stop_height\\\"     (numeric, optional) the last block height that should be scanned\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"start_height\\\"     (numeric) The block height where the rescan has started. If omitted, rescan started from the genesis block.\\n\"\n+            \"  \\\"stop_height\\\"      (numeric) The height of the last rescanned block. If omitted, rescan stopped at the chain tip.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n+            + HelpExampleRpc(\"rescanblockchain\", \"100000 120000\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBlockIndex *pindexStart = chainActive.Genesis();\n+    CBlockIndex *pindexStop = nullptr;\n+    if (!request.params[0].isNull()) {\n+        pindexStart = chainActive[request.params[0].get_int()];\n+        if (!pindexStart) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n+        }\n+    }\n+\n+    if (!request.params[1].isNull()) {\n+        pindexStop = chainActive[request.params[1].get_int()];\n+        if (!pindexStop) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+        }\n+        else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater then start_height\");\n+        }\n+    }\n+\n+    // We can't rescan beyond non-pruned blocks, stop and throw an error\n+    if (fPruneMode) {\n+        CBlockIndex *block = pindexStop ? pindexStop : chainActive.Tip();\n+        while (block && block->nHeight >= pindexStart->nHeight) {\n+            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+            }\n+            block = block->pprev;\n+        }\n+    }\n+\n+    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, true);\n+    if (!stopBlock) {\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n+        }\n+        // if we got a nullptr returned, ScanForWalletTransactions did rescan up to the requested stopindex\n+        stopBlock = pindexStop ? pindexStop : chainActive.Tip();\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n+    }\n+\n+    UniValue response(UniValue::VOBJ);\n+    response.pushKV(\"start_height\", pindexStart->nHeight);\n+    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    return response;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3179,6 +3254,7 @@ extern UniValue importwallet(const JSONRPCRequest& request);\n extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n extern UniValue importmulti(const JSONRPCRequest& request);\n+extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           argNames\n@@ -3233,6 +3309,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n \n     { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n };"
      },
      {
        "sha": "2b12168c65c02976b0d2bf19419987580c0b3550",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -386,7 +386,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -399,7 +399,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -604,7 +604,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n-        wallet->ScanForWalletTransactions(chainActive.Genesis());\n+        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "efa93e6384551c615f78fda0a650460f3640ece8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -1539,7 +1539,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, update);\n         if (failedBlock) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n@@ -1555,12 +1555,19 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n+ *\n+ * If pindexStop is not a nullptr, the scan will stop at the block-index\n+ * defined by pindexStop\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n+    if (pindexStop) {\n+        assert(pindexStop->nHeight >= pindexStart->nHeight);\n+    }\n+\n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = nullptr;\n     {\n@@ -1588,6 +1595,9 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             } else {\n                 ret = pindex;\n             }\n+            if (pindex == pindexStop) {\n+                break;\n+            }\n             pindex = chainActive.Next(pindex);\n         }\n         if (pindex && fAbortRescan) {\n@@ -3903,7 +3913,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n \n         nStart = GetTimeMillis();\n-        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n+        walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n         walletInstance->dbw->IncrementUpdateCounter();"
      },
      {
        "sha": "3995f55635b6a1868717a67491d22efb94818947",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77170fbdbdfcd2ba830a1755450a2e5469f4e35/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "patch": "@@ -919,7 +919,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!"
      }
    ]
  },
  {
    "sha": "7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTkxY2ViNWUwYzlkMjlkZGRmN2I2YWU0Y2JiYTgwMmI3OTA5MjRj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-06T00:37:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-12T18:59:39Z"
      },
      "message": "[QA] Add RPC based rescan test",
      "tree": {
        "sha": "0e45d21b0dcc0a84cf1241e4a75ac80045e3b1af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e45d21b0dcc0a84cf1241e4a75ac80045e3b1af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnfu5sACgkQHrd2uwPH\nki1gCBAAofJa8XSD2YfSZK03Qdc54AVKxoe5iK3IQgNCYtc44OZZGAIug4HHicSD\npHBc4IXcCZkDNI18vC9UscTEqu+0kie5fmuLcFzQRBptw/n6G7gquFau8lNiEPc+\nuGLzp5dn9iJ1pw+gHT2wSzXE9Zxa7y3j7LVaqtGG5KEWY2oWke2PDExclJCjq1Co\n+1NV6fgWwafbehm3SijlQBAjQR8uNCxFsE6lwaq0BGxfsPDG7kZ/XgJjECOGdi9g\nxcnok7RySmHSI/4eVOZDrrStzU053Vuj0Ez847W9txLcC/zwyNYzV/7wOdrAP571\n6Uo+QOCna5pRARsbiPz9VDyhJsiRxKZkDKXJjmfvOopZQK9cH1c2lthgzvlW8t5p\nU5fUmpPAZxxPpX+2VQ4K37F3Mvv+wxB0qMpkv15nuTa8an7FAcEv+UdJlSed6MUQ\ndgqixNDM8hZIbfayc+gtZP9U2VStL0fpEqsuGYjUlvRCYUI9hDB8lgH5GSnuu5Pe\nqEqce3D35rKvMQhN20/OmfHC0DNj0OQAP9QJUM2Hv2HNCMCzJu/nyL7RC87SeZLG\nNZe/GaR8CkTUXDnuy50O+CxzlxFvuuHO+Jb999IpoqKDiggg4MAW6xot3xz6qeu7\n7SViOgL5s7qtojuzPFHoqkxcm/RU0XRH9L9/HoHY+pbDt7hpy60=\n=K5oQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e45d21b0dcc0a84cf1241e4a75ac80045e3b1af\nparent c77170fbdbdfcd2ba830a1755450a2e5469f4e35\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1504658256 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507834779 -0700\n\n[QA] Add RPC based rescan test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77170fbdbdfcd2ba830a1755450a2e5469f4e35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c77170fbdbdfcd2ba830a1755450a2e5469f4e35"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 20,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fc5eb190a71a1c4a639973a0df190a0bf684e657",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c",
        "patch": "@@ -10,6 +10,7 @@\n     connect_nodes_bi,\n )\n import shutil\n+import os\n \n class WalletHDTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -70,9 +71,9 @@ def run_test (self):\n         self.stop_node(1)\n         # we need to delete the complete regtest directory\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n-        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n-        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n-        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -91,6 +92,22 @@ def run_test (self):\n         self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n+        # Try a RPC based rescan\n+        self.stop_node(1)\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n+        shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        self.start_node(1, extra_args=self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+        out = self.nodes[1].rescanblockchain(0, 1)\n+        assert_equal(out['start_height'], 0)\n+        assert_equal(out['stop_height'], 1)\n+        out = self.nodes[1].rescanblockchain()\n+        assert_equal(out['start_height'], 0)\n+        assert_equal(out['stop_height'], self.nodes[1].getblockcount())\n+        assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n+\n         # send a tx and make sure its using the internal chain for the changeoutput\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         outs = self.nodes[1].decoderawtransaction(self.nodes[1].gettransaction(txid)['hex'])['vout']"
      }
    ]
  }
]