laanwj,2015-11-19T15:14:02Z,I'd rather have it that the API is such that an explicit rescan is never needed. Wasn't there some work on a multi-import w/ timestamps?\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158085542,158085542,
jonasschnelli,2015-11-19T15:19:50Z,"Yes. There is a PR (see PR description). I agree that it would be better to avoid rescans at all, although it might be complicated to catch all edge-cases and a manual trigger can help in situations where someone needs to deal with multiple/complex imports (you only want to do one rescan).\n\nAnd I think some people will cancel a rescan because they want to do other stuff and/or had not considered",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158087136,158087136,
laanwj,2015-11-19T15:35:28Z,"But manually specifying a block # to rescan from is extremely fragile... it's very easy to get this wrong.\n\nAlso, rescanning doesn't interact with pruning which will be more and more common in the future.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158091775,158091775,
gmaxwell,2015-11-19T20:29:52Z,@lannwj I thought thats part of what  the height parameter here was for-- addressing pruning comparability? \n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158188617,158188617,
petertodd,2015-11-20T22:03:29Z,"How about we call this rescanfromheight instead, to make it possible to add a rescanfromtime later if users demand? Equally, some kind of RPC call that finds the first block with a nTime after a specific time might be useful here.\n\nDo we have a way of querying what block # is the oldest non-pruned block?\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158538274,158538274,
petertodd,2015-11-20T22:04:35Z,"It also occurs to me that for this usecase we might instead want to have pruning not happen automatically, but rather be an  on-demand thing where the user specifies the oldest time they're interested in.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158538629,158538629,
gmaxwell,2015-11-20T22:44:10Z,So the biggest negative I personally see here is that it furthers this misunderstanding that rescan is some thing users generally need to be doing.  Until we added these non-rescan imports a user initiated rescan is something that never should have been needed (and indicated a serious bug we'd like to know about if it was).  As a result of the -rescan argument there is now this whole cargo cult of,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158546941,158546941,
petertodd,2015-11-21T00:07:38Z,"@gmaxwell A possible way around that would be to make the rescan check if you have any addresses that haven't yet been scanned in that range and error out if not. (basically make it say ""no rescan needed"")\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158563727,158563727,
gmaxwell,2015-11-22T22:13:53Z,"Hm. this could also take a stop argument, allowing you to scan single blocks or avoid rescan overlap.  Also, I think all the wallet re-scanning should traverse its interval backwards-- for more instant gratification;  though this would dork with the wallet transaction ordering... actually import at all breaks that, I should go talk to luke-jr about that.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158808001,158808001,
pstratem,2015-11-24T12:17:33Z,agree with gmaxwell that this should scan a range of blocks\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-159250450,159250450,
jonasschnelli,2015-11-24T12:22:58Z,Agree with the stop parameter. Working on a implementation....\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-159251479,159251479,
sipa,2015-11-24T12:29:50Z,I would still prefer an approach that imports with birthdate instead of explicit rescanning.\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-159253995,159253995,
jonasschnelli,2015-11-24T15:42:56Z,"Added a commit that allows providing a optional parameter with a height where the rescan should stop.\n\n@sipa: I agree that rescan height over a key/address birthday would be nice to have (see #6570). But a explicit rescan RPC call can be useful IMO. It's trivial to maintain and it can save lots of rescan-time on the user side. But agree, it has to be considered as ""experts"" feature.\n\nWhat abou",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-159308400,159308400,
promag,2015-11-24T15:57:52Z,@jonasschnelli see https://github.com/bitcoin/bitcoin/pull/6570#issuecomment-132261388 regarding your last comment.\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-159312575,159312575,
GIJensen,2015-12-07T06:49:13Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-162427791,162427791,
mrbandrews,2016-03-14T17:59:20Z,"If this is still moving forward - I tested it a bit (including pruned mode) and it looks fine to me.  One suggestion is to make the start-height a required parameter so that the user specifies ""rescanblockchain 1"" to scan from genesis.  If the start-height is < 1 or higher than current height, throw an error. \nOtherwise, ACK. \n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-196442879,196442879,
jonasschnelli,2016-07-20T12:58:59Z,"Rebased. \nI think there are still reasons to consider that PR. At the moment, it would really be useful. Even once we have https://github.com/bitcoin/bitcoin/pull/7551 (`importmulti`) it could see use cases for `rescanblockchain`.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-233941291,233941291,
sipa,2016-08-25T12:53:25Z,"This seems better #7984, but I still prefer not furthering the usage of various rescans. We need APIs that don't require users to keep track of the concept of rescanning IMHO.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-242374874,242374874,
jonasschnelli,2016-08-25T12:58:14Z,"I agree. Ideally, there will be no need to rescan. But in practice, rescans are sometimes required (I guess everyone who gave some users support has encountered that). IMO a rpc rescan commend with an optional hight is much more flexible then `-rescan` as a startup argument.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-242376180,242376180,
sipa,2016-08-25T12:59:46Z,"I think we should work on `importmulti` instead (or at least an importprivkey that takes a key birthdate as parameter), not on more ways to rescan.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-242376669,242376669,
jonasschnelli,2016-08-25T13:00:33Z,"> I think we should work on importmulti instead (or at least an importprivkey that takes a key birthdate as parameter), not on more ways to rescan.\n\nYes. I can agree with that.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-242376919,242376919,
jonasschnelli,2016-09-14T09:29:42Z,Another thing where this could be useful is restoring hd wallets\n,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-246957074,246957074,
MarcoFalke,2016-10-29T23:53:04Z,"Since importmulti  #7551  is merged, some use cases are covered by that.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-257122914,257122914,
laanwj,2016-11-02T14:14:53Z,"> I think we should work on importmulti instead (or at least an importprivkey that takes a key birthdate as parameter), not on more ways to rescan.\n\nTend to agree. Closing this for now.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-257876663,257876663,
jonasschnelli,2016-12-22T20:11:30Z,"IMO something like that would be very handy if you rescan a HD wallet (old backup).\n-rescan does not allow direct user feedback\nIMO rescanning an old HD backup should by default start at the height where we introduces HD (optional down to genesis).",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-268880725,268880725,
jonasschnelli,2017-05-24T12:40:20Z,"Reopened and overhauled.\n~~This now does replace the `-rescan` startup argument with a new RPC call `rescanblockchain`. The reasons for that are:~~\n* You can define the start and end-height\n* It can be called during runtime\n* It can work in multiwallet environment\n\nUsing `-rescan` will cancel the startup with an error referring to the new RPC call.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-303711520,303711520,
TheBlueMatt,2017-07-11T17:41:22Z,"This needs rebase (probably just wait till after 15 at this point). I think outstanding objections to the idea have all largely been removed, Concept ACK from me, at least.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-314519092,314519092,
jonasschnelli,2017-07-21T07:54:44Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-316931853,316931853,
promag,2017-07-27T21:37:22Z,If #10941 goes first then the test can be extended to do a `rescanblockchain` and assert the notified blocks.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-318493700,318493700,
luke-jr,2017-08-11T18:52:56Z,Rebased and addressed @ryanofsky 's comments on my `rpc_rescan` branch.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-321891792,321891792,
jonasschnelli,2017-08-11T19:14:14Z,"Cherry picked @luke-jr rebased / overhauled version.\nStill needs an RPC test.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-321896323,321896323,
jonasschnelli,2017-09-06T00:39:53Z,"Rebased and overhauled.\nThis no longer evicts the startup `-rescan` option.\nAlso added a RPC test.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-327341485,327341485,
luke-jr,2017-09-13T15:19:29Z,Also not sure `rpcdump.cpp` makes sense for this one.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-329201946,329201946,
jonasschnelli,2017-09-16T04:51:53Z,"Addresses @jnewbery's points.\nAgree with @luke-jr that it should be in `rpcwallet` and not in `rpcdump` (moved it there).",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-329945733,329945733,
jonasschnelli,2017-10-01T04:34:14Z,Adressed @kallewoof's points.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-333352794,333352794,
jonasschnelli,2017-10-04T03:34:22Z,Fixed @jnewbery and @promag's nits.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334041199,334041199,
jnewbery,2017-10-04T14:15:21Z,"Looks good. One style nit, but ACK bdae58ebcd274629bc57f790ef3e1c9e13e1c91f with or without.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334169514,334169514,
jonasschnelli,2017-10-04T17:31:38Z,@JeremyRubin the current implementation does scan the block defined with the `stop_height` parameter. I'll update the parameter documentation to make this more clear.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334230644,334230644,
jonasschnelli,2017-10-04T17:55:26Z,"I think the range handling is correct but change the RPC help to ` \""stop_height\""     (number, optional) the last block height that should be scanned`.\n\nReverted the conditional ?: op abbreviation due to the fact that this requires a GNU extension. \n\nThe fix for the misleading return value of ScanForWalletTransaction and comment (#11450) should be handled outside of this PR.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334238263,334238263,
JeremyRubin,2017-10-04T20:07:54Z,"Also, more generally, it seems we could fail to scan many blocks in the range and still return that we scanned the range.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334274047,334274047,
jonasschnelli,2017-10-04T20:15:12Z,"@JeremyRubin: Why do you think `rescanblockchain { start_height: 10, stop_height: 20 }` would not scan block at height 20? I just re-checked, re-tested and it looks like it does scan block 20.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334275917,334275917,
jonasschnelli,2017-10-04T20:59:13Z,"I understand @JeremyRubin concern now. It's about corrupted blocks (when `ReadBlockFromDisk` fails). The current startup `-rescans` do sort of tolerate this.\n\nAdded a fix that now leads to an error thrown when detecting a corrupted block (https://github.com/bitcoin/bitcoin/pull/7061/files#diff-df7d84ff2f53fcb2a0dc15a3a51e55ceR3237)",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334287626,334287626,
jtimon,2017-10-05T02:22:37Z,"Concept ACK.\nThis seem like moving in the right direction, even if in the long term we want to avoid the need for rescans completely.\n\n> This now does replace the -rescan startup argument with a new RPC call rescanblockchain.\n\nI don't see this in the code. Shouldn't we at least deprecate the startup argument at the same time? (I would not oppose to directly remove it as an exception to t",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334340947,334340947,
jonasschnelli,2017-10-05T03:26:02Z,">> This now does replace the -rescan startup argument with a new RPC call rescanblockchain.\n\n> I don't see this in the code. Shouldn't we at least deprecate the startup argument at the same time? (I would not oppose to directly remove it as an exception to the general policy instead of waiting for 0.17).\nPerhaps note in the release notes that this is also supposed to be temporary.\n\nThis ",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334348632,334348632,
promag,2017-10-05T09:17:55Z,"IMO this is ready to merge even though there are some concerns that need to be addressed in follow ups:\n - Rescan continues even if a corrupted block is detected but the RPC *fails* to the caller;\n - `rescanblockchain` can be refactored a little to avoid the cs_main and cs_wallet locks;\n\nI also would like to discuss the option to make this RPC asynchronous so the caller doesn't wait for th",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334408563,334408563,
meshcollider,2017-10-05T09:44:25Z,re-utACK https://github.com/bitcoin/bitcoin/pull/7061/commits/559542a57bfd4bd37c2f9d8397ec62aef32b67e5 modulo comments above,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-334414959,334414959,
jonasschnelli,2017-10-09T19:51:28Z,Fixed @MeshCollider nits.,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-335267872,335267872,
JeremyRubin,2017-10-09T22:07:44Z,"I still think it's worth it to handle \n\n1.    Invalid Start Height: no negative heights\n1.    Invalid Stop Height: No negative heights\n\nand \n\n1.    Invalid Start Height: Beyond what's been synced\n1.    Invalid Stop Height: Beyond what's been synced\n\ndifferently. Specifically, the latter calls could still be handled and processed.\n",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-335303671,335303671,
jnewbery,2017-10-10T14:19:59Z,"Tested ACK 35e7fd1147c64a286f778c7740fa735a16d448c5\n\n> I still think it's worth it to handle ... differently.\n\nThese already fail with `Invalid start_height` and `Invalid stop_height`. Yes, we can always provide more detailed error messages or logging, but lets not hold this PR up on that. It's already been very heavily reviewed.\n\nI'll happily review follow-up PRs if you want to change",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-335488283,335488283,
JeremyRubin,2017-10-12T07:32:16Z,"@jnewbery to be clear\n\n1. I don't think it's fair to say it was heavily reviewed and I'm needlessly holding it up, I found a major bug in the implementation which required a (imo) pretty significant change to the semantics of the return value. \n1. I'm not suggesting a change in error reporting, I am suggesting a functional change to the ranges which are handled by this call. Specifically, I ",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-336045477,336045477,
jnewbery,2017-10-12T12:26:32Z,"@JeremyRubin - sorry if that came off as a personal criticism. That's not what I meant. This PR was re-opened in December last year and has been reviewed by 9 people so far. It's very useful functionality and it'd be great to see it merged. And yes - you did catch a subtle bug in your review which the rest of us missed. Thank you!\n\nre: your suggested change to the interface - if `start_height`",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-336116117,336116117,
jonasschnelli,2017-10-12T19:00:46Z,"Fixed @ryanofsky points with the >= check.\nLets merge this now,... I think the ranges cleanup (if we want to do this) could be PRed by @JeremyRubin after this PR.",https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-336234108,336234108,
ryanofsky,2017-10-12T19:59:16Z,utACK 7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c. Only change since last review was >= fix,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-336248945,336248945,
jnewbery,2017-10-12T20:24:45Z,reACK https://github.com/bitcoin/bitcoin/commit/7a91ceb5e0c9d29dddf7b6ae4cbba802b790924c,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-336255380,336255380,
jnewbery,2017-10-13T23:01:37Z,🎉,https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-336586780,336586780,
promag,2015-11-23T02:07:37Z,Remove?\n,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r45569311,45569311,src/wallet/rpcdump.cpp
jonasschnelli,2015-11-24T12:07:33Z,Oops. A rebase issue. Thanks for point out. Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r45726881,45726881,src/wallet/rpcdump.cpp
promag,2016-05-02T13:17:54Z,Move to while condition?\n,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r61736620,61736620,src/wallet/wallet.cpp
promag,2016-05-02T13:19:21Z,Because it's inclusive?\n,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r61736772,61736772,src/wallet/wallet.cpp
ryanofsky,2017-05-24T14:12:36Z,Maybe still worth mentioning that pruning can get in the way of successfully importing wallet keys & rescanning.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118263426,118263426,src/init.cpp
ryanofsky,2017-05-24T14:19:00Z,Maybe this should take either times or heights like the pruneblockchain RPC: https://github.com/bitcoin/bitcoin/blob/46771514fa86b9a5a0e0af34c1abfa1da22212f7/src/rpc/blockchain.cpp#L838,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118265136,118265136,src/wallet/rpcdump.cpp
ryanofsky,2017-05-24T14:23:07Z,Might be helpful if error message could mention getblockchaininfo RPC for getting pruned height.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118266399,118266399,src/wallet/rpcdump.cpp
ryanofsky,2017-05-24T14:25:38Z,"Style might need to be updated for this code (moving opening brace to same line here, adding missing braces other lines)",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118267108,118267108,src/wallet/rpcdump.cpp
ryanofsky,2017-05-24T14:26:54Z,I think these files are automatically generated from -help output and could be reverted in the PR.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118267466,118267466,doc/man/bitcoind.1
ryanofsky,2017-05-24T14:31:53Z,Is there any advantage to getting rid of the -rescan option if we still have keep all the rescan logic below? Is there a future cleanup or new feature that will be easier to implement with the option gone?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118268885,118268885,src/wallet/wallet.cpp
ryanofsky,2017-05-24T14:41:21Z,"I don't understand what the use-case is for the stop argument. Can you describe a scenario where you would want to provide it? I can see how it might have been desirable before there was an abortrescan RPC to break a big scan up into little scans, but I don't see why you'd want it now.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118271553,118271553,src/wallet/wallet.cpp
jonasschnelli,2017-05-24T15:00:52Z,See the discussion about the stop argument: https://github.com/bitcoin/bitcoin/pull/7061#issuecomment-158808001,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118277276,118277276,src/wallet/wallet.cpp
jonasschnelli,2017-05-24T15:02:58Z,"The `-rescan` option is global while this PR changes it (partially) to per-wallet. Still, -zapwallettx, etc. need to also be moved to per-wallet basis (I don't know how right now).\n\nBut removing the global -rescan option has to be done sooner or later if we want proper multiwallet.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118277881,118277881,src/wallet/wallet.cpp
ryanofsky,2017-05-24T15:18:06Z,"> But removing the global -rescan option has to be done sooner or later if we want proper multiwallet.\n\nDo -zapwallettx, etc also need to be removed to support proper multiwallet?",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118282309,118282309,src/wallet/wallet.cpp
jonasschnelli,2017-05-24T15:40:34Z,IMO Yes. It's pure db utility. Either we move it to RPC or to a new wallet/db tool.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118288711,118288711,src/wallet/wallet.cpp
jnewbery,2017-05-24T16:39:17Z,nit: update function comment to say that the rescan is up to pindexStop if it is non-null,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118303362,118303362,src/wallet/wallet.cpp
jnewbery,2017-05-24T16:40:05Z,"Need to remove more of this comment, so that it just reads:\n\n`// show rescan progress in GUI as dialog`",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118303554,118303554,src/wallet/wallet.cpp
jnewbery,2017-05-24T16:46:10Z,"This is confusing: the if statement requires `!needsRescan`. Shouldn't that be the other way around? If `needsRescan` is true, we should rescan. I think the if statement should be:\n\n```\nif (needsRescan || GetBoolArg(""-salvagewallet"", true) || GetBoolArg(""-zapwallettxes"", true))\n```\n\nre: zapwallet and salvagewallet. I agree that they should be changed to RPCs for multiwallet.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118304972,118304972,src/wallet/wallet.cpp
jnewbery,2017-05-24T16:48:53Z,suggest you change the argument names to `startheight` and `stopheight`. No other rpcs use `-` as word delimiter.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118305625,118305625,src/wallet/rpcdump.cpp
jnewbery,2017-05-24T16:51:00Z,"This should throw an error if the argument isn't a number, rather than continue. It should allow the argument to be Null. I think the if test you need is:\n\n```\nif (request.params.size() > 0 && !request.params[0].isNull()) {\n```",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118306126,118306126,src/wallet/rpcdump.cpp
jnewbery,2017-05-24T17:52:44Z,"This RPC should return a message to the user if it is successful, eg ""Blockchain rescanned from block `<hash>` height `<height>` to block `<hash>` height `<height>`. `<numtx>` transactions added to wallet"". Otherwise it's impossible for the user to know whether the call was successful or not.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118321612,118321612,src/wallet/rpcdump.cpp
jnewbery,2017-05-24T17:53:21Z,should this return an error if heightstop is lower than heightstart? If heightstop is higher than the tip height?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118321814,118321814,src/wallet/rpcdump.cpp
jnewbery,2017-05-24T19:02:09Z,I can't see where `rescanblockchain()` is being called. Am I missing something?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118338421,118338421,src/wallet/db.cpp
jonasschnelli,2017-05-25T06:44:44Z,"It happens outside of this call (somewhere in wallet.cpp). But the comment doesn't say ""It"" calls `rescanblockchain`, it either says ""you"" can call `rescanblockchain()`.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118428024,118428024,src/wallet/db.cpp
jonasschnelli,2017-05-25T06:59:07Z,"No. I don't think so.\nIf that if statement is true, we load the wallet best block which prevents a complete rescan (so it's the opposite).\nSo we only load the wallet best block (== no rescan) if `needsRescan` is false and `-salvagewallet` and `-`-zapwallettxes` have not been set.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118429609,118429609,src/wallet/wallet.cpp
jonasschnelli,2017-05-25T07:00:44Z,But can't it also happens during startup when the GUI will show the progress only in the splash-screen and not in a dialog?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118429802,118429802,src/wallet/wallet.cpp
jonasschnelli,2017-05-25T07:12:30Z,Indeed. Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118431166,118431166,src/wallet/rpcdump.cpp
jonasschnelli,2017-05-25T07:12:36Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118431175,118431175,src/wallet/rpcdump.cpp
jonasschnelli,2017-05-25T07:12:40Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118431186,118431186,src/wallet/rpcdump.cpp
jonasschnelli,2017-05-25T07:12:44Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118431193,118431193,doc/man/bitcoind.1
jonasschnelli,2017-05-25T07:13:16Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118431249,118431249,src/wallet/wallet.cpp
jnewbery,2017-05-25T18:42:27Z,"Yes, you're right.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118555508,118555508,src/wallet/wallet.cpp
jnewbery,2017-05-25T18:53:01Z,"I don't understand. The comment is:\n\n```\n    // Recovery procedure:\n    // move wallet file to wallet.timestamp.bak\n    // Call Salvage with fAggressive=true to\n    // get as much data as possible.\n    // Rewrite salvaged data to fresh wallet file\n    // call rescanblockchain (RPC) so any missing\n    // transactions will be found.\n```\n\nThis function does:\n- move wallet fi",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118558012,118558012,src/wallet/db.cpp
jonasschnelli,2017-05-25T19:24:56Z,Yes. You right. The rescan is not part of the call. But the part that calls CDB::Recover does always call a rescan. But now I got your point. We should refer to `ScanForWalletTransactions()` instead to `rescanblockchain (RPC)`. Right?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118564429,118564429,src/wallet/db.cpp
jnewbery,2017-05-25T19:33:17Z,"sorry, I'm still not seeing it. You say ""the part that calls CDB::Recover does always call a rescan"". Where?",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118566164,118566164,src/wallet/db.cpp
jonasschnelli,2017-05-25T19:36:24Z,It's confusing. But CDB::Recover only gets calls by setting `-salvagewallet` which does set `-rescan`. Maybe I should remove that comment part... I don't know what's best because `-rescan` is currently mentioned there.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118566785,118566785,src/wallet/db.cpp
jnewbery,2017-05-25T20:42:00Z,"ah, makes sense now. Thank you. I wasn't looking in init.cpp, but now I think I see how this fits together. CWallet::Verify() is called first, which calls CWalletDB::Recover() if `-salvagewallet` is set. Later in AppInitMain(), we call CWallet::AppInitMain(), which is where the rescan happens if `-salvagewallet` is set.\n\nPerhaps change the comment to something like:\n\n```\n    // Try to re",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r118579994,118579994,src/wallet/db.cpp
ryanofsky,2017-07-25T15:24:31Z,Size checks can be dropped here and below. params[0] will return a null value if the param is missing.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r129338768,129338768,src/wallet/rpcdump.cpp
ryanofsky,2017-07-25T15:31:09Z,"This should check against pIndexStop too, so error won't trigger unnecessarily in cases where missing blocks are noncontinuous (which can happen with manual pruning). ",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r129340626,129340626,src/wallet/rpcdump.cpp
ryanofsky,2017-07-25T15:38:05Z,"Should at least throw an error this isn't successful (the ScanForWalletTransactions call will return null on success, otherwise a pointer to the last failing block, so this should be pretty easy).",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r129342672,129342672,src/wallet/rpcdump.cpp
ryanofsky,2017-07-25T15:40:07Z,Capitalization of height doesn't match actual param name.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r129343268,129343268,src/wallet/rpcdump.cpp
ryanofsky,2017-07-25T15:44:10Z,Could do what `pruneblockchain` does and allow height to be specified either as a physical height or a time: https://github.com/bitcoin/bitcoin/blob/1caafa6cde3b88d926611771f9b4c06fcc6e0007/src/rpc/blockchain.cpp#L855,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r129344411,129344411,src/wallet/rpcdump.cpp
promag,2017-08-12T02:07:30Z,Remove inner `) (`.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807511,132807511,src/wallet/rpcdump.cpp
promag,2017-08-12T02:11:49Z,"Just `start`?\n\nAlso, if positive then height, if negative then depth relative to tip. Same for `stop`.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807587,132807587,src/wallet/rpcdump.cpp
promag,2017-08-12T02:14:32Z,IMO `if (!request.params[0].isNull())` so that `get_int` throws if invalid value is supplied.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807622,132807622,src/wallet/rpcdump.cpp
promag,2017-08-12T02:14:39Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807623,132807623,src/wallet/rpcdump.cpp
promag,2017-08-12T02:15:30Z,Use `std::swap`?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807639,132807639,src/wallet/rpcdump.cpp
promag,2017-08-12T02:16:08Z,Should be an error instead?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807647,132807647,src/wallet/rpcdump.cpp
promag,2017-08-12T02:19:21Z,"Should not happen, assert instead?",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807700,132807700,src/wallet/wallet.cpp
promag,2017-08-12T02:25:36Z,"Correct me if I'm wrong, but if start has `BLOCK_HAVE_DATA` then the remaining blocks also have, therefore no need to loop?",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807816,132807816,src/wallet/rpcdump.cpp
promag,2017-08-12T02:27:01Z,`pindex_start`?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807841,132807841,src/wallet/rpcdump.cpp
promag,2017-08-12T02:28:25Z,Maybe we should `} else { pindex_stop = chainActive.Tip(); }`?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807866,132807866,src/wallet/rpcdump.cpp
promag,2017-08-12T02:30:41Z,Note that it's inclusive?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807938,132807938,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T10:52:31Z,No... they're both independently optional.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132815641,132815641,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T10:55:21Z,Why?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132815669,132815669,src/wallet/rpcdump.cpp
promag,2017-08-12T10:55:32Z,But without named args that's not possible.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132815673,132815673,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T10:55:59Z,"I think this may be currently true, but perhaps not safe to assume for the future. Unsure.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132815681,132815681,src/wallet/rpcdump.cpp
promag,2017-08-12T10:58:06Z,Why would start be greater than stop? Seems to be a bad call?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132815713,132815713,src/wallet/rpcdump.cpp
promag,2017-08-12T11:00:54Z,Maybe factor out to a CChain function so in the future it's more contained and for now remove the loop?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132815753,132815753,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T11:46:29Z,Yes it is...,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132816455,132816455,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T11:47:39Z,"It doesn't make much less sense to scan backward than to scan forward. We only actually support scanning forward, but the outcome is the same either way.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132816479,132816479,src/wallet/rpcdump.cpp
promag,2017-08-12T13:52:37Z,How?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132818438,132818438,src/wallet/rpcdump.cpp
promag,2017-08-12T13:52:49Z,I see your point :+1:.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132818442,132818442,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T14:03:44Z,JSON `null` is equivalent to omitting a parameter.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132818674,132818674,src/wallet/rpcdump.cpp
promag,2017-08-12T14:09:40Z,"What I mean is that with `bitcoin-cli rescanblockchain 10` `10` will always be `startheight` and to specify only `stopheight` you have to call `bitcoin-cli rescanblockchain null 10`, hence `stopheight` depends on `startheight`.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132818773,132818773,src/wallet/rpcdump.cpp
promag,2017-08-12T14:18:09Z,Could return the scanned range? Then the client can keep the returned `stopheight` to be the next `startheight`.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132818905,132818905,src/wallet/rpcdump.cpp
luke-jr,2017-08-12T15:27:04Z,Not sure what you're getting at. Null is omitted.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132820300,132820300,src/wallet/rpcdump.cpp
promag,2017-08-12T22:23:54Z,"`block->pprev` can be nullptr:\n```\nbitcoind -regtest -prune=1\nbitcoin-cli -regtest rescanblockchain   <- segfault\n```",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132828124,132828124,src/wallet/rpcdump.cpp
jonasschnelli,2017-09-05T23:58:11Z,We loop backwards here which the check is necessary. Or am I wrong?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r137143484,137143484,src/wallet/rpcdump.cpp
jonasschnelli,2017-09-05T23:59:01Z,The stop height can just be a `nullptr` (== scan up to the tip).,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r137143572,137143572,src/wallet/rpcdump.cpp
promag,2017-09-06T00:48:38Z,Something is wrong now because nothing changes the the loop exit conditions.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r137149404,137149404,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:12:04Z,"> if positive then height, if negative then depth relative to tip\n\nIn general we don't like overloading arguments with multiple meanings in this way  (I know - I've tried to do it myself before and got NACKed.\n\nThe argument names should be changed to `start_height` and `stop_height` to follow style guidelines. I know that this PR was opened before the style changes so I won't suggest that ",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138467300,138467300,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:13:16Z,Why not just assign `chainActive.Genesis()` to `pindexStart` when declaring the variable (and then overwrite if `!request.params[0].isNull()`),https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138467588,138467588,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:13:55Z,nit: slight preference to declare this variable immediately above the `if (!request.params[1].isNull())` code block,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138467741,138467741,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:14:45Z,"This should be `RPC_INVALID_PARAMETER`, not `RPC_WALLET_ERROR`",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138467952,138467952,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:14:55Z,"As above, this should be `RPC_INVALID_PARAMETER`, not `RPC_WALLET_ERROR`",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138467989,138467989,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:16:01Z,This should be `RPC_MISC_ERROR`. Trying to scan a pruned block is not an error in the wallet.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138468240,138468240,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:20:01Z,why is this required? The call to `EnsureWalletIsAvailable()` above should ensure that the wallet is available.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138469171,138469171,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:21:04Z,These return fields should be documented in the help text.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138469407,138469407,src/wallet/rpcdump.cpp
jnewbery,2017-09-12T21:23:51Z,It looks like you've updated all the calls to `ScanForWalletTransactions()` to explicitly set `pindexStop` (except in `wallet_tests.cpp`). Why not update `wallet_tests.cpp` and remove the default argument. I think in general it's best to avoid default arguments if possible.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138470085,138470085,src/wallet/wallet.h
jnewbery,2017-09-12T21:38:11Z,"Really, this should use `os.path.join` to construct the path, but I see this pattern is used in other tests, so I don't think you need to change it here.\n\nEven better would be to move these functions to be methods in the `TestNode` class - `remove_block_files()`, `remove_chainstate_files()`, `backup_wallet_file()`, `restore_wallet_file()`, etc.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138473317,138473317,test/functional/wallet-hd.py
jnewbery,2017-09-12T21:40:10Z,"nit: add a space: `(0, 1)`",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138473732,138473732,test/functional/wallet-hd.py
jnewbery,2017-09-12T21:42:47Z,"Perhaps assert that the rescan scanned up to the tip:\n\n`assert_equal(out['stopheight'], self.nodes[1].getblockcount())`\n",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138474251,138474251,test/functional/wallet-hd.py
luke-jr,2017-09-13T15:17:14Z,"If the heights are inverted, they should be flipped. 100..90 is no less rational than 90..100. This was in 79a11731f3, but seems to have disappeared silently in a rebase?",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138651398,138651398,src/wallet/rpcdump.cpp
luke-jr,2017-09-13T15:18:24Z,"I think this was more appropriately positioned after ""removeprunedfunds"" as before. Probably after ""move"" makes the most sense, since it seems to be alphabetised.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138651715,138651715,src/wallet/rpcwallet.cpp
jnewbery,2017-09-13T15:35:57Z,"@luke-jr - do you have a particular use-case for inverting the block heights? If not, I think this is fine as is. We should err towards being more strict in the interface to keep the code simpler.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138657112,138657112,src/wallet/rpcdump.cpp
luke-jr,2017-09-13T16:48:16Z,"Already discussed [here](https://github.com/bitcoin/bitcoin/pull/7061#discussion_r132807647).\n\nThere's no reason to have an arbitrary restriction that doesn't make sense and is undocumented, especially when we can trivially just do the right thing.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138676288,138676288,src/wallet/rpcdump.cpp
jnewbery,2017-09-13T16:55:43Z,"'The right thing' is a value judgement. In my opinion, the right thing is to keep APIs as tightly defined as possible in order to keep code simple and remove corner cases.\n\nOf course, if there's a legitimate use case, we should allow both, but I don't see it.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138678201,138678201,src/wallet/rpcdump.cpp
jonasschnelli,2017-09-16T03:57:16Z,IMO they should be declared / initialised together (for better code readability).,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r139277432,139277432,src/wallet/rpcdump.cpp
jonasschnelli,2017-09-16T04:00:36Z,Makes sense. Will update.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r139277483,139277483,src/wallet/rpcdump.cpp
jonasschnelli,2017-09-16T04:01:02Z,Right... Will remove it. I think this is a rebase issue since the PR is originally from 2015.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r139277489,139277489,src/wallet/rpcdump.cpp
luke-jr,2017-09-16T05:03:05Z,The legitimate use case is to rescan the blockchain... There's no reason why one direction is to be preferred over the other for these arguments.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r139278641,139278641,src/wallet/rpcdump.cpp
kallewoof,2017-09-28T06:48:49Z,μNit: `start_height` since you're calling it that in the help.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r141537719,141537719,src/wallet/rpcwallet.cpp
kallewoof,2017-09-28T06:49:24Z,μNit: `stop_height`,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r141537822,141537822,src/wallet/rpcwallet.cpp
kallewoof,2017-09-28T06:49:56Z,Can be abbreviated to `CBlockIndex *block = pindexStop ?: chainActive.Tip();`,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r141537920,141537920,src/wallet/rpcwallet.cpp
kallewoof,2017-09-28T06:51:02Z,Why not just `while (block && block->nHeight > pindexStart->nHeight) {`?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r141538153,141538153,src/wallet/rpcwallet.cpp
kallewoof,2017-09-28T06:53:09Z,Same as above here; `stopBlock = pindexStop ?: chainActive.Tip();`,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r141538455,141538455,src/wallet/rpcwallet.cpp
kallewoof,2017-09-28T06:55:12Z,`CBlockIndex* pindexStop = nullptr` will let existing code default to current behavior (mostly in the test cases in `wallet/test/wallet_tests.cpp`).,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r141538772,141538772,src/wallet/wallet.h
jonasschnelli,2017-10-01T04:27:17Z,Heh. I had it before but then @jnewbery convinced me to remove it: https://github.com/bitcoin/bitcoin/pull/7061#discussion_r138470085,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142020395,142020395,src/wallet/wallet.h
jonasschnelli,2017-10-01T04:33:47Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142020472,142020472,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-01T04:33:49Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142020475,142020475,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-01T04:33:53Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142020477,142020477,src/wallet/rpcwallet.cpp
kallewoof,2017-10-01T04:48:58Z,I missed this last time: start_height and stop_height here to match the rest.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142020614,142020614,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-01T04:51:57Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142020651,142020651,src/wallet/rpcwallet.cpp
promag,2017-10-01T21:56:43Z,"Nit, remove space before `:`.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142041726,142041726,src/wallet/rpcwallet.cpp
jnewbery,2017-10-02T17:16:08Z,"nit: add ""If omitted, rescan starts from the genesis block.""",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142199778,142199778,src/wallet/rpcwallet.cpp
jnewbery,2017-10-02T17:16:21Z,"nit: add ""If omitted, rescan stops at the chain tip.""",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142199837,142199837,src/wallet/rpcwallet.cpp
jnewbery,2017-10-02T17:25:21Z,"minor bug: sadly, the comment about the return value for `ScanForWalletTransactions()` added in #10208 is incomplete. If `abortrescan` is called during a rescan, then `ScanForWalletTransactions()` will return `nullptr` even if the though scan didn't complete successfully to the tip (or requested `pindexStop` after this PR)\n\nI think the only way to correctly return the status of the rescan woul",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142201886,142201886,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-04T03:34:08Z,Nice catch... added a protection that detects aborted rescans via a check of  `CWallet::IsAbortingRescan()` after `ScanForWalletTransactions()`.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142574886,142574886,src/wallet/rpcwallet.cpp
jnewbery,2017-10-04T14:07:14Z,"Seems like a good pragmatic change. There's a (pathological) race condition where another thread starts a rescan and resets `fAbortRescan` before this RPC returns, but that's extremely unlikely.\n\nI still think it would be nice to have `ScanForWalletTransactions()` give a more meaningful return value that indicates whether the rescan was aborted. The same bug exists in `importmulti` where `Resc",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142680035,142680035,src/wallet/rpcwallet.cpp
jnewbery,2017-10-04T14:09:01Z,"nit: please sort imports :)\n\nand ideally place them in PEP8 ordering (ie standard library before project imports)",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142680569,142680569,test/functional/wallet-hd.py
promag,2017-10-04T14:32:31Z,Join this with next line.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142687923,142687923,src/wallet/rpcwallet.cpp
promag,2017-10-04T14:33:21Z,Avoid this GNU extension (empty operand)?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142688149,142688149,src/wallet/rpcwallet.cpp
promag,2017-10-04T14:38:55Z,"This is wrong, from `ScanForWalletTransactions` doc:\n> Returns null if scan was successful. Otherwise, if a complete rescan was not possible (due to pruning or corruption), returns pointer to the most recent block that could not be scanned.\n\nSo it can return a non `nullptr` but catch transactions further in the chain. It only stops rescanning when `abortrescan` RPC is called.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142689885,142689885,src/wallet/rpcwallet.cpp
promag,2017-10-04T14:42:22Z,Maybe we should add *the most recent block that could not be scanned* to the response.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142690953,142690953,src/wallet/rpcwallet.cpp
promag,2017-10-04T14:43:58Z,"BTW, first time in this source code.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142691453,142691453,src/wallet/rpcwallet.cpp
kallewoof,2017-10-04T15:06:01Z,I did not know a ?: b was a GNU extension. Sorry for bad nit earlier. :(,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142698474,142698474,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:15:42Z,"I think with this (and with the above pindexStart check), I'd like to see these errors differentiate between:\n\n1. Invalid Start Height: no negative heights\n2. Invalid Start Height: Beyond what's been synced\n3. Invalid Stop Height: No negative heights\n4. Invalid Stop Height: Beyond what's been synced\n5. Invalid Range: stop must be greater than start.\n\nAt the very least, 5. should be",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142701411,142701411,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:27:05Z,"There is a race condition for using getblockchaininfo RPC call  if a new block comes in, unless you can pause pruning.\n\nMaybe worth just documenting to retry until there is a pruning pause feature.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142704964,142704964,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:30:13Z,tense error s/start/started,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142705921,142705921,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:30:47Z,"tense error s/stops/stopped\n",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142706080,142706080,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:34:21Z,"If no blocks are re scanned, I don't think this is correct/is confusing.\n\n",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142707070,142707070,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:36:49Z,"According to the ScanForWalletTransactions docs...\n\n    * Returns null if scan was successful. Otherwise, if a complete rescan was not\n    * possible (due to pruning or corruption), returns pointer to the most recent\n    * block that could not be scanned.\n\nSo with the current returned value it should be nHeight-1.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142707790,142707790,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:41:27Z,This is not accurate AFAICT. The block at stop_height is not scanned?,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142709145,142709145,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T15:44:24Z,"Please specify if the scan stops before or after this block.\n\nI think semantically it makes more sense to provide an inclusive range (if I say ""scan blocks 10-20"", not scanning 20 seems confusing). \n\nIf you really want an exclusive range, providing the number of blocks to scan (e.g., ""scan 10 blocks starting at 10"") has better ux, but still worse than inclusive.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142710066,142710066,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-04T17:07:41Z,"It's not correct, right. I think we leave that fix for another PR (not directly related to this PR).",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142732253,142732253,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-04T17:15:08Z,Can happen from the perspective of the function. But maybe not with the current consumption of the function.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142734062,142734062,src/wallet/wallet.cpp
jonasschnelli,2017-10-04T17:33:30Z,AFAIK the block defined with `stop_height` will be scanned.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142738581,142738581,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-04T17:52:09Z,Added case 5.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142743339,142743339,src/wallet/rpcwallet.cpp
jonasschnelli,2017-10-04T17:52:21Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142743393,142743393,src/wallet/rpcwallet.cpp
JeremyRubin,2017-10-04T19:55:31Z,"I think this is clearest to say:\n\n    If pindexStop is not a nullptr, we attempt to scan up to and including pIndexStop.\n\n",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142775855,142775855,src/wallet/wallet.cpp
meshcollider,2017-10-05T09:33:54Z,Typo `corruputed` -> corrupted,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142890670,142890670,src/wallet/rpcwallet.cpp
meshcollider,2017-10-05T09:34:58Z,Or just `default=0`,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142890853,142890853,src/wallet/rpcwallet.cpp
meshcollider,2017-10-05T09:40:24Z,"These quotes look wrong, should both start and stop height be surrounded in the same string? As numbers should they even have quotes around them?\nHelpExampleRpc should also have commas between the arguments I believe\nSmall nit, `number` -> `numeric` in the lines above to be consistent with other calls",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r142891980,142891980,src/wallet/rpcwallet.cpp
meshcollider,2017-10-10T18:13:03Z,"I think the HelpExampleRpc should have a comma between the arguments, i.e. a comma after `100000`\nYeah would be good to get this merged, sorry for yet another nit :)",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r143809855,143809855,src/wallet/rpcwallet.cpp
kallewoof,2017-10-11T01:31:28Z,"Very tiny nit, but every other place *skips* the space between words in argument list. I.e. `{""start_height"",""stop_height""}`.",https://github.com/bitcoin/bitcoin/pull/7061#discussion_r143893655,143893655,src/wallet/rpcwallet.cpp
ryanofsky,2017-10-12T15:43:08Z,Should this be >=? Otherwise it won't check the start block. Maybe add comment if there's a special reason for skipping the start block.,https://github.com/bitcoin/bitcoin/pull/7061#discussion_r144329495,144329495,src/wallet/rpcwallet.cpp
