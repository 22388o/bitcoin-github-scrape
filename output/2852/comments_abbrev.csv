BitcoinPullTester,2013-07-24T07:05:17Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/1b3656d50bda646822fd954714a88dea1528548b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-21467308,21467308,
sipa,2013-08-15T22:00:19Z,"Given that the only work-related RPC output is already measured in difficulty, perhaps use the same unit?\n\nAnother related and useful unit for transactions and blocks, is depth measured in ""equivalent current blocks"", namely the difference between chainwork of the tx/block under consideration and the chainwork of the tip, divided by the chainwork of the tip block.\n",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22733996,22733996,
petertodd,2013-08-16T02:07:23Z,"I used the raw hex value as the units for chainwork so that alt-implementations could use it as a way of double-checking their calculations - right now if you write your own chainwork calculating implementation there isn't a convenient way of ensuring your results match the reference implementation binary form exactly. Having said that other than verbosity I don't mind creating a ""chainwork"" and """,https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22743697,22743697,
luke-jr,2013-08-16T06:27:28Z,"The internal encoding of chainwork isn't relevant to implementations, just the relative measurement...\n",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22749754,22749754,
petertodd,2013-08-16T08:00:13Z,"@luke-jr You're not going to get consensus-level behavior unless you use the same arithmetic as Bitcoin, which uses bigints, so you have no choice but to export an integer; that's exactly what my implementation exports.\n",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22752789,22752789,
luke-jr,2013-08-16T09:23:04Z,"@petertodd You're exporting an integer as a hexified String, rather than a JSON Number, which I think is what @sipa was suggesting.\n",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22756225,22756225,
petertodd,2013-08-16T09:56:22Z,"@luke-jr Right, but the problem there is that JSON numbers are kinda-sorta double-precision floats - matching Javascript semantics - and support for bigints is pretty spotty in libraries.\n\nAlso sipa was talking about making the number in ""difficulty"" units, with has a 2^32 factor, so you'd always wind up with floating point numbers. I haven't worked it out, but I wouldn't be surprised if double-",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22757528,22757528,
luke-jr,2013-08-16T10:02:33Z,Already some libraries have issues with bitcoind's output. I don't think trying to workaround bugs that might or might not exist in other software should be a concern...\n,https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22757755,22757755,
petertodd,2013-08-16T10:06:31Z,"It's not a bug, it's just a limitation of JSON - bigints just aren't standard JSON. Bitcoin internally uses a uint256, so I'm not worried about exporting exactly that even if it's in hex. (like uint256 digests...) Anyway, as I said above:\n\n""Anyone who tries to bikeshed either the name or the format the value is returned in will regret it - I'm warning you.""\n\n...apparently I'm not threatening l",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22757900,22757900,
luke-jr,2013-08-16T10:21:11Z,JSON doesn't place any precision limits on Numbers.\n,https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22758444,22758444,
sipa,2013-08-17T09:06:20Z,@petertodd Do you have an actual use case where the full-precision chainwork is useful?\n,https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22808353,22808353,
petertodd,2013-08-18T00:24:10Z,"@sipa Testing alt-implementations. chainwork is nasty, because subtle arithmetic mistakes in calculating it that only affect low-order bits are easy to not notice if any rounding is done anywhere, yet still can cause an (unlikely) fork. In addition it lets us easily compare different bitcoin versions to make sure we ourselves don't introduce any subtle mistakes.\n",https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22822367,22822367,
sipa,2013-08-18T00:37:37Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-22822485,22822485,
jgarzik,2013-08-25T02:45:47Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2852#issuecomment-23220809,23220809,
