da2ce7,2017-12-24T05:58:20Z,"@fanquake Hello.\n\nWith all the dependencies that are linked in; as I understand zeromq isn't turned on used by default, however it is linked by default.\n\nMy main concern is that in dependencies there is some reflective code that has been designed to compromise Bitcoin Core.  Is this a realistic concern?; how much dew-diligence do we need to audit the history of linked libs to make sure the",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-353767196,353767196,
jonasschnelli,2018-01-04T06:31:32Z,"@da2ce7:\nzmq will be enabled by default if present on the system,... and therefore through ""depends/"" builds (gitian, ""official binaries""), it's enabled.\n\nAFAIK even when zmq has not been enabled via `-zmqpubhashblock` (or similar), the code calls `zmq_init(1);`.\n\nSo... yeah. Unsure.\n \n\nEDIT:\nHowever, this is unrelated to this PR.",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-355208880,355208880,
jonasschnelli,2018-01-05T20:48:46Z,"Linux build failed (haven't checked why exactly).\nhttps://bitcoin.jonasschnelli.ch/build/446",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-355661618,355661618,
jonasschnelli,2018-01-05T20:50:03Z,"`qt/bitcoin-qt: symbol pthread_setname_np from unsupported version GLIBC_2.12`\nSeems to be related to this PR.",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-355661881,355661881,
fanquake,2018-02-16T00:10:10Z,"The issue here is that ZeroMQ started using pthread_set_name_np to name their background threads, see https://github.com/zeromq/libzmq/pull/2367.\n\npthread_set_name_np was introduced in GLIB 2.12, and the max GLIB version allowed by symbol-check.py is [2.11](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/symbol-check.py#L43).\n\nWe are currently using [pthread_set_name_np](ht",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-366105050,366105050,
laanwj,2018-02-22T18:42:05Z,"> Might be time to consider increasing the max allowed GLIB version in symbol-check.py ?\n\nThis is likely going to cause complaints, because it means the binary won't run on some distributions anymore. Not sure what the minimum glibc in commonly used (stable) distributions is, though.\n\nWe could open a separate issue for that.",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-367779254,367779254,
laanwj,2018-03-05T21:05:19Z,utACK 13a399a46,https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-370565242,370565242,
greenaddress,2018-07-17T14:14:10Z,"@fanquake Was the autogen.sh step removal intentional? Seems to break things (I apply this https://github.com/zeromq/libzmq/pull/3140/commits/58d13395ece1fa0dd9b0583d736af4ac342c1267  to libzmq for ndk builds)\n\n",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-405596851,405596851,
theuni,2018-07-17T15:09:24Z,"@greenaddress The autogen.sh is only needed if you're not building from their bootstrapped release tarball. If you're building from some git commit, you'll need to add it back.",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-405617104,405617104,
greenaddress,2018-07-17T15:23:22Z,"@theuni fair enough.  I'm doing a PR to backport a zmq upstream but unmerged patch https://github.com/zeromq/libzmq/pull/3140/commits/58d13395ece1fa0dd9b0583d736af4ac342c1267 \n in (preparing for PR) https://github.com/greenaddress/bitcoin/commits/zmq_clang_depends and it needs autogen.sh otherwise fails with aclocal issues ( https://travis-ci.org/greenaddress/bitcoin/jobs/404902106 )\n\nMore c",https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-405622168,405622168,
greenaddress,2018-07-17T15:34:17Z,@theuni see https://github.com/bitcoin/bitcoin/pull/13689,https://github.com/bitcoin/bitcoin/pull/11986#issuecomment-405626006,405626006,
