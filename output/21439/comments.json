[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800080585",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21439#issuecomment-800080585",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21439",
    "id": 800080585,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDA4MDU4NQ==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T09:00:47Z",
    "updated_at": "2021-03-16T09:00:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800080585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838203184",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21439#issuecomment-838203184",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21439",
    "id": 838203184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODIwMzE4NA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T10:06:49Z",
    "updated_at": "2021-05-11T10:06:49Z",
    "author_association": "MEMBER",
    "body": "Am starting seminars and won't come back to this patch for some time, so up for grabs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838203184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838205617",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21439#issuecomment-838205617",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21439",
    "id": 838205617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODIwNTYxNw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T10:08:35Z",
    "updated_at": "2021-05-11T10:08:35Z",
    "author_association": "MEMBER",
    "body": "Ok, added  \"up for grabs\" label. Looks like this is more involved than expected.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838205617/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595416648",
    "pull_request_review_id": 613566279,
    "id": 595416648,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQxNjY0OA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test -daemon and -daemonwait config arg options.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class DaemonConfigArgsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.usecli = True\n+        self.num_nodes = 5\n+\n+    def test_daemon(self):\n+        self.log.info('Test -daemon config arg options')\n+        self.stop_nodes()\n+\n+        self.log.debug('Test -daemon=0')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"0\"\\n']):\n+            self.start_node(0, extra_args=['-daemon=0'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemon')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemon'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemon=1')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemon=1'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -daemon')\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"\"\\n']):\n+            self.nodes[1].start(extra_args=[\"-daemon\"])\n+        self.nodes[1].wait_until_stopped(timeout=200)\n+\n+        self.log.debug('Test -daemon=\"1\"')\n+        with self.nodes[2].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"1\"\\n']):\n+            self.nodes[2].start(extra_args=[\"-daemon=1\"])\n+        self.nodes[2].wait_until_stopped(timeout=200)\n+\n+    def test_daemonwait(self):\n+        self.log.info('Test -daemonwait config arg options')\n+        self.stop_nodes()\n+\n+        self.log.debug('Test -daemonwait=0')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=\"0\"\\n']):\n+            self.start_node(0, extra_args=['-daemonwait=0'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemonwait')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemonwait'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemonwait=1')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemonwait=1'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -daemonwait')",
    "path": "test/functional/feature_daemon_config_args.py",
    "position": 64,
    "original_position": 64,
    "commit_id": "841eabc325f1d3949e8d1135c4dc063d92e6a182",
    "original_commit_id": "841eabc325f1d3949e8d1135c4dc063d92e6a182",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wonder if we can somehow test the `-daemonwait` functionality here too, that RPC is available and initialized at the time it returns.",
    "created_at": "2021-03-16T18:00:52Z",
    "updated_at": "2021-03-16T18:00:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21439#discussion_r595416648",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21439",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595416648"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21439#discussion_r595416648"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21439"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595416648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 64,
    "original_line": 64,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595424474",
    "pull_request_review_id": 613576483,
    "id": 595424474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQyNDQ3NA==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test -daemon and -daemonwait config arg options.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class DaemonConfigArgsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.usecli = True\n+        self.num_nodes = 5\n+\n+    def test_daemon(self):\n+        self.log.info('Test -daemon config arg options')\n+        self.stop_nodes()\n+\n+        self.log.debug('Test -daemon=0')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"0\"\\n']):\n+            self.start_node(0, extra_args=['-daemon=0'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemon')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemon'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemon=1')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemon=1'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -daemon')\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"\"\\n']):\n+            self.nodes[1].start(extra_args=[\"-daemon\"])\n+        self.nodes[1].wait_until_stopped(timeout=200)\n+\n+        self.log.debug('Test -daemon=\"1\"')\n+        with self.nodes[2].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"1\"\\n']):\n+            self.nodes[2].start(extra_args=[\"-daemon=1\"])\n+        self.nodes[2].wait_until_stopped(timeout=200)\n+\n+    def test_daemonwait(self):\n+        self.log.info('Test -daemonwait config arg options')\n+        self.stop_nodes()\n+\n+        self.log.debug('Test -daemonwait=0')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=\"0\"\\n']):\n+            self.start_node(0, extra_args=['-daemonwait=0'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemonwait')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemonwait'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemonwait=1')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemonwait=1'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -daemonwait')",
    "path": "test/functional/feature_daemon_config_args.py",
    "position": 64,
    "original_position": 64,
    "commit_id": "841eabc325f1d3949e8d1135c4dc063d92e6a182",
    "original_commit_id": "841eabc325f1d3949e8d1135c4dc063d92e6a182",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree. ATM the processes launched by `-daemon` and `-daemonwait` remain alive after the test cleanup, so it looks like the framework needs to be updated to deal with these.",
    "created_at": "2021-03-16T18:11:37Z",
    "updated_at": "2021-03-16T18:11:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21439#discussion_r595424474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21439",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595424474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21439#discussion_r595424474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21439"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595424474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 64,
    "original_line": 64,
    "side": "RIGHT",
    "in_reply_to_id": 595416648
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595430265",
    "pull_request_review_id": 613583728,
    "id": 595430265,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTQzMDI2NQ==",
    "diff_hunk": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test -daemon and -daemonwait config arg options.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class DaemonConfigArgsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.usecli = True\n+        self.num_nodes = 5\n+\n+    def test_daemon(self):\n+        self.log.info('Test -daemon config arg options')\n+        self.stop_nodes()\n+\n+        self.log.debug('Test -daemon=0')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"0\"\\n']):\n+            self.start_node(0, extra_args=['-daemon=0'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemon')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemon'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemon=1')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemon=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemon=1'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -daemon')\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"\"\\n']):\n+            self.nodes[1].start(extra_args=[\"-daemon\"])\n+        self.nodes[1].wait_until_stopped(timeout=200)\n+\n+        self.log.debug('Test -daemon=\"1\"')\n+        with self.nodes[2].assert_debug_log(expected_msgs=['Command-line arg: daemon=\"1\"\\n']):\n+            self.nodes[2].start(extra_args=[\"-daemon=1\"])\n+        self.nodes[2].wait_until_stopped(timeout=200)\n+\n+    def test_daemonwait(self):\n+        self.log.info('Test -daemonwait config arg options')\n+        self.stop_nodes()\n+\n+        self.log.debug('Test -daemonwait=0')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=\"0\"\\n']):\n+            self.start_node(0, extra_args=['-daemonwait=0'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemonwait')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemonwait'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -nodaemonwait=1')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Command-line arg: daemonwait=false\\n']):\n+            self.start_node(0, extra_args=['-nodaemonwait=1'])\n+        self.stop_node(0)\n+\n+        self.log.debug('Test -daemonwait')",
    "path": "test/functional/feature_daemon_config_args.py",
    "position": 64,
    "original_position": 64,
    "commit_id": "841eabc325f1d3949e8d1135c4dc063d92e6a182",
    "original_commit_id": "841eabc325f1d3949e8d1135c4dc063d92e6a182",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree\u2026 Leaking processes is kind of bad.\r\nFWIW, one of my ideas in #21007 was to use `-daemonwait` in the test framework to avoid having to poll until RPC comes up. I'm not sure it's actually useful for that (due to how we handle logging) though.",
    "created_at": "2021-03-16T18:19:33Z",
    "updated_at": "2021-03-16T18:19:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21439#discussion_r595430265",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21439",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595430265"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21439#discussion_r595430265"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21439"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595430265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 64,
    "original_line": 64,
    "side": "RIGHT",
    "in_reply_to_id": 595416648
  }
]