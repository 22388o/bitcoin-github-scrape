practicalswift,2019-04-16T07:04:03Z,"Concept ACK\n\nVery nice!",https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-483537388,483537388,
jonasschnelli,2019-04-16T07:37:12Z,"Concept ACK\nping @theuni ",https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-483546894,483546894,
instagibbs,2019-04-16T17:13:56Z,concept ACK!,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-483764008,483764008,
promag,2019-04-22T10:03:37Z,"Nice, concept ACK.",https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-485382048,485382048,
DrahtBot,2019-05-08T13:44:11Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-490490963,490490963,
dongcarl,2019-05-15T17:02:53Z,Addressed comments,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-492738880,492738880,
ariard,2019-05-16T00:57:54Z,ACK 375d9c8,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-492876230,492876230,
theuni,2019-05-16T16:42:47Z,Concept ACK. Will review.,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-493143897,493143897,
dongcarl,2019-05-22T19:34:53Z,Updated and addressed all concerns.,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-494938234,494938234,
dongcarl,2019-07-15T18:50:28Z,"Addressed all concerns and rebased.\n\nReviewers, you can verify that there were no substantial code changes that would invalidate my comments by invoking:\n\n```sh\ngit log 65526fc8666fef35ef908dbc225f706bef642c7e..origin/master -- src/netbase.{h,cpp}\n```",https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-511524598,511524598,
laanwj,2019-07-15T19:24:49Z,ACK c7f6ce74d3a5cf2a0c5bac20eab1efd997175a72,https://github.com/bitcoin/bitcoin/pull/15824#issuecomment-511536105,511536105,
ariard,2019-04-18T14:10:33Z,"nit: maybe align name params and description comments to ease readability, at least some functions in others parts of code are doing it ",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r276680669,276680669,src/netbase.cpp
ariard,2019-04-18T14:13:16Z,maybe add a TODO to refactored out LookupNumeric by first-corresponding-service Lookup it seems feasible?,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r276681943,276681943,src/netbase.cpp
ariard,2019-04-18T14:15:52Z,"redundancy between param hSocket and the note, maybe in param description stress on with ""has to be in non-blocking mode""",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r276683158,276683158,src/netbase.cpp
ariard,2019-04-18T14:18:20Z,"nit: SetSocketNonBlocking(const SOCKET&, true), bool doesn't imply socket is blocking/non-blocking (and maybe add a TODO to refactor SetSocketNonBlocking without fNonBlocking flag, which seems useless given function name expected semantic)",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r276684265,276684265,src/netbase.cpp
ariard,2019-04-18T14:20:09Z,"nit: maximum to wait for ""readyness"" of any I/O operation?",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r276685084,276685084,src/netbase.cpp
ariard,2019-04-18T14:26:33Z,"^ above, nit: maybe ParseNetwork could get also a little comment on which networks are currently supported due to addr v1, notably diff between tor and onion",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r276687892,276687892,src/netbase.cpp
laanwj,2019-05-01T16:24:35Z,"please don't add TODOs to the comments, especially not for refactors",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r280125977,280125977,src/netbase.cpp
dongcarl,2019-05-15T15:18:47Z,"I wrote `SetSocketNonBlocking(const SOCKET&, bool)` so that Doxygen would render it and auto-link to the correct function if we ever made this function public. The name for `SetSocketNonBlocking` is a little confusing but I think one look at the function declaration/comment is probably enough to clear that up.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284311744,284311744,src/netbase.cpp
dongcarl,2019-05-15T15:53:55Z,"Not sure what exact alignment you mean, but my `netaddress` comments have been aligned like this as well. Lmk!",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284328949,284328949,src/netbase.cpp
dongcarl,2019-05-15T15:59:57Z,Addressed in https://github.com/bitcoin/bitcoin/pull/16029,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284331856,284331856,src/netbase.cpp
dongcarl,2019-05-15T16:01:39Z,Done. Thanks!,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284332657,284332657,src/netbase.cpp
dongcarl,2019-05-15T16:01:46Z,Done. Thanks!,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284332703,284332703,src/netbase.cpp
ariard,2019-05-16T00:53:22Z,"Was thinking something likely to `BroadcastTransaction` in `transaction.h`, but that's a nit, doesn't matter!",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284504838,284504838,src/netbase.cpp
ariard,2019-05-16T00:57:09Z,"Ah okay, need to unset non-blocking socket was removed long time ago in #4869, but maybe there could be an usage of it for future new types of socket..",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r284505400,284505400,src/netbase.cpp
theuni,2019-05-20T17:39:20Z,"Nit: eliminate ""lengthy"" here, as it misrepresents the primary reason for disabling lookups (privacy, not performance).",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285698786,285698786,src/netbase.cpp
theuni,2019-05-20T17:54:32Z,"It occurs to me (because of this helpful new comment) that the addresses that we return for AF_UNSPEC lookups are hugely biased based on the order in which the OS returns them. For example, if the OS always returns ipv4 addresses before ipv6 addresses rather than interleaving, we may hit nMaxSolutions before adding a single ipv6 result.\n\nSimilarly, it could mean that different OSs are biased d",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285704247,285704247,src/netbase.cpp
theuni,2019-05-20T18:04:23Z,"See above comment about ""lengthy"".\n\nEdit: Aha! You got it from the manpages ;)\n```\nThe AI_NUMERICHOST flag suppresses any potentially lengthy network host address lookups.\n```\nWe're more interested in the ""suppresses"" part than the ""lengthy"" part.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285707613,285707613,src/netbase.cpp
sipa,2019-05-20T18:17:26Z,"I think it would be clearer to point out that we treat "".onion"" addresses the same way as we treat IPv4 a.b.c.d or IPv6 hex addresses, with the exception that the standard library resolving function don't support them.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285712343,285712343,src/netbase.cpp
sipa,2019-05-20T18:19:22Z,What note?,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285713045,285713045,src/netbase.cpp
theuni,2019-05-20T18:20:51Z,"""only allow parsing"" is dangerous here, because it strongly implies that only string parsing will be done. Additionally, onion addresses are ""resolved"" and getaddrinfo may still be called with AI_NUMERICHOST.\n\nHow about something more elegant than: ""fAllowLookup Whether or not hostname lookups are permitted. If yes, external queries may be performed.""",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285713584,285713584,src/netbase.cpp
theuni,2019-05-20T18:37:47Z,Is it a socket or a file descriptor? :),https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285719598,285719598,src/netbase.cpp
theuni,2019-05-20T19:03:19Z,"Nit: ""async I/O api (select/poll) synchronously"". Just so nobody goes looking for the missing magic to make this happen in the background.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285728451,285728451,src/netbase.cpp
theuni,2019-05-20T19:31:14Z,"I believe most of this comment is incorrect, or at least very misleading :(.\n\nSetNameProxy makes sure that all resolves are routed through a proxy rather than being done ourselves. No need to bring the higher-level 'getaddr' into it.\n\nMaybe you grepped for HasNameProxy and missed the use of GetNameProxy in ConnectNode()? If so, looking at that may change your understanding somewhat.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285737545,285737545,src/netbase.cpp
dongcarl,2019-05-20T19:38:48Z,"> I think it would be clearer to point out that we treat "".onion"" addresses the same way as we treat IPv4 a.b.c.d or IPv6 hex addresses\n\nNot 100% sure what you mean here, specifically, what is your specific meaning of ""treat the same way""?",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285739868,285739868,src/netbase.cpp
theuni,2019-05-20T19:41:49Z,Maybe @EthanHeilman has some experience with this?,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285740786,285740786,src/netbase.cpp
sipa,2019-05-20T19:57:26Z,"For example ""1.2.3.4"" is a name, but it's one that directly encodes an IP address; no resolving is done when you turn it into a CNetAddr, it's just converted. The same is true for onion addresses; from our perspective, those are not hostnames - they're direct encodings of CNetAddr for onion addresses.\n\nIn contrast, ""sipa.be"" is a hostname that needs network activity to resolve to a CNetAddr.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285745810,285745810,src/netbase.cpp
EthanHeilman,2019-05-20T20:55:49Z,I would have assumed just reading this code that the OS would not impose an order on the addresses returned. However after @theuni's comment I see no reason why that assumption is justified. It seems entirely plausible that the OS or some upstream source would impose an order. Randomizing the order of the linked list would negate all of this.,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285764866,285764866,src/netbase.cpp
theuni,2019-05-20T21:01:21Z,"@EthanHeilman Because AF_UNSPEC actually results in two separate/parallel resolves internally, I would assume that for performance reasons the final list would simply be those two lists concatenated.\n\nEdit: Unless libc's randomize internally to harden against this type of thing.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r285766861,285766861,src/netbase.cpp
EthanHeilman,2019-05-21T18:18:21Z,"@theuni Even if it turns out the OS randomizes the list, that make not hold in the future and/or across OSes. If we expect the lists to be randomized in this code and it seems like we do, we should randomize the lists ourselves. Seems like a neat starter project.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286160778,286160778,src/netbase.cpp
dongcarl,2019-05-21T18:49:04Z,"Having talked to TheBlueMatt about this, the only place we would care would be when loading addresses from seeds. @theuni @EthanHeilman are there specific call-sites you guys are talking about?",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286173176,286173176,src/netbase.cpp
dongcarl,2019-05-22T17:12:05Z,What privacy concerns are there? What call-sites are you talking about?,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286596721,286596721,src/netbase.cpp
sipa,2019-05-22T17:19:53Z,"DNS lookups leak your query to your DNS server (or when done over tor, to the exit node that does the resolving).",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286599634,286599634,src/netbase.cpp
dongcarl,2019-05-22T17:32:03Z,"@sipa If I'm understanding correctly, one such instance is the ""Resolve"" stage of `ConnectNode` where, if we have a name proxy, `Lookup` won't do external queries?",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286604468,286604468,src/netbase.cpp
sipa,2019-05-22T17:35:48Z,"If you set AI_NUMERICHOST then all `getaddrinfo` does is parse the IP address, and return the result immediately without network interaction.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286605924,286605924,src/netbase.cpp
dongcarl,2019-05-22T17:36:38Z,"Okay this might also inform my documentation on `net.cpp` proper. I see that in the ""Resolve"" stage of `ConnectNode`, when we call `Lookup` we are guaranteed a non-external query lookup if we have a name proxy. However, if `pszDest` was a hostname, aforementioned `Lookup` would fail, and we would end up in the `else if (pszDest && GetNameProxy(proxy))` case in the ""Connect"" stage, where we connect",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286606229,286606229,src/netbase.cpp
sipa,2019-05-22T17:39:57Z,"That matches what I remember about this logic. The reason is that if we're using Tor, we don't want to perform DNS lookups ourselves (as those would leak to DNS servers, instead of over the proxy). Instead, we do a name-based connection where we give the name directly as host to connect to the proxy (which in the case of Tor will cause the exit node to do the resolving locally and establish a conn",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286607496,286607496,src/netbase.cpp
dongcarl,2019-05-22T17:42:15Z,"Ah, I thought that was obvious and wanted to explain why we needed `AI_ADDRCONFIG` for the case where `fAllowLookup` was true instead of just giving no flags. I should probably talk about both though.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286608401,286608401,src/netbase.cpp
dongcarl,2019-05-22T17:56:04Z,"~~Perhaps instead of ""external queries"", it's more accurate to say ""hostname lookup""? I'm thinking about the case where it's an entry in the `/etc/hosts` file and that's not external.~~ After a closer reading of your statement, it is accurate :smile: ",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286613952,286613952,src/netbase.cpp
dongcarl,2019-05-22T18:54:22Z,Updated: https://github.com/bitcoin/bitcoin/pull/15824/files#diff-4942713bcd2752bb531bf76c9a0ba38eR71,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286636862,286636862,src/netbase.cpp
dongcarl,2019-05-22T18:54:39Z,Removed!,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286636990,286636990,src/netbase.cpp
dongcarl,2019-05-22T18:55:02Z,Updated: https://github.com/bitcoin/bitcoin/pull/15824/files#diff-4942713bcd2752bb531bf76c9a0ba38eR91,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286637127,286637127,src/netbase.cpp
dongcarl,2019-05-22T18:55:55Z,Updated: https://github.com/bitcoin/bitcoin/pull/15824/files#diff-4942713bcd2752bb531bf76c9a0ba38eR189,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286637564,286637564,src/netbase.cpp
dongcarl,2019-05-22T18:56:45Z,Changed.,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286637875,286637875,src/netbase.cpp
dongcarl,2019-05-22T18:57:00Z,Changed.,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286637962,286637962,src/netbase.cpp
dongcarl,2019-05-22T18:57:20Z,Reworded here: https://github.com/bitcoin/bitcoin/pull/15824/files#diff-4942713bcd2752bb531bf76c9a0ba38eR714,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r286638097,286638097,src/netbase.cpp
laanwj,2019-06-06T14:43:19Z,"Note that no SOCK5 server in common use, most notably Tor, actually implements UDP support. So it'd be kind of pointless to do this.\nThe [Tor socks extension spec](https://github.com/torproject/torspec/blob/master/socks-extensions.txt) does mention a RESOLVE command that they implement that is specific to Tor, this would be a more realistic option.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r291218177,291218177,src/netbase.cpp
EthanHeilman,2019-06-06T15:06:42Z,I was just thinking about it with regard to seeds. Not sure what other features randomization would be important for.,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r291230679,291230679,src/netbase.cpp
dongcarl,2019-06-10T20:49:07Z,"@laanwj Cool, will include. I'm thinking we use `@note` as a place to discuss the design space we've considered and why they don't work so it's recorded somewhere for future developers. Does that good to you? We could also do this somewhere else and reference from `@note`.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r292185442,292185442,src/netbase.cpp
dongcarl,2019-06-12T16:55:00Z,"@EthanHeilman It occurred to me that this doesn't really matter until we decrease the `nMaxIPs` when learning from seeds. Right now it's 256, and no peer returns more than that, so there's no need to shuffle as there's no cut-off. Noted here: https://github.com/bitcoin/bitcoin/issues/16070",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r293018344,293018344,src/netbase.cpp
laanwj,2019-07-15T18:33:33Z,"Yes, sounds good to me, I was just mentioning it to prevent people from going up this road to implement this (reading it as a TODO) only to conclude it's pointless, so it makes sense to mention that.",https://github.com/bitcoin/bitcoin/pull/15824#discussion_r303576446,303576446,src/netbase.cpp
dongcarl,2019-07-15T18:48:43Z,Reworded a little bit to make it more clear this is just a design space comment not a TODO.,https://github.com/bitcoin/bitcoin/pull/15824#discussion_r303582636,303582636,src/netbase.cpp
