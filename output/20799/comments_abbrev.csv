MarcoFalke,2020-12-29 15:16:48,"> Segwit was activated in August 2017, and providing non-witness blocks to peers is no longer useful\n\nI think there may be some edge-case scenarios where a peer skips the download of witnesses because they are never read (due to an assumevalid setting), but that has nothing to do with compact blocks. So:\n\nConcept ACK on removing code that doesn't serve any use case in practice.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-752116855,752116855,
sipa,2020-12-29 18:35:44,"Concept ACK on removing non-witness cmpctblock support. IIRC its only purpose is serving Bitcoin Core v0.13.0 nodes (0.12.x didn't have compact blocks; 0.13.1 added segwit activation parameters).\n\nThe first commit here seems to mix removal of functionality with some refactoring. Is it possible to separate those more cleanly into separate commits?",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-752197637,752197637,
jnewbery,2020-12-29 19:06:41,"> The first commit here seems to mix removal of functionality with some refactoring. Is it possible to separate those more cleanly into separate commits?\n\nYes, I'll see what I can do to split it up a bit more.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-752208058,752208058,
DrahtBot,2020-12-29 20:17:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23127](https://github.com/bitcoin/bitcoin/pull/23127) (tests: Use test framework utils where possible by vincenzopalazzo",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-752227632,752227632,
practicalswift,2020-12-29 20:39:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-752233903,752233903,
jonatack,2021-01-02 11:01:32,"Concept ACK, looks like a good simplification. Worth reviewing the diffs with `-w` in some parts.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-753459870,753459870,
jnewbery,2021-01-02 16:15:55,"Rebased and broken up the first commit.\n\nI've also dropped the last two commits (_Clean up PeerManager::BlockChecked()_ and _Clean up MaybeSetPeerAsAnnouncingHeaderAndIDs()_). There's already enough happening in this PR.\n",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-753492261,753492261,
fjahr,2021-01-23 14:40:30,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-766089490,766089490,
jnewbery,2021-02-03 10:14:16,"Thanks for the review @jonatack @ariard @sipa @MarcoFalke . I think I've addresses all review comments now.\n\nThis PR is probably easier to review if rebased after #21009 is merged. That PR always sets `NODE_WITNESS` in local services, and so removes all the `pfrom->GetLocalServices() & NODE_WITNESS` calls in net_processing.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-772394673,772394673,
dhruv,2021-02-05 20:49:07,"#21009 was split into #21009 and #21090. #21090 now sets `NODE_WITNESS` in local services, and so removes all the `pfrom->GetLocalServices() & NODE_WITNESS` calls in net_processing.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-774280869,774280869,
jnewbery,2021-02-15 12:01:28,"Marking this as draft. It's a smaller and cleaner change once #21090 is merged, so let's wait for that to land first.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-779176581,779176581,
jnewbery,2021-04-27 11:05:48,"I've rebased this on top of #21090. I'll still leave it as draft since we need that PR to be merged first, but this is ready for review if people are interested.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-827522553,827522553,
dhruv,2021-04-29 18:18:21,"Reviewers interested in this PR, might also be interested in #21090 which is now ready for review.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-829483684,829483684,
jnewbery,2021-07-22 17:18:26,"#21090 has been merged, so I've rebased this on master. This is now ready for review.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-885080007,885080007,
naumenkogs,2021-09-28 08:54:24,"ACK ef698b6eb3a684f52cbd2414ffc07893bbf69bbd\n\nThe PR seems ready to get rid of pre-segwit compact blocks, which makes sense now that segwit is used.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-928991600,928991600,
DrahtBot,2021-10-01 06:57:48,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-931960457,931960457,
jnewbery,2021-10-07 13:12:39,rebased on master,https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-937779377,937779377,
jnewbery,2021-10-07 14:18:52,fixed silent merge conflict in p2p_compactblocks_blocksonly.py,https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-937839641,937839641,
jnewbery,2021-11-04 14:44:30,"Thanks for the review @theuni. I believe I've addressed all of your review comments.\n\n> I'm a little hazy on now NODE_WITNESS factors into these changes other than ""one kinda seems to imply the other"".\n\nYou're right. I've removed those changes.\n\nAlso rebased on master.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-961086143,961086143,
theuni,2021-11-04 14:58:30,"> > I'm a little hazy on now NODE_WITNESS factors into these changes other than ""one kinda seems to imply the other"".\n> \n> You're right. I've removed those changes.\n\nThanks. To be clear though, these are seemingly reasonable changes worth evaluating separately. Just not necessary here for dropping v1 support.",https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-961115511,961115511,
jnewbery,2021-11-08 17:25:45,Thanks for the re-review Cory. I've responded to your review comments.,https://github.com/bitcoin/bitcoin/pull/20799#issuecomment-963389577,963389577,
ariard,2020-12-30 00:11:56,"Maybe a static const int CMPCTBLOCK_VERSION? It sounds non-ambiguous, after this PR we only support one version.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r549893599,549893599,src/net_processing.cpp
jnewbery,2020-12-30 14:26:41,Good idea! I'll add.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r550212340,550212340,src/net_processing.cpp
jnewbery,2021-01-02 16:14:38,Done,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r550895939,550895939,src/net_processing.cpp
mzumsande,2021-01-06 00:08:38,nit: typo in 5ca83df9ac1f9f1454ebe7fd93c3b79012df104c (should be fProvidesHeade**rA**ndIDs) here and in two other spots. It is fixed in the next commit but this intermediate one won't compile.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r552274108,552274108,src/net_processing.cpp
jnewbery,2021-01-06 16:49:49,:flushed: Thanks!,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r552799786,552799786,src/net_processing.cpp
jnewbery,2021-01-06 18:45:15,fixed,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r552897452,552897452,src/net_processing.cpp
jonatack,2021-01-25 15:01:38,"652c6f8 in line 136 just above, `preferred_version` no longer exists in this test after this commit; perhaps update that line",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r563790168,563790168,test/functional/p2p_compactblocks.py
jonatack,2021-01-25 15:15:32,"d0f352eb `uint8_t` (range 0-255) would suffice for now?\n\n```text\nBIP152\n====sendcmpct====\n# The sendcmpct message is defined as a message containing a 1-byte integer followed by a 8-byte integer where pchCommand == ""sendcmpct"".\n# The first integer SHALL be interpreted as a boolean (and MUST have a value of either 1 or 0)\n# The second integer SHALL be interpreted as a little-endian ve",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r563801319,563801319,src/net_processing.cpp
jonatack,2021-01-25 15:27:37,"d0f352eb can we avoid locking the mutex (and order dependance on `fHaveWitness` being set) with\n```diff\n- if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION &&\n-     WITH_LOCK(cs_main, {return State(pfrom.GetId())->fHaveWitness;})) {\n+ if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION && (pfrom.nServices & NODE_WITNESS)) {\n```\nor\n```diff\n- if (pfrom.GetCommonVersion() ",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r563811150,563811150,src/net_processing.cpp
jonatack,2021-01-25 15:36:14,"d0f352e if you go with `/* high_bandwidth= */` here, maybe update the remaining 2 lines that use `fAnnounceUsingCMPCTBLOCK`\n\n```diff\n@@ -718,14 +718,14 @@ static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connma\n             // As per BIP152, we only get 3 of our peers to announce\n             // blocks using compact encodings.\n             connman.ForNode(lNode",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r563818143,563818143,src/net_processing.cpp
ariard,2021-01-27 17:52:19,"Constify test value same as `net_processing`, CMPCTBLOCKS_VERSION ?",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565513529,565513529,test/functional/p2p_compactblocks.py
ariard,2021-01-27 21:30:23,Maybe we can rename SHORT_IDS_BLOCK_VERSION to SENDCMPCT_VERSION ? A block of short-txn-ids is better known as a compact block or do we have ambiguity here ?,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565647594,565647594,src/net_processing.cpp
ariard,2021-01-27 21:40:17,"AFAIU this comment tries to hint the double opt-in for CB to be bidirectional, maybe it can be clearer. ""However, we request new block announcements using CMPCTBLOCK only after receiving a SENDCMPCT from peer.""",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565653239,565653239,src/net_processing.cpp
ariard,2021-01-27 21:56:45,"I think we should keep to verify NODE_WITNESS existence among peer services, that's a different network namespace than SENDCMPCT, they might diverge. \n\nI believe that's an oversight compared to ""Specification for version 2"" but at least should avoid to promote a buggy peer as a CB one ?\n\nEdit: reestablished at 06ab570, you should modify 55c9231 message to warn reviewers",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565664781,565664781,src/net_processing.cpp
ariard,2021-01-27 22:53:34,"Current usage of `fProvidersHeaderAndIDs` is confusing to me. \n\nWe latched it to `true` at SENCMPCT reception, following this comment, it does mean this peer has signaled its availability to serve CMPCTBLOCKS.\n\nBut per-BIP152 , ""Upon receipt of a ""sendcmpct"" message with the first and second integers set to 1, the node SHOULD announce new blocks by sending a cmpctblock message."", so a SEND",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565693959,565693959,src/net_processing.cpp
ariard,2021-01-27 22:58:58,"I think this variable should be better named `m_bip152_bandwidth_mode`, right now when it sets to false it means low-bandwidth, which is counter-intuitive given variable name and comment (`src/net.h`, L533).",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565696618,565696618,src/net_processing.cpp
ariard,2021-01-27 23:02:11,"IMO `m_prefercmcpt`  better, otherwise name collusion is too close.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r565698050,565698050,src/net_processing.cpp
jnewbery,2021-02-03 09:09:31,Good catch. Fixed!,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569244269,569244269,test/functional/p2p_compactblocks.py
jnewbery,2021-02-03 09:13:07,"The version field needs to be 8 bytes (uint64_t). If we change this const to a uint8_t, then the message serialized here:\n\n```\n            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, /* high_bandwidth= */ false, /* version= */ CMPCTBLOCKS_VERSION));\n```\n\nwould have a payload size of 2 (1 byte for high_bandwidth, and 1 byte for version). That would fail to be pars",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569246726,569246726,src/net_processing.cpp
sipa,2021-02-03 09:16:53,That's a bit brittle in any case. Perhaps put `uint64_t{CMPCTBLOCKS_VERSION}` there instead?,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569249275,569249275,src/net_processing.cpp
jonatack,2021-02-03 09:24:10,"""followed by a 8-byte integer"" -> I misread, thanks",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569254177,569254177,src/net_processing.cpp
jnewbery,2021-02-03 09:26:41,"> can we avoid locking the mutex\n\nVery nice observation, although I think this is ok for now. We take cs_main when processing almost all messages in net_processing (although I agree with you that it'd be slightly nicer if we didn't have to). In the new code, we're only sending `sendcmpct` if the peer has told us that they support witness serialization. That's indicated by fHaveWitness or pfrom",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569255983,569255983,src/net_processing.cpp
jnewbery,2021-02-03 09:36:11,"or perhaps:\n\n```\n            static_assert(sizeof(CMPCTBLOCKS_VERSION) == sizeof(uint64_t), ""sendcmpct version field must be 8 bytes"");\n            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, /* high_bandwidth= */ false, /* version= */ CMPCTBLOCKS_VERSION));\n```\n\n(why check at runtime what you can test at compile time?)",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569262771,569262771,src/net_processing.cpp
jnewbery,2021-02-03 09:44:40,"> Maybe we can rename SHORT_IDS_BLOCK_VERSION to SENDCMPCT_VERSION\n\nI do have a branch somewhere that does that, but it's out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569268859,569268859,src/net_processing.cpp
jnewbery,2021-02-03 09:48:39,Good suggestion. Done.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569271895,569271895,src/net_processing.cpp
MarcoFalke,2021-02-03 09:50:07,`uint64_t{CMPCTBLOCKS_VERSION}` is a compile time check ;),https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569272914,569272914,src/net_processing.cpp
jnewbery,2021-02-03 09:51:37,"> I do have a branch somewhere that does that, but it's out of scope for this PR.\n\nHere you go: https://github.com/jnewbery/bitcoin/commit/82372335cc3cf8fa238678629dda6a2f465e6005. Feel free to PR that commit if you think it's worth it.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569274044,569274044,src/net_processing.cpp
jnewbery,2021-02-03 09:52:15,I've added the static_assert.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569274427,569274427,src/net_processing.cpp
jnewbery,2021-02-03 09:54:09,I'm not sure if that adds to the readability here. Leaving for now.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569275855,569275855,test/functional/p2p_compactblocks.py
jnewbery,2021-02-03 09:58:23,"This comment is saying that we don't request hb mode from the peer. We only add the peer to one of our three hb peers once it provides us with a block.\n\nIn any case, this comment is unchanged by this PR, so I'm going to leave it.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569279145,569279145,src/net_processing.cpp
jnewbery,2021-02-03 10:01:06,`(pfrom.GetLocalServices() & NODE_WITNESS)` is always true (unless running on regtest with `-segwitheight=-1`). Perhaps this will be clearer after #21009 is merged.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569281077,569281077,src/net_processing.cpp
jnewbery,2021-02-03 10:04:13,"Yes, these parameters are currently confusing (hence this PR to clean them up!)\n\n`fProvidersHeaderAndIDs` is currently used to make sure that the compact blocks version doesn't change after negotiation. If a peer sends `sendcmpct(version=2)`, then any future `sendcmpct` messages where version!=2 have no effect. The peer can change hb mode by sending `sendcmpct(version=2, hb_mode={true|false})`",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569283130,569283130,src/net_processing.cpp
jnewbery,2021-02-03 10:05:21,This is unchanged by this PR. Eventually both of these fields should be moved to the `Peer` structure.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569283877,569283877,src/net_processing.cpp
jnewbery,2021-02-03 10:07:33,"`m_prefercmpct` is not as precise. The peer might 'prefer' to fetch blocks using getdata(CMPCT), which is not what this means. `m_sendcmpct_hb` unambiguously means ""send blocks to this peer using BIP 152 high bandwidth mode"".",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569285463,569285463,src/net_processing.cpp
jnewbery,2021-02-03 10:11:48,"> uint64_t{CMPCTBLOCKS_VERSION} is a compile time check ;)\n\n`uint64_t{CMPCTBLOCKS_VERSION}` initializes a new `uint64_t` from `CMPCTBLOCKS_VERSION` at runtime, no? But I guess the compiler will optimize that away?\n\nIn any case, I've removed the static assert and replaced with `uint64_t{CMPCTBLOCKS_VERSION}`.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r569288431,569288431,src/net_processing.cpp
theuni,2021-11-03 18:04:24,"If I'm reading correctly, I think we want to keep this test but reverse the expected outcome? That way we test that v1 doesn't work anymore as opposed to assuming it doesn't.\n\nDisregard if I'm missing something else that exercises this.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742205681,742205681,test/functional/p2p_compactblocks.py
theuni,2021-11-03 18:15:21,"Agree with @jonatack about taking from `(pfrom.nServices & NODE_WITNESS)` rather than `State(pfrom.GetId())->fHaveWitness;})` just because it's easier to not have to worry about where the latter comes from.\n\nUnderstood that it's moot as it's changing soon anyway, so not a big deal.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742213653,742213653,src/net_processing.cpp
theuni,2021-11-03 18:18:43,"Also, is this a behavioral change? It's not clear to me why the `fHaveWitness` check was added here.\nEdit: Rather, why _wasn't_ it there before?\nEdit2: Ok, so witness data is required now, but this still looks like a new enforcement for v2.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742216163,742216163,src/net_processing.cpp
theuni,2021-11-03 18:27:48,Comment no longer makes sense here.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742222937,742222937,src/net_processing.cpp
theuni,2021-11-03 18:44:25,"According to BIP144, `NODE_WITNESS` means \n\n> A node will signal that it can provide witnesses using the following service bit\n\nSo I'm not sure this is strictly necessary. As a general theme though, I'm not sure bundling this logic with the value of NODE_WITNESS is necessary/correct.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742235143,742235143,src/net_processing.cpp
jnewbery,2021-11-04 14:44:38,Agree. I've now removed it.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742906463,742906463,src/net_processing.cpp
jnewbery,2021-11-04 14:44:39,removed!,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742906485,742906485,src/net_processing.cpp
jnewbery,2021-11-04 14:44:41,I've removed the new check since it's not necessary.,https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742906519,742906519,src/net_processing.cpp
jnewbery,2021-11-04 14:44:48,"No, that's a good point. I've added the test in commit _[net processing] Only accept SENDCMPCT with version = 2_",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r742906656,742906656,test/functional/p2p_compactblocks.py
theuni,2021-11-04 16:48:03,"Was there a reason for switching this to an early return, or is that now an artifact of old changes and rebases?\n\nJust for readability, it's more clear imo wrapped in a `if` for the version check. I missed the early return when re-reviewing and was confused about why this change is safe.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r743024991,743024991,src/net_processing.cpp
jnewbery,2021-11-04 16:58:21,"I think this is just personal taste. I _much_ prefer early returns where they're possible, especially compared with some of the very deeply nested if statements that we have in the code.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r743034501,743034501,src/net_processing.cpp
theuni,2021-11-04 17:02:16,"We could've previously fallen into this if `fWantsCmpctWitness == false && nCMPCTBLOCKVersion != 2`, but we won't now. I'm not sure what the consequence of that is.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r743037859,743037859,src/net_processing.cpp
theuni,2021-11-04 17:21:02,"I believe this is a behavioral change in a pathological case:\n```\nSENDCMPCT true 2\nSENDCMPCT false 1\n```\nBefore this would have turned off announcements, but now it looks like it won't.\nAgain, I'm unsure of the consequence.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r743052831,743052831,src/net_processing.cpp
jnewbery,2021-11-08 17:23:38,"This if block is handling subsequent `sendcmpct` messages from the peer. The idea is that we'll ignore any subsequent `sendcmpct` message where the version doesn't match the version in the first received `sendcmpct` message, i.e. if we receive:\n\n```\nsendcmpct false 2\nsendcmpct true 2\n```\n\nThen the first `sendcmpct` announces support for compact blocks and the second `sendcmpct` enabl",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r744939428,744939428,src/net_processing.cpp
jnewbery,2021-11-08 17:25:27,"> Before this would have turned off announcements, but now it looks like it won't.\n\nI don't think this is true for the reason in https://github.com/bitcoin/bitcoin/pull/20799#discussion_r744939428. The second `sendcmpct` would not turn off announcements, since the if statement here:\n\n```\n            if (State(pfrom.GetId())->fWantsCmpctWitness == (nCMPCTBLOCKVersion == 2)) { // ignore la",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r744940956,744940956,src/net_processing.cpp
theuni,2021-11-15 17:04:34,"This is nitty and not related to the code change, but I disagree with this. Deeply nested code, ugly as it may be, demonstrates the complexity of the logic in-place. Early returns don't simplify the logic, they just add sneaky trap-doors that aren't visible in diffs (In this case I misread the intent of the code because github didn't show enough context)",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r749520836,749520836,src/net_processing.cpp
theuni,2021-11-15 17:41:55,"I agree with this now, thanks for explaining!",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r749548849,749548849,src/net_processing.cpp
theuni,2021-11-15 17:57:38,"Yes, I see now. Thanks.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r749559852,749559852,src/net_processing.cpp
theuni,2021-11-15 18:17:35,"Could you add the ""high bandwidth"" part of that to the comment so the _hb makes more sense?",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r749573420,749573420,src/net_processing.cpp
theuni,2021-11-15 18:43:36,"Could you help me get confident that none of the side-effects below are still necessary?\nNamely:\n- `most_recent_* = bar`\n- `ForEachNode(ProcessBlockAvailability())`\n\nSome justification in the commit message would be helpful.",https://github.com/bitcoin/bitcoin/pull/20799#discussion_r749590232,749590232,src/net_processing.cpp
theuni,2021-11-15 18:55:39,Could you explain what `(!fWitnessEnabled || state.m_sendcmpct)` represented before? I'm having trouble understanding how it used to work before even unpacking whether the change is safe :),https://github.com/bitcoin/bitcoin/pull/20799#discussion_r749598237,749598237,src/net_processing.cpp
