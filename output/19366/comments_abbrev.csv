practicalswift,2020-06-24 05:49:42,"The `wallet_basic.py --descriptors` CI failure seems entirely unrelated :)\n\nReported as #19369.",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648605037,648605037,
MarcoFalke,2020-06-24 11:18:45,"@sipa @theuni I think this is in reply to the recent IRC conversation?\n\nFor reference:\n\n```\n[12:33] <sipa> MarcoFalke: i'm finding it a bit annoying that codebase changes often break existing fuzz tests, which require travis or an entirely separate build to find out\n[12:33] <sipa> what do you think about ""building"" the fuzz tests in normal make all mode (but without the actual fuzzing ",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648759521,648759521,
MarcoFalke,2020-06-24 11:27:12,"I'd say they should be compiled by default, just like bench and the unit tests, and the gui, and the gui tests. No one is running the benchmarks to do actual benchmarking in a usual development workflow. They are merely compiled to be smoke-run once in `make check`. I don't see why the fuzz tests should be different. They should be built and maybe even smoke tested (with the empty input or so) by ",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648763070,648763070,
laanwj,2020-06-24 12:07:47,"> I'd say they should be compiled by default, just like bench and the unit tests, and the gui, and the gui tests. No one is running the benchmarks to do actual benchmarking in a usual development workflow. They are merely compiled to be smoke-run once in make check. I don't see why the fuzz tests should be different. They should be built and maybe even smoke tested (with the empty input or so) by ",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648780240,648780240,
MarcoFalke,2020-06-24 12:29:48,"Jup, I think gitian/guix set `--disable-bench`, so they could also disable the fuzz tests",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648790269,648790269,
practicalswift,2020-06-24 13:20:26,"@MarcoFalke I hadn't seen that conversation (I'm not on IRC), so this PR isn't a reply to it :)\n\nI've simply needed this myself many times when using the fuzzing harnesses as simple application entry points for concolic testing tools, abstract interpretation static analysis tools, etc which analyze the possible execution flow from `main` and onwards :)\n\nIn other words, being able to build ",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648815499,648815499,
MarcoFalke,2020-06-24 13:27:08,review ACK fdb933cf68f777bb5e0aaabc6216c5b54b4b28f1,https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648819247,648819247,
MarcoFalke,2020-06-26 18:38:21,ACK 1087807b2bc56b9c7e7a5471c83f6ecfae79b048,https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-650334110,650334110,
jonatack,2020-06-28 12:15:08,"Post-merge Concept ACK.\n\n> I'd say they should be compiled by default, just like bench and the unit tests, and the gui, and the gui tests.\n\n> Anyway, I think all the tests should be handled the same by the build system and `make check`.\n\nI agree. This may catch a number of inadvertent fuzz build issues we've been seeing in PRs.",https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-650743932,650743932,
