[
  {
    "sha": "51598b26319bf1ee98b399dee8152b902c62891a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTU5OGIyNjMxOWJmMWVlOThiMzk5ZGVlODE1MmI5MDJjNjI4OTFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T15:49:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-03T17:01:46Z"
      },
      "message": "Reinitialize state in between individual unit tests.\n\nThis changes the TestingSetup fixture to be per-unit-test rather than global.\nMost tests don't need it, so it's only invoked in a few.",
      "tree": {
        "sha": "21805efdbe19e67f3ed953695cb5f27c9d4ff4fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21805efdbe19e67f3ed953695cb5f27c9d4ff4fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51598b26319bf1ee98b399dee8152b902c62891a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51598b26319bf1ee98b399dee8152b902c62891a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51598b26319bf1ee98b399dee8152b902c62891a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51598b26319bf1ee98b399dee8152b902c62891a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86eb461c5bbe8200ab066f75b5acdf79fbae1086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86eb461c5bbe8200ab066f75b5acdf79fbae1086"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 124,
      "deletions": 61
    },
    "files": [
      {
        "sha": "517cd7ea21d35d0deceb2f2a0336aeb15a90c9e6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/test_bitcoin.cpp \\\n+  test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\"
      },
      {
        "sha": "36946b7dcca255e08a00529f441a2787227386d2",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 34,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -39,22 +39,31 @@ void CDBEnv::EnvShutdown()\n         return;\n \n     fDbEnvInit = false;\n-    int ret = dbenv.close(0);\n+    int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n \n-CDBEnv::CDBEnv() : dbenv(DB_CXX_NO_EXCEPTIONS)\n+void CDBEnv::Reset()\n {\n+    delete dbenv;\n+    dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n     fDbEnvInit = false;\n     fMockDb = false;\n }\n \n+CDBEnv::CDBEnv() : dbenv(NULL)\n+{\n+    Reset();\n+}\n+\n CDBEnv::~CDBEnv()\n {\n     EnvShutdown();\n+    delete dbenv;\n+    dbenv = NULL;\n }\n \n void CDBEnv::Close()\n@@ -79,17 +88,17 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     if (GetBoolArg(\"-privdb\", true))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv.set_lg_dir(pathLogDir.string().c_str());\n-    dbenv.set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n-    dbenv.set_lg_bsize(0x10000);\n-    dbenv.set_lg_max(1048576);\n-    dbenv.set_lk_max_locks(40000);\n-    dbenv.set_lk_max_objects(40000);\n-    dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n-    dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv.open(path.string().c_str(),\n+    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n+    dbenv->set_lg_bsize(0x10000);\n+    dbenv->set_lg_max(1048576);\n+    dbenv->set_lk_max_locks(40000);\n+    dbenv->set_lk_max_objects(40000);\n+    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n+    dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n+    int ret = dbenv->open(path.string().c_str(),\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -116,14 +125,14 @@ void CDBEnv::MakeMock()\n \n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n \n-    dbenv.set_cachesize(1, 0, 1);\n-    dbenv.set_lg_bsize(10485760 * 4);\n-    dbenv.set_lg_max(10485760);\n-    dbenv.set_lk_max_locks(10000);\n-    dbenv.set_lk_max_objects(10000);\n-    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n-    dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n-    int ret = dbenv.open(NULL,\n+    dbenv->set_cachesize(1, 0, 1);\n+    dbenv->set_lg_bsize(10485760 * 4);\n+    dbenv->set_lg_max(10485760);\n+    dbenv->set_lk_max_locks(10000);\n+    dbenv->set_lk_max_objects(10000);\n+    dbenv->set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv->log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv->open(NULL,\n                          DB_CREATE |\n                              DB_INIT_LOCK |\n                              DB_INIT_LOG |\n@@ -144,7 +153,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n     if (result == 0)\n         return VERIFY_OK;\n@@ -167,7 +176,7 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n     stringstream strDump;\n \n-    Db db(&dbenv, 0);\n+    Db db(dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n@@ -208,10 +217,10 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n \n void CDBEnv::CheckpointLSN(const std::string& strFile)\n {\n-    dbenv.txn_checkpoint(0, 0, 0);\n+    dbenv->txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n         return;\n-    dbenv.lsn_reset(strFile.c_str(), 0);\n+    dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n \n@@ -237,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL) {\n-            pdb = new Db(&bitdb.dbenv, 0);\n+            pdb = new Db(bitdb.dbenv, 0);\n \n             bool fMockDb = bitdb.IsMock();\n             if (fMockDb) {\n@@ -284,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -324,7 +333,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n     this->CloseDb(strFile);\n \n     LOCK(cs_db);\n-    int rc = dbenv.dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n+    int rc = dbenv->dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);\n     return (rc == 0);\n }\n \n@@ -344,7 +353,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n-                    Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n+                    Db* pdbCopy = new Db(bitdb.dbenv, 0);\n \n                     int ret = pdbCopy->open(NULL,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -394,10 +403,10 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(&bitdb.dbenv, 0);\n+                    Db dbA(bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n-                    Db dbB(&bitdb.dbenv, 0);\n+                    Db dbB(bitdb.dbenv, 0);\n                     if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -430,10 +439,10 @@ void CDBEnv::Flush(bool fShutdown)\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv->txn_checkpoint(0, 0, 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n-                    dbenv.lsn_reset(strFile.c_str(), 0);\n+                    dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n@@ -443,7 +452,7 @@ void CDBEnv::Flush(bool fShutdown)\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {\n-                dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n+                dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n                     boost::filesystem::remove_all(path / \"database\");"
      },
      {
        "sha": "71133f969914ae47559f15a5ecf07e30a1644526",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -39,12 +39,14 @@ class CDBEnv\n \n public:\n     mutable CCriticalSection cs_db;\n-    DbEnv dbenv;\n+    DbEnv *dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n     CDBEnv();\n     ~CDBEnv();\n+    void Reset();\n+\n     void MakeMock();\n     bool IsMock() { return fMockDb; }\n \n@@ -79,7 +81,7 @@ class CDBEnv\n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n-        int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n+        int ret = dbenv->txn_begin(NULL, &ptxn, flags);\n         if (!ptxn || ret != 0)\n             return NULL;\n         return ptxn;"
      },
      {
        "sha": "d945ece417f4a68ceb1115edebf80c30516f86c4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -54,7 +54,6 @@ bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n-\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n@@ -3085,10 +3084,31 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n \n void UnloadBlockIndex()\n {\n-    mapBlockIndex.clear();\n+    LOCK(cs_main);\n     setBlockIndexCandidates.clear();\n     chainActive.SetTip(NULL);\n     pindexBestInvalid = NULL;\n+    pindexBestHeader = NULL;\n+    mempool.clear();\n+    mapOrphanTransactions.clear();\n+    mapOrphanTransactionsByPrev.clear();\n+    nSyncStarted = 0;\n+    mapBlocksUnlinked.clear();\n+    vinfoBlockFile.clear();\n+    nLastBlockFile = 0;\n+    nBlockSequenceId = 1;\n+    mapBlockSource.clear();\n+    mapBlocksInFlight.clear();\n+    nQueuedValidatedHeaders = 0;\n+    nPreferredDownload = 0;\n+    setDirtyBlockIndex.clear();\n+    setDirtyFileInfo.clear();\n+    mapNodeState.clear();\n+\n+    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+        delete entry.second;\n+    }\n+    mapBlockIndex.clear();\n }\n \n bool LoadBlockIndex()"
      },
      {
        "sha": "bf255487550cb2fee2ac1f939f93ab2e5d02439e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -16,6 +16,8 @@\n #include \"serialize.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -41,7 +43,7 @@ CService ip(uint32_t i)\n     return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n-BOOST_AUTO_TEST_SUITE(DoS_tests)\n+BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {"
      },
      {
        "sha": "36499f01a7b0d77ea2cb884852f30cf9e1092713",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -5,14 +5,16 @@\n #include \"wallet.h\"\n #include \"walletdb.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <stdint.h>\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(accounting_tests)\n+BOOST_FIXTURE_TEST_SUITE(accounting_tests, TestingSetup)\n \n static void\n GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)"
      },
      {
        "sha": "5e1f5f0294e2feebd4f54c03d040ad5d32fe3806",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -15,6 +15,8 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <fstream>\n \n #include <boost/filesystem/operations.hpp>\n@@ -78,7 +80,7 @@\n }\n #endif\n \n-struct ReadAlerts\n+struct ReadAlerts : public TestingSetup\n {\n     ReadAlerts()\n     {"
      },
      {
        "sha": "6ab9cb8a440b3c779a28979deab2c53d2ab6a936",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -8,9 +8,11 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/test/unit_test.hpp>\n \n-BOOST_AUTO_TEST_SUITE(miner_tests)\n+BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n static\n struct {"
      },
      {
        "sha": "45cb551d04aa59e4bb1c278bcfa43bf145a9e698",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"netbase.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -45,7 +47,7 @@ Value CallRPC(string args)\n }\n \n \n-BOOST_AUTO_TEST_SUITE(rpc_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "44475076b3c4faaa2094454c667a35a72cd843a9",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -8,6 +8,8 @@\n #include \"base58.h\"\n #include \"wallet.h\"\n \n+#include \"test/test_bitcoin.h\"\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -19,7 +21,7 @@ extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n \n-BOOST_AUTO_TEST_SUITE(rpc_wallet_tests)\n+BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {"
      },
      {
        "sha": "5df417b8e5e4793775dee5824e96af7d44828b00",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -4,6 +4,8 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n+#include \"test_bitcoin.h\"\n+\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n@@ -24,18 +26,15 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-struct TestingSetup {\n-    CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n-    boost::thread_group threadGroup;\n-\n-    TestingSetup() {\n+TestingSetup::TestingSetup()\n+{\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n+        ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n         mapArgs[\"-datadir\"] = pathTemp.string();\n@@ -53,27 +52,28 @@ struct TestingSetup {\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n         RegisterNodeSignals(GetNodeSignals());\n-    }\n-    ~TestingSetup()\n-    {\n+}\n+\n+TestingSetup::~TestingSetup()\n+{\n+        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n-        UnregisterNodeSignals(GetNodeSignals());\n #ifdef ENABLE_WALLET\n+        UnregisterValidationInterface(pwalletMain);\n         delete pwalletMain;\n         pwalletMain = NULL;\n #endif\n+        UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n #ifdef ENABLE_WALLET\n         bitdb.Flush(true);\n+        bitdb.Reset();\n #endif\n         boost::filesystem::remove_all(pathTemp);\n-    }\n-};\n-\n-BOOST_GLOBAL_FIXTURE(TestingSetup);\n+}\n \n void Shutdown(void* parg)\n {"
      },
      {
        "sha": "c1448dcdebe08e4db90f0f83e52148a770747247",
        "filename": "src/test/test_bitcoin.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -0,0 +1,18 @@\n+#ifndef BITCOIN_TEST_TEST_BITCOIN_H\n+#define BITCOIN_TEST_TEST_BITCOIN_H\n+\n+#include \"txdb.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+struct TestingSetup {\n+    CCoinsViewDB *pcoinsdbview;\n+    boost::filesystem::path pathTemp;\n+    boost::thread_group threadGroup;\n+\n+    TestingSetup();\n+    ~TestingSetup();\n+};\n+\n+#endif"
      },
      {
        "sha": "4d0cb7136e9e97ccfc055c2efa0db4041d6dfc1a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -94,6 +94,7 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+void ClearDatadirCache();\n boost::filesystem::path GetConfigFile();\n #ifndef WIN32\n boost::filesystem::path GetPidFile();"
      },
      {
        "sha": "ddec57d9a90ce5212e9cf88bc8f456847a1b4658",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51598b26319bf1ee98b399dee8152b902c62891a/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51598b26319bf1ee98b399dee8152b902c62891a/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=51598b26319bf1ee98b399dee8152b902c62891a",
        "patch": "@@ -903,8 +903,8 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n \n-    int result = dbenv.dbenv.dbrename(NULL, filename.c_str(), NULL,\n-                                      newFilename.c_str(), DB_AUTO_COMMIT);\n+    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n     else\n@@ -923,7 +923,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    boost::scoped_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n+    boost::scoped_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name"
      }
    ]
  }
]