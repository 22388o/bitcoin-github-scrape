[
  {
    "sha": "a8dd24b64705d53179e64161d4cd1d5b1d91f089",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGRkMjRiNjQ3MDVkNTMxNzllNjQxNjFkNGNkMWQ1YjFkOTFmMDg5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-18T18:41:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-03-13T17:01:05Z"
      },
      "message": "[validation] Move CheckBlock() mutation guard to AcceptBlock()\n\nWe do not mark any blocks that fail CheckBlock() as BLOCK_FAILED_VALID\nsince they could have been mutated and marking a valid-but-mutated block\nas invalid would prevent us from ever syncing to that chain. See\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-February/016697.html\nfor full details.\n\nThe current guard against marking CheckBlock() failed blocks as invalid\nis by calling CheckBlock() prior to AcceptBlock() in ProcessNewBlock().\nThat is brittle since AcceptBlock() has an implicit assumption that any\nblock submitted has been checked for mutation. A future change to\nProcessNewBlock() could overlook that implicit assumption and introduce\na consensus failure.\n\nIn this commit we move the mutation guard logic into AcceptBlock() and\nadd comments to explain why we never mark CheckBlock() failed blocks as\ninvalid.",
      "tree": {
        "sha": "86835e2ac74402ed81e136a20b4aae133be17504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86835e2ac74402ed81e136a20b4aae133be17504"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8dd24b64705d53179e64161d4cd1d5b1d91f089",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8dd24b64705d53179e64161d4cd1d5b1d91f089",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8dd24b64705d53179e64161d4cd1d5b1d91f089",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8dd24b64705d53179e64161d4cd1d5b1d91f089/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f9e6a3c1ce8710364a815ac1796b45ccf1325b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f9e6a3c1ce8710364a815ac1796b45ccf1325b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f9e6a3c1ce8710364a815ac1796b45ccf1325b5"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "77a1c0e2f34f179452041ffe61119011be5416be",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8dd24b64705d53179e64161d4cd1d5b1d91f089/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8dd24b64705d53179e64161d4cd1d5b1d91f089/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a8dd24b64705d53179e64161d4cd1d5b1d91f089",
        "patch": "@@ -3759,9 +3759,21 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n         if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+    if (!CheckBlock(block, state, chainparams.GetConsensus())) {\n+        // Never mark a block as invalid if CheckBlock() fails.  This is\n+        // protective against consensus failure if there are any unknown forms\n+        // of block mutation that cause CheckBlock() to fail; see e.g.\n+        // CVE-2012-2459 and\n+        // https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-February/016697.html.\n+        // Because CheckBlock() is not very expensive, the anti-DoS benefits of\n+        // caching failure (of a definitely-invalid block) are not substantial.\n+        return error(\"%s: %s\", __func__, state.ToString());\n+    }\n+\n+    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {\n+            // If the block failed ContextualCheckBlock with a non-mutation error,\n+            // mark it as BLOCK_FAILED_VALID so we don't attempt to redownload it.\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n@@ -3802,18 +3814,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         if (fNewBlock) *fNewBlock = false;\n         BlockValidationState state;\n \n-        // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n-        // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n-        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n-        // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n-        if (ret) {\n-            // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n-        }\n-        if (!ret) {\n+        if (!ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock)) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }"
      }
    ]
  },
  {
    "sha": "eb3b20e157f79da5afff18af30eb8cf224c980ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjNiMjBlMTU3Zjc5ZGE1YWZmZjE4YWYzMGViOGNmMjI0Yzk4MGZm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-18T19:43:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-03-13T17:01:07Z"
      },
      "message": "[validation] Remove unused pindex outparam from AcceptBlock()",
      "tree": {
        "sha": "eec4092184a75f94d820cc0a2bdc44aff4c34886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eec4092184a75f94d820cc0a2bdc44aff4c34886"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb3b20e157f79da5afff18af30eb8cf224c980ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3b20e157f79da5afff18af30eb8cf224c980ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3b20e157f79da5afff18af30eb8cf224c980ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3b20e157f79da5afff18af30eb8cf224c980ff/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8dd24b64705d53179e64161d4cd1d5b1d91f089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8dd24b64705d53179e64161d4cd1d5b1d91f089",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8dd24b64705d53179e64161d4cd1d5b1d91f089"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "15bb52726610f1e087591f68992db5c8ff961e75",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3b20e157f79da5afff18af30eb8cf224c980ff/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3b20e157f79da5afff18af30eb8cf224c980ff/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eb3b20e157f79da5afff18af30eb8cf224c980ff",
        "patch": "@@ -3711,15 +3711,15 @@ static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChai\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n     if (fNewBlock) *fNewBlock = false;\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *pindexDummy = nullptr;\n-    CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;\n+    CBlockIndex *&pindex = pindexDummy;\n \n     bool accepted_header = m_blockman.AcceptBlockHeader(block, state, chainparams, &pindex);\n     CheckBlockIndex(chainparams.GetConsensus());\n@@ -3810,13 +3810,12 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     AssertLockNotHeld(cs_main);\n \n     {\n-        CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n         BlockValidationState state;\n \n         LOCK(cs_main);\n \n-        if (!ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock)) {\n+        if (!ChainstateActive().AcceptBlock(pblock, state, chainparams, fForceProcessing, nullptr, fNewBlock)) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n@@ -4703,7 +4702,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     CBlockIndex* pindex = LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      if (::ChainstateActive().AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n+                      if (::ChainstateActive().AcceptBlock(pblock, state, chainparams, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n                       if (state.IsError()) {\n@@ -4740,7 +4739,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            if (::ChainstateActive().AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            if (::ChainstateActive().AcceptBlock(pblockrecursive, dummy, chainparams, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());"
      },
      {
        "sha": "615057bc030bba04461752aecf8637abd5cc3ee1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3b20e157f79da5afff18af30eb8cf224c980ff/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3b20e157f79da5afff18af30eb8cf224c980ff/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=eb3b20e157f79da5afff18af30eb8cf224c980ff",
        "patch": "@@ -693,7 +693,7 @@ class CChainState {\n         const CChainParams& chainparams,\n         std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n \n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);"
      }
    ]
  }
]