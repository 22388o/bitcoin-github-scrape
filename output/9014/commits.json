[
  {
    "sha": "6fdd43b968f984ef92ca4576872dc65462ba7312",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmRkNDNiOTY4Zjk4NGVmOTJjYTQ1NzY4NzJkYzY1NDYyYmE3MzEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-25T17:20:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:13:09Z"
      },
      "message": "Add struct to track block-connect-time-generated info for callbacks",
      "tree": {
        "sha": "2213aad57dc3f053b3bcd7b1ce80a6eecf612032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2213aad57dc3f053b3bcd7b1ce80a6eecf612032"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fdd43b968f984ef92ca4576872dc65462ba7312",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fdd43b968f984ef92ca4576872dc65462ba7312",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fdd43b968f984ef92ca4576872dc65462ba7312",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fdd43b968f984ef92ca4576872dc65462ba7312/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2efcfa5acfacb958973d9e8125e1d81f102e2dfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2efcfa5acfacb958973d9e8125e1d81f102e2dfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2efcfa5acfacb958973d9e8125e1d81f102e2dfd"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 19,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e8fe8639fba6fe60ff68f312f8769c1459bf202e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fdd43b968f984ef92ca4576872dc65462ba7312/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fdd43b968f984ef92ca4576872dc65462ba7312/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6fdd43b968f984ef92ca4576872dc65462ba7312",
        "patch": "@@ -2152,11 +2152,20 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n+/**\n+ * Used to track conflicted transactions removed from mempool and transactions\n+ * applied to the UTXO state as a part of a single ActivateBestChainStep call.\n+ */\n+struct ConnectTrace {\n+    std::vector<CTransactionRef> txConflicted;\n+    std::vector<std::tuple<CTransactionRef,CBlockIndex*,int>> txChanged;\n+};\n+\n /**\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::vector<CTransactionRef> &txConflicted, std::vector<std::tuple<CTransactionRef,CBlockIndex*,int>> &txChanged)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, ConnectTrace& connectTrace)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2192,12 +2201,12 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.;\n-    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, &txConflicted, !IsInitialBlockDownload());\n+    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, &connectTrace.txConflicted, !IsInitialBlockDownload());\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n     for (unsigned int i=0; i < pblock->vtx.size(); i++)\n-        txChanged.emplace_back(pblock->vtx[i], pindexNew, i);\n+        connectTrace.txChanged.emplace_back(pblock->vtx[i], pindexNew, i);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n@@ -2279,7 +2288,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::vector<CTransactionRef>& txConflicted, std::vector<std::tuple<CTransactionRef,CBlockIndex*,int>>& txChanged)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2312,7 +2321,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n         // Connect new blocks.\n         BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL, txConflicted, txChanged)) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL, connectTrace)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (!state.CorruptionPossible())\n@@ -2380,17 +2389,13 @@ static void NotifyHeaderTip() {\n bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n-    std::vector<std::tuple<CTransactionRef,CBlockIndex*,int>> txChanged;\n-    if (pblock)\n-        txChanged.reserve(pblock->vtx.size());\n     do {\n-        txChanged.clear();\n         boost::this_thread::interruption_point();\n         if (ShutdownRequested())\n             break;\n \n         const CBlockIndex *pindexFork;\n-        std::vector<CTransactionRef> txConflicted;\n+        ConnectTrace connectTrace;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n@@ -2404,7 +2409,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 return true;\n \n             bool fInvalidFound = false;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, fInvalidFound, txConflicted, txChanged))\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, fInvalidFound, connectTrace))\n                 return false;\n \n             if (fInvalidFound) {\n@@ -2421,13 +2426,13 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n-        for (const auto& tx : txConflicted)\n+        for (const auto& tx : connectTrace.txConflicted)\n         {\n             GetMainSignals().SyncTransaction(*tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n-        for (unsigned int i = 0; i < txChanged.size(); i++)\n-            GetMainSignals().SyncTransaction(*std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n+        for (unsigned int i = 0; i < connectTrace.txChanged.size(); i++)\n+            GetMainSignals().SyncTransaction(*std::get<0>(connectTrace.txChanged[i]), std::get<1>(connectTrace.txChanged[i]), std::get<2>(connectTrace.txChanged[i]));\n \n         // Notify external listeners about the new tip.\n         GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);"
      }
    ]
  },
  {
    "sha": "fd9d89070a70a7333d8ffe944cc53f8fd4122548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDlkODkwNzBhNzBhNzMzM2Q4ZmZlOTQ0Y2M1M2Y4ZmQ0MTIyNTQ4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T16:12:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:13:09Z"
      },
      "message": "Keep blocks as shared_ptrs, instead of copying txn in ConnectTip",
      "tree": {
        "sha": "4ae20662e1460c891112abd0af3181b3696cdca9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ae20662e1460c891112abd0af3181b3696cdca9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd9d89070a70a7333d8ffe944cc53f8fd4122548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9d89070a70a7333d8ffe944cc53f8fd4122548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9d89070a70a7333d8ffe944cc53f8fd4122548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9d89070a70a7333d8ffe944cc53f8fd4122548/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fdd43b968f984ef92ca4576872dc65462ba7312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fdd43b968f984ef92ca4576872dc65462ba7312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fdd43b968f984ef92ca4576872dc65462ba7312"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ffb4732666fbab233248deb9429091e4279720c1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd9d89070a70a7333d8ffe944cc53f8fd4122548/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd9d89070a70a7333d8ffe944cc53f8fd4122548/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fd9d89070a70a7333d8ffe944cc53f8fd4122548",
        "patch": "@@ -2158,7 +2158,7 @@ static int64_t nTimePostConnect = 0;\n  */\n struct ConnectTrace {\n     std::vector<CTransactionRef> txConflicted;\n-    std::vector<std::tuple<CTransactionRef,CBlockIndex*,int>> txChanged;\n+    std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > > blocksConnected;\n };\n \n /**\n@@ -2170,11 +2170,15 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n-    CBlock block;\n     if (!pblock) {\n-        if (!ReadBlockFromDisk(block, pindexNew, chainparams.GetConsensus()))\n+        std::shared_ptr<CBlock> pblockNew = std::make_shared<CBlock>();\n+        connectTrace.blocksConnected.emplace_back(pindexNew, pblockNew);\n+        if (!ReadBlockFromDisk(*pblockNew, pindexNew, chainparams.GetConsensus()))\n             return AbortNode(state, \"Failed to read block\");\n-        pblock = &block;\n+        pblock = pblockNew.get();\n+    } else {\n+        //TODO: This copy is a major performance regression, but ProcessNewBlock callers need updated to fix this\n+        connectTrace.blocksConnected.emplace_back(pindexNew, std::make_shared<const CBlock>(*pblock));\n     }\n     // Apply the block atomically to the chain state.\n     int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;\n@@ -2205,9 +2209,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n-    for (unsigned int i=0; i < pblock->vtx.size(); i++)\n-        connectTrace.txChanged.emplace_back(pblock->vtx[i], pindexNew, i);\n-\n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n     LogPrint(\"bench\", \"- Connect block: %.2fms [%.2fs]\\n\", (nTime6 - nTime1) * 0.001, nTimeTotal * 0.000001);\n@@ -2329,6 +2330,8 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n                     state = CValidationState();\n                     fInvalidFound = true;\n                     fContinue = false;\n+                    // If we didn't actually connect the block, don't notify listeners about it\n+                    connectTrace.blocksConnected.pop_back();\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...).\n@@ -2431,8 +2434,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             GetMainSignals().SyncTransaction(*tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n-        for (unsigned int i = 0; i < connectTrace.txChanged.size(); i++)\n-            GetMainSignals().SyncTransaction(*std::get<0>(connectTrace.txChanged[i]), std::get<1>(connectTrace.txChanged[i]), std::get<2>(connectTrace.txChanged[i]));\n+        for (const auto& pair : connectTrace.blocksConnected) {\n+            assert(pair.second);\n+            const CBlock& block = *(pair.second);\n+            for (unsigned int i = 0; i < block.vtx.size(); i++)\n+                GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+        }\n \n         // Notify external listeners about the new tip.\n         GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);"
      }
    ]
  },
  {
    "sha": "ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTRkYjQ0ZDAzNDFiNzUxN2QwMmJkYzc0ZDRiNjlkMGNkMmY2Nzc4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-25T18:22:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:13:09Z"
      },
      "message": "Create a shared_ptr for the block we're connecting in ActivateBCS",
      "tree": {
        "sha": "8d7d9ea7c00d2b813d8b003cb19e63f508fa3474",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d7d9ea7c00d2b813d8b003cb19e63f508fa3474"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd9d89070a70a7333d8ffe944cc53f8fd4122548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd9d89070a70a7333d8ffe944cc53f8fd4122548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd9d89070a70a7333d8ffe944cc53f8fd4122548"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3a9ad4a28fe615505df450b68ebbb6b9da07b244",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
        "patch": "@@ -2165,7 +2165,7 @@ struct ConnectTrace {\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, ConnectTrace& connectTrace)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2175,19 +2175,18 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n         connectTrace.blocksConnected.emplace_back(pindexNew, pblockNew);\n         if (!ReadBlockFromDisk(*pblockNew, pindexNew, chainparams.GetConsensus()))\n             return AbortNode(state, \"Failed to read block\");\n-        pblock = pblockNew.get();\n     } else {\n-        //TODO: This copy is a major performance regression, but ProcessNewBlock callers need updated to fix this\n-        connectTrace.blocksConnected.emplace_back(pindexNew, std::make_shared<const CBlock>(*pblock));\n+        connectTrace.blocksConnected.emplace_back(pindexNew, pblock);\n     }\n+    const CBlock& blockConnecting = *connectTrace.blocksConnected.back().second;\n     // Apply the block atomically to the chain state.\n     int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;\n     int64_t nTime3;\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        bool rv = ConnectBlock(*pblock, state, pindexNew, view, chainparams);\n-        GetMainSignals().BlockChecked(*pblock, state);\n+        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n@@ -2205,7 +2204,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.;\n-    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, &connectTrace.txConflicted, !IsInitialBlockDownload());\n+    mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight, &connectTrace.txConflicted, !IsInitialBlockDownload());\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n@@ -2322,7 +2321,8 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n         // Connect new blocks.\n         BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL, connectTrace)) {\n+            //TODO: The pblock copy is a major performance regression, but callers need updated to fix this\n+            if (!ConnectTip(state, chainparams, pindexConnect, (pblock && pindexConnect == pindexMostWork) ? std::make_shared<const CBlock>(*pblock) : std::shared_ptr<const CBlock>(), connectTrace)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (!state.CorruptionPossible())"
      }
    ]
  },
  {
    "sha": "2736c44c8edea5ce6a502a04269926fecda27301",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzM2YzQ0YzhlZGVhNWNlNmE1MDJhMDQyNjk5MjZmZWNkYTI3MzAx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T18:01:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:13:09Z"
      },
      "message": "Make the optional pblock in ActivateBestChain a shared_ptr",
      "tree": {
        "sha": "069bbf0a1a075266d34779da13685d8d162ff29a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/069bbf0a1a075266d34779da13685d8d162ff29a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2736c44c8edea5ce6a502a04269926fecda27301",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2736c44c8edea5ce6a502a04269926fecda27301",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2736c44c8edea5ce6a502a04269926fecda27301",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2736c44c8edea5ce6a502a04269926fecda27301/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae4db44d0341b7517d02bdc74d4b69d0cd2f6778"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e6d80f06a3c1dfab620673c418a982b734069fb8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2736c44c8edea5ce6a502a04269926fecda27301/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2736c44c8edea5ce6a502a04269926fecda27301/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2736c44c8edea5ce6a502a04269926fecda27301",
        "patch": "@@ -1319,7 +1319,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params(), NULL);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -1357,7 +1357,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     }\n \n     CValidationState state;\n-    ActivateBestChain(state, Params(), NULL);\n+    ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());"
      },
      {
        "sha": "bd66c5679bef7f18cfcb16690b6b49e05a07572c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2736c44c8edea5ce6a502a04269926fecda27301/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2736c44c8edea5ce6a502a04269926fecda27301/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2736c44c8edea5ce6a502a04269926fecda27301",
        "patch": "@@ -2288,7 +2288,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2321,8 +2321,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n         // Connect new blocks.\n         BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-            //TODO: The pblock copy is a major performance regression, but callers need updated to fix this\n-            if (!ConnectTip(state, chainparams, pindexConnect, (pblock && pindexConnect == pindexMostWork) ? std::make_shared<const CBlock>(*pblock) : std::shared_ptr<const CBlock>(), connectTrace)) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (!state.CorruptionPossible())\n@@ -2389,7 +2388,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     do {\n@@ -2412,7 +2411,8 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 return true;\n \n             bool fInvalidFound = false;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, fInvalidFound, connectTrace))\n+            std::shared_ptr<const CBlock> nullBlockPtr;\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n                 return false;\n \n             if (fInvalidFound) {\n@@ -3142,8 +3142,13 @@ bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool\n \n     NotifyHeaderTip();\n \n+    //TODO: This copy is a major performance regression, but callers need updated to fix this\n+    std::shared_ptr<const CBlock> block_ptr;\n+    if (pblock)\n+        block_ptr.reset(new CBlock(*pblock));\n+\n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!ActivateBestChain(state, chainparams, block_ptr))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;"
      },
      {
        "sha": "2d055d1900166f33d03be3942236703076b9d343",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2736c44c8edea5ce6a502a04269926fecda27301/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2736c44c8edea5ce6a502a04269926fecda27301/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2736c44c8edea5ce6a502a04269926fecda27301",
        "patch": "@@ -278,7 +278,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**"
      }
    ]
  },
  {
    "sha": "2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDZlNTYxOWFmYTJkNDNhMzdhMGEzOGRhZjMzZjU4OTY1ZGRmYTgw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:17:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:17:30Z"
      },
      "message": "Switch pblock in ProcessNewBlock to a shared_ptr\n\nThis (finally) fixes a performance regression in\nb3b3c2a5623d5c942d2b3565cc2d833c65105555",
      "tree": {
        "sha": "9bdc85dfd1048bc7d7f2d535d9f63b3b373ef4d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bdc85dfd1048bc7d7f2d535d9f63b3b373ef4d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2736c44c8edea5ce6a502a04269926fecda27301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2736c44c8edea5ce6a502a04269926fecda27301",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2736c44c8edea5ce6a502a04269926fecda27301"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 20,
      "deletions": 21
    },
    "files": [
      {
        "sha": "e81332d618e30e0bcd8fcabe3232d8680ba4c62a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "patch": "@@ -1895,7 +1895,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         BlockTransactions resp;\n         vRecv >> resp;\n \n-        CBlock block;\n+        std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n         bool fBlockRead = false;\n         {\n             LOCK(cs_main);\n@@ -1908,7 +1908,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n \n             PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n-            ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n+            ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n                 MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n                 Misbehaving(pfrom->GetId(), 100);\n@@ -1951,7 +1951,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, &block, true, NULL, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, true, NULL, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n         }\n@@ -2112,17 +2112,17 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n-        CBlock block;\n-        vRecv >> block;\n+        std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n+        vRecv >> *pblock;\n \n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        LogPrint(\"net\", \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->id);\n \n         // Process all blocks from whitelisted peers, even if not requested,\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        const uint256 hash(block.GetHash());\n+        const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n@@ -2133,7 +2133,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, &block, forceProcessing, NULL, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, forceProcessing, NULL, &fNewBlock);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n     }"
      },
      {
        "sha": "cb22dec342e9b80c0b81d5b545384ae68f86792b",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "patch": "@@ -131,7 +131,8 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n         if (pblock->nNonce == nInnerLoopCount) {\n             continue;\n         }\n-        if (!ProcessNewBlock(Params(), pblock, true, NULL, NULL))\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n+        if (!ProcessNewBlock(Params(), shared_pblock, true, NULL, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -728,7 +729,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n         );\n \n-    CBlock block;\n+    std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n+    CBlock& block = *blockptr;\n     if (!DecodeHexBlk(block, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n@@ -758,7 +760,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(Params(), &block, true, NULL, NULL);\n+    bool fAccepted = ProcessNewBlock(Params(), blockptr, true, NULL, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "bc1bdd8874d9ff77f3ecc5bcad5cb36d9423eaf2",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "patch": "@@ -223,7 +223,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             txFirst.push_back(pblock->vtx[0]);\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n-        BOOST_CHECK(ProcessNewBlock(chainparams, pblock, true, NULL, NULL));\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, NULL, NULL));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "139389117a59365ad959f0ca47646d6783f4e27f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "patch": "@@ -127,7 +127,8 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n-    ProcessNewBlock(chainparams, &block, true, NULL, NULL);\n+    std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+    ProcessNewBlock(chainparams, shared_pblock, true, NULL, NULL);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "0983c1f7626f6accb031e6e15f3432390d1108c9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "patch": "@@ -3123,7 +3123,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool *fNewBlock)\n {\n     {\n         LOCK(cs_main);\n@@ -3142,13 +3142,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool\n \n     NotifyHeaderTip();\n \n-    //TODO: This copy is a major performance regression, but callers need updated to fix this\n-    std::shared_ptr<const CBlock> block_ptr;\n-    if (pblock)\n-        block_ptr.reset(new CBlock(*pblock));\n-\n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, block_ptr))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;"
      },
      {
        "sha": "3a2b51bfec96ee3b339940bc9edfcf818f2688bd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d6e5619afa2d43a37a0a38daf33f58965ddfa80/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "patch": "@@ -233,7 +233,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool* fNewBlock);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDBkZjgxZWJkYmY3MDVmN2FkMzg2YzcyMjliZjFiYmMzMTI1ZjYy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-30T05:25:39Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:18:44Z"
      },
      "message": "Document ConnectBlock connectTrace postconditions",
      "tree": {
        "sha": "5ad956d19aa507f94eb195c438be06ea7c5b18a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ad956d19aa507f94eb195c438be06ea7c5b18a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d6e5619afa2d43a37a0a38daf33f58965ddfa80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d6e5619afa2d43a37a0a38daf33f58965ddfa80"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3bcbf33d66b6e756b66b2d2be0d8daf5c08e0c8b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
        "patch": "@@ -2164,6 +2164,10 @@ struct ConnectTrace {\n /**\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n+ *\n+ * The block is always added to connectTrace (either after loading from disk or by copying\n+ * pblock) - if that is not intended, care must be taken to remove the last entry in\n+ * blocksConnected in case of failure.\n  */\n bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace)\n {"
      }
    ]
  }
]