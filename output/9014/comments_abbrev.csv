TheBlueMatt,2016-10-25T18:30:39Z,"OK, ended up rewriting the PR quite a bit, cleaning it up and resolving the nits folks had raised - it now no longer has this crazy map thing that can be used as both a paramter and a return value.\n",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-256128799,256128799,
JeremyRubin,2016-10-25T19:26:37Z,"re-utack, much cleaner!\n",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-256149859,256149859,
sipa,2016-10-26T15:40:25Z,"Before headers first, reorgs were dealt with by accumulating the changes in\nanother cache level, which was only flushed if the reorg succeeded.\n\nNow there is much less a concept of reorgs, and only attempts to improve\nthe tip. ABC finds what block we want and like to be the tip, and calls\nABCS to make progress towards that. In case of failure, we find what other\nblock we'd like to become the",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-256386778,256386778,
sipa,2016-11-07T22:26:44Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-258983475,258983475,
TheBlueMatt,2016-11-07T22:48:59Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-258988616,258988616,
fanquake,2016-11-08T00:29:39Z,"Travis failures:\n\n```\n  CXX      libbitcoin_server_a-rest.o\n../../src/main.cpp: In function ‘bool ProcessMessage(CNode*, std::string, CDataStream&, int64_t, const CChainParams&, CConnman&)’:\n../../src/main.cpp:6094:52: error: ‘block’ was not declared in this scope\n             forceProcessing |= MarkBlockAsReceived(block.GetHash());\n```\n\n```\n  CXX      libbitcoin_server_a-torcontrol.o\n.",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-259008367,259008367,
paveljanik,2016-11-08T07:14:01Z,Looks like this is not rebased correctly - GH shows 5 conflicting files (and they match my own tests).\n,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-259063259,259063259,
TheBlueMatt,2016-11-09T01:19:27Z,"It just needs rebased again, closing for now and will rebase on top of #9075 after that gets merged.\n",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-259310666,259310666,
TheBlueMatt,2016-11-17T23:28:13Z,Rebased on  #9075.\n,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-261402967,261402967,
TheBlueMatt,2016-11-22T02:51:41Z,"Rebased after #9125 was merged. Note that #9125 should have fixed most of the performance regression here (and was likely the source of its major reorg speedup, though it should help in more real-world conditions as well), though this should still help some, and is a good step towards #9027 as well as improving callback concurrency in the future.",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-262133519,262133519,
gmaxwell,2016-11-24T20:59:01Z,utACK,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-262843945,262843945,
sdaftuar,2016-11-29T02:21:17Z,"Code review ACK, will test.",https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-263457490,263457490,
sdaftuar,2016-11-29T22:33:31Z,ACK 7b717cd,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-263722051,263722051,
TheBlueMatt,2016-12-04T08:21:02Z,Rebased after #9260.,https://github.com/bitcoin/bitcoin/pull/9014#issuecomment-264690796,264690796,
sipa,2016-10-25T15:35:52Z,Don't you need a fallback for when the chainwork is identical?\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84932213,84932213,src/main.cpp
JeremyRubin,2016-10-25T16:15:57Z,"nit: maybe do this as\n\n```\nit = blockTrace.mapBlocks.emplace(pindexNew, std::shared_ptr<const CBlock>(new CBlock())).first;\n```\n\nOr\n\n```\nauto pblockNew = std::make_shared<CBlock>();\n```\n\nand update following code accordingly\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84941470,84941470,src/main.cpp
TheBlueMatt,2016-10-25T16:16:57Z,"Since its only used in each ActivateBestChainStep call individually, there is only ever one thing per given height/total work, but the map came out of an older version of the code and is now useless...so I'm replacing it with a vector.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84941702,84941702,src/main.cpp
JeremyRubin,2016-10-25T16:50:35Z,See other comment about using make_shared\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84948521,84948521,src/main.cpp
JeremyRubin,2016-10-25T16:51:24Z,make_shared\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84948692,84948692,src/rpc/mining.cpp
JeremyRubin,2016-10-25T16:51:53Z,make_shared\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84948777,84948777,src/rpc/mining.cpp
JeremyRubin,2016-10-25T16:52:05Z,make_shared\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84948818,84948818,src/test/miner_tests.cpp
JeremyRubin,2016-10-25T16:52:13Z,make_shared\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84948843,84948843,src/test/test_bitcoin.cpp
JeremyRubin,2016-10-25T16:58:11Z,"Semantics of passing shared_ptr by reference are a bit wonky. I think it is correct in this use case though. Perhaps it would be better for maintainability to eat the performance cost of an atomic increment and pass by value, or pass by const reference (if possible?).\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84950014,84950014,src/main.cpp
JeremyRubin,2016-10-25T16:58:38Z,make_shared\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84950114,84950114,src/main.cpp
JeremyRubin,2016-10-25T17:06:55Z,I think it may be worthwhile for you to make this a class and keep the implementation details hidden...\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84951636,84951636,src/main.cpp
TheBlueMatt,2016-10-25T17:13:42Z,"The shared_ptrs are to a const CBlock, and IIRC you cant blindly cast a shared_ptr<CBlock> to a shared_ptr<const CBlock>, but you need to access the block as non-const, and I kinda prefer this over a const_cast.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84953007,84953007,src/main.cpp
JeremyRubin,2016-10-25T17:32:43Z,implicit copy-cast should work...\n\n```\n#include <memory>\nint main() {\n    auto a = std::make_shared<int>(10);\n    std::shared_ptr<const int> b = a;\n}\n```\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84957095,84957095,src/main.cpp
TheBlueMatt,2016-10-25T18:06:28Z,"Cool, didnt realize that was a thing!\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84964567,84964567,src/main.cpp
TheBlueMatt,2016-10-25T18:29:28Z,"I added txConflicted here to make diffs of individual commits easier, which now requires a lot of access to the contents directly :/ Not sure its worth it.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84969535,84969535,src/main.cpp
TheBlueMatt,2016-10-25T18:29:50Z,The new version should be cleaner.\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r84969627,84969627,src/main.cpp
sipa,2016-10-26T01:06:18Z,Can you use a doxygen compatible comment here?\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85033430,85033430,src/main.cpp
sipa,2016-10-26T01:17:52Z,"This logic needs to be duplicated in the disconnect logic above. It's possible that an invalid block is received which triggers a reorg. So we start from chain A-B, and receive A-C-D, with D invalid. We'll first disconnect B, then successfully connect C, but fail when connecting D. We'll loop back then, disconnect C, and reconnect B. Your code will (I believe) report both C and B as newly connecte",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85034371,85034371,src/main.cpp
sipa,2016-10-26T01:22:46Z,Unintentional new lines?\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85034775,85034775,src/main.cpp
sipa,2016-10-26T01:32:54Z,"In my opinion, passing by reference is preferred at any time when you're sure the shared_ptr itself (not the object it points to) is only accessed from a single thread. The cost of the atomic increment is negligable here though, so I don't care in this particular case.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85035520,85035520,src/main.cpp
sipa,2016-10-26T03:07:25Z,Typo: deleted\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85042624,85042624,src/main.cpp
TheBlueMatt,2016-10-26T03:22:20Z,"Hmm? I dont believe so? Note that the callbacks in question are called from ABC after each ABCS call, and might happen for blocks which will be reorged out in the next ABCS call (this is the existing behavior).\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85043630,85043630,src/main.cpp
sipa,2016-10-26T04:27:58Z,"No, cs_main is held during the entirety of the attempted reorg here, and the callbacks only fire after the whole thing (I think).\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85047825,85047825,src/main.cpp
TheBlueMatt,2016-10-26T14:24:01Z,"I'm very confused. ActivateBestChain has always locked cs_main, called ActivateBestChainStep once, and then unlocked cs_main and made callbacks before repeating. In the old code we pushed transactions to update onto the callback queue at the end of ConnectTip and never removed them (since there will never be a DisconnectTip call within the same cs_main in ActivateBestChainStep since all Disconnect",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85133796,85133796,src/main.cpp
sipa,2016-10-26T17:21:30Z,"It seems that failed reorgs are an exception to what I said before, so ignore what I said. I think we should fix this (it could lead to GBT working on the forking point of a failed reorg), but that's outside of the scope here.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85174751,85174751,src/main.cpp
sipa,2016-10-26T17:29:20Z,"Ultranit: if you swap this line with the one above, you can pass std::move(pblockNew) to emplace_back, avoiding an atomic increment + decrement when pblockNew goes out of scope.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85176434,85176434,src/main.cpp
TheBlueMatt,2016-10-26T18:20:49Z,"No, because pblockNew is a std::shared_ptr<CBlock> not an std::shared_ptr<const CBlock>, so you must call the std::shared_ptr constructor to convert it.\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85187415,85187415,src/main.cpp
sipa,2016-10-26T18:28:20Z,I see!\n,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85189057,85189057,src/main.cpp
JeremyRubin,2016-10-26T18:49:31Z,"(if anyone else gets confused, Matt meant std::shared_ptr not std::atomic above)\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r85193453,85193453,src/main.cpp
sipa,2016-11-23T04:44:44Z,Ok (answered elsewhere).,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r89256214,89256214,src/main.cpp
sipa,2016-11-23T05:01:13Z,"This loop could be rewritten as \n```\nfor (const auto& ptx : pair.second->vtx)\n    GetMainSignals().SyncTransaction(*ptx, pair.first, i);\n```\n",https://github.com/bitcoin/bitcoin/pull/9014#discussion_r89257012,89257012,src/main.cpp
sdaftuar,2016-11-29T02:13:48Z,nit: slightly weird that the caller of ConnectTip() has to know to do this on failures.  Perhaps document this somewhere?,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r89928493,89928493,src/main.cpp
TheBlueMatt,2016-11-30T05:26:43Z,Fixed,https://github.com/bitcoin/bitcoin/pull/9014#discussion_r90170769,90170769,src/main.cpp
