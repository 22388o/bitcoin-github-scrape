[
  {
    "sha": "a17a74708ddfc8628d5943e0835ff45eb54e06b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTdhNzQ3MDhkZGZjODYyOGQ1OTQzZTA4MzVmZjQ1ZWI1NGUwNmI1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-07-25T06:58:10Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-07-28T09:48:22Z"
      },
      "message": "[RPC] Wallet: Reproduce difference of behavior between p2sh and p2wsh",
      "tree": {
        "sha": "325f318b1937ddfd35756e4173445fba564d577d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/325f318b1937ddfd35756e4173445fba564d577d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a17a74708ddfc8628d5943e0835ff45eb54e06b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a17a74708ddfc8628d5943e0835ff45eb54e06b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a17a74708ddfc8628d5943e0835ff45eb54e06b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a17a74708ddfc8628d5943e0835ff45eb54e06b5/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1124328ad1e8b1d4487d81404eff269c5373d6a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1124328ad1e8b1d4487d81404eff269c5373d6a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1124328ad1e8b1d4487d81404eff269c5373d6a7"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 58,
      "deletions": 0
    },
    "files": [
      {
        "sha": "49e8043fee6cd300d1b4e22b4546a01190820f70",
        "filename": "test/functional/segwit2.py",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a17a74708ddfc8628d5943e0835ff45eb54e06b5/test/functional/segwit2.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a17a74708ddfc8628d5943e0835ff45eb54e06b5/test/functional/segwit2.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit2.py?ref=a17a74708ddfc8628d5943e0835ff45eb54e06b5",
        "patch": "@@ -0,0 +1,57 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the SegWit changeover logic.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n+from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n+from io import BytesIO\n+\n+class SegWitTest2(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-walletprematurewitness\", \"-prematurewitness\"]]\n+\n+    def run_test(self):\n+        self.nodes[0].generate(101)\n+        sync_blocks(self.nodes)\n+\n+        use_p2wsh = False\n+\n+        transaction = \"\"\n+        scriptPubKey = \"\"\n+\n+        if use_p2wsh:\n+            scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+            transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+        else:\n+            scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+            transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+            \n+        self.nodes[0].importaddress(scriptPubKey, \"\", False)\n+        rawtxfund = self.nodes[0].fundrawtransaction(transaction)['hex']\n+\n+        rawtxfund = self.nodes[0].signrawtransaction(rawtxfund)[\"hex\"]\n+        txid = self.nodes[0].decoderawtransaction(rawtxfund)[\"txid\"]\n+\n+        self.nodes[0].sendrawtransaction(rawtxfund)\n+\n+        assert(self.nodes[0].gettransaction(txid, True)[\"txid\"]  == txid)\n+        assert(self.nodes[0].listtransactions(\"*\", 1, 0, True)[0][\"txid\"]  == txid)\n+        \n+        # Assert it is properly saved\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+\n+        assert(self.nodes[0].gettransaction(txid, True)[\"txid\"]  == txid)\n+        assert(self.nodes[0].listtransactions(\"*\", 1, 0, True)[0][\"txid\"]  == txid)\n+\n+if __name__ == '__main__':\n+    SegWitTest2().main()"
      },
      {
        "sha": "1d4583364439cf3d044c73921654eabee084bcd1",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a17a74708ddfc8628d5943e0835ff45eb54e06b5/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a17a74708ddfc8628d5943e0835ff45eb54e06b5/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a17a74708ddfc8628d5943e0835ff45eb54e06b5",
        "patch": "@@ -116,6 +116,7 @@\n     'p2p-leaktests.py',\n     'wallet-encryption.py',\n     'uptime.py',\n+    'segwit2.py'\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGM4MmFlNDU1MmRlYzdkYzlmM2ZkZTFjZDhkNmUxZjVlOTk2MjA1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-07-28T08:38:56Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-07-28T09:48:28Z"
      },
      "message": "[Wallet] TxDestination for CWitKeyID and CWitScriptID",
      "tree": {
        "sha": "fdd27230603093cfb2aa010428dea3cef9243469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdd27230603093cfb2aa010428dea3cef9243469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a17a74708ddfc8628d5943e0835ff45eb54e06b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a17a74708ddfc8628d5943e0835ff45eb54e06b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a17a74708ddfc8628d5943e0835ff45eb54e06b5"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 128,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e7a7cff56d4cf84e63822ba40c2e5814b1605142",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -222,6 +222,8 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n \n     bool operator()(const CKeyID& id) const { return addr->Set(id); }\n     bool operator()(const CScriptID& id) const { return addr->Set(id); }\n+    bool operator()(const CWitKeyID& id) const { return false; }\n+    bool operator()(const CWitScriptID& id) const { return false; }\n     bool operator()(const CNoDestination& no) const { return false; }\n };\n "
      },
      {
        "sha": "7e12fdf3198349d644805d87e88e240ab1c54a38",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -132,17 +132,52 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n         }\n         return obj;\n     }\n \n+    UniValue operator()(const CWitKeyID &witKeyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        if (pwallet && pwallet->GetPubKey(witKeyID.ToKeyID(), vchPubKey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CWitScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        if (pwallet && pwallet->GetCScript(scriptID.ToScriptID(), subscript)) {\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            UniValue a(UniValue::VARR);\n+            for (const CTxDestination& addr : addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        return obj;\n+    }\n+\n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;"
      },
      {
        "sha": "24052c75e3e357c05507a5b8dcb46dbe16352f6e",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -71,13 +71,14 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n         break;\n     case TX_WITNESS_V0_KEYHASH:\n     {\n-        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+        CWitKeyID witKeyID = CWitKeyID(uint160(vSolutions[0]));\n+        if (!keystore.HaveCScript(witKeyID.ToP2SH())) {\n             // We do not support bare witness outputs unless the P2SH version of it would be\n             // acceptable as well. This protects against matching before segwit activates.\n             // This also applies to the P2WSH case.\n             break;\n         }\n-        isminetype ret = ::IsMine(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, SIGVERSION_WITNESS_V0);\n+        isminetype ret = ::IsMine(keystore, GetScriptForDestination(witKeyID.ToKeyID()), isInvalid, SIGVERSION_WITNESS_V0);\n         if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n             return ret;\n         break;\n@@ -107,14 +108,12 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     }\n     case TX_WITNESS_V0_SCRIPTHASH:\n     {\n-        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+        CWitScriptID witScriptId = CWitScriptID(uint256(vSolutions[0]));\n+        if (!keystore.HaveCScript(witScriptId.ToP2SH())) {\n             break;\n         }\n-        uint160 hash;\n-        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n-        CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n-        if (keystore.GetCScript(scriptID, subscript)) {\n+        if (keystore.GetCScript(witScriptId.ToScriptID(), subscript)) {\n             isminetype ret = IsMine(keystore, subscript, isInvalid, SIGVERSION_WITNESS_V0);\n             if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;"
      },
      {
        "sha": "b1aab12e4c543962caa4e8e58187a7485c29eb8b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -202,6 +202,16 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n     }\n+    else if (whichType == TX_WITNESS_V0_SCRIPTHASH)\n+    {\n+        addressRet = CWitScriptID(uint256(vSolutions[0]));\n+        return true;\n+    }\n+    else if (whichType == TX_WITNESS_V0_KEYHASH)\n+    {\n+        addressRet = CWitKeyID(uint160(vSolutions[0]));\n+        return true;\n+    }\n     // Multisig txns have more than one address...\n     return false;\n }\n@@ -266,6 +276,18 @@ class CScriptVisitor : public boost::static_visitor<bool>\n         return true;\n     }\n \n+    bool operator()(const CWitKeyID &keyID) const {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(keyID);\n+        return true;\n+    }\n+\n+    bool operator()(const CWitScriptID &scriptID) const {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(scriptID);\n+        return true;\n+    }\n+\n     bool operator()(const CScriptID &scriptID) const {\n         script->clear();\n         *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;"
      },
      {
        "sha": "cee194472bf9b209ee671b37686fd894541d5c08",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 44,
        "deletions": 2,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -8,14 +8,15 @@\n \n #include \"script/interpreter.h\"\n #include \"uint256.h\"\n+#include \"pubkey.h\"\n \n #include <boost/variant.hpp>\n \n #include <stdint.h>\n \n static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n \n-class CKeyID;\n+class CWitKeyID;\n class CScript;\n \n /** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n@@ -27,6 +28,45 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n+/** A reference to a CScript: the SHA256 of its serialization (see script.h) */\n+class CWitScriptID : public uint256\n+{\n+public:\n+    CWitScriptID() : uint256() {}\n+    CWitScriptID(const uint256& in) : uint256(in) {}\n+\n+    CScriptID ToP2SH() const\n+    {\n+        return CScriptID(CScript() << OP_0 << std::vector<unsigned char>(this->begin(), this->end()));\n+    }\n+\n+    CScriptID ToScriptID() const\n+    {\n+        uint160 hash;\n+        auto value = std::vector<unsigned char>(this->begin(), this->end());\n+        CRIPEMD160().Write(&value[0], value.size()).Finalize(hash.begin());\n+        return CScriptID(hash);\n+    }\n+};\n+\n+/** A reference to a CKey: the Hash160 of its serialized witness public key */\n+class CWitKeyID : public uint160\n+{\n+public:\n+    CWitKeyID() : uint160() {}\n+    CWitKeyID(const uint160& in) : uint160(in) {}\n+\n+    /** keystore is indexing keys of p2wpkh by CScriptID, so we need a way to transform this CWitKeyID into CKeyID */\n+    CKeyID ToKeyID() const\n+    {\n+        return CKeyID(uint160(std::vector<unsigned char>(this->begin(), this->end())));\n+    }\n+    CScriptID ToP2SH() const\n+    {\n+        return CScriptID(CScript() << OP_0 << std::vector<unsigned char>(this->begin(), this->end()));\n+    }\n+};\n+\n static const unsigned int MAX_OP_RETURN_RELAY = 83; //!< bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n extern bool fAcceptDatacarrier;\n extern unsigned nMaxDatacarrierBytes;\n@@ -66,9 +106,11 @@ class CNoDestination {\n  *  * CNoDestination: no destination set\n  *  * CKeyID: TX_PUBKEYHASH destination\n  *  * CScriptID: TX_SCRIPTHASH destination\n+ *  * CWitKeyID: TX_WITNESS_V0_KEYHASH destination\n+ *  * CWitScriptID: TX_WITNESS_V0_SCRIPTHASH destination\n  *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n  */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID, CWitKeyID, CWitScriptID> CTxDestination;\n \n const char* GetTxnOutputType(txnouttype t);\n "
      },
      {
        "sha": "2446a6ae77d939e15954e98d52d84f109c9dac1f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -1156,6 +1156,16 @@ class Witnessifier : public boost::static_visitor<bool>\n         }\n         return false;\n     }\n+\n+    /* We can't witnessify what is already witnessified */\n+    bool operator()(const CWitScriptID &scriptID) {\n+        return false;\n+    }\n+\n+    /* We can't witnessify what is already witnessified */\n+    bool operator()(const CWitKeyID &keyId) {\n+        return false;\n+    }\n };\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "9314b002b5e3680c25a890f7e9e16eb4cad02f46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -3637,12 +3637,20 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n             vKeys.push_back(keyId);\n     }\n \n+    void operator()(const CWitKeyID &keyId) {}\n+\n     void operator()(const CScriptID &scriptId) {\n         CScript script;\n         if (keystore.GetCScript(scriptId, script))\n             Process(script);\n     }\n \n+    void operator()(const CWitScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId.ToP2SH(), script))\n+            Process(script);\n+    }\n+\n     void operator()(const CNoDestination &none) {}\n };\n "
      },
      {
        "sha": "530c0fb952714683b9539aceac2eb6a6ff0448ae",
        "filename": "test/functional/segwit2.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/test/functional/segwit2.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205/test/functional/segwit2.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit2.py?ref=b8c82ae4552dec7dc9f3fde1cd8d6e1f5e996205",
        "patch": "@@ -23,7 +23,7 @@ def run_test(self):\n         self.nodes[0].generate(101)\n         sync_blocks(self.nodes)\n \n-        use_p2wsh = False\n+        use_p2wsh = True\n \n         transaction = \"\"\n         scriptPubKey = \"\""
      }
    ]
  }
]