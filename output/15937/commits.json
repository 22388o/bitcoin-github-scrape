[
  {
    "sha": "642ad31b418bbf8da06cb3641329b0810e18e55b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDJhZDMxYjQxOGJiZjhkYTA2Y2IzNjQxMzI5YjA4MTBlMThlNTVi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-01T19:12:44Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-13T13:44:48Z"
      },
      "message": "Add loadwallet and createwallet RPC load_on_startup options\n\nThis maintains a persistent list of wallets stored in settings that will\nautomatically be loaded on startup. Being able to load a wallet automatically\non startup will be more useful in the GUI when the option to create wallets is\nadded in #15006, but it's reasonable to expose this feature by RPC as well.",
      "tree": {
        "sha": "ef5b18d395f7766112a330c7e126703e20bb9a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef5b18d395f7766112a330c7e126703e20bb9a27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/642ad31b418bbf8da06cb3641329b0810e18e55b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642ad31b418bbf8da06cb3641329b0810e18e55b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/642ad31b418bbf8da06cb3641329b0810e18e55b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642ad31b418bbf8da06cb3641329b0810e18e55b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d0366b47dd9b8fe29cc9a100dcdf6ca1d3cabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d0366b47dd9b8fe29cc9a100dcdf6ca1d3cabf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d0366b47dd9b8fe29cc9a100dcdf6ca1d3cabf"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 168,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ec7d355dfaf0e5e5e41a6307383769047fe32942",
        "filename": "doc/release-notes-15937.md",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/doc/release-notes-15937.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/doc/release-notes-15937.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15937.md?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -0,0 +1,12 @@\n+Configuration\n+-------------\n+\n+The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n+`load_on_startup` options that modify bitcoin's dynamic configuration in\n+`\\<datadir\\>/settings.json`, and can add or remove a wallet from the list of\n+wallets automatically loaded at startup. Unless these options are explicitly\n+set to true or false, the load on startup wallet list is not modified, so this\n+change is backwards compatible.\n+\n+In the future, the GUI will start updating the same startup wallet list as the\n+RPCs to automatically reopen wallets previously opened in the GUI."
      },
      {
        "sha": "313c1265dec28caf3bb749b100704e1577947692",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -372,6 +372,27 @@ class ChainImpl : public Chain\n         RPCRunLater(name, std::move(fn), seconds);\n     }\n     int rpcSerializationFlags() override { return RPCSerializationFlags(); }\n+    util::SettingsValue getRwSetting(const std::string& name) override\n+    {\n+        util::SettingsValue result;\n+        gArgs.LockSettings([&](const util::Settings& settings) {\n+            if (const util::SettingsValue* value = util::FindKey(settings.rw_settings, name)) {\n+                result = *value;\n+            }\n+        });\n+        return result;\n+    }\n+    bool updateRwSetting(const std::string& name, const util::SettingsValue& value) override\n+    {\n+        gArgs.LockSettings([&](util::Settings& settings) {\n+            if (value.isNull()) {\n+                settings.rw_settings.erase(name);\n+            } else {\n+                settings.rw_settings[name] = value;\n+            }\n+        });\n+        return gArgs.WriteSettingsFile();\n+    }\n     void requestMempoolTransactions(Notifications& notifications) override\n     {\n         LOCK2(::cs_main, ::mempool.cs);"
      },
      {
        "sha": "053d40335f2af03378793e549263dac7db994518",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <optional.h>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n+#include <util/settings.h>          // For util::SettingsValue\n \n #include <functional>\n #include <memory>\n@@ -269,6 +270,12 @@ class Chain\n     //! Current RPC serialization flags.\n     virtual int rpcSerializationFlags() = 0;\n \n+    //! Return <datadir>/settings.json setting value.\n+    virtual util::SettingsValue getRwSetting(const std::string& name) = 0;\n+\n+    //! Write a setting to <datadir>/settings.json.\n+    virtual bool updateRwSetting(const std::string& name, const util::SettingsValue& value) = 0;\n+\n     //! Synchronously send transactionAddedToMempool notifications about all\n     //! current mempool transactions to the specified handler and return after\n     //! the last one is sent. These notifications aren't coordinated with async"
      },
      {
        "sha": "4d08671bd287d648d9b113959a811a502e774e82",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -173,6 +173,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 2, \"blank\"},\n     { \"createwallet\", 4, \"avoid_reuse\"},\n     { \"createwallet\", 5, \"descriptors\"},\n+    { \"createwallet\", 6, \"load_on_startup\"},\n+    { \"loadwallet\", 1, \"load_on_startup\"},\n+    { \"unloadwallet\", 1, \"load_on_startup\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"addpeeraddress\", 1, \"port\"},\n     { \"stop\", 0, \"wait\" },"
      },
      {
        "sha": "4c1fe57c66dbf5b018018e83f62df982a8b6c293",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -9,6 +9,7 @@\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <outputtype.h>\n+#include <univalue.h>\n #include <util/check.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n@@ -118,6 +119,14 @@ void WalletInit::Construct(NodeContext& node) const\n         LogPrintf(\"Wallet disabled!\\n\");\n         return;\n     }\n-    args.SoftSetArg(\"-wallet\", \"\");\n+    // If there's no -wallet setting with a list of wallets to load, set it to\n+    // load the default \"\" wallet.\n+    if (!args.IsArgSet(\"wallet\")) {\n+        args.LockSettings([&](util::Settings& settings) {\n+            util::SettingsValue wallets(util::SettingsValue::VARR);\n+            wallets.push_back(\"\"); // Default wallet name is \"\"\n+            settings.rw_settings[\"wallet\"] = wallets;\n+        });\n+    }\n     node.chain_clients.emplace_back(interfaces::MakeWalletClient(*node.chain, args, args.GetArgs(\"-wallet\")));\n }"
      },
      {
        "sha": "ae14769edbd9a0f5a774d70b4ee6b6f26832b861",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -13,6 +13,8 @@\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n \n+#include <univalue.h>\n+\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n {\n     if (gArgs.IsArgSet(\"-walletdir\")) {\n@@ -120,3 +122,26 @@ void UnloadWallets()\n         UnloadWallet(std::move(wallet));\n     }\n }\n+\n+bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n+{\n+    util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n+    if (!setting_value.isArray()) setting_value.setArray();\n+    for (const util::SettingsValue& value : setting_value.getValues()) {\n+        if (value.isStr() && value.get_str() == wallet_name) return true;\n+    }\n+    setting_value.push_back(wallet_name);\n+    return chain.updateRwSetting(\"wallet\", setting_value);\n+}\n+\n+bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n+{\n+    util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n+    if (!setting_value.isArray()) return true;\n+    util::SettingsValue new_value(util::SettingsValue::VARR);\n+    for (const util::SettingsValue& value : setting_value.getValues()) {\n+        if (!value.isStr() || value.get_str() != wallet_name) new_value.push_back(value);\n+    }\n+    if (new_value.size() == setting_value.size()) return true;\n+    return chain.updateRwSetting(\"wallet\", new_value);\n+}"
      },
      {
        "sha": "30f1a4c90d56deae9f554274669a58a120686f43",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -34,4 +34,10 @@ void StopWallets();\n //! Close all wallets.\n void UnloadWallets();\n \n+//! Add wallet name to persistent configuration so it will be loaded on startup.\n+bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n+\n+//! Remove wallet name from persistent configuration so it will not be loaded on startup.\n+bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n+\n #endif // BITCOIN_WALLET_LOAD_H"
      },
      {
        "sha": "8be1e333e41717a937f89f13d1a320219680dc6a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 5,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -30,6 +30,7 @@\n #include <wallet/coincontrol.h>\n #include <wallet/context.h>\n #include <wallet/feebumper.h>\n+#include <wallet/load.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -229,6 +230,18 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n     }\n }\n \n+static void UpdateWalletSetting(interfaces::Chain& chain,\n+                                const std::string& wallet_name,\n+                                const UniValue& load_on_startup,\n+                                std::vector<bilingual_str>& warnings)\n+{\n+    if (load_on_startup.isTrue() && !AddWalletSetting(chain, wallet_name)) {\n+        warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may not be loaded next node startup.\"));\n+    } else if (load_on_startup.isFalse() && !RemoveWalletSetting(chain, wallet_name)) {\n+        warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may still be loaded next node startup.\"));\n+    }\n+}\n+\n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"getnewaddress\",\n@@ -2484,6 +2497,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 \"\\napplied to the new wallet (eg -zapwallettxes, rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n+                    {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -2516,6 +2530,8 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n     std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, location, error, warnings);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n+    UpdateWalletSetting(*context.chain, location.GetName(), request.params[1], warnings);\n+\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n@@ -2600,6 +2616,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n             {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n+            {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -2655,6 +2672,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         // no default case, so the compiler can warn about missing cases\n     }\n \n+    UpdateWalletSetting(*context.chain, request.params[0].get_str(), request.params[6], warnings);\n+\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n@@ -2669,8 +2688,11 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n+                    {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n                 },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                RPCResult{RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"warning\", \"Warning message if wallet was not unloaded cleanly.\"},\n+                }},\n                 RPCExamples{\n                     HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n             + HelpExampleRpc(\"unloadwallet\", \"wallet_name\")\n@@ -2698,9 +2720,15 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Requested wallet already unloaded\");\n     }\n \n+    interfaces::Chain& chain = wallet->chain();\n+    std::vector<bilingual_str> warnings;\n+\n     UnloadWallet(std::move(wallet));\n+    UpdateWalletSetting(chain, wallet_name, request.params[1], warnings);\n \n-    return NullUniValue;\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n+    return result;\n }\n \n static UniValue listunspent(const JSONRPCRequest& request)\n@@ -4158,7 +4186,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n     { \"wallet\",             \"psbtbumpfee\",                      &psbtbumpfee,                   {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\", \"load_on_startup\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n@@ -4191,7 +4219,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwalletdir\",                    &listwalletdir,                 {} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n-    { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },\n+    { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\", \"load_on_startup\"} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n@@ -4203,7 +4231,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"setwalletflag\",                    &setwalletflag,                 {\"flag\",\"value\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n-    { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\"} },\n+    { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\", \"load_on_startup\"} },\n     { \"wallet\",             \"upgradewallet\",                    &upgradewallet,                 {\"version\"} },\n     { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n     { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },"
      },
      {
        "sha": "5eba554a427d66b7f8040117f4c2fbef128edf13",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -650,10 +650,10 @@ def __init__(self, rpc, cli=False, descriptors=False):\n     def __getattr__(self, name):\n         return getattr(self.rpc, name)\n \n-    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None):\n+    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None, load_on_startup=None):\n         if descriptors is None:\n             descriptors = self.descriptors\n-        return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors)\n+        return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors, load_on_startup)\n \n     def importprivkey(self, privkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()"
      },
      {
        "sha": "c7b51fff0c5b62bf87b48f07f4eb2e2ad15566d3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -243,6 +243,7 @@\n     'p2p_node_network_limited.py',\n     'p2p_permissions.py',\n     'feature_blocksdir.py',\n+    'wallet_startup.py',\n     'feature_config_args.py',\n     'feature_settings.py',\n     'rpc_getdescriptorinfo.py',"
      },
      {
        "sha": "cfc4edb8ee05ad1a61ba7c4a1b014710bb26e96c",
        "filename": "test/functional/wallet_startup.py",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642ad31b418bbf8da06cb3641329b0810e18e55b/test/functional/wallet_startup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642ad31b418bbf8da06cb3641329b0810e18e55b/test/functional/wallet_startup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_startup.py?ref=642ad31b418bbf8da06cb3641329b0810e18e55b",
        "patch": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet load on startup.\n+\n+Verify that a bitcoind node can maintain list of wallets loading on startup\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+\n+class WalletStartupTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(wallet_name='w0', load_on_startup=True)\n+        self.nodes[0].createwallet(wallet_name='w1', load_on_startup=False)\n+        self.nodes[0].createwallet(wallet_name='w2', load_on_startup=True)\n+        self.nodes[0].createwallet(wallet_name='w3', load_on_startup=False)\n+        self.nodes[0].createwallet(wallet_name='w4', load_on_startup=False)\n+        self.nodes[0].unloadwallet(wallet_name='w0', load_on_startup=False)\n+        self.nodes[0].unloadwallet(wallet_name='w4', load_on_startup=False)\n+        self.nodes[0].loadwallet(filename='w4', load_on_startup=True)\n+        assert_equal(set(self.nodes[0].listwallets()), set(('', 'w1', 'w2', 'w3', 'w4')))\n+        self.restart_node(0)\n+        assert_equal(set(self.nodes[0].listwallets()), set(('', 'w2', 'w4')))\n+        self.nodes[0].unloadwallet(wallet_name='', load_on_startup=False)\n+        self.nodes[0].unloadwallet(wallet_name='w4', load_on_startup=False)\n+        self.nodes[0].loadwallet(filename='w3', load_on_startup=True)\n+        self.nodes[0].loadwallet(filename='')\n+        self.restart_node(0)\n+        assert_equal(set(self.nodes[0].listwallets()), set(('w2', 'w3')))\n+\n+if __name__ == '__main__':\n+    WalletStartupTest().main()"
      }
    ]
  }
]