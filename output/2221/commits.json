[
  {
    "sha": "f369d02c51077ffa1644954d0478e93966e1bb72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzY5ZDAyYzUxMDc3ZmZhMTY0NDk1NGQwNDc4ZTkzOTY2ZTFiYjcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-20T17:05:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-26T17:46:12Z"
      },
      "message": "Various performance tweaks to CCoinsView\n\n* Pass txid's to CCoinsView functions by reference instead of by value\n* Add a method to swap CCoins, and use it in some places to avoid a\n  allocating copy + destruct.\n* Optimize CCoinsViewCache::FetchCoins to do only a single search\n  through the backing map.",
      "tree": {
        "sha": "2d4d583878dae9762388a890a8d64d355d09ceef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d4d583878dae9762388a890a8d64d355d09ceef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f369d02c51077ffa1644954d0478e93966e1bb72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f369d02c51077ffa1644954d0478e93966e1bb72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f369d02c51077ffa1644954d0478e93966e1bb72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f369d02c51077ffa1644954d0478e93966e1bb72/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71eccdeafff03a1c68c93b223427141f0885efc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71eccdeafff03a1c68c93b223427141f0885efc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71eccdeafff03a1c68c93b223427141f0885efc6"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 47,
      "deletions": 37
    },
    "files": [
      {
        "sha": "212240ec2226044479d60a99585346943331a67d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 18,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f369d02c51077ffa1644954d0478e93966e1bb72/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f369d02c51077ffa1644954d0478e93966e1bb72/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f369d02c51077ffa1644954d0478e93966e1bb72",
        "patch": "@@ -171,19 +171,19 @@ void static ResendWalletTransactions()\n // CCoinsView implementations\n //\n \n-bool CCoinsView::GetCoins(uint256 txid, CCoins &coins) { return false; }\n-bool CCoinsView::SetCoins(uint256 txid, const CCoins &coins) { return false; }\n-bool CCoinsView::HaveCoins(uint256 txid) { return false; }\n+bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) { return false; }\n+bool CCoinsView::SetCoins(const uint256 &txid, const CCoins &coins) { return false; }\n+bool CCoinsView::HaveCoins(const uint256 &txid) { return false; }\n CBlockIndex *CCoinsView::GetBestBlock() { return NULL; }\n bool CCoinsView::SetBestBlock(CBlockIndex *pindex) { return false; }\n bool CCoinsView::BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockIndex *pindex) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) { return false; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n-bool CCoinsViewBacked::GetCoins(uint256 txid, CCoins &coins) { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::SetCoins(uint256 txid, const CCoins &coins) { return base->SetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(uint256 txid) { return base->HaveCoins(txid); }\n+bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) { return base->GetCoins(txid, coins); }\n+bool CCoinsViewBacked::SetCoins(const uint256 &txid, const CCoins &coins) { return base->SetCoins(txid, coins); }\n+bool CCoinsViewBacked::HaveCoins(const uint256 &txid) { return base->HaveCoins(txid); }\n CBlockIndex *CCoinsViewBacked::GetBestBlock() { return base->GetBestBlock(); }\n bool CCoinsViewBacked::SetBestBlock(CBlockIndex *pindex) { return base->SetBestBlock(pindex); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n@@ -192,7 +192,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) { return base->GetStats(stat\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), pindexTip(NULL) { }\n \n-bool CCoinsViewCache::GetCoins(uint256 txid, CCoins &coins) {\n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n     if (cacheCoins.count(txid)) {\n         coins = cacheCoins[txid];\n         return true;\n@@ -204,29 +204,30 @@ bool CCoinsViewCache::GetCoins(uint256 txid, CCoins &coins) {\n     return false;\n }\n \n-std::map<uint256,CCoins>::iterator CCoinsViewCache::FetchCoins(uint256 txid) {\n-    std::map<uint256,CCoins>::iterator it = cacheCoins.find(txid);\n-    if (it != cacheCoins.end())\n+std::map<uint256,CCoins>::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+    std::map<uint256,CCoins>::iterator it = cacheCoins.lower_bound(txid);\n+    if (it != cacheCoins.end() && it->first == txid)\n         return it;\n     CCoins tmp;\n     if (!base->GetCoins(txid,tmp))\n-        return it;\n-    std::pair<std::map<uint256,CCoins>::iterator,bool> ret = cacheCoins.insert(std::make_pair(txid, tmp));\n-    return ret.first;\n+        return cacheCoins.end();\n+    std::map<uint256,CCoins>::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n+    tmp.swap(ret->second);\n+    return ret;\n }\n \n-CCoins &CCoinsViewCache::GetCoins(uint256 txid) {\n+CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n     std::map<uint256,CCoins>::iterator it = FetchCoins(txid);\n     assert(it != cacheCoins.end());\n     return it->second;\n }\n \n-bool CCoinsViewCache::SetCoins(uint256 txid, const CCoins &coins) {\n+bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n     cacheCoins[txid] = coins;\n     return true;\n }\n \n-bool CCoinsViewCache::HaveCoins(uint256 txid) {\n+bool CCoinsViewCache::HaveCoins(const uint256 &txid) {\n     return FetchCoins(txid) != cacheCoins.end();\n }\n \n@@ -263,7 +264,7 @@ unsigned int CCoinsViewCache::GetCacheSize() {\n     It does not check for spendings by memory pool transactions. */\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n-bool CCoinsViewMemPool::GetCoins(uint256 txid, CCoins &coins) {\n+bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) {\n     if (base->GetCoins(txid, coins))\n         return true;\n     if (mempool.exists(txid)) {\n@@ -274,7 +275,7 @@ bool CCoinsViewMemPool::GetCoins(uint256 txid, CCoins &coins) {\n     return false;\n }\n \n-bool CCoinsViewMemPool::HaveCoins(uint256 txid) {\n+bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) {\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }\n "
      },
      {
        "sha": "d5f7093e42c03c6176fe3bb96a5886526d0f45ea",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 22,
        "deletions": 13,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f369d02c51077ffa1644954d0478e93966e1bb72/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f369d02c51077ffa1644954d0478e93966e1bb72/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f369d02c51077ffa1644954d0478e93966e1bb72",
        "patch": "@@ -918,6 +918,15 @@ class CCoins\n     void Cleanup() {\n         while (vout.size() > 0 && vout.back().IsNull())\n             vout.pop_back();\n+        if (vout.empty())\n+            std::vector<CTxOut>().swap(vout);\n+    }\n+\n+    void swap(CCoins &to) {\n+        std::swap(to.fCoinBase, fCoinBase);\n+        to.vout.swap(vout);\n+        std::swap(to.nHeight, nHeight);\n+        std::swap(to.nVersion, nVersion);\n     }\n \n     // equality test\n@@ -2077,14 +2086,14 @@ class CCoinsView\n {\n public:\n     // Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(uint256 txid, CCoins &coins);\n+    virtual bool GetCoins(const uint256 &txid, CCoins &coins);\n \n     // Modify the CCoins for a given txid\n-    virtual bool SetCoins(uint256 txid, const CCoins &coins);\n+    virtual bool SetCoins(const uint256 &txid, const CCoins &coins);\n \n     // Just check whether we have data for a given txid.\n     // This may (but cannot always) return true for fully spent transactions\n-    virtual bool HaveCoins(uint256 txid);\n+    virtual bool HaveCoins(const uint256 &txid);\n \n     // Retrieve the block index whose state this CCoinsView currently represents\n     virtual CBlockIndex *GetBestBlock();\n@@ -2110,9 +2119,9 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView &viewIn);\n-    bool GetCoins(uint256 txid, CCoins &coins);\n-    bool SetCoins(uint256 txid, const CCoins &coins);\n-    bool HaveCoins(uint256 txid);\n+    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool SetCoins(const uint256 &txid, const CCoins &coins);\n+    bool HaveCoins(const uint256 &txid);\n     CBlockIndex *GetBestBlock();\n     bool SetBestBlock(CBlockIndex *pindex);\n     void SetBackend(CCoinsView &viewIn);\n@@ -2131,17 +2140,17 @@ class CCoinsViewCache : public CCoinsViewBacked\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n \n     // Standard CCoinsView methods\n-    bool GetCoins(uint256 txid, CCoins &coins);\n-    bool SetCoins(uint256 txid, const CCoins &coins);\n-    bool HaveCoins(uint256 txid);\n+    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool SetCoins(const uint256 &txid, const CCoins &coins);\n+    bool HaveCoins(const uint256 &txid);\n     CBlockIndex *GetBestBlock();\n     bool SetBestBlock(CBlockIndex *pindex);\n     bool BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockIndex *pindex);\n \n     // Return a modifiable reference to a CCoins. Check HaveCoins first.\n     // Many methods explicitly require a CCoinsViewCache because of this method, to reduce\n     // copying.\n-    CCoins &GetCoins(uint256 txid);\n+    CCoins &GetCoins(const uint256 &txid);\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten.\n@@ -2151,7 +2160,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     unsigned int GetCacheSize();\n \n private:\n-    std::map<uint256,CCoins>::iterator FetchCoins(uint256 txid);\n+    std::map<uint256,CCoins>::iterator FetchCoins(const uint256 &txid);\n };\n \n /** CCoinsView that brings transactions from a memorypool into view.\n@@ -2163,8 +2172,8 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n \n public:\n     CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn);\n-    bool GetCoins(uint256 txid, CCoins &coins);\n-    bool HaveCoins(uint256 txid);\n+    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool HaveCoins(const uint256 &txid);\n };\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */"
      },
      {
        "sha": "ca4e6c9bd8631e49c30a9b8523cb7790946950a1",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f369d02c51077ffa1644954d0478e93966e1bb72/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f369d02c51077ffa1644954d0478e93966e1bb72/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f369d02c51077ffa1644954d0478e93966e1bb72",
        "patch": "@@ -22,17 +22,17 @@ void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coins\", nCacheSize, fMemory, fWipe) {\n }\n \n-bool CCoinsViewDB::GetCoins(uint256 txid, CCoins &coins) { \n+bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) { \n     return db.Read(make_pair('c', txid), coins); \n }\n \n-bool CCoinsViewDB::SetCoins(uint256 txid, const CCoins &coins) {\n+bool CCoinsViewDB::SetCoins(const uint256 &txid, const CCoins &coins) {\n     CLevelDBBatch batch;\n     BatchWriteCoins(batch, txid, coins);\n     return db.WriteBatch(batch);\n }\n \n-bool CCoinsViewDB::HaveCoins(uint256 txid) {\n+bool CCoinsViewDB::HaveCoins(const uint256 &txid) {\n     return db.Exists(make_pair('c', txid)); \n }\n "
      },
      {
        "sha": "47496eddbaac46a91692993f5fb3c52ce4c4bb9f",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f369d02c51077ffa1644954d0478e93966e1bb72/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f369d02c51077ffa1644954d0478e93966e1bb72/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=f369d02c51077ffa1644954d0478e93966e1bb72",
        "patch": "@@ -16,9 +16,9 @@ class CCoinsViewDB : public CCoinsView\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool GetCoins(uint256 txid, CCoins &coins);\n-    bool SetCoins(uint256 txid, const CCoins &coins);\n-    bool HaveCoins(uint256 txid);\n+    bool GetCoins(const uint256 &txid, CCoins &coins);\n+    bool SetCoins(const uint256 &txid, const CCoins &coins);\n+    bool HaveCoins(const uint256 &txid);\n     CBlockIndex *GetBestBlock();\n     bool SetBestBlock(CBlockIndex *pindex);\n     bool BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockIndex *pindex);"
      }
    ]
  }
]