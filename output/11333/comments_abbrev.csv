gmaxwell,2017-09-14T23:24:30Z,Or maybe sort works in place and nth_element copies to build a heap and is actually 10x slower when we're only talking about 11 items.  If the justification is performance you should at least give it a casual test. ,https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329635364,329635364,
danra,2017-09-15T07:33:17Z,"@gmaxwell @MeshCollider Added a (not for merge) benchmark commit showing the median is faster even for such a short length.\n\nOn my machine, bench_bitcoin gives\nSmallMedian,184549376,0.000000005698851,0.000000006605831,0.000000005873540,14,16,14\nSmallSort,134217728,0.000000007392771,0.000000009320686,0.000000008182214,18,23,20\n",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329705414,329705414,
laanwj,2017-09-15T11:06:54Z,"This changes consensus-critical code, so it will have to be carefully tested that this returns the same in all cases.\nTo see if this is warranted, we need a more global benchmark as well - e.g. what % of the validation time is spent in this function?",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329751980,329751980,
danra,2017-09-15T11:14:54Z,"@laanwj My guess is very little - but in case your guess is different and you think even some small  percentage could be gained, let me know and I'll try to benchmark that.\n\nMy initial motivation was not performance gain, rather to make the semantics a bit clearer, but it makes sense that that's not a strong enough argument to change consensus critical code.",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329753492,329753492,
gmaxwell,2017-09-15T16:05:17Z,@danra Thanks!  I am not shocked but always good to see!  will review further.,https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329826283,329826283,
jnewbery,2017-09-15T17:00:14Z,"I'd tend to NACK changes like this, unless there's a significant performance gain. I'm especially not keen on the gratuitous style changes (why prefer `auto*` over `int64_t*`?)\n\n",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329839973,329839973,
danra,2017-09-15T21:23:51Z,"@jnewbery The rationale is simple: `auto* pbegin = &pmedian[11];` conveys the concise intention of having a pointer to an object representing time. `int64_t* pbegin = &pmedian[11];` conveys the less concise intention of having a pointer to an object representing time, and that you expect this object to be `int64_t`. In the context of `GetMedianTimePast()`, you don't really care about the exact tim",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329907614,329907614,
jnewbery,2017-09-15T21:33:26Z,"@danra thanks for the nice explanation. There are different views on when `auto` is appropriate (see https://botbot.me/freenode/bitcoin-core-dev/2017-02-02/?msg=80353999 for example). I personally would prefer that it not get used for simple types like `int64_t`.\n\nThe project doesn't have style guidelines for `auto`. Changing existing, functioning code to match your personal preferences seems ",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329909407,329909407,
danra,2017-09-15T21:38:28Z,"@jnewbery It's not a personal preference, it's better code semantics in this case.\n\n> I personally would prefer that it not get used for simple types like int64_t.\n\nWhy?",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329910290,329910290,
jnewbery,2017-09-15T21:48:49Z,"> Why?\n\nBecause in general I think explicit is better than implicit. But you seem to have more C++ experience than me, so I may just be wrong :)\n\nIn any case, `auto` should compile to the same thing and there's no preference expressed in the project style guide, so in general I'd expect there to be a pretty strong argument to make changes (especially as this is consensus code).\n\nAnyway",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329912117,329912117,
theuni,2017-09-15T22:06:32Z,"NACK. Not that it's not a readability improvement, but it's just not worth the risk of some freak divergence.\n\nAlso, while I personally agree with your use of auto in general:\n> @jnewbery It's not a personal preference, it's better code semantics in this case.\n\nBetter is subjective. Please keep in mind that there are many ways to measure the code.",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329915379,329915379,
danra,2017-09-15T22:13:49Z,"@theuni I specifically wrote ""better code semantics"". You're welcome to mention any contrasting argument for why mentioning the specific type has better semantics than using `auto` in this case.",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329916449,329916449,
promag,2017-09-15T22:28:54Z,"NACK. IMHO more code to read, test and maintain vs sort 11 elements worst case.",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329918524,329918524,
sipa,2017-09-15T23:00:51Z,"If we're going to rewrite this anyway, I think this code can be simplified further:\n\n```c++\nint64_t GetMedianTimePast() const\n{\n    int64_t median[nMedianTimeSpan];\n    size_t count = 0;\n    const CBlockIndex* index = this;\n    while (count < nMedianTimeSpan && index) {\n        median[count++] = index->GetBlockTime();\n        index = index->pprev;\n    }\n    std::nth_element",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329922747,329922747,
gmaxwell,2017-09-15T23:21:07Z,"FWIW, I was in the process of writing something pretty much like sipa's suggestion in english (though using std::begin())-- with the suggestion of reducing the very C-ish references to array members and pointer arithmetic.   (Also.. comma operator? meh....)\n\nAs far as the use of auto:  The principle I think we prefer to follow is that explicit is better than implicit, except where explicit cre",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329925137,329925137,
laanwj,2017-09-16T07:06:57Z,">  In the context of GetMedianTimePast(), you don't really care about the exact time type. \n\nFor a generic function that would be true - but because this is consensus code, we really strongly care about the exact types and everything, and shouldn't leave anything to the compiler.\n\nDue to the high risk I'd personally prefer not to do this change, or another rewrite of the function, unless t",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329951157,329951157,
danra,2017-09-16T08:32:39Z,"@gmaxwell @laanwj Explicit is better than implicit in this context when you want to commit to a type. If what you're interested in doing is just tracking a type, it is a violation of DRY.\n\nIn the consensus code, I think there's a trade-off. You can re-commit to types as you go, but that makes the code less concise and more resistant to change, and as a consequence *less* secure, IMHO. The adva",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329954873,329954873,
gmaxwell,2017-09-16T16:25:30Z,"> and as a consequence less secure, \n\nMixing up the types as you change things in cases like this will be caught by the compiler. Which is also a helpful signal that you're being careless.   I agree it's debatable but in general we prefer to be explicit where it doesn't really harm generality or make a mess by repeating a complex type signature. I think we've found it aids review.  \n\n>  so",https://github.com/bitcoin/bitcoin/pull/11333#issuecomment-329978713,329978713,
