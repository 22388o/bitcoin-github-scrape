amitiuttarwar,2020-01-31 05:52:14,"Some relevant info about the analysis of the cost (maintenance burden) vs benefit (supporting a better tested & simpler codebase) of these changes \n\n**pros:**\n- these changes add a function to the scheduler with unit test coverage\n- the function would only be used when running regtest\n- intent is for this to support easier functional testing for other features \n- currently, two explici",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-580593078,580593078,
JeremyRubin,2020-01-31 06:09:40,"utACK 58c4c19.\n\nThis seems like a generally useful test harness, and the code looks basically correct to me. I think the pointer to the scheduler is a little crass, but it isn't a bad option considering the scheduler is created as a static in init.cpp (someone can clean it up later if they make the schedule a non static).\n\nThe time delta technically could underflow, but I don't think that'",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-580596981,580596981,
fanquake,2020-01-31 06:24:43,"Concept ACK. \n\nLooks like there's an issue with the new `mockforward` unit test, as most of the [Travis instances](https://travis-ci.org/bitcoin/bitcoin/builds/644207906) are failing:\n```bash\ntest/scheduler_tests.cpp(158): Entering test case ""mockforward""\ntest/scheduler_tests.cpp(188): error: in ""scheduler_tests/mockforward"": check num_tasks == 1 has failed [3 != 1]\ntest/scheduler_test",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-580600650,580600650,
DrahtBot,2020-01-31 08:40:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18038 (P2P: Mempool tracks locally submitted transactions to improve privacy by amitiuttarwar)\n* #17997 (refactor: Remov",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-580639273,580639273,
MarcoFalke,2020-01-31 09:12:59,"No objection, but some observations:\n\n* In light of the test failures on some platforms, we obviously need to make sure this is doing the right thing. Timestamp handling isn't obviously trivial especially in combination with condition variables. See also the numerous scheduler crashed that no one can explain: #16307, #16027, #14200, ...\n\n* ""Mocking"" code so that tests run the mocked code a",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-580650220,580650220,
amitiuttarwar,2020-02-05 17:00:54,"I addressed review comments & tests are now passing CI. Added checks in RPC function & scheduler function to ensure reasonable values / no underflow.\n\nThis PR has received 3 ACKs - utACK from @JeremyRubin & concept ACKs from @promag @fanquake. Would appreciate re-review üôèüèΩ",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-582507502,582507502,
JeremyRubin,2020-02-05 18:39:36,re-utACK ecb0ad5,https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-582551040,582551040,
JeremyRubin,2020-02-06 02:32:02,"@promag I think it's reasonable that the mockscheduler RPC doesn't have coverage presently -- @amitiuttarwar has a larger project that this testing harness was extracted from as a reviewable chunk, a later PR will be using it extensively to test rebroadcasting logic (see https://github.com/bitcoin/bitcoin/pull/18038). I think it's reasonable that the coverage in RPC tests lives there & there isn't",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-582707742,582707742,
amitiuttarwar,2020-02-06 20:15:16,"thanks for review @promag!\n\nRE testing mockscheduler RPC- as @JeremyRubin mentioned, my next PR uses it [here](https://github.com/bitcoin/bitcoin/pull/18038/files?file-filters%5B%5D=.py#diff-5e6f5e6aab04f82ec4b58148c4bdec72R68) , so the happy path will be tested. But if you prefer separate explicit test coverage, I can add. \n\nI'll incorporate style nits if I push & invalidate current ACKs ",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-583089349,583089349,
amitiuttarwar,2020-02-07 18:19:58,"changes: \n- `mockscheduler` rpc updated to use new `m_is_mockable_chain` chainparams property instead of `MineBlocksOnDemand`\n- added checks to `mockscheduler` and `MockForward` methods to ensure `delta_seconds` is within acceptable range \n\nother comments: \n-  considered adding functional test to test `mockscheduler` rpc, but testing the success case would require actually invoking somet",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-583538538,583538538,
amitiuttarwar,2020-02-07 19:01:43,"s390x travis build is failing with ""Disk space is too low!"" error. everything else is green \n\nappveyor `wallet_resendwallettransactions.py` failed, seems unlikely that its related but not impossible since `MaybeResendWalletTxs` is called by the scheduler. investigating.",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-583556148,583556148,
amitiuttarwar,2020-02-11 23:55:07,"Thank you for the review @MarcoFalke ! I addressed your concerns in a commit (with one open question), currently opened as a PR on my fork: https://github.com/amitiuttarwar/bitcoin/pull/2, will make as a follow up PR if this one gets accepted. \n\nTried to investigate the appveyor failure and cannot see how it could possibly be related to my changes. ",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-584925124,584925124,
MarcoFalke,2020-02-12 01:57:31,"I'd prefer to fixup the style fixes you want to make into the commits in this pull or not do them at all. Splitting them into a separate pull only causes noise in the git history and on GitHub.\n\nRationale is that we generally discourage style-only pull requests.",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-584979334,584979334,
amitiuttarwar,2020-02-12 20:06:28,"incorporated style updates & made `NodeContext.scheduler` a `unique_ptr` instead of raw pointer. \n\nupdate: Travis build failing on my new test. Working on debugging.",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-585393655,585393655,
MarcoFalke,2020-02-13 14:12:42,"Looks like travis fails with the boost exception ""invalid argument"" (https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-580650220)\n\n\n```\nRunning 3 test cases...\n\nTest cases order is shuffled using seed: 902768437\n\nEntering test module ""Bitcoin Core Test Suite""\n\ntest/scheduler_tests.cpp(11): Entering test suite ""scheduler_tests""\n\ntest/scheduler_tests.cpp(112): Enteri",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-585773643,585773643,
amitiuttarwar,2020-02-13 15:40:52,yup :( I'm investigating. ,https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-585821772,585821772,
MarcoFalke,2020-02-18 01:00:00,"ACK 8bca30ea17cd4c1dacee28eaa27e5fa3493b021d, only change is some style fixups üïì\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 8bca30ea17cd4c1dacee28eaa27e5fa3493b021d, only change is some style fixups üïì\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQz",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-587225814,587225814,
jonasschnelli,2020-02-19 17:39:35,"This PR seems to have made bitcoinbuilds.org pretty unhappy:\n\n```\n  what():  boost::condition_variable::do_wait_until failed in pthread_cond_timedwait: Invalid argument\nunknown location(0): fatal error: in ""scheduler_tests/mockforward"": signal: SIGABRT (application abort requested)\ntest/scheduler_tests.cpp(172): last checkpoint\n```\nExample build:\nhttps://bitcoinbuilds.org/index.php",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-588348216,588348216,
MarcoFalke,2020-02-19 18:02:36,@jonasschnelli See #18174,https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-588359944,588359944,
jonasschnelli,2020-02-19 18:05:30,@MarcoFalke: I guess you where trying to refer to #18174. Looking into that now...,https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-588361380,588361380,
jonasschnelli,2020-02-19 18:26:14,"Master (`Linux 64 depends tests`) fails when using ccache cache (seems to be reproducible 100%):\nhttps://bitcoinbuilds.org/index.php?job=c1d3a0f5-7d47-40e6-9c9b-cac397c5ff30\n\nMaster succeeds when clearing the ccache cache (but keeping the dependency cache):\nhttps://bitcoinbuilds.org/index.php?job=f28f0356-d431-4428-832b-49bc870042f5",https://github.com/bitcoin/bitcoin/pull/18037#issuecomment-588371299,588371299,
kristapsk,2020-02-01 16:56:00,"nit: ""mockscheduler **is** for regression testing (-regtest mode) only""?",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373789747,373789747,src/rpc/misc.cpp
promag,2020-02-02 23:56:43,"5c9d5bed7205161d6870d199d223af37efe66179\n\nnit, space before `{`.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373886512,373886512,src/scheduler.cpp
promag,2020-02-03 00:04:13,"58c4c1943e082060f38054ed4738478635ab9c31\n\nnit, keep sorted.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373886976,373886976,src/node/context.h
promag,2020-02-03 00:05:01,"58c4c1943e082060f38054ed4738478635ab9c31\n\nnit, keep sorted.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373887012,373887012,src/rpc/misc.cpp
promag,2020-02-03 00:08:00,"58c4c1943e082060f38054ed4738478635ab9c31\n\nWhy is this included?",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373887202,373887202,src/rpc/misc.cpp
promag,2020-02-03 00:11:00,"58c4c1943e082060f38054ed4738478635ab9c31\n\nMaybe check `delta_time > 0`?",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373887397,373887397,src/rpc/misc.cpp
promag,2020-02-03 00:19:02,"ca57312e5b0dc9d28766369b963395f1690e0b4f\n\nMaybe change this to:\n```cpp\nscheduler.scheduleFromNow([&]{ scheduler.stop(false); }, 1);\n```\nand remove the sleep above.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r373887966,373887966,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-05 03:05:08,good catch. was left over from a previous iteration ,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375038347,375038347,src/rpc/misc.cpp
amitiuttarwar,2020-02-05 03:09:03,"clever. thank you! \n\nlets see if travis likes it ü§ûüèΩ",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375039093,375039093,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-05 05:43:39,yay! looking good. only travis failure seemed unrelated.,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375068638,375068638,src/test/scheduler_tests.cpp
promag,2020-02-05 18:51:16,"Follow up, would be cool to skip this when !regtest and in `mockscheduler` would be `assert(Params().MineBlocksOnDemand())`.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375441938,375441938,src/rpc/misc.cpp
promag,2020-02-06 00:26:10,"What's the problem of doing\n```cpp\ntemp_queue.emplace_hint(temp_queue.cend(), element.first - delta_seconds, element.second);\n```\nLooks fine to me since `wait_until` returns when system time is later than that absolute time.\n\nDidn't check the case for boost < 1.50.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375582987,375582987,src/scheduler.cpp
promag,2020-02-06 00:30:53,"nit, you can drop `()`.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375584231,375584231,src/test/scheduler_tests.cpp
promag,2020-02-06 00:31:17,"nit, just capture `&scheduler`.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375584339,375584339,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-06 00:48:41,"I'm curious- is this for style or is there a difference in behavior? \nfrom what I can tell the behavior should be the same?\ndocs: ""& (implicitly capture the used automatic variables by reference)"" \ncompiler explorer: https://godbolt.org/z/QfeAVF",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375588886,375588886,src/test/scheduler_tests.cpp
JeremyRubin,2020-02-06 02:14:37,I think it's reasonable for @amitiuttarwar to just copy exactly what setmocktime is doing in this regard.,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375609579,375609579,src/rpc/misc.cpp
JeremyRubin,2020-02-06 02:16:25,"I think this is a style preference (plus it's in tests) so it's whatever.\n\nFor whatever reason, I prefer this form when it's a function that should be called multiple times (as dummy is) and the no () form when it's more akin to a std::bind for a call-once thing.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375609928,375609928,src/test/scheduler_tests.cpp
JeremyRubin,2020-02-06 02:23:26,"I think & is perfectly clear, it's just for style.\n\nI agree in principle if a lambda is multiple lines and has arguments it's usually better to explicitly capture, but I think implicit capture is totally reasonable here.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375611313,375611313,src/test/scheduler_tests.cpp
JeremyRubin,2020-02-06 02:26:09,"element.first - delta_seconds may underflow, so std::max prevents underflow.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375611897,375611897,src/scheduler.cpp
promag,2020-02-06 09:03:10,"Yes, should be same, however in L163 you already explicitly capture `&counter` so I though you would like to do the same here.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r375710783,375710783,src/test/scheduler_tests.cpp
ajtowns,2020-02-06 19:35:38,"Huh? `static const commands[]=` will get done prior to working out what chain is in use, so you'd have to do a much more serious rework to remove it from the list of rpcs entirely.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376039723,376039723,src/rpc/misc.cpp
promag,2020-02-06 20:27:25,Underflow how? You mean be less than current time?,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376063957,376063957,src/scheduler.cpp
amitiuttarwar,2020-02-06 20:31:12,"if `element.first - delta_seconds < now` everything will process fine (as in the previous version you reviewed)\n\nbut if `delta_seconds > element.first` then there could be an underflow. seems highly unlikely because `element.first` is a time point, but doesn't hurt to have this guarantee",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376065647,376065647,src/scheduler.cpp
sipa,2020-02-06 22:26:00,"This looks equivalent to\n\n```\nstd::max(boost::chrono::system_clock::now(), element.first - delta_seconds);\n```\n\nAlso perhaps you only want to invoke `now()` once and cache it rather than querying it for every queue element.\n",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376116886,376116886,src/scheduler.cpp
sipa,2020-02-06 22:30:15,"I realize this is copied from `setmocktime`, but it feels very strange to use MineBlocksOnDemand to gate time mocking. Perhaps it's worth adding a separate chainparams property for time mocking, and then using it for both `setmocktime` and `mockscheduler`.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376118523,376118523,src/rpc/misc.cpp
sipa,2020-02-06 22:31:35,It's a hidden RPC so I don't think this matters much.,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376119076,376119076,src/rpc/misc.cpp
promag,2020-02-06 22:48:12,@ajtowns I was thinking that `CRPCTable::execute` could take into account some `CRPCCommand` flag and then it would result in `RPC_METHOD_NOT_FOUND`.,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376125408,376125408,src/rpc/misc.cpp
JeremyRubin,2020-02-06 23:11:42,"@sipa that misses the point above. if delta_seconds > element.first, it underflows and then it can be greater than now().\n\nI guess equivalently, if delta_seconds is too large, now() + delta_seconds may overflow... but that seems less likely because we don't know if this system_clock::now() which feeds into the queue is set to start at time 0 on startup.\n\n\nNote also that caching now(), we",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376134174,376134174,src/scheduler.cpp
sipa,2020-02-06 23:28:11,"> if delta_seconds > element.first, it underflows and then it can be greater than now().\n\nAccording to https://en.cppreference.com/w/cpp/chrono/duration, the representation type for the standard clock values is signed, so underflow should not be any issue (or at least not more than we need to worry about the clock overflowing in the first place).\n\n> Note also that caching now(), were empla",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376139778,376139778,src/scheduler.cpp
amitiuttarwar,2020-02-07 01:10:59,"RE: underflow / overflow- \nthe intent is to ensure `delta_seconds` is reasonable. I'm thinking of asserting the value is between 0 & 3600 from both this `MockForward` method & the `mockscheduler` rpc method. \nand reverting to the original `temp_queue.emplace_hint(temp_queue.cend(), element.first - delta_seconds, element.second)`\n",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376168538,376168538,src/scheduler.cpp
JeremyRubin,2020-02-07 01:13:56,"Ah -- note that it's boost and not std... I think that the seconds duration is guaranteed to be signed 64, but I couldn't find anything on system_clock's duration. Good catch on the non steady adjustable clock of system_clock, I had missed that. Seems like a general thing that our scheduler should be on a monotonic hardware clock rather than something that adjusting the system date could adjust (w",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376169344,376169344,src/scheduler.cpp
sipa,2020-02-07 01:40:01,"Even with a monotonic clock there is no guarantee that subsequent requests to `now()` are *strictly* increasing (they'll be *monotonically* increasing, but that's not enough to guarantee a stable sorting order absent hints).",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376175543,376175543,src/scheduler.cpp
JeremyRubin,2020-02-07 03:29:29,"@sipa what would you think about just abstracting out a new function named `AllowMockableTime()` and having it call MineBlocksOnDemand  -- that way someone can clean up the logic later, I'm sure we're doing other weird things like this that could also be fixed.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376199329,376199329,src/rpc/misc.cpp
JeremyRubin,2020-02-07 03:30:27,"Or just making it the responsibility of follow up work, I don't think it's that bad (if someone reviewed using MineBlocksOnDemand for this once... it should still be fine now)",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376199487,376199487,src/rpc/misc.cpp
amitiuttarwar,2020-02-07 17:12:55,updated,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376506598,376506598,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-07 17:13:25,updated,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376506845,376506845,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-07 17:15:55,"reverted to original (`element.first - delta_seconds`), but added checks in `MockForward` and `mockscheduler` that `delta_seconds` is between 0 and 3600. \n\nwhich means we no longer invoke `now()` =P \n\nlmk if there are any further concerns",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376507928,376507928,src/scheduler.cpp
amitiuttarwar,2020-02-07 17:19:14,I agree that using `MineBlocksOnDemand` felt weird. Added `m_is_mockable_chain` to chainparams & implemented for `mockscheduler`. If it looks okay I'll do a follow up PR to use that for `mocktime`. ,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376509388,376509388,src/rpc/misc.cpp
promag,2020-02-07 17:22:06,lgtm,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376510655,376510655,src/scheduler.cpp
MarcoFalke,2020-02-09 21:47:44,"In commit 69468a93737ed9d4a38e04bdce20778ce8191810:\n\nCould add a comment why 3600? Also, why not use a named compile time constant like `boost::chrono::hours{1}`?",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376818501,376818501,src/scheduler.cpp
MarcoFalke,2020-02-09 21:50:57,"```suggestion\n    /**\n     * Mock the scheduler to fast forward in time\n```\n\nThis is not limited to regtest. It can be called in unit tests as well, or in #17037 testchains.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376818713,376818713,src/scheduler.h
MarcoFalke,2020-02-09 22:07:45,"in commit 3679f096c2ef52fa8673e5cd4064154a1889fa12\n\nNo features of boost::thread are needed here, so you might as well use a plain std thread\n```suggestion\n    std::thread scheduler_thread([&]() { scheduler.serviceQueue(); });\n```",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376820054,376820054,src/test/scheduler_tests.cpp
MarcoFalke,2020-02-09 22:08:05,"in commit 3679f096c2ef52fa8673e5cd4064154a1889fa12:\n\n```suggestion\n    BOOST_CHECK_EQUAL(num_tasks, 1);\n```",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376820081,376820081,src/test/scheduler_tests.cpp
MarcoFalke,2020-02-09 22:13:42,"In commit 3392d690cfb338e1a9a9d7347710c0744e4486d5:\n\nthis should be true, otherwise one has to change this in the source code when wanting to test on testnet. While there is an argument for test params to be as close to main params as possible, I think this does not apply to params that have been introduced for primarily testing purposes. (See also my `m_is_test_chain`, which turned out to be ",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376820487,376820487,src/chainparams.cpp
MarcoFalke,2020-02-09 22:16:22,"in commit cf04e02bbe14257a1513b029231cb6a21c9766ac:\n\n```suggestion\n    RPCHelpMan{""mockscheduler"",\n```\n\nExcessive whitespace?",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376820692,376820692,src/rpc/misc.cpp
MarcoFalke,2020-02-09 22:20:50,"in commit cf04e02bbe14257a1513b029231cb6a21c9766ac:\n\nWould be nice to protect against null pointer dereference. See `EnsureMemPool`",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r376821035,376821035,src/rpc/misc.cpp
MarcoFalke,2020-02-10 19:42:12,"The same should be done in `src/test/util/setup_common.cpp`, no?",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377276023,377276023,src/init.cpp
amitiuttarwar,2020-02-10 19:48:28,"yup. using `boost_check_equal` was causing a warning I didn't understand, but after pushing I realized I just need to cast to `size_t`.  ",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377279190,377279190,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-10 19:58:14,"hmmm, well if we want `m_is_mockable_chain` to be true on testnet, wouldn't it be better not to introduce the param and use the `m_is_test_chain` instead? ",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377284187,377284187,src/chainparams.cpp
amitiuttarwar,2020-02-10 20:03:37,"Although, conceptually, I don't know if I'm convinced. Mocking time seems useful for increasing automated test coverage, but running the node on testnet simulating closer to mainnet makes sense. But I feel pretty indifferent since even if time is allowed to be mocked on testnet, a user doesn't have to invoke it. And there's no concern around attack because its testnet. Mostly just trying to move t",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377286728,377286728,src/chainparams.cpp
amitiuttarwar,2020-02-10 20:16:32,"hmm, I'm seeing the same amount of whitespace on the other `RPCHelpMan` calls in `rpc/misc` & `rpc/net` & `wallet/rpcwallet`. Are you seeing inconsistency? Is there something I'm missing? ",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377292698,377292698,src/rpc/misc.cpp
MarcoFalke,2020-02-10 20:19:28,"Feel free to ignore, this can be handled in the follow-up",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377294176,377294176,src/chainparams.cpp
MarcoFalke,2020-02-10 20:23:21,"Feel free to ignore this, but we haven't re-formatted them in b6fb617aaaad5f9cdd7f2ad2825b253ca792055d because they are still in flux.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377295887,377295887,src/rpc/misc.cpp
amitiuttarwar,2020-02-11 23:55:32,addressed in follow up,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377969622,377969622,src/init.cpp
amitiuttarwar,2020-02-11 23:55:39,addressed in follow up,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377969706,377969706,src/rpc/misc.cpp
amitiuttarwar,2020-02-11 23:55:49,addressed in follow up,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377969811,377969811,src/rpc/misc.cpp
amitiuttarwar,2020-02-11 23:56:01,addressed in follow up,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377969951,377969951,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-11 23:56:08,addressed in follow up,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377970040,377970040,src/test/scheduler_tests.cpp
amitiuttarwar,2020-02-12 00:00:19,addressed in follow up ,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377971402,377971402,src/scheduler.h
amitiuttarwar,2020-02-12 00:00:30,addressed in follow up,https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377971458,377971458,src/scheduler.cpp
amitiuttarwar,2020-02-12 00:01:16,"not addressed, but noted as open question in the follow up https://github.com/amitiuttarwar/bitcoin/pull/2#issuecomment-584885826. going to resolve here.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r377971672,377971672,src/chainparams.cpp
MarcoFalke,2020-02-13 16:28:03,"style-nit in commit 3f5cebe47b:\n\nUsing `/**` will make this a doxygen comment. I know that the other functions don't use doxygen comment, but for new code we should aim for that.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r378972310,378972310,src/scheduler.h
MarcoFalke,2020-02-13 16:39:18,"style-nit in commit 047c1fd23ab7f281af7acd238f3bbb441817686c:\n\nAs you are changing this line anyway, might as well get rid of the std::bind mess\n\n\n```cpp\nCScheduler::Function serviceLoop = [&] { node.scheduler->serviceQueue(); };",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r378979325,378979325,src/init.cpp
MarcoFalke,2020-02-13 16:43:11,"style-nit in commit 047c1fd:\n\n\nIt should be safe and a bit cleaner to reset the scheduler unique_ptr at the end of `void Shutdown(NodeContext& node)`.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r378982074,378982074,src/init.cpp
MarcoFalke,2020-02-13 16:46:12,"style-nit in commit 047c1fd23ab7f281af7acd238f3bbb441817686c:\n\n`g_rpc_node` might go away (#17548), and using `m_node` directly would be cleaner code anyway.",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r378983916,378983916,src/test/util/setup_common.cpp
MarcoFalke,2020-02-13 16:48:12,"style-nit in commit 047c1fd23ab7f281af7acd238f3bbb441817686c:\n\nSame here\n\n```suggestion\n    threadGroup.create_thread([&] { m_node.scheduler->serviceQueue(); });\n```\n",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r378985102,378985102,src/test/util/setup_common.cpp
MarcoFalke,2020-02-17 03:11:07,"Also, the pointer should probably be reset in `~TestingSetup`",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r379969757,379969757,src/test/util/setup_common.cpp
amitiuttarwar,2020-02-17 19:56:16,"yeah totally. do you think the lack of reset could have somehow caused the failure [here](https://travis-ci.org/bitcoin/bitcoin/jobs/649620800)? I'll push shortly and observe, but still trying to fill in my conceptual understanding.\n\nnot directly related, but another thing I'm wondering is why the scheduler thread isn't interrupted [here](https://github.com/bitcoin/bitcoin/blob/master/src/init",https://github.com/bitcoin/bitcoin/pull/18037#discussion_r380347417,380347417,src/test/util/setup_common.cpp
