[
  {
    "sha": "a6f63598adb880a75e1571aac58338c17fa7ad53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmY2MzU5OGFkYjg4MGE3NWUxNTcxYWFjNTgzMzhjMTdmYTdhZDUz",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-28T23:26:32Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-13T16:59:51Z"
      },
      "message": "[util] allow scheduler to be mocked\n\nAdd MockForward method to the scheduler that mimics going into the future by rescheduling all items on the taskQueue to be sooner.",
      "tree": {
        "sha": "39e76485823c1cc23f734cf84f931cab7282b796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39e76485823c1cc23f734cf84f931cab7282b796"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6f63598adb880a75e1571aac58338c17fa7ad53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f63598adb880a75e1571aac58338c17fa7ad53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f63598adb880a75e1571aac58338c17fa7ad53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f63598adb880a75e1571aac58338c17fa7ad53/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aabec94541e23a67a9f30dc2c80dab3383a01737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabec94541e23a67a9f30dc2c80dab3383a01737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aabec94541e23a67a9f30dc2c80dab3383a01737"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "72cca89d99c03f50fee44d7b4d29921808b5027a",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f63598adb880a75e1571aac58338c17fa7ad53/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f63598adb880a75e1571aac58338c17fa7ad53/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=a6f63598adb880a75e1571aac58338c17fa7ad53",
        "patch": "@@ -114,6 +114,28 @@ void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSecon\n     schedule(f, boost::chrono::system_clock::now() + boost::chrono::milliseconds(deltaMilliSeconds));\n }\n \n+void CScheduler::MockForward(boost::chrono::seconds delta_seconds)\n+{\n+    assert(delta_seconds.count() > 0 && delta_seconds < boost::chrono::hours{1});\n+\n+    {\n+        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+\n+        // use temp_queue to maintain updated schedule\n+        std::multimap<boost::chrono::system_clock::time_point, Function> temp_queue;\n+\n+        for (const auto& element : taskQueue) {\n+            temp_queue.emplace_hint(temp_queue.cend(), element.first - delta_seconds, element.second);\n+        }\n+\n+        // point taskQueue to temp_queue\n+        taskQueue = std::move(temp_queue);\n+    }\n+\n+    // notify that the taskQueue needs to be processed\n+    newTaskScheduled.notify_one();\n+}\n+\n static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)\n {\n     f();"
      },
      {
        "sha": "d18be0ea5eb904c9adacb921fb86fe7736f3b4f8",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f63598adb880a75e1571aac58338c17fa7ad53/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f63598adb880a75e1571aac58338c17fa7ad53/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=a6f63598adb880a75e1571aac58338c17fa7ad53",
        "patch": "@@ -55,6 +55,13 @@ class CScheduler\n     // need more accurate scheduling, don't use this method.\n     void scheduleEvery(Function f, int64_t deltaMilliSeconds);\n \n+    /**\n+     * Mock the scheduler to fast forward in time.\n+     * Iterates through items on taskQueue and reschedules them\n+     * to be delta_seconds sooner.\n+     */\n+    void MockForward(boost::chrono::seconds delta_seconds);\n+\n     // To keep things as simple as possible, there is no unschedule.\n \n     // Services the queue 'forever'. Should be run in a thread,"
      }
    ]
  },
  {
    "sha": "1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2Q0M2U4M2M2ZThkODFlOTUwYWFhZWRlN2E4YTUxNTA1ZDBhMmJj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-28T23:36:47Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-13T16:59:51Z"
      },
      "message": "[test] unit test for new MockForward scheduler method",
      "tree": {
        "sha": "7103e639d85d7c7c8ca0d78c81f95924c3edb1e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7103e639d85d7c7c8ca0d78c81f95924c3edb1e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6f63598adb880a75e1571aac58338c17fa7ad53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f63598adb880a75e1571aac58338c17fa7ad53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f63598adb880a75e1571aac58338c17fa7ad53"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 41,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a6cb34cf28f60ab018a57f190cffebc908bc8f10",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
        "patch": "@@ -5,8 +5,6 @@\n #include <random.h>\n #include <scheduler.h>\n \n-#include <test/util/setup_common.h>\n-\n #include <boost/thread.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -155,4 +153,45 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     BOOST_CHECK_EQUAL(counter2, 100);\n }\n \n+BOOST_AUTO_TEST_CASE(mockforward)\n+{\n+    CScheduler scheduler;\n+\n+    int counter{0};\n+    CScheduler::Function dummy = [&counter]{counter++;};\n+\n+    // schedule jobs for 2, 5 & 8 minutes into the future\n+    int64_t min_in_milli = 60*1000;\n+    scheduler.scheduleFromNow(dummy, 2*min_in_milli);\n+    scheduler.scheduleFromNow(dummy, 5*min_in_milli);\n+    scheduler.scheduleFromNow(dummy, 8*min_in_milli);\n+\n+    // check taskQueue\n+    boost::chrono::system_clock::time_point first, last;\n+    size_t num_tasks = scheduler.getQueueInfo(first, last);\n+    BOOST_CHECK_EQUAL(num_tasks, 3ul);\n+\n+    std::thread scheduler_thread([&]() { scheduler.serviceQueue(); });\n+\n+    // bump the scheduler forward 5 minutes\n+    scheduler.MockForward(boost::chrono::seconds(5*60));\n+\n+    // ensure scheduler has chance to process all tasks queued for before 1 ms from now.\n+    scheduler.scheduleFromNow([&scheduler]{ scheduler.stop(false); }, 1);\n+    scheduler_thread.join();\n+\n+    // check that the queue only has one job remaining\n+    num_tasks = scheduler.getQueueInfo(first, last);\n+    BOOST_CHECK_EQUAL(num_tasks, 1ul);\n+\n+    // check that the dummy function actually ran\n+    BOOST_CHECK_EQUAL(counter, 2);\n+\n+    // check that the time of the remaining job has been updated\n+    boost::chrono::system_clock::time_point now = boost::chrono::system_clock::now();\n+    int delta = boost::chrono::duration_cast<boost::chrono::seconds>(first - now).count();\n+    // should be between 2 & 3 minutes from now\n+    BOOST_CHECK(delta > 2*60 && delta < 3*60);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "930d8375421451c8c4127608c360b0f6a0a62127",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzBkODM3NTQyMTQ1MWM4YzQxMjc2MDhjMzYwYjBmNmEwYTYyMTI3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-07T04:17:28Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-13T16:59:51Z"
      },
      "message": "[test] add chainparams property to indicate chain allows time mocking",
      "tree": {
        "sha": "9ffebf73b63f794531014add1d3e87475f33659a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ffebf73b63f794531014add1d3e87475f33659a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/930d8375421451c8c4127608c360b0f6a0a62127",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/930d8375421451c8c4127608c360b0f6a0a62127",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/930d8375421451c8c4127608c360b0f6a0a62127",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/930d8375421451c8c4127608c360b0f6a0a62127/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd43e83c6e8d81e950aaaede7a8a51505d0a2bc"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a9183ac970c90fc32bbd1db49ddc0709a13b66d9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/930d8375421451c8c4127608c360b0f6a0a62127/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/930d8375421451c8c4127608c360b0f6a0a62127/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=930d8375421451c8c4127608c360b0f6a0a62127",
        "patch": "@@ -135,6 +135,7 @@ class CMainParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         m_is_test_chain = false;\n+        m_is_mockable_chain = false;\n \n         checkpointData = {\n             {\n@@ -231,7 +232,7 @@ class CTestNetParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         m_is_test_chain = true;\n-\n+        m_is_mockable_chain = false;\n \n         checkpointData = {\n             {\n@@ -303,6 +304,7 @@ class CRegTestParams : public CChainParams {\n         fDefaultConsistencyChecks = true;\n         fRequireStandard = true;\n         m_is_test_chain = true;\n+        m_is_mockable_chain = true;\n \n         checkpointData = {\n             {"
      },
      {
        "sha": "379c75e4be1d990b1e2e5b0ccc6fddd701444b41",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/930d8375421451c8c4127608c360b0f6a0a62127/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/930d8375421451c8c4127608c360b0f6a0a62127/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=930d8375421451c8c4127608c360b0f6a0a62127",
        "patch": "@@ -68,6 +68,8 @@ class CChainParams\n     bool RequireStandard() const { return fRequireStandard; }\n     /** If this chain is exclusively used for testing */\n     bool IsTestChain() const { return m_is_test_chain; }\n+    /** If this chain allows time to be mocked */\n+    bool IsMockableChain() const { return m_is_mockable_chain; }\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Minimum free space (in GB) needed for data directory */\n     uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n@@ -102,6 +104,7 @@ class CChainParams\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n     bool m_is_test_chain;\n+    bool m_is_mockable_chain;\n     CCheckpointData checkpointData;\n     ChainTxData chainTxData;\n };"
      }
    ]
  },
  {
    "sha": "7c8b6e5b5206a98f86675d0107ad99ea1d080466",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzhiNmU1YjUyMDZhOThmODY2NzVkMDEwN2FkOTllYTFkMDgwNDY2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-12T19:08:28Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-17T22:49:34Z"
      },
      "message": "[lib] add scheduler to node context\n\n- also update test setup & access point in denial of service test",
      "tree": {
        "sha": "179938580b3415154ab590a4d8f16d666c4ba78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/179938580b3415154ab590a4d8f16d666c4ba78d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c8b6e5b5206a98f86675d0107ad99ea1d080466",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c8b6e5b5206a98f86675d0107ad99ea1d080466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c8b6e5b5206a98f86675d0107ad99ea1d080466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c8b6e5b5206a98f86675d0107ad99ea1d080466/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "930d8375421451c8c4127608c360b0f6a0a62127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/930d8375421451c8c4127608c360b0f6a0a62127",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/930d8375421451c8c4127608c360b0f6a0a62127"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5e8d8c3d2ddc92198d478c926afc8400f1e0d34f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "patch": "@@ -157,7 +157,6 @@ NODISCARD static bool CreatePidFile()\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n static boost::thread_group threadGroup;\n-static CScheduler scheduler;\n \n void Interrupt(NodeContext& node)\n {\n@@ -295,6 +294,7 @@ void Shutdown(NodeContext& node)\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     if (node.mempool) node.mempool = nullptr;\n+    node.scheduler.reset();\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n \n@@ -1265,16 +1265,19 @@ bool AppInitMain(NodeContext& node)\n         }\n     }\n \n+    assert(!node.scheduler);\n+    node.scheduler = MakeUnique<CScheduler>();\n+\n     // Start the lightweight task scheduler thread\n-    CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);\n+    CScheduler::Function serviceLoop = [&node]{ node.scheduler->serviceQueue(); };\n     threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     // Gather some entropy once per minute.\n-    scheduler.scheduleEvery([]{\n+    node.scheduler->scheduleEvery([]{\n         RandAddPeriodic();\n     }, 60000);\n \n-    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+    GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs\n@@ -1324,7 +1327,7 @@ bool AppInitMain(NodeContext& node)\n     assert(!node.connman);\n     node.connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n \n-    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), scheduler));\n+    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler));\n     RegisterValidationInterface(node.peer_logic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n@@ -1816,7 +1819,7 @@ bool AppInitMain(NodeContext& node)\n             connOptions.m_specified_outgoing = connect;\n         }\n     }\n-    if (!node.connman->Start(scheduler, connOptions)) {\n+    if (!node.connman->Start(*node.scheduler, connOptions)) {\n         return false;\n     }\n \n@@ -1845,11 +1848,11 @@ bool AppInitMain(NodeContext& node)\n     uiInterface.InitMessage(_(\"Done loading\").translated);\n \n     for (const auto& client : node.chain_clients) {\n-        client->start(scheduler);\n+        client->start(*node.scheduler);\n     }\n \n     BanMan* banman = node.banman.get();\n-    scheduler.scheduleEvery([banman]{\n+    node.scheduler->scheduleEvery([banman]{\n         banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL * 1000);\n "
      },
      {
        "sha": "5b19a41bd4c7bfa84ebee20e532d1fd0a742ba93",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "patch": "@@ -8,6 +8,7 @@\n #include <interfaces/chain.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <scheduler.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "1c592b456bf86f81fcf1c5d93b231598a64d7cfe",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "patch": "@@ -10,6 +10,7 @@\n \n class BanMan;\n class CConnman;\n+class CScheduler;\n class CTxMemPool;\n class PeerLogicValidation;\n namespace interfaces {\n@@ -34,6 +35,7 @@ struct NodeContext {\n     std::unique_ptr<BanMan> banman;\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n+    std::unique_ptr<CScheduler> scheduler;\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      },
      {
        "sha": "e5d51ab83bf03429f4421e062a1875b8191a57ec",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "patch": "@@ -78,7 +78,7 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, *m_node.scheduler);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -148,7 +148,7 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidat\n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, *m_node.scheduler);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = 8;\n@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -276,7 +276,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler);\n \n     banman->ClearBanned();\n     gArgs.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n@@ -323,7 +323,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "360377e58ac726b5f2b7b4d1d2897e25e9aaf2af",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "patch": "@@ -103,10 +103,12 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     g_rpc_node = &m_node;\n     RegisterAllCoreRPCCommands(tableRPC);\n \n+    m_node.scheduler = MakeUnique<CScheduler>();\n+\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n-    threadGroup.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n-    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+    threadGroup.create_thread([&]{ m_node.scheduler->serviceQueue(); });\n+    GetMainSignals().RegisterBackgroundSignalScheduler(*g_rpc_node->scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n     g_chainstate = MakeUnique<CChainState>();\n@@ -147,6 +149,7 @@ TestingSetup::~TestingSetup()\n     m_node.connman.reset();\n     m_node.banman.reset();\n     m_node.mempool = nullptr;\n+    m_node.scheduler.reset();\n     UnloadBlockIndex();\n     g_chainstate.reset();\n     pblocktree.reset();"
      },
      {
        "sha": "56ad62eb24bb04eda36aa854950e29070a18a62d",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c8b6e5b5206a98f86675d0107ad99ea1d080466/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "patch": "@@ -85,7 +85,6 @@ struct BasicTestingSetup {\n struct TestingSetup : public BasicTestingSetup {\n     NodeContext m_node;\n     boost::thread_group threadGroup;\n-    CScheduler scheduler;\n \n     explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      }
    ]
  },
  {
    "sha": "8bca30ea17cd4c1dacee28eaa27e5fa3493b021d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmNhMzBlYTE3Y2Q0YzFkYWNlZTI4ZWFhMjdlNWZhMzQ5M2IwMjFk",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-12T19:12:20Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-02-17T22:49:34Z"
      },
      "message": "[rpc] expose ability to mock scheduler via the rpc",
      "tree": {
        "sha": "ef6598296d4d60900285612c3c82d0112a883e80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef6598296d4d60900285612c3c82d0112a883e80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c8b6e5b5206a98f86675d0107ad99ea1d080466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c8b6e5b5206a98f86675d0107ad99ea1d080466"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c1762483e92864dfe631912cedef9c69d54373f2",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8bca30ea17cd4c1dacee28eaa27e5fa3493b021d",
        "patch": "@@ -27,6 +27,7 @@ class CRPCConvertParam\n static const CRPCConvertParam vRPCConvertParams[] =\n {\n     { \"setmocktime\", 0, \"timestamp\" },\n+    { \"mockscheduler\", 0, \"delta_time\" },\n     { \"utxoupdatepsbt\", 1, \"descriptors\" },\n     { \"generatetoaddress\", 0, \"nblocks\" },\n     { \"generatetoaddress\", 2, \"maxtries\" },"
      },
      {
        "sha": "ba5a3d83d1896cefa8a1dc3f69dca5cc3e20323d",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bca30ea17cd4c1dacee28eaa27e5fa3493b021d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8bca30ea17cd4c1dacee28eaa27e5fa3493b021d",
        "patch": "@@ -5,10 +5,12 @@\n \n #include <httpserver.h>\n #include <key_io.h>\n+#include <node/context.h>\n #include <outputtype.h>\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n+#include <scheduler.h>\n #include <script/descriptor.h>\n #include <util/check.h>\n #include <util/strencodings.h>\n@@ -366,6 +368,36 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue mockscheduler(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"mockscheduler\",\n+        \"\\nBump the scheduler into the future (-regtest only)\\n\",\n+        {\n+            {\"delta_time\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Number of seconds to forward the scheduler into the future.\" },\n+        },\n+        RPCResults{},\n+        RPCExamples{\"\"},\n+    }.Check(request);\n+\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"mockscheduler is for regression testing (-regtest mode) only\");\n+    }\n+\n+    // check params are valid values\n+    RPCTypeCheck(request.params, {UniValue::VNUM});\n+    int64_t delta_seconds = request.params[0].get_int64();\n+    if ((delta_seconds <= 0) || (delta_seconds > 3600)) {\n+        throw std::runtime_error(\"delta_time must be between 1 and 3600 seconds (1 hr)\");\n+    }\n+\n+    // protect against null pointer dereference\n+    CHECK_NONFATAL(g_rpc_node);\n+    CHECK_NONFATAL(g_rpc_node->scheduler);\n+    g_rpc_node->scheduler->MockForward(boost::chrono::seconds(delta_seconds));\n+\n+    return NullUniValue;\n+}\n+\n static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n@@ -570,6 +602,7 @@ static const CRPCCommand commands[] =\n \n     /* Not shown in help */\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},\n+    { \"hidden\",             \"mockscheduler\",          &mockscheduler,          {\"delta_time\"}},\n     { \"hidden\",             \"echo\",                   &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n     { \"hidden\",             \"echojson\",               &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };"
      }
    ]
  }
]