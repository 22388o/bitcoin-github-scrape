[
  {
    "sha": "b019ea17ec7cc37d098982b4f0f4636e424ab4b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDE5ZWExN2VjN2NjMzdkMDk4OTgyYjRmMGY0NjM2ZTQyNGFiNGI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-09-09T15:12:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-09-09T15:24:00Z"
      },
      "message": "Remove VC6 comment and pointless #ifdef'd benchmark code\n\nWe're in a wholly different world now, C++-compiler-wise.\n\nCurrent std::stringstream implementations don't have the stated problem anymore,\nand are just as fast as CDataStream.\n\nThe #ifdef'd block does not even compile anymore; CDataStream constructor changed,\nand missing some std::. Also timing in whole seconds is also way too granular\nto say anything sensible in such microbenchmarks. Just remove it,\nit can always be found again in git history.",
      "tree": {
        "sha": "0e22ef1144fb20d05bc0b5dc68918cd8d21b8f5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e22ef1144fb20d05bc0b5dc68918cd8d21b8f5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b019ea17ec7cc37d098982b4f0f4636e424ab4b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b019ea17ec7cc37d098982b4f0f4636e424ab4b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b019ea17ec7cc37d098982b4f0f4636e424ab4b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b019ea17ec7cc37d098982b4f0f4636e424ab4b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eabc8f2c81712dedd0d93af221e4dbc5b6dede59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eabc8f2c81712dedd0d93af221e4dbc5b6dede59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eabc8f2c81712dedd0d93af221e4dbc5b6dede59"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 0,
      "deletions": 52
    },
    "files": [
      {
        "sha": "63df3160a677601394722d7d42c9349e24f6d5f9",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b019ea17ec7cc37d098982b4f0f4636e424ab4b8/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b019ea17ec7cc37d098982b4f0f4636e424ab4b8/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=b019ea17ec7cc37d098982b4f0f4636e424ab4b8",
        "patch": "@@ -243,7 +243,6 @@ uint64 ReadCompactSize(Stream& is)\n #define FLATDATA(obj)   REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n \n /** Wrapper for serializing arrays and POD.\n- * There's a clever template way to make arrays serialize normally, but MSVC6 doesn't support it.\n  */\n class CFlatData\n {\n@@ -1010,57 +1009,6 @@ class CDataStream\n     }\n };\n \n-#ifdef TESTCDATASTREAM\n-// VC6sp6\n-// CDataStream:\n-// n=1000       0 seconds\n-// n=2000       0 seconds\n-// n=4000       0 seconds\n-// n=8000       0 seconds\n-// n=16000      0 seconds\n-// n=32000      0 seconds\n-// n=64000      1 seconds\n-// n=128000     1 seconds\n-// n=256000     2 seconds\n-// n=512000     4 seconds\n-// n=1024000    8 seconds\n-// n=2048000    16 seconds\n-// n=4096000    32 seconds\n-// stringstream:\n-// n=1000       1 seconds\n-// n=2000       1 seconds\n-// n=4000       13 seconds\n-// n=8000       87 seconds\n-// n=16000      400 seconds\n-// n=32000      1660 seconds\n-// n=64000      6749 seconds\n-// n=128000     27241 seconds\n-// n=256000     109804 seconds\n-#include <iostream>\n-int main(int argc, char *argv[])\n-{\n-    vector<unsigned char> vch(0xcc, 250);\n-    printf(\"CDataStream:\\n\");\n-    for (int n = 1000; n <= 4500000; n *= 2)\n-    {\n-        CDataStream ss;\n-        time_t nStart = time(NULL);\n-        for (int i = 0; i < n; i++)\n-            ss.write((char*)&vch[0], vch.size());\n-        printf(\"n=%-10d %d seconds\\n\", n, time(NULL) - nStart);\n-    }\n-    printf(\"stringstream:\\n\");\n-    for (int n = 1000; n <= 4500000; n *= 2)\n-    {\n-        stringstream ss;\n-        time_t nStart = time(NULL);\n-        for (int i = 0; i < n; i++)\n-            ss.write((char*)&vch[0], vch.size());\n-        printf(\"n=%-10d %d seconds\\n\", n, time(NULL) - nStart);\n-    }\n-}\n-#endif\n-\n \n \n "
      }
    ]
  }
]