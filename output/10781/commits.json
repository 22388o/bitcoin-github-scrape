[
  {
    "sha": "25cd520fc429c464846b0f986104db45b3bfaebb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWNkNTIwZmM0MjljNDY0ODQ2YjBmOTg2MTA0ZGI0NWIzYmZhZWJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-09T20:57:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-28T13:18:14Z"
      },
      "message": "Use sys.exit(...) instead of exit(...): exit(...) should not be used in programs",
      "tree": {
        "sha": "3b8055f06c0b70d0cdd2431d2597f6173f3d643d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b8055f06c0b70d0cdd2431d2597f6173f3d643d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25cd520fc429c464846b0f986104db45b3bfaebb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cd520fc429c464846b0f986104db45b3bfaebb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25cd520fc429c464846b0f986104db45b3bfaebb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cd520fc429c464846b0f986104db45b3bfaebb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f088a1bb392eaecd912ff9bca6967a8f4765c2b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f088a1bb392eaecd912ff9bca6967a8f4765c2b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f088a1bb392eaecd912ff9bca6967a8f4765c2b7"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 30,
      "deletions": 28
    },
    "files": [
      {
        "sha": "3279dc361283c1b9d2405a47aef03a0c78cb190b",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -12,6 +12,7 @@\n \n from subprocess import check_output\n import re\n+import sys\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n@@ -39,7 +40,7 @@ def main():\n   print \"Args unknown     : %s\" % len(args_unknown)\n   print args_unknown\n \n-  exit(len(args_need_doc))\n+  sys.exit(len(args_need_doc))\n \n if __name__ == \"__main__\":\n     main()"
      },
      {
        "sha": "7545c4340d55e7fb40d475e844dda31a425489e8",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 19,
        "deletions": 18,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -20,6 +20,7 @@\n import argparse\n import hashlib\n import subprocess\n+import sys\n import json,codecs\n try:\n     from urllib.request import Request,urlopen\n@@ -158,11 +159,11 @@ def main():\n     if repo is None:\n         print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n         print(\"git config githubmerge.repository <owner>/<repo>\", file=stderr)\n-        exit(1)\n+        sys.exit(1)\n     if signingkey is None:\n         print(\"ERROR: No GPG signing key set. Set one using:\",file=stderr)\n         print(\"git config --global user.signingkey <key>\",file=stderr)\n-        exit(1)\n+        sys.exit(1)\n \n     host_repo = host+\":\"+repo # shortcut for push/pull target\n \n@@ -173,7 +174,7 @@ def main():\n     # Receive pull information from github\n     info = retrieve_pr_info(repo,pull)\n     if info is None:\n-        exit(1)\n+        sys.exit(1)\n     title = info['title'].strip()\n     body = info['body'].strip()\n     # precedence order for destination branch argument:\n@@ -194,27 +195,27 @@ def main():\n         subprocess.check_call([GIT,'checkout','-q',branch])\n     except subprocess.CalledProcessError as e:\n         print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n-        exit(3)\n+        sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*'])\n     except subprocess.CalledProcessError as e:\n         print(\"ERROR: Cannot find pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        exit(3)\n+        sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n     except subprocess.CalledProcessError as e:\n         print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        exit(3)\n+        sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n     except subprocess.CalledProcessError as e:\n         print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        exit(3)\n+        sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/heads/'+branch+':refs/heads/'+base_branch])\n     except subprocess.CalledProcessError as e:\n         print(\"ERROR: Cannot find branch %s on %s.\" % (branch,host_repo), file=stderr)\n-        exit(3)\n+        sys.exit(3)\n     subprocess.check_call([GIT,'checkout','-q',base_branch])\n     subprocess.call([GIT,'branch','-q','-D',local_merge_branch], stderr=devnull)\n     subprocess.check_call([GIT,'checkout','-q','-b',local_merge_branch])\n@@ -236,30 +237,30 @@ def main():\n         except subprocess.CalledProcessError as e:\n             print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n             subprocess.check_call([GIT,'merge','--abort'])\n-            exit(4)\n+            sys.exit(4)\n         logmsg = subprocess.check_output([GIT,'log','--pretty=format:%s','-n','1']).decode('utf-8')\n         if logmsg.rstrip() != firstline.rstrip():\n             print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n-            exit(4)\n+            sys.exit(4)\n \n         symlink_files = get_symlink_files()\n         for f in symlink_files:\n             print(\"ERROR: File %s was a symlink\" % f)\n         if len(symlink_files) > 0:\n-            exit(4)\n+            sys.exit(4)\n \n         # Put tree SHA512 into the message\n         try:\n             first_sha512 = tree_sha512sum()\n             message += '\\n\\nTree-SHA512: ' + first_sha512\n         except subprocess.CalledProcessError as e:\n             printf(\"ERROR: Unable to compute tree hash\")\n-            exit(4)\n+            sys.exit(4)\n         try:\n             subprocess.check_call([GIT,'commit','--amend','-m',message.encode('utf-8')])\n         except subprocess.CalledProcessError as e:\n             printf(\"ERROR: Cannot update message.\",file=stderr)\n-            exit(4)\n+            sys.exit(4)\n \n         print_merge_details(pull, title, branch, base_branch, head_branch)\n         print()\n@@ -268,7 +269,7 @@ def main():\n         if testcmd:\n             if subprocess.call(testcmd,shell=True):\n                 print(\"ERROR: Running %s failed.\" % testcmd,file=stderr)\n-                exit(5)\n+                sys.exit(5)\n \n             # Show the created merge.\n             diff = subprocess.check_output([GIT,'diff',merge_branch+'..'+local_merge_branch])\n@@ -279,7 +280,7 @@ def main():\n                 if reply.lower() == 'ignore':\n                     print(\"Difference with github ignored.\",file=stderr)\n                 else:\n-                    exit(6)\n+                    sys.exit(6)\n         else:\n             # Verify the result manually.\n             print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n@@ -292,7 +293,7 @@ def main():\n         second_sha512 = tree_sha512sum()\n         if first_sha512 != second_sha512:\n             print(\"ERROR: Tree hash changed unexpectedly\",file=stderr)\n-            exit(8)\n+            sys.exit(8)\n \n         # Sign the merge commit.\n         print_merge_details(pull, title, branch, base_branch, head_branch)\n@@ -306,7 +307,7 @@ def main():\n                     print(\"Error while signing, asking again.\",file=stderr)\n             elif reply == 'x':\n                 print(\"Not signing off on merge, exiting.\",file=stderr)\n-                exit(1)\n+                sys.exit(1)\n \n         # Put the result in branch.\n         subprocess.check_call([GIT,'checkout','-q',branch])\n@@ -326,7 +327,7 @@ def main():\n             subprocess.check_call([GIT,'push',host_repo,'refs/heads/'+branch])\n             break\n         elif reply == 'x':\n-            exit(1)\n+            sys.exit(1)\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "6eb5667453d10e0ecd884e876c2581479f0fb95f",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -212,5 +212,5 @@ def identify_executable(executable):\n         except IOError:\n             print('%s: cannot open' % filename)\n             retval = 1\n-    exit(retval)\n+    sys.exit(retval)\n "
      },
      {
        "sha": "98daa1bd76f94a76f85df6fc3d2f7d4f0ed37fe8",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -159,6 +159,6 @@ def read_libraries(filename):\n                 print('%s: NEEDED library %s is not allowed' % (filename, library_name.decode('utf-8')))\n                 retval = 1\n \n-    exit(retval)\n+    sys.exit(retval)\n \n "
      },
      {
        "sha": "e1924749d21f192c30af1902e98fafadcf14576f",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -36,12 +36,12 @@ def check_at_repository_root():\n     if not os.path.exists('.git'):\n         print('No .git directory found')\n         print('Execute this script at the root of the repository', file=sys.stderr)\n-        exit(1)\n+        sys.exit(1)\n \n def fetch_all_translations():\n     if subprocess.call([TX, 'pull', '-f', '-a']):\n         print('Error while fetching translations', file=sys.stderr)\n-        exit(1)\n+        sys.exit(1)\n \n def find_format_specifiers(s):\n     '''Find all format specifiers in a string.'''"
      },
      {
        "sha": "7719f4ccd6275c692211f8d2cac8de23ffa9e321",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -87,7 +87,7 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \t\tfor x,resp_obj in enumerate(reply):\n \t\t\tif rpc.response_is_error(resp_obj):\n \t\t\t\tprint('JSON-RPC: error at height', height+x, ': ', resp_obj['error'], file=sys.stderr)\n-\t\t\t\texit(1)\n+\t\t\t\tsys.exit(1)\n \t\t\tassert(resp_obj['id'] == x) # assume replies are in-sequence\n \t\t\tif settings['rev_hash_bytes'] == 'true':\n \t\t\t\tresp_obj['result'] = hex_switchEndian(resp_obj['result'])"
      },
      {
        "sha": "28068a752333f6ebd08b7051ed64d996241b8d83",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -114,7 +114,7 @@ def process_nodes(g, f, structname, defaultport):\n def main():\n     if len(sys.argv)<2:\n         print(('Usage: %s <path_to_nodes_txt>' % sys.argv[0]), file=sys.stderr)\n-        exit(1)\n+        sys.exit(1)\n     g = sys.stdout\n     indir = sys.argv[1]\n     g.write('#ifndef BITCOIN_CHAINPARAMSSEEDS_H\\n')"
      },
      {
        "sha": "5cc19761d41fe3578e65d1b85cf1085932ac4e1c",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -32,7 +32,7 @@\n \n if not (sys.version_info.major >= 3 and sys.version_info.minor >= 5):\n     print(\"This example only works with Python 3.5 and greater\")\n-    exit(1)\n+    sys.exit(1)\n \n port = 28332\n "
      },
      {
        "sha": "bfb7ea9eaefc2cbdb1d163d6f35e8bf0946efb42",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -36,7 +36,7 @@\n \n if not (sys.version_info.major >= 3 and sys.version_info.minor >= 4):\n     print(\"This example only works with Python 3.4 and greater\")\n-    exit(1)\n+    sys.exit(1)\n \n port = 28332\n "
      },
      {
        "sha": "e3be18205d7d4ea11501ea303bda9e98c53f5f95",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cd520fc429c464846b0f986104db45b3bfaebb/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cd520fc429c464846b0f986104db45b3bfaebb/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=25cd520fc429c464846b0f986104db45b3bfaebb",
        "patch": "@@ -58,7 +58,7 @@ def parse_po(text):\n if not XGETTEXT:\n     print('Cannot extract strings: xgettext utility is not installed or not configured.',file=sys.stderr)\n     print('Please install package \"gettext\" and re-run \\'./configure\\'.',file=sys.stderr)\n-    exit(1)\n+    sys.exit(1)\n child = Popen([XGETTEXT,'--output=-','-n','--keyword=_'] + files, stdout=PIPE)\n (out, err) = child.communicate()\n "
      }
    ]
  },
  {
    "sha": "51cb6b8221560e5e62894b566c9580dbbd1c65a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWNiNmI4MjIxNTYwZTVlNjI4OTRiNTY2Yzk1ODBkYmJkMWM2NWE0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-09T21:34:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-28T13:18:14Z"
      },
      "message": "Use print(...) instead of undefined printf(...)",
      "tree": {
        "sha": "605e16dd17b3d5a4c231381ada042f45328d20f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/605e16dd17b3d5a4c231381ada042f45328d20f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51cb6b8221560e5e62894b566c9580dbbd1c65a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51cb6b8221560e5e62894b566c9580dbbd1c65a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51cb6b8221560e5e62894b566c9580dbbd1c65a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51cb6b8221560e5e62894b566c9580dbbd1c65a4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25cd520fc429c464846b0f986104db45b3bfaebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cd520fc429c464846b0f986104db45b3bfaebb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25cd520fc429c464846b0f986104db45b3bfaebb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4b1bae6100cfd055ac6577458cc84cedff404d8f",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51cb6b8221560e5e62894b566c9580dbbd1c65a4/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51cb6b8221560e5e62894b566c9580dbbd1c65a4/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=51cb6b8221560e5e62894b566c9580dbbd1c65a4",
        "patch": "@@ -254,12 +254,12 @@ def main():\n             first_sha512 = tree_sha512sum()\n             message += '\\n\\nTree-SHA512: ' + first_sha512\n         except subprocess.CalledProcessError as e:\n-            printf(\"ERROR: Unable to compute tree hash\")\n+            print(\"ERROR: Unable to compute tree hash\")\n             sys.exit(4)\n         try:\n             subprocess.check_call([GIT,'commit','--amend','-m',message.encode('utf-8')])\n         except subprocess.CalledProcessError as e:\n-            printf(\"ERROR: Cannot update message.\",file=stderr)\n+            print(\"ERROR: Cannot update message.\", file=stderr)\n             sys.exit(4)\n \n         print_merge_details(pull, title, branch, base_branch, head_branch)"
      }
    ]
  },
  {
    "sha": "9b94054b7c60183cc38f1b9f3681c1770c043d77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjk0MDU0YjdjNjAxODNjYzM4ZjFiOWYzNjgxYzE3NzBjMDQzZDc3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-09T20:53:45Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-28T13:18:14Z"
      },
      "message": "Avoid reference to undefined name: stderr does not exist, sys.stderr does",
      "tree": {
        "sha": "8c55ebb7d965a20fe332407cd74d0a41c7b0af41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c55ebb7d965a20fe332407cd74d0a41c7b0af41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b94054b7c60183cc38f1b9f3681c1770c043d77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b94054b7c60183cc38f1b9f3681c1770c043d77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b94054b7c60183cc38f1b9f3681c1770c043d77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b94054b7c60183cc38f1b9f3681c1770c043d77/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51cb6b8221560e5e62894b566c9580dbbd1c65a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51cb6b8221560e5e62894b566c9580dbbd1c65a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51cb6b8221560e5e62894b566c9580dbbd1c65a4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "58fec6dddc78225cb515114dcd0b7161da5ba855",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b94054b7c60183cc38f1b9f3681c1770c043d77/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b94054b7c60183cc38f1b9f3681c1770c043d77/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=9b94054b7c60183cc38f1b9f3681c1770c043d77",
        "patch": "@@ -140,7 +140,7 @@ def get_rpc_cookie():\n \tif 'datadir' in settings and not use_userpass:\n \t\tuse_datadir = True\n \tif not use_userpass and not use_datadir:\n-\t\tprint(\"Missing datadir or username and/or password in cfg file\", file=stderr)\n+\t\tprint(\"Missing datadir or username and/or password in cfg file\", file=sys.stderr)\n \t\tsys.exit(1)\n \n \tsettings['port'] = int(settings['port'])"
      }
    ]
  },
  {
    "sha": "2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTYwODBiYmYzMWQ1Y2MyZTM4ZThhN2I0MzZlOGNlMTg1N2U1ODli",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-20T21:10:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-28T13:18:14Z"
      },
      "message": "Remove unused variables and/or function calls",
      "tree": {
        "sha": "36f280b71163f7a43058be57b1cad7f39cf0d923",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36f280b71163f7a43058be57b1cad7f39cf0d923"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b94054b7c60183cc38f1b9f3681c1770c043d77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b94054b7c60183cc38f1b9f3681c1770c043d77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b94054b7c60183cc38f1b9f3681c1770c043d77"
      }
    ],
    "stats": {
      "total": 389,
      "additions": 29,
      "deletions": 360
    },
    "files": [
      {
        "sha": "6968b46f7370e903ad36014393e10151d20b20ac",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -387,7 +387,7 @@ def test_version2_relay(self):\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n         tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n-        tx_id = self.nodes[1].sendrawtransaction(tx_signed)\n+        self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':\n     BIP68Test().main()"
      },
      {
        "sha": "553ef4cd00a0719beac8b02be76b97fdbf23fd76",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -167,7 +167,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n-    txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n+    rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n "
      },
      {
        "sha": "9074223cb00151185f0795d3016613c873f7ca48",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -312,7 +312,6 @@ def run_test(self):\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n-        listunspent = self.nodes[2].listunspent()\n         inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)"
      },
      {
        "sha": "13e1bdecd37e0fdf985ea3c71025b15f0677e14b",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -161,7 +161,6 @@ def run_test(self):\n                 variant.check()\n \n         # Create new transactions sending to each address.\n-        fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.sent_amount = 10 - (2 * i + 1) / 8.0\n             variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)"
      },
      {
        "sha": "18a3df028fb3a6f06d08d17835345de31f5e20bf",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -21,16 +21,7 @@ def run_test (self):\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n-        # keyword definition\n-        PRIV_KEY = 'privkey'\n-        PUB_KEY = 'pubkey'\n-        ADDRESS_KEY = 'address'\n-        SCRIPT_KEY = 'script'\n-\n-\n         node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        node0_address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        node0_address3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n \n         #Check only one address\n         assert_equal(node0_address1['ismine'], True)\n@@ -230,7 +221,6 @@ def run_test (self):\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh\")\n         result = self.nodes[1].importmulti([{\n@@ -258,7 +248,6 @@ def run_test (self):\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh with respective redeem script\")\n         result = self.nodes[1].importmulti([{\n@@ -286,7 +275,6 @@ def run_test (self):\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -314,7 +302,6 @@ def run_test (self):\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{"
      },
      {
        "sha": "4e88fc592e78928cf2b44991fa29db1dbe9c2ab8",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -24,7 +24,6 @@ def run_test(self):\n         address1 = self.nodes[0].getnewaddress()\n         # pubkey\n         address2 = self.nodes[0].getnewaddress()\n-        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n         # privkey\n         address3 = self.nodes[0].getnewaddress()\n         address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n@@ -77,13 +76,13 @@ def run_test(self):\n \n         #Import with affiliated address with no rescan\n         self.nodes[1].importaddress(address2, \"add2\", False)\n-        result2 = self.nodes[1].importprunedfunds(rawtxn2, proof2)\n+        self.nodes[1].importprunedfunds(rawtxn2, proof2)\n         balance2 = self.nodes[1].getbalance(\"add2\", 0, True)\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n         self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n-        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3)\n+        self.nodes[1].importprunedfunds(rawtxn3, proof3)\n         balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))\n         balance3 = self.nodes[1].getbalance(\"*\", 0, True)"
      },
      {
        "sha": "92af0fefd07e87df6843463b92a8ac449a4308ef",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -397,7 +397,7 @@ def update_block(block_number, new_transactions):\n         yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n-        b27 = block(27, spend=out[7])\n+        block(27, spend=out[7])\n         yield rejected(False)\n \n         # Now try a too-large-coinbase script\n@@ -409,7 +409,7 @@ def update_block(block_number, new_transactions):\n         yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n-        b29 = block(29, spend=out[7])\n+        block(29, spend=out[7])\n         yield rejected(False)\n \n         # b30 has a max-sized coinbase scriptSig.\n@@ -581,7 +581,7 @@ def update_block(block_number, new_transactions):\n \n         # same as b40, but one less sigop\n         tip(39)\n-        b41 = block(41, spend=None)\n+        block(41, spend=None)\n         update_block(41, b40.vtx[1:-1])\n         b41_sigops_to_fill = b40_sigops_to_fill - 1\n         tx = CTransaction()\n@@ -927,7 +927,7 @@ def update_block(block_number, new_transactions):\n         # -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n         #\n         tip(64)\n-        b65 = block(65)\n+        block(65)\n         tx1 = create_and_sign_tx(out[19].tx, out[19].n, out[19].tx.vout[0].nValue)\n         tx2 = create_and_sign_tx(tx1, 0, 0)\n         update_block(65, [tx1, tx2])\n@@ -939,7 +939,7 @@ def update_block(block_number, new_transactions):\n         # -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) -> b65 (19)\n         #                                                                                    \\-> b66 (20)\n         tip(65)\n-        b66 = block(66)\n+        block(66)\n         tx1 = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue)\n         tx2 = create_and_sign_tx(tx1, 0, 1)\n         update_block(66, [tx2, tx1])\n@@ -952,7 +952,7 @@ def update_block(block_number, new_transactions):\n         #\n         #\n         tip(65)\n-        b67 = block(67)\n+        block(67)\n         tx1 = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue)\n         tx2 = create_and_sign_tx(tx1, 0, 1)\n         tx3 = create_and_sign_tx(tx1, 0, 2)\n@@ -972,7 +972,7 @@ def update_block(block_number, new_transactions):\n         #       this succeeds\n         #\n         tip(65)\n-        b68 = block(68, additional_coinbase_value=10)\n+        block(68, additional_coinbase_value=10)\n         tx = create_and_sign_tx(out[20].tx, out[20].n, out[20].tx.vout[0].nValue-9)\n         update_block(68, [tx])\n         yield rejected(RejectResult(16, b'bad-cb-amount'))\n@@ -1175,7 +1175,7 @@ def update_block(block_number, new_transactions):\n         #\n         #  -> b81 (26) -> b82 (27) -> b83 (28)\n         #\n-        b83 = block(83)\n+        block(83)\n         op_codes = [OP_IF, OP_INVALIDOPCODE, OP_ELSE, OP_TRUE, OP_ENDIF]\n         script = CScript(op_codes)\n         tx1 = create_and_sign_tx(out[28].tx, out[28].n, out[28].tx.vout[0].nValue, script)\n@@ -1195,7 +1195,7 @@ def update_block(block_number, new_transactions):\n         #                                    \\-> b85 (29) -> b86 (30)            \\-> b89a (32)\n         #\n         #\n-        b84 = block(84)\n+        block(84)\n         tx1 = create_tx(out[29].tx, out[29].n, 0, CScript([OP_RETURN]))\n         tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))"
      },
      {
        "sha": "de69cba393aca198d40f6d5a3e747737ddf74f1b",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -17,7 +17,6 @@\n # The versionbit bit used to signal activation of SegWit\n VB_WITNESS_BIT = 1\n VB_PERIOD = 144\n-VB_ACTIVATION_THRESHOLD = 108\n VB_TOP_BITS = 0x20000000\n \n MAX_SIGOP_COST = 80000"
      },
      {
        "sha": "847553097f5d881869b19732ef16457685197b92",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -63,7 +63,6 @@ def run_test(self):\n         addr2Obj = self.nodes[2].validateaddress(addr2)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n \n         #use balance deltas instead of absolute values\n         bal = self.nodes[2].getbalance()\n@@ -87,7 +86,6 @@ def run_test(self):\n         addr3Obj = self.nodes[2].validateaddress(addr3)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n \n         txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)"
      },
      {
        "sha": "4f33bb58b9cdc5832f9f90dfe01931ad4af09632",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -270,7 +270,7 @@ def test_replacement_feeperkb(self):\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n-        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n         # Higher fee, but the fee per KB is much lower, so the replacement is\n         # rejected.\n@@ -331,7 +331,7 @@ def test_new_unconfirmed_inputs(self):\n         tx1.vin = [CTxIn(confirmed_utxo)]\n         tx1.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1_hex = txToHex(tx1)\n-        tx1_txid = self.nodes[0].sendrawtransaction(tx1_hex, True)\n+        self.nodes[0].sendrawtransaction(tx1_hex, True)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)]\n@@ -499,7 +499,7 @@ def test_prioritised_transactions(self):\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx2a_hex = txToHex(tx2a)\n-        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+        self.nodes[0].sendrawtransaction(tx2a_hex, True)\n \n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()"
      },
      {
        "sha": "7bcb393012cf837a6878a8441f70a7241a0f10ba",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -12,7 +12,6 @@\n from io import BytesIO\n \n NODE_0 = 0\n-NODE_1 = 1\n NODE_2 = 2\n WIT_V0 = 0\n WIT_V1 = 1"
      },
      {
        "sha": "180dac197e050cd3d5d732bb512a3cd82755b6e3",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -44,16 +44,6 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n-def key_to_p2sh_p2wpkh(key, main = False):\n-    key = check_key(key)\n-    p2shscript = CScript([OP_0, hash160(key)])\n-    return script_to_p2sh(p2shscript, main)\n-\n-def script_to_p2sh_p2wsh(script, main = False):\n-    script = check_script(script)\n-    p2shscript = CScript([OP_0, sha256(script)])\n-    return script_to_p2sh(p2shscript, main)\n-\n def check_key(key):\n     if (type(key) is str):\n         key = hex_str_to_bytes(key) # Assuming this is hex string"
      },
      {
        "sha": "db5ccd62c2c02d9eac01ba1d50483804043e62c9",
        "filename": "test/functional/test_framework/bignum.py",
        "status": "modified",
        "additions": 0,
        "deletions": 39,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/bignum.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -26,12 +26,6 @@ def bn2bin(v):\n         i -= 1\n     return s\n \n-def bin2bn(s):\n-    l = 0\n-    for ch in s:\n-        l = (l << 8) | ch\n-    return l\n-\n def bn2mpi(v):\n     have_ext = False\n     if v.bit_length() > 0:\n@@ -54,30 +48,6 @@ def bn2mpi(v):\n             v_bin[0] |= 0x80\n     return s + ext + v_bin\n \n-def mpi2bn(s):\n-    if len(s) < 4:\n-        return None\n-    s_size = bytes(s[:4])\n-    v_len = struct.unpack(b\">I\", s_size)[0]\n-    if len(s) != (v_len + 4):\n-        return None\n-    if v_len == 0:\n-        return 0\n-\n-    v_str = bytearray(s[4:])\n-    neg = False\n-    i = v_str[0]\n-    if i & 0x80:\n-        neg = True\n-        i &= ~0x80\n-        v_str[0] = i\n-\n-    v = bin2bn(v_str)\n-\n-    if neg:\n-        return -v\n-    return v\n-\n # bitcoin-specific little endian format, with implicit size\n def mpi2vch(s):\n     r = s[4:]           # strip size\n@@ -86,12 +56,3 @@ def mpi2vch(s):\n \n def bn2vch(v):\n     return bytes(mpi2vch(bn2mpi(v)))\n-\n-def vch2mpi(s):\n-    r = struct.pack(b\">I\", len(s))   # size\n-    r += s[::-1]            # reverse string, converting LE->BE\n-    return r\n-\n-def vch2bn(s):\n-    return mpi2bn(vch2mpi(s))\n-"
      },
      {
        "sha": "4b2170a03f28d72e7bf5f517bf940c208921e2b2",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -143,16 +143,6 @@ def get(self, txhash):\n             return None\n         return value\n \n-    def get_transaction(self, txhash):\n-        ret = None\n-        serialized_tx = self.get(txhash)\n-        if serialized_tx is not None:\n-            f = BytesIO(serialized_tx)\n-            ret = CTransaction()\n-            ret.deserialize(f)\n-            ret.calc_sha256()\n-        return ret\n-\n     def add_transaction(self, tx):\n         tx.calc_sha256()\n         try:"
      },
      {
        "sha": "2607b9b07ccf3b1ecab1f1755fd0e4d95230153e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -48,8 +48,8 @@\n COIN = 100000000 # 1 btc in satoshis\n \n NODE_NETWORK = (1 << 0)\n-NODE_GETUTXO = (1 << 1)\n-NODE_BLOOM = (1 << 2)\n+# NODE_GETUTXO = (1 << 1)\n+# NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n@@ -1479,9 +1479,6 @@ def __init__(self):\n         # before acquiring the global lock and delivering the next message.\n         self.deliver_sleep_time = None\n \n-        # Remember the services our peer has advertised\n-        self.peer_services = None\n-\n     # Message receiving methods\n \n     def deliver(self, conn, message):\n@@ -1506,10 +1503,6 @@ def deliver(self, conn, message):\n                 print(\"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0]))\n \n-    def set_deliver_sleep_time(self, value):\n-        with mininode_lock:\n-            self.deliver_sleep_time = value\n-\n     def get_deliver_sleep_time(self):\n         with mininode_lock:\n             return self.deliver_sleep_time"
      },
      {
        "sha": "e5d415788f453af0228cb9922a6e8d62d6808303",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -15,17 +15,17 @@\n import os\n from binascii import unhexlify, hexlify\n \n-STATE_ESTABLISHED = '01'\n-STATE_SYN_SENT  = '02'\n-STATE_SYN_RECV = '03'\n-STATE_FIN_WAIT1 = '04'\n-STATE_FIN_WAIT2 = '05'\n-STATE_TIME_WAIT = '06'\n-STATE_CLOSE = '07'\n-STATE_CLOSE_WAIT = '08'\n-STATE_LAST_ACK = '09'\n+# STATE_ESTABLISHED = '01'\n+# STATE_SYN_SENT  = '02'\n+# STATE_SYN_RECV = '03'\n+# STATE_FIN_WAIT1 = '04'\n+# STATE_FIN_WAIT2 = '05'\n+# STATE_TIME_WAIT = '06'\n+# STATE_CLOSE = '07'\n+# STATE_CLOSE_WAIT = '08'\n+# STATE_LAST_ACK = '09'\n STATE_LISTEN = '0A'\n-STATE_CLOSING = '0B'\n+# STATE_CLOSING = '0B'\n \n def get_socket_inodes(pid):\n     '''"
      },
      {
        "sha": "8f5339a02a20e60a6dce64aa827620c987f9c9e8",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 0,
        "deletions": 245,
        "changes": 245,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -23,9 +23,7 @@\n \n from .bignum import bn2vch\n \n-MAX_SCRIPT_SIZE = 10000\n MAX_SCRIPT_ELEMENT_SIZE = 520\n-MAX_SCRIPT_OPCODES = 201\n \n OPCODE_NAMES = {}\n \n@@ -242,131 +240,6 @@ def __new__(cls, n):\n \n OP_INVALIDOPCODE = CScriptOp(0xff)\n \n-VALID_OPCODES = {\n-    OP_1NEGATE,\n-    OP_RESERVED,\n-    OP_1,\n-    OP_2,\n-    OP_3,\n-    OP_4,\n-    OP_5,\n-    OP_6,\n-    OP_7,\n-    OP_8,\n-    OP_9,\n-    OP_10,\n-    OP_11,\n-    OP_12,\n-    OP_13,\n-    OP_14,\n-    OP_15,\n-    OP_16,\n-\n-    OP_NOP,\n-    OP_VER,\n-    OP_IF,\n-    OP_NOTIF,\n-    OP_VERIF,\n-    OP_VERNOTIF,\n-    OP_ELSE,\n-    OP_ENDIF,\n-    OP_VERIFY,\n-    OP_RETURN,\n-\n-    OP_TOALTSTACK,\n-    OP_FROMALTSTACK,\n-    OP_2DROP,\n-    OP_2DUP,\n-    OP_3DUP,\n-    OP_2OVER,\n-    OP_2ROT,\n-    OP_2SWAP,\n-    OP_IFDUP,\n-    OP_DEPTH,\n-    OP_DROP,\n-    OP_DUP,\n-    OP_NIP,\n-    OP_OVER,\n-    OP_PICK,\n-    OP_ROLL,\n-    OP_ROT,\n-    OP_SWAP,\n-    OP_TUCK,\n-\n-    OP_CAT,\n-    OP_SUBSTR,\n-    OP_LEFT,\n-    OP_RIGHT,\n-    OP_SIZE,\n-\n-    OP_INVERT,\n-    OP_AND,\n-    OP_OR,\n-    OP_XOR,\n-    OP_EQUAL,\n-    OP_EQUALVERIFY,\n-    OP_RESERVED1,\n-    OP_RESERVED2,\n-\n-    OP_1ADD,\n-    OP_1SUB,\n-    OP_2MUL,\n-    OP_2DIV,\n-    OP_NEGATE,\n-    OP_ABS,\n-    OP_NOT,\n-    OP_0NOTEQUAL,\n-\n-    OP_ADD,\n-    OP_SUB,\n-    OP_MUL,\n-    OP_DIV,\n-    OP_MOD,\n-    OP_LSHIFT,\n-    OP_RSHIFT,\n-\n-    OP_BOOLAND,\n-    OP_BOOLOR,\n-    OP_NUMEQUAL,\n-    OP_NUMEQUALVERIFY,\n-    OP_NUMNOTEQUAL,\n-    OP_LESSTHAN,\n-    OP_GREATERTHAN,\n-    OP_LESSTHANOREQUAL,\n-    OP_GREATERTHANOREQUAL,\n-    OP_MIN,\n-    OP_MAX,\n-\n-    OP_WITHIN,\n-\n-    OP_RIPEMD160,\n-    OP_SHA1,\n-    OP_SHA256,\n-    OP_HASH160,\n-    OP_HASH256,\n-    OP_CODESEPARATOR,\n-    OP_CHECKSIG,\n-    OP_CHECKSIGVERIFY,\n-    OP_CHECKMULTISIG,\n-    OP_CHECKMULTISIGVERIFY,\n-\n-    OP_NOP1,\n-    OP_CHECKLOCKTIMEVERIFY,\n-    OP_CHECKSEQUENCEVERIFY,\n-    OP_NOP4,\n-    OP_NOP5,\n-    OP_NOP6,\n-    OP_NOP7,\n-    OP_NOP8,\n-    OP_NOP9,\n-    OP_NOP10,\n-\n-    OP_SMALLINTEGER,\n-    OP_PUBKEYS,\n-    OP_PUBKEYHASH,\n-    OP_PUBKEY,\n-}\n-\n OPCODE_NAMES.update({\n     OP_0 : 'OP_0',\n     OP_PUSHDATA1 : 'OP_PUSHDATA1',\n@@ -486,124 +359,6 @@ def __new__(cls, n):\n     OP_INVALIDOPCODE : 'OP_INVALIDOPCODE',\n })\n \n-OPCODES_BY_NAME = {\n-    'OP_0' : OP_0,\n-    'OP_PUSHDATA1' : OP_PUSHDATA1,\n-    'OP_PUSHDATA2' : OP_PUSHDATA2,\n-    'OP_PUSHDATA4' : OP_PUSHDATA4,\n-    'OP_1NEGATE' : OP_1NEGATE,\n-    'OP_RESERVED' : OP_RESERVED,\n-    'OP_1' : OP_1,\n-    'OP_2' : OP_2,\n-    'OP_3' : OP_3,\n-    'OP_4' : OP_4,\n-    'OP_5' : OP_5,\n-    'OP_6' : OP_6,\n-    'OP_7' : OP_7,\n-    'OP_8' : OP_8,\n-    'OP_9' : OP_9,\n-    'OP_10' : OP_10,\n-    'OP_11' : OP_11,\n-    'OP_12' : OP_12,\n-    'OP_13' : OP_13,\n-    'OP_14' : OP_14,\n-    'OP_15' : OP_15,\n-    'OP_16' : OP_16,\n-    'OP_NOP' : OP_NOP,\n-    'OP_VER' : OP_VER,\n-    'OP_IF' : OP_IF,\n-    'OP_NOTIF' : OP_NOTIF,\n-    'OP_VERIF' : OP_VERIF,\n-    'OP_VERNOTIF' : OP_VERNOTIF,\n-    'OP_ELSE' : OP_ELSE,\n-    'OP_ENDIF' : OP_ENDIF,\n-    'OP_VERIFY' : OP_VERIFY,\n-    'OP_RETURN' : OP_RETURN,\n-    'OP_TOALTSTACK' : OP_TOALTSTACK,\n-    'OP_FROMALTSTACK' : OP_FROMALTSTACK,\n-    'OP_2DROP' : OP_2DROP,\n-    'OP_2DUP' : OP_2DUP,\n-    'OP_3DUP' : OP_3DUP,\n-    'OP_2OVER' : OP_2OVER,\n-    'OP_2ROT' : OP_2ROT,\n-    'OP_2SWAP' : OP_2SWAP,\n-    'OP_IFDUP' : OP_IFDUP,\n-    'OP_DEPTH' : OP_DEPTH,\n-    'OP_DROP' : OP_DROP,\n-    'OP_DUP' : OP_DUP,\n-    'OP_NIP' : OP_NIP,\n-    'OP_OVER' : OP_OVER,\n-    'OP_PICK' : OP_PICK,\n-    'OP_ROLL' : OP_ROLL,\n-    'OP_ROT' : OP_ROT,\n-    'OP_SWAP' : OP_SWAP,\n-    'OP_TUCK' : OP_TUCK,\n-    'OP_CAT' : OP_CAT,\n-    'OP_SUBSTR' : OP_SUBSTR,\n-    'OP_LEFT' : OP_LEFT,\n-    'OP_RIGHT' : OP_RIGHT,\n-    'OP_SIZE' : OP_SIZE,\n-    'OP_INVERT' : OP_INVERT,\n-    'OP_AND' : OP_AND,\n-    'OP_OR' : OP_OR,\n-    'OP_XOR' : OP_XOR,\n-    'OP_EQUAL' : OP_EQUAL,\n-    'OP_EQUALVERIFY' : OP_EQUALVERIFY,\n-    'OP_RESERVED1' : OP_RESERVED1,\n-    'OP_RESERVED2' : OP_RESERVED2,\n-    'OP_1ADD' : OP_1ADD,\n-    'OP_1SUB' : OP_1SUB,\n-    'OP_2MUL' : OP_2MUL,\n-    'OP_2DIV' : OP_2DIV,\n-    'OP_NEGATE' : OP_NEGATE,\n-    'OP_ABS' : OP_ABS,\n-    'OP_NOT' : OP_NOT,\n-    'OP_0NOTEQUAL' : OP_0NOTEQUAL,\n-    'OP_ADD' : OP_ADD,\n-    'OP_SUB' : OP_SUB,\n-    'OP_MUL' : OP_MUL,\n-    'OP_DIV' : OP_DIV,\n-    'OP_MOD' : OP_MOD,\n-    'OP_LSHIFT' : OP_LSHIFT,\n-    'OP_RSHIFT' : OP_RSHIFT,\n-    'OP_BOOLAND' : OP_BOOLAND,\n-    'OP_BOOLOR' : OP_BOOLOR,\n-    'OP_NUMEQUAL' : OP_NUMEQUAL,\n-    'OP_NUMEQUALVERIFY' : OP_NUMEQUALVERIFY,\n-    'OP_NUMNOTEQUAL' : OP_NUMNOTEQUAL,\n-    'OP_LESSTHAN' : OP_LESSTHAN,\n-    'OP_GREATERTHAN' : OP_GREATERTHAN,\n-    'OP_LESSTHANOREQUAL' : OP_LESSTHANOREQUAL,\n-    'OP_GREATERTHANOREQUAL' : OP_GREATERTHANOREQUAL,\n-    'OP_MIN' : OP_MIN,\n-    'OP_MAX' : OP_MAX,\n-    'OP_WITHIN' : OP_WITHIN,\n-    'OP_RIPEMD160' : OP_RIPEMD160,\n-    'OP_SHA1' : OP_SHA1,\n-    'OP_SHA256' : OP_SHA256,\n-    'OP_HASH160' : OP_HASH160,\n-    'OP_HASH256' : OP_HASH256,\n-    'OP_CODESEPARATOR' : OP_CODESEPARATOR,\n-    'OP_CHECKSIG' : OP_CHECKSIG,\n-    'OP_CHECKSIGVERIFY' : OP_CHECKSIGVERIFY,\n-    'OP_CHECKMULTISIG' : OP_CHECKMULTISIG,\n-    'OP_CHECKMULTISIGVERIFY' : OP_CHECKMULTISIGVERIFY,\n-    'OP_NOP1' : OP_NOP1,\n-    'OP_CHECKLOCKTIMEVERIFY' : OP_CHECKLOCKTIMEVERIFY,\n-    'OP_CHECKSEQUENCEVERIFY' : OP_CHECKSEQUENCEVERIFY,\n-    'OP_NOP4' : OP_NOP4,\n-    'OP_NOP5' : OP_NOP5,\n-    'OP_NOP6' : OP_NOP6,\n-    'OP_NOP7' : OP_NOP7,\n-    'OP_NOP8' : OP_NOP8,\n-    'OP_NOP9' : OP_NOP9,\n-    'OP_NOP10' : OP_NOP10,\n-    'OP_SMALLINTEGER' : OP_SMALLINTEGER,\n-    'OP_PUBKEYS' : OP_PUBKEYS,\n-    'OP_PUBKEYHASH' : OP_PUBKEYHASH,\n-    'OP_PUBKEY' : OP_PUBKEY,\n-}\n-\n class CScriptInvalidError(Exception):\n     \"\"\"Base class for CScript exceptions\"\"\"\n     pass"
      },
      {
        "sha": "40225ad55d0e167d770504ba8dcde1fb3f29e484",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n-        sendResp = self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n+        self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n \n         self.sync_all()\n         self.nodes[1].generate(1) #mine a block"
      }
    ]
  },
  {
    "sha": "8239794360587d46895150b90172c36fec16d13f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjM5Nzk0MzYwNTg3ZDQ2ODk1MTUwYjkwMTcyYzM2ZmVjMTZkMTNm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-20T21:21:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-28T13:18:14Z"
      },
      "message": "Use the variable name _ for unused return values",
      "tree": {
        "sha": "3a2db386caba9d0af7fdf6f6879a880839c82106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a2db386caba9d0af7fdf6f6879a880839c82106"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8239794360587d46895150b90172c36fec16d13f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8239794360587d46895150b90172c36fec16d13f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8239794360587d46895150b90172c36fec16d13f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8239794360587d46895150b90172c36fec16d13f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e6080bbf31d5cc2e38e8a7b436e8ce1857e589b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "423d03eacbd03c4dccaa5d596408f1b9c10f759b",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8239794360587d46895150b90172c36fec16d13f/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8239794360587d46895150b90172c36fec16d13f/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=8239794360587d46895150b90172c36fec16d13f",
        "patch": "@@ -213,7 +213,7 @@ def run_test(self):\n         value = send_value\n \n         # Create tx1\n-        (tx1_id, tx1_value) = self.chain_transaction(self.nodes[0], tx0_id, 0, value, fee, 1)\n+        tx1_id, _ = self.chain_transaction(self.nodes[0], tx0_id, 0, value, fee, 1)\n \n         # Create tx2-7\n         vout = 1"
      },
      {
        "sha": "a69b8fb20c9fd2250dc43d3d3434ac161feb2f25",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8239794360587d46895150b90172c36fec16d13f/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8239794360587d46895150b90172c36fec16d13f/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=8239794360587d46895150b90172c36fec16d13f",
        "patch": "@@ -47,16 +47,16 @@ def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getblockcount(), 1)\n-        (hashY, hashZ) = self.nodes[1].generate(2)\n+        hashZ = self.nodes[1].generate(2)[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n-        (hashA, hashB, hashC) = self.nodes[0].generate(3)\n+        hashC = self.nodes[0].generate(3)[-1]\n         assert_equal(self.nodes[0].getblockcount(), 5)\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n-        (hashE, hashF, hashG) = self.nodes[1].generate(3)\n+        hashG = self.nodes[1].generate(3)[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n         assert(hashC != hashG)\n         self.log.info(\"Connect nodes and check no reorg occurs\")"
      },
      {
        "sha": "007084416848abc4fd5faa838a05666daece7330",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8239794360587d46895150b90172c36fec16d13f/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8239794360587d46895150b90172c36fec16d13f/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=8239794360587d46895150b90172c36fec16d13f",
        "patch": "@@ -91,7 +91,7 @@ def handle(self):\n                 self.conn.sendall(bytearray([0x01, 0x00]))\n \n             # Read connect request\n-            (ver,cmd,rsv,atyp) = recvall(self.conn, 4)\n+            ver, cmd, _, atyp = recvall(self.conn, 4)\n             if ver != 0x05:\n                 raise IOError('Invalid socks version %i in connect request' % ver)\n             if cmd != Command.CONNECT:"
      },
      {
        "sha": "b573a95aba8a6d3dce4c70434775a893ed8ec2d3",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8239794360587d46895150b90172c36fec16d13f/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8239794360587d46895150b90172c36fec16d13f/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=8239794360587d46895150b90172c36fec16d13f",
        "patch": "@@ -101,7 +101,7 @@ def run_test (self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_enc = \\\n+        found_addr, found_addr_chg, found_addr_rsv, _ = \\\n             read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now"
      }
    ]
  },
  {
    "sha": "78214588d6b8b7199015113c9d0d8250d6150014",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIxNDU4OGQ2YjhiNzE5OTAxNTExM2M5ZDBkODI1MGQ2MTUwMDE0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-09T20:51:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-28T13:18:14Z"
      },
      "message": "Use for-loop instead of list comprehension\n\nTo make it clear that we are intentionally using it for its\nside-effects.",
      "tree": {
        "sha": "afd7ca8d6e4244a96dce812e34374dc62b71919c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afd7ca8d6e4244a96dce812e34374dc62b71919c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78214588d6b8b7199015113c9d0d8250d6150014",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78214588d6b8b7199015113c9d0d8250d6150014",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78214588d6b8b7199015113c9d0d8250d6150014",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78214588d6b8b7199015113c9d0d8250d6150014/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8239794360587d46895150b90172c36fec16d13f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8239794360587d46895150b90172c36fec16d13f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8239794360587d46895150b90172c36fec16d13f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "91c0c406ff6c7a23515c70fa499a9563bbdddc48",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78214588d6b8b7199015113c9d0d8250d6150014/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78214588d6b8b7199015113c9d0d8250d6150014/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=78214588d6b8b7199015113c9d0d8250d6150014",
        "patch": "@@ -286,7 +286,8 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n \n         # Store the raw block in our internal format.\n         block = FromHex(CBlock(), node.getblock(\"%02x\" % block_hash, False))\n-        [tx.calc_sha256() for tx in block.vtx]\n+        for tx in block.vtx:\n+            tx.calc_sha256()\n         block.rehash()\n \n         # Wait until the block was announced (via compact blocks)"
      }
    ]
  }
]