[
  {
    "sha": "b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWYzNGU4NGJlZmE3ZGI2ZmY4YzliOTJhMDlkMGRmYTQwMzg4ZmI3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-10T16:21:20Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-11T02:05:57Z"
      },
      "message": "Improve readability of segwit.py",
      "tree": {
        "sha": "acf8ab9ff2b74f8bb9bb71ac339d89c1bed19879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf8ab9ff2b74f8bb9bb71ac339d89c1bed19879"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21833f9456f6ad5bc06321ad6d9590f42ce0195c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21833f9456f6ad5bc06321ad6d9590f42ce0195c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21833f9456f6ad5bc06321ad6d9590f42ce0195c"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 45,
      "deletions": 43
    },
    "files": [
      {
        "sha": "8f75e9ed4d5153b8c3d71d9ed2226760170cece5",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
        "patch": "@@ -102,7 +102,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n     segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n     rbf_node.addwitnessaddress(segwit_out[\"address\"])\n     segwitid = send_to_witness(\n-        version=0,\n+        use_p2wsh=False,\n         node=rbf_node,\n         utxo=segwit_in,\n         pubkey=segwit_out[\"pubkey\"],"
      },
      {
        "sha": "36eb0dbdc839ce60198591d0f26ef95310446393",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 44,
        "deletions": 42,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
        "patch": "@@ -6,59 +6,61 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import sha256, ripemd160, CTransaction, CTxIn, COutPoint, CTxOut\n+from test_framework.mininode import sha256, ripemd160, CTransaction, CTxIn, COutPoint, CTxOut, COIN\n from test_framework.address import script_to_p2sh, key_to_p2pkh\n-from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, hash160\n from io import BytesIO\n-from test_framework.mininode import FromHex\n+from test_framework.mininode import FromHex, ToHex\n \n NODE_0 = 0\n NODE_1 = 1\n NODE_2 = 2\n WIT_V0 = 0\n WIT_V1 = 1\n \n-def witness_script(version, pubkey):\n-    if (version == 0):\n-        pubkeyhash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pubkey))))\n-        pkscript = \"0014\" + pubkeyhash\n-    elif (version == 1):\n-        # 1-of-1 multisig\n-        scripthash = bytes_to_hex_str(sha256(hex_str_to_bytes(\"5121\" + pubkey + \"51ae\")))\n-        pkscript = \"0020\" + scripthash\n+# Create a scriptPubKey corresponding to either a P2WPKH output for the\n+# given pubkey, or a P2WSH output of a 1-of-1 multisig for the given\n+# pubkey. Returns the hex encoding of the scriptPubKey.\n+def witness_script(use_p2wsh, pubkey):\n+    if (use_p2wsh == False):\n+        # P2WPKH instead\n+        pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n+        pkscript = CScript([OP_0, pubkeyhash])\n     else:\n-        assert(\"Wrong version\" == \"0 or 1\")\n-    return pkscript\n-\n-def addlength(script):\n-    scriptlen = format(len(script)//2, 'x')\n-    assert(len(scriptlen) == 2)\n-    return scriptlen + script\n-\n-def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = witness_script(version, pubkey)\n+        # 1-of-1 multisig\n+        witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        scripthash = sha256(witness_program)\n+        pkscript = CScript([OP_0, scripthash])\n+    return bytes_to_hex_str(pkscript)\n+\n+# Return a transaction (in hex) that spends the given utxo to a segwit output,\n+# optionally wrapping the segwit output using P2SH.\n+def create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n+    pkscript = hex_str_to_bytes(witness_script(use_p2wsh, pubkey))\n     if (encode_p2sh):\n-        p2sh_hash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pkscript))))\n-        pkscript = \"a914\"+p2sh_hash+\"87\"\n-    inputs = []\n-    outputs = {}\n-    inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]} )\n-    DUMMY_P2SH = \"2MySexEGVzZpRgNQ1JdjdP5bRETznm3roQ2\" # P2SH of \"OP_1 OP_DROP\"\n-    outputs[DUMMY_P2SH] = amount\n-    tx_to_witness = node.createrawtransaction(inputs,outputs)\n-    #replace dummy output with our own\n-    tx_to_witness = tx_to_witness[0:110] + addlength(pkscript) + tx_to_witness[-8:]\n-    return tx_to_witness\n-\n-def send_to_witness(version, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n-    tx_to_witness = create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount)\n+        p2sh_hash = hash160(pkscript)\n+        pkscript = CScript([OP_HASH160, p2sh_hash, OP_EQUAL])\n+    tx = CTransaction()\n+    tx.vin.append(CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), b\"\"))\n+    tx.vout.append(CTxOut(int(amount*COIN), pkscript))\n+    return ToHex(tx)\n+\n+# Create a transaction spending a given utxo to a segwit output corresponding\n+# to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n+# encode_p2sh determines whether to wrap in P2SH.\n+# sign=True will have the given node sign the transaction.\n+# insert_redeem_script will be added to the scriptSig, if given.\n+def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n+    tx_to_witness = create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransaction(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:\n         if (insert_redeem_script):\n-            tx_to_witness = tx_to_witness[0:82] + addlength(insert_redeem_script) + tx_to_witness[84:]\n+            tx = FromHex(CTransaction(), tx_to_witness)\n+            tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n+            tx_to_witness = ToHex(tx)\n \n     return node.sendrawtransaction(tx_to_witness)\n \n@@ -180,8 +182,8 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False)\n         self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False)\n         # unsigned with redeem script\n-        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False, addlength(witness_script(0, self.pubkey[0])))\n-        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False, addlength(witness_script(1, self.pubkey[0])))\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], False, witness_script(False, self.pubkey[0]))\n+        self.fail_accept(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n         # signed\n         self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True)\n         self.fail_accept(self.nodes[0], wit_ids[NODE_0][WIT_V1][0], True)\n@@ -205,8 +207,8 @@ def run_test(self):\n         self.fail_accept(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False)\n \n         self.log.info(\"Verify unsigned p2sh witness txs with a redeem script in versionbits-settings blocks are valid before the fork\")\n-        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False, addlength(witness_script(0, self.pubkey[2]))) #block 430\n-        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False, addlength(witness_script(1, self.pubkey[2]))) #block 431\n+        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][1], False, witness_script(False, self.pubkey[2])) #block 430\n+        self.success_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][1], False, witness_script(True, self.pubkey[2])) #block 431\n \n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n@@ -230,8 +232,8 @@ def run_test(self):\n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][2], False)\n         self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][2], False)\n-        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][2], False, addlength(witness_script(0, self.pubkey[2])))\n-        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][2], False, addlength(witness_script(1, self.pubkey[2])))\n+        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][2], False, witness_script(False, self.pubkey[2]))\n+        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][2], False, witness_script(True, self.pubkey[2]))\n \n         self.log.info(\"Verify default node can now use witness txs\")\n         self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True) #block 432"
      }
    ]
  },
  {
    "sha": "1269b8a124180ea9f5d00ce282b79aeef19683c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjY5YjhhMTI0MTgwZWE5ZjVkMDBjZTI4MmI3OWFlZWYxOTY4M2Mx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-10T18:37:35Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-11T02:13:31Z"
      },
      "message": "Fix logging bug and improve readability of smartfees.py",
      "tree": {
        "sha": "9d25f568df59807f3ce3b2234c0a397a3b6febdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d25f568df59807f3ce3b2234c0a397a3b6febdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1269b8a124180ea9f5d00ce282b79aeef19683c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1269b8a124180ea9f5d00ce282b79aeef19683c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1269b8a124180ea9f5d00ce282b79aeef19683c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1269b8a124180ea9f5d00ce282b79aeef19683c1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f34e84befa7db6ff8c9b92a09d0dfa40388fb7"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 29,
      "deletions": 31
    },
    "files": [
      {
        "sha": "49f2df5c3743110fc41adde4e5e08d29f9f8331b",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 29,
        "deletions": 31,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1269b8a124180ea9f5d00ce282b79aeef19683c1/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1269b8a124180ea9f5d00ce282b79aeef19683c1/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=1269b8a124180ea9f5d00ce282b79aeef19683c1",
        "patch": "@@ -7,15 +7,19 @@\n from collections import OrderedDict\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, FromHex, COIN\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many many transactions without needing to spend\n # time signing.\n-P2SH_1 = \"2MySexEGVzZpRgNQ1JdjdP5bRETznm3roQ2\" # P2SH of \"OP_1 OP_DROP\"\n-P2SH_2 = \"2NBdpwq8Aoo1EEKEXPNrKvr5xQr3M9UfcZA\" # P2SH of \"OP_2 OP_DROP\"\n+redeem_script_1 = CScript([OP_1, OP_DROP])\n+redeem_script_2 = CScript([OP_2, OP_DROP])\n+P2SH_1 = CScript([OP_HASH160, hash160(redeem_script_1), OP_EQUAL])\n+P2SH_2 = CScript([OP_HASH160, hash160(redeem_script_2), OP_EQUAL])\n+\n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n-# 4 bytes of OP_TRUE and push 2-byte redeem script of \"OP_1 OP_DROP\" or \"OP_2 OP_DROP\"\n-SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n+SCRIPT_SIG = [CScript([OP_TRUE, redeem_script_1]), CScript([OP_TRUE, redeem_script_2])]\n \n global log\n \n@@ -35,39 +39,30 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     rand_fee = float(fee_increment)*(1.1892**random.randint(0,28))\n     # Total fee ranges from min_fee to min_fee + 127*fee_increment\n     fee = min_fee - fee_increment + satoshi_round(rand_fee)\n-    inputs = []\n+    tx = CTransaction()\n     total_in = Decimal(\"0.00000000\")\n     while total_in <= (amount + fee) and len(conflist) > 0:\n         t = conflist.pop(0)\n         total_in += t[\"amount\"]\n-        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]} )\n+        tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n     if total_in <= amount + fee:\n         while total_in <= (amount + fee) and len(unconflist) > 0:\n             t = unconflist.pop(0)\n             total_in += t[\"amount\"]\n-            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]} )\n+            tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n         if total_in <= amount + fee:\n             raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n-    outputs = {}\n-    outputs = OrderedDict([(P2SH_1, total_in - amount - fee),\n-                           (P2SH_2, amount)])\n-    rawtx = from_node.createrawtransaction(inputs, outputs)\n-    # createrawtransaction constructs a transaction that is ready to be signed.\n-    # These transactions don't need to be signed, but we still have to insert the ScriptSig\n-    # that will satisfy the ScriptPubKey.\n-    completetx = rawtx[0:10]\n-    inputnum = 0\n-    for inp in inputs:\n-        completetx += rawtx[10+82*inputnum:82+82*inputnum]\n-        completetx += SCRIPT_SIG[inp[\"vout\"]]\n-        completetx += rawtx[84+82*inputnum:92+82*inputnum]\n-        inputnum += 1\n-    completetx += rawtx[10+82*inputnum:]\n-    txid = from_node.sendrawtransaction(completetx, True)\n+    tx.vout.append(CTxOut(int((total_in - amount - fee)*COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(amount*COIN), P2SH_2))\n+    # These transactions don't need to be signed, but we still have to insert\n+    # the ScriptSig that will satisfy the ScriptPubKey.\n+    for inp in tx.vin:\n+        inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n+    txid = from_node.sendrawtransaction(ToHex(tx), True)\n     unconflist.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : total_in - amount - fee})\n     unconflist.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : amount})\n \n-    return (completetx, fee)\n+    return (ToHex(tx), fee)\n \n def split_inputs(from_node, txins, txouts, initial_split = False):\n     \"\"\"\n@@ -78,18 +73,21 @@ def split_inputs(from_node, txins, txouts, initial_split = False):\n     a high coin age when the notion of priority still existed.\n     \"\"\"\n     prevtxout = txins.pop()\n-    inputs = []\n-    inputs.append({ \"txid\" : prevtxout[\"txid\"], \"vout\" : prevtxout[\"vout\"] })\n+    tx = CTransaction()\n+    tx.vin.append(CTxIn(COutPoint(int(prevtxout[\"txid\"], 16), prevtxout[\"vout\"]), b\"\"))\n+\n     half_change = satoshi_round(prevtxout[\"amount\"]/2)\n     rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    outputs = OrderedDict([(P2SH_1, half_change), (P2SH_2, rem_change)])\n-    rawtx = from_node.createrawtransaction(inputs, outputs)\n+    tx.vout.append(CTxOut(int(half_change*COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(rem_change*COIN), P2SH_2))\n+\n     # If this is the initial split we actually need to sign the transaction\n-    # Otherwise we just need to insert the property ScriptSig\n+    # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split) :\n-        completetx = from_node.signrawtransaction(rawtx)[\"hex\"]\n+        completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n     else :\n-        completetx = rawtx[0:82] + SCRIPT_SIG[prevtxout[\"vout\"]] + rawtx[84:]\n+        tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n+        completetx = ToHex(tx)\n     txid = from_node.sendrawtransaction(completetx, True)\n     txouts.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : half_change})\n     txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})"
      }
    ]
  }
]