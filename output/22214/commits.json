[
  {
    "sha": "f47e8028391fbcf44fe1dbf3539f42e4185590fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDdlODAyODM5MWZiY2Y0NGZlMWRiZjM1MzlmNDJlNDE4NTU5MGZk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-07T15:41:37Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-10T14:58:45Z"
      },
      "message": "Rearrange fillPSBT arguments\n\nMove fillPSBT input-output argument before output-only arguments. This is a\ntemporary workaround which can go away with improvements to libmultiprocess\ncode generator. Currently code generator figures out order of input-output\nparameters by looking at input list, but it would make more sense for it to\ntake order from output list, so input-only parameters still have to be first\nbut there is more flexibility for the other parameters.",
      "tree": {
        "sha": "46763fdcd7596b3c2238e003e0ebb4ae8ad06623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46763fdcd7596b3c2238e003e0ebb4ae8ad06623"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f47e8028391fbcf44fe1dbf3539f42e4185590fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f47e8028391fbcf44fe1dbf3539f42e4185590fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f47e8028391fbcf44fe1dbf3539f42e4185590fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f47e8028391fbcf44fe1dbf3539f42e4185590fd/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1704bbf2263f16c720604cfab4ccb775315df690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1704bbf2263f16c720604cfab4ccb775315df690",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1704bbf2263f16c720604cfab4ccb775315df690"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "fb1febc11b6db5c0162dc40bd0d5dc896191f6e2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f47e8028391fbcf44fe1dbf3539f42e4185590fd",
        "patch": "@@ -198,9 +198,9 @@ class Wallet\n     virtual TransactionError fillPSBT(int sighash_type,\n         bool sign,\n         bool bip32derivs,\n+        size_t* n_signed,\n         PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        size_t* n_signed) = 0;\n+        bool& complete) = 0;\n \n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;"
      },
      {
        "sha": "2adfeeaaf0cd638b0c07eb30d29d6fc5bdbb1174",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=f47e8028391fbcf44fe1dbf3539f42e4185590fd",
        "patch": "@@ -50,7 +50,7 @@ void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n     bool complete;\n     size_t n_could_sign;\n     FinalizePSBT(psbtx);  // Make sure all existing signatures are fully combined before checking for completeness.\n-    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */,  m_transaction_data, complete, &n_could_sign);\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, &n_could_sign, m_transaction_data, complete);\n     if (err != TransactionError::OK) {\n         showStatus(tr(\"Failed to load transaction: %1\")\n             .arg(QString::fromStdString(TransactionErrorString(err).translated)), StatusLevel::ERR);\n@@ -67,7 +67,7 @@ void PSBTOperationsDialog::signTransaction()\n {\n     bool complete;\n     size_t n_signed;\n-    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, m_transaction_data, complete, &n_signed);\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed, m_transaction_data, complete);\n \n     if (err != TransactionError::OK) {\n         showStatus(tr(\"Failed to sign transaction: %1\")\n@@ -226,7 +226,7 @@ void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n size_t PSBTOperationsDialog::couldSignInputs(const PartiallySignedTransaction &psbtx) {\n     size_t n_signed;\n     bool complete;\n-    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, false /* bip32derivs */, m_transaction_data, complete, &n_signed);\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, false /* bip32derivs */, &n_signed, m_transaction_data, complete);\n \n     if (err != TransactionError::OK) {\n         return 0;"
      },
      {
        "sha": "6a5ec435cdf64c6a228aa1860f778e879a742567",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f47e8028391fbcf44fe1dbf3539f42e4185590fd",
        "patch": "@@ -414,12 +414,12 @@ void SendCoinsDialog::sendButtonClicked([[maybe_unused]] bool checked)\n         bool complete = false;\n         // Always fill without signing first. This prevents an external signer\n         // from being called prematurely and is not expensive.\n-        TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete, nullptr);\n+        TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, nullptr, psbtx, complete);\n         assert(!complete);\n         assert(err == TransactionError::OK);\n         if (model->wallet().hasExternalSigner()) {\n             try {\n-                err = model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, psbtx, complete, nullptr);\n+                err = model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, nullptr, psbtx, complete);\n             } catch (const std::runtime_error& e) {\n                 QMessageBox::critical(nullptr, tr(\"Sign failed\"), e.what());\n                 send_failure = true;"
      },
      {
        "sha": "967dd588b490bf8daee0d381704bcee88a859149",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f47e8028391fbcf44fe1dbf3539f42e4185590fd",
        "patch": "@@ -525,7 +525,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     if (create_psbt) {\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete, nullptr);\n+        const TransactionError err = wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, nullptr, psbtx, complete);\n         if (err != TransactionError::OK || complete) {\n             QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Can't draft transaction.\"));\n             return false;"
      },
      {
        "sha": "5a832d020b7bbb2c45ad45e69e6b57ca19d2f93d",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f47e8028391fbcf44fe1dbf3539f42e4185590fd/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=f47e8028391fbcf44fe1dbf3539f42e4185590fd",
        "patch": "@@ -349,9 +349,9 @@ class WalletImpl : public Wallet\n     TransactionError fillPSBT(int sighash_type,\n         bool sign,\n         bool bip32derivs,\n+        size_t* n_signed,\n         PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        size_t* n_signed) override\n+        bool& complete) override\n     {\n         return m_wallet->FillPSBT(psbtx, complete, sighash_type, sign, bip32derivs, n_signed);\n     }"
      }
    ]
  }
]