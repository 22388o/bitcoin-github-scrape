[
  {
    "sha": "2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTcxYmM1Y2M0OWUyOTAzMTZmNGUyN2U2ZTZiZjVkOTk1ZmJiOGIz",
    "commit": {
      "author": {
        "name": "gabriel",
        "email": "gabriel.bizzotto@gmail.com",
        "date": "2020-12-02T04:14:07Z"
      },
      "committer": {
        "name": "gabriel",
        "email": "gabriel.bizzotto@gmail.com",
        "date": "2020-12-09T11:54:14Z"
      },
      "message": "Designer fees when coin control is enabled:\nFees can now be set in satoshis instead of kSat/kB only.\nFees can now be set to zero satoshis.\nWhen switching to designer fee, or when inputs or outputs are changed, tx size is properly calculated (no guesswork). Fees, specified internally in sat/B, used to suffer alterations due to those approximations.",
      "tree": {
        "sha": "f1aa6fcc695f5d2f13cd14362121abbc142eb213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1aa6fcc695f5d2f13cd14362121abbc142eb213"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/comments",
    "author": {
      "login": "gbizzotto",
      "id": 5064376,
      "node_id": "MDQ6VXNlcjUwNjQzNzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5064376?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gbizzotto",
      "html_url": "https://github.com/gbizzotto",
      "followers_url": "https://api.github.com/users/gbizzotto/followers",
      "following_url": "https://api.github.com/users/gbizzotto/following{/other_user}",
      "gists_url": "https://api.github.com/users/gbizzotto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gbizzotto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gbizzotto/subscriptions",
      "organizations_url": "https://api.github.com/users/gbizzotto/orgs",
      "repos_url": "https://api.github.com/users/gbizzotto/repos",
      "events_url": "https://api.github.com/users/gbizzotto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gbizzotto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gbizzotto",
      "id": 5064376,
      "node_id": "MDQ6VXNlcjUwNjQzNzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5064376?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gbizzotto",
      "html_url": "https://github.com/gbizzotto",
      "followers_url": "https://api.github.com/users/gbizzotto/followers",
      "following_url": "https://api.github.com/users/gbizzotto/following{/other_user}",
      "gists_url": "https://api.github.com/users/gbizzotto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gbizzotto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gbizzotto/subscriptions",
      "organizations_url": "https://api.github.com/users/gbizzotto/orgs",
      "repos_url": "https://api.github.com/users/gbizzotto/repos",
      "events_url": "https://api.github.com/users/gbizzotto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gbizzotto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "277c225b842168c132e4ca1efe360f811dade5d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/277c225b842168c132e4ca1efe360f811dade5d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/277c225b842168c132e4ca1efe360f811dade5d3"
      }
    ],
    "stats": {
      "total": 358,
      "additions": 343,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f0ba9d0d3acf9e3ae4535a7ae3063896c7060f67",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
        "patch": "@@ -392,10 +392,10 @@ void CoinControlDialog::updateLabelLocked()\n     else ui->labelLocked->setVisible(false);\n }\n \n-void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *model, QDialog* dialog)\n+CAmount CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *model, QDialog* dialog, unsigned int tx_size)\n {\n     if (!model)\n-        return;\n+        return 0;\n \n     // nPayAmount\n     CAmount nPayAmount = 0;\n@@ -486,7 +486,7 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = model->wallet().getMinimumFee(nBytes, m_coin_control, nullptr /* returned_target */, nullptr /* reason */);\n+        nPayFee = model->wallet().getMinimumFee(tx_size==0?nBytes:tx_size, m_coin_control, nullptr /* returned_target */, nullptr /* reason */);\n \n         if (nPayAmount > 0)\n         {\n@@ -535,12 +535,14 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n     dialog->findChild<QLabel *>(\"labelCoinControlChangeText\")   ->setEnabled(nPayAmount > 0);\n     dialog->findChild<QLabel *>(\"labelCoinControlChange\")       ->setEnabled(nPayAmount > 0);\n \n+    tx_size = tx_size==0 ? nBytes : tx_size;\n+\n     // stats\n     l1->setText(QString::number(nQuantity));                                 // Quantity\n     l2->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAmount));        // Amount\n     l3->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nPayFee));        // Fee\n     l4->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nAfterFee));      // After Fee\n-    l5->setText(((nBytes > 0) ? ASYMP_UTF8 : \"\") + QString::number(nBytes));        // Bytes\n+    l5->setText(((tx_size > 0) ? ASYMP_UTF8 : \"\") + QString::number(tx_size));        // Bytes\n     l7->setText(fDust ? tr(\"yes\") : tr(\"no\"));                               // Dust\n     l8->setText(BitcoinUnits::formatWithUnit(nDisplayUnit, nChange));        // Change\n     if (nPayFee > 0)\n@@ -576,6 +578,8 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n     QLabel *label = dialog->findChild<QLabel *>(\"labelCoinControlInsuffFunds\");\n     if (label)\n         label->setVisible(nChange < 0);\n+\n+    return nPayFee;\n }\n \n void CoinControlDialog::updateView()"
      },
      {
        "sha": "971a1d740093133f89de3f48fec5292d796f15ce",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
        "patch": "@@ -46,7 +46,7 @@ class CoinControlDialog : public QDialog\n     ~CoinControlDialog();\n \n     // static because also called from sendcoinsdialog\n-    static void updateLabels(CCoinControl& m_coin_control, WalletModel*, QDialog*);\n+    static CAmount updateLabels(CCoinControl& m_coin_control, WalletModel*, QDialog*, unsigned int tx_size=0);\n \n     static QList<CAmount> payAmounts;\n     static bool fSubtractFeeFromAmount;"
      },
      {
        "sha": "80e16ca40f6d4a8da72696c7943b72c3431aaa3f",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
        "patch": "@@ -907,8 +907,90 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n                </item>\n               </layout>\n              </item>\n+             <item row=\"2\" column=\"1\">\n+              <layout class=\"QVBoxLayout\" name=\"verticalLayoutFee13\">\n+               <property name=\"spacing\">\n+                <number>6</number>\n+               </property>\n+               <item>\n+                <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee14\">\n+                 <item>\n+                  <widget class=\"QLabel\" name=\"labelDesignerFee\">\n+                   <property name=\"toolTip\">\n+                    <string>Specify a fee, in satoshis, for the transaction.\n+\n+Note: The exact size of the signed transaction must be known, so you will be prompted for the wallet's password for a temporary transaction to be signed with your private key. Every time the inputs, outputs or change address are modified, the transaction size is altered and must be recalculated with a new signature, thus requiring your password again.</string>\n+                   </property>\n+                   <property name=\"text\">\n+                    <string>exact fee</string>\n+                   </property>\n+                  </widget>\n+                 </item>\n+                 <item>\n+                  <widget class=\"BitcoinAmountField\" name=\"designerFee\"/>\n+                 </item>\n+                 <item>\n+                  <spacer name=\"horizontalSpacer_7\">\n+                   <property name=\"orientation\">\n+                    <enum>Qt::Horizontal</enum>\n+                   </property>\n+                   <property name=\"sizeHint\" stdset=\"0\">\n+                    <size>\n+                     <width>1</width>\n+                     <height>1</height>\n+                    </size>\n+                   </property>\n+                  </spacer>\n+                 </item>\n+                </layout>\n+               </item>\n+\t\t\t   <item>\n+                <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee15\">\n+                 <item>\n+                  <widget class=\"QLabel\" name=\"labelDesignerFeeWarning\">\n+                   <property name=\"enabled\">\n+                    <bool>false</bool>\n+                   </property>\n+                   <property name=\"toolTip\">\n+                    <string>The exact size of the signed transaction must be known, so you will be prompted for the wallet's password for a temporary transaction to be signed with your private key. Every time the inputs, outputs or change address are modified, the transaction size is altered and must be recalculated with a new signature, thus requiring your password again.</string>\n+                   </property>\n+                   <property name=\"text\">\n+                    <string>Enabled when inputs are selected manually. Requires unlocking your wallet (read the tooltip).</string>\n+                   </property>\n+                  </widget>\n+                 </item>\n+                 <item>\n+                  <spacer name=\"horizontalSpacer_8\">\n+                   <property name=\"orientation\">\n+                    <enum>Qt::Horizontal</enum>\n+                   </property>\n+                   <property name=\"sizeHint\" stdset=\"0\">\n+                    <size>\n+                     <width>1</width>\n+                     <height>1</height>\n+                    </size>\n+                   </property>\n+                  </spacer>\n+                 </item>\n+                </layout>\n+               </item>\n+              </layout>\n+             </item>\n              <item row=\"0\" column=\"0\">\n               <layout class=\"QVBoxLayout\" name=\"verticalLayoutFee4\" stretch=\"0,1\">\n+               <item>\n+                <spacer name=\"verticalSpacer_10\">\n+                 <property name=\"orientation\">\n+                  <enum>Qt::Vertical</enum>\n+                 </property>\n+                 <property name=\"sizeHint\" stdset=\"0\">\n+                  <size>\n+                   <width>1</width>\n+                   <height>1</height>\n+                  </size>\n+                 </property>\n+                </spacer>\n+               </item>\n                <item>\n                 <widget class=\"QRadioButton\" name=\"radioSmartFee\">\n                  <property name=\"text\">\n@@ -939,6 +1021,19 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n              </item>\n              <item row=\"1\" column=\"0\">\n               <layout class=\"QVBoxLayout\" name=\"verticalLayoutFee9\" stretch=\"0,1\">\n+               <item>\n+                <spacer name=\"verticalSpacer_9\">\n+                 <property name=\"orientation\">\n+                  <enum>Qt::Vertical</enum>\n+                 </property>\n+                 <property name=\"sizeHint\" stdset=\"0\">\n+                  <size>\n+                   <width>1</width>\n+                   <height>1</height>\n+                  </size>\n+                 </property>\n+                </spacer>\n+               </item>\n                <item>\n                 <widget class=\"QRadioButton\" name=\"radioCustomFee\">\n                  <property name=\"text\">\n@@ -964,6 +1059,46 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n                </item>\n               </layout>\n              </item>\n+             <item row=\"2\" column=\"0\">\n+              <layout class=\"QVBoxLayout\" name=\"verticalLayoutFee10\" stretch=\"0,1\">\n+               <item>\n+                <spacer name=\"verticalSpacer_8\">\n+                 <property name=\"orientation\">\n+                  <enum>Qt::Vertical</enum>\n+                 </property>\n+                 <property name=\"sizeHint\" stdset=\"0\">\n+                  <size>\n+                   <width>1</width>\n+                   <height>1</height>\n+                  </size>\n+                 </property>\n+                </spacer>\n+               </item>\n+               <item>\n+                <widget class=\"QRadioButton\" name=\"radioDesignerFee\">\n+                 <property name=\"text\">\n+                  <string>Designer fee:</string>\n+                 </property>\n+                 <attribute name=\"buttonGroup\">\n+                  <string notr=\"true\">groupFee</string>\n+                 </attribute>\n+                </widget>\n+               </item>\n+               <item>\n+                <spacer name=\"verticalSpacer_7\">\n+                 <property name=\"orientation\">\n+                  <enum>Qt::Vertical</enum>\n+                 </property>\n+                 <property name=\"sizeHint\" stdset=\"0\">\n+                  <size>\n+                   <width>1</width>\n+                   <height>1</height>\n+                  </size>\n+                 </property>\n+                </spacer>\n+               </item>\n+              </layout>\n+             </item>\n              <item row=\"0\" column=\"1\">\n               <layout class=\"QVBoxLayout\" name=\"verticalLayoutFee3\" stretch=\"0,0,1\">\n                <property name=\"spacing\">"
      },
      {
        "sha": "5835e08a914bea13004ec87872d1e578d67d84b5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 9,
        "changes": 196,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
        "patch": "@@ -62,7 +62,10 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     m_coin_control(new CCoinControl),\n     fNewRecipientAllowed(true),\n     fFeeMinimized(true),\n-    platformStyle(_platformStyle)\n+    platformStyle(_platformStyle),\n+    changing_fee(false),\n+    tx_size(0),\n+    previously_needed_change(false)\n {\n     ui->setupUi(this);\n \n@@ -125,6 +128,7 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_PAY_TX_FEE);\n     ui->groupFee->setId(ui->radioSmartFee, 0);\n     ui->groupFee->setId(ui->radioCustomFee, 1);\n+    ui->groupFee->setId(ui->radioDesignerFee, 2);\n     ui->groupFee->button((int)std::max(0, std::min(1, settings.value(\"nFeeRadio\").toInt())))->setChecked(true);\n     ui->customFee->SetAllowEmpty(false);\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n@@ -183,6 +187,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n #endif\n \n         connect(ui->customFee, &BitcoinAmountField::valueChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n+        connect(ui->designerFee, &BitcoinAmountField::valueChanged, this, &SendCoinsDialog::designerFeeChanged);\n         connect(ui->optInRBF, &QCheckBox::stateChanged, this, &SendCoinsDialog::updateSmartFeeLabel);\n         connect(ui->optInRBF, &QCheckBox::stateChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n         CAmount requiredFee = model->wallet().getRequiredFee(1000);\n@@ -191,6 +196,8 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             ui->customFee->setValue(requiredFee);\n         }\n         ui->customFee->setSingleStep(requiredFee);\n+        ui->designerFee->setSingleStep(1);\n+        ui->designerFee->setValue(0);\n         updateFeeSectionControls();\n         updateSmartFeeLabel();\n \n@@ -229,7 +236,7 @@ SendCoinsDialog::~SendCoinsDialog()\n     delete ui;\n }\n \n-bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text)\n+std::unique_ptr<WalletModelTransaction> SendCoinsDialog::SendCoinsDialog::make_unique_transaction()\n {\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n@@ -239,6 +246,8 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if(entry)\n         {\n+            if ( ! entry->isVisible())\n+                continue;\n             if(entry->validate(model->node()))\n             {\n                 recipients.append(entry->getValue());\n@@ -253,9 +262,13 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n \n     if(!valid || recipients.isEmpty())\n     {\n-        return false;\n+        return nullptr;\n     }\n+    return MakeUnique<WalletModelTransaction>(recipients);\n+}\n \n+bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text)\n+{\n     fNewRecipientAllowed = false;\n     WalletModel::UnlockContext ctx(model->requestUnlock());\n     if(!ctx.isValid())\n@@ -266,7 +279,10 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n     }\n \n     // prepare transaction for getting txFee earlier\n-    m_current_transaction = MakeUnique<WalletModelTransaction>(recipients);\n+    m_current_transaction = make_unique_transaction();\n+    if ( ! m_current_transaction)\n+        return false;\n+\n     WalletModel::SendCoinsReturn prepareStatus;\n \n     updateCoinControlState(*m_coin_control);\n@@ -466,6 +482,100 @@ void SendCoinsDialog::on_sendButton_clicked()\n     m_current_transaction.reset();\n }\n \n+bool SendCoinsDialog::outputsAreValid()\n+{\n+    std::set<QString> outputs;\n+    for(int i = 0; i < ui->entries->count(); ++i)\n+    {\n+        SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n+        if (entry->isHidden())\n+            continue;\n+        auto output = entry->getValue();\n+        if (output.address.length() == 0)\n+            return false;\n+        if (output.amount == 0)\n+            return false;\n+        if (outputs.find(output.address) != outputs.end())\n+            return false;\n+        outputs.insert(output.address);\n+    }\n+    return true;\n+}\n+bool SendCoinsDialog::txSizeProbablyChanged()\n+{\n+    bool changed = false;\n+\n+    // check whether selected inputs have changed\n+    std::vector<COutPoint> current_utxos;\n+    m_coin_control->ListSelected(current_utxos);\n+    bool inputs_changed = current_utxos != previous_input_selection;\n+    previous_input_selection.swap(current_utxos);\n+    changed |= inputs_changed;\n+\n+    // calculate change amount\n+    // if suddenly there's change where there used not to be (or vice versa), that's one output more (or less)\n+    CAmount curent_change_amount = 0;\n+    for (const auto& out : model->wallet().getCoins(current_utxos))\n+        if (out.depth_in_main_chain >= 0)\n+            curent_change_amount += out.txout.nValue;\n+\n+    // check whether manual change address has changed\n+    // if so, the type of address might have changed, thus changing the tx size\n+    auto current_change_address = m_coin_control->destChange;\n+    bool change_address_changed = current_change_address != previous_change_address;\n+    previous_change_address.swap(current_change_address);\n+    changed |= change_address_changed;\n+\n+    // calculate change amount\n+    for (const CAmount &amount : CoinControlDialog::payAmounts)\n+        curent_change_amount -= amount;\n+    \n+    // if suddenly there's change where there used not to be (or vice versa), that's one output more (or less)\n+    bool currently_needs_change = curent_change_amount !=0;\n+    bool need_for_change_changed = currently_needs_change != previously_needed_change;\n+    previously_needed_change = currently_needs_change;\n+    changed |= need_for_change_changed;\n+\n+    // check whether valid recipient addresses have changed\n+    std::set<QString> current_recipient_addresses;\n+    for(int i = 0; i < ui->entries->count(); ++i)\n+    {\n+        SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n+        if (entry->isHidden())\n+            continue;\n+        auto output = entry->getValue();\n+        if (output.address.length() == 0)\n+            continue;\n+        if (current_recipient_addresses.find(output.address) != current_recipient_addresses.end())\n+            continue;\n+        current_recipient_addresses.insert(output.address);\n+    }\n+    bool recipients_changed = current_recipient_addresses.size() != previous_recipient_addresses.size()\n+        || std::mismatch(current_recipient_addresses.begin(), current_recipient_addresses.end()\n+                        ,previous_recipient_addresses.begin(), previous_recipient_addresses.end()).first != current_recipient_addresses.end();\n+    previous_recipient_addresses.swap(current_recipient_addresses);\n+    changed |= recipients_changed;\n+\n+    return changed;\n+}\n+\n+void SendCoinsDialog::updateTxSize()\n+{\n+    // prepare transaction to get its exact size\n+    WalletModel::UnlockContext ctx(model->requestUnlock());\n+    if(!ctx.isValid())\n+        return;\n+    auto tx = make_unique_transaction();\n+    if ( ! tx)\n+        return;\n+    WalletModel::SendCoinsReturn prepareStatus = model->prepareTransaction(*tx, *m_coin_control);\n+    if(prepareStatus.status != WalletModel::OK) {\n+        processSendCoinsReturn(prepareStatus);\n+        return;\n+    }\n+    tx_size = tx->getTransactionSize();\n+}\n+\n void SendCoinsDialog::clear()\n {\n     m_current_transaction.reset();\n@@ -482,8 +592,6 @@ void SendCoinsDialog::clear()\n         ui->entries->takeAt(0)->widget()->deleteLater();\n     }\n     addEntry();\n-\n-    updateTabsAndLabels();\n }\n \n void SendCoinsDialog::reject()\n@@ -516,6 +624,10 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n         bar->setSliderPosition(bar->maximum());\n \n     updateTabsAndLabels();\n+\n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && txSizeProbablyChanged())\n+        updateTxSize();\n+\n     return entry;\n }\n \n@@ -536,6 +648,9 @@ void SendCoinsDialog::removeEntry(SendCoinsEntry* entry)\n     entry->deleteLater();\n \n     updateTabsAndLabels();\n+\n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && txSizeProbablyChanged())\n+        updateTxSize();\n }\n \n QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)\n@@ -572,6 +687,12 @@ void SendCoinsDialog::setAddress(const QString &address)\n     }\n \n     entry->setAddress(address);\n+\n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && txSizeProbablyChanged())\n+    {\n+        updateTxSize();\n+        updateTabsAndLabels();\n+    }\n }\n \n void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)\n@@ -595,6 +716,10 @@ void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)\n     }\n \n     entry->setValue(rv);\n+    \n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && txSizeProbablyChanged())\n+        updateTxSize();\n+\n     updateTabsAndLabels();\n }\n \n@@ -724,6 +849,23 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->labelCustomFeeWarning   ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked());\n+    ui->designerFee             ->setEnabled(ui->radioDesignerFee->isChecked());\n+    ui->labelDesignerFee        ->setEnabled(ui->radioDesignerFee->isChecked());\n+    ui->labelDesignerFeeWarning ->setEnabled(ui->radioDesignerFee->isChecked());\n+    if (ui->radioDesignerFee->isChecked()) {\n+        ui->customFee->setSingleStep(1);\n+        ui->customFee->SetMinValue(0);\n+    } else {\n+        ui->customFee->setSingleStep(1000);\n+        ui->customFee->SetMinValue(model->wallet().getRequiredFee(1000));\n+        if ((ui->customFee->value() % 1000) != 0)\n+            ui->customFee->setValue((int)std::round(ui->customFee->value() / 1000.0) * 1000);\n+    }\n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && (txSizeProbablyChanged()))\n+    {\n+        updateTxSize();\n+        updateTabsAndLabels();\n+    }\n }\n \n void SendCoinsDialog::updateFeeMinimizedLabel()\n@@ -740,7 +882,7 @@ void SendCoinsDialog::updateFeeMinimizedLabel()\n \n void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n {\n-    if (ui->radioCustomFee->isChecked()) {\n+    if (ui->radioCustomFee->isChecked() || ui->radioDesignerFee->isChecked()) {\n         ctrl.m_feerate = CFeeRate(ui->customFee->value());\n     } else {\n         ctrl.m_feerate.reset();\n@@ -767,7 +909,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     m_coin_control->m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     int returned_target;\n     FeeReason reason;\n-    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, *m_coin_control, &returned_target, &reason));\n+    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1, *m_coin_control, &returned_target, &reason));\n \n     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n \n@@ -849,6 +991,11 @@ void SendCoinsDialog::coinControlButtonClicked()\n     CoinControlDialog dlg(*m_coin_control, model, platformStyle);\n     dlg.exec();\n     coinControlUpdateLabels();\n+\n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && txSizeProbablyChanged()) {\n+        updateTxSize();\n+        coinControlUpdateLabels();\n+    }\n }\n \n // Coin Control: checkbox custom change address\n@@ -944,22 +1091,53 @@ void SendCoinsDialog::coinControlUpdateLabels()\n         }\n     }\n \n+    ui->radioDesignerFee->setEnabled(m_coin_control->HasSelected());\n     if (m_coin_control->HasSelected())\n     {\n         // actual coin control calculation\n-        CoinControlDialog::updateLabels(*m_coin_control, model, this);\n+        if ( ! changing_fee)\n+        {\n+            changing_fee = true;\n+            CAmount fee = CoinControlDialog::updateLabels(*m_coin_control, model, this, ui->radioDesignerFee->isChecked() ? tx_size : 0);\n+            ui->designerFee->setValue(fee);\n+            changing_fee = false;\n+        }\n \n         // show coin control stats\n         ui->labelCoinControlAutomaticallySelected->hide();\n         ui->widgetCoinControl->show();\n     }\n     else\n     {\n+        ui->radioCustomFee->setChecked(ui->radioDesignerFee->isChecked());\n+\n         // hide coin control stats\n         ui->labelCoinControlAutomaticallySelected->show();\n         ui->widgetCoinControl->hide();\n         ui->labelCoinControlInsuffFunds->hide();\n     }\n+\n+    updateFeeSectionControls();\n+}\n+\n+void SendCoinsDialog::designerFeeChanged()\n+{\n+    if (changing_fee)\n+        return;\n+        \n+    changing_fee = true;\n+\n+    if (ui->radioDesignerFee->isChecked() && outputsAreValid() && (txSizeProbablyChanged()))\n+        updateTxSize();\n+\n+    CAmount fee = CoinControlDialog::updateLabels(*m_coin_control, model, this, tx_size);\n+    fee = ui->designerFee->value();\n+    if (tx_size != 0)\n+    {\n+        CAmount fee_rate = (int) std::ceil(fee * 1000.0 / tx_size);\n+        ui->customFee->setValue(fee_rate);\n+    }\n+    changing_fee = false;\n }\n \n SendConfirmationDialog::SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text, const QString& detailed_text, int _secDelay, const QString& _confirmButtonText, QWidget* parent)"
      },
      {
        "sha": "7883aea32fcaeaa0ef9ffade94b32e7de38fb6d4",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
        "patch": "@@ -67,6 +67,12 @@ public Q_SLOTS:\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;\n     const PlatformStyle *platformStyle;\n+    bool changing_fee;\n+    unsigned int tx_size;\n+    std::vector<COutPoint> previous_input_selection;\n+    CTxDestination previous_change_address;\n+    std::set<QString> previous_recipient_addresses;\n+    bool previously_needed_change;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n     // of a message and message flags for use in Q_EMIT message().\n@@ -78,6 +84,10 @@ public Q_SLOTS:\n     void updateFeeMinimizedLabel();\n     // Update the passed in CCoinControl with state from the GUI\n     void updateCoinControlState(CCoinControl& ctrl);\n+    std::unique_ptr<WalletModelTransaction> make_unique_transaction();\n+    bool outputsAreValid();\n+    bool txSizeProbablyChanged();\n+    void updateTxSize();\n \n private Q_SLOTS:\n     void on_sendButton_clicked();\n@@ -91,6 +101,7 @@ private Q_SLOTS:\n     void coinControlChangeChecked(int);\n     void coinControlChangeEdited(const QString &);\n     void coinControlUpdateLabels();\n+    void designerFeeChanged();\n     void coinControlClipboardQuantity();\n     void coinControlClipboardAmount();\n     void coinControlClipboardFee();"
      },
      {
        "sha": "9998d289324c2e0220307b900c520832254f0eee",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=2e71bc5cc49e290316f4e27e6e6bf5d995fbb8b3",
        "patch": "@@ -17,7 +17,7 @@ void CCoinControl::SetNull()\n     m_avoid_address_reuse = false;\n     setSelected.clear();\n     m_feerate.reset();\n-    fOverrideFeeRate = false;\n+    fOverrideFeeRate = true;\n     m_confirm_target.reset();\n     m_signal_bip125_rbf.reset();\n     m_fee_mode = FeeEstimateMode::UNSET;"
      }
    ]
  }
]