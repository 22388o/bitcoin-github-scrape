[
  {
    "sha": "394f106500622b5875f7bd9a5775a6fd4e5579d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTRmMTA2NTAwNjIyYjU4NzVmN2JkOWE1Nzc1YTZmZDRlNTU3OWQ5",
    "commit": {
      "author": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-07T04:23:52Z"
      },
      "committer": {
        "name": "Patick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-11-18T22:15:17Z"
      },
      "message": "Cache CWalletDB pointer in CWallet to improve performance",
      "tree": {
        "sha": "aa3985b1e250b040ad5a1e82e0ab1de7616564ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa3985b1e250b040ad5a1e82e0ab1de7616564ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/394f106500622b5875f7bd9a5775a6fd4e5579d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/394f106500622b5875f7bd9a5775a6fd4e5579d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/394f106500622b5875f7bd9a5775a6fd4e5579d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/394f106500622b5875f7bd9a5775a6fd4e5579d9/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fa5e604356ab4182971376fd758b4680737b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fa5e604356ab4182971376fd758b4680737b5a"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 55,
      "deletions": 90
    },
    "files": [
      {
        "sha": "f2bc582d501df0c49ff3a92e997f53e5e4e786b8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=394f106500622b5875f7bd9a5775a6fd4e5579d9",
        "patch": "@@ -1524,7 +1524,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         copyTo->fFromMe = copyFrom->fFromMe;\n                         copyTo->strFromAccount = copyFrom->strFromAccount;\n                         copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n+                        walletdb.WriteTx(copyTo->GetHash(), *copyTo);\n                     }\n                 }\n             }"
      },
      {
        "sha": "45dfb9b4cd5e8b21424bd39655b430b03d7d95ce",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=394f106500622b5875f7bd9a5775a6fd4e5579d9",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     walletdb.WriteAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, false);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, false);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, false);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "440cda50a698e2142e256c625b3d2a493bc056ae",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=394f106500622b5875f7bd9a5775a6fd4e5579d9",
        "patch": "@@ -829,7 +829,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n \n     // Debit\n     CAccountingEntry debit;\n-    debit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n+    debit.nOrderPos = pwalletMain->IncOrderPosNext();\n     debit.strAccount = strFrom;\n     debit.nCreditDebit = -nAmount;\n     debit.nTime = nNow;\n@@ -839,7 +839,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n \n     // Credit\n     CAccountingEntry credit;\n-    credit.nOrderPos = pwalletMain->IncOrderPosNext(&walletdb);\n+    credit.nOrderPos = pwalletMain->IncOrderPosNext();\n     credit.strAccount = strTo;\n     credit.nCreditDebit = nAmount;\n     credit.nTime = nNow;"
      },
      {
        "sha": "c6ad940aa1a38bd5ee5f95c43457722dc6567d3a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 76,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=394f106500622b5875f7bd9a5775a6fd4e5579d9",
        "patch": "@@ -121,7 +121,7 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n-        return CWalletDB(strWalletFile).WriteKey(pubkey,\n+        return pwalletdb->WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n@@ -137,12 +137,12 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n         return true;\n     {\n         LOCK(cs_wallet);\n-        if (pwalletdbEncryption)\n-            return pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n+        if (pwalletdb)\n+            return pwalletdb->WriteCryptedKey(vchPubKey,\n                                                         vchCryptedSecret,\n                                                         mapKeyMetadata[vchPubKey.GetID()]);\n         else\n-            return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n+            return pwalletdb->WriteCryptedKey(vchPubKey,\n                                                             vchCryptedSecret,\n                                                             mapKeyMetadata[vchPubKey.GetID()]);\n     }\n@@ -170,7 +170,7 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n         return false;\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteCScript(Hash160(redeemScript), redeemScript);\n+    return pwalletdb->WriteCScript(Hash160(redeemScript), redeemScript);\n }\n \n bool CWallet::LoadCScript(const CScript& redeemScript)\n@@ -197,7 +197,7 @@ bool CWallet::AddWatchOnly(const CScript &dest)\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    return pwalletdb->WriteWatchOnly(dest);\n }\n \n bool CWallet::RemoveWatchOnly(const CScript &dest)\n@@ -208,7 +208,7 @@ bool CWallet::RemoveWatchOnly(const CScript &dest)\n     if (!HaveWatchOnly())\n         NotifyWatchonlyChanged(false);\n     if (fFileBacked)\n-        if (!CWalletDB(strWalletFile).EraseWatchOnly(dest))\n+        if (!pwalletdb->EraseWatchOnly(dest))\n             return false;\n \n     return true;\n@@ -274,7 +274,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                     return false;\n                 if (!crypter.Encrypt(vMasterKey, pMasterKey.second.vchCryptedKey))\n                     return false;\n-                CWalletDB(strWalletFile).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n+                pwalletdb->WriteMasterKey(pMasterKey.first, pMasterKey.second);\n                 if (fWasLocked)\n                     Lock();\n                 return true;\n@@ -287,11 +287,10 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n-    CWalletDB walletdb(strWalletFile);\n-    walletdb.WriteBestBlock(loc);\n+    pwalletdb->WriteBestBlock(loc);\n }\n \n-bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)\n+bool CWallet::SetMinVersion(enum WalletFeature nVersion, bool fExplicit)\n {\n     LOCK(cs_wallet); // nWalletVersion\n     if (nWalletVersion >= nVersion)\n@@ -308,11 +307,8 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n \n     if (fFileBacked)\n     {\n-        CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(strWalletFile);\n         if (nWalletVersion > 40000)\n             pwalletdb->WriteMinVersion(nWalletVersion);\n-        if (!pwalletdbIn)\n-            delete pwalletdb;\n     }\n \n     return true;\n@@ -524,41 +520,32 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n         if (fFileBacked)\n         {\n-            assert(!pwalletdbEncryption);\n-            pwalletdbEncryption = new CWalletDB(strWalletFile);\n-            if (!pwalletdbEncryption->TxnBegin()) {\n-                delete pwalletdbEncryption;\n-                pwalletdbEncryption = NULL;\n+            if (!pwalletdb->TxnBegin()) {\n                 return false;\n             }\n-            pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+            pwalletdb->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n         }\n \n         if (!EncryptKeys(vMasterKey))\n         {\n             if (fFileBacked) {\n-                pwalletdbEncryption->TxnAbort();\n-                delete pwalletdbEncryption;\n+                pwalletdb->TxnAbort();\n             }\n             // We now probably have half of our keys encrypted in memory, and half not...\n             // die and let the user reload the unencrypted wallet.\n             assert(false);\n         }\n \n         // Encryption was introduced in version 0.4.0\n-        SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n+        SetMinVersion(FEATURE_WALLETCRYPT, true);\n \n         if (fFileBacked)\n         {\n-            if (!pwalletdbEncryption->TxnCommit()) {\n-                delete pwalletdbEncryption;\n+            if (!pwalletdb->TxnCommit()) {\n                 // We now have keys encrypted in memory, but not on disk...\n                 // die to avoid confusion and let the user reload the unencrypted wallet.\n                 assert(false);\n             }\n-\n-            delete pwalletdbEncryption;\n-            pwalletdbEncryption = NULL;\n         }\n \n         Lock();\n@@ -576,22 +563,17 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     return true;\n }\n \n-int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n+int64_t CWallet::IncOrderPosNext()\n {\n     AssertLockHeld(cs_wallet); // nOrderPosNext\n     int64_t nRet = nOrderPosNext++;\n-    if (pwalletdb) {\n-        pwalletdb->WriteOrderPosNext(nOrderPosNext);\n-    } else {\n-        CWalletDB(strWalletFile).WriteOrderPosNext(nOrderPosNext);\n-    }\n+    pwalletdb->WriteOrderPosNext(nOrderPosNext);\n     return nRet;\n }\n \n CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount)\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n-    CWalletDB walletdb(strWalletFile);\n \n     // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n     TxItems txOrdered;\n@@ -604,7 +586,7 @@ CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries,\n         txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n     }\n     acentries.clear();\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n+    pwalletdb->ListAccountCreditDebit(strAccount, acentries);\n     BOOST_FOREACH(CAccountingEntry& entry, acentries)\n     {\n         txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n@@ -622,7 +604,7 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n {\n     uint256 hash = wtxIn.GetHash();\n \n@@ -643,7 +625,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         if (fInsertedNew)\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n-            wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+            wtx.nOrderPos = IncOrderPosNext();\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n             if (!wtxIn.hashBlock.IsNull())\n@@ -719,7 +701,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n \n         // Write to disk\n         if (fInsertedNew || fUpdated)\n-            if (!wtx.WriteToDisk(pwalletdb))\n+            if (!pwalletdb->WriteTx(wtx.GetHash(), wtx))\n                 return false;\n \n         // Break debit/credit balance caches:\n@@ -760,11 +742,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n \n-            // Do not flush the wallet here for performance reasons\n-            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n-            CWalletDB walletdb(strWalletFile, \"r+\", false);\n-\n-            return AddToWallet(wtx, false, &walletdb);\n+            return AddToWallet(wtx, false);\n         }\n     }\n     return false;\n@@ -1043,12 +1021,6 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n     }\n }\n \n-\n-bool CWalletTx::WriteToDisk(CWalletDB *pwalletdb)\n-{\n-    return pwalletdb->WriteTx(GetHash(), *this);\n-}\n-\n /**\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n@@ -2078,14 +2050,13 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             // This is only to keep the database open to defeat the auto-flush for the\n             // duration of this scope.  This is the only place where this optimization\n             // maybe makes sense; please don't do it anywhere else.\n-            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r+\") : NULL;\n \n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew, false, pwalletdb);\n+            AddToWallet(wtxNew, false);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;\n@@ -2154,7 +2125,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    DBErrors nLoadWalletRet = pwalletdb->LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -2181,7 +2152,7 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, vWtx);\n+    DBErrors nZapWalletTxRet = pwalletdb->ZapWalletTx(this, vWtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -2216,9 +2187,9 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const string& strNam\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!fFileBacked)\n         return false;\n-    if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n+    if (!strPurpose.empty() && !pwalletdb->WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n         return false;\n-    return CWalletDB(strWalletFile).WriteName(CBitcoinAddress(address).ToString(), strName);\n+    return pwalletdb->WriteName(CBitcoinAddress(address).ToString(), strName);\n }\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n@@ -2232,7 +2203,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n             std::string strAddress = CBitcoinAddress(address).ToString();\n             BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n             {\n-                CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+                pwalletdb->EraseDestData(strAddress, item.first);\n             }\n         }\n         mapAddressBook.erase(address);\n@@ -2242,15 +2213,15 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n     if (!fFileBacked)\n         return false;\n-    CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());\n-    return CWalletDB(strWalletFile).EraseName(CBitcoinAddress(address).ToString());\n+    pwalletdb->ErasePurpose(CBitcoinAddress(address).ToString());\n+    return pwalletdb->EraseName(CBitcoinAddress(address).ToString());\n }\n \n bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n {\n     if (fFileBacked)\n     {\n-        if (!CWalletDB(strWalletFile).WriteDefaultKey(vchPubKey))\n+        if (!pwalletdb->WriteDefaultKey(vchPubKey))\n             return false;\n     }\n     vchDefaultKey = vchPubKey;\n@@ -2265,9 +2236,8 @@ bool CWallet::NewKeyPool()\n {\n     {\n         LOCK(cs_wallet);\n-        CWalletDB walletdb(strWalletFile);\n         BOOST_FOREACH(int64_t nIndex, setKeyPool)\n-            walletdb.ErasePool(nIndex);\n+            pwalletdb->ErasePool(nIndex);\n         setKeyPool.clear();\n \n         if (IsLocked())\n@@ -2277,7 +2247,7 @@ bool CWallet::NewKeyPool()\n         for (int i = 0; i < nKeys; i++)\n         {\n             int64_t nIndex = i+1;\n-            walletdb.WritePool(nIndex, CKeyPool(GenerateNewKey()));\n+            pwalletdb->WritePool(nIndex, CKeyPool(GenerateNewKey()));\n             setKeyPool.insert(nIndex);\n         }\n         LogPrintf(\"CWallet::NewKeyPool wrote %d new keys\\n\", nKeys);\n@@ -2293,8 +2263,6 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (IsLocked())\n             return false;\n \n-        CWalletDB walletdb(strWalletFile);\n-\n         // Top up key pool\n         unsigned int nTargetSize;\n         if (kpSize > 0)\n@@ -2307,7 +2275,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             int64_t nEnd = 1;\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n+            if (!pwalletdb->WritePool(nEnd, CKeyPool(GenerateNewKey())))\n                 throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n@@ -2330,11 +2298,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         if(setKeyPool.empty())\n             return;\n \n-        CWalletDB walletdb(strWalletFile);\n-\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n-        if (!walletdb.ReadPool(nIndex, keypool))\n+        if (!pwalletdb->ReadPool(nIndex, keypool))\n             throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n             throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n@@ -2348,8 +2314,7 @@ void CWallet::KeepKey(int64_t nIndex)\n     // Remove from key pool\n     if (fFileBacked)\n     {\n-        CWalletDB walletdb(strWalletFile);\n-        walletdb.ErasePool(nIndex);\n+        pwalletdb->ErasePool(nIndex);\n     }\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n@@ -2578,13 +2543,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n \n-    CWalletDB walletdb(strWalletFile);\n-\n     LOCK2(cs_main, cs_wallet);\n     BOOST_FOREACH(const int64_t& id, setKeyPool)\n     {\n         CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n+        if (!pwalletdb->ReadPool(id, keypool))\n             throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n@@ -2746,7 +2709,7 @@ bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, co\n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteDestData(CBitcoinAddress(dest).ToString(), key, value);\n+    return pwalletdb->WriteDestData(CBitcoinAddress(dest).ToString(), key, value);\n }\n \n bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n@@ -2755,7 +2718,7 @@ bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n         return false;\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).EraseDestData(CBitcoinAddress(dest).ToString(), key);\n+    return pwalletdb->EraseDestData(CBitcoinAddress(dest).ToString(), key);\n }\n \n bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)"
      },
      {
        "sha": "6fb4bb74541fd05089027b1423aaad11f5ff2eed",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=394f106500622b5875f7bd9a5775a6fd4e5579d9",
        "patch": "@@ -453,7 +453,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n-    CWalletDB *pwalletdbEncryption;\n+    CWalletDB *pwalletdb;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion;\n@@ -508,12 +508,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n         strWalletFile = strWalletFileIn;\n         fFileBacked = true;\n+        \n+        pwalletdb = new CWalletDB(strWalletFile, \"cr+\");\n     }\n \n     ~CWallet()\n     {\n-        delete pwalletdbEncryption;\n-        pwalletdbEncryption = NULL;\n+        delete pwalletdb;\n+        pwalletdb = NULL;\n     }\n \n     void SetNull()\n@@ -522,7 +524,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nWalletMaxVersion = FEATURE_BASE;\n         fFileBacked = false;\n         nMasterKeyMaxID = 0;\n-        pwalletdbEncryption = NULL;\n+        pwalletdb = NULL;\n         nOrderPosNext = 0;\n         nNextResend = 0;\n         nLastResend = 0;\n@@ -615,7 +617,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Increment the next transaction order id\n      * @return next transaction order id\n      */\n-    int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n+    int64_t IncOrderPosNext();\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef std::multimap<int64_t, TxPair > TxItems;\n@@ -628,7 +630,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n@@ -731,7 +733,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool SetDefaultKey(const CPubKey &vchPubKey);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n+    bool SetMinVersion(enum WalletFeature, bool fExplicit = false);\n \n     //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n     bool SetMaxVersion(int nVersion);"
      },
      {
        "sha": "2ebdd394a5d7417704c5deae0da1ae0925627241",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394f106500622b5875f7bd9a5775a6fd4e5579d9/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=394f106500622b5875f7bd9a5775a6fd4e5579d9",
        "patch": "@@ -399,7 +399,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true, NULL);\n+            pwallet->AddToWallet(wtx, true);\n         }\n         else if (strType == \"acentry\")\n         {"
      }
    ]
  }
]