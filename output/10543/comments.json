[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306567690",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306567690",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 306567690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjU2NzY5MA==",
    "user": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?u=3f5671128164ee2ddb46fb03b0c7e05028811062&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T17:59:27Z",
    "updated_at": "2017-06-06T18:00:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK   I prefer this API.  I'll compile it and play with it a bit later today. Thanks for doing this \ud83e\udd47 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306567690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306577859",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306577859",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 306577859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjU3Nzg1OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T18:35:26Z",
    "updated_at": "2017-06-06T18:35:26Z",
    "author_association": "MEMBER",
    "body": "My reason for asking this is that it would allow someone to gather information using this RPC, without needing implementation-specific information. Sure, they'll need to understand the details to process the output anyway, but not the just collect.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306577859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306581006",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306581006",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 306581006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjU4MTAwNg==",
    "user": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?u=3f5671128164ee2ddb46fb03b0c7e05028811062&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T18:47:20Z",
    "updated_at": "2017-06-06T18:47:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK. Seems to work well, and easier to log/use\r\n\r\n```\r\nbitcoin-cli estimaterawfee 50 0.5\r\n{\r\n  \"short\": {\r\n    \"feerate\": -1\r\n  },\r\n  \"medium\": {\r\n    \"feerate\": -1\r\n  },\r\n  \"long\": {\r\n    \"feerate\": 0.00056300,\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"pass\": {\r\n      \"startrange\": 54641,\r\n      \"endrange\": 57374,\r\n      \"withintarget\": 878.66,\r\n      \"totalconfirmed\": 1495.65,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 141.38\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 52040,\r\n      \"endrange\": 54641,\r\n      \"withintarget\": 959.04,\r\n      \"totalconfirmed\": 4799.12,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 1430.93\r\n    }\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306581006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306787276",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306787276",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 306787276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjc4NzI3Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-07T13:00:33Z",
    "updated_at": "2017-06-07T13:00:33Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306787276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306787704",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306787704",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 306787704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjc4NzcwNA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-07T13:02:18Z",
    "updated_at": "2017-06-07T13:02:18Z",
    "author_association": "MEMBER",
    "body": "concept ACK as well. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306787704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306797506",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306797506",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 306797506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjc5NzUwNg==",
    "user": {
      "login": "jlopp",
      "id": 288011,
      "node_id": "MDQ6VXNlcjI4ODAxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/288011?u=c101c840881910966d00ec3139340fc973bda7ed&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jlopp",
      "html_url": "https://github.com/jlopp",
      "followers_url": "https://api.github.com/users/jlopp/followers",
      "following_url": "https://api.github.com/users/jlopp/following{/other_user}",
      "gists_url": "https://api.github.com/users/jlopp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jlopp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
      "organizations_url": "https://api.github.com/users/jlopp/orgs",
      "repos_url": "https://api.github.com/users/jlopp/repos",
      "events_url": "https://api.github.com/users/jlopp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jlopp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-07T13:39:22Z",
    "updated_at": "2017-06-07T13:39:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK; this will reduce the number of RPC calls we need to make to get a full picture of the fee market.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306797506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308533754",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-308533754",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 308533754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUzMzc1NA==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T19:27:58Z",
    "updated_at": "2017-06-14T19:27:58Z",
    "author_association": "MEMBER",
    "body": "rebased due to adjacent line change in src/rpc/client.cpp\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308533754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308534639",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-308534639",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 308534639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUzNDYzOQ==",
    "user": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?u=3f5671128164ee2ddb46fb03b0c7e05028811062&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T19:31:50Z",
    "updated_at": "2017-06-14T19:32:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've been running this patch for the last week on https://www.estimatefee.com to come up with estimates for how long a specific transaction will take to confirm. Haven't had any problems, and it works well and offers a nicer API.  So  ACK'ing again",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308534639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311028530",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311028530",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 311028530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTAyODUzMA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-26T11:02:40Z",
    "updated_at": "2017-06-26T11:03:40Z",
    "author_association": "MEMBER",
    "body": "```\r\n  \"short\": {\r\n    \"feerate\": -1\r\n  },\r\n```\r\nWhile we're changing the interface anyway, would it make sense to change the \"information absent\" response to something else than `-1`? (according to discussion in #8758)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311028530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311235567",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311235567",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 311235567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTIzNTU2Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-27T02:31:53Z",
    "updated_at": "2017-06-27T02:31:53Z",
    "author_association": "MEMBER",
    "body": "> While we're changing the interface anyway, would it make sense to change the \"information absent\" response to something else than -1\r\n\r\nACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311235567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311515094",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311515094",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 311515094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTUxNTA5NA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-27T23:34:51Z",
    "updated_at": "2017-06-27T23:34:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK 7780de8a0f333f9f168eeea2f2227597392034ff irrespective of if the \"information absent\" response is changed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311515094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311698254",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311698254",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 311698254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTY5ODI1NA==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-28T15:35:44Z",
    "updated_at": "2017-06-28T15:35:44Z",
    "author_association": "MEMBER",
    "body": "OK Updated to change error reporting and information absent\r\nFor a target outside the range:\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 1009 \r\nerror code: -8\r\nerror message:\r\nInvalid nblocks\r\n```\r\n\r\nWhen an answer can't be returned due to no fee rate meeting the threshold at the target (pass bucket is omitted but fail bucket still contains useful information):\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 1 1\r\n{\r\n  \"short\": {\r\n    \"decay\": 0.962,\r\n    \"scale\": 1,\r\n    \"fail\": {\r\n      \"startrange\": 881683,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 13.45,\r\n      \"totalconfirmed\": 14.96,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  },\r\n  \"medium\": {\r\n    \"feerate\": 0.02210603,\r\n    \"decay\": 0.9952,\r\n    \"scale\": 2,\r\n    \"pass\": {\r\n      \"startrange\": 2121876,\r\n      \"endrange\": 3456312,\r\n      \"withintarget\": 40.6,\r\n      \"totalconfirmed\": 40.6,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 1367780,\r\n      \"endrange\": 2121876,\r\n      \"withintarget\": 23.48,\r\n      \"totalconfirmed\": 23.48,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    }\r\n  },\r\n  \"long\": {\r\n    \"feerate\": 0.00128368,\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"pass\": {\r\n      \"startrange\": 125239,\r\n      \"endrange\": 131501,\r\n      \"withintarget\": 26652.56,\r\n      \"totalconfirmed\": 26652.56,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 119276,\r\n      \"endrange\": 125239,\r\n      \"withintarget\": 76474.09,\r\n      \"totalconfirmed\": 76474.52,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen the target is not supported at a given horizon, the result is just omitted.  Also if all feerates pass, the fail bucket is omitted:\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 122 0.0001\r\n{\r\n  \"long\": {\r\n    \"feerate\": 0.00001000,\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"pass\": {\r\n      \"startrange\": 0,\r\n      \"endrange\": 1000,\r\n      \"withintarget\": 168.05,\r\n      \"totalconfirmed\": 427.14,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 21.99\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen there is insufficient data to even calculate whether the target is met (pass bucket is omitted but fail bucket still contains useful information): *hacked to require many more data points for med and long horizons\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 12\r\n{\r\n  \"short\": {\r\n    \"feerate\": 0.00068495,\r\n    \"decay\": 0.962,\r\n    \"scale\": 1,\r\n    \"pass\": {\r\n      \"startrange\": 66417,\r\n      \"endrange\": 69738,\r\n      \"withintarget\": 346.39,\r\n      \"totalconfirmed\": 357.4,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 63254,\r\n      \"endrange\": 66417,\r\n      \"withintarget\": 4365.32,\r\n      \"totalconfirmed\": 6062.21,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    }\r\n  },\r\n  \"medium\": {\r\n    \"decay\": 0.9952,\r\n    \"scale\": 2,\r\n    \"fail\": {\r\n      \"startrange\": 0,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 262932.09,\r\n      \"totalconfirmed\": 301367.03,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 3477.64\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  },\r\n  \"long\": {\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"fail\": {\r\n      \"startrange\": 0,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 1852032.93,\r\n      \"totalconfirmed\": 1943598.4,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 3236.77\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311698254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313571587",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-313571587",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 313571587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzU3MTU4Nw==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T02:36:41Z",
    "updated_at": "2017-07-07T02:36:41Z",
    "author_association": "MEMBER",
    "body": "Addressed nits and squashed\r\n([rawpi.ver2](https://github.com/morcos/bitcoin/commits/rawapi.ver2)) -> 0220261 ([rawapi.ver2.squash](https://github.com/morcos/bitcoin/commits/rawapi.ver2.squash))",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313571587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313678023",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-313678023",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 313678023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzY3ODAyMw==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T13:17:18Z",
    "updated_at": "2017-07-07T13:17:18Z",
    "author_association": "MEMBER",
    "body": "Addressed nits and squashed\r\n([rawpi.ver3](https://github.com/morcos/bitcoin/commits/rawapi.ver3)) -> 6dc1410 ([rawapi.ver3.squash](https://github.com/morcos/bitcoin/commits/rawapi.ver3.squash))\r\n\r\nThanks for review @promag !",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313678023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313706309",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-313706309",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 313706309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcwNjMwOQ==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T14:59:30Z",
    "updated_at": "2017-07-07T14:59:30Z",
    "author_association": "MEMBER",
    "body": "tACK https://github.com/bitcoin/bitcoin/pull/10543/commits/6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313706309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313802659",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-313802659",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 313802659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzgwMjY1OQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T21:56:49Z",
    "updated_at": "2017-07-07T21:56:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "re-utACK 6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313802659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314285021",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-314285021",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
    "id": 314285021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDI4NTAyMQ==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-11T00:10:14Z",
    "updated_at": "2017-07-11T00:10:14Z",
    "author_association": "MEMBER",
    "body": "Addressed comments\r\n\r\n([rawpi.ver4](https://github.com/morcos/bitcoin/commits/rawapi.ver4)) -> ([rawapi.ver4.squash](https://github.com/morcos/bitcoin/commits/rawapi.ver4.squash)) -> 5e3b7b5  ([rawapi.ver4.rebase](https://github.com/morcos/bitcoin/commits/rawapi.ver4.rebase)) \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314285021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025043",
    "pull_request_review_id": 48473219,
    "id": 126025043,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjAyNTA0Mw==",
    "diff_hunk": "@@ -876,7 +876,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 2)",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "b63688146e45ea4b25328e9dee11aada30c52ade",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing space before second `||`.",
    "created_at": "2017-07-06T21:49:30Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025043",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025043"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025043"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 879,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025585",
    "pull_request_review_id": 48473219,
    "id": 126025585,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjAyNTU4NQ==",
    "diff_hunk": "@@ -887,72 +887,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        if ((unsigned int)nBlocks <= ::feeEstimator.HighestTargetTracked(horizon)) {\n+            feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+            UniValue horizonresult(UniValue::VOBJ);\n+            UniValue errors(UniValue::VARR);\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            if (!(feeRate == CFeeRate(0))) {",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "b63688146e45ea4b25328e9dee11aada30c52ade",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Invert condition and switch blocks.",
    "created_at": "2017-07-06T21:52:19Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025585",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025585"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025585"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 959,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126026402",
    "pull_request_review_id": 48473219,
    "id": 126026402,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjAyNjQwMg==",
    "diff_hunk": "@@ -887,72 +887,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        if ((unsigned int)nBlocks <= ::feeEstimator.HighestTargetTracked(horizon)) {",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 111,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "b63688146e45ea4b25328e9dee11aada30c52ade",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What about early `continue;` to avoid large indentation:\r\n```cpp\r\nif ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\r\n```",
    "created_at": "2017-07-06T21:56:05Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126026402",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126026402"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126026402"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126026402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 941,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126056010",
    "pull_request_review_id": 48506274,
    "id": 126056010,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA1NjAxMA==",
    "diff_hunk": "@@ -887,72 +887,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        if ((unsigned int)nBlocks <= ::feeEstimator.HighestTargetTracked(horizon)) {\n+            feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+            UniValue horizonresult(UniValue::VOBJ);\n+            UniValue errors(UniValue::VARR);\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            if (!(feeRate == CFeeRate(0))) {",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "b63688146e45ea4b25328e9dee11aada30c52ade",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I like having the success condition be the first thing you read, but I'll add a comment",
    "created_at": "2017-07-07T02:05:24Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126056010",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126056010"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126056010"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126056010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 959,
    "side": "RIGHT",
    "in_reply_to_id": 126025585
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126101980",
    "pull_request_review_id": 48554840,
    "id": 126101980,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEwMTk4MA==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, missing comma here and in the following lines.",
    "created_at": "2017-07-07T09:09:21Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126101980",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126101980"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126101980"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126101980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 907,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126102532",
    "pull_request_review_id": 48554840,
    "id": 126102532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEwMjUzMg==",
    "diff_hunk": "@@ -876,7 +876,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"estimaterawfee nblocks (threshold horizon)\\n\"",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 7,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, remove `horizon`.",
    "created_at": "2017-07-07T09:12:17Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126102532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126102532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126102532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126102532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 881,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103116",
    "pull_request_review_id": 48554840,
    "id": 126103116,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEwMzExNg==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 106,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, rename `horizon_names`.",
    "created_at": "2017-07-07T09:15:55Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103116",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103116"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103116"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 936,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103658",
    "pull_request_review_id": 48554840,
    "id": 126103658,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEwMzY1OA==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (!(feeRate == CFeeRate(0))) {",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 134,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe for another PR, but IMO `operator!=` would be more expressive, no?",
    "created_at": "2017-07-07T09:18:40Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103658",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103658"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103658"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 964,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103933",
    "pull_request_review_id": 48554840,
    "id": 126103933,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEwMzkzMw==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, snake case these multi word variables?",
    "created_at": "2017-07-07T09:19:50Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103933",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103933"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103933"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126105283",
    "pull_request_review_id": 48554840,
    "id": 126105283,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEwNTI4Mw==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));",
    "path": "src/rpc/mining.cpp",
    "position": 123,
    "original_position": 121,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should we make these round with 2 decimal places as strings? See https://stackoverflow.com/a/1343925.",
    "created_at": "2017-07-07T09:26:26Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126105283",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126105283"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126105283"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126105283/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 911,
    "original_line": 911,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126136347",
    "pull_request_review_id": 48593726,
    "id": 126136347,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEzNjM0Nw==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));",
    "path": "src/rpc/mining.cpp",
    "position": 123,
    "original_position": 121,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This RPC is kind of a low level debugging function anyway, so I might just save that for some later PR if people want it.",
    "created_at": "2017-07-07T12:36:58Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126136347",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126136347"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126136347"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126136347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 911,
    "original_line": 911,
    "side": "RIGHT",
    "in_reply_to_id": 126105283
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126137232",
    "pull_request_review_id": 48594765,
    "id": 126137232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjEzNzIzMg==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "i stuck with fixing the new ones",
    "created_at": "2017-07-07T12:41:58Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126137232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126137232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126137232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126137232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT",
    "in_reply_to_id": 126103933
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126143070",
    "pull_request_review_id": 48601607,
    "id": 126143070,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE0MzA3MA==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (!(feeRate == CFeeRate(0))) {",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 134,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "022026122f2f6de1b5107427310d72b8d85a9a55",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah I should have just added that operator before, since this has annoyed me a couple of times.",
    "created_at": "2017-07-07T13:13:52Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126143070",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126143070"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126143070"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126143070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 964,
    "side": "RIGHT",
    "in_reply_to_id": 126103658
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126157737",
    "pull_request_review_id": 48618594,
    "id": 126157737,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE1NzczNw==",
    "diff_hunk": "@@ -40,6 +40,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }",
    "path": "src/policy/feerate.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit nit, place after `operator==`.",
    "created_at": "2017-07-07T14:17:52Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126157737",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126157737"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126157737"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126157737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 43,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126159406",
    "pull_request_review_id": 48618594,
    "id": 126159406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE1OTQwNg==",
    "diff_hunk": "@@ -190,6 +190,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;",
    "path": "src/policy/fees.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since `nBlocks` and also `CBlockIndex::nHeight` are `int`, why not return `int` here too?",
    "created_at": "2017-07-07T14:24:20Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126159406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126159406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126159406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126159406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 220,
    "original_line": 220,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126160313",
    "pull_request_review_id": 48618594,
    "id": 126160313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2MDMxMw==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);",
    "path": "src/rpc/mining.cpp",
    "position": 120,
    "original_position": 122,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My suggestion was to snake case `feeRate`, `passbucket` and `failbucket`.",
    "created_at": "2017-07-07T14:28:03Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126160313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126160313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126160313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126160313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 908,
    "original_line": 908,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126160454",
    "pull_request_review_id": 48618594,
    "id": 126160454,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2MDQ1NA==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (feeRate != CFeeRate(0)) {\n+            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n+            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+        } else {\n+            // Output only information that is still meaningful in the event of error\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n+            horizon_result.push_back(Pair(\"errors\",errors));",
    "path": "src/rpc/mining.cpp",
    "position": 149,
    "original_position": 151,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, missing space before `errors`.",
    "created_at": "2017-07-07T14:28:38Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126160454",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126160454"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126160454"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126160454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 937,
    "original_line": 937,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126162896",
    "pull_request_review_id": 48618594,
    "id": 126162896,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2Mjg5Ng==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;",
    "path": "src/rpc/mining.cpp",
    "position": 115,
    "original_position": 117,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This omits the given horizon key from the output. Is this considered best practice for an API? An alternative is to return an array:\r\n```json\r\n[{ \"horizon\": \"short\", \"feerate\": 0.00068495, ... }]\r\n```",
    "created_at": "2017-07-07T14:38:36Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126162896",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126162896"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126162896"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126162896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 903,
    "original_line": 903,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183367",
    "pull_request_review_id": 48647750,
    "id": 126183367,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4MzM2Nw==",
    "diff_hunk": "@@ -190,6 +190,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;",
    "path": "src/policy/fees.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah I thought about that, but I figure it should really be an unsigned int, and so why not start moving things slowly in right direction.",
    "created_at": "2017-07-07T16:02:47Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183367",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183367"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183367"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 220,
    "original_line": 220,
    "side": "RIGHT",
    "in_reply_to_id": 126159406
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183659",
    "pull_request_review_id": 48648096,
    "id": 126183659,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4MzY1OQ==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;",
    "path": "src/rpc/mining.cpp",
    "position": 115,
    "original_position": 117,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes it's omitted because it is not meaningful to return an answer for a target higher than the horizon tracks.",
    "created_at": "2017-07-07T16:04:04Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 903,
    "original_line": 903,
    "side": "RIGHT",
    "in_reply_to_id": 126162896
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183718",
    "pull_request_review_id": 48648163,
    "id": 126183718,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4MzcxOA==",
    "diff_hunk": "@@ -190,6 +190,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;",
    "path": "src/policy/fees.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No problem, `uint32_t` then?",
    "created_at": "2017-07-07T16:04:21Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183718",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183718"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183718"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 220,
    "original_line": 220,
    "side": "RIGHT",
    "in_reply_to_id": 126159406
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183781",
    "pull_request_review_id": 48648250,
    "id": 126183781,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4Mzc4MQ==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);",
    "path": "src/rpc/mining.cpp",
    "position": 120,
    "original_position": 122,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yeah i just fixed variables introduced in this PR, instead of changing preexisting variables",
    "created_at": "2017-07-07T16:04:42Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183781",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183781"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183781"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 908,
    "original_line": 908,
    "side": "RIGHT",
    "in_reply_to_id": 126160313
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183862",
    "pull_request_review_id": 48648322,
    "id": 126183862,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4Mzg2Mg==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (feeRate != CFeeRate(0)) {\n+            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n+            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+        } else {\n+            // Output only information that is still meaningful in the event of error\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n+            horizon_result.push_back(Pair(\"errors\",errors));",
    "path": "src/rpc/mining.cpp",
    "position": 149,
    "original_position": 151,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "will fix if there are any more changes, but leave for now to avoid churn.",
    "created_at": "2017-07-07T16:05:02Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183862",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183862"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183862"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183862/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 937,
    "original_line": 937,
    "side": "RIGHT",
    "in_reply_to_id": 126160454
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183944",
    "pull_request_review_id": 48648407,
    "id": 126183944,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4Mzk0NA==",
    "diff_hunk": "@@ -40,6 +40,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }",
    "path": "src/policy/feerate.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "meh",
    "created_at": "2017-07-07T16:05:22Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183944",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183944"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126183944"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126183944/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 43,
    "original_line": 43,
    "side": "RIGHT",
    "in_reply_to_id": 126157737
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126184056",
    "pull_request_review_id": 48648509,
    "id": 126184056,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4NDA1Ng==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);",
    "path": "src/rpc/mining.cpp",
    "position": 120,
    "original_position": 122,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Touched code should be fixed too?",
    "created_at": "2017-07-07T16:05:47Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126184056",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126184056"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126184056"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126184056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 908,
    "original_line": 908,
    "side": "RIGHT",
    "in_reply_to_id": 126160313
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126184454",
    "pull_request_review_id": 48648958,
    "id": 126184454,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE4NDQ1NA==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;",
    "path": "src/rpc/mining.cpp",
    "position": 115,
    "original_position": 117,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hence the suggestion to return the array, a client iterates each element (if any) and uses the `horizon` value.",
    "created_at": "2017-07-07T16:07:34Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126184454",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126184454"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126184454"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126184454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 903,
    "original_line": 903,
    "side": "RIGHT",
    "in_reply_to_id": 126162896
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126195964",
    "pull_request_review_id": 48661684,
    "id": 126195964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE5NTk2NA==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;",
    "path": "src/rpc/mining.cpp",
    "position": 115,
    "original_position": 117,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh sorry, I misunderstood at first.  I suppose I'm not familiar enough with JSON practices to know what would be preferred.",
    "created_at": "2017-07-07T17:01:30Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126195964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126195964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126195964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126195964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 903,
    "original_line": 903,
    "side": "RIGHT",
    "in_reply_to_id": 126162896
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126196173",
    "pull_request_review_id": 48661940,
    "id": 126196173,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE5NjE3Mw==",
    "diff_hunk": "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);",
    "path": "src/rpc/mining.cpp",
    "position": 120,
    "original_position": 122,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe in this case it could have been since I touched a lot of the code, but I think in general it's easier not to make more changes than necessary in order to facilitate the review.",
    "created_at": "2017-07-07T17:02:37Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126196173",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126196173"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126196173"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126196173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 908,
    "original_line": 908,
    "side": "RIGHT",
    "in_reply_to_id": 126160313
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126196224",
    "pull_request_review_id": 48662001,
    "id": 126196224,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE5NjIyNA==",
    "diff_hunk": "@@ -190,6 +190,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;",
    "path": "src/policy/fees.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "any reason?",
    "created_at": "2017-07-07T17:02:55Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126196224",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126196224"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126196224"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126196224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 220,
    "original_line": 220,
    "side": "RIGHT",
    "in_reply_to_id": 126159406
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126198708",
    "pull_request_review_id": 48664996,
    "id": 126198708,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE5ODcwOA==",
    "diff_hunk": "@@ -190,6 +190,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;",
    "path": "src/policy/fees.h",
    "position": 14,
    "original_position": 5,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "6dc14106a14ebd91a740db925e0bef59ef6233f4",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Best practice? Not network code but still. See https://stackoverflow.com/a/21621533.",
    "created_at": "2017-07-07T17:15:55Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126198708",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126198708"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126198708"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126198708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 220,
    "original_line": 220,
    "side": "RIGHT",
    "in_reply_to_id": 126159406
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126524211",
    "pull_request_review_id": 49017194,
    "id": 126524211,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjUyNDIxMQ==",
    "diff_hunk": "@@ -891,68 +891,72 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },      (json object) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }      (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n             \"A negative feerate is returned if no answer can be given.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizon_names[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+\n+        UniValue horizon_result(UniValue::VOBJ);\n+        horizon_result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+        if (!(feeRate == CFeeRate(0))) {\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            horizon_result.push_back(Pair(\"fail\", failbucket));\n+        }\n+        result.push_back(Pair(horizon_names[horizon], horizon_result));",
    "path": "src/rpc/mining.cpp",
    "position": null,
    "original_position": 126,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "069f57533138edcb06c637036fcffe23d1049360",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Change API to estimaterawfee\"\r\n\r\nThis is pretty fragile. Consider replacing `horizon_names` array with `FeeEstimateHorizon -> std::string` function, or at adding a comment to FeeEstimateHorizon saying the enum values are used as array indices and need to be stable.",
    "created_at": "2017-07-10T20:13:49Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126524211",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126524211"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126524211"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126524211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 958,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126526157",
    "pull_request_review_id": 49017194,
    "id": 126526157,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjUyNjE1Nw==",
    "diff_hunk": "@@ -670,6 +670,24 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n+{\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        return shortStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        return feeStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        return longStats->GetMaxConfirms();\n+    }\n+    default: {\n+        return 0;",
    "path": "src/policy/fees.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "original_commit_id": "b0d0c83e3f4db011a77aefb68c247bf3795c2f03",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add function to report highest estimate target tracked per horizon\"\r\n\r\nSeems like it would be safer to throw an error than to rely on code handling this to do something with this 0.",
    "created_at": "2017-07-10T20:21:44Z",
    "updated_at": "2017-07-11T00:07:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126526157",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126526157"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126526157"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126526157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 686,
    "side": "RIGHT"
  }
]