[
  {
    "sha": "9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yzg1YjkxZGMxNTY2ZjdjMjdjNWI4YTFhOWM3YWViZTBlM2E4M2Nm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-06T17:08:27Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T00:07:13Z"
      },
      "message": "Change API to estimaterawfee\n\nReport results for all 3 possible time horizons instead of specifying time horizon as an argument.",
      "tree": {
        "sha": "a9cda413863908f2ccf954958e469b31964ca678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9cda413863908f2ccf954958e469b31964ca678"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9edda0c5f5f20bc6b302ad51fa5ec40ed9da184d"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 67,
      "deletions": 50
    },
    "files": [
      {
        "sha": "565da6c1541e9d8edec25109f31dee25cc35ed0a",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -40,6 +40,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n "
      },
      {
        "sha": "859a2e7804f6f3079eb7f51d9625e706629913ca",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -16,6 +16,19 @@\n \n static constexpr double INF_FEERATE = 1e99;\n \n+std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {\n+    static const std::map<FeeEstimateHorizon, std::string> horizon_strings = {\n+        {FeeEstimateHorizon::SHORT_HALFLIFE, \"short\"},\n+        {FeeEstimateHorizon::MED_HALFLIFE, \"medium\"},\n+        {FeeEstimateHorizon::LONG_HALFLIFE, \"long\"},\n+    };\n+    auto horizon_string = horizon_strings.find(horizon);\n+\n+    if (horizon_string == horizon_strings.end()) return \"unknown\";\n+\n+    return horizon_string->second;\n+}\n+\n std::string StringForFeeReason(FeeReason reason) {\n     static const std::map<FeeReason, std::string> fee_reason_strings = {\n         {FeeReason::NONE, \"None\"},"
      },
      {
        "sha": "86f143b23381d707a7f6f040b774fe4f5b9bf912",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -74,6 +74,8 @@ enum FeeEstimateHorizon {\n     LONG_HALFLIFE = 2\n };\n \n+std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon);\n+\n /* Enumeration of reason for returned fee estimate */\n enum class FeeReason {\n     NONE,"
      },
      {
        "sha": "4c5eb6dc69b7187412026a0c80511590e55018c9",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -113,7 +113,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n-    { \"estimaterawfee\", 2, \"horizon\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },\n     { \"prioritisetransaction\", 2, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },"
      },
      {
        "sha": "a15931386b9b846d5fc5b5ad2820ea754fa55cf3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 49,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "patch": "@@ -838,9 +838,9 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"estimaterawfee nblocks (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n@@ -853,68 +853,70 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"short\\\" : {            (json object) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      },\\n\"\n+            \"      \\\"fail\\\" : { ... },        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  },\\n\"\n+            \"  \\\"medium\\\" : { ... },      (json object) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }      (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n             \"A negative feerate is returned if no answer can be given.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+\n+        UniValue horizon_result(UniValue::VOBJ);\n+        horizon_result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+        if (!(feeRate == CFeeRate(0))) {\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            horizon_result.push_back(Pair(\"fail\", failbucket));\n+        }\n+        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+    }\n     return result;\n }\n \n@@ -932,7 +934,7 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\", \"horizon\"} },\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "1fafd704dac73594f69de5f9c15f697217653d7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmFmZDcwNGRhYzczNTk0ZjY5ZGU1ZjljMTVmNjk3MjE3NjUzZDdh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T14:03:00Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T00:07:17Z"
      },
      "message": "Add function to report highest estimate target tracked per horizon",
      "tree": {
        "sha": "fd914a07648e24c037a395ed3a355478a6a3c76b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd914a07648e24c037a395ed3a355478a6a3c76b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fafd704dac73594f69de5f9c15f697217653d7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fafd704dac73594f69de5f9c15f697217653d7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fafd704dac73594f69de5f9c15f697217653d7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fafd704dac73594f69de5f9c15f697217653d7a/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c85b91dc1566f7c27c5b8a1a9c7aebe0e3a83cf"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "51e11ea20efaa3be598944e05f25947a06b7e984",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1fafd704dac73594f69de5f9c15f697217653d7a",
        "patch": "@@ -684,7 +684,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n         break;\n     }\n     default: {\n-        return CFeeRate(0);\n+        throw std::out_of_range(\"CBlockPoicyEstimator::estimateRawFee unknown FeeEstimateHorizon\");\n     }\n     }\n \n@@ -703,6 +703,24 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n+{\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        return shortStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        return feeStats->GetMaxConfirms();\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        return longStats->GetMaxConfirms();\n+    }\n+    default: {\n+        throw std::out_of_range(\"CBlockPoicyEstimator::HighestTargetTracked unknown FeeEstimateHorizon\");\n+    }\n+    }\n+}\n+\n unsigned int CBlockPolicyEstimator::BlockSpan() const\n {\n     if (firstRecordedHeight == 0) return 0;"
      },
      {
        "sha": "a04dbe492445b0bfc9d33c120f5438329eedb96c",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fafd704dac73594f69de5f9c15f697217653d7a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=1fafd704dac73594f69de5f9c15f697217653d7a",
        "patch": "@@ -216,6 +216,9 @@ class CBlockPolicyEstimator\n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n     void FlushUnconfirmed(CTxMemPool& pool);\n \n+    /** Calculation of highest target that estimates are tracked for */\n+    unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n+\n private:\n     unsigned int nBestSeenHeight;\n     unsigned int firstRecordedHeight;"
      }
    ]
  },
  {
    "sha": "5e3b7b5686d326814c40e5b70da6697971d27092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTNiN2I1Njg2ZDMyNjgxNGM0MGU1YjcwZGE2Njk3OTcxZDI3MDky",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T14:50:32Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-11T00:07:17Z"
      },
      "message": "Improve error reporting for estimaterawfee",
      "tree": {
        "sha": "f828c4f6790edb389e2d8c04d15bf29785ed8f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f828c4f6790edb389e2d8c04d15bf29785ed8f67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e3b7b5686d326814c40e5b70da6697971d27092",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3b7b5686d326814c40e5b70da6697971d27092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3b7b5686d326814c40e5b70da6697971d27092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3b7b5686d326814c40e5b70da6697971d27092/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fafd704dac73594f69de5f9c15f697217653d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fafd704dac73594f69de5f9c15f697217653d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fafd704dac73594f69de5f9c15f697217653d7a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 46,
      "deletions": 25
    },
    "files": [
      {
        "sha": "046c85a76eb5d677394c369012e640a66f54607d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 25,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3b7b5686d326814c40e5b70da6697971d27092/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3b7b5686d326814c40e5b70da6697971d27092/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5e3b7b5686d326814c40e5b70da6697971d27092",
        "patch": "@@ -849,71 +849,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"short\\\" : {            (json object) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n             \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"      \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n             \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n             \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n             \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n             \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n             \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n             \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n             \"      },\\n\"\n-            \"      \\\"fail\\\" : { ... },        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  },\\n\"\n-            \"  \\\"medium\\\" : { ... },      (json object) estimate for medium time horizon\\n\"\n-            \"  \\\"long\\\" : { ... }      (json object) estimate for long time horizon\\n\"\n+            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n \n     UniValue result(UniValue::VOBJ);\n \n     for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n         CFeeRate feeRate;\n         EstimationResult buckets;\n-        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n         UniValue horizon_result(UniValue::VOBJ);\n-        horizon_result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-        if (!(feeRate == CFeeRate(0))) {\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (feeRate != CFeeRate(0)) {\n+            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n             horizon_result.push_back(Pair(\"decay\", buckets.decay));\n             horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            UniValue passbucket(UniValue::VOBJ);\n-            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n             horizon_result.push_back(Pair(\"pass\", passbucket));\n-            UniValue failbucket(UniValue::VOBJ);\n-            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n+            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+        } else {\n+            // Output only information that is still meaningful in the event of error\n+            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n+            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n             horizon_result.push_back(Pair(\"fail\", failbucket));\n+            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n+            horizon_result.push_back(Pair(\"errors\",errors));\n         }\n         result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n     }"
      }
    ]
  }
]