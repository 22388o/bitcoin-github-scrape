jtimon,2015-10-14T13:05:54Z,"The deployment times of concrete softforks depend on the chain (ie they are expected to be different in main and testnet3). Here's one solution:\n\n1) The Softfork class moves to consensus/params.h (and becomes a method-less struct, since that file is expected to be exposed to a complete libconsensus). \n\n2) Consensus::Params gets a new field softforks, which is an array of these new Softfork str",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148043500,148043500,
sipa,2015-10-14T13:06:37Z,Agree with @jtimon's comments.\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148043687,148043687,
CodeShark,2015-10-16T07:28:24Z,"@jtimon @sipa After thinking a little bit more about how to make the soft fork deployments chain-specific, I think CChainParams is the place to initialize that, not Consensus::Params. So I added a SoftForkDeployments member to CChainParams and created a dummy BIP9999 on regtest to demonstrate the deployment mechanism in action.\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148636848,148636848,
jtimon,2015-10-16T07:39:43Z,"Consensus::Params it's the place to put consensus critical chain params, not CChainParams. If libconsensus was complete you would have just broke its build or moved consensus functionality out of libconsensus by putting it in the NON CONSENSUS COMPATIBLE CChainParams. Can you please follow the C API compatible suggestion?\nHow do you plan to expose CChainParams in libconsensus' API if not by passi",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148638887,148638887,
sipa,2015-10-16T12:16:40Z,"@CodeShark The idea is that there are three layers of chain-specific parameters...:\n- basechainparams, which contain things shared by both nodes and RPC clients\n- consensus/params, which contains all consensus-critical parametersl\n- chainparams, which contains node operation parameters, including an encapsulated consensus/params\n\nThe reason is to avoid having the consensus code depend on know",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148701500,148701500,
CodeShark,2015-10-16T12:35:49Z,"@sipa OK, I guess what I meant to say is that CChainParams (or its subclasses, rather) is where the Consensus::Params structure gets initialized. So I went ahead and moved the SoftForkDeployments instance to Consensus::Params and am initializing immediately after the other Consensus::Params fields are initialized.\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148705259,148705259,
sipa,2015-10-16T12:39:36Z,"Oh, sure, that's perfect!\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148705881,148705881,
jtimon,2015-10-19T16:47:40Z,Here's a modified version of the branch the doesn't use library-unfriendly (and bad in general) global g_blockRuleIndex within the new consensus code. The global is maintained in main.cpp (where most globals currently are) but at least it is out of the consensus directory.\n\nhttps://github.com/jtimon/bitcoin/commits/versionbits\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-149277373,149277373,
sipa,2015-10-19T16:50:00Z,Agree with maintaining the global itself in main. That also makes it clearer that it's protected by the same locks as the other consensus-related state variables there.\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-149277917,149277917,
CodeShark,2015-10-19T18:21:20Z,@jtimon I incorporated the ideas of https://github.com/jtimon/bitcoin/commits/versionbits regarding getting rid of GetBlockRuleIndex()\nThanks!\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-149303719,149303719,
jtimon,2015-10-20T14:40:25Z,"Updated https://github.com/jtimon/bitcoin/commits/versionbits with one more commit that solves my last nit.\nEDIT: @CodeShark If you want me to do the squashing, I'm happy to do it.\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-149588196,149588196,
CodeShark,2015-10-21T23:53:34Z,@jtimon  Please let's hold off on any more code movement nits until after 0.12. Let's focus the rest of this conversation on this PR's behavior.\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-150056704,150056704,
dcousens,2015-10-22T00:14:01Z,@CodeShark I think you meant @jtimon \n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-150059411,150059411,
CodeShark,2015-10-22T00:16:29Z,"@dcousens lol, yeah. thx.\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-150060322,150060322,
jtimon,2015-10-22T08:31:27Z,"These aren't code movements, these are (I think very legitimate) nits to NEW code. This is the best time to make modifications to the new code, once it is merged, we won't have the chance to change it without affecting many many people again.\nIf you are not going to incorporate more suggestions that's fine too: I will create an alternative PR then. Little by little I want to get to what I suggest",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-150146953,150146953,
jtimon,2015-10-23T18:42:29Z,Updated https://github.com/bitcoin/bitcoin/compare/master...jtimon:versionbits with the changes described in https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-148043500 .\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-150659690,150659690,
jtimon,2015-10-26T15:05:40Z,"Here's a version rebased on top of master:\n\nhttps://github.com/bitcoin/bitcoin/compare/bitcoin:master...jtimon:CodeShark_versionbits_rebased\n\nHere are a couple of nits (don't BIP42 and BIP62, and don't BlockRuleIndex::m_activationInterval) implemented in code: https://github.com/jtimon/bitcoin/compare/CodeShark_versionbits_rebased...jtimon:versionbits-nits\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-151167219,151167219,
dcousens,2015-12-11T01:19:32Z,"concept ACK, needs rebase\n",https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-163802372,163802372,
jtimon,2016-03-16T18:09:18Z,close in favor of #7575 ?\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-197462411,197462411,
btcdrak,2016-03-16T18:11:29Z,@jtimon Yes.\n,https://github.com/bitcoin/bitcoin/pull/6816#issuecomment-197463478,197463478,
jtimon,2015-10-13T20:18:41Z,"Beauty, but nack this thing.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r41918635,41918635,src/consensus/versionbits.cpp
MarcoFalke,2015-10-13T20:20:54Z,Agree with @jtimon. Also it may be better to split the copyright (c) line into two. One for the initial author and initial year and a second one for the bitcoin core devs.\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r41918957,41918957,src/consensus/versionbits.cpp
dexX7,2015-10-15T13:10:14Z,"Doxygen supports [documentation on a file](https://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdfile) level, which seems more useful than ascii arts.\n\n> One for the initial author and initial year and a second one for the bitcoin core devs.\n\nIs this really necessary? There is already the much more precise git history, and to my understanding, all contributors qualify as ""Bitcoin Core ",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42121639,42121639,src/consensus/versionbits.cpp
dexX7,2015-10-15T13:34:59Z,"I like the extra information, but you may look into [BOOST_TEST_MESSAGE()](http://www.boost.org/doc/libs/1_55_0/libs/test/doc/html/utf/user-guide/test-output/BOOST_TEST_MESSAGE.html).\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42124115,42124115,src/test/versionbits_tests.cpp
btcdrak,2015-10-15T13:44:45Z,"Sorry to be a spoilsport, but the ASCII art has to go.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42125267,42125267,src/consensus/versionbits.cpp
jtimon,2015-10-19T09:25:15Z,This field ( by being a C++ class with methods) impedes this file from being exposed in the libconsensus C API. What's wrong with moving the rules enum to this file and having a static size array as suggested?\nMaybe you have an alternative to passing a Consensus::Params struct as a parameter of the exposed C libconsensus runctions that need it the communicate chain-dependent data?\nCan you draft ,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42351118,42351118,src/consensus/params.h
jtimon,2015-10-19T10:26:40Z,"Again, there's not need to include future rule changes (their own PRs can do it if they get merged after this, maybe with the exception of BIP65 for which most of the code has been already merged). You don't want people to start asking you to add other ""future rule changes"" like BIP100, BIP101 and BIP102, right?\nAlso, (and also again) why use Softfork instead of something more generic that also s",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42356010,42356010,src/consensus/softforks.h
jtimon,2015-10-19T15:29:44Z,Please s/Params()/chainparams/\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42385487,42385487,src/miner.cpp
jtimon,2015-10-19T15:33:48Z,"Why the getter for the new global? If you are introducing a new global that consensus code will rely on, why not use the global as explicitly a possible?\nJust declare g_blockRuleIndex as extern in the .h file, s/Consensus::VersionBits::GetBlockRuleIndex()/g_blockRuleIndex and simply get rid of Consensus::VersionBits::GetBlockRuleIndex().\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42386035,42386035,src/consensus/blockruleindex.cpp
jtimon,2015-10-19T16:29:16Z,Is it really worth it to have so many namespaces (specially when you are avoiding to use them explicitly in so many cases with `using namespace`)? Isn't the Consensus namespace enough?\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42393298,42393298,src/consensus/blockruleindex.h
jtimon,2015-10-19T18:28:22Z,"s/Params()/chainparams for free (diff-wise), please.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42407886,42407886,src/miner.cpp
jtimon,2015-10-19T18:30:21Z,"Why not on top of the function (like CChainParams& chainparams, like it was in my code) ready to become a parameter for the function?\nWhy did you spend any time in moving it down?\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42408133,42408133,src/main.cpp
jtimon,2015-10-20T14:38:44Z,"This should be moved to Consensus::Params. As always, ""this could be done later"", but if we do it now (before it affects anyone building on top of master or stable releases) it will be less painful for everyone. \n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42503778,42503778,src/consensus/blockruleindex.h
jtimon,2015-10-22T19:55:37Z,Why have BIP62 only to return false? Can't we add it later if needed?\nBIP42 seems completely unnecessary.\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42797646,42797646,src/consensus/softforks.cpp
jtimon,2015-10-22T20:24:23Z,"According to BIP9, the threshold is not per-deployment, it's per-chain, it says ""Threshold If bit B is set in 1916 (1512 on testnet) or more of the 2016 blocks within a retarget period"". This should move to Consensus::Params as a single field (just like BlockRuleIndex::m_activationInterval).\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42801091,42801091,src/consensus/versionbits.h
sipa,2015-10-22T20:25:49Z,"BIP9 is just advisory, and individual softforks can deviate from it\narbitrarily. So I think it should be both per chain and per fork :)\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42801269,42801269,src/consensus/versionbits.h
jtimon,2015-10-22T22:35:50Z,"Well, if it is per fork it's also per chain as each fork can be deployed differently per chain.\nI think this is an unnecessary complication (I think all of them are going to be 95% for the main chain).\nBut if we go for it, we should update BIP9.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42815226,42815226,src/consensus/versionbits.h
rustyrussell,2015-10-25T04:37:07Z,"Yeah, if someone wants to modify their special BIP to deviate from this, that's their job to introduce a new per-chain parameter.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42940913,42940913,src/consensus/versionbits.h
CodeShark,2015-10-25T06:09:42Z,"@rustyrussell We can just use the same threshold for each soft fork in a given chain. In the future if we ever decide to change the threshold, it will be straightforward to do so without requiring any changes to the implementation while allowing us to keep the old thresholds for the earlier forks. The BIP document mentions the possibility of modifying the threshold at some point in the future. So ",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42941549,42941549,src/consensus/versionbits.h
luke-jr,2015-10-25T08:33:45Z,"Maybe it would be useful to plan for 10 bits 95%, 10 bits 85%, 5 bits 75%, and 5 bits 65%? Does anyone expect to have more than 10 ongoing softforks at a time anyway?\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42942565,42942565,src/consensus/versionbits.h
jtimon,2015-10-25T09:31:45Z,"To be clear, whether the threshold is per softfork or per chain, it is in Consensus::Params (just once or repeated per softfork). If we only use one per chain (the same for all softforks), we are wasting space, although it is true that not much (even after hundreds of deployments).\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42942950,42942950,src/consensus/versionbits.h
jtimon,2015-10-26T12:31:16Z,"This field is unnecessarily redundant. If you don't want to create a new field in `Consensus::Params`, can you at least use `consensusParams.DifficultyAdjustmentInterval()` directly?\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42986822,42986822,src/consensus/blockruleindex.h
jtimon,2015-10-26T12:36:50Z,"~~We're avoiding state-full structures like this on consensus folder. Even if the folder has to depend on state-full structures like CBlockIndex, CCoinsViewCache and now also BlockRuleIndex temporarily (in this case it could be avoided directly), the consensus code will have to be decoupled from them to complete libconsensus, so chain.o, coins.o and blockruleindex.o don't belong in this folder.~~\",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42987352,42987352,src/Makefile.am
jtimon,2015-10-26T14:00:02Z,Can you move this enum to consensus/params.h ?\nIt will be eventually necessary to expose the versionbits functionality to libconsensus.\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42995738,42995738,src/consensus/softforks.h
jtimon,2015-10-26T14:03:26Z,Can you move this class (ideally as a struct with public attributes instead of getters) to consensus/params.h ? \nIt will be eventually necessary to expose the versionbits functionality in libconsensus.\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42996162,42996162,src/consensus/versionbits.h
jtimon,2015-10-26T14:07:46Z,"Anyway, I will change my modification of this implementation back to a threshold per softfork like in this implementation  so that they don't differ too much. In my case it will be trivial to change later.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42996786,42996786,src/consensus/versionbits.h
jtimon,2015-10-26T14:11:20Z,Wouldn't it be better to do this in init::AppInit2() ? \n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r42997256,42997256,src/bitcoind.cpp
jtimon,2015-10-28T13:34:36Z,In which cases does pindexPrev need be passed as something different from NULL?\nSame question for `Consensus::SoftForks::UseRule()`.\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r43255010,43255010,src/consensus/softforks.cpp
jtimon,2015-10-28T13:43:55Z,Can't this return a boolean and use `CValidationState& state` like `main::ContextualCheckBlockHeader()` (the functions where some of `Consensus::SoftForks::CheckVersion()` comes from) is currently doing?\n,https://github.com/bitcoin/bitcoin/pull/6816#discussion_r43256093,43256093,src/consensus/softforks.cpp
jtimon,2015-11-04T00:03:18Z,"Is this just an in-memory cache that stores nothing in disk? If so, my previous criticisms don't apply.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r43825925,43825925,src/Makefile.am
morcos,2015-12-10T17:30:22Z,"This seems to me that we can't reuse a bit for a new soft fork until the expire time, regardless of whether the previous soft fork at that bit has already activated.  I thought the intention was to allow reuse immediately after activation.\n",https://github.com/bitcoin/bitcoin/pull/6816#discussion_r47256760,47256760,src/consensus/versionbits.cpp
