[
  {
    "sha": "a528b6431114108e99f60ca2bc85fa13eb94cd5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTI4YjY0MzExMTQxMDhlOTlmNjBjYTJiYzg1ZmExM2ViOTRjZDVi",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-16T05:12:46Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:36:27Z"
      },
      "message": "Added versionbits and blockruleindex units.",
      "tree": {
        "sha": "cbcc2174da3cc5deb2178b64ccd25d7802aab303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbcc2174da3cc5deb2178b64ccd25d7802aab303"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a528b6431114108e99f60ca2bc85fa13eb94cd5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a528b6431114108e99f60ca2bc85fa13eb94cd5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a528b6431114108e99f60ca2bc85fa13eb94cd5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a528b6431114108e99f60ca2bc85fa13eb94cd5b/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd1304ec216c7d4bdb302195e184b15503819f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd1304ec216c7d4bdb302195e184b15503819f67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd1304ec216c7d4bdb302195e184b15503819f67"
      }
    ],
    "stats": {
      "total": 578,
      "additions": 578,
      "deletions": 0
    },
    "files": [
      {
        "sha": "65529848bc087481de1f1dbb90fa82f5180d5f3d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "patch": "@@ -102,7 +102,9 @@ BITCOIN_CORE_H = \\\n   consensus/consensus.h \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n+  consensus/blockruleindex.h \\\n   consensus/validation.h \\\n+  consensus/versionbits.h \\\n   core_io.h \\\n   core_memusage.h \\\n   hash.h \\\n@@ -188,6 +190,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/blockruleindex.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\\n@@ -268,6 +271,7 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n+  consensus/versionbits.cpp \\\n   compressor.cpp \\\n   consensus/merkle.cpp \\\n   core_read.cpp \\"
      },
      {
        "sha": "f3847ca6a37db646ceee1b11b33501c2446ad7dc",
        "filename": "src/consensus/blockruleindex.cpp",
        "status": "added",
        "additions": 225,
        "deletions": 0,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/blockruleindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/blockruleindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockruleindex.cpp?ref=a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "patch": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockruleindex.h\"\n+#include \"chain.h\"\n+\n+using namespace Consensus::VersionBits;\n+\n+\n+bool BlockRuleIndex::IsIntervalStart(const CBlockIndex* pblockIndex) const\n+{\n+    return m_activationInterval && pblockIndex && (pblockIndex->nHeight % m_activationInterval == 0);\n+}\n+\n+const CBlockIndex* BlockRuleIndex::GetIntervalStart(const CBlockIndex* pblockIndex) const\n+{\n+    if (!m_activationInterval || !pblockIndex)\n+        return NULL;\n+\n+    int nHeight = pblockIndex->nHeight - (pblockIndex->nHeight % m_activationInterval);\n+\n+    return pblockIndex->GetAncestor(nHeight);\n+}\n+\n+void BlockRuleIndex::SetSoftForkDeployments(int activationInterval, const SoftForkDeployments* deployments)\n+{\n+    m_activationInterval = activationInterval;\n+    m_deployments = deployments;\n+    m_ruleStateMap.clear();\n+}\n+\n+RuleState BlockRuleIndex::GetRuleState(int rule, const CBlockIndex* pblockIndex) const\n+{\n+    if (!m_activationInterval || !m_deployments)\n+        return UNDEFINED;\n+\n+    pblockIndex = GetIntervalStart(pblockIndex);\n+    if (!pblockIndex)\n+        return UNDEFINED;\n+\n+    RuleStateMap::const_iterator rit = m_ruleStateMap.find(pblockIndex);\n+    if (rit == m_ruleStateMap.end())\n+        return UNDEFINED;\n+\n+    const RuleStates& ruleStates = rit->second;\n+    RuleStates::const_iterator it = ruleStates.find(rule);\n+    if (it == ruleStates.end())\n+        return UNDEFINED;\n+\n+    return it->second;\n+}\n+\n+RuleStates BlockRuleIndex::GetRuleStates(const CBlockIndex* pblockIndex) const\n+{\n+    RuleStates ruleStates;\n+    if (!m_activationInterval || !m_deployments)\n+        return ruleStates;\n+\n+    pblockIndex = GetIntervalStart(pblockIndex);\n+    if (!pblockIndex)\n+        return ruleStates;\n+\n+    RuleStateMap::const_iterator rit = m_ruleStateMap.find(pblockIndex);\n+    if (rit == m_ruleStateMap.end())\n+        return ruleStates;\n+\n+    return rit->second;\n+}\n+\n+bool BlockRuleIndex::AreVersionBitsRecognized(const CBlockIndex* pblockIndex, const CBlockIndex* pprev) const\n+{\n+    if (!m_activationInterval || !pblockIndex || !UsesVersionBits(pblockIndex->nVersion))\n+        return false;\n+\n+    if (!pprev)\n+        pprev = pblockIndex->pprev;\n+\n+    // Get the start of the interval\n+    const CBlockIndex* pstart = GetIntervalStart(pprev);\n+    if (!pstart)\n+        return false;\n+\n+    uint32_t currentMedianTime = pblockIndex->GetMedianTimePast();\n+    RuleStates startStates = GetRuleStates(pstart);\n+\n+    for (int b = MIN_BIT; b <= MAX_BIT; b++)\n+    {\n+        if ((pblockIndex->nVersion >> b) & 0x1)\n+        {\n+            int rule = m_deployments->GetAssignedRule(b, currentMedianTime);\n+\n+            // Bit should not be set if it is not assigned\n+            if (rule == NO_RULE)\n+                return false;\n+\n+            RuleStates::const_iterator it = startStates.find(rule);\n+            if (it != startStates.end())\n+            {\n+                // Bits for active and failed rules should not be set\n+                RuleState state = it->second;\n+                if ((state == ACTIVE) || (state == FAILED))\n+                    return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockRuleIndex::InsertBlockIndex(const CBlockIndex* pblockIndex, const CBlockIndex* pprev)\n+{\n+    if (!m_activationInterval || !IsIntervalStart(pblockIndex))\n+        return false;\n+\n+    if (m_ruleStateMap.count(pblockIndex))\n+        return true;\n+\n+    RuleStates newRuleStates;\n+    if (!m_deployments)\n+    {\n+        m_ruleStateMap[pblockIndex] = newRuleStates;\n+        return true;\n+    }\n+\n+    if (!pprev)\n+        pprev = pblockIndex->pprev;\n+\n+    uint32_t currentMedianTime = pblockIndex->GetMedianTimePast();\n+\n+    // Get the start of the interval just completed.\n+    const CBlockIndex* pstart = (pblockIndex->nHeight > 0) ? pblockIndex->GetAncestor(pblockIndex->nHeight - m_activationInterval) : NULL;\n+\n+    RuleStates prevRuleStates;\n+    if (pstart && m_ruleStateMap.count(pstart))\n+        prevRuleStates = m_ruleStateMap[pstart];\n+\n+    // Assign the rule states for the new block\n+    //   1) Set all assigned rules for new block to DEFINED (we'll check whether they are active next)\n+    std::set<int> assignedRules = m_deployments->GetAssignedRules(currentMedianTime);\n+    for (std::set<int>::iterator it = assignedRules.begin(); it != assignedRules.end(); ++it)\n+    {\n+        newRuleStates[*it] = DEFINED;\n+    }\n+\n+    //   2) Add all failed and active rules\n+    std::set<int> failedRules;\n+    std::set<int> activeRules;\n+    for (RuleStates::iterator it = prevRuleStates.begin(); it != prevRuleStates.end(); ++it)\n+    {\n+        switch (it->second)\n+        {\n+        case FAILED:\n+            newRuleStates[it->first] = FAILED;\n+            failedRules.insert(it->first);\n+            break;\n+\n+        case LOCKED_IN:\n+            // Locked in rules become active at this block\n+\n+        case ACTIVE:\n+            newRuleStates[it->first] = ACTIVE;\n+            activeRules.insert(it->first);\n+            break;\n+\n+        default:\n+            break;\n+        }\n+    }\n+\n+    //   3) Count set bits for interval\n+    typedef std::map<int /*rule*/, int /*count*/> RuleCountMap;\n+    RuleCountMap ruleCountMap;\n+    while (pprev)\n+    {\n+        if (UsesVersionBits(pprev->nVersion))\n+        {\n+            for (int b = MIN_BIT; b <= MAX_BIT; b++)\n+            {\n+                if ((pprev->nVersion >> b) & 0x1)\n+                {\n+                    int rule = m_deployments->GetAssignedRule(b, pprev->GetMedianTimePast());\n+\n+                    // Only count bits for soft forks that are assigned and are not failed and not already active\n+                    if ((rule == NO_RULE) || failedRules.count(rule) || activeRules.count(rule))\n+                        continue;\n+\n+                    if (ruleCountMap.count(rule))\n+                        ruleCountMap[rule]++;\n+                    else\n+                        ruleCountMap[rule] = 1;\n+                }\n+            }\n+        }\n+\n+        if (pprev == pstart)\n+            break;\n+\n+        pprev = pprev->pprev;\n+    }\n+\n+    //   4) Set newly locked in and failed states\n+    RuleCountMap::iterator it = ruleCountMap.begin();\n+    for (; it != ruleCountMap.end(); ++it)\n+    {\n+        int rule = it->first;\n+        int count = it->second;\n+        const SoftFork* softFork = m_deployments->GetSoftFork(rule);\n+\n+        if (softFork && (count >= softFork->GetThreshold()))\n+            newRuleStates[rule] = LOCKED_IN;\n+        else\n+            if (!m_deployments->IsRuleAssigned(rule, currentMedianTime))\n+                newRuleStates[rule] = FAILED;\n+    }\n+\n+    m_ruleStateMap[pblockIndex] = newRuleStates;\n+\n+    return true;\n+}\n+\n+void BlockRuleIndex::Clear()\n+{\n+    m_ruleStateMap.clear();\n+}"
      },
      {
        "sha": "ae407108652ac986d5996017376c0bb7dd509263",
        "filename": "src/consensus/blockruleindex.h",
        "status": "added",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/blockruleindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/blockruleindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockruleindex.h?ref=a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "patch": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOCKRULEINDEX_H\n+#define BITCOIN_BLOCKRULEINDEX_H\n+\n+#include \"versionbits.h\"\n+\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <stdint.h>\n+\n+class CBlockIndex;\n+\n+namespace Consensus {\n+namespace VersionBits {\n+\n+typedef std::map<int /*rule*/, RuleState> RuleStates;\n+typedef std::map<const CBlockIndex*, RuleStates> RuleStateMap;\n+\n+class BlockRuleIndex\n+{\n+public:\n+    BlockRuleIndex(int activationInterval = 0, const SoftForkDeployments* deployments = NULL) :\n+        m_activationInterval(activationInterval), m_deployments(deployments) { }\n+\n+    int GetActivationInterval() const { return m_activationInterval; }\n+\n+    bool IsIntervalStart(const CBlockIndex* pblockIndex) const;\n+\n+    const CBlockIndex* GetIntervalStart(const CBlockIndex* pblockIndex) const;\n+\n+    // Clears the index, so should only be called upon initialization\n+    void SetSoftForkDeployments(int activationInterval, const SoftForkDeployments* deployments);\n+\n+    RuleState GetRuleState(int rule, const CBlockIndex* pblockIndex) const;\n+\n+    RuleStates GetRuleStates(const CBlockIndex* pblockIndex) const;\n+\n+    // Returns false if the block does not connect or the version has set bits that shouldn't be set\n+    bool AreVersionBitsRecognized(const CBlockIndex* pblockIndex, const CBlockIndex* pprev = NULL) const;\n+\n+    bool InsertBlockIndex(const CBlockIndex* pblockIndex, const CBlockIndex* pprev = NULL);\n+\n+    void Clear();\n+\n+#ifdef VERSIONBITS_UNIT_TEST\n+    // For testing only\n+\n+    // Inserts arbitrary rule states \n+    void InsertBlockIndexWithRuleStates(const CBlockIndex* pblockIndex, const RuleStates& ruleStates)\n+    {\n+        m_ruleStateMap[pblockIndex] = ruleStates;\n+    }\n+#endif\n+\n+private:\n+    RuleStateMap m_ruleStateMap;\n+    int m_activationInterval;\n+    const SoftForkDeployments* m_deployments;\n+};\n+\n+}\n+}\n+\n+#endif // BITCOIN_BLOCKRULEINDEX_H"
      },
      {
        "sha": "1235414e7a2a5bb0f940811dc8def1cf54ade99c",
        "filename": "src/consensus/versionbits.cpp",
        "status": "added",
        "additions": 179,
        "deletions": 0,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/versionbits.cpp?ref=a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "patch": "@@ -0,0 +1,179 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"versionbits.h\"\n+\n+using namespace Consensus::VersionBits;\n+\n+typedef std::multimap<int /*bit*/, int /*rule*/> RuleMap;\n+typedef std::map<int /*rule*/, const SoftFork*> SoftForkMap;\n+\n+const char* Consensus::VersionBits::GetRuleStateText(int ruleState, bool bUseCaps)\n+{\n+    switch (ruleState)\n+    {\n+    case UNDEFINED:\n+        return bUseCaps ? \"UNDEFINED\" : \"undefined\";\n+\n+    case DEFINED:\n+        return bUseCaps ? \"DEFINED\" : \"defined\";\n+\n+    case LOCKED_IN:\n+        return bUseCaps ? \"LOCKED IN\" : \"locked in\";\n+\n+    case ACTIVE:\n+        return bUseCaps ? \"ACTIVE\" : \"active\";\n+\n+    case FAILED:\n+        return bUseCaps ? \"FAILED\" : \"failed\";\n+\n+    default:\n+        return bUseCaps ? \"N/A\" : \"n/a\";\n+    }\n+}\n+\n+bool Consensus::VersionBits::UsesVersionBits(int nVersion)\n+{\n+    return (nVersion & ~VERSION_BITS_MASK) == VERSION_HIGH_BITS;\n+}\n+\n+\n+SoftForkDeployments::~SoftForkDeployments()\n+{\n+    Clear();\n+}\n+\n+void SoftForkDeployments::AddSoftFork(int bit, int rule, int threshold, uint32_t deployTime, uint32_t expireTime)\n+{\n+    if (bit < MIN_BIT || bit > MAX_BIT)\n+        throw std::runtime_error(\"VersionBits::SoftForkDeployments::AddSoftFork() - invalid bit.\");\n+\n+    if (threshold < 0)\n+        throw std::runtime_error(\"VersionBits::SoftForkDeployments::AddSoftFork() - invalid threshold.\");\n+\n+    if (deployTime >= expireTime)\n+        throw std::runtime_error(\"VersionBits::SoftForkDeployments::AddSoftFork() - invalid time range.\");\n+\n+    if (m_softForks.count(rule))\n+        throw std::runtime_error(\"VersionBits::SoftForkDeployments::AddSoftFork() - rule already assigned.\");\n+\n+    if (!IsBitAvailable(bit, deployTime, expireTime))\n+        throw std::runtime_error(\"VersionBits::SoftForkDeployments::AddSoftFork() - bit conflicts with existing softFork.\");\n+\n+    SoftFork* softFork = new SoftFork(bit, rule, threshold, deployTime, expireTime);\n+    m_softForks.insert(std::pair<int, SoftFork*>(rule, softFork));\n+    m_rules.insert(std::pair<int, int>(bit, rule));\n+}\n+\n+bool SoftForkDeployments::IsBitAvailable(int bit, uint32_t deployTime, uint32_t expireTime) const\n+{\n+    std::pair<RuleMap::const_iterator, RuleMap::const_iterator> range;\n+    range = m_rules.equal_range(bit);\n+    for (RuleMap::const_iterator rit = range.first; rit != range.second; ++rit)\n+    {\n+        SoftForkMap::const_iterator it = m_softForks.find(rit->second);\n+        if (it == m_softForks.end())\n+            throw std::runtime_error(\"VersionBits::SoftForkDeployments::IsBitAvailable() - inconsistent internal state.\");\n+\n+        // Do softFork times overlap?\n+        const SoftFork* softFork = it->second;\n+        if (((deployTime >= softFork->GetDeployTime()) && (deployTime <  softFork->GetExpireTime())) ||\n+            ((expireTime >  softFork->GetDeployTime()) && (expireTime <= softFork->GetExpireTime())) ||\n+            ((deployTime <= softFork->GetDeployTime()) && (expireTime >= softFork->GetExpireTime())))\n+                return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool SoftForkDeployments::IsRuleAssigned(int rule, uint32_t time) const\n+{\n+    SoftForkMap::const_iterator it = m_softForks.find(rule);\n+    if (it == m_softForks.end())\n+        return false;\n+\n+    const SoftFork* softFork = it->second;\n+\n+    return ((time >= softFork->GetDeployTime()) && (time < softFork->GetExpireTime()));\n+}\n+\n+const SoftFork* SoftForkDeployments::GetSoftFork(int rule) const\n+{\n+    SoftForkMap::const_iterator it = m_softForks.find(rule);\n+\n+    return (it != m_softForks.end()) ? it->second : NULL;\n+}\n+\n+const SoftFork* SoftForkDeployments::GetAssignedSoftFork(int bit, uint32_t time) const\n+{\n+    std::pair<RuleMap::const_iterator, RuleMap::const_iterator> range;\n+    range = m_rules.equal_range(bit);\n+    for (RuleMap::const_iterator rit = range.first; rit != range.second; ++rit)\n+    {\n+        SoftForkMap::const_iterator it = m_softForks.find(rit->second);\n+        if (it == m_softForks.end())\n+            throw std::runtime_error(\"VersionBits::SoftForkDeployments::GetAssignedSoftFork() - inconsistent internal state.\");\n+        const SoftFork* softFork = it->second;\n+        if ((time >= softFork->GetDeployTime()) && (time < softFork->GetExpireTime()))\n+            return softFork;\n+    }\n+\n+    return NULL;\n+}\n+\n+int SoftForkDeployments::GetAssignedRule(int bit, uint32_t time) const\n+{\n+    const SoftFork* softFork = GetAssignedSoftFork(bit, time);\n+\n+    return softFork ? softFork->GetRule() : NO_RULE;\n+}\n+\n+std::set<const SoftFork*> SoftForkDeployments::GetAssignedSoftForks(uint32_t time) const\n+{\n+    std::set<const SoftFork*> softForks;\n+    for (SoftForkMap::const_iterator it = m_softForks.begin(); it != m_softForks.end(); ++it)\n+    {\n+        const SoftFork* softFork = it->second;\n+        if ((time >= softFork->GetDeployTime()) && (time < softFork->GetExpireTime()))\n+            softForks.insert(softFork);\n+    }\n+\n+    return softForks;\n+}\n+\n+std::set<int> SoftForkDeployments::GetAssignedBits(uint32_t time) const\n+{\n+    std::set<int> bits;\n+    for (SoftForkMap::const_iterator it = m_softForks.begin(); it != m_softForks.end(); ++it)\n+    {\n+        const SoftFork* softFork = it->second;\n+        if ((time >= softFork->GetDeployTime()) && (time < softFork->GetExpireTime()))\n+            bits.insert(softFork->GetBit());\n+    }\n+\n+    return bits;\n+}\n+\n+std::set<int> SoftForkDeployments::GetAssignedRules(uint32_t time) const\n+{\n+    std::set<int> rules;\n+    for (SoftForkMap::const_iterator it = m_softForks.begin(); it != m_softForks.end(); ++it)\n+    {\n+        const SoftFork* softFork = it->second;\n+        if ((time >= softFork->GetDeployTime()) && (time < softFork->GetExpireTime()))\n+            rules.insert(softFork->GetRule());\n+    }\n+\n+    return rules;\n+}\n+\n+void SoftForkDeployments::Clear()\n+{\n+    SoftForkMap::iterator it = m_softForks.begin();\n+    for (; it != m_softForks.end(); ++it)\n+        if (it->second) delete it->second;\n+\n+    m_softForks.clear();\n+    m_rules.clear();\n+}"
      },
      {
        "sha": "0016c81a4ef230886a0e68e3d07046e7bdabc42f",
        "filename": "src/consensus/versionbits.h",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a528b6431114108e99f60ca2bc85fa13eb94cd5b/src/consensus/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/versionbits.h?ref=a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VERSIONBITS_H\n+#define BITCOIN_VERSIONBITS_H\n+\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <stdint.h>\n+\n+namespace Consensus\n+{\n+\n+const int           NO_RULE      = -1;\n+\n+namespace VersionBits\n+{\n+\n+const int           VERSION_HIGH_BITS   = 0x20000000;\n+const int           VERSION_BITS_MASK   = 0x1fffffff;\n+const char          MIN_BIT             = 0;\n+const char          MAX_BIT             = 28;\n+\n+enum RuleState { UNDEFINED, DEFINED, LOCKED_IN, ACTIVE, FAILED };\n+\n+const char* GetRuleStateText(int ruleState, bool bUseCaps = false);\n+\n+bool UsesVersionBits(int nVersion);\n+\n+class SoftFork\n+{\n+public:\n+    SoftFork(int bit, int rule, int threshold, uint32_t deployTime, uint32_t expireTime) :\n+        m_bit(bit),\n+        m_rule(rule),\n+        m_threshold(threshold),\n+        m_deployTime(deployTime),\n+        m_expireTime(expireTime) { }\n+\n+    int         GetBit() const { return m_bit; }\n+    int         GetRule() const { return m_rule; }\n+    int         GetThreshold() const { return m_threshold; }\n+    uint32_t    GetDeployTime() const { return m_deployTime; }\n+    uint32_t    GetExpireTime() const { return m_expireTime; }\n+\n+private:\n+    int m_bit;\n+    int m_rule;\n+    int m_threshold;\n+    uint32_t m_deployTime;\n+    uint32_t m_expireTime;\n+};\n+\n+typedef std::multimap<int /*bit*/, int /*rule*/> RuleMap;\n+typedef std::map<int /*rule*/, SoftFork*> SoftForkMap;\n+\n+class SoftForkDeployments\n+{\n+public:\n+    ~SoftForkDeployments();\n+\n+    // Creates and adds a new soft fork deployment\n+    void AddSoftFork(int bit, int rule, int threshold, uint32_t deployTime, uint32_t expireTime);\n+\n+    // Returns true if the specified bit has not been assigned yet for the given time interval\n+    bool IsBitAvailable(int bit, uint32_t deployTime, uint32_t expireTime) const;\n+\n+    // Returns true if the specified rule is assigned at a given time\n+    bool IsRuleAssigned(int rule, uint32_t time) const;\n+\n+    // Returns the soft fork object for a given rule\n+    const SoftFork* GetSoftFork(int rule) const;\n+\n+    // Returns the soft fork object to which the bit is assigned at a given time\n+    const SoftFork* GetAssignedSoftFork(int bit, uint32_t time) const;\n+\n+    // Returns the rule for the soft fork to which the bit is assigned at a given time\n+    int GetAssignedRule(int bit, uint32_t time) const;\n+\n+    // Returns the soft fork objects to which bits assigned at a given time\n+    std::set<const SoftFork*> GetAssignedSoftForks(uint32_t time) const;\n+\n+    // Returns all the bits assigned at a given time\n+    std::set<int> GetAssignedBits(uint32_t time) const;\n+\n+    // Returns all the soft fork rules to which bits are assigned at a given time\n+    std::set<int> GetAssignedRules(uint32_t time) const;\n+\n+    // Clears all internal structures\n+    void Clear();\n+\n+private:\n+    RuleMap m_rules;\n+    SoftForkMap m_softForks;\n+};\n+\n+}\n+}\n+\n+#endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDMyODQ0OWNjMWYwZWI5YjU5YTljYTliOGI4OWYyZWM4ZDllNTM0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-18T07:50:55Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:36:27Z"
      },
      "message": "Added CreateBlockVersion to BlockRuleIndex.",
      "tree": {
        "sha": "2ea5b017010b481f37ad75adf4b37a0d75d03e00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ea5b017010b481f37ad75adf4b37a0d75d03e00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a528b6431114108e99f60ca2bc85fa13eb94cd5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a528b6431114108e99f60ca2bc85fa13eb94cd5b"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "48303c90376c4dca2398843d00cd910bf5c2f92a",
        "filename": "src/consensus/blockruleindex.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534/src/consensus/blockruleindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534/src/consensus/blockruleindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockruleindex.cpp?ref=40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
        "patch": "@@ -30,6 +30,77 @@ void BlockRuleIndex::SetSoftForkDeployments(int activationInterval, const SoftFo\n     m_ruleStateMap.clear();\n }\n \n+int BlockRuleIndex::CreateBlockVersion(uint32_t nTime, CBlockIndex* pprev, const std::set<int>& disabledRules) const\n+{\n+    int nVersion = VERSION_HIGH_BITS;\n+\n+    if (!m_deployments)\n+        return nVersion;\n+\n+    std::set<int> setRules;\n+    std::set<int> finalizedRules;\n+\n+    CBlockIndex blockIndex;\n+    blockIndex.nTime = nTime;\n+    blockIndex.pprev = pprev;\n+    uint32_t medianTime = blockIndex.GetMedianTimePast();\n+\n+    {\n+        // Set bits for all defined soft forks that haven't activated, failed, or have been requested disabled\n+        RuleStates ruleStates = GetRuleStates(pprev);\n+        RuleStates::const_iterator it = ruleStates.begin();\n+        for (; it != ruleStates.end(); ++it)\n+        {\n+            switch (it->second)\n+            {\n+            case DEFINED:\n+                // Set assigned bits we're not disabling\n+                if (!disabledRules.count(it->first) &&\n+                    m_deployments->IsRuleAssigned(it->first, medianTime))\n+                        setRules.insert(it->first);\n+                break;\n+\n+            case LOCKED_IN:\n+                // Always set bits for locked in rules\n+                setRules.insert(it->first);\n+                break;\n+\n+            case ACTIVE:\n+                // Do not set bits for active and failed rules\n+\n+            case FAILED:\n+                finalizedRules.insert(it->first);\n+\n+            default:\n+                break;\n+            }\n+        }\n+    }\n+\n+    {\n+        // Also set bits for any new deployments that have not been requested disabled\n+        std::set<int> assignedRules = m_deployments->GetAssignedRules(nTime);\n+        std::set<int>::const_iterator it = assignedRules.begin();\n+        for (; it != assignedRules.end(); ++it)\n+        {\n+            if (!(finalizedRules.count(*it) || disabledRules.count(*it)))\n+                setRules.insert(*it);\n+        }\n+    }\n+\n+    {\n+        std::set<int>::const_iterator it = setRules.begin();\n+        for (; it != setRules.end(); ++it)\n+        {\n+            const SoftFork* psoftFork = m_deployments->GetSoftFork(*it);\n+            if (psoftFork)\n+                nVersion |= (0x1 << psoftFork->GetBit());\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n RuleState BlockRuleIndex::GetRuleState(int rule, const CBlockIndex* pblockIndex) const\n {\n     if (!m_activationInterval || !m_deployments)"
      },
      {
        "sha": "1f3079e5d75e1d8ba772e1c933e2aa6e00dcc14d",
        "filename": "src/consensus/blockruleindex.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534/src/consensus/blockruleindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534/src/consensus/blockruleindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockruleindex.h?ref=40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
        "patch": "@@ -35,6 +35,10 @@ class BlockRuleIndex\n     // Clears the index, so should only be called upon initialization\n     void SetSoftForkDeployments(int activationInterval, const SoftForkDeployments* deployments);\n \n+    // Constructs a new nVersion field with bits set for all deployments that have not yet activated or failed\n+    // The disabledRules parameter allows us to request that the bit for a rule be unset if it has not yet locked in\n+    int CreateBlockVersion(uint32_t nTime, CBlockIndex* pprev, const std::set<int>& disabledRules = std::set<int>()) const;\n+\n     RuleState GetRuleState(int rule, const CBlockIndex* pblockIndex) const;\n \n     RuleStates GetRuleStates(const CBlockIndex* pblockIndex) const;"
      }
    ]
  },
  {
    "sha": "5be7fa066283f0e447253ad265320c641f43d1d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmU3ZmEwNjYyODNmMGU0NDcyNTNhZDI2NTMyMGM2NDFmNDNkMWQ0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-16T05:17:20Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:36:27Z"
      },
      "message": "Added unit tests for versionbits and blockruleindex.",
      "tree": {
        "sha": "1d77656694a79aa2f213784f716aca45cfae3262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d77656694a79aa2f213784f716aca45cfae3262"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5be7fa066283f0e447253ad265320c641f43d1d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5be7fa066283f0e447253ad265320c641f43d1d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5be7fa066283f0e447253ad265320c641f43d1d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5be7fa066283f0e447253ad265320c641f43d1d4/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40328449cc1f0eb9b59a9ca9b8b89f2ec8d9e534"
      }
    ],
    "stats": {
      "total": 456,
      "additions": 455,
      "deletions": 1
    },
    "files": [
      {
        "sha": "401a0bdbd01a3bc61e850714e93864dd84d9bf88",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5be7fa066283f0e447253ad265320c641f43d1d4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5be7fa066283f0e447253ad265320c641f43d1d4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=5be7fa066283f0e447253ad265320c641f43d1d4",
        "patch": "@@ -84,7 +84,8 @@ BITCOIN_TESTS =\\\n   test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n-  test/util_tests.cpp\n+  test/util_tests.cpp \\\n+  test/versionbits_tests.cpp\n \n if ENABLE_WALLET\n BITCOIN_TESTS += \\"
      },
      {
        "sha": "0cc5e72b2efdb05c23914f6e9bc3ae98cab11390",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "added",
        "additions": 453,
        "deletions": 0,
        "changes": 453,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5be7fa066283f0e447253ad265320c641f43d1d4/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5be7fa066283f0e447253ad265320c641f43d1d4/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=5be7fa066283f0e447253ad265320c641f43d1d4",
        "patch": "@@ -0,0 +1,453 @@\n+// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#define VERSIONBITS_UNIT_TEST\n+\n+#include \"chain.h\"\n+#include \"consensus/blockruleindex.h\"\n+#include \"consensus/versionbits.h\"\n+#include \"primitives/block.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <bitset>\n+#include <boost/test/unit_test.hpp>\n+#include <iomanip>\n+#include <sstream>\n+#include <stdlib.h>\n+#include <string>\n+#include <time.h>\n+\n+using namespace Consensus::VersionBits;\n+using namespace std;\n+\n+const int NBITS = MAX_BIT + 1 - MIN_BIT;\n+\n+const int ACTIVATION_INTERVAL = 2016;\n+\n+SoftForkDeployments g_deployments;\n+\n+class BitCounter\n+{\n+public:\n+    BitCounter(const SoftForkDeployments& g_deployments) :\n+        m_g_deployments(g_deployments)\n+    {\n+        Clear();\n+    }\n+\n+    void Clear()\n+    {\n+        for (int i = 0; i < NBITS; i++)\n+            m_bitCounts[i] = 0;\n+    }\n+\n+    void CountBits(int nVersion, uint32_t nTime = 0)\n+    {\n+        for (int i = MIN_BIT; i <= MAX_BIT; i++)\n+        {\n+            if (((nVersion >> i) & 0x1) && (m_g_deployments.GetAssignedRule(i, nTime) != Consensus::NO_RULE))\n+                m_bitCounts[i - MIN_BIT]++;\n+        }\n+    }\n+\n+    int GetCountForBit(int bit) const\n+    {\n+        return m_bitCounts[bit - MIN_BIT];\n+    }\n+\n+    string ToString()\n+    {\n+        stringstream ss;\n+        for (int i = 0; i < NBITS; i++)\n+        {\n+            if (m_bitCounts[i + MIN_BIT])\n+               ss << setw(4) << right << i + MIN_BIT << \": \" << setw(5) << right << m_bitCounts[i + MIN_BIT] << endl;\n+        }\n+\n+        return ss.str();\n+    }\n+\n+private:\n+    int m_bitCounts[NBITS];\n+    const SoftForkDeployments& m_g_deployments;\n+};\n+\n+class VersionGenerator\n+{\n+public:\n+    VersionGenerator() { ClearBitProbabilities(); }\n+\n+    void ClearBitProbabilities()\n+    {\n+        for (int i = 0; i < NBITS; i++)\n+            m_bitProbabilities[i] = 0;\n+    }\n+\n+    void SetBitProbability(int bit, int probability)\n+    {\n+        m_bitProbabilities[bit - MIN_BIT] = probability;\n+    }\n+\n+    int Generate() const\n+    {\n+        int nVersion = VERSION_HIGH_BITS;\n+        for (int i = 0; i < NBITS; i++)\n+        {\n+            if ((rand() % ACTIVATION_INTERVAL) <= (m_bitProbabilities[i] - 1))\n+                nVersion |= 0x1 << (MIN_BIT + i);\n+        }\n+\n+        return nVersion;\n+    }\n+    \n+private:\n+    int m_bitProbabilities[NBITS]; // in units of 1/ACTIVATION_INTERVAL\n+};\n+\n+\n+std::string RuleStateToString(RuleState state)\n+{\n+    switch (state)\n+    {\n+    case UNDEFINED:\n+        return \"UNDEFINED\";\n+\n+    case DEFINED:\n+        return \"DEFINED\";\n+\n+    case LOCKED_IN:\n+        return \"LOCKED_IN\";\n+\n+    case ACTIVE:\n+        return \"ACTIVE\";\n+\n+    case FAILED:\n+        return \"FAILED\";\n+\n+    default:\n+        return \"N/A\";\n+    }\n+}\n+void StateChanged(const CBlockIndex* pblockIndex, const SoftFork* psoftFork, RuleState prevState, RuleState newState, int bitCount)\n+{\n+    int bit = psoftFork->GetBit();\n+    bool isBitSet = (pblockIndex->pprev->nVersion >> bit) & 0x1;\n+\n+    BOOST_TEST_MESSAGE(\"=============\");\n+    BOOST_TEST_MESSAGE(\"STATE CHANGED - height: \" << pblockIndex->nHeight << \" median time: \" << pblockIndex->GetMedianTimePast()\n+         << \" bit: \" << psoftFork->GetBit() << \" (\" << (isBitSet ? \"true\" : \"false\") << \") rule: \" << psoftFork->GetRule());\n+    BOOST_TEST_MESSAGE(\"  \" << RuleStateToString(prevState) << \" -> \" << RuleStateToString(newState));\n+    BOOST_TEST_MESSAGE(\"    \" << bitCount << \"/\" << psoftFork->GetThreshold());\n+\n+    if ((prevState == DEFINED) && (newState != LOCKED_IN) && (newState != FAILED))\n+        throw runtime_error(\"Invalid state transition.\");\n+\n+    if ((prevState == LOCKED_IN) && (newState != ACTIVE))\n+        throw runtime_error(\"Invalid state transition.\");\n+\n+    if ((prevState == ACTIVE) || (prevState == FAILED))\n+        throw runtime_error(\"Invalid state transition.\");\n+\n+    if ((newState == LOCKED_IN) && (prevState != DEFINED))\n+        throw runtime_error(\"Invalid state transition.\");\n+\n+    if ((newState == ACTIVE) && (prevState != LOCKED_IN))\n+        throw runtime_error(\"Invalid state transition.\");\n+\n+    if ((newState == LOCKED_IN) && (bitCount < psoftFork->GetThreshold()))\n+        throw runtime_error(\"Insufficient bit count for lock-in.\");\n+}\n+\n+void CompareRuleStates(const CBlockIndex* pblockIndex, const RuleStates& prevStates, const RuleStates& newStates, const BitCounter& bitCounter)\n+{\n+    for (RuleStates::const_iterator newIt = newStates.begin(); newIt != newStates.end(); ++newIt)\n+    {\n+        const SoftFork* psoftFork = g_deployments.GetSoftFork(newIt->first);\n+        if (!psoftFork)\n+            throw runtime_error(\"Invalid internal state.\");\n+\n+        int bitCount = bitCounter.GetCountForBit(psoftFork->GetBit());\n+\n+        RuleStates::const_iterator prevIt = prevStates.find(newIt->first);\n+        if (prevIt == prevStates.end())\n+        {\n+            StateChanged(pblockIndex, psoftFork, UNDEFINED, newIt->second, bitCount);\n+        }\n+        else if (newIt->second != prevIt->second)\n+        {\n+            StateChanged(pblockIndex, psoftFork, prevIt->second, newIt->second, bitCount);\n+        }\n+        else if ((pblockIndex->nHeight % ACTIVATION_INTERVAL == 0) && (newIt->second == DEFINED) && (bitCount >= psoftFork->GetThreshold()))\n+        {\n+            BOOST_TEST_MESSAGE(\"bit count: \" << bitCount << \"/\" << psoftFork->GetThreshold());\n+            throw runtime_error(\"Threshold exceeded but lock-in did not occur.\");\n+        }\n+    }\n+\n+    for (RuleStates::const_iterator prevIt = prevStates.begin(); prevIt != prevStates.end(); ++prevIt)\n+    { \n+        RuleStates::const_iterator newIt = newStates.find(prevIt->first);\n+        if (newIt == newStates.end())\n+        {\n+            const SoftFork* psoftFork = g_deployments.GetSoftFork(prevIt->first);\n+            if (!psoftFork)\n+                throw runtime_error(\"Invalid internal state.\");\n+\n+            int bitCount = bitCounter.GetCountForBit(psoftFork->GetBit());\n+\n+            StateChanged(pblockIndex, psoftFork, prevIt->second, UNDEFINED, bitCount);\n+        }\n+    }\n+}\n+\n+typedef std::map<uint256, CBlockIndex*> BlockMap;\n+BlockMap g_blockIndexMap;\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(versionbits_tests, BasicTestingSetup)\n+\n+\n+std::string ToString(const CBlockIndex* pblockIndex, const BlockRuleIndex& blockRuleIndex)\n+{\n+    using namespace Consensus::VersionBits;\n+\n+    std::stringstream ss;\n+    ss << \"Height: \" << setw(7) << right << pblockIndex->nHeight;\n+    ss << \" Hash: \" << pblockIndex->phashBlock->ToString();\n+    ss << \" Version: 0x\" << hex << pblockIndex->nVersion;\n+    ss << \" Time: \" << dec << pblockIndex->nTime;\n+    const RuleStates& ruleStates = blockRuleIndex.GetRuleStates(pblockIndex);\n+    for (RuleStates::const_iterator it = ruleStates.begin(); it != ruleStates.end(); ++it)\n+    {\n+        ss << endl << setw(4) << right << it->first << \": \" << RuleStateToString(it->second);\n+    }\n+\n+    ss << endl;;\n+    return ss.str();\n+}\n+\n+CBlockIndex* NewBlock(int nVersion, unsigned int nTime, BlockRuleIndex& blockRuleIndex, CBlockIndex* pparent = NULL, BitCounter* pbitCounter = NULL)\n+{\n+    CBlockHeader blockHeader;\n+    blockHeader.nVersion = nVersion;\n+    blockHeader.nTime = nTime;\n+    blockHeader.hashPrevBlock = pparent ? pparent->GetBlockHash() : uint256();\n+\n+    CBlockIndex* pblockIndex = new CBlockIndex(blockHeader);\n+    pblockIndex->pprev = pparent;\n+    pblockIndex->phashBlock = new uint256(blockHeader.GetHash());\n+    pblockIndex->nHeight = pparent ? pparent->nHeight + 1 : 0;\n+    g_blockIndexMap[pblockIndex->GetBlockHash()] = pblockIndex;\n+    blockRuleIndex.InsertBlockIndex(pblockIndex);\n+\n+    if (pbitCounter)\n+    {\n+        if (pparent)\n+        {\n+            RuleStates prevRuleStates   = blockRuleIndex.GetRuleStates(pparent);\n+            RuleStates newRuleStates    = blockRuleIndex.GetRuleStates(pblockIndex);\n+            CompareRuleStates(pblockIndex, prevRuleStates, newRuleStates, *pbitCounter);\n+        }\n+        pbitCounter->CountBits(nVersion, pblockIndex->GetMedianTimePast());\n+    }\n+\n+    return pblockIndex;\n+}\n+\n+CBlockIndex* Generate(CBlockIndex* ptip, int nBlocks, int nTimeIncrement, BlockRuleIndex& blockRuleIndex, const VersionGenerator& vgen, BitCounter* pbitCounter = NULL, bool showOutput = false)\n+{\n+    for (int i = 0; i < nBlocks; i++)\n+    {\n+        ptip = NewBlock(vgen.Generate(), ptip->nTime + nTimeIncrement, blockRuleIndex, ptip, pbitCounter);\n+\n+        if (showOutput)\n+        {\n+            stringstream ss;\n+            ss << ToString(ptip, blockRuleIndex);\n+\n+            if (pbitCounter)\n+                ss << endl << pbitCounter->ToString();\n+\n+            BOOST_TEST_MESSAGE(ss.str());\n+        }\n+    }\n+\n+    return ptip;\n+}\n+\n+inline void CleanUp()\n+{\n+    for (BlockMap::iterator it = g_blockIndexMap.begin(); it != g_blockIndexMap.end(); ++it)\n+    {\n+        if (it->second)\n+        {\n+            if (it->second->phashBlock) delete it->second->phashBlock;\n+            delete it->second;\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( deployments )\n+{\n+    try\n+    {\n+        g_deployments.Clear();\n+        g_deployments.AddSoftFork(0, 1, 500, 10000, 100000);\n+\n+        try\n+        {\n+            // Test conflicting bit, overlapping deployment window\n+            g_deployments.AddSoftFork(0, 2, 950, 30, 20000);\n+            BOOST_FAIL(\"Bit conflict not detected for overlapping deployment.\");\n+        }\n+        catch(exception& e) { }\n+\n+        try\n+        {\n+            // Test conflicting bit, overlapping expiration window\n+            g_deployments.AddSoftFork(0, 3, 500, 70000, 130000);\n+            BOOST_FAIL(\"Bit conflict not detected for overlapping expiration.\");\n+        }\n+        catch(exception& e) { }\n+\n+        try\n+        {\n+            // Test conflicting bit, inner time window containment\n+            g_deployments.AddSoftFork(0, 4, 500, 60000, 80000);\n+            BOOST_FAIL(\"Bit conflict not detected for inner time window containment.\");\n+        }\n+        catch(exception& e) { }\n+\n+        try\n+        {\n+            // Test conflicting bit, outer time window containment\n+            g_deployments.AddSoftFork(0, 5, 500, 6000, 800000);\n+            BOOST_FAIL(\"Bit conflict not detected for outer time window containment.\");\n+        }\n+        catch(exception& e) { }\n+    }\n+    catch (exception& e)\n+    {\n+        BOOST_FAIL(\"Error: \" << e.what());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( transitions )\n+{\n+    BlockRuleIndex blockRuleIndex;\n+    srand(time(NULL));\n+\n+    try\n+    {\n+        g_deployments.Clear();\n+\n+        RuleStates ruleStates;\n+        BitCounter bitCounter(g_deployments);\n+        VersionGenerator vgen;\n+\n+        // Create genesis block and generate a full retarget interval\n+        CBlockIndex* pstart = NewBlock(0, time(NULL), blockRuleIndex);\n+\n+        // Set version distribution and add g_deployments\n+        vgen.SetBitProbability(0, 100);\n+\n+        vgen.SetBitProbability(5, 900);\n+        g_deployments.AddSoftFork(5, 1, 900, 0, 0xffffffff);\n+\n+        vgen.SetBitProbability(6, 1034);\n+        g_deployments.AddSoftFork(6, 2, 1034, 0, 0xffffffff);\n+\n+        blockRuleIndex.SetSoftForkDeployments(ACTIVATION_INTERVAL, &g_deployments);\n+\n+        pstart = Generate(pstart, 2016, 100, blockRuleIndex, vgen);\n+\n+        ////////////////////////////////////\n+        // TEST 1: DEFINED -> LOCKED_IN\n+        BOOST_TEST_MESSAGE(\"============================\");\n+        BOOST_TEST_MESSAGE(\"TEST 1: DEFINED -> LOCKED_IN\");\n+\n+        for (int i = 0; i < 20; i++)\n+        {\n+            bitCounter.Clear();\n+            bitCounter.CountBits(pstart->nVersion, pstart->GetMedianTimePast());\n+\n+            ruleStates.clear();\n+            ruleStates[1] = DEFINED;\n+            ruleStates[2] = DEFINED;\n+            blockRuleIndex.InsertBlockIndexWithRuleStates(pstart, ruleStates);\n+\n+            // Generate another 2020 blocks\n+            Generate(pstart, 2020, 100, blockRuleIndex, vgen, &bitCounter);//, true);\n+        }\n+\n+        ////////////////////////////////////\n+        // TEST 2: LOCKED_IN -> ACTIVE\n+        BOOST_TEST_MESSAGE(\"===========================\");\n+        BOOST_TEST_MESSAGE(\"TEST 2: LOCKED_IN -> ACTIVE\");\n+\n+        for (int i = 0; i < 20; i++)\n+        {\n+            bitCounter.Clear();\n+            bitCounter.CountBits(pstart->nVersion, pstart->GetMedianTimePast());\n+\n+            ruleStates.clear();\n+            ruleStates[1] = LOCKED_IN;\n+            ruleStates[2] = DEFINED;\n+            blockRuleIndex.InsertBlockIndexWithRuleStates(pstart, ruleStates);\n+\n+            // Generate another 2020 blocks\n+            Generate(pstart, 2020, 100, blockRuleIndex, vgen, &bitCounter);//, true);\n+        }\n+\n+        ////////////////////////////////////////////////\n+        // TEST 3: FAILED -> FAILED and ACTIVE -> ACTIVE\n+        BOOST_TEST_MESSAGE(\"=============================================\");\n+        BOOST_TEST_MESSAGE(\"TEST 3: FAILED -> FAILED and ACTIVE -> ACTIVE\");\n+\n+        for (int i = 0; i < 20; i++)\n+        {\n+            bitCounter.Clear();\n+            bitCounter.CountBits(pstart->nVersion, pstart->GetMedianTimePast());\n+\n+            ruleStates.clear();\n+            ruleStates[1] = FAILED;\n+            ruleStates[2] = ACTIVE;\n+            blockRuleIndex.InsertBlockIndexWithRuleStates(pstart, ruleStates);\n+\n+            // Generate another 2020 blocks\n+            Generate(pstart, 2020, 100, blockRuleIndex, vgen, &bitCounter);//, true);\n+        }\n+\n+        ////////////////////////////////////////////////////\n+        // TEST 4: DEFINED -> LOCKED_IN or DEFINED -> FAILED\n+        BOOST_TEST_MESSAGE(\"=================================================\");\n+        BOOST_TEST_MESSAGE(\"TEST 4: DEFINED -> LOCKED_IN or DEFINED -> FAILED\");\n+\n+        g_deployments.Clear();\n+        vgen.SetBitProbability(10, 800);\n+        g_deployments.AddSoftFork(10, 3, 400, 0, pstart->nTime + (100 * ACTIVATION_INTERVAL)/2);\n+\n+        blockRuleIndex.SetSoftForkDeployments(ACTIVATION_INTERVAL, &g_deployments);\n+\n+        for (int i = 0; i < 20; i++)\n+        {\n+            bitCounter.Clear();\n+            bitCounter.CountBits(pstart->nVersion, pstart->GetMedianTimePast());\n+\n+            ruleStates.clear();\n+            ruleStates[3] = DEFINED;\n+            blockRuleIndex.InsertBlockIndexWithRuleStates(pstart, ruleStates);\n+\n+            // Generate another 2020 blocks\n+            Generate(pstart, 2020, 100, blockRuleIndex, vgen, &bitCounter);//, true);\n+        }\n+\n+    }\n+    catch (exception& e)\n+    {\n+        BOOST_FAIL(\"Error: \" << e.what());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjYwNmI0ZWZiYjVjZTNmODlkYjRkNjI2MDc3NWUxMTljMWY3MmE0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-16T05:23:24Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:36:58Z"
      },
      "message": "Added versionbits support to Consensus::Params, added global BlockRuleIndex instance to main.cpp, initializing the instance in AppInit2().",
      "tree": {
        "sha": "fcaeaf287fe126402f2ca2576686d8465e25dfb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcaeaf287fe126402f2ca2576686d8465e25dfb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5be7fa066283f0e447253ad265320c641f43d1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5be7fa066283f0e447253ad265320c641f43d1d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5be7fa066283f0e447253ad265320c641f43d1d4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e49ac939a4c328a0f973b26dc08b7fce04970cf9",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n #include \"uint256.h\"\n+#include \"versionbits.h\"\n \n namespace Consensus {\n /**\n@@ -22,6 +23,8 @@ struct Params {\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /** Used for soft fork deployments using versionbits */\n+    VersionBits::SoftForkDeployments softForkDeployments;\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "96869ddadf47c98f0966e84a1c1fec40ab6183a6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
        "patch": "@@ -15,6 +15,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n+#include \"consensus/blockruleindex.h\"\n #include \"consensus/validation.h\"\n #include \"httpserver.h\"\n #include \"httprpc.h\"\n@@ -1281,6 +1282,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024));\n \n+    // Initialize block rule index for versionbits support\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    Consensus::VersionBits::BlockRuleIndex& blockRuleIndex = g_blockRuleIndex; // from main.cpp\n+    blockRuleIndex.SetSoftForkDeployments(consensusParams.DifficultyAdjustmentInterval(),\n+                                          &consensusParams.softForkDeployments);\n+\n     bool fLoaded = false;\n     while (!fLoaded) {\n         bool fReset = fReindex;"
      },
      {
        "sha": "d41264a5419029cf5a625bc42d0f8131d9455dd4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
        "patch": "@@ -11,6 +11,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/blockruleindex.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n@@ -75,6 +76,7 @@ bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n+Consensus::VersionBits::BlockRuleIndex g_blockRuleIndex;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying, mining and transaction creation) */\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);"
      },
      {
        "sha": "fcfc25e0a463697879f3092dedb62794874d353f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f606b4efbb5ce3f89db4d6260775e119c1f72a4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
        "patch": "@@ -28,6 +28,7 @@\n \n #include <boost/unordered_map.hpp>\n \n+namespace Consensus { namespace VersionBits { class BlockRuleIndex; }}\n class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n@@ -137,6 +138,7 @@ extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n extern bool fAlerts;\n+extern Consensus::VersionBits::BlockRuleIndex g_blockRuleIndex;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      }
    ]
  },
  {
    "sha": "46cdc1cb289917d4f5c6f230d457c8560204e34b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmNkYzFjYjI4OTkxN2Q0ZjVjNmYyMzBkNDU3Yzg1NjAyMDRlMzRi",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-16T05:30:05Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:57:20Z"
      },
      "message": "Added softforks unit.",
      "tree": {
        "sha": "11f15171e2e5efb314df0a035389a7388ad153ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11f15171e2e5efb314df0a035389a7388ad153ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46cdc1cb289917d4f5c6f230d457c8560204e34b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46cdc1cb289917d4f5c6f230d457c8560204e34b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46cdc1cb289917d4f5c6f230d457c8560204e34b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46cdc1cb289917d4f5c6f230d457c8560204e34b/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f606b4efbb5ce3f89db4d6260775e119c1f72a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f606b4efbb5ce3f89db4d6260775e119c1f72a4"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 180,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe5a958815b505446a87001329c8bb033cb8a933",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46cdc1cb289917d4f5c6f230d457c8560204e34b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46cdc1cb289917d4f5c6f230d457c8560204e34b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=46cdc1cb289917d4f5c6f230d457c8560204e34b",
        "patch": "@@ -103,6 +103,7 @@ BITCOIN_CORE_H = \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n   consensus/blockruleindex.h \\\n+  consensus/softforks.h \\\n   consensus/validation.h \\\n   consensus/versionbits.h \\\n   core_io.h \\\n@@ -191,6 +192,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/blockruleindex.cpp \\\n+  consensus/softforks.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "6a9370495d5cec2d7a7b8bd1111345534480542b",
        "filename": "src/consensus/softforks.cpp",
        "status": "added",
        "additions": 141,
        "deletions": 0,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46cdc1cb289917d4f5c6f230d457c8560204e34b/src/consensus/softforks.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46cdc1cb289917d4f5c6f230d457c8560204e34b/src/consensus/softforks.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/softforks.cpp?ref=46cdc1cb289917d4f5c6f230d457c8560204e34b",
        "patch": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2015 Eric Lombrozo\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/softforks.h\"\n+\n+#include \"chain.h\"\n+#include \"consensus/blockruleindex.h\"\n+#include \"consensus/params.h\"\n+\n+using namespace Consensus::SoftForks;\n+\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n+VersionStatus Consensus::SoftForks::CheckVersion(const CBlockIndex& blockIndex, const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev)\n+{\n+    using namespace Consensus::VersionBits;\n+\n+    if (!pindexPrev)\n+        pindexPrev = blockIndex.pprev;\n+\n+    // Handle versionbits cases first\n+    if (UsesVersionBits(blockIndex.nVersion))\n+        return blockRuleIndex.AreVersionBitsRecognized(&blockIndex, pindexPrev) ? VALID : UNRECOGNIZED;\n+\n+    // Reject blockIndex.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (blockIndex.nVersion < 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return INVALID;\n+\n+    // Reject blockIndex.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (blockIndex.nVersion < 3 && IsSuperMajority(3, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return INVALID;\n+\n+    // Reject blockIndex.nVersion=3 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (blockIndex.nVersion < 4 && IsSuperMajority(4, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return INVALID;\n+\n+    if (blockIndex.nVersion > 4)\n+        return UNRECOGNIZED;\n+\n+    return VALID;\n+}\n+\n+bool Consensus::SoftForks::IsActive(int bip, const CBlockIndex& blockIndex, const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev)\n+{\n+    if (!pindexPrev)\n+        pindexPrev = blockIndex.pprev;\n+\n+    switch (bip)\n+    {\n+    case BIP16:\n+        // BIP16 didn't become active until Apr 1 2012\n+        return blockIndex.GetBlockTime() >= 1333238400;\n+\n+    case BIP30:\n+        {\n+            // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n+            // unless those are already completely spent.\n+            // If such overwrites are allowed, coinbases and transactions depending upon those\n+            // can be duplicated to remove the ability to spend the first instance -- even after\n+            // being sent to another address.\n+            // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n+            // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n+            // already refuses previously-known transaction ids entirely.\n+            // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n+            // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n+            // two in the chain that violate it. This prevents exploiting the issue against nodes during their\n+            // initial block download.\n+            bool fEnforceBIP30 = (!blockIndex.phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n+                                !((blockIndex.nHeight==91842 && blockIndex.GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+                                 (blockIndex.nHeight==91880 && blockIndex.GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n+\n+            // Once BIP34 activated it was not possible to create new duplicate coinbases and thus other than starting\n+            // with the 2 existing duplicate coinbase pairs, not possible to create overwriting txs.  But by the\n+            // time BIP34 activated, in each of the existing pairs the duplicate coinbase had overwritten the first\n+            // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n+            // duplicate transactions descending from the known pairs either.\n+            // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n+            CBlockIndex *pindexBIP34height = pindexPrev->GetAncestor(consensusParams.BIP34Height);\n+            //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n+            return fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == consensusParams.BIP34Hash));\n+        }\n+\n+    case BIP34:\n+        // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+        // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+        return blockIndex.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams);\n+        \n+    case BIP65:\n+        // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for blockIndex.nVersion=4, when 75% of the network has upgraded:\n+        return blockIndex.nVersion >= 4 && IsSuperMajority(4, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams);\n+\n+    case BIP66:\n+        // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+        return blockIndex.nVersion >= 3 && IsSuperMajority(3, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams);\n+\n+    default:\n+        // Handle versionbits cases\n+        return (blockRuleIndex.GetRuleState(bip, &blockIndex) == Consensus::VersionBits::ACTIVE);\n+    }\n+\n+}\n+\n+const char* Consensus::SoftForks::GetBipName(int bip)\n+{\n+    switch (bip)\n+    {\n+    case BIP16:\n+        return \"BIP16\";\n+\n+    case BIP30:\n+        return \"BIP30\";\n+\n+    case BIP34:\n+        return \"BIP34\";\n+\n+    case BIP65:\n+        return \"BIP65\";\n+\n+    case BIP66:\n+        return \"BIP66\";\n+\n+    default:\n+        return \"N/A\";\n+    }\n+}"
      },
      {
        "sha": "5285ab5641fe9a2383935faa1133a63113065588",
        "filename": "src/consensus/softforks.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46cdc1cb289917d4f5c6f230d457c8560204e34b/src/consensus/softforks.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46cdc1cb289917d4f5c6f230d457c8560204e34b/src/consensus/softforks.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/softforks.h?ref=46cdc1cb289917d4f5c6f230d457c8560204e34b",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2015 Eric Lombrozo\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SOFTFORKS_H\n+#define BITCOIN_SOFTFORKS_H\n+\n+#include <cstddef>\n+\n+class CBlockIndex;\n+namespace Consensus {\n+\n+struct Params;\n+namespace VersionBits { class BlockRuleIndex; }\n+\n+namespace SoftForks {\n+\n+enum BipID\n+{\n+    BIP16,\n+    BIP30,\n+    BIP34,\n+    BIP65,\n+    BIP66,\n+};\n+\n+enum VersionStatus { VALID, UNRECOGNIZED, INVALID };\n+\n+VersionStatus CheckVersion(const CBlockIndex& blockIndex, const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev = NULL);\n+bool IsActive(int bip, const CBlockIndex& blockIndex, const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev = NULL);\n+const char* GetBipName(int bip);\n+\n+}\n+}\n+\n+#endif // BITCOIN_SOFTFORKS_H"
      }
    ]
  },
  {
    "sha": "01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWIwYmY0Y2FkMTcyYzYxZjc4YzEzYmM0MWJjMWM2NTIwZjFkYzZj",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-16T08:23:28Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:57:22Z"
      },
      "message": "Added BIP9999 to regtest chainparams as example softfork deployment.",
      "tree": {
        "sha": "c223ec642f619a3d24f47f76ea9479edebd86074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c223ec642f619a3d24f47f76ea9479edebd86074"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46cdc1cb289917d4f5c6f230d457c8560204e34b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46cdc1cb289917d4f5c6f230d457c8560204e34b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46cdc1cb289917d4f5c6f230d457c8560204e34b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "36bd2255caf0568f5a917025170f1ccd30378573",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"chainparams.h\"\n #include \"consensus/merkle.h\"\n \n+#include \"consensus/softforks.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n@@ -228,6 +229,9 @@ class CRegTestParams : public CChainParams {\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n \n+        // Example versionbits soft fork deployment on bit 0\n+        consensus.softForkDeployments.AddSoftFork(0, Consensus::SoftForks::BIP9999, 1512, 0x00000000, 0xffffffff);\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "b41ad733def98445a92252407b9891efdbed4f83",
        "filename": "src/consensus/softforks.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/src/consensus/softforks.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/src/consensus/softforks.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/softforks.cpp?ref=01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
        "patch": "@@ -135,6 +135,9 @@ const char* Consensus::SoftForks::GetBipName(int bip)\n     case BIP66:\n         return \"BIP66\";\n \n+    case BIP9999:\n+        return \"BIP9999\";\n+\n     default:\n         return \"N/A\";\n     }"
      },
      {
        "sha": "a8a7cc59af3a0818aa72e7582dc2a514e1afe8f0",
        "filename": "src/consensus/softforks.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/src/consensus/softforks.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c/src/consensus/softforks.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/softforks.h?ref=01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
        "patch": "@@ -23,6 +23,7 @@ enum BipID\n     BIP34,\n     BIP65,\n     BIP66,\n+    BIP9999,\n };\n \n enum VersionStatus { VALID, UNRECOGNIZED, INVALID };"
      }
    ]
  },
  {
    "sha": "acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2MwOTFkNGQyMTk3YWE1ZWI1YjVjNzNhZDU4NmU4MTFjM2I0ZmQ5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-19T09:06:56Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:57:22Z"
      },
      "message": "Inserting into BlockRuleIndex when first loading the block index and from AddToBlockIndex",
      "tree": {
        "sha": "0059ff0d1343c32145e771391e691d756a54851c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0059ff0d1343c32145e771391e691d756a54851c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01b0bf4cad172c61f78c13bc41bc1c6520f1dc6c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c961e156367ef76dcda03ebc678c7c0c4f4f4e5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
        "patch": "@@ -2741,6 +2741,8 @@ bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex) {\n \n CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n {\n+    Consensus::VersionBits::BlockRuleIndex& blockRuleIndex = g_blockRuleIndex;\n+\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n     BlockMap::iterator it = mapBlockIndex.find(hash);\n@@ -2770,6 +2772,9 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n \n     setDirtyBlockIndex.insert(pindexNew);\n \n+    // Insert into versionbits block rule index and compute soft fork deployment states\n+    blockRuleIndex.InsertBlockIndex(pindexNew);\n+\n     return pindexNew;\n }\n \n@@ -3420,6 +3425,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n bool static LoadBlockIndexDB()\n {\n     const CChainParams& chainparams = Params();\n+    Consensus::VersionBits::BlockRuleIndex& blockRuleIndex = g_blockRuleIndex;\n+\n     if (!pblocktree->LoadBlockIndexGuts())\n         return false;\n \n@@ -3460,6 +3467,9 @@ bool static LoadBlockIndexDB()\n             pindex->BuildSkip();\n         if (pindex->IsValid(BLOCK_VALID_TREE) && (pindexBestHeader == NULL || CBlockIndexWorkComparator()(pindexBestHeader, pindex)))\n             pindexBestHeader = pindex;\n+\n+        // Insert into versionbits block rule index and recompute soft fork deployment states for chain\n+        blockRuleIndex.InsertBlockIndex(pindex);\n     }\n \n     // Load block file info"
      }
    ]
  },
  {
    "sha": "4737fa246ac9e5ac855c46758ca05cfb383f3879",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzM3ZmEyNDZhYzllNWFjODU1YzQ2NzU4Y2EwNWNmYjM4M2YzODc5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-25T07:47:55Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:57:22Z"
      },
      "message": "Use Consensus::SoftForks::CheckVersion() for warning system.",
      "tree": {
        "sha": "7df64e47787692bae4010e8b5de64d4aefcd5156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7df64e47787692bae4010e8b5de64d4aefcd5156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4737fa246ac9e5ac855c46758ca05cfb383f3879",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4737fa246ac9e5ac855c46758ca05cfb383f3879",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4737fa246ac9e5ac855c46758ca05cfb383f3879",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4737fa246ac9e5ac855c46758ca05cfb383f3879/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acc091d4d2197aa5eb5b5c73ad586e811c3b4fd9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cbb71df42505171e362e8e0d769c04570b12e282",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4737fa246ac9e5ac855c46758ca05cfb383f3879/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4737fa246ac9e5ac855c46758ca05cfb383f3879/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4737fa246ac9e5ac855c46758ca05cfb383f3879",
        "patch": "@@ -14,6 +14,7 @@\n #include \"consensus/blockruleindex.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n+#include \"consensus/softforks.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"init.h\"\n@@ -2287,6 +2288,7 @@ void PruneAndFlush() {\n /** Update chainActive and related internal data structures. */\n void static UpdateTip(CBlockIndex *pindexNew) {\n     const CChainParams& chainParams = Params();\n+    const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex = g_blockRuleIndex;\n     chainActive.SetTip(pindexNew);\n \n     // New best block\n@@ -2308,18 +2310,22 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n         const CBlockIndex* pindex = chainActive.Tip();\n         for (int i = 0; i < 100 && pindex != NULL; i++)\n         {\n-            if (pindex->nVersion > CBlock::CURRENT_VERSION)\n-                ++nUpgraded;\n+            if (Consensus::SoftForks::CheckVersion(*pindex, blockRuleIndex, chainParams.GetConsensus()) ==\n+                Consensus::SoftForks::UNRECOGNIZED)\n+                    ++nUpgraded;\n             pindex = pindex->pprev;\n         }\n         if (nUpgraded > 0)\n-            LogPrintf(\"%s: %d of last 100 blocks above version %d\\n\", __func__, nUpgraded, (int)CBlock::CURRENT_VERSION);\n+            LogPrintf(\"%s: %d of last 100 blocks have unrecognized version.\\n\", __func__, nUpgraded);\n+\n         if (nUpgraded > 100/2)\n+            fWarned = true;\n+\n+        if (fWarned)\n         {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n             strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n             CAlert::Notify(strMiscWarning, true);\n-            fWarned = true;\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWYyZjFjOWY2YTlmYmY2MzhhZTJlM2U3MWQ4ZmI5NDE2NTg5MGQy",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-19T05:31:09Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:57:22Z"
      },
      "message": "Added miner support for versionbits.",
      "tree": {
        "sha": "3f8300530c3a3bb4e66d742a432d91b5e1dbeeef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f8300530c3a3bb4e66d742a432d91b5e1dbeeef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4737fa246ac9e5ac855c46758ca05cfb383f3879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4737fa246ac9e5ac855c46758ca05cfb383f3879",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4737fa246ac9e5ac855c46758ca05cfb383f3879"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0aaf9cae1e5714d970121a4b23d82d508a01b353",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
        "patch": "@@ -9,6 +9,7 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/blockruleindex.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n@@ -73,17 +74,14 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n \n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn)\n {\n+    const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex = g_blockRuleIndex; // from main.cpp\n+\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n-    // -regtest only: allow overriding block.nVersion with\n-    // -blockversion=N to test forking scenarios\n-    if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n-\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);\n@@ -137,6 +135,13 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n+        pblock->nVersion = blockRuleIndex.CreateBlockVersion(pblock->nTime, chainActive.Tip()->pprev);\n+\n+        // -regtest only: allow overriding block.nVersion with\n+        // -blockversion=N to test forking scenarios\n+        if (chainparams.MineBlocksOnDemand())\n+            pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();"
      }
    ]
  },
  {
    "sha": "009bf08a657148bfa34c99dd85f02226584b8e0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDliZjA4YTY1NzE0OGJmYTM0Yzk5ZGQ4NWYwMjIyNjU4NGI4ZTBk",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-19T09:07:35Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2016-01-14T06:58:44Z"
      },
      "message": "Added versionbits status info to getblockchaininfo RPC.",
      "tree": {
        "sha": "cefbdbbc0e394018ca2222b5089e97e1572cc324",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cefbdbbc0e394018ca2222b5089e97e1572cc324"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/009bf08a657148bfa34c99dd85f02226584b8e0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/009bf08a657148bfa34c99dd85f02226584b8e0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/009bf08a657148bfa34c99dd85f02226584b8e0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/009bf08a657148bfa34c99dd85f02226584b8e0d/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21f2f1c9f6a9fbf638ae2e3e71d8fb94165890d2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "447a528588528b392e2f947ecaeeba8faaf82224",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/009bf08a657148bfa34c99dd85f02226584b8e0d/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/009bf08a657148bfa34c99dd85f02226584b8e0d/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=009bf08a657148bfa34c99dd85f02226584b8e0d",
        "patch": "@@ -8,7 +8,10 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"coins.h\"\n+#include \"consensus/blockruleindex.h\"\n+#include \"consensus/softforks.h\"\n #include \"consensus/validation.h\"\n+#include \"consensus/versionbits.h\"\n #include \"main.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n@@ -602,6 +605,23 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     return rv;\n }\n \n+static UniValue VersionBitsDesc(const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex, const CBlockIndex* pindex)\n+{\n+    UniValue rv(UniValue::VARR);\n+\n+    Consensus::VersionBits::RuleStates ruleStates = blockRuleIndex.GetRuleStates(pindex);\n+    Consensus::VersionBits::RuleStates::const_iterator it = ruleStates.begin();\n+    for (; it != ruleStates.end(); ++it)\n+    {\n+        UniValue deployment(UniValue::VOBJ);\n+        deployment.push_back(Pair(\"id\", Consensus::SoftForks::GetBipName(it->first)));\n+        deployment.push_back(Pair(\"status\", Consensus::VersionBits::GetRuleStateText(it->second)));\n+        rv.push_back(deployment);\n+    }\n+\n+    return rv;\n+}\n+\n UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -653,12 +673,14 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n+    const Consensus::VersionBits::BlockRuleIndex& blockRuleIndex = g_blockRuleIndex; // from main.cpp\n     CBlockIndex* tip = chainActive.Tip();\n     UniValue softforks(UniValue::VARR);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n+    obj.push_back(Pair(\"versionbits\",           VersionBitsDesc(blockRuleIndex, tip)));\n \n     if (fPruneMode)\n     {"
      }
    ]
  }
]