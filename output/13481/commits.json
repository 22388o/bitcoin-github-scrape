[
  {
    "sha": "fa324a8b15a4ef4138685b3427c895ec14faf3af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMyNGE4YjE1YTRlZjQxMzg2ODViMzQyN2M4OTVlYzE0ZmFmM2Fm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-04T22:25:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-18T15:43:29Z"
      },
      "message": "doc: Rewrite some validation doc as lock annotations",
      "tree": {
        "sha": "a0ee5743e2fb84f2f5258c68eaa338875061e219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0ee5743e2fb84f2f5258c68eaa338875061e219"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa324a8b15a4ef4138685b3427c895ec14faf3af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbJ9MhAAoJEM4rdWl+aaVIq3ML/20whnb72pn5Zhhwo71DLGa2\nZFSp7aRLHR5VNKs3VaZ44grH4E4MBYEpAM1a71x+AP0X65RbQR0hLUaNwsnUCw+2\nLlUDletzgahXLv/Tg1BR0z867KkAgYOM9+CSdF4RjwN6m114olP7lEgkcj2sDY+3\nR0gR0p+dXW31PM1y3cv1Xant1rgxPI7Gi3WPQSLMZJitRJDr2GI4xAo+YrbJJPO6\niXDk9pgU2CfT1uMpvbkwXFaruL+iq0gsI3I9MOejTgh9MXpGVL7ObzJ2d+ibYrUa\n3cBGZ1M4m9tJTRByXiIaOBoVcLnvrLp/1EyqS4B3jFPX2715lYWYgsLJPkq0SLrH\nksNkSjCdWTLhGJ+qqlwnH0nEr0IWHmrjRFZZJZYLD5Y8hnAs0Nf578ABAIf0WtLC\njOdCMcyuXyWRIoc2H5ATYrhU2/Et/n/6liP3Tt5Ckq0mG7ocGeRUXLAUcMy9Hx6j\n4sJufAY8QT/uIu3IhBPikr019eHZ1xjov/SHQYNT8g==\n=GWjO\n-----END PGP SIGNATURE-----",
        "payload": "tree a0ee5743e2fb84f2f5258c68eaa338875061e219\nparent 088240685456494a26047c8f3d5ecf578f70dbce\nauthor MarcoFalke <falke.marco@gmail.com> 1528151113 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1529336609 -0400\n\ndoc: Rewrite some validation doc as lock annotations\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa324a8b15a4ef4138685b3427c895ec14faf3af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa324a8b15a4ef4138685b3427c895ec14faf3af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa324a8b15a4ef4138685b3427c895ec14faf3af/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088240685456494a26047c8f3d5ecf578f70dbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088240685456494a26047c8f3d5ecf578f70dbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088240685456494a26047c8f3d5ecf578f70dbce"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "7be12375a223f1345d1c53f8df783a72ca10ef1a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa324a8b15a4ef4138685b3427c895ec14faf3af/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa324a8b15a4ef4138685b3427c895ec14faf3af/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa324a8b15a4ef4138685b3427c895ec14faf3af",
        "patch": "@@ -157,16 +157,16 @@ class CChainState {\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n     CBlockIndex *pindexBestInvalid = nullptr;\n \n-    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n \n     /**\n      * If a block header hasn't already been seen, call CheckBlockHeader on it, ensure\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n-    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -177,9 +177,9 @@ class CChainState {\n     bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n \n     // Manual block validity manipulation:\n-    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n-    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n-    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n     bool RewindBlockIndex(const CChainParams& params);\n@@ -193,9 +193,9 @@ class CChainState {\n     bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n     bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n \n-    CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n+    CBlockIndex* AddToBlockIndex(const CBlockHeader& block) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Create a new block index entry for a given block hash */\n-    CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    CBlockIndex* InsertBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /**\n      * Make various assertions about the state of the block index.\n      *\n@@ -204,11 +204,11 @@ class CChainState {\n     void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n-    CBlockIndex* FindMostWorkChain();\n-    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+    CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n \n-    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n } g_chainstate;\n \n \n@@ -2645,7 +2645,7 @@ bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainPar\n     return true;\n }\n \n-static void NotifyHeaderTip() {\n+static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n     static CBlockIndex* pindexHeaderOld = nullptr;\n@@ -3395,7 +3395,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // If the previous block index isn't valid, determine if it descends from any block which\n-        // has been found invalid (g_failed_blocks), then mark pindexPrev and any blocks\n+        // has been found invalid (m_failed_blocks), then mark pindexPrev and any blocks\n         // between them as failed.\n         if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n             for (const CBlockIndex* failedit : m_failed_blocks) {\n@@ -3826,7 +3826,7 @@ CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n \n bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree)\n {\n-    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash){ return this->InsertBlockIndex(hash); }))\n+    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); }))\n         return false;\n \n     boost::this_thread::interruption_point();\n@@ -3876,7 +3876,7 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n     return true;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!g_chainstate.LoadBlockIndex(chainparams.GetConsensus(), *pblocktree))\n         return false;"
      },
      {
        "sha": "07fe99c079a1c7c35bf839dd80f60c2bcd2c0bf5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa324a8b15a4ef4138685b3427c895ec14faf3af/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa324a8b15a4ef4138685b3427c895ec14faf3af/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa324a8b15a4ef4138685b3427c895ec14faf3af",
        "patch": "@@ -233,20 +233,20 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n  * \n- * May not be called with cs_main held. May not be called in a\n+ * May not be called in a\n  * validationinterface callback.\n  *\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers.\n  *\n- * May not be called with cs_main held. May not be called in a\n+ * May not be called in a\n  * validationinterface callback.\n  *\n  * @param[in]  block The block headers themselves\n@@ -255,7 +255,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n  * @param[out] first_invalid First header that fails validation, if one exists\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr, CBlockHeader *first_invalid=nullptr);\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n@@ -269,7 +269,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n  * initializing state if we're running with -reindex. */\n-bool LoadBlockIndex(const CChainParams& chainparams);\n+bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Update the chain tip based on database information. */\n bool LoadChainTip(const CChainParams& chainparams);\n /** Unload database information */\n@@ -413,8 +413,8 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex\n /** Context-independent validity checks */\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n-/** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+/** Check a block is completely valid from start to finish (only works on top of our current best block) */\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -454,16 +454,16 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n \n /** Mark a block as precious and reorganize.\n  *\n- * May not be called with cs_main held. May not be called in a\n+ * May not be called in a\n  * validationinterface callback.\n  */\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;"
      }
    ]
  }
]