[
  {
    "sha": "8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWNkMjVkODU0OGQ5MWYxZTZjMWQ3YzZmYTM1MjhjMDlkYTZmZjgw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-18T21:57:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-22T22:39:51Z"
      },
      "message": "rpc: Allow typeAny in RPCTypeCheck",
      "tree": {
        "sha": "10939681a7077b6bb585b202032bdde066653089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10939681a7077b6bb585b202032bdde066653089"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "caad3f94f3cd14f4b8a474b9f7bfa5cb6dc1c535",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
        "patch": "@@ -50,12 +50,11 @@ void RPCServer::OnStopped(std::function<void ()> slot)\n }\n \n void RPCTypeCheck(const UniValue& params,\n-                  const std::list<UniValue::VType>& typesExpected,\n+                  const std::list<UniValueType>& typesExpected,\n                   bool fAllowNull)\n {\n     unsigned int i = 0;\n-    for (UniValue::VType t : typesExpected)\n-    {\n+    for (const UniValueType& t : typesExpected) {\n         if (params.size() <= i)\n             break;\n \n@@ -67,10 +66,10 @@ void RPCTypeCheck(const UniValue& params,\n     }\n }\n \n-void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected)\n+void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected)\n {\n-    if (value.type() != typeExpected) {\n-        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected), uvTypeName(value.type())));\n+    if (!typeExpected.typeAny && value.type() != typeExpected.type) {\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected.type), uvTypeName(value.type())));\n     }\n }\n "
      },
      {
        "sha": "703c105be084c0fe254a7248847928e84ddc5e8f",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
        "patch": "@@ -30,7 +30,7 @@ namespace RPCServer\n /** Wrapper for UniValue::VType, which includes typeAny:\n  * Used to denote don't care type. Only used by RPCTypeCheckObj */\n struct UniValueType {\n-    explicit UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n+    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n     UniValueType() : typeAny(true) {}\n     bool typeAny;\n     UniValue::VType type;\n@@ -69,12 +69,12 @@ bool RPCIsInWarmup(std::string *outStatus);\n  * the right number of arguments are passed, just that any passed are the correct type.\n  */\n void RPCTypeCheck(const UniValue& params,\n-                  const std::list<UniValue::VType>& typesExpected, bool fAllowNull=false);\n+                  const std::list<UniValueType>& typesExpected, bool fAllowNull=false);\n \n /**\n  * Type-check one argument; throws JSONRPCError if wrong type given.\n  */\n-void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected);\n+void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected);\n \n /*\n   Check for expected keys/value types in an Object."
      }
    ]
  },
  {
    "sha": "fa06dfce0f1f8e5e34f416c556590fa56b721788",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA2ZGZjZTBmMWY4ZTVlMzRmNDE2YzU1NjU5MGZhNTZiNzIxNzg4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-11T20:24:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-07T17:58:14Z"
      },
      "message": "[rpc] createrawtransaction: Accept sorted outputs",
      "tree": {
        "sha": "95b517e24c4dc0223d4b47e0ab718fc73cad1f93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95b517e24c4dc0223d4b47e0ab718fc73cad1f93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa06dfce0f1f8e5e34f416c556590fa56b721788",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJaoCg2AAoJEM4rdWl+aaVIaDEMALBfW6zpSVsbVETct/xk6+UM\nBsP5izCvOdzpM0s31YKUTgP1/3CpUMBA7udlNRDVfo8BVFutXcOM2b9/baxqlYKp\nC9hZLS3om4xeZUumkXZZJOHgF4P0Vrn9DcrbA0yrdnGNEWGB9D6U0/46h9C9VkoP\nDVWzNLwzXzEGcxXPsLduwYkE7Ch8R/Zib6bWgVYGo03A5CmAvkyZY2qx2Hq0ngdJ\nIsOKQyyN+voCIfgcB+xo3NPrymm9IQE9g8cv9Sil3XiCOJgqsCWj/j82Vlsw5CN/\nEl1IK6/NvJfrNYvXw63UaN962UtIU1k3Bt9Zt8+O/S1wSSHFP+zvcmkme6ceLxby\nt5xUGlou4FwfCdQXrDL+dpK3OhQ31fmvyr3WeEvZ92z0dNXcxtxBV4bBdH/5ZIq6\n14tTN0bxA7y3O0vTzq/OGHuCzBifrfvOq8/0mm4xlO+kzhETiX8nGZ6473Yu2YpQ\nxCreL+5e0IV/apo9tp2wgABKvrthPO4+EgI8W2Ejbw==\n=HxS5\n-----END PGP SIGNATURE-----",
        "payload": "tree 95b517e24c4dc0223d4b47e0ab718fc73cad1f93\nparent 8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80\nauthor MarcoFalke <falke.marco@gmail.com> 1513023842 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520445494 -0500\n\n[rpc] createrawtransaction: Accept sorted outputs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06dfce0f1f8e5e34f416c556590fa56b721788",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa06dfce0f1f8e5e34f416c556590fa56b721788",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06dfce0f1f8e5e34f416c556590fa56b721788/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8acd25d8548d91f1e6c1d7c6fa3528c09da6ff80"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 99,
      "deletions": 29
    },
    "files": [
      {
        "sha": "25dc5beecc8bc1d91bf9b6662a4ba113c243a911",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06dfce0f1f8e5e34f416c556590fa56b721788/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06dfce0f1f8e5e34f416c556590fa56b721788/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "patch": "@@ -61,7 +61,8 @@ RPC changes\n \n ### Low-level changes\n \n-- The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n+- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n+- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n \n Credits\n ======="
      },
      {
        "sha": "a87a41a4f8f6d145a1a788c9b5441ddc83f582da",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 14,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06dfce0f1f8e5e34f416c556590fa56b721788/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06dfce0f1f8e5e34f416c556590fa56b721788/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "patch": "@@ -316,9 +316,10 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n \n UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n         throw std::runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime ) ( replaceable )\\n\"\n+            // clang-format off\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n             \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n@@ -329,18 +330,23 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"1. \\\"inputs\\\"                (array, required) A json array of json objects\\n\"\n             \"     [\\n\"\n             \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",    (string, required) The transaction id\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",      (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n             \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n             \"       } \\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"outputs\\\"               (object, required) a json object with outputs\\n\"\n+            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+            \"   [\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx,    (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the \" + CURRENCY_UNIT + \" amount\\n\"\n-            \"      \\\"data\\\": \\\"hex\\\"      (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n-            \"      ,...\\n\"\n+            \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    },\\n\"\n+            \"    {\\n\"\n+            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex encoded data\\n\"\n             \"    }\\n\"\n+            \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+            \"                             accepted as second parameter.\\n\"\n+            \"   ]\\n\"\n             \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n             \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n@@ -352,14 +358,25 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n+            // clang-format on\n         );\n+    }\n \n-    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM, UniValue::VBOOL}, true);\n+    RPCTypeCheck(request.params, {\n+        UniValue::VARR,\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VBOOL\n+        }, true\n+    );\n     if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n     UniValue inputs = request.params[0].get_array();\n-    UniValue sendTo = request.params[1].get_obj();\n+    const bool outputs_is_obj = request.params[1].isObject();\n+    UniValue outputs = outputs_is_obj ?\n+                           request.params[1].get_obj() :\n+                           request.params[1].get_array();\n \n     CMutableTransaction rawTx;\n \n@@ -411,11 +428,24 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n     }\n \n     std::set<CTxDestination> destinations;\n-    std::vector<std::string> addrList = sendTo.getKeys();\n-    for (const std::string& name_ : addrList) {\n-\n+    if (!outputs_is_obj) {\n+        // Translate array of key-value pairs into dict\n+        UniValue outputs_dict = UniValue(UniValue::VOBJ);\n+        for (size_t i = 0; i < outputs.size(); ++i) {\n+            const UniValue& output = outputs[i];\n+            if (!output.isObject()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, key-value pair not an object as expected\");\n+            }\n+            if (output.size() != 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, key-value pair must contain exactly one key\");\n+            }\n+            outputs_dict.pushKVs(output);\n+        }\n+        outputs = std::move(outputs_dict);\n+    }\n+    for (const std::string& name_ : outputs.getKeys()) {\n         if (name_ == \"data\") {\n-            std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n+            std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n \n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n@@ -430,7 +460,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             }\n \n             CScript scriptPubKey = GetScriptForDestination(destination);\n-            CAmount nAmount = AmountFromValue(sendTo[name_]);\n+            CAmount nAmount = AmountFromValue(outputs[name_]);\n \n             CTxOut out(nAmount, scriptPubKey);\n             rawTx.vout.push_back(out);"
      },
      {
        "sha": "8b32924fbca51b2eb4f2f8b604e247643407a4c6",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06dfce0f1f8e5e34f416c556590fa56b721788/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06dfce0f1f8e5e34f416c556590fa56b721788/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "patch": "@@ -28,7 +28,7 @@ namespace RPCServer\n }\n \n /** Wrapper for UniValue::VType, which includes typeAny:\n- * Used to denote don't care type. Only used by RPCTypeCheckObj */\n+ * Used to denote don't care type. */\n struct UniValueType {\n     UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n     UniValueType() : typeAny(true) {}"
      },
      {
        "sha": "763cf3aa6aca61e0907b01a06456beb6f6d220f5",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06dfce0f1f8e5e34f416c556590fa56b721788/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06dfce0f1f8e5e34f416c556590fa56b721788/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "patch": "@@ -52,7 +52,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction null null\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction not_array\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] []\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction {} {}\"), std::runtime_error);\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [] {}\"));\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [] {} extra\"), std::runtime_error);"
      },
      {
        "sha": "825b897871cdf161f5c284f45b8b4564e1969de2",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 52,
        "deletions": 12,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06dfce0f1f8e5e34f416c556590fa56b721788/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06dfce0f1f8e5e34f416c556590fa56b721788/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "patch": "@@ -12,7 +12,12 @@\n    - getrawtransaction\n \"\"\"\n \n+from collections import OrderedDict\n+from io import BytesIO\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CTransaction,\n+)\n from test_framework.util import *\n \n \n@@ -43,11 +48,10 @@ def set_test_params(self):\n \n     def setup_network(self, split=False):\n         super().setup_network()\n-        connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes, 0, 2)\n \n     def run_test(self):\n-\n-        #prepare some coins for multiple *rawtransaction commands\n+        self.log.info('prepare some coins for multiple *rawtransaction commands')\n         self.nodes[2].generate(1)\n         self.sync_all()\n         self.nodes[0].generate(101)\n@@ -59,10 +63,11 @@ def run_test(self):\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n-        # Test getrawtransaction on genesis block coinbase returns an error\n+        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n         block = self.nodes[0].getblock(self.nodes[0].getblockhash(0))\n         assert_raises_rpc_error(-5, \"The genesis block coinbase is not considered an ordinary transaction\", self.nodes[0].getrawtransaction, block['merkleroot'])\n \n+        self.log.info('Check parameter types and required parameters of createrawtransaction')\n         # Test `createrawtransaction` required parameters\n         assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction)\n         assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [])\n@@ -83,12 +88,18 @@ def run_test(self):\n \n         # Test `createrawtransaction` invalid `outputs`\n         address = self.nodes[0].getnewaddress()\n-        assert_raises_rpc_error(-3, \"Expected type object\", self.nodes[0].createrawtransaction, [], 'foo')\n+        address2 = self.nodes[0].getnewaddress()\n+        assert_raises_rpc_error(-1, \"JSON value is not an array as expected\", self.nodes[0].createrawtransaction, [], 'foo')\n+        self.nodes[0].createrawtransaction(inputs=[], outputs={})  # Should not throw for backwards compatibility\n+        self.nodes[0].createrawtransaction(inputs=[], outputs=[])\n         assert_raises_rpc_error(-8, \"Data must be hexadecimal string\", self.nodes[0].createrawtransaction, [], {'data': 'foo'})\n         assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].createrawtransaction, [], {'foo': 0})\n         assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].createrawtransaction, [], {address: 'foo'})\n         assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], [{address: 1}, {address: 1}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair must contain exactly one key\", self.nodes[0].createrawtransaction, [], [{'a': 1, 'b': 2}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair not an object as expected\", self.nodes[0].createrawtransaction, [], [['key-value pair1'], ['2']])\n \n         # Test `createrawtransaction` invalid `locktime`\n         assert_raises_rpc_error(-3, \"Expected type number\", self.nodes[0].createrawtransaction, [], {}, 'foo')\n@@ -98,9 +109,38 @@ def run_test(self):\n         # Test `createrawtransaction` invalid `replaceable`\n         assert_raises_rpc_error(-3, \"Expected type bool\", self.nodes[0].createrawtransaction, [], {}, 0, 'foo')\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n+        self.log.info('Check that createrawtransaction accepts an array and object as outputs')\n+        tx = CTransaction()\n+        # One output\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs={address: 99}))))\n+        assert_equal(len(tx.vout), 1)\n+        assert_equal(\n+            bytes_to_hex_str(tx.serialize()),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}]),\n+        )\n+        # Two outputs\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=OrderedDict([(address, 99), (address2, 99)])))))\n+        assert_equal(len(tx.vout), 2)\n+        assert_equal(\n+            bytes_to_hex_str(tx.serialize()),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n+        )\n+        # Two data outputs\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([('data', '99'), ('data', '99')])))))\n+        assert_equal(len(tx.vout), 2)\n+        assert_equal(\n+            bytes_to_hex_str(tx.serialize()),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{'data': '99'}, {'data': '99'}]),\n+        )\n+        # Multiple mixed outputs\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), ('data', '99'), ('data', '99')])))))\n+        assert_equal(len(tx.vout), 3)\n+        assert_equal(\n+            bytes_to_hex_str(tx.serialize()),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {'data': '99'}, {'data': '99'}]),\n+        )\n+\n+        self.log.info('sendrawtransaction with missing input')\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -248,14 +288,14 @@ def run_test(self):\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-        self.log.info(rawTxPartialSigned1)\n+        self.log.debug(rawTxPartialSigned1)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n         rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-        self.log.info(rawTxPartialSigned2)\n+        self.log.debug(rawTxPartialSigned2)\n         assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n         rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-        self.log.info(rawTxComb)\n+        self.log.debug(rawTxComb)\n         self.nodes[2].sendrawtransaction(rawTxComb)\n         rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n         self.sync_all()\n@@ -273,7 +313,7 @@ def run_test(self):\n         encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        \n+\n         # getrawtransaction tests\n         # 1. valid parameters - only supply txid\n         txHash = rawTx[\"hash\"]"
      }
    ]
  },
  {
    "sha": "fac70134a9e3a1fc8e491aecb3c36d0184ba7b82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM3MDEzNGE5ZTNhMWZjOGU0OTFhZWNiM2MzNmQwMTg0YmE3Yjgy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-11T20:51:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-11T20:48:19Z"
      },
      "message": "rpc: Update createrawtransaction examples",
      "tree": {
        "sha": "d7588b4bca465253149aa6d8b2d698a956dcb9bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7588b4bca465253149aa6d8b2d698a956dcb9bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac70134a9e3a1fc8e491aecb3c36d0184ba7b82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJapZYTAAoJEM4rdWl+aaVIISML/3Gjf61onmw0FSoiUKcZgDcV\nMn2V8hPrVuWCKfRcThC1TUsBqT+aIVEGqLdbAf4OIC+sHZ1makzVxhOP42dIYaoF\n1BWU/8AWe2TP2SWDeEUpvC8nOuBHRb4Wr5mubeoqNMh6oOMrWGqPKsbekKgwBJqd\n6n46vNm5u3ujEwWnetIU3RxBs0PImLlyN+OeZgr75jFu51Lhob4yrPJ163/es3SD\nWu8DwAhSNjy4KFyPV5nxd8Oa/rHGHm3kS9HROk7iWt4NZtXDWU/u2k6Uhbp/5pxX\nAYKInsh+z0Vsb8xAJqILSfDFVrKCxxZE7t4EhOSKFgcyWR4/7vaJxipjtKQgs+L8\nbmjH7NKarxtKnyRR8Wdb9f9f8TSHM3rku+fXL1zuG6tyODwdv3k8U9zPI4ekP5g6\nK6U8ugbskUeqkMbHXc+WtIoQs2G3qrHA+l0inYcxcytFwLMGyYEfCstzNOPrxukg\nZB0vc8a58oXWiRYs5nGxp2GUalkRrFOqhtbXjBqprg==\n=pSkw\n-----END PGP SIGNATURE-----",
        "payload": "tree d7588b4bca465253149aa6d8b2d698a956dcb9bd\nparent fa06dfce0f1f8e5e34f416c556590fa56b721788\nauthor MarcoFalke <falke.marco@gmail.com> 1520801514 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1520801299 -0400\n\nrpc: Update createrawtransaction examples\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac70134a9e3a1fc8e491aecb3c36d0184ba7b82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac70134a9e3a1fc8e491aecb3c36d0184ba7b82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac70134a9e3a1fc8e491aecb3c36d0184ba7b82/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06dfce0f1f8e5e34f416c556590fa56b721788",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa06dfce0f1f8e5e34f416c556590fa56b721788"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f375dd14344ba83b71b6a9f4d717bb07c20816df",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac70134a9e3a1fc8e491aecb3c36d0184ba7b82/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac70134a9e3a1fc8e491aecb3c36d0184ba7b82/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fac70134a9e3a1fc8e491aecb3c36d0184ba7b82",
        "patch": "@@ -354,10 +354,10 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n \n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n-            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n-            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n-            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n+            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n             // clang-format on\n         );\n     }"
      }
    ]
  }
]