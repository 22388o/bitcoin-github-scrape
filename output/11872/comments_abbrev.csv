sipa,2017-12-12T05:12:50Z,Vague concept ACK that accepting a list instead of a dict should be supported. I have little opinion on how to do that in a backward compatible way.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-350947402,350947402,
jonasschnelli,2017-12-12T06:10:49Z,"Concept ACK.\nI think the backward compatibility is solved in a good way... not sure if it should be mentioned somewhere (at least in some comments)",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-350955121,350955121,
promag,2017-12-12T07:22:40Z,Should use deprecated flag to enable backward compatibility?,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-350966576,350966576,
laanwj,2017-12-12T11:16:12Z,"Concept ACK, I've frequently wondered why this was a dictionary.\n\n> Should use deprecated flag to enable backward compatibility?\n\nI think both ways should be supported for the foreseeable future, no need to deprecate anything right now. There's no reason to break software for this.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351021736,351021736,
promag,2017-12-12T11:20:46Z,@laanwj so just add a note that the parameter as object is deprecated?,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351022736,351022736,
laanwj,2017-12-12T11:27:23Z,"> TODO: Needs tests\n\n~~Something that I guess needs to be tested explicitly now: duplicate address causes failure (or is that an actual use-case? we don't allow multiple outputs to the same address in the wallet, at least).~~\nEdit, a check and error for that already exists, #11877 adds a test.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351024184,351024184,
MarcoFalke,2017-12-12T21:16:16Z,"Note that this didn't break any functional test, so it should be compatible with the previous interface.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351197040,351197040,
jnewbery,2017-12-12T21:42:48Z,"Concept ACK. I'll review once there are tests.\n\nHave you seen luke-jr's change to allow RPC Type Checking against more than one type. It's in commit https://github.com/bitcoin/bitcoin/pull/11660/commits/8334875d8dcebab3841e42ab25e4e1d5247070a6 in #11660. Would it be useful here?",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351204136,351204136,
MarcoFalke,2017-12-13T00:38:53Z,"> Why? Invalid parameter, duplicated address is thrown.\n\nNot when the dict implementation eats duplicate keys. This is at least the case for python's dict and javascript's dict.\n\n> Why does it matters?\n\nThe outputs structure is a vector, i.e. sorted in the bitcoin protocol, thus one could falsely assume that creating a raw transaction via `createrawtransaction` populates that vector in",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351242893,351242893,
laanwj,2017-12-13T05:49:14Z,"> Not when the dict implementation eats duplicate keys. This is at least the case for python's dict and javascript's dict.\n\nNormally whatever dict/object implementation is on the client-side will eat it.\nTo be able pass duplicate keys, the clients need to some way emit an array as a JSON object.\nThat's absolutely against the JSON spec, just like expecting object attributes to be emitted in",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351290268,351290268,
jnewbery,2017-12-13T12:48:55Z,"> It seems to break Travis, any idea why (or is this another fluke?).\n\nNo, not a random Travis failure. This rpc unit test is broken:\n\n```\nBOOST_CHECK_THROW(CallRPC(""createrawtransaction [] []""), std::runtime_error);\n```\n(src/test/rpc_tests.cpp, L55)\n\nsince `createrawtransaction` can now take an array as the second argument.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351381708,351381708,
MarcoFalke,2017-12-13T14:32:28Z,I will rebase and fixup all of this when the other createrawtransaction test are merged.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351407918,351407918,
instagibbs,2017-12-13T16:42:38Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351448780,351448780,
promag,2017-12-14T02:25:08Z,"BTW, echoing @laanwj https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-237647103. I understand that here it's a different case though.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351589026,351589026,
MarcoFalke,2017-12-14T04:36:41Z,"@promag Can you elaborate a bit more on that? It is a different case and in fact we do overload already, IIRC for some bool/integer parameters.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351606592,351606592,
promag,2017-12-14T07:36:35Z,Just wanted to link his concern regarding overloading. However here we want to fix a problem which happens to overload the RPC.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-351631578,351631578,
MarcoFalke,2018-01-18T22:09:13Z,"> should the test framework be updated to use this variant?\n\nDepends on the use case and your personal preference. In most cases there is no functional difference.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-358798186,358798186,
promag,2018-01-18T22:13:46Z,"> > should the test framework be updated to use this variant?\n> \n> Depends on the use case and your personal preference. In most cases there is no functional difference.\n\nJust saying, because IMO we should encourage this *variant*. Maybe tag for or add release note.\n\nBTW, I think you can remove the TODO in the description.\n\nutACK fa2e390.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-358799372,358799372,
MarcoFalke,2018-01-18T22:27:04Z,"> add release note\n\nWill do immediately after merge, as I am not sure which branch this will end up on.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-358802637,358802637,
promag,2018-01-18T22:53:46Z,Sorry already had the tag.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-358808983,358808983,
MarcoFalke,2018-02-07T03:42:20Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-363647170,363647170,
MarcoFalke,2018-02-22T23:09:50Z,Added release notes.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-367854498,367854498,
luke-jr,2018-02-26T16:59:09Z,"I don't see the use case... it might make sense for error checking, but this doesn't add a check for duplicate keys either...?",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-368571435,368571435,
MarcoFalke,2018-02-26T17:23:16Z,"@luke-jr The check for duplicate keys is already there. See ""Invalid parameter, duplicated address"" in the functional tests. ",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-368579384,368579384,
MarcoFalke,2018-03-07T18:01:39Z,Force pushed the documentation changes.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-371227361,371227361,
jnewbery,2018-03-07T18:47:55Z,"Tested ACK fa06dfce0f1f8e5e34f416c556590fa56b721788.\n\nI'd still prefer to modify the unit test rather than dropping it, but this is ready for merge.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-371242461,371242461,
promag,2018-03-07T19:06:09Z,"Other than the 1 space indentation nit:\n```\n2. ""outputs""               (array, required) a json array with outputs (key-value pairs)\n   [\n    {\n```\nutACK fa06dfc.",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-371248463,371248463,
conscott,2018-03-11T01:47:31Z,"Tested ACK fa06dfce0f1f8e5e34f416c556590fa56b721788 \n\nJust left small inline comment \n",https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-372082416,372082416,
MarcoFalke,2018-03-11T20:49:42Z,Added a commit to address the documentation nit. This seems ready for merge.,https://github.com/bitcoin/bitcoin/pull/11872#issuecomment-372147928,372147928,
promag,2017-12-12T11:16:09Z,"This will raise `JSON value is not an object as expected` which doesn't match with the new signature. I suggest to switch to `isObject()` above so that `get_array` throws. In that case, it is not necessary to call`get_obj()`:\n```cpp\n... = outputs_is_object ? request.params[1] : request.params[1].get_array();\n```",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r156337084,156337084,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-13T00:31:50Z,"Can you provide code to reproduce that throw, please. When I tested it a day ago in the gui, it didn't throw.",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r156535969,156535969,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-13T20:27:23Z,"@promag Heh, now I see what you mean. Makes sense.",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r156773103,156773103,src/rpc/rawtransaction.cpp
promag,2017-12-13T20:51:29Z,"Cool, I forgot to reply! :)",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r156778932,156778932,src/rpc/rawtransaction.cpp
promag,2018-01-10T13:48:53Z,"Current format: `Invalid parameter, key-value pair ...`.",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r160681112,160681112,src/rpc/rawtransaction.cpp
promag,2018-01-10T13:49:13Z,Validate output is an object.,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r160681209,160681209,src/rpc/rawtransaction.cpp
MarcoFalke,2018-01-10T18:25:21Z,Done. Also added a test for this,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r160759808,160759808,src/rpc/rawtransaction.cpp
promag,2018-01-18T18:02:23Z,Use `RPCTypeCheckArgument` instead?,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162422586,162422586,src/rpc/rawtransaction.cpp
promag,2018-01-18T18:03:46Z,ðŸ‘€ ,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162422950,162422950,test/functional/rawtransactions.py
promag,2018-01-18T18:05:10Z,Move to different commit?,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162423441,162423441,src/rpc/server.cpp
MarcoFalke,2018-01-18T22:06:08Z,Would make the error message less specific,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162483949,162483949,src/rpc/rawtransaction.cpp
MarcoFalke,2018-01-18T22:06:17Z,"Thx, done.",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162483978,162483978,src/rpc/server.cpp
MarcoFalke,2018-01-18T22:07:42Z,"Removing trailing white space should be fine now, since adding trailing white space is forbidden. So we converge to a single ""code style"".",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162484285,162484285,test/functional/rawtransactions.py
promag,2018-01-18T22:14:46Z,Right.,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r162485905,162485905,src/rpc/rawtransaction.cpp
jnewbery,2018-03-06T14:05:29Z,Comment could be updated since this object is now used by `RPCTypeCheck` and `RPCTypeCheckArgument`,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172524959,172524959,src/rpc/server.h
jnewbery,2018-03-06T15:18:49Z,Why not just change from `BOOST_CHECK_THROW()` to `BOOST_CHECK_NO_THROW()` instead of removing entirely? Passing two arrays is now permitted.,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172549722,172549722,src/test/rpc_tests.cpp
jnewbery,2018-03-06T15:34:08Z,Could use simpler language and be more explicit `makes the result of the call deterministic` -> `means the order of transaction outputs can be specified by the client` or similar,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172555288,172555288,doc/release-notes.md
promag,2018-03-06T17:03:29Z,"Nit, the indentation could be fixed.",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172588670,172588670,src/rpc/rawtransaction.cpp
promag,2018-03-06T17:04:57Z,"The alignment too:\n```\n1. ""inputs""                (array, required) A json array of json objects\n     [\n       {\n         ""txid"":""id"",    (string, required) The transaction id\n         ""vout"":n,         (numeric, required) The output number\n         ""sequence"":n      (numeric, optional) The sequence number\n       }\n       ,...\n     ]\n2. ""outputs""               (array, require",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172589138,172589138,src/rpc/rawtransaction.cpp
MarcoFalke,2018-03-07T18:00:30Z,Fixed alignment,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172930872,172930872,src/rpc/rawtransaction.cpp
MarcoFalke,2018-03-07T18:01:09Z,Thx. Moved the check to the functional tests,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172931087,172931087,src/test/rpc_tests.cpp
jnewbery,2018-03-07T18:45:34Z,Why not change to `BOOST_CHECK_NO_THROW()`?,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172944893,172944893,src/test/rpc_tests.cpp
MarcoFalke,2018-03-07T19:01:08Z,"@jnewbery I think we deprecated the existing rpc unit tests in favor of the functional tests which test the rpc interface. If you wanted reasonable coverage, you'd have to duplicate all the rpc unit tests based on the functional rpc tests. So yeah, I am not convinced that the unit tests add additional coverage...",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172949616,172949616,src/test/rpc_tests.cpp
jnewbery,2018-03-07T19:06:19Z,"If you really think the unit tests are deprecated, they should be removed in a separate PR. It doesn't make sense to me to remove just this one case in this PR.\n\nAnyway, as I said - I don't think this should hold up merge. I'm just puzzled that you'd chose a larger diff that reduces test coverage (the fact that this unit test failed in the first iteration of this PR tells me that it was testin",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172951086,172951086,src/test/rpc_tests.cpp
MarcoFalke,2018-03-07T21:03:35Z,Yes. Moving all those tests to the functional test suite makes sense.,https://github.com/bitcoin/bitcoin/pull/11872#discussion_r172983794,172983794,src/test/rpc_tests.cpp
conscott,2018-03-11T01:43:21Z,"Need to add an example for the sorted format? \n\nRight now it only shows examples with the 'backwards compatible"" format",https://github.com/bitcoin/bitcoin/pull/11872#discussion_r173640612,173640612,src/rpc/rawtransaction.cpp
