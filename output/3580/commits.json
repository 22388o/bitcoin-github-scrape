[
  {
    "sha": "b9c3ede02922ab4843c356c0f3df2b1618c73ae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWMzZWRlMDI5MjJhYjQ4NDNjMzU2YzBmM2RmMmIxNjE4YzczYWU1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-01-24T21:16:31Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-01-29T13:31:50Z"
      },
      "message": "Do not DoS-ban nodes that give us invalid blocks with valid proof-of-work\n\nThis relaxes the DoS rules (so cannot cause a network split), so nodes that\nrelay blocks with valid proof-of-work but contain an invalid transaction\nare not banned.\n\nSee issue #3195 for the rationale.",
      "tree": {
        "sha": "0a44eb5c80c44bf52da746b2bb84211a05f37aee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a44eb5c80c44bf52da746b2bb84211a05f37aee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9c3ede02922ab4843c356c0f3df2b1618c73ae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c3ede02922ab4843c356c0f3df2b1618c73ae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c3ede02922ab4843c356c0f3df2b1618c73ae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c3ede02922ab4843c356c0f3df2b1618c73ae5/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aab8fc58c6e6dc6e0a104170bd2aa10dc1af5dea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aab8fc58c6e6dc6e0a104170bd2aa10dc1af5dea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aab8fc58c6e6dc6e0a104170bd2aa10dc1af5dea"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "73792dd6d5e218d783e8d66a296e7745de0631ca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c3ede02922ab4843c356c0f3df2b1618c73ae5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c3ede02922ab4843c356c0f3df2b1618c73ae5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b9c3ede02922ab4843c356c0f3df2b1618c73ae5",
        "patch": "@@ -28,7 +28,7 @@ using namespace std;\n using namespace boost;\n \n #if defined(NDEBUG)\n-# error \"Bitcoin cannot be compiled without assertions.\"\n+# error \"Bitcoin must be compiled with assertions enabled.\"\n #endif\n \n //\n@@ -2323,9 +2323,23 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         return true;\n     }\n \n-    // Store to disk\n-    if (!AcceptBlock(*pblock, state, dbp))\n+    // Use a dummy CValidationState so an invalid transaction in a block with\n+    // valid proof-of-work does not result in the relaying node getting banned.\n+    // We do this so that nodes can, in the future, relay blocks as soon\n+    // as the basic, fast checks in CheckBlock are done and not risk being\n+    // DoS-banned if the more expensive AcceptBlock checks find an invalid\n+    // transaction.\n+    // This is safe because it would be insanely expensive for an attacker\n+    // to try to flood the network with invalid blocks that have valid\n+    // proof-of-work.\n+    CValidationState stateDummy;\n+\n+    // Fully validate and store to disk\n+    if (!AcceptBlock(*pblock, stateDummy, dbp))\n+    {\n+        state.Invalid(false, stateDummy.GetRejectCode(), stateDummy.GetRejectReason());\n         return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n@@ -2343,8 +2357,6 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n                 ss >> block;\n             }\n             block.BuildMerkleTree();\n-            // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan resolution (that is, feeding people an invalid block based on LegitBlockX in order to get anyone relaying LegitBlockX banned)\n-            CValidationState stateDummy;\n             if (AcceptBlock(block, stateDummy))\n                 vWorkQueue.push_back(mi->second->hashBlock);\n             mapOrphanBlocks.erase(mi->second->hashBlock);"
      }
    ]
  }
]