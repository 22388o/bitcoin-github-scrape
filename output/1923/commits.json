[
  {
    "sha": "6f959c4cb340cf66b36170be137b7b59d619b35b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Zjk1OWM0Y2IzNDBjZjY2YjM2MTcwYmUxMzdiN2I1OWQ2MTliMzVi",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-10-12T14:08:47Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-10-31T07:05:27Z"
      },
      "message": "Bitcoin-Qt: use statustips in addition to tooltips\n\n- add setStatusTip() in addition to setTooltip() where it makes sense\n- add only setStatusTip() if GUI element is only used in main- or tray menu\n\n- add an event filter on our BitcoinGUI object to prevent garbelled text\n  on the status bar, which happens when we use it for e.g. displaying\n  block-sync state and then a QEvent::StatusTip wants to write own text to it\n\n- remove a double translation of \"Bitcoin client\"",
      "tree": {
        "sha": "d8dfb0c77f8f0be0124076b066ede8a00f9d5556",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8dfb0c77f8f0be0124076b066ede8a00f9d5556"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f959c4cb340cf66b36170be137b7b59d619b35b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f959c4cb340cf66b36170be137b7b59d619b35b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f959c4cb340cf66b36170be137b7b59d619b35b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f959c4cb340cf66b36170be137b7b59d619b35b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "578fc800039a99f07c0eb9e256519598a1c9dd27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578fc800039a99f07c0eb9e256519598a1c9dd27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/578fc800039a99f07c0eb9e256519598a1c9dd27"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 45,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c09e1ce447ce8a25c24c2f2ce35ff3b18699cb3a",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 15,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f959c4cb340cf66b36170be137b7b59d619b35b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f959c4cb340cf66b36170be137b7b59d619b35b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6f959c4cb340cf66b36170be137b7b59d619b35b",
        "patch": "@@ -176,6 +176,9 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     // Clicking on \"Sign Message\" in the receive coins page sends you to the sign message tab\n     connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));\n \n+    // Install event filter to be able to catch status tip events (QEvent::StatusTip)\n+    this->installEventFilter(this);\n+\n     gotoOverviewPage();\n }\n \n@@ -193,31 +196,36 @@ void BitcoinGUI::createActions()\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n     overviewAction = new QAction(QIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n-    overviewAction->setToolTip(tr(\"Show general overview of wallet\"));\n+    overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n+    overviewAction->setToolTip(overviewAction->statusTip());\n     overviewAction->setCheckable(true);\n     overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n     tabGroup->addAction(overviewAction);\n \n     sendCoinsAction = new QAction(QIcon(\":/icons/send\"), tr(\"&Send coins\"), this);\n-    sendCoinsAction->setToolTip(tr(\"Send coins to a Bitcoin address\"));\n+    sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n+    sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n     sendCoinsAction->setCheckable(true);\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n     receiveCoinsAction = new QAction(QIcon(\":/icons/receiving_addresses\"), tr(\"&Receive coins\"), this);\n-    receiveCoinsAction->setToolTip(tr(\"Show the list of addresses for receiving payments\"));\n+    receiveCoinsAction->setStatusTip(tr(\"Show the list of addresses for receiving payments\"));\n+    receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n     historyAction = new QAction(QIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n-    historyAction->setToolTip(tr(\"Browse transaction history\"));\n+    historyAction->setStatusTip(tr(\"Browse transaction history\"));\n+    historyAction->setToolTip(historyAction->statusTip());\n     historyAction->setCheckable(true);\n     historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));\n     tabGroup->addAction(historyAction);\n \n     addressBookAction = new QAction(QIcon(\":/icons/address-book\"), tr(\"&Address Book\"), this);\n-    addressBookAction->setToolTip(tr(\"Edit the list of stored addresses and labels\"));\n+    addressBookAction->setStatusTip(tr(\"Edit the list of stored addresses and labels\"));\n+    addressBookAction->setToolTip(addressBookAction->statusTip());\n     addressBookAction->setCheckable(true);\n     addressBookAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_5));\n     tabGroup->addAction(addressBookAction);\n@@ -234,33 +242,37 @@ void BitcoinGUI::createActions()\n     connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));\n \n     quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n-    quitAction->setToolTip(tr(\"Quit application\"));\n+    quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n     aboutAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&About Bitcoin\"), this);\n-    aboutAction->setToolTip(tr(\"Show information about Bitcoin\"));\n+    aboutAction->setStatusTip(tr(\"Show information about Bitcoin\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n     aboutQtAction = new QAction(QIcon(\":/trolltech/qmessagebox/images/qtlogo-64.png\"), tr(\"About &Qt\"), this);\n-    aboutQtAction->setToolTip(tr(\"Show information about Qt\"));\n+    aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n     optionsAction = new QAction(QIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n-    optionsAction->setToolTip(tr(\"Modify configuration options for Bitcoin\"));\n+    optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n     toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n-    encryptWalletAction->setToolTip(tr(\"Encrypt or decrypt wallet\"));\n+    encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n     backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n-    backupWalletAction->setToolTip(tr(\"Backup wallet to another location\"));\n+    backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n     changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n-    changePassphraseAction->setToolTip(tr(\"Change the passphrase used for wallet encryption\"));\n+    changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n     signMessageAction = new QAction(QIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n     verifyMessageAction = new QAction(QIcon(\":/icons/transaction_0\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n \n     exportAction = new QAction(QIcon(\":/icons/export\"), tr(\"&Export...\"), this);\n-    exportAction->setToolTip(tr(\"Export the data in the current tab to a file\"));\n+    exportAction->setStatusTip(tr(\"Export the data in the current tab to a file\"));\n+    exportAction->setToolTip(exportAction->statusTip());\n     openRPCConsoleAction = new QAction(QIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n-    openRPCConsoleAction->setToolTip(tr(\"Open debugging and diagnostic console\"));\n+    openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n     connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n@@ -338,7 +350,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n #endif\n             if(trayIcon)\n             {\n-                trayIcon->setToolTip(tr(\"Bitcoin client\") + QString(\" \") + tr(\"[testnet]\"));\n+                // Just attach \" [testnet]\" to the existing tooltip\n+                trayIcon->setToolTip(trayIcon->toolTip() + QString(\" \") + tr(\"[testnet]\"));\n                 trayIcon->setIcon(QIcon(\":/icons/toolbar_testnet\"));\n                 toggleHideAction->setIcon(QIcon(\":/icons/toolbar_testnet\"));\n             }\n@@ -472,6 +485,9 @@ void BitcoinGUI::setNumConnections(int count)\n \n void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n {\n+    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n+    statusBar()->clearMessage();\n+\n     // don't show / hide progress bar and its label if we have no connection to the network\n     if (!clientModel || (clientModel->getNumConnections() == 0 && !clientModel->isImporting()))\n     {\n@@ -750,6 +766,18 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n     event->acceptProposedAction();\n }\n \n+bool BitcoinGUI::eventFilter(QObject *object, QEvent *event)\n+{\n+    // Catch status tip events\n+    if (event->type() == QEvent::StatusTip)\n+    {\n+        // Prevent adding text from setStatusTip(), if we currently use the status bar for displaying other stuff\n+        if (progressBarLabel->isVisible() && progressBar->isVisible())\n+            return true;\n+    }\n+    return QMainWindow::eventFilter(object, event);\n+}\n+\n void BitcoinGUI::handleURI(QString strURI)\n {\n     // URI has to be valid"
      },
      {
        "sha": "a48911ee7fea3637ccb4accbe8939966935f8790",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f959c4cb340cf66b36170be137b7b59d619b35b/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f959c4cb340cf66b36170be137b7b59d619b35b/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=6f959c4cb340cf66b36170be137b7b59d619b35b",
        "patch": "@@ -52,6 +52,7 @@ class BitcoinGUI : public QMainWindow\n     void closeEvent(QCloseEvent *event);\n     void dragEnterEvent(QDragEnterEvent *event);\n     void dropEvent(QDropEvent *event);\n+    bool eventFilter(QObject *object, QEvent *event);\n \n private:\n     ClientModel *clientModel;\n@@ -172,7 +173,7 @@ private slots:\n \n     /** Show window if hidden, unminimize when minimized, rise when obscured or show if hidden and fToggleHidden is true */\n     void showNormalIfMinimized(bool fToggleHidden = false);\n-    /** simply calls showNormalIfMinimized(true) for use in SLOT() macro */\n+    /** Simply calls showNormalIfMinimized(true) for use in SLOT() macro */\n     void toggleHidden();\n };\n "
      }
    ]
  }
]