[
  {
    "sha": "722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjJjZGY5ODhhOGI3NDliM2FhYmY3ZGI4MWEwZDJmZTJmNGM0ZWYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T09:05:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T09:05:51Z"
      },
      "message": "Temporarily add SetNull/IsNull/GetCheapHash to base_uint\n\nEases step-by-step migration to blob.",
      "tree": {
        "sha": "101192a4a9926233717cd7225e239ac454f6665b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/101192a4a9926233717cd7225e239ac454f6665b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c789b761d568badb30e50898d590eb1a9c0b273c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c789b761d568badb30e50898d590eb1a9c0b273c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c789b761d568badb30e50898d590eb1a9c0b273c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a95cd94915db31f3feda070d157f45756fcfa888",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
        "patch": "@@ -283,6 +283,23 @@ class base_uint\n     {\n         s.read((char*)pn, sizeof(pn));\n     }\n+\n+    // Temporary for migration to blob160/256\n+    uint64_t GetCheapHash() const\n+    {\n+        return GetLow64();\n+    }\n+    void SetNull()\n+    {\n+        memset(pn, 0, sizeof(pn));\n+    }\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (pn[i] != 0)\n+                return false;\n+        return true;\n+    }\n };\n \n /** 160-bit unsigned big integer. */"
      }
    ]
  },
  {
    "sha": "fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA2NTMxZWMxYTRhMjNlNmM0NmJmNDNiMWVjZDdhNjU4NmVlN2I1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T08:11:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:11:17Z"
      },
      "message": "Replace direct use of 0 with SetNull and IsNull\n\nReplace x=0 with .SetNull(),\nx==0 with IsNull(), x!=0 with !IsNull().\nReplace uses of uint256(0) with uint256().",
      "tree": {
        "sha": "4b263010f76801252c3cd1ef24ee2fc4695896af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b263010f76801252c3cd1ef24ee2fc4695896af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/722cdf988a8b749b3aabf7db81a0d2fe2f4c4ef2"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "f43c17b2fc075eba3b281bb46e985063336c974c",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -315,7 +315,7 @@ static bool findSighashFlags(int& flags, const string& flagStr)\n uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n {\n     if (!o.count(strKey))\n-        return 0;\n+        return uint256();\n     return ParseHashUV(o[strKey], strKey);\n }\n \n@@ -485,7 +485,7 @@ static void MutateTx(CMutableTransaction& tx, const string& command,\n static void OutputTxJSON(const CTransaction& tx)\n {\n     UniValue entry(UniValue::VOBJ);\n-    TxToUniv(tx, 0, entry);\n+    TxToUniv(tx, uint256(), entry);\n \n     string jsonOutput = entry.write(4);\n     fprintf(stdout, \"%s\\n\", jsonOutput.c_str());"
      },
      {
        "sha": "97f48e28a4e29fd4f92cec2ad8f283be1d8d5784",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -150,14 +150,14 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        nChainWork = 0;\n+        nChainWork = uint256();\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;\n         nSequenceId = 0;\n \n         nVersion       = 0;\n-        hashMerkleRoot = 0;\n+        hashMerkleRoot = uint256();\n         nTime          = 0;\n         nBits          = 0;\n         nNonce         = 0;\n@@ -282,11 +282,11 @@ class CDiskBlockIndex : public CBlockIndex\n     uint256 hashPrev;\n \n     CDiskBlockIndex() {\n-        hashPrev = 0;\n+        hashPrev = uint256();\n     }\n \n     explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {\n-        hashPrev = (pprev ? pprev->GetBlockHash() : 0);\n+        hashPrev = (pprev ? pprev->GetBlockHash() : uint256());\n     }\n \n     ADD_SERIALIZE_METHODS;"
      },
      {
        "sha": "82ca92b52f1f4060b935f8d96b0ce82b1b6a7aaa",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -141,7 +141,7 @@ class CMainParams : public CChainParams {\n         txNew.vout[0].nValue = 50 * COIN;\n         txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n         genesis.vtx.push_back(txNew);\n-        genesis.hashPrevBlock = 0;\n+        genesis.hashPrevBlock.SetNull();\n         genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n         genesis.nVersion = 1;\n         genesis.nTime    = 1231006505;"
      },
      {
        "sha": "d19033887e17d5cce8a25a6204624478511c6041",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -49,14 +49,14 @@ bool CCoins::Spend(const COutPoint &out, CTxInUndo &undo) {\n \n bool CCoins::Spend(int nPos) {\n     CTxInUndo undo;\n-    COutPoint out(0, nPos);\n+    COutPoint out(uint256(), nPos);\n     return Spend(out, undo);\n }\n \n \n bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n-uint256 CCoinsView::GetBestBlock() const { return uint256(0); }\n+uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n@@ -71,7 +71,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {\n@@ -142,7 +142,7 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {\n-    if (hashBlock == uint256(0))\n+    if (hashBlock.IsNull())\n         hashBlock = base->GetBestBlock();\n     return hashBlock;\n }"
      },
      {
        "sha": "b7b1d9a7b038bff2d7298ac997bd62bc19b051c0",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -301,7 +301,7 @@ struct CCoinsStats\n     uint256 hashSerialized;\n     CAmount nTotalAmount;\n \n-    CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n+    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n "
      },
      {
        "sha": "c818f473b4cd8a1d57b4457e1fa9408087666393",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -127,7 +127,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n     }\n     entry.pushKV(\"vout\", vout);\n \n-    if (hashBlock != 0)\n+    if (!hashBlock.IsNull())\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n \n     entry.pushKV(\"hex\", EncodeHexTx(tx)); // the hex-encoded transaction. used the name \"hex\" to be consistent with the verbose output of \"getrawtransaction\"."
      },
      {
        "sha": "7da02d42eb128fe26fae820644ae5981a23b65c2",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -83,7 +83,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n         nonce += test_case;\n         int nSigLen = 72;\n         int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        nonce = 0;\n+        nonce = uint256();\n         if (ret) {\n             vchSig.resize(nSigLen);\n             return true;\n@@ -115,7 +115,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n         uint256 nonce;\n         prng.Generate((unsigned char*)&nonce, 32);\n         int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n-        nonce = 0;\n+        nonce = uint256();\n         if (ret)\n             break;\n     } while(true);"
      },
      {
        "sha": "02d54f2761139883723dc3000fcd692dd927a2c9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -260,7 +260,7 @@ struct CNodeState {\n         nMisbehavior = 0;\n         fShouldBan = false;\n         pindexBestKnownBlock = NULL;\n-        hashLastUnknownBlock = uint256(0);\n+        hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = NULL;\n         fSyncStarted = false;\n         nStallingSince = 0;\n@@ -348,12 +348,12 @@ void ProcessBlockAvailability(NodeId nodeid) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n-    if (state->hashLastUnknownBlock != 0) {\n+    if (!state->hashLastUnknownBlock.IsNull()) {\n         BlockMap::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n         if (itOld != mapBlockIndex.end() && itOld->second->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == NULL || itOld->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n                 state->pindexBestKnownBlock = itOld->second;\n-            state->hashLastUnknownBlock = uint256(0);\n+            state->hashLastUnknownBlock.SetNull();\n         }\n     }\n }\n@@ -1617,7 +1617,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n-    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256(0) : pindex->pprev->GetBlockHash();\n+    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n \n     // Special case for the genesis block, skipping connection of its transactions\n@@ -2737,7 +2737,7 @@ boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char\n \n CBlockIndex * InsertBlockIndex(uint256 hash)\n {\n-    if (hash == 0)\n+    if (hash.IsNull())\n         return NULL;\n \n     // Return existing\n@@ -3269,7 +3269,7 @@ void static ProcessGetData(CNode* pfrom)\n                         vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n                         pfrom->PushMessage(\"inv\", vInv);\n-                        pfrom->hashContinue = 0;\n+                        pfrom->hashContinue.SetNull();\n                     }\n                 }\n             }\n@@ -3502,7 +3502,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // Use deterministic randomness to send to the same nodes for 24 hours\n                     // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n                     static uint256 hashSalt;\n-                    if (hashSalt == 0)\n+                    if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint64_t hashAddr = addr.GetHash();\n                     uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n@@ -3634,7 +3634,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex)\n             pindex = chainActive.Next(pindex);\n         int nLimit = 500;\n-        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             if (pindex->GetBlockHash() == hashStop)\n@@ -3850,7 +3850,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n-            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256(0));\n+            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256());\n         }\n     }\n \n@@ -4348,7 +4348,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 nSyncStarted++;\n                 CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n-                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256(0));\n+                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n \n@@ -4379,7 +4379,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 {\n                     // 1/4 of tx invs blast to all immediately\n                     static uint256 hashSalt;\n-                    if (hashSalt == 0)\n+                    if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint256 hashRand = inv.hash ^ hashSalt;\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));"
      },
      {
        "sha": "cf9b1c00dee35a93d5c3aeddccc9639861ff9aaa",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -76,15 +76,15 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n     if (nBitsUsed >= vBits.size()) {\n         // overflowed the bits array - failure\n         fBad = true;\n-        return 0;\n+        return uint256();\n     }\n     bool fParentOfMatch = vBits[nBitsUsed++];\n     if (height==0 || !fParentOfMatch) {\n         // if at height 0, or nothing interesting below, use stored hash and do not descend\n         if (nHashUsed >= vHash.size()) {\n             // overflowed the hash array - failure\n             fBad = true;\n-            return 0;\n+            return uint256();\n         }\n         const uint256 &hash = vHash[nHashUsed++];\n         if (height==0 && fParentOfMatch) // in case of height 0, we have a matched txid\n@@ -122,16 +122,16 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     vMatch.clear();\n     // An empty set will not work\n     if (nTransactions == 0)\n-        return 0;\n+        return uint256();\n     // check for excessively high numbers of transactions\n     if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n-        return 0;\n+        return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)\n-        return 0;\n+        return uint256();\n     // there must be at least one bit per node in the partial tree, and at least one node per hash\n     if (vBits.size() < vHash.size())\n-        return 0;\n+        return uint256();\n     // calculate height of tree\n     int nHeight = 0;\n     while (CalcTreeWidth(nHeight) > 1)\n@@ -141,12 +141,12 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n     // verify that no problems occured during the tree traversal\n     if (fBad)\n-        return 0;\n+        return uint256();\n     // verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)\n     if ((nBitsUsed+7)/8 != (vBits.size()+7)/8)\n-        return 0;\n+        return uint256();\n     // verify that all hashes were consumed\n     if (nHashUsed != vHash.size())\n-        return 0;\n+        return uint256();\n     return hashMerkleRoot;\n }"
      },
      {
        "sha": "c603050a8c03881a5cff02e2bec2da9102e7f8a2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -1948,7 +1948,7 @@ CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fIn\n     nRefCount = 0;\n     nSendSize = 0;\n     nSendOffset = 0;\n-    hashContinue = 0;\n+    hashContinue = uint256();\n     nStartingHeight = -1;\n     fGetAddr = false;\n     fRelayTxes = false;"
      },
      {
        "sha": "336c8698085091a6b30d9847a05ac159695fe587",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -74,7 +74,7 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     if (fMutated) {\n         *fMutated = mutated;\n     }\n-    return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n+    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n }\n \n std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n@@ -96,7 +96,7 @@ std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n {\n     if (nIndex == -1)\n-        return 0;\n+        return uint256();\n     for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n     {\n         if (nIndex & 1)"
      },
      {
        "sha": "9d5ce467dd704f372dec07981213519a8d0e468d",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -53,8 +53,8 @@ class CBlockHeader\n     void SetNull()\n     {\n         nVersion = CBlockHeader::CURRENT_VERSION;\n-        hashPrevBlock = 0;\n-        hashMerkleRoot = 0;\n+        hashPrevBlock.SetNull();\n+        hashMerkleRoot.SetNull();\n         nTime = 0;\n         nBits = 0;\n         nNonce = 0;"
      },
      {
        "sha": "920cebfb62a8ff1ab7cd1da233d8ba3d77f859f6",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -72,7 +72,7 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-CTransaction::CTransaction() : hash(0), nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n     UpdateHash();"
      },
      {
        "sha": "05edbf1fd52e79e38833b1112cca329d20073c1c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -28,8 +28,8 @@ class COutPoint\n         READWRITE(FLATDATA(*this));\n     }\n \n-    void SetNull() { hash = 0; n = (uint32_t) -1; }\n-    bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n+    void SetNull() { hash.SetNull(); n = (uint32_t) -1; }\n+    bool IsNull() const { return (hash.IsNull() && n == (uint32_t) -1); }\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {"
      },
      {
        "sha": "0d00b3bf972fda6eb70062894b9279ca67eee091",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -96,7 +96,7 @@ void CAddress::Init()\n CInv::CInv()\n {\n     type = 0;\n-    hash = 0;\n+    hash.SetNull();\n }\n \n CInv::CInv(int typeIn, const uint256& hashIn)"
      },
      {
        "sha": "082c525137f1c67f60dbf0bc2b304d5691706250",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -27,7 +27,7 @@\n class CKeyID : public uint160\n {\n public:\n-    CKeyID() : uint160(0) {}\n+    CKeyID() : uint160() {}\n     CKeyID(const uint160& in) : uint160(in) {}\n };\n "
      },
      {
        "sha": "532f67b3c3884b39fb67923abc05fd80eb73e728",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -177,7 +177,7 @@ static bool rest_tx(AcceptedConnection* conn,\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CTransaction tx;\n-    uint256 hashBlock = 0;\n+    uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n         throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n "
      },
      {
        "sha": "b94a8ae613d4849b7e55db404088fe04ec9bf897",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -70,7 +70,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDe\n         if(txDetails)\n         {\n             Object objTx;\n-            TxToJSON(tx, uint256(0), objTx);\n+            TxToJSON(tx, uint256(), objTx);\n             txs.push_back(objTx);\n         }\n         else"
      },
      {
        "sha": "7bca3ca4c701004d15da327a2d0844cde902cf35",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -89,7 +89,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n     entry.push_back(Pair(\"vout\", vout));\n \n-    if (hashBlock != 0) {\n+    if (!hashBlock.IsNull()) {\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n@@ -178,7 +178,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n         fVerbose = (params[1].get_int() != 0);\n \n     CTransaction tx;\n-    uint256 hashBlock = 0;\n+    uint256 hashBlock;\n     if (!GetTransaction(hash, tx, hashBlock, true))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");\n \n@@ -438,7 +438,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     Object result;\n-    TxToJSON(tx, 0, result);\n+    TxToJSON(tx, uint256(), result);\n \n     return result;\n }"
      },
      {
        "sha": "4f3cf13994985abdc09531739cfab749134343fd",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -1477,7 +1477,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     if (params.size() > 0)\n     {\n-        uint256 blockId = 0;\n+        uint256 blockId;\n \n         blockId.SetHex(params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n@@ -1510,7 +1510,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n-    uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : 0;\n+    uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     Object ret;\n     ret.push_back(Pair(\"transactions\", transactions));"
      },
      {
        "sha": "cc93baac7a33e680c67c8e7195d5981af025a71b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -18,7 +18,7 @@ typedef vector<unsigned char> valtype;\n \n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n-CScriptID::CScriptID(const CScript& in) : uint160(in.size() ? Hash160(in.begin(), in.end()) : 0) {}\n+CScriptID::CScriptID(const CScript& in) : uint160(in.size() ? Hash160(in.begin(), in.end()) : uint160()) {}\n \n const char* GetTxnOutputType(txnouttype t)\n {"
      },
      {
        "sha": "f1de99342cacc2bdeea51b6b09618fb31a24a3d0",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -20,7 +20,7 @@ class CScript;\n class CScriptID : public uint160\n {\n public:\n-    CScriptID() : uint160(0) {}\n+    CScriptID() : uint160() {}\n     CScriptID(const CScript& in);\n     CScriptID(const uint160& in) : uint160(in) {}\n };"
      },
      {
        "sha": "3191322838a056bfaaf9edf7d292d4a0d04d47c0",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n         // calculate actual merkle root and height\n         uint256 merkleRoot1 = block.BuildMerkleTree();\n-        std::vector<uint256> vTxid(nTx, 0);\n+        std::vector<uint256> vTxid(nTx, uint256());\n         for (unsigned int j=0; j<nTx; j++)\n             vTxid[j] = block.vtx[j].GetHash();\n         int nHeight = 1, nTx_ = nTx;\n@@ -87,7 +87,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n             // check that it has the same merkle root as the original, and a valid one\n             BOOST_CHECK(merkleRoot1 == merkleRoot2);\n-            BOOST_CHECK(merkleRoot2 != 0);\n+            BOOST_CHECK(!merkleRoot2.IsNull());\n \n             // check that it contains the matched transactions (in the same order!)\n             BOOST_CHECK(vMatchTxid1 == vMatchTxid2);"
      },
      {
        "sha": "05907f7a3673f5ab24f39fce81ff7bf0a4d1135e",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(set)\n BOOST_AUTO_TEST_CASE(is)\n {\n     // Test CScript::IsPayToScriptHash()\n-    uint160 dummy(0);\n+    uint160 dummy;\n     CScript p2sh;\n     p2sh << OP_HASH160 << ToByteVector(dummy) << OP_EQUAL;\n     BOOST_CHECK(p2sh.IsPayToScriptHash());"
      },
      {
        "sha": "9347d489cb6c5086f0063622aa97b3c98c8ea25c",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -32,7 +32,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 0U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 0U);\n \n-    uint160 dummy(0);\n+    uint160 dummy;\n     s1 << OP_1 << ToByteVector(dummy) << ToByteVector(dummy) << OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 2U);\n     s1 << OP_IF << OP_CHECKSIG << OP_ENDIF;"
      },
      {
        "sha": "877a5dc67e681f09822f7f5a41f18df28941d07b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -39,7 +39,7 @@ bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n     if (!db.Read('B', hashBestChain))\n-        return uint256(0);\n+        return uint256();\n     return hashBestChain;\n }\n \n@@ -56,7 +56,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n-    if (hashBlock != uint256(0))\n+    if (!hashBlock.IsNull())\n         BatchWriteHashBestChain(batch, hashBlock);\n \n     LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n@@ -179,7 +179,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256(0));\n+    ssKeySet << make_pair('b', uint256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex"
      },
      {
        "sha": "58e66d5cc263ea4f1c60179337b5db8e22835cd4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -579,7 +579,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n             wtx.nOrderPos = IncOrderPosNext();\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n-            if (wtxIn.hashBlock != 0)\n+            if (!wtxIn.hashBlock.IsNull())\n             {\n                 if (mapBlockIndex.count(wtxIn.hashBlock))\n                 {\n@@ -630,7 +630,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         if (!fInsertedNew)\n         {\n             // Merge\n-            if (wtxIn.hashBlock != 0 && wtxIn.hashBlock != wtx.hashBlock)\n+            if (!wtxIn.hashBlock.IsNull() && wtxIn.hashBlock != wtx.hashBlock)\n             {\n                 wtx.hashBlock = wtxIn.hashBlock;\n                 fUpdated = true;\n@@ -795,7 +795,7 @@ int CWalletTx::GetRequestCount() const\n         if (IsCoinBase())\n         {\n             // Generated block\n-            if (hashBlock != 0)\n+            if (!hashBlock.IsNull())\n             {\n                 map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                 if (mi != pwallet->mapRequestCount.end())\n@@ -811,7 +811,7 @@ int CWalletTx::GetRequestCount() const\n                 nRequests = (*mi).second;\n \n                 // How about the block it's in?\n-                if (nRequests == 0 && hashBlock != 0)\n+                if (nRequests == 0 && !hashBlock.IsNull())\n                 {\n                     map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                     if (mi != pwallet->mapRequestCount.end())\n@@ -2283,7 +2283,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n \n int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n {\n-    if (hashBlock == 0 || nIndex == -1)\n+    if (hashBlock.IsNull() || nIndex == -1)\n         return 0;\n     AssertLockHeld(cs_main);\n "
      },
      {
        "sha": "6c32cd34620753e42f8e7d5eaf769a65fa61360a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -514,7 +514,7 @@ class CMerkleTx : public CTransaction\n \n     void Init()\n     {\n-        hashBlock = 0;\n+        hashBlock = uint256();\n         nIndex = -1;\n         fMerkleVerified = false;\n     }"
      },
      {
        "sha": "406691875f5feac180d09588f949ed6c095d8ba5",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "patch": "@@ -439,7 +439,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             CKey key;\n             CPrivKey pkey;\n-            uint256 hash = 0;\n+            uint256 hash;\n \n             if (strType == \"key\")\n             {\n@@ -464,7 +464,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             bool fSkipCheck = false;\n \n-            if (hash != 0)\n+            if (!hash.IsNull())\n             {\n                 // hash pubkey/privkey to accelerate wallet load\n                 std::vector<unsigned char> vchKey;"
      }
    ]
  },
  {
    "sha": "9e6b7622a450aaf87ed475ba6819df76570f01cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTZiNzYyMmE0NTBhYWY4N2VkNDc1YmE2ODE5ZGY3NjU3MGYwMWNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T08:12:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:12:44Z"
      },
      "message": "Replace GetLow64 with GetCheapHash",
      "tree": {
        "sha": "8c909bb5f74416301301635c3f018ffcfa950341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c909bb5f74416301301635c3f018ffcfa950341"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e6b7622a450aaf87ed475ba6819df76570f01cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e6b7622a450aaf87ed475ba6819df76570f01cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e6b7622a450aaf87ed475ba6819df76570f01cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e6b7622a450aaf87ed475ba6819df76570f01cb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa06531ec1a4a23e6c46bf43b1ecd7a6586ee7b5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1e08ae772ea0b37e75d7c7c6e756ba20d73ebd0b",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e6b7622a450aaf87ed475ba6819df76570f01cb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e6b7622a450aaf87ed475ba6819df76570f01cb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=9e6b7622a450aaf87ed475ba6819df76570f01cb",
        "patch": "@@ -15,12 +15,12 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char>& nKey) const\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n     ss1 << nKey << vchKey;\n-    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetLow64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetCheapHash();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     ss2 << nKey << vchGroupKey << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP);\n-    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetLow64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetCheapHash();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n@@ -30,11 +30,11 @@ int CAddrInfo::GetNewBucket(const std::vector<unsigned char>& nKey, const CNetAd\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n     ss1 << nKey << vchGroupKey << vchSourceGroupKey;\n-    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetLow64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).GetCheapHash();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     ss2 << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP);\n-    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetLow64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).GetCheapHash();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n "
      },
      {
        "sha": "e790f82b73274a29112e81e6e35674088314d2c3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e6b7622a450aaf87ed475ba6819df76570f01cb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e6b7622a450aaf87ed475ba6819df76570f01cb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9e6b7622a450aaf87ed475ba6819df76570f01cb",
        "patch": "@@ -109,7 +109,7 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n struct BlockHasher\n {\n-    size_t operator()(const uint256& hash) const { return hash.GetLow64(); }\n+    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n };\n \n extern CScript COINBASE_FLAGS;"
      }
    ]
  },
  {
    "sha": "354700c19fba7855b48a0dfa177cff658e0df251",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTQ3MDBjMTlmYmE3ODU1YjQ4YTBkZmExNzdjZmY2NThlMGRmMjUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T09:22:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:12:44Z"
      },
      "message": "Add blob256.cpp/h to build",
      "tree": {
        "sha": "5e5fe763668ce5f9c4194a892b4ef903395ea6ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e5fe763668ce5f9c4194a892b4ef903395ea6ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/354700c19fba7855b48a0dfa177cff658e0df251",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/354700c19fba7855b48a0dfa177cff658e0df251",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/354700c19fba7855b48a0dfa177cff658e0df251",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/354700c19fba7855b48a0dfa177cff658e0df251/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e6b7622a450aaf87ed475ba6819df76570f01cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e6b7622a450aaf87ed475ba6819df76570f01cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e6b7622a450aaf87ed475ba6819df76570f01cb"
      }
    ],
    "stats": {
      "total": 324,
      "additions": 316,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8436a17584b329755e126c2576179b22216c45a9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/354700c19fba7855b48a0dfa177cff658e0df251/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/354700c19fba7855b48a0dfa177cff658e0df251/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=354700c19fba7855b48a0dfa177cff658e0df251",
        "patch": "@@ -75,6 +75,7 @@ BITCOIN_CORE_H = \\\n   allocators.h \\\n   amount.h \\\n   base58.h \\\n+  blob256.h \\\n   bloom.h \\\n   chain.h \\\n   chainparams.h \\\n@@ -261,18 +262,19 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n-  compat/strnlen.cpp \\\n-  compat/glibc_sanity.cpp \\\n-  compat/glibcxx_sanity.cpp \\\n+  blob256.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n+  compat/glibc_sanity.cpp \\\n+  compat/glibcxx_sanity.cpp \\\n+  compat/strnlen.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n   sync.cpp \\\n   uint256.cpp \\\n   util.cpp \\\n-  utilstrencodings.cpp \\\n   utilmoneystr.cpp \\\n+  utilstrencodings.cpp \\\n   utiltime.cpp \\\n   $(BITCOIN_CORE_H)\n \n@@ -352,19 +354,20 @@ bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n-  primitives/transaction.cpp \\\n+  blob256.cpp \\\n   crypto/hmac_sha512.cpp \\\n+  crypto/ripemd160.cpp \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n-  crypto/ripemd160.cpp \\\n   eccryptoverify.cpp \\\n   ecwrapper.cpp \\\n   hash.cpp \\\n+  primitives/transaction.cpp \\\n   pubkey.cpp \\\n-  script/script.cpp \\\n-  script/interpreter.cpp \\\n   script/bitcoinconsensus.cpp \\\n+  script/interpreter.cpp \\\n+  script/script.cpp \\\n   uint256.cpp \\\n   utilstrencodings.cpp\n "
      },
      {
        "sha": "925e8c05b0f84cc62bd16047c85437fd0b3567ec",
        "filename": "src/blob256.cpp",
        "status": "added",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/354700c19fba7855b48a0dfa177cff658e0df251/src/blob256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/354700c19fba7855b48a0dfa177cff658e0df251/src/blob256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blob256.cpp?ref=354700c19fba7855b48a0dfa177cff658e0df251",
        "patch": "@@ -0,0 +1,153 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blob256.h\"\n+\n+#include \"utilstrencodings.h\"\n+\n+#include <stdio.h>\n+#include <string.h>\n+\n+template <unsigned int BITS>\n+base_blob<BITS>::base_blob(const std::string& str)\n+{\n+    SetHex(str);\n+}\n+\n+template <unsigned int BITS>\n+base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n+{\n+    assert(vch.size() == sizeof(data));\n+    memcpy(data, &vch[0], sizeof(data));\n+}\n+\n+template <unsigned int BITS>\n+std::string base_blob<BITS>::GetHex() const\n+{\n+    char psz[sizeof(data) * 2 + 1];\n+    for (unsigned int i = 0; i < sizeof(data); i++)\n+        sprintf(psz + i * 2, \"%02x\", data[sizeof(data) - i - 1]);\n+    return std::string(psz, psz + sizeof(data) * 2);\n+}\n+\n+template <unsigned int BITS>\n+void base_blob<BITS>::SetHex(const char* psz)\n+{\n+    memset(data, 0, sizeof(data));\n+\n+    // skip leading spaces\n+    while (isspace(*psz))\n+        psz++;\n+\n+    // skip 0x\n+    if (psz[0] == '0' && tolower(psz[1]) == 'x')\n+        psz += 2;\n+\n+    // hex string to uint\n+    const char* pbegin = psz;\n+    while (::HexDigit(*psz) != -1)\n+        psz++;\n+    psz--;\n+    unsigned char* p1 = (unsigned char*)data;\n+    unsigned char* pend = p1 + WIDTH * 4;\n+    while (psz >= pbegin && p1 < pend) {\n+        *p1 = ::HexDigit(*psz--);\n+        if (psz >= pbegin) {\n+            *p1 |= ((unsigned char)::HexDigit(*psz--) << 4);\n+            p1++;\n+        }\n+    }\n+}\n+\n+template <unsigned int BITS>\n+void base_blob<BITS>::SetHex(const std::string& str)\n+{\n+    SetHex(str.c_str());\n+}\n+\n+template <unsigned int BITS>\n+std::string base_blob<BITS>::ToString() const\n+{\n+    return (GetHex());\n+}\n+\n+// Explicit instantiations for base_blob<160>\n+template base_blob<160>::base_blob(const std::string&);\n+template base_blob<160>::base_blob(const std::vector<unsigned char>&);\n+template std::string base_blob<160>::GetHex() const;\n+template std::string base_blob<160>::ToString() const;\n+template void base_blob<160>::SetHex(const char*);\n+template void base_blob<160>::SetHex(const std::string&);\n+\n+// Explicit instantiations for base_blob<256>\n+template base_blob<256>::base_blob(const std::string&);\n+template base_blob<256>::base_blob(const std::vector<unsigned char>&);\n+template std::string base_blob<256>::GetHex() const;\n+template std::string base_blob<256>::ToString() const;\n+template void base_blob<256>::SetHex(const char*);\n+template void base_blob<256>::SetHex(const std::string&);\n+\n+static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n+{\n+    // Taken from lookup3, by Bob Jenkins.\n+    a -= c;\n+    a ^= ((c << 4) | (c >> 28));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 6) | (a >> 26));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 8) | (b >> 24));\n+    b += a;\n+    a -= c;\n+    a ^= ((c << 16) | (c >> 16));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 19) | (a >> 13));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 4) | (b >> 28));\n+    b += a;\n+}\n+\n+static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n+{\n+    // Taken from lookup3, by Bob Jenkins.\n+    c ^= b;\n+    c -= ((b << 14) | (b >> 18));\n+    a ^= c;\n+    a -= ((c << 11) | (c >> 21));\n+    b ^= a;\n+    b -= ((a << 25) | (a >> 7));\n+    c ^= b;\n+    c -= ((b << 16) | (b >> 16));\n+    a ^= c;\n+    a -= ((c << 4) | (c >> 28));\n+    b ^= a;\n+    b -= ((a << 14) | (a >> 18));\n+    c ^= b;\n+    c -= ((b << 24) | (b >> 8));\n+}\n+\n+uint64_t blob256::GetHash(const blob256& salt) const\n+{\n+    uint32_t a, b, c;\n+    const uint32_t *pn = (const uint32_t*)data;\n+    const uint32_t *salt_pn = (const uint32_t*)salt.data;\n+    a = b = c = 0xdeadbeef + (WIDTH << 2);\n+\n+    a += pn[0] ^ salt_pn[0];\n+    b += pn[1] ^ salt_pn[1];\n+    c += pn[2] ^ salt_pn[2];\n+    HashMix(a, b, c);\n+    a += pn[3] ^ salt_pn[3];\n+    b += pn[4] ^ salt_pn[4];\n+    c += pn[5] ^ salt_pn[5];\n+    HashMix(a, b, c);\n+    a += pn[6] ^ salt_pn[6];\n+    b += pn[7] ^ salt_pn[7];\n+    HashFinal(a, b, c);\n+\n+    return ((((uint64_t)b) << 32) | c);\n+}"
      },
      {
        "sha": "7c0e355e6a2cf9a9e39cca10546be43c1df0caa3",
        "filename": "src/blob256.h",
        "status": "added",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/354700c19fba7855b48a0dfa177cff658e0df251/src/blob256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/354700c19fba7855b48a0dfa177cff658e0df251/src/blob256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blob256.h?ref=354700c19fba7855b48a0dfa177cff658e0df251",
        "patch": "@@ -0,0 +1,152 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::string& str);\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            if (a.data[i] < b.data[i])\n+                return true;\n+            else if (a.data[i] > b.data[i])\n+                return false;\n+        }\n+        return false;\n+    }\n+\n+    std::string GetHex() const;\n+    void SetHex(const char* psz);\n+    void SetHex(const std::string& str);\n+    std::string ToString() const;\n+\n+    unsigned char* begin()\n+    {\n+        return &data[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return &data[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    unsigned int size() const\n+    {\n+        return sizeof(data);\n+    }\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return sizeof(data);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        s.write((char*)data, sizeof(data));\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        s.read((char*)data, sizeof(data));\n+    }\n+\n+    /** A cheap hash function that just returns 64 bits from the result, it can be\n+     * used when the contents are considered uniformly random. It is not appropriate\n+     * when the value can easily be influenced from outside as e.g. a network adversary could\n+     * provide values to trigger worst-case behavior.\n+     * @note The result of this function is not stable between little and big endian.\n+     */\n+    uint64_t GetCheapHash() const\n+    {\n+        uint64_t result;\n+        memcpy((void*)&result, (void*)data, 8);\n+        return result;\n+    }\n+};\n+\n+/** 160-bit opaque blob. */\n+class blob160 : public base_blob<160> {\n+public:\n+    blob160() {}\n+    blob160(const base_blob<160>& b) : base_blob<160>(b) {}\n+    explicit blob160(const std::string& str) : base_blob<160>(str) {}\n+    explicit blob160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n+};\n+\n+/** 256-bit opaque blob. */\n+class blob256 : public base_blob<256> {\n+public:\n+    blob256() {}\n+    blob256(const base_blob<256>& b) : base_blob<256>(b) {}\n+    explicit blob256(const std::string& str) : base_blob<256>(str) {}\n+    explicit blob256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n+\n+    /** A more secure, salted hash function.\n+     * @note This hash is not stable between little and big endian.\n+     */\n+    uint64_t GetHash(const blob256& salt) const;\n+};\n+\n+#endif // BITCOIN_BLOB256_H"
      }
    ]
  },
  {
    "sha": "ee72dde317fcc15ae7e412ade054dd6041b20809",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTcyZGRlMzE3ZmNjMTVhZTdlNDEyYWRlMDU0ZGQ2MDQxYjIwODA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T09:46:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:34:14Z"
      },
      "message": "Add UintToBlob256 and BlobToUint256\n\nConvert between blobs and uints, mostly for proof of work checks.",
      "tree": {
        "sha": "a24bb85202fba5ca2ff4d1e463c09fa3d127dcdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a24bb85202fba5ca2ff4d1e463c09fa3d127dcdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee72dde317fcc15ae7e412ade054dd6041b20809",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee72dde317fcc15ae7e412ade054dd6041b20809",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee72dde317fcc15ae7e412ade054dd6041b20809",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee72dde317fcc15ae7e412ade054dd6041b20809/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "354700c19fba7855b48a0dfa177cff658e0df251",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/354700c19fba7855b48a0dfa177cff658e0df251",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/354700c19fba7855b48a0dfa177cff658e0df251"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "490074b67aaf1b0b0817ed5622226c0d3935584c",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee72dde317fcc15ae7e412ade054dd6041b20809/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee72dde317fcc15ae7e412ade054dd6041b20809/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=ee72dde317fcc15ae7e412ade054dd6041b20809",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"uint256.h\"\n \n+#include \"blob256.h\" // TODO for BlobToUint256 and UintToBlob256\n #include \"utilstrencodings.h\"\n \n #include <stdio.h>\n@@ -355,3 +356,18 @@ uint64_t uint256::GetHash(const uint256& salt) const\n \n     return ((((uint64_t)b) << 32) | c);\n }\n+\n+blob256 UintToBlob256(const uint256 &a)\n+{\n+    blob256 b;\n+    // TODO: needs bswap32 on big-endian\n+    std::copy(a.begin(), a.end(), b.begin());\n+    return b;\n+}\n+uint256 BlobToUint256(const blob256 &a)\n+{\n+    uint256 b;\n+    // TODO: needs bswap32 on big-endian\n+    std::copy(a.begin(), a.end(), b.begin());\n+    return b;\n+}"
      },
      {
        "sha": "318196f547a5cf384143e4dae245d1dc2920e72b",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee72dde317fcc15ae7e412ade054dd6041b20809/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee72dde317fcc15ae7e412ade054dd6041b20809/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=ee72dde317fcc15ae7e412ade054dd6041b20809",
        "patch": "@@ -347,4 +347,8 @@ class uint256 : public base_uint<256> {\n     uint64_t GetHash(const uint256& salt) const;\n };\n \n+/// TODO move these\n+blob256 UintToBlob256(const uint256 &);\n+uint256 BlobToUint256(const blob256 &);\n+\n #endif // BITCOIN_UINT256_H"
      }
    ]
  },
  {
    "sha": "9b8432822d7da8617f449e0aeac7efb4acf6d819",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjg0MzI4MjJkN2RhODYxN2Y0NDllMGFlYWM3ZWZiNGFjZjZkODE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T08:17:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:34:14Z"
      },
      "message": "Replace uint256(1) with static constant\n\nSignatureHash and its test function SignatureHashOld\nreturn uint256(1) as a special error signaling value.\nReturn a local static constant with the same value instead.",
      "tree": {
        "sha": "4e932de4e2a38c2e8cb1d5315084c4b31c54ac8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e932de4e2a38c2e8cb1d5315084c4b31c54ac8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b8432822d7da8617f449e0aeac7efb4acf6d819",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8432822d7da8617f449e0aeac7efb4acf6d819",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8432822d7da8617f449e0aeac7efb4acf6d819",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8432822d7da8617f449e0aeac7efb4acf6d819/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee72dde317fcc15ae7e412ade054dd6041b20809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee72dde317fcc15ae7e412ade054dd6041b20809",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee72dde317fcc15ae7e412ade054dd6041b20809"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "289fe038e1aef0fe154beb28261a8877cd83a44f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b8432822d7da8617f449e0aeac7efb4acf6d819/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b8432822d7da8617f449e0aeac7efb4acf6d819/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=9b8432822d7da8617f449e0aeac7efb4acf6d819",
        "patch": "@@ -1030,16 +1030,17 @@ class CTransactionSignatureSerializer {\n \n uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n+    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n-        return 1;\n+        return one;\n     }\n \n     // Check for invalid use of SIGHASH_SINGLE\n     if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n         if (nIn >= txTo.vout.size()) {\n             //  nOut out of range\n-            return 1;\n+            return one;\n         }\n     }\n "
      },
      {
        "sha": "313e4c2bd4d528ea598b5f697f449e21e1f4714a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b8432822d7da8617f449e0aeac7efb4acf6d819/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b8432822d7da8617f449e0aeac7efb4acf6d819/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=9b8432822d7da8617f449e0aeac7efb4acf6d819",
        "patch": "@@ -24,10 +24,11 @@ extern Array read_json(const std::string& jsondata);\n // Old script.cpp SignatureHash function\n uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n+    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n     if (nIn >= txTo.vin.size())\n     {\n         printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n-        return 1;\n+        return one;\n     }\n     CMutableTransaction txTmp(txTo);\n \n@@ -58,7 +59,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         if (nOut >= txTmp.vout.size())\n         {\n             printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n-            return 1;\n+            return one;\n         }\n         txTmp.vout.resize(nOut+1);\n         for (unsigned int i = 0; i < nOut; i++)"
      }
    ]
  },
  {
    "sha": "1369788889665ac2c670a68349f16ce00fa4597d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzY5Nzg4ODg5NjY1YWMyYzY3MGE2ODM0OWYxNmNlMDBmYTQ1OTdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T10:36:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:40:37Z"
      },
      "message": "protect base_uint begin() and end()\n\nClients outside the class have no business poking at the internals.",
      "tree": {
        "sha": "dc1ea1196e92a67ca616f1e3c35367048112ca2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc1ea1196e92a67ca616f1e3c35367048112ca2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1369788889665ac2c670a68349f16ce00fa4597d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369788889665ac2c670a68349f16ce00fa4597d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1369788889665ac2c670a68349f16ce00fa4597d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369788889665ac2c670a68349f16ce00fa4597d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b8432822d7da8617f449e0aeac7efb4acf6d819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8432822d7da8617f449e0aeac7efb4acf6d819",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8432822d7da8617f449e0aeac7efb4acf6d819"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 25,
      "deletions": 41
    },
    "files": [
      {
        "sha": "9d1e59a162ed876f725dcdba5a024e44a0406d8d",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369788889665ac2c670a68349f16ce00fa4597d/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369788889665ac2c670a68349f16ce00fa4597d/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=1369788889665ac2c670a68349f16ce00fa4597d",
        "patch": "@@ -571,20 +571,10 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     TmpL.SetHex(HalfL.ToString()); BOOST_CHECK(TmpL == HalfL);\n \n     TmpL.SetHex(R1L.ToString());\n-    BOOST_CHECK(memcmp(R1L.begin(), R1Array, 32)==0);\n-    BOOST_CHECK(memcmp(TmpL.begin(), R1Array, 32)==0);\n-    BOOST_CHECK(memcmp(R2L.begin(), R2Array, 32)==0);\n-    BOOST_CHECK(memcmp(ZeroL.begin(), ZeroArray, 32)==0);\n-    BOOST_CHECK(memcmp(OneL.begin(), OneArray, 32)==0);\n     BOOST_CHECK(R1L.size() == 32);\n     BOOST_CHECK(R2L.size() == 32);\n     BOOST_CHECK(ZeroL.size() == 32);\n     BOOST_CHECK(MaxL.size() == 32);\n-    BOOST_CHECK(R1L.begin() + 32 == R1L.end());\n-    BOOST_CHECK(R2L.begin() + 32 == R2L.end());\n-    BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n-    BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n-    BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n     BOOST_CHECK(R1L.GetLow64()  == R1LLow64);\n     BOOST_CHECK(HalfL.GetLow64() ==0x0000000000000000ULL);\n     BOOST_CHECK(OneL.GetLow64() ==0x0000000000000001ULL);\n@@ -619,21 +609,10 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     TmpS.SetHex(HalfS.ToString()); BOOST_CHECK(TmpS == HalfS);\n \n     TmpS.SetHex(R1S.ToString());\n-    BOOST_CHECK(memcmp(R1S.begin(), R1Array, 20)==0);\n-    BOOST_CHECK(memcmp(TmpS.begin(), R1Array, 20)==0);\n-    BOOST_CHECK(memcmp(R2S.begin(), R2Array, 20)==0);\n-    BOOST_CHECK(memcmp(ZeroS.begin(), ZeroArray, 20)==0);\n-    BOOST_CHECK(memcmp(OneS.begin(), OneArray, 20)==0);\n     BOOST_CHECK(R1S.size() == 20);\n     BOOST_CHECK(R2S.size() == 20);\n     BOOST_CHECK(ZeroS.size() == 20);\n     BOOST_CHECK(MaxS.size() == 20);\n-    BOOST_CHECK(R1S.begin() + 20 == R1S.end());\n-    BOOST_CHECK(R2S.begin() + 20 == R2S.end());\n-    BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n-    BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n-    BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n-    BOOST_CHECK(R1S.GetLow64()  == R1LLow64);\n     BOOST_CHECK(HalfS.GetLow64() ==0x0000000000000000ULL); \n     BOOST_CHECK(OneS.GetLow64() ==0x0000000000000001ULL);\n     BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);"
      },
      {
        "sha": "01661bbbb6ff3c447e60bcd01c2592ff7e145643",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 25,
        "deletions": 20,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369788889665ac2c670a68349f16ce00fa4597d/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369788889665ac2c670a68349f16ce00fa4597d/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=1369788889665ac2c670a68349f16ce00fa4597d",
        "patch": "@@ -13,6 +13,9 @@\n #include <string>\n #include <vector>\n \n+/// TODO move these\n+class blob256;\n+\n class uint_error : public std::runtime_error {\n public:\n     explicit uint_error(const std::string& str) : std::runtime_error(str) {}\n@@ -25,6 +28,26 @@ class base_uint\n protected:\n     enum { WIDTH=BITS/32 };\n     uint32_t pn[WIDTH];\n+\n+    unsigned char* begin()\n+    {\n+        return (unsigned char*)&pn[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return (unsigned char*)&pn[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return (unsigned char*)&pn[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return (unsigned char*)&pn[WIDTH];\n+    }\n public:\n \n     base_uint()\n@@ -230,26 +253,6 @@ class base_uint\n     void SetHex(const std::string& str);\n     std::string ToString() const;\n \n-    unsigned char* begin()\n-    {\n-        return (unsigned char*)&pn[0];\n-    }\n-\n-    unsigned char* end()\n-    {\n-        return (unsigned char*)&pn[WIDTH];\n-    }\n-\n-    const unsigned char* begin() const\n-    {\n-        return (unsigned char*)&pn[0];\n-    }\n-\n-    const unsigned char* end() const\n-    {\n-        return (unsigned char*)&pn[WIDTH];\n-    }\n-\n     unsigned int size() const\n     {\n         return sizeof(pn);\n@@ -345,6 +348,8 @@ class uint256 : public base_uint<256> {\n     uint32_t GetCompact(bool fNegative = false) const;\n \n     uint64_t GetHash(const uint256& salt) const;\n+    friend uint256 BlobToUint256(const blob256 &);\n+    friend blob256 UintToBlob256(const uint256 &);\n };\n \n /// TODO move these"
      }
    ]
  },
  {
    "sha": "4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDA4YjdhNjgzZTI5NGZhMGE1ZWQzNTgxY2I0YzIxNWI3ZTg2YTUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T11:24:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:40:37Z"
      },
      "message": "blob256: make initialization from string explicit\n\nAvoid dangerous cases where 0 is interpreted as std::string(0).\nKeyword `explicit` does not help here.",
      "tree": {
        "sha": "cf7f1ee39f7a5378c8a175d44e94a721ebda5d64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf7f1ee39f7a5378c8a175d44e94a721ebda5d64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4008b7a683e294fa0a5ed3581cb4c215b7e86a53/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1369788889665ac2c670a68349f16ce00fa4597d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369788889665ac2c670a68349f16ce00fa4597d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1369788889665ac2c670a68349f16ce00fa4597d"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d36ad4c05fa35ce79e98efe056380a439d93775b",
        "filename": "src/blob256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4008b7a683e294fa0a5ed3581cb4c215b7e86a53/src/blob256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4008b7a683e294fa0a5ed3581cb4c215b7e86a53/src/blob256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blob256.cpp?ref=4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
        "patch": "@@ -9,12 +9,6 @@\n #include <stdio.h>\n #include <string.h>\n \n-template <unsigned int BITS>\n-base_blob<BITS>::base_blob(const std::string& str)\n-{\n-    SetHex(str);\n-}\n-\n template <unsigned int BITS>\n base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n {\n@@ -73,15 +67,13 @@ std::string base_blob<BITS>::ToString() const\n }\n \n // Explicit instantiations for base_blob<160>\n-template base_blob<160>::base_blob(const std::string&);\n template base_blob<160>::base_blob(const std::vector<unsigned char>&);\n template std::string base_blob<160>::GetHex() const;\n template std::string base_blob<160>::ToString() const;\n template void base_blob<160>::SetHex(const char*);\n template void base_blob<160>::SetHex(const std::string&);\n \n // Explicit instantiations for base_blob<256>\n-template base_blob<256>::base_blob(const std::string&);\n template base_blob<256>::base_blob(const std::vector<unsigned char>&);\n template std::string base_blob<256>::GetHex() const;\n template std::string base_blob<256>::ToString() const;"
      },
      {
        "sha": "fbd03d19b6aa98aced237409dd478d3623a0e00d",
        "filename": "src/blob256.h",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4008b7a683e294fa0a5ed3581cb4c215b7e86a53/src/blob256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4008b7a683e294fa0a5ed3581cb4c215b7e86a53/src/blob256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blob256.h?ref=4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
        "patch": "@@ -38,7 +38,6 @@ class base_blob\n             data[i] = b.data[i];\n         return *this;\n     }\n-    explicit base_blob(const std::string& str);\n     explicit base_blob(const std::vector<unsigned char>& vch);\n \n     bool IsNull() const\n@@ -131,7 +130,6 @@ class blob160 : public base_blob<160> {\n public:\n     blob160() {}\n     blob160(const base_blob<160>& b) : base_blob<160>(b) {}\n-    explicit blob160(const std::string& str) : base_blob<160>(str) {}\n     explicit blob160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n };\n \n@@ -140,7 +138,6 @@ class blob256 : public base_blob<256> {\n public:\n     blob256() {}\n     blob256(const base_blob<256>& b) : base_blob<256>(b) {}\n-    explicit blob256(const std::string& str) : base_blob<256>(str) {}\n     explicit blob256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n \n     /** A more secure, salted hash function.\n@@ -149,4 +146,25 @@ class blob256 : public base_blob<256> {\n     uint64_t GetHash(const blob256& salt) const;\n };\n \n+/* blob256 from const char *.\n+ * This is a separate function because the constructor blob256(const char*) can result\n+ * in dangerously catching blob256(0).\n+ */\n+inline blob256 blob256S(const char *str)\n+{\n+    blob256 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+/* blob256 from std::string.\n+ * This is a separate function because the constructor blob256(const std::string &str) can result\n+ * in dangerously catching blob256(0) via std::string(const char*).\n+ */\n+inline blob256 blob256S(const std::string& str)\n+{\n+    blob256 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+\n #endif // BITCOIN_BLOB256_H"
      }
    ]
  },
  {
    "sha": "d9569ed027298286e2e92f0a466ebe7e06fd0553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTU2OWVkMDI3Mjk4Mjg2ZTJlOTJmMGE0NjZlYmU3ZTA2ZmQwNTUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:02:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:40:38Z"
      },
      "message": "A: pure renames uintXXX to blobXXX",
      "tree": {
        "sha": "8dfd9c5c0dd0721e8c37cada56a6994a1ea193c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dfd9c5c0dd0721e8c37cada56a6994a1ea193c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9569ed027298286e2e92f0a466ebe7e06fd0553",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9569ed027298286e2e92f0a466ebe7e06fd0553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9569ed027298286e2e92f0a466ebe7e06fd0553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9569ed027298286e2e92f0a466ebe7e06fd0553/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4008b7a683e294fa0a5ed3581cb4c215b7e86a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4008b7a683e294fa0a5ed3581cb4c215b7e86a53"
      }
    ],
    "stats": {
      "total": 1244,
      "additions": 622,
      "deletions": 622
    },
    "files": [
      {
        "sha": "00bae16b921439a323998a749764dba960e811ce",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -24,7 +24,7 @@\n \n using namespace std;\n \n-map<uint256, CAlert> mapAlerts;\n+map<blob256, CAlert> mapAlerts;\n CCriticalSection cs_mapAlerts;\n \n void CUnsignedAlert::SetNull()\n@@ -94,7 +94,7 @@ bool CAlert::IsNull() const\n     return (nExpiration == 0);\n }\n \n-uint256 CAlert::GetHash() const\n+blob256 CAlert::GetHash() const\n {\n     return Hash(this->vchMsg.begin(), this->vchMsg.end());\n }\n@@ -157,12 +157,12 @@ bool CAlert::CheckSignature() const\n     return true;\n }\n \n-CAlert CAlert::getAlertByHash(const uint256 &hash)\n+CAlert CAlert::getAlertByHash(const blob256 &hash)\n {\n     CAlert retval;\n     {\n         LOCK(cs_mapAlerts);\n-        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n+        map<blob256, CAlert>::iterator mi = mapAlerts.find(hash);\n         if(mi != mapAlerts.end())\n             retval = mi->second;\n     }\n@@ -201,7 +201,7 @@ bool CAlert::ProcessAlert(bool fThread)\n     {\n         LOCK(cs_mapAlerts);\n         // Cancel previous alerts\n-        for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n+        for (map<blob256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n         {\n             const CAlert& alert = (*mi).second;\n             if (Cancels(alert))\n@@ -221,7 +221,7 @@ bool CAlert::ProcessAlert(bool fThread)\n         }\n \n         // Check if this alert has been cancelled\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        BOOST_FOREACH(PAIRTYPE(const blob256, CAlert)& item, mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.Cancels(*this))"
      },
      {
        "sha": "4c1c2301b2e5e949eedcadb4b8ec6f0c2e9ad26d",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -16,9 +16,9 @@\n \n class CAlert;\n class CNode;\n-class uint256;\n+class blob256;\n \n-extern std::map<uint256, CAlert> mapAlerts;\n+extern std::map<blob256, CAlert> mapAlerts;\n extern CCriticalSection cs_mapAlerts;\n \n /** Alerts are for notifying old versions if they become too obsolete and\n@@ -94,7 +94,7 @@ class CAlert : public CUnsignedAlert\n \n     void SetNull();\n     bool IsNull() const;\n-    uint256 GetHash() const;\n+    blob256 GetHash() const;\n     bool IsInEffect() const;\n     bool Cancels(const CAlert& alert) const;\n     bool AppliesTo(int nVersion, std::string strSubVerIn) const;\n@@ -107,7 +107,7 @@ class CAlert : public CUnsignedAlert\n     /*\n      * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n      */\n-    static CAlert getAlertByHash(const uint256 &hash);\n+    static CAlert getAlertByHash(const blob256 &hash);\n };\n \n #endif // BITCOIN_ALERT_H"
      },
      {
        "sha": "4f4b314e784d1cf60d7b860acb00dbc9069b27f2",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -5,7 +5,7 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <assert.h>\n #include <stdint.h>\n@@ -113,7 +113,7 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n {\n     // add 4-byte hash check to the end\n     std::vector<unsigned char> vch(vchIn);\n-    uint256 hash = Hash(vch.begin(), vch.end());\n+    blob256 hash = Hash(vch.begin(), vch.end());\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n     return EncodeBase58(vch);\n }\n@@ -126,7 +126,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n         return false;\n     }\n     // re-calculate the checksum, insure it matches the included 4-byte checksum\n-    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n+    blob256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n     if (memcmp(&hash, &vchRet.end()[-4], 4) != 0) {\n         vchRet.clear();\n         return false;\n@@ -252,7 +252,7 @@ CTxDestination CBitcoinAddress::Get() const\n {\n     if (!IsValid())\n         return CNoDestination();\n-    uint160 id;\n+    blob160 id;\n     memcpy(&id, &vchData[0], 20);\n     if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return CKeyID(id);\n@@ -266,7 +266,7 @@ bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n {\n     if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return false;\n-    uint160 id;\n+    blob160 id;\n     memcpy(&id, &vchData[0], 20);\n     keyID = CKeyID(id);\n     return true;"
      },
      {
        "sha": "8f267d14377fd7d0f753b3242a7d2c0dc6769b83",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -312,10 +312,10 @@ static bool findSighashFlags(int& flags, const string& flagStr)\n     return false;\n }\n \n-uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n+blob256 ParseHashUO(map<string,UniValue>& o, string strKey)\n {\n     if (!o.count(strKey))\n-        return uint256();\n+        return blob256();\n     return ParseHashUV(o[strKey], strKey);\n }\n \n@@ -379,7 +379,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             if (!prevOut.checkObject(types))\n                 throw runtime_error(\"prevtxs internal object typecheck fail\");\n \n-            uint256 txid = ParseHashUV(prevOut, \"txid\");\n+            blob256 txid = ParseHashUV(prevOut, \"txid\");\n \n             int nOut = atoi(prevOut[\"vout\"].getValStr());\n             if (nOut < 0)\n@@ -485,7 +485,7 @@ static void MutateTx(CMutableTransaction& tx, const string& command,\n static void OutputTxJSON(const CTransaction& tx)\n {\n     UniValue entry(UniValue::VOBJ);\n-    TxToUniv(tx, uint256(), entry);\n+    TxToUniv(tx, blob256(), entry);\n \n     string jsonOutput = entry.write(4);\n     fprintf(stdout, \"%s\\n\", jsonOutput.c_str());"
      },
      {
        "sha": "7aff991f45bc3c9b65e73c1433d8fb2e1f5b61cd",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -67,7 +67,7 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n     insert(data);\n }\n \n-void CBloomFilter::insert(const uint256& hash)\n+void CBloomFilter::insert(const blob256& hash)\n {\n     vector<unsigned char> data(hash.begin(), hash.end());\n     insert(data);\n@@ -97,7 +97,7 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n     return contains(data);\n }\n \n-bool CBloomFilter::contains(const uint256& hash) const\n+bool CBloomFilter::contains(const blob256& hash) const\n {\n     vector<unsigned char> data(hash.begin(), hash.end());\n     return contains(data);\n@@ -124,7 +124,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n         return true;\n     if (isEmpty)\n         return false;\n-    const uint256& hash = tx.GetHash();\n+    const blob256& hash = tx.GetHash();\n     if (contains(hash))\n         fFound = true;\n "
      },
      {
        "sha": "360f7eb0251b9a8b1ebc5bdba44d9e01b4ba2453",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -11,7 +11,7 @@\n \n class COutPoint;\n class CTransaction;\n-class uint256;\n+class blob256;\n \n //! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n@@ -78,11 +78,11 @@ class CBloomFilter\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);\n-    void insert(const uint256& hash);\n+    void insert(const blob256& hash);\n \n     bool contains(const std::vector<unsigned char>& vKey) const;\n     bool contains(const COutPoint& outpoint) const;\n-    bool contains(const uint256& hash) const;\n+    bool contains(const blob256& hash) const;\n \n     void clear();\n "
      },
      {
        "sha": "fc0945c7fec645e6c5a86dd58dac9d39099d32c6",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -24,7 +24,7 @@ void CChain::SetTip(CBlockIndex *pindex) {\n \n CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n     int nStep = 1;\n-    std::vector<uint256> vHave;\n+    std::vector<blob256> vHave;\n     vHave.reserve(32);\n \n     if (!pindex)"
      },
      {
        "sha": "a82f8d683cbe2fd38f56311a8a95b639367e63f9",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -96,7 +96,7 @@ class CBlockIndex\n {\n public:\n     //! pointer to the hash of the block, if any. memory is owned by this CBlockIndex\n-    const uint256* phashBlock;\n+    const blob256* phashBlock;\n \n     //! pointer to the index of the predecessor of this block\n     CBlockIndex* pprev;\n@@ -133,7 +133,7 @@ class CBlockIndex\n \n     //! block header\n     int nVersion;\n-    uint256 hashMerkleRoot;\n+    blob256 hashMerkleRoot;\n     unsigned int nTime;\n     unsigned int nBits;\n     unsigned int nNonce;\n@@ -157,7 +157,7 @@ class CBlockIndex\n         nSequenceId = 0;\n \n         nVersion       = 0;\n-        hashMerkleRoot = uint256();\n+        hashMerkleRoot = blob256();\n         nTime          = 0;\n         nBits          = 0;\n         nNonce         = 0;\n@@ -210,7 +210,7 @@ class CBlockIndex\n         return block;\n     }\n \n-    uint256 GetBlockHash() const\n+    blob256 GetBlockHash() const\n     {\n         return *phashBlock;\n     }\n@@ -279,14 +279,14 @@ class CBlockIndex\n class CDiskBlockIndex : public CBlockIndex\n {\n public:\n-    uint256 hashPrev;\n+    blob256 hashPrev;\n \n     CDiskBlockIndex() {\n-        hashPrev = uint256();\n+        hashPrev = blob256();\n     }\n \n     explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {\n-        hashPrev = (pprev ? pprev->GetBlockHash() : uint256());\n+        hashPrev = (pprev ? pprev->GetBlockHash() : blob256());\n     }\n \n     ADD_SERIALIZE_METHODS;\n@@ -315,7 +315,7 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(nNonce);\n     }\n \n-    uint256 GetBlockHash() const\n+    blob256 GetBlockHash() const\n     {\n         CBlockHeader block;\n         block.nVersion        = nVersion;"
      },
      {
        "sha": "1632d789ddd2924e566d3a2c444368b79959170f",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -41,7 +41,7 @@ class CChainParams\n         MAX_BASE58_TYPES\n     };\n \n-    const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n+    const blob256& HashGenesisBlock() const { return hashGenesisBlock; }\n     const MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n@@ -82,7 +82,7 @@ class CChainParams\n protected:\n     CChainParams() {}\n \n-    uint256 hashGenesisBlock;\n+    blob256 hashGenesisBlock;\n     MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;"
      },
      {
        "sha": "42e4269f3811cec1ef9af92b7674cc3be30813e8",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"chainparams.h\"\n #include \"main.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <stdint.h>\n \n@@ -25,7 +25,7 @@ namespace Checkpoints {\n \n     bool fEnabled = true;\n \n-    bool CheckBlock(int nHeight, const uint256& hash)\n+    bool CheckBlock(int nHeight, const blob256& hash)\n     {\n         if (!fEnabled)\n             return true;\n@@ -88,7 +88,7 @@ namespace Checkpoints {\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {\n-            const uint256& hash = i.second;\n+            const blob256& hash = i.second;\n             BlockMap::const_iterator t = mapBlockIndex.find(hash);\n             if (t != mapBlockIndex.end())\n                 return t->second;"
      },
      {
        "sha": "7a9a97901bb5924709649f232a4d2ac4b5d1900b",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_CHECKPOINTS_H\n #define BITCOIN_CHECKPOINTS_H\n \n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <map>\n \n@@ -17,7 +17,7 @@ class CBlockIndex;\n  */\n namespace Checkpoints\n {\n-typedef std::map<int, uint256> MapCheckpoints;\n+typedef std::map<int, blob256> MapCheckpoints;\n \n struct CCheckpointData {\n     const MapCheckpoints *mapCheckpoints;\n@@ -27,7 +27,7 @@ struct CCheckpointData {\n };\n \n //! Returns true if block passes checkpoint checks\n-bool CheckBlock(int nHeight, const uint256& hash);\n+bool CheckBlock(int nHeight, const blob256& hash);\n \n //! Return conservative estimate of total number of blocks, 0 if unknown\n int GetTotalBlocksEstimate();"
      },
      {
        "sha": "1837dca6f39644d51b689bd36e5c50cf83722f1d",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -29,7 +29,7 @@ class CCoinControl\n         return (setSelected.size() > 0);\n     }\n \n-    bool IsSelected(const uint256& hash, unsigned int n) const\n+    bool IsSelected(const blob256& hash, unsigned int n) const\n     {\n         COutPoint outpt(hash, n);\n         return (setSelected.count(outpt) > 0);"
      },
      {
        "sha": "a98d09997238d392005377c8581298b3cc402ed2",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -49,24 +49,24 @@ bool CCoins::Spend(const COutPoint &out, CTxInUndo &undo) {\n \n bool CCoins::Spend(int nPos) {\n     CTxInUndo undo;\n-    COutPoint out(uint256(), nPos);\n+    COutPoint out(blob256(), nPos);\n     return Spend(out, undo);\n }\n \n \n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n-uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n-bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n+bool CCoinsView::GetCoins(const blob256 &txid, CCoins &coins) const { return false; }\n+bool CCoinsView::HaveCoins(const blob256 &txid) const { return false; }\n+blob256 CCoinsView::GetBestBlock() const { return blob256(); }\n+bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n-uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n+bool CCoinsViewBacked::GetCoins(const blob256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n+bool CCoinsViewBacked::HaveCoins(const blob256 &txid) const { return base->HaveCoins(txid); }\n+blob256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n-bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n+bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n@@ -78,7 +78,7 @@ CCoinsViewCache::~CCoinsViewCache()\n     assert(!hasModifier);\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const blob256 &txid) const {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n         return it;\n@@ -95,7 +95,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n     return ret;\n }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n+bool CCoinsViewCache::GetCoins(const blob256 &txid, CCoins &coins) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     if (it != cacheCoins.end()) {\n         coins = it->second.coins;\n@@ -104,7 +104,7 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return false;\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n+CCoinsModifier CCoinsViewCache::ModifyCoins(const blob256 &txid) {\n     assert(!hasModifier);\n     hasModifier = true;\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n@@ -123,7 +123,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first);\n }\n \n-const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n+const CCoins* CCoinsViewCache::AccessCoins(const blob256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     if (it == cacheCoins.end()) {\n         return NULL;\n@@ -132,7 +132,7 @@ const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     }\n }\n \n-bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n+bool CCoinsViewCache::HaveCoins(const blob256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n     // as we only care about the case where a transaction was replaced entirely\n@@ -141,17 +141,17 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n }\n \n-uint256 CCoinsViewCache::GetBestBlock() const {\n+blob256 CCoinsViewCache::GetBestBlock() const {\n     if (hashBlock.IsNull())\n         hashBlock = base->GetBestBlock();\n     return hashBlock;\n }\n \n-void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n+void CCoinsViewCache::SetBestBlock(const blob256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n }\n \n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlockIn) {\n     assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization)."
      },
      {
        "sha": "c2cc745bc272d4aa8d3cb8e99e50a7286dc343e7",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"compressor.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"undo.h\"\n \n #include <assert.h>\n@@ -46,7 +46,7 @@\n  *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n  *               * 8358: compact amount representation for 60000000000 (600 BTC)\n  *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n+ *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address blob160\n  *    - height = 203998\n  *\n  *\n@@ -62,11 +62,11 @@\n  *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n  *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n  *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n+ *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address blob160\n  *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n  *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n  *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n+ *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address blob160\n  *  - height = 120891\n  */\n class CCoins\n@@ -261,7 +261,7 @@ class CCoins\n class CCoinsKeyHasher\n {\n private:\n-    uint256 salt;\n+    blob256 salt;\n \n public:\n     CCoinsKeyHasher();\n@@ -271,7 +271,7 @@ class CCoinsKeyHasher\n      * unordered_map will behave unpredictably if the custom hasher returns a\n      * uint64_t, resulting in failures when syncing the chain (#4634).\n      */\n-    size_t operator()(const uint256& key) const {\n+    size_t operator()(const blob256& key) const {\n         return key.GetHash(salt);\n     }\n };\n@@ -289,16 +289,16 @@ struct CCoinsCacheEntry\n     CCoinsCacheEntry() : coins(), flags(0) {}\n };\n \n-typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n+typedef boost::unordered_map<blob256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n \n struct CCoinsStats\n {\n     int nHeight;\n-    uint256 hashBlock;\n+    blob256 hashBlock;\n     uint64_t nTransactions;\n     uint64_t nTransactionOutputs;\n     uint64_t nSerializedSize;\n-    uint256 hashSerialized;\n+    blob256 hashSerialized;\n     CAmount nTotalAmount;\n \n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n@@ -310,18 +310,18 @@ class CCoinsView\n {\n public:\n     //! Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    virtual bool GetCoins(const blob256 &txid, CCoins &coins) const;\n \n     //! Just check whether we have data for a given txid.\n     //! This may (but cannot always) return true for fully spent transactions\n-    virtual bool HaveCoins(const uint256 &txid) const;\n+    virtual bool HaveCoins(const blob256 &txid) const;\n \n     //! Retrieve the block hash whose state this CCoinsView currently represents\n-    virtual uint256 GetBestBlock() const;\n+    virtual blob256 GetBestBlock() const;\n \n     //! Do a bulk modification (multiple CCoins changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n-    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    virtual bool BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock);\n \n     //! Calculate statistics about the unspent transaction output set\n     virtual bool GetStats(CCoinsStats &stats) const;\n@@ -339,11 +339,11 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView *viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoins(const blob256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const blob256 &txid) const;\n+    blob256 GetBestBlock() const;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n };\n \n@@ -380,33 +380,33 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Make mutable so that we can \"fill the cache\" even from Get-methods\n      * declared as \"const\".  \n      */\n-    mutable uint256 hashBlock;\n+    mutable blob256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n     ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n-    void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool GetCoins(const blob256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const blob256 &txid) const;\n+    blob256 GetBestBlock() const;\n+    void SetBestBlock(const blob256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock);\n \n     /**\n      * Return a pointer to CCoins in the cache, or NULL if not found. This is\n      * more efficient than GetCoins. Modifications to other cache entries are\n      * allowed while accessing the returned pointer.\n      */\n-    const CCoins* AccessCoins(const uint256 &txid) const;\n+    const CCoins* AccessCoins(const blob256 &txid) const;\n \n     /**\n      * Return a modifiable reference to a CCoins. If no entry with the given\n      * txid exists, a new one is created. Simultaneous modifications are not\n      * allowed.\n      */\n-    CCoinsModifier ModifyCoins(const uint256 &txid);\n+    CCoinsModifier ModifyCoins(const blob256 &txid);\n \n     /**\n      * Push the modifications applied to this cache to its base.\n@@ -439,8 +439,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n     friend class CCoinsModifier;\n \n private:\n-    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoins(const blob256 &txid);\n+    CCoinsMap::const_iterator FetchCoins(const blob256 &txid) const;\n };\n \n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "4a96425f4f730e92a96cd404ad8e1d75308891da",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -11,21 +11,21 @@\n class CBlock;\n class CScript;\n class CTransaction;\n-class uint256;\n+class blob256;\n class UniValue;\n \n // core_read.cpp\n extern CScript ParseScript(std::string s);\n extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n extern bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n-extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n+extern blob256 ParseHashUV(const UniValue& v, const std::string& strName);\n extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n \n // core_write.cpp\n extern std::string FormatScript(const CScript& script);\n extern std::string EncodeHexTx(const CTransaction& tx);\n extern void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex);\n-extern void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry);\n+extern void TxToUniv(const CTransaction& tx, const blob256& hashBlock, UniValue& entry);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "046924f2c1e7e9098fd64632b10677a405e64bb6",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -126,15 +126,15 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashUV(const UniValue& v, const string& strName)\n+blob256 ParseHashUV(const UniValue& v, const string& strName)\n {\n     string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n \n-    uint256 result;\n+    blob256 result;\n     result.SetHex(strHex);\n     return result;\n }"
      },
      {
        "sha": "27ba9fd30250df44e73f5569a0a7eb0e6cbfd0f6",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -86,7 +86,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"addresses\", a);\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n+void TxToUniv(const CTransaction& tx, const blob256& hashBlock, UniValue& entry)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);"
      },
      {
        "sha": "2975b708609a3f38188221fb5bc2b9ca7fb1d370",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -102,7 +102,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n }\n \n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n+bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const blob256& nIV, std::vector<unsigned char> &vchCiphertext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -112,7 +112,7 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const blob256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);"
      },
      {
        "sha": "1035bb21b24c64ccef3b1335afa6e0eb20da5772",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,7 +9,7 @@\n #include \"keystore.h\"\n #include \"serialize.h\"\n \n-class uint256;\n+class blob256;\n \n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n@@ -107,8 +107,8 @@ class CCrypter\n     }\n };\n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n+bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const blob256& nIV, std::vector<unsigned char> &vchCiphertext);\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const blob256& nIV, CKeyingMaterial& vchPlaintext);\n \n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active."
      },
      {
        "sha": "32864119125dd721bc2104485868024534a66681",
        "filename": "src/eccryptoverify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/eccryptoverify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/eccryptoverify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,7 +9,7 @@\n #include <vector>\n #include <cstdlib>\n \n-class uint256;\n+class blob256;\n \n namespace eccrypto {\n "
      },
      {
        "sha": "5afa449b9ea2760ac25419520c29112ce5e888b9",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -5,7 +5,7 @@\n #include \"ecwrapper.h\"\n \n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <openssl/bn.h>\n #include <openssl/ecdsa.h>\n@@ -116,14 +116,14 @@ bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n     return o2i_ECPublicKey(&pkey, &pubkey, size) != NULL;\n }\n \n-bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n+bool CECKey::Verify(const blob256 &hash, const std::vector<unsigned char>& vchSig) {\n     // -1 = error, 0 = bad sig, 1 = good\n     if (ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], vchSig.size(), pkey) != 1)\n         return false;\n     return true;\n }\n \n-bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)\n+bool CECKey::Recover(const blob256 &hash, const unsigned char *p64, int rec)\n {\n     if (rec<0 || rec>=3)\n         return false;"
      },
      {
        "sha": "da974b72d715ffeaac9927b7ee6ba0430f34f893",
        "filename": "src/ecwrapper.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/ecwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/ecwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <openssl/ec.h>\n \n-class uint256;\n+class blob256;\n \n /** RAII Wrapper around OpenSSL's EC_KEY */\n class CECKey {\n@@ -23,15 +23,15 @@ class CECKey {\n \n     void GetPubKey(std::vector<unsigned char>& pubkey, bool fCompressed);\n     bool SetPubKey(const unsigned char* pubkey, size_t size);\n-    bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n+    bool Verify(const blob256 &hash, const std::vector<unsigned char>& vchSig);\n \n     /**\n      * reconstruct public key from a compact signature\n      * This is only slightly more CPU intensive than just verifying it.\n      * If this function succeeds, the recovered public key is guaranteed to be valid\n      * (the signature is a valid signature of the given data for that key)\n      */\n-    bool Recover(const uint256 &hash, const unsigned char *p64, int rec);\n+    bool Recover(const blob256 &hash, const unsigned char *p64, int rec);\n \n     bool TweakPublic(const unsigned char vchTweak[32]);\n     static bool SanityCheck();"
      },
      {
        "sha": "7f5da4dde575e5d57794cb03d39c284f5dec9e76",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,7 +9,7 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha256.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"version.h\"\n \n #include <vector>\n@@ -64,21 +64,21 @@ class CHash160 {\n \n /** Compute the 256-bit hash of an object. */\n template<typename T1>\n-inline uint256 Hash(const T1 pbegin, const T1 pend)\n+inline blob256 Hash(const T1 pbegin, const T1 pend)\n {\n     static const unsigned char pblank[1] = {};\n-    uint256 result;\n+    blob256 result;\n     CHash256().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n               .Finalize((unsigned char*)&result);\n     return result;\n }\n \n /** Compute the 256-bit hash of the concatenation of two objects. */\n template<typename T1, typename T2>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+inline blob256 Hash(const T1 p1begin, const T1 p1end,\n                     const T2 p2begin, const T2 p2end) {\n     static const unsigned char pblank[1] = {};\n-    uint256 result;\n+    blob256 result;\n     CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n               .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n               .Finalize((unsigned char*)&result);\n@@ -87,11 +87,11 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n \n /** Compute the 256-bit hash of the concatenation of three objects. */\n template<typename T1, typename T2, typename T3>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+inline blob256 Hash(const T1 p1begin, const T1 p1end,\n                     const T2 p2begin, const T2 p2end,\n                     const T3 p3begin, const T3 p3end) {\n     static const unsigned char pblank[1] = {};\n-    uint256 result;\n+    blob256 result;\n     CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n               .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n               .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n@@ -101,17 +101,17 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n \n /** Compute the 160-bit hash an object. */\n template<typename T1>\n-inline uint160 Hash160(const T1 pbegin, const T1 pend)\n+inline blob160 Hash160(const T1 pbegin, const T1 pend)\n {\n     static unsigned char pblank[1] = {};\n-    uint160 result;\n+    blob160 result;\n     CHash160().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n               .Finalize((unsigned char*)&result);\n     return result;\n }\n \n /** Compute the 160-bit hash of a vector. */\n-inline uint160 Hash160(const std::vector<unsigned char>& vch)\n+inline blob160 Hash160(const std::vector<unsigned char>& vch)\n {\n     return Hash160(vch.begin(), vch.end());\n }\n@@ -134,8 +134,8 @@ class CHashWriter\n     }\n \n     // invalidates the object\n-    uint256 GetHash() {\n-        uint256 result;\n+    blob256 GetHash() {\n+        blob256 result;\n         ctx.Finalize((unsigned char*)&result);\n         return result;\n     }\n@@ -150,7 +150,7 @@ class CHashWriter\n \n /** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n-uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n+blob256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n {\n     CHashWriter ss(nType, nVersion);\n     ss << obj;"
      },
      {
        "sha": "5114cdef3e635be286ceb85611802e681064d5d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -379,7 +379,7 @@ std::string LicenseInfo()\n            \"\\n\";\n }\n \n-static void BlockNotifyCallback(const uint256& hashNewTip)\n+static void BlockNotifyCallback(const blob256& hashNewTip)\n {\n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n@@ -1168,8 +1168,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n             {\n                 BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n                 {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n+                    blob256 hash = wtxOld.GetHash();\n+                    std::map<blob256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n                     if (mi != pwalletMain->mapWallet.end())\n                     {\n                         const CWalletTx* copyFrom = &wtxOld;"
      },
      {
        "sha": "f0048d0cd1b75cbc55ad82fe3b7dcb07e8806794",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -72,18 +72,18 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n-bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n+bool CKey::Sign(const blob256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n     RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n     do {\n-        uint256 nonce;\n+        blob256 nonce;\n         prng.Generate((unsigned char*)&nonce, 32);\n         nonce += test_case;\n         int nSigLen = 72;\n         int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        nonce = uint256();\n+        nonce = blob256();\n         if (ret) {\n             vchSig.resize(nSigLen);\n             return true;\n@@ -98,24 +98,24 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     unsigned char rnd[8];\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n-    uint256 hash;\n+    blob256 hash;\n     CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize((unsigned char*)&hash);\n     std::vector<unsigned char> vchSig;\n     Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);\n }\n \n-bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n+bool CKey::SignCompact(const blob256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(65);\n     int rec = -1;\n     RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n     do {\n-        uint256 nonce;\n+        blob256 nonce;\n         prng.Generate((unsigned char*)&nonce, 32);\n         int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n-        nonce = uint256();\n+        nonce = blob256();\n         if (ret)\n             break;\n     } while(true);"
      },
      {
        "sha": "8481e9959118645772d013f62d839296d0cb3863",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"allocators.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <stdexcept>\n #include <vector>\n@@ -127,7 +127,7 @@ class CKey\n      * The test_case parameter tweaks the deterministic nonce, and is only for\n      * testing. It should be zero for normal use.\n      */\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, uint32_t test_case = 0) const;\n+    bool Sign(const blob256& hash, std::vector<unsigned char>& vchSig, uint32_t test_case = 0) const;\n \n     /**\n      * Create a compact signature (65 bytes), which allows reconstructing the used public key.\n@@ -136,7 +136,7 @@ class CKey\n      *                  0x1D = second key with even y, 0x1E = second key with odd y,\n      *                  add 0x04 for compressed keys.\n      */\n-    bool SignCompact(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n+    bool SignCompact(const blob256& hash, std::vector<unsigned char>& vchSig) const;\n \n     //! Derive BIP32 child key.\n     bool Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;"
      },
      {
        "sha": "6658bc67d7ce46527f7215d3a251b558ae4b9e0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 70,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -63,8 +63,8 @@ struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions;\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+map<blob256, COrphanTx> mapOrphanTransactions;\n+map<blob256, set<blob256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n /**\n@@ -131,15 +131,15 @@ namespace {\n      * Sources of received blocks, to be able to send them reject messages or ban\n      * them, if processing happens afterwards. Protected by cs_main.\n      */\n-    map<uint256, NodeId> mapBlockSource;\n+    map<blob256, NodeId> mapBlockSource;\n \n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n-        uint256 hash;\n+        blob256 hash;\n         CBlockIndex *pindex;  //! Optional.\n         int64_t nTime;  //! Time of \"getdata\" request in microseconds.\n     };\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    map<blob256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n@@ -164,13 +164,13 @@ struct CMainSignals {\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n     /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n-    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n+    boost::signals2::signal<void (const blob256 &)> EraseTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n+    boost::signals2::signal<void (const blob256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */\n     boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (const blob256 &)> Inventory;\n     /** Tells listeners to broadcast their data. */\n     boost::signals2::signal<void ()> Broadcast;\n     /** Notifies listeners of a block validation result */\n@@ -223,7 +223,7 @@ namespace {\n struct CBlockReject {\n     unsigned char chRejectCode;\n     string strRejectReason;\n-    uint256 hashBlock;\n+    blob256 hashBlock;\n };\n \n /**\n@@ -244,7 +244,7 @@ struct CNodeState {\n     //! The best known block we know this peer has announced.\n     CBlockIndex *pindexBestKnownBlock;\n     //! The hash of the last unknown block this peer has announced.\n-    uint256 hashLastUnknownBlock;\n+    blob256 hashLastUnknownBlock;\n     //! The last full block we both have.\n     CBlockIndex *pindexLastCommonBlock;\n     //! Whether we've started headers synchronization with this peer.\n@@ -318,8 +318,8 @@ void FinalizeNode(NodeId nodeid) {\n }\n \n // Requires cs_main.\n-void MarkBlockAsReceived(const uint256& hash) {\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+void MarkBlockAsReceived(const blob256& hash) {\n+    map<blob256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n@@ -330,7 +330,7 @@ void MarkBlockAsReceived(const uint256& hash) {\n }\n \n // Requires cs_main.\n-void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex = NULL) {\n+void MarkBlockAsInFlight(NodeId nodeid, const blob256& hash, CBlockIndex *pindex = NULL) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n@@ -359,7 +359,7 @@ void ProcessBlockAvailability(NodeId nodeid) {\n }\n \n /** Update tracking information about which blocks a peer is assumed to have. */\n-void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n+void UpdateBlockAvailability(NodeId nodeid, const blob256 &hash) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n@@ -512,7 +512,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, locator.vHave) {\n+    BOOST_FOREACH(const blob256& hash, locator.vHave) {\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n@@ -534,7 +534,7 @@ CBlockTreeDB *pblocktree = NULL;\n \n bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n {\n-    uint256 hash = tx.GetHash();\n+    blob256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n         return false;\n \n@@ -562,14 +562,14 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n     return true;\n }\n \n-void static EraseOrphanTx(uint256 hash)\n+void static EraseOrphanTx(blob256 hash)\n {\n-    map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    map<blob256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return;\n     BOOST_FOREACH(const CTxIn& txin, it->second.tx.vin)\n     {\n-        map<uint256, set<uint256> >::iterator itPrev = mapOrphanTransactionsByPrev.find(txin.prevout.hash);\n+        map<blob256, set<blob256> >::iterator itPrev = mapOrphanTransactionsByPrev.find(txin.prevout.hash);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n             continue;\n         itPrev->second.erase(hash);\n@@ -582,10 +582,10 @@ void static EraseOrphanTx(uint256 hash)\n void EraseOrphansFor(NodeId peer)\n {\n     int nErased = 0;\n-    map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    map<blob256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n     while (iter != mapOrphanTransactions.end())\n     {\n-        map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        map<blob256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n             EraseOrphanTx(maybeErase->second.tx.GetHash());\n@@ -602,8 +602,8 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:\n-        uint256 randomhash = GetRandHash();\n-        map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        blob256 randomhash = GetRandHash();\n+        map<blob256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -888,7 +888,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n {\n     {\n         LOCK(mempool.cs);\n-        uint256 hash = tx.GetHash();\n+        blob256 hash = tx.GetHash();\n         double dPriorityDelta = 0;\n         CAmount nFeeDelta = 0;\n         mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n@@ -937,7 +937,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                          REJECT_NONSTANDARD, reason);\n \n     // is it already in the memory pool?\n-    uint256 hash = tx.GetHash();\n+    blob256 hash = tx.GetHash();\n     if (pool.exists(hash))\n         return false;\n \n@@ -1070,7 +1070,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n }\n \n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n-bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, bool fAllowSlow)\n+bool GetTransaction(const blob256 &hash, CTransaction &txOut, blob256 &hashBlock, bool fAllowSlow)\n {\n     CBlockIndex *pindexSlow = NULL;\n     {\n@@ -1340,7 +1340,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     int nDoS = 0;\n     if (state.IsInvalid(nDoS)) {\n-        std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n+        std::map<blob256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n             CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n@@ -1506,7 +1506,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n         const CTransaction &tx = block.vtx[i];\n-        uint256 hash = tx.GetHash();\n+        blob256 hash = tx.GetHash();\n \n         // Check that all outputs are available and match the outputs in the block itself\n         // exactly. Note that transactions with only provably unspendable outputs won't\n@@ -1617,7 +1617,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n-    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n+    blob256 hashPrevBlock = pindex->pprev == NULL ? blob256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n \n     // Special case for the genesis block, skipping connection of its transactions\n@@ -1668,7 +1668,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    std::vector<std::pair<blob256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n@@ -1762,7 +1762,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime3 - nTime2), nTimeIndex * 0.000001);\n \n     // Watch for changes to the previous coinbase transaction.\n-    static uint256 hashPrevBestCoinBase;\n+    static blob256 hashPrevBestCoinBase;\n     g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n     hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n@@ -2136,7 +2136,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n \n         // Notifications/callbacks that can run without cs_main\n         if (!fInitialDownload) {\n-            uint256 hashNewTip = pindexNewTip->GetBlockHash();\n+            blob256 hashNewTip = pindexNewTip->GetBlockHash();\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n             {\n@@ -2228,7 +2228,7 @@ bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex) {\n CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n {\n     // Check for duplicate\n-    uint256 hash = block.GetHash();\n+    blob256 hash = block.GetHash();\n     BlockMap::iterator it = mapBlockIndex.find(hash);\n     if (it != mapBlockIndex.end())\n         return it->second;\n@@ -2406,7 +2406,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;\n-        uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n+        blob256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n             return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);\n@@ -2456,7 +2456,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n-    uint256 hash = block.GetHash();\n+    blob256 hash = block.GetHash();\n     if (hash == Params().HashGenesisBlock())\n         return true;\n \n@@ -2523,7 +2523,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n-    uint256 hash = block.GetHash();\n+    blob256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n     CBlockIndex *pindex = NULL;\n     if (miSelf != mapBlockIndex.end()) {\n@@ -2735,7 +2735,7 @@ boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n \n-CBlockIndex * InsertBlockIndex(uint256 hash)\n+CBlockIndex * InsertBlockIndex(blob256 hash)\n {\n     if (hash.IsNull())\n         return NULL;\n@@ -2765,7 +2765,7 @@ bool static LoadBlockIndexDB()\n     // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    BOOST_FOREACH(const PAIRTYPE(blob256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n@@ -2817,7 +2817,7 @@ bool static LoadBlockIndexDB()\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    BOOST_FOREACH(const PAIRTYPE(blob256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n@@ -3003,7 +3003,7 @@ bool InitBlockIndex() {\n bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n-    static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n+    static std::multimap<blob256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n@@ -3046,7 +3046,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 nRewind = blkdat.GetPos();\n \n                 // detect out of order blocks, and store them for later\n-                uint256 hash = block.GetHash();\n+                blob256 hash = block.GetHash();\n                 if (hash != Params().HashGenesisBlock() && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n                     LogPrint(\"reindex\", \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                             block.hashPrevBlock.ToString());\n@@ -3067,14 +3067,14 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 }\n \n                 // Recursively process earlier encountered successors of this block\n-                deque<uint256> queue;\n+                deque<blob256> queue;\n                 queue.push_back(hash);\n                 while (!queue.empty()) {\n-                    uint256 head = queue.front();\n+                    blob256 head = queue.front();\n                     queue.pop_front();\n-                    std::pair<std::multimap<uint256, CDiskBlockPos>::iterator, std::multimap<uint256, CDiskBlockPos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n+                    std::pair<std::multimap<blob256, CDiskBlockPos>::iterator, std::multimap<blob256, CDiskBlockPos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n-                        std::multimap<uint256, CDiskBlockPos>::iterator it = range.first;\n+                        std::multimap<blob256, CDiskBlockPos>::iterator it = range.first;\n                         if (ReadBlockFromDisk(block, it->second))\n                         {\n                             LogPrintf(\"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n@@ -3140,7 +3140,7 @@ string GetWarnings(string strFor)\n     // Alerts\n     {\n         LOCK(cs_mapAlerts);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        BOOST_FOREACH(PAIRTYPE(const blob256, CAlert)& item, mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.AppliesToMe() && alert.nPriority > nPriority)\n@@ -3251,7 +3251,7 @@ void static ProcessGetData(CNode* pfrom)\n                             // they must either disconnect and retry or request the full block.\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n-                            typedef std::pair<unsigned int, uint256> PairType;\n+                            typedef std::pair<unsigned int, blob256> PairType;\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n                                 if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n                                     pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n@@ -3435,7 +3435,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n-            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+            BOOST_FOREACH(PAIRTYPE(const blob256, CAlert)& item, mapAlerts)\n                 item.second.RelayTo(pfrom);\n         }\n \n@@ -3501,13 +3501,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     LOCK(cs_vNodes);\n                     // Use deterministic randomness to send to the same nodes for 24 hours\n                     // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n-                    static uint256 hashSalt;\n+                    static blob256 hashSalt;\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint64_t hashAddr = addr.GetHash();\n                     uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    multimap<uint256, CNode*> mapMix;\n+                    multimap<blob256, CNode*> mapMix;\n                     BOOST_FOREACH(CNode* pnode, vNodes)\n                     {\n                         if (pnode->nVersion < CADDR_TIME_VERSION)\n@@ -3519,7 +3519,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         mapMix.insert(make_pair(hashKey, pnode));\n                     }\n                     int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n-                    for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n+                    for (multimap<blob256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n                         ((*mi).second)->PushAddress(addr);\n                 }\n             }\n@@ -3622,7 +3622,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == \"getblocks\")\n     {\n         CBlockLocator locator;\n-        uint256 hashStop;\n+        blob256 hashStop;\n         vRecv >> locator >> hashStop;\n \n         LOCK(cs_main);\n@@ -3658,7 +3658,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == \"getheaders\")\n     {\n         CBlockLocator locator;\n-        uint256 hashStop;\n+        blob256 hashStop;\n         vRecv >> locator >> hashStop;\n \n         LOCK(cs_main);\n@@ -3696,8 +3696,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == \"tx\")\n     {\n-        vector<uint256> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n+        vector<blob256> vWorkQueue;\n+        vector<blob256> vEraseQueue;\n         CTransaction tx;\n         vRecv >> tx;\n \n@@ -3727,14 +3727,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             set<NodeId> setMisbehaving;\n             for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n-                map<uint256, set<uint256> >::iterator itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue[i]);\n+                map<blob256, set<blob256> >::iterator itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue[i]);\n                 if (itByPrev == mapOrphanTransactionsByPrev.end())\n                     continue;\n-                for (set<uint256>::iterator mi = itByPrev->second.begin();\n+                for (set<blob256>::iterator mi = itByPrev->second.begin();\n                      mi != itByPrev->second.end();\n                      ++mi)\n                 {\n-                    const uint256& orphanHash = *mi;\n+                    const blob256& orphanHash = *mi;\n                     const CTransaction& orphanTx = mapOrphanTransactions[orphanHash].tx;\n                     NodeId fromPeer = mapOrphanTransactions[orphanHash].fromPeer;\n                     bool fMissingInputs2 = false;\n@@ -3770,7 +3770,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n \n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n+            BOOST_FOREACH(blob256 hash, vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n@@ -3850,7 +3850,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n-            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256());\n+            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), blob256());\n         }\n     }\n \n@@ -3892,10 +3892,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     {\n         LOCK2(cs_main, pfrom->cs_filter);\n \n-        std::vector<uint256> vtxid;\n+        std::vector<blob256> vtxid;\n         mempool.queryHashes(vtxid);\n         vector<CInv> vInv;\n-        BOOST_FOREACH(uint256& hash, vtxid) {\n+        BOOST_FOREACH(blob256& hash, vtxid) {\n             CInv inv(MSG_TX, hash);\n             CTransaction tx;\n             bool fInMemPool = mempool.lookup(hash, tx);\n@@ -3997,7 +3997,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CAlert alert;\n         vRecv >> alert;\n \n-        uint256 alertHash = alert.GetHash();\n+        blob256 alertHash = alert.GetHash();\n         if (pfrom->setKnown.count(alertHash) == 0)\n         {\n             if (alert.ProcessAlert())\n@@ -4083,7 +4083,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                 if (strMsg == \"block\" || strMsg == \"tx\")\n                 {\n-                    uint256 hash;\n+                    blob256 hash;\n                     vRecv >> hash;\n                     ss << \": hash \" << hash.ToString();\n                 }\n@@ -4175,7 +4175,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n-        uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n+        blob256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n         unsigned int nChecksum = 0;\n         memcpy(&nChecksum, &hash, sizeof(nChecksum));\n         if (nChecksum != hdr.nChecksum)\n@@ -4348,7 +4348,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 nSyncStarted++;\n                 CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n-                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256());\n+                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), blob256());\n             }\n         }\n \n@@ -4378,7 +4378,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 if (inv.type == MSG_TX && !fSendTrickle)\n                 {\n                     // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n+                    static blob256 hashSalt;\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint256 hashRand = inv.hash ^ hashSalt;\n@@ -4467,7 +4467,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n }\n \n \n-bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n+bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const blob256 &hashBlock)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -4494,15 +4494,15 @@ bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n     return true;\n }\n \n-bool CBlockUndo::ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock)\n+bool CBlockUndo::ReadFromDisk(const CDiskBlockPos &pos, const blob256 &hashBlock)\n {\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"CBlockUndo::ReadFromDisk : OpenBlockFile failed\");\n \n     // Read block\n-    uint256 hashChecksum;\n+    blob256 hashChecksum;\n     try {\n         filein >> *this;\n         filein >> hashChecksum;"
      },
      {
        "sha": "aa12b23fd741150f1101325f52524fde1f130941",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -24,7 +24,7 @@\n #include \"sync.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"undo.h\"\n \n #include <algorithm>\n@@ -109,13 +109,13 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n struct BlockHasher\n {\n-    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n+    size_t operator()(const blob256& hash) const { return hash.GetCheapHash(); }\n };\n \n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n-typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n+typedef boost::unordered_map<blob256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n@@ -190,13 +190,13 @@ bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core */\n std::string GetWarnings(std::string strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n+bool GetTransaction(const blob256 &hash, CTransaction &tx, blob256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n-CBlockIndex * InsertBlockIndex(uint256 hash);\n+CBlockIndex * InsertBlockIndex(blob256 hash);\n /** Abort with a message */\n bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n@@ -317,8 +317,8 @@ class CBlockUndo\n         READWRITE(vtxundo);\n     }\n \n-    bool WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock);\n-    bool ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock);\n+    bool WriteToDisk(CDiskBlockPos &pos, const blob256 &hashBlock);\n+    bool ReadFromDisk(const CDiskBlockPos &pos, const blob256 &hashBlock);\n };\n \n \n@@ -549,10 +549,10 @@ struct CBlockTemplate\n class CValidationInterface {\n protected:\n     virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n-    virtual void EraseFromWallet(const uint256 &hash) {};\n+    virtual void EraseFromWallet(const blob256 &hash) {};\n     virtual void SetBestChain(const CBlockLocator &locator) {};\n-    virtual void UpdatedTransaction(const uint256 &hash) {};\n-    virtual void Inventory(const uint256 &hash) {};\n+    virtual void UpdatedTransaction(const blob256 &hash) {};\n+    virtual void Inventory(const blob256 &hash) {};\n     virtual void ResendWalletTransactions() {};\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);"
      },
      {
        "sha": "a17607faf9305f2794d1aa68fadc65238dd16be2",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -16,14 +16,14 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n     header = block.GetBlockHeader();\n \n     vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    vector<blob256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());\n \n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n-        const uint256& hash = block.vtx[i].GetHash();\n+        const blob256& hash = block.vtx[i].GetHash();\n         if (filter.IsRelevantAndUpdate(block.vtx[i]))\n         {\n             vMatch.push_back(true);\n@@ -37,13 +37,13 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n     txn = CPartialMerkleTree(vHashes, vMatch);\n }\n \n-uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {\n+blob256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<blob256> &vTxid) {\n     if (height == 0) {\n         // hash at height 0 is the txids themself\n         return vTxid[pos];\n     } else {\n         // calculate left hash\n-        uint256 left = CalcHash(height-1, pos*2, vTxid), right;\n+        blob256 left = CalcHash(height-1, pos*2, vTxid), right;\n         // calculate right hash if not beyond the end of the array - copy left hash otherwise1\n         if (pos*2+1 < CalcTreeWidth(height-1))\n             right = CalcHash(height-1, pos*2+1, vTxid);\n@@ -54,7 +54,7 @@ uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::ve\n     }\n }\n \n-void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {\n+void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<blob256> &vTxid, const std::vector<bool> &vMatch) {\n     // determine whether this node is the parent of at least one matched txid\n     bool fParentOfMatch = false;\n     for (unsigned int p = pos << height; p < (pos+1) << height && p < nTransactions; p++)\n@@ -72,27 +72,27 @@ void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const st\n     }\n }\n \n-uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch) {\n+blob256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<blob256> &vMatch) {\n     if (nBitsUsed >= vBits.size()) {\n         // overflowed the bits array - failure\n         fBad = true;\n-        return uint256();\n+        return blob256();\n     }\n     bool fParentOfMatch = vBits[nBitsUsed++];\n     if (height==0 || !fParentOfMatch) {\n         // if at height 0, or nothing interesting below, use stored hash and do not descend\n         if (nHashUsed >= vHash.size()) {\n             // overflowed the hash array - failure\n             fBad = true;\n-            return uint256();\n+            return blob256();\n         }\n-        const uint256 &hash = vHash[nHashUsed++];\n+        const blob256 &hash = vHash[nHashUsed++];\n         if (height==0 && fParentOfMatch) // in case of height 0, we have a matched txid\n             vMatch.push_back(hash);\n         return hash;\n     } else {\n         // otherwise, descend into the subtrees to extract matched txids and hashes\n-        uint256 left = TraverseAndExtract(height-1, pos*2, nBitsUsed, nHashUsed, vMatch), right;\n+        blob256 left = TraverseAndExtract(height-1, pos*2, nBitsUsed, nHashUsed, vMatch), right;\n         if (pos*2+1 < CalcTreeWidth(height-1))\n             right = TraverseAndExtract(height-1, pos*2+1, nBitsUsed, nHashUsed, vMatch);\n         else\n@@ -102,7 +102,7 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n     }\n }\n \n-CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {\n+CPartialMerkleTree::CPartialMerkleTree(const std::vector<blob256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {\n     // reset state\n     vBits.clear();\n     vHash.clear();\n@@ -118,35 +118,35 @@ CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const\n \n CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}\n \n-uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n+blob256 CPartialMerkleTree::ExtractMatches(std::vector<blob256> &vMatch) {\n     vMatch.clear();\n     // An empty set will not work\n     if (nTransactions == 0)\n-        return uint256();\n+        return blob256();\n     // check for excessively high numbers of transactions\n     if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n-        return uint256();\n+        return blob256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)\n-        return uint256();\n+        return blob256();\n     // there must be at least one bit per node in the partial tree, and at least one node per hash\n     if (vBits.size() < vHash.size())\n-        return uint256();\n+        return blob256();\n     // calculate height of tree\n     int nHeight = 0;\n     while (CalcTreeWidth(nHeight) > 1)\n         nHeight++;\n     // traverse the partial tree\n     unsigned int nBitsUsed = 0, nHashUsed = 0;\n-    uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n+    blob256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n     // verify that no problems occured during the tree traversal\n     if (fBad)\n-        return uint256();\n+        return blob256();\n     // verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)\n     if ((nBitsUsed+7)/8 != (vBits.size()+7)/8)\n-        return uint256();\n+        return blob256();\n     // verify that all hashes were consumed\n     if (nHashUsed != vHash.size())\n-        return uint256();\n+        return blob256();\n     return hashMerkleRoot;\n }"
      },
      {
        "sha": "c6e504c584f29388bbc047219d2f4eda0c810b57",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_MERKLEBLOCK_H\n \n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"primitives/block.h\"\n #include \"bloom.h\"\n \n@@ -42,7 +42,7 @@\n  * The serialization format:\n  *  - uint32     total_transactions (4 bytes)\n  *  - varint     number of hashes   (1-3 bytes)\n- *  - uint256[]  hashes in depth-first order (<= 32*N bytes)\n+ *  - blob256[]  hashes in depth-first order (<= 32*N bytes)\n  *  - varint     number of bytes of flag bits (1-3 bytes)\n  *  - byte[]     flag bits, packed per 8 in a byte, least significant bit first (<= 2*N-1 bits)\n  * The size constraints follow from this.\n@@ -57,7 +57,7 @@ class CPartialMerkleTree\n     std::vector<bool> vBits;\n \n     /** txids and internal hashes */\n-    std::vector<uint256> vHash;\n+    std::vector<blob256> vHash;\n \n     /** flag set when encountering invalid data */\n     bool fBad;\n@@ -68,16 +68,16 @@ class CPartialMerkleTree\n     }\n \n     /** calculate the hash of a node in the merkle tree (at leaf level: the txid's themselves) */\n-    uint256 CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid);\n+    blob256 CalcHash(int height, unsigned int pos, const std::vector<blob256> &vTxid);\n \n     /** recursive function that traverses tree nodes, storing the data as bits and hashes */\n-    void TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch);\n+    void TraverseAndBuild(int height, unsigned int pos, const std::vector<blob256> &vTxid, const std::vector<bool> &vMatch);\n \n     /**\n      * recursive function that traverses tree nodes, consuming the bits and hashes produced by TraverseAndBuild.\n      * it returns the hash of the respective node.\n      */\n-    uint256 TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch);\n+    blob256 TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<blob256> &vMatch);\n \n public:\n \n@@ -105,15 +105,15 @@ class CPartialMerkleTree\n     }\n \n     /** Construct a partial merkle tree from a list of transaction id's, and a mask that selects a subset of them */\n-    CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch);\n+    CPartialMerkleTree(const std::vector<blob256> &vTxid, const std::vector<bool> &vMatch);\n \n     CPartialMerkleTree();\n \n     /**\n      * extract the matching txid's represented by this partial merkle tree.\n      * returns the merkle root, or 0 in case of failure\n      */\n-    uint256 ExtractMatches(std::vector<uint256> &vMatch);\n+    blob256 ExtractMatches(std::vector<blob256> &vMatch);\n };\n \n \n@@ -130,7 +130,7 @@ class CMerkleBlock\n \n public:\n     /** Public only for unit testing and relay testing (not relayed) */\n-    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;\n+    std::vector<std::pair<unsigned int, blob256> > vMatchedTxn;\n \n     /**\n      * Create from a CBlock, filtering transactions according to filter"
      },
      {
        "sha": "288cd90fccea8d19e05c4073f6a514a7167db7dc",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -41,7 +41,7 @@ class COrphan\n {\n public:\n     const CTransaction* ptx;\n-    set<uint256> setDependsOn;\n+    set<blob256> setDependsOn;\n     CFeeRate feeRate;\n     double dPriority;\n \n@@ -139,13 +139,13 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n+        map<blob256, vector<COrphan*> > mapDependers;\n         bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n-        for (map<uint256, CTxMemPoolEntry>::iterator mi = mempool.mapTx.begin();\n+        for (map<blob256, CTxMemPoolEntry>::iterator mi = mempool.mapTx.begin();\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->second.GetTx();\n@@ -202,7 +202,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n             dPriority = tx.ComputePriority(dPriority, nTxSize);\n \n-            uint256 hash = tx.GetHash();\n+            blob256 hash = tx.GetHash();\n             mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n \n             CFeeRate feeRate(nTotalIn-tx.GetValueOut(), nTxSize);\n@@ -246,7 +246,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 continue;\n \n             // Skip free transactions if we're past the minimum block size:\n-            const uint256& hash = tx.GetHash();\n+            const blob256& hash = tx.GetHash();\n             double dPriorityDelta = 0;\n             CAmount nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n@@ -343,7 +343,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n+    static blob256 hashPrevBlock;\n     if (hashPrevBlock != pblock->hashPrevBlock)\n     {\n         nExtraNonce = 0;\n@@ -373,7 +373,7 @@ int64_t nHPSTimerStart = 0;\n // nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n // zero.\n //\n-bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash)\n+bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, blob256 *phash)\n {\n     // Write the first 76 bytes of the block header to a double-SHA256 state.\n     CHash256 hasher;\n@@ -483,7 +483,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             //\n             int64_t nStart = GetTime();\n             uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n-            uint256 hash;\n+            blob256 hash;\n             uint32_t nNonce = 0;\n             uint32_t nOldNonce = 0;\n             while (true) {"
      },
      {
        "sha": "39b45e228fbf420fc6a09aa835cbd30e315be51c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -1840,7 +1840,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n     ssPeers << FLATDATA(Params().MessageStart());\n     ssPeers << addr;\n-    uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n+    blob256 hash = Hash(ssPeers.begin(), ssPeers.end());\n     ssPeers << hash;\n \n     // open temp output file, and associate with CAutoFile\n@@ -1877,13 +1877,13 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n     // use file size to size memory buffer\n     int fileSize = boost::filesystem::file_size(pathAddr);\n-    int dataSize = fileSize - sizeof(uint256);\n+    int dataSize = fileSize - sizeof(blob256);\n     // Don't try to resize to a negative number if file is small\n     if (dataSize < 0)\n         dataSize = 0;\n     vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n-    uint256 hashIn;\n+    blob256 hashIn;\n \n     // read data and checksum from file\n     try {\n@@ -1898,7 +1898,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     CDataStream ssPeers(vchData, SER_DISK, CLIENT_VERSION);\n \n     // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n+    blob256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n     if (hashIn != hashTmp)\n         return error(\"%s : Checksum mismatch, data corrupted\", __func__);\n \n@@ -1948,7 +1948,7 @@ CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fIn\n     nRefCount = 0;\n     nSendSize = 0;\n     nSendOffset = 0;\n-    hashContinue = uint256();\n+    hashContinue = blob256();\n     nStartingHeight = -1;\n     fGetAddr = false;\n     fRelayTxes = false;\n@@ -2055,7 +2055,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n     memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n \n     // Set the checksum\n-    uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());\n+    blob256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());\n     unsigned int nChecksum = 0;\n     memcpy(&nChecksum, &hash, sizeof(nChecksum));\n     assert(ssSend.size () >= CMessageHeader::CHECKSUM_OFFSET + sizeof(nChecksum));"
      },
      {
        "sha": "8a057afe354be371bcca3ebde82894eebdd0a41b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -16,7 +16,7 @@\n #include \"random.h\"\n #include \"streams.h\"\n #include \"sync.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"utilstrencodings.h\"\n \n #include <deque>\n@@ -277,14 +277,14 @@ class CNode\n     void Fuzz(int nChance); // modifies ssSend\n \n public:\n-    uint256 hashContinue;\n+    blob256 hashContinue;\n     int nStartingHeight;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n     mruset<CAddress> setAddrKnown;\n     bool fGetAddr;\n-    std::set<uint256> setKnown;\n+    std::set<blob256> setKnown;\n \n     // inventory based relay\n     mruset<CInv> setInventoryKnown;"
      },
      {
        "sha": "50274e1af8b96f828110b450552ed830d5e988f3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"hash.h\"\n #include \"sync.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -951,7 +951,7 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n \n uint64_t CNetAddr::GetHash() const\n {\n-    uint256 hash = Hash(&ip[0], &ip[16]);\n+    blob256 hash = Hash(&ip[0], &ip[16]);\n     uint64_t nRet;\n     memcpy(&nRet, &hash, sizeof(nRet));\n     return nRet;"
      },
      {
        "sha": "060a52238a1f380a23dc7981234516a2bc85a13e",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -75,7 +75,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n+bool CheckProofOfWork(blob256 hash, unsigned int nBits)\n {\n     bool fNegative;\n     bool fOverflow;"
      },
      {
        "sha": "e4d1b319a8a523937883e6f810d891d96f33f165",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -15,7 +15,7 @@ class uint256;\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+bool CheckProofOfWork(blob256 hash, unsigned int nBits);\n uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "7a71fbf5088a38532a539c56c43eaf89f784f64c",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,12 +9,12 @@\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n \n-uint256 CBlockHeader::GetHash() const\n+blob256 CBlockHeader::GetHash() const\n {\n     return Hash(BEGIN(nVersion), END(nNonce));\n }\n \n-uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n+blob256 CBlock::BuildMerkleTree(bool* fMutated) const\n {\n     /* WARNING! If you're reading this because you're learning about crypto\n        and/or designing a new system that will use merkle trees, keep in mind\n@@ -74,14 +74,14 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     if (fMutated) {\n         *fMutated = mutated;\n     }\n-    return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n+    return (vMerkleTree.empty() ? blob256() : vMerkleTree.back());\n }\n \n-std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n+std::vector<blob256> CBlock::GetMerkleBranch(int nIndex) const\n {\n     if (vMerkleTree.empty())\n         BuildMerkleTree();\n-    std::vector<uint256> vMerkleBranch;\n+    std::vector<blob256> vMerkleBranch;\n     int j = 0;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n     {\n@@ -93,11 +93,11 @@ std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n     return vMerkleBranch;\n }\n \n-uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n+blob256 CBlock::CheckMerkleBranch(blob256 hash, const std::vector<blob256>& vMerkleBranch, int nIndex)\n {\n     if (nIndex == -1)\n-        return uint256();\n-    for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n+        return blob256();\n+    for (std::vector<blob256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n     {\n         if (nIndex & 1)\n             hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));"
      },
      {
        "sha": "5bbaa6117feed6f48d37a88b481bea00f1abaccd",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n@@ -26,8 +26,8 @@ class CBlockHeader\n     // header\n     static const int32_t CURRENT_VERSION=2;\n     int32_t nVersion;\n-    uint256 hashPrevBlock;\n-    uint256 hashMerkleRoot;\n+    blob256 hashPrevBlock;\n+    blob256 hashMerkleRoot;\n     uint32_t nTime;\n     uint32_t nBits;\n     uint32_t nNonce;\n@@ -65,7 +65,7 @@ class CBlockHeader\n         return (nBits == 0);\n     }\n \n-    uint256 GetHash() const;\n+    blob256 GetHash() const;\n \n     int64_t GetBlockTime() const\n     {\n@@ -81,7 +81,7 @@ class CBlock : public CBlockHeader\n     std::vector<CTransaction> vtx;\n \n     // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n+    mutable std::vector<blob256> vMerkleTree;\n \n     CBlock()\n     {\n@@ -125,10 +125,10 @@ class CBlock : public CBlockHeader\n     // If non-NULL, *mutated is set to whether mutation was detected in the merkle\n     // tree (a duplication of transactions in the block leading to an identical\n     // merkle root).\n-    uint256 BuildMerkleTree(bool* mutated = NULL) const;\n+    blob256 BuildMerkleTree(bool* mutated = NULL) const;\n \n-    std::vector<uint256> GetMerkleBranch(int nIndex) const;\n-    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);\n+    std::vector<blob256> GetMerkleBranch(int nIndex) const;\n+    static blob256 CheckMerkleBranch(blob256 hash, const std::vector<blob256>& vMerkleBranch, int nIndex);\n     std::string ToString() const;\n };\n \n@@ -139,11 +139,11 @@ class CBlock : public CBlockHeader\n  */\n struct CBlockLocator\n {\n-    std::vector<uint256> vHave;\n+    std::vector<blob256> vHave;\n \n     CBlockLocator() {}\n \n-    CBlockLocator(const std::vector<uint256>& vHaveIn)\n+    CBlockLocator(const std::vector<blob256>& vHaveIn)\n     {\n         vHave = vHaveIn;\n     }"
      },
      {
        "sha": "c39302917af25bff642bf069cb0e7445e2d45e26",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -21,7 +21,7 @@ CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n     nSequence = nSequenceIn;\n }\n \n-CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n+CTxIn::CTxIn(blob256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = COutPoint(hashPrevTx, nOut);\n     scriptSig = scriptSigIn;\n@@ -49,7 +49,7 @@ CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n     scriptPubKey = scriptPubKeyIn;\n }\n \n-uint256 CTxOut::GetHash() const\n+blob256 CTxOut::GetHash() const\n {\n     return SerializeHash(*this);\n }\n@@ -62,14 +62,14 @@ std::string CTxOut::ToString() const\n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n \n-uint256 CMutableTransaction::GetHash() const\n+blob256 CMutableTransaction::GetHash() const\n {\n     return SerializeHash(*this);\n }\n \n void CTransaction::UpdateHash() const\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n+    *const_cast<blob256*>(&hash) = SerializeHash(*this);\n }\n \n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n@@ -83,7 +83,7 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n     *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n     *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n-    *const_cast<uint256*>(&hash) = tx.hash;\n+    *const_cast<blob256*>(&hash) = tx.hash;\n     return *this;\n }\n "
      },
      {
        "sha": "6ebe2e2287a5de27bb97469b6bb73178f1684f85",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,17 +9,17 @@\n #include \"amount.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n public:\n-    uint256 hash;\n+    blob256 hash;\n     uint32_t n;\n \n     COutPoint() { SetNull(); }\n-    COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n+    COutPoint(blob256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -66,7 +66,7 @@ class CTxIn\n     }\n \n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n+    CTxIn(blob256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -132,7 +132,7 @@ class CTxOut\n         return (nValue == -1);\n     }\n \n-    uint256 GetHash() const;\n+    blob256 GetHash() const;\n \n     bool IsDust(CFeeRate minRelayTxFee) const\n     {\n@@ -171,7 +171,7 @@ class CTransaction\n {\n private:\n     /** Memory only. */\n-    const uint256 hash;\n+    const blob256 hash;\n     void UpdateHash() const;\n \n public:\n@@ -212,7 +212,7 @@ class CTransaction\n         return vin.empty() && vout.empty();\n     }\n \n-    const uint256& GetHash() const {\n+    const blob256& GetHash() const {\n         return hash;\n     }\n \n@@ -270,7 +270,7 @@ struct CMutableTransaction\n     /** Compute the hash of this CMutableTransaction. This is computed on the\n      * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n      */\n-    uint256 GetHash() const;\n+    blob256 GetHash() const;\n };\n \n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "0e8c216ca4962bad20dcb2e49f074c9601b56800",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -99,13 +99,13 @@ CInv::CInv()\n     hash.SetNull();\n }\n \n-CInv::CInv(int typeIn, const uint256& hashIn)\n+CInv::CInv(int typeIn, const blob256& hashIn)\n {\n     type = typeIn;\n     hash = hashIn;\n }\n \n-CInv::CInv(const std::string& strType, const uint256& hashIn)\n+CInv::CInv(const std::string& strType, const blob256& hashIn)\n {\n     unsigned int i;\n     for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n@@ -117,7 +117,7 @@ CInv::CInv(const std::string& strType, const uint256& hashIn)\n         }\n     }\n     if (i == ARRAYLEN(ppszTypeName))\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType));\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, blob256) : unknown type '%s'\", strType));\n     hash = hashIn;\n }\n "
      },
      {
        "sha": "c34aa87688fc30357ef366c15ff4262a3adbc438",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -12,7 +12,7 @@\n \n #include \"netbase.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"version.h\"\n \n #include <stdint.h>\n@@ -117,8 +117,8 @@ class CInv\n {\n public:\n     CInv();\n-    CInv(int typeIn, const uint256& hashIn);\n-    CInv(const std::string& strType, const uint256& hashIn);\n+    CInv(int typeIn, const blob256& hashIn);\n+    CInv(const std::string& strType, const blob256& hashIn);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -138,7 +138,7 @@ class CInv\n     // TODO: make private (improves encapsulation)\n public:\n     int type;\n-    uint256 hash;\n+    blob256 hash;\n };\n \n enum {"
      },
      {
        "sha": "32e21bd77c792ec3912bb2c07eb2da65be55ec8b",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -12,7 +12,7 @@\n #include \"ecwrapper.h\"\n #endif\n \n-bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n+bool CPubKey::Verify(const blob256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n #ifdef USE_SECP256K1\n@@ -28,7 +28,7 @@ bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchS\n     return true;\n }\n \n-bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n+bool CPubKey::RecoverCompact(const blob256 &hash, const std::vector<unsigned char>& vchSig) {\n     if (vchSig.size() != 65)\n         return false;\n     int recid = (vchSig[0] - 27) & 3;"
      },
      {
        "sha": "10c1e361b8a186b835c6b6191e96ce0d38d08309",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"hash.h\"\n #include \"serialize.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <stdexcept>\n #include <vector>\n@@ -24,11 +24,11 @@\n  */\n \n /** A reference to a CKey: the Hash160 of its serialized public key */\n-class CKeyID : public uint160\n+class CKeyID : public blob160\n {\n public:\n-    CKeyID() : uint160() {}\n-    CKeyID(const uint160& in) : uint160(in) {}\n+    CKeyID() : blob160() {}\n+    CKeyID(const blob160& in) : blob160(in) {}\n };\n \n /** An encapsulated public key. */\n@@ -145,7 +145,7 @@ class CPubKey\n     }\n \n     //! Get the 256-bit hash of this public key.\n-    uint256 GetHash() const\n+    blob256 GetHash() const\n     {\n         return Hash(vch, vch + size());\n     }\n@@ -173,10 +173,10 @@ class CPubKey\n      * Verify a DER signature (~72 bytes).\n      * If this public key is not fully valid, the return value will be false.\n      */\n-    bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n+    bool Verify(const blob256& hash, const std::vector<unsigned char>& vchSig) const;\n \n     //! Recover a public key from a compact signature.\n-    bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n+    bool RecoverCompact(const blob256& hash, const std::vector<unsigned char>& vchSig);\n \n     //! Turn this public key into an uncompressed public key.\n     bool Decompress();"
      },
      {
        "sha": "4de32b84924d0d7b1ede349b72093b07a9a19c74",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -132,7 +132,7 @@ void ClientModel::updateAlert(const QString &hash, int status)\n     // Show error message notification for new alert\n     if(status == CT_NEW)\n     {\n-        uint256 hash_256;\n+        blob256 hash_256;\n         hash_256.SetHex(hash.toStdString());\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n@@ -217,7 +217,7 @@ static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConn\n                               Q_ARG(int, newNumConnections));\n }\n \n-static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n+static void NotifyAlertChanged(ClientModel *clientmodel, const blob256 &hash, ChangeType status)\n {\n     qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,"
      },
      {
        "sha": "22cf8d9527755896d2a389030ce2785e74736941",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -490,7 +490,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n-        uint256 txhash = out.tx->GetHash();\n+        blob256 txhash = out.tx->GetHash();\n         COutPoint outpt(txhash, out.i);\n         if (model->isSpent(outpt))\n         {\n@@ -764,7 +764,7 @@ void CoinControlDialog::updateView()\n             nInputSum    += nInputSize;\n \n             // transaction hash\n-            uint256 txhash = out.tx->GetHash();\n+            blob256 txhash = out.tx->GetHash();\n             itemOutput->setText(COLUMN_TXHASH, QString::fromStdString(txhash.GetHex()));\n \n             // vout index"
      },
      {
        "sha": "97ba47ddce504bca4b6911178f1b5641d6168d1a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -35,7 +35,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n     CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n     CAmount nNet = nCredit - nDebit;\n-    uint256 hash = wtx.GetHash();\n+    blob256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n     if (nNet > 0 || wtx.IsCoinBase())\n@@ -259,7 +259,7 @@ QString TransactionRecord::getTxID() const\n     return formatSubTxId(hash, idx);\n }\n \n-QString TransactionRecord::formatSubTxId(const uint256 &hash, int vout)\n+QString TransactionRecord::formatSubTxId(const blob256 &hash, int vout)\n {\n     return QString::fromStdString(hash.ToString() + strprintf(\"-%03d\", vout));\n }"
      },
      {
        "sha": "de4bb2967be7886fb8d3fde746a59c34948b13dc",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n #include \"amount.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <QList>\n #include <QString>\n@@ -87,13 +87,13 @@ class TransactionRecord\n     {\n     }\n \n-    TransactionRecord(uint256 hash, qint64 time):\n+    TransactionRecord(blob256 hash, qint64 time):\n             hash(hash), time(time), type(Other), address(\"\"), debit(0),\n             credit(0), idx(0)\n     {\n     }\n \n-    TransactionRecord(uint256 hash, qint64 time,\n+    TransactionRecord(blob256 hash, qint64 time,\n                 Type type, const std::string &address,\n                 const CAmount& debit, const CAmount& credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n@@ -108,7 +108,7 @@ class TransactionRecord\n \n     /** @name Immutable transaction attributes\n       @{*/\n-    uint256 hash;\n+    blob256 hash;\n     qint64 time;\n     Type type;\n     std::string address;\n@@ -129,7 +129,7 @@ class TransactionRecord\n     QString getTxID() const;\n \n     /** Format subtransaction id */\n-    static QString formatSubTxId(const uint256 &hash, int vout);\n+    static QString formatSubTxId(const blob256 &hash, int vout);\n \n     /** Update status from core wallet tx.\n      */"
      },
      {
        "sha": "00de02e8ed62a6c0d046db49a3bce2c4efc73c81",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -14,7 +14,7 @@\n \n #include \"main.h\"\n #include \"sync.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n #include \"wallet.h\"\n \n@@ -41,11 +41,11 @@ struct TxLessThan\n     {\n         return a.hash < b.hash;\n     }\n-    bool operator()(const TransactionRecord &a, const uint256 &b) const\n+    bool operator()(const TransactionRecord &a, const blob256 &b) const\n     {\n         return a.hash < b;\n     }\n-    bool operator()(const uint256 &a, const TransactionRecord &b) const\n+    bool operator()(const blob256 &a, const TransactionRecord &b) const\n     {\n         return a < b.hash;\n     }\n@@ -78,7 +78,7 @@ class TransactionTablePriv\n         cachedWallet.clear();\n         {\n             LOCK2(cs_main, wallet->cs_wallet);\n-            for(std::map<uint256, CWalletTx>::iterator it = wallet->mapWallet.begin(); it != wallet->mapWallet.end(); ++it)\n+            for(std::map<blob256, CWalletTx>::iterator it = wallet->mapWallet.begin(); it != wallet->mapWallet.end(); ++it)\n             {\n                 if(TransactionRecord::showTransaction(it->second))\n                     cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, it->second));\n@@ -91,7 +91,7 @@ class TransactionTablePriv\n \n        Call with transaction that was added, removed or changed.\n      */\n-    void updateWallet(const uint256 &hash, int status, bool showTransaction)\n+    void updateWallet(const blob256 &hash, int status, bool showTransaction)\n     {\n         qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n@@ -128,7 +128,7 @@ class TransactionTablePriv\n             {\n                 LOCK2(cs_main, wallet->cs_wallet);\n                 // Find transaction in wallet\n-                std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n+                std::map<blob256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n                 if(mi == wallet->mapWallet.end())\n                 {\n                     qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n@@ -192,7 +192,7 @@ class TransactionTablePriv\n                 TRY_LOCK(wallet->cs_wallet, lockWallet);\n                 if(lockWallet && rec->statusUpdateNeeded())\n                 {\n-                    std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n+                    std::map<blob256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n \n                     if(mi != wallet->mapWallet.end())\n                     {\n@@ -209,7 +209,7 @@ class TransactionTablePriv\n     {\n         {\n             LOCK2(cs_main, wallet->cs_wallet);\n-            std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n+            std::map<blob256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n             if(mi != wallet->mapWallet.end())\n             {\n                 return TransactionDesc::toHTML(wallet, mi->second, rec, unit);\n@@ -249,7 +249,7 @@ void TransactionTableModel::updateAmountColumnTitle()\n \n void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n {\n-    uint256 updated;\n+    blob256 updated;\n     updated.SetHex(hash.toStdString());\n \n     priv->updateWallet(updated, status, showTransaction);\n@@ -652,7 +652,7 @@ struct TransactionNotification\n {\n public:\n     TransactionNotification() {}\n-    TransactionNotification(uint256 hash, ChangeType status, bool showTransaction):\n+    TransactionNotification(blob256 hash, ChangeType status, bool showTransaction):\n         hash(hash), status(status), showTransaction(showTransaction) {}\n \n     void invoke(QObject *ttm)\n@@ -665,18 +665,18 @@ struct TransactionNotification\n                                   Q_ARG(bool, showTransaction));\n     }\n private:\n-    uint256 hash;\n+    blob256 hash;\n     ChangeType status;\n     bool showTransaction;\n };\n \n static bool fQueueNotifications = false;\n static std::vector< TransactionNotification > vQueueNotifications;\n \n-static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const uint256 &hash, ChangeType status)\n+static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const blob256 &hash, ChangeType status)\n {\n     // Find transaction in wallet\n-    std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n+    std::map<blob256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n     // Determine whether to show transaction or not (determine this here so that no relocking is needed in GUI thread)\n     bool inWallet = mi != wallet->mapWallet.end();\n     bool showTransaction = (inWallet && TransactionRecord::showTransaction(mi->second));"
      },
      {
        "sha": "07237d91689cf04ae6d3e20f64b44939725bf834",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -455,7 +455,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n                               Q_ARG(int, status));\n }\n \n-static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)\n+static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const blob256 &hash, ChangeType status)\n {\n     Q_UNUSED(wallet);\n     Q_UNUSED(hash);\n@@ -597,7 +597,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n     }\n }\n \n-bool WalletModel::isLockedCoin(uint256 hash, unsigned int n) const\n+bool WalletModel::isLockedCoin(blob256 hash, unsigned int n) const\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n     return wallet->IsLockedCoin(hash, n);"
      },
      {
        "sha": "1823a8f291fb13f70f479f65802367803b22ce58",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -27,7 +27,7 @@ class COutPoint;\n class COutput;\n class CPubKey;\n class CWallet;\n-class uint256;\n+class blob256;\n \n QT_BEGIN_NAMESPACE\n class QTimer;\n@@ -187,7 +187,7 @@ class WalletModel : public QObject\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;\n \n-    bool isLockedCoin(uint256 hash, unsigned int n) const;\n+    bool isLockedCoin(blob256 hash, unsigned int n) const;\n     void lockCoin(COutPoint& output);\n     void unlockCoin(COutPoint& output);\n     void listLockedCoins(std::vector<COutPoint>& vOutpts);"
      },
      {
        "sha": "685aaec82a8e7341dcb2b4a759c0ccd836a51f35",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -110,9 +110,9 @@ int GetRandInt(int nMax)\n     return GetRand(nMax);\n }\n \n-uint256 GetRandHash()\n+blob256 GetRandHash()\n {\n-    uint256 hash;\n+    blob256 hash;\n     GetRandBytes((unsigned char*)&hash, sizeof(hash));\n     return hash;\n }"
      },
      {
        "sha": "8b9b27584ee8afda816e1d4c877059c3cb990b24",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_RANDOM_H\n #define BITCOIN_RANDOM_H\n \n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <stdint.h>\n \n@@ -22,7 +22,7 @@ void RandAddSeedPerfmon();\n void GetRandBytes(unsigned char* buf, int num);\n uint64_t GetRand(uint64_t nMax);\n int GetRandInt(int nMax);\n-uint256 GetRandHash();\n+blob256 GetRandHash();\n \n /**\n  * Seed insecure_rand using the random pool."
      },
      {
        "sha": "709b767e9a84bce9178b83673954112dcff38a82",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -41,7 +41,7 @@ class RestErr\n     string message;\n };\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry);\n+extern void TxToJSON(const CTransaction& tx, const blob256 hashBlock, Object& entry);\n extern Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n@@ -80,7 +80,7 @@ static string AvailableDataFormatsString()\n     return formats;\n }\n \n-static bool ParseHashStr(const string& strReq, uint256& v)\n+static bool ParseHashStr(const string& strReq, blob256& v)\n {\n     if (!IsHex(strReq) || (strReq.size() != 64))\n         return false;\n@@ -99,7 +99,7 @@ static bool rest_block(AcceptedConnection* conn,\n     enum RetFormat rf = ParseDataFormat(params, strReq);\n \n     string hashStr = params[0];\n-    uint256 hash;\n+    blob256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n@@ -172,12 +172,12 @@ static bool rest_tx(AcceptedConnection* conn,\n     enum RetFormat rf = ParseDataFormat(params, strReq);\n \n     string hashStr = params[0];\n-    uint256 hash;\n+    blob256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CTransaction tx;\n-    uint256 hashBlock = uint256();\n+    blob256 hashBlock = blob256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n         throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n "
      },
      {
        "sha": "6be36224d9cd096b48b65e55db45f996a6be0e3f",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -16,7 +16,7 @@\n using namespace json_spirit;\n using namespace std;\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry);\n+extern void TxToJSON(const CTransaction& tx, const blob256 hashBlock, Object& entry);\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex);\n \n double GetDifficulty(const CBlockIndex* blockindex)\n@@ -70,7 +70,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDe\n         if(txDetails)\n         {\n             Object objTx;\n-            TxToJSON(tx, uint256(), objTx);\n+            TxToJSON(tx, blob256(), objTx);\n             txs.push_back(objTx);\n         }\n         else\n@@ -181,9 +181,9 @@ Value getrawmempool(const Array& params, bool fHelp)\n     {\n         LOCK(mempool.cs);\n         Object o;\n-        BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+        BOOST_FOREACH(const PAIRTYPE(blob256, CTxMemPoolEntry)& entry, mempool.mapTx)\n         {\n-            const uint256& hash = entry.first;\n+            const blob256& hash = entry.first;\n             const CTxMemPoolEntry& e = entry.second;\n             Object info;\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n@@ -207,11 +207,11 @@ Value getrawmempool(const Array& params, bool fHelp)\n     }\n     else\n     {\n-        vector<uint256> vtxid;\n+        vector<blob256> vtxid;\n         mempool.queryHashes(vtxid);\n \n         Array a;\n-        BOOST_FOREACH(const uint256& hash, vtxid)\n+        BOOST_FOREACH(const blob256& hash, vtxid)\n             a.push_back(hash.ToString());\n \n         return a;\n@@ -530,9 +530,9 @@ Value getchaintips(const Array& params, bool fHelp)\n        known blocks, and successively remove blocks that appear as pprev\n        of another block.  */\n     std::set<const CBlockIndex*, CompareBlocksByHeight> setTips;\n-    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    BOOST_FOREACH(const PAIRTYPE(const blob256, CBlockIndex*)& item, mapBlockIndex)\n         setTips.insert(item.second);\n-    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    BOOST_FOREACH(const PAIRTYPE(const blob256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         const CBlockIndex* pprev = item.second->pprev;\n         if (pprev)"
      },
      {
        "sha": "aa6f91992de1f5db3e9db76c53cc9d65ab4900eb",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -288,7 +288,7 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n-    uint256 hash;\n+    blob256 hash;\n     hash.SetHex(params[0].get_str());\n \n     CAmount nAmount = params[2].get_int64();\n@@ -405,7 +405,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             if (!DecodeHexBlk(block, dataval.get_str()))\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n-            uint256 hash = block.GetHash();\n+            blob256 hash = block.GetHash();\n             BlockMap::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end()) {\n                 CBlockIndex *pindex = mi->second;\n@@ -440,7 +440,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (lpval.type() != null_type)\n     {\n         // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n-        uint256 hashWatchedChain;\n+        blob256 hashWatchedChain;\n         boost::system_time checktxtime;\n         unsigned int nTransactionsUpdatedLastLP;\n \n@@ -529,11 +529,11 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     static const Array aCaps = boost::assign::list_of(\"proposal\");\n \n     Array transactions;\n-    map<uint256, int64_t> setTxIndex;\n+    map<blob256, int64_t> setTxIndex;\n     int i = 0;\n     BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n     {\n-        uint256 txHash = tx.GetHash();\n+        blob256 txHash = tx.GetHash();\n         setTxIndex[txHash] = i++;\n \n         if (tx.IsCoinBase())\n@@ -597,11 +597,11 @@ Value getblocktemplate(const Array& params, bool fHelp)\n class submitblock_StateCatcher : public CValidationInterface\n {\n public:\n-    uint256 hash;\n+    blob256 hash;\n     bool found;\n     CValidationState state;\n \n-    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {};\n+    submitblock_StateCatcher(const blob256 &hashIn) : hash(hashIn), found(false), state() {};\n \n protected:\n     virtual void BlockChecked(const CBlock& block, const CValidationState& stateIn) {\n@@ -637,7 +637,7 @@ Value submitblock(const Array& params, bool fHelp)\n     if (!DecodeHexBlk(block, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n-    uint256 hash = block.GetHash();\n+    blob256 hash = block.GetHash();\n     BlockMap::iterator mi = mapBlockIndex.find(hash);\n     if (mi != mapBlockIndex.end()) {\n         CBlockIndex *pindex = mi->second;"
      },
      {
        "sha": "16ac621f4248cec07bf467239ade3d8a19e73c17",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -14,7 +14,7 @@\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -54,7 +54,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeH\n     out.push_back(Pair(\"addresses\", a));\n }\n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n+void TxToJSON(const CTransaction& tx, const blob256 hashBlock, Object& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n@@ -171,14 +171,14 @@ Value getrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n         );\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    blob256 hash = ParseHashV(params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n     if (params.size() > 1)\n         fVerbose = (params[1].get_int() != 0);\n \n     CTransaction tx;\n-    uint256 hashBlock;\n+    blob256 hashBlock;\n     if (!GetTransaction(hash, tx, hashBlock, true))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");\n \n@@ -346,7 +346,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     BOOST_FOREACH(const Value& input, inputs) {\n         const Object& o = input.get_obj();\n \n-        uint256 txid = ParseHashO(o, \"txid\");\n+        blob256 txid = ParseHashO(o, \"txid\");\n \n         const Value& vout_v = find_value(o, \"vout\");\n         if (vout_v.type() != int_type)\n@@ -438,7 +438,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     Object result;\n-    TxToJSON(tx, uint256(), result);\n+    TxToJSON(tx, blob256(), result);\n \n     return result;\n }\n@@ -568,7 +568,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n         BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n-            const uint256& prevHash = txin.prevout.hash;\n+            const blob256& prevHash = txin.prevout.hash;\n             CCoins coins;\n             view.AccessCoins(prevHash); // this is certainly allowed to fail\n         }\n@@ -608,7 +608,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n \n-            uint256 txid = ParseHashO(prevOut, \"txid\");\n+            blob256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n             if (nOut < 0)\n@@ -730,7 +730,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     CTransaction tx;\n     if (!DecodeHexTx(tx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-    uint256 hashTx = tx.GetHash();\n+    blob256 hashTx = tx.GetHash();\n \n     bool fOverrideFees = false;\n     if (params.size() > 1)"
      },
      {
        "sha": "d122863a14ece7019c442e4f0fbcd6b79b88a3be",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -108,18 +108,18 @@ Value ValueFromAmount(const CAmount& amount)\n     return (double)amount / (double)COIN;\n }\n \n-uint256 ParseHashV(const Value& v, string strName)\n+blob256 ParseHashV(const Value& v, string strName)\n {\n     string strHex;\n     if (v.type() == str_type)\n         strHex = v.get_str();\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n-    uint256 result;\n+    blob256 result;\n     result.SetHex(strHex);\n     return result;\n }\n-uint256 ParseHashO(const Object& o, string strKey)\n+blob256 ParseHashO(const Object& o, string strKey)\n {\n     return ParseHashV(find_value(o, strKey), strKey);\n }"
      },
      {
        "sha": "6d66050cc77e8e76839a76c8ddc6034a0dfef1ee",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"amount.h\"\n #include \"rpcprotocol.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <list>\n #include <map>\n@@ -120,8 +120,8 @@ extern const CRPCTable tableRPC;\n  * Utilities: convert hex-encoded Values\n  * (throws error if not hex).\n  */\n-extern uint256 ParseHashV(const json_spirit::Value& v, std::string strName);\n-extern uint256 ParseHashO(const json_spirit::Object& o, std::string strKey);\n+extern blob256 ParseHashV(const json_spirit::Value& v, std::string strName);\n+extern blob256 ParseHashO(const json_spirit::Object& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const json_spirit::Value& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const json_spirit::Object& o, std::string strKey);\n "
      },
      {
        "sha": "f1c4ea671a52aacc24663bebcbc6c81bf9e0bce1",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -55,10 +55,10 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n     }\n-    uint256 hash = wtx.GetHash();\n+    blob256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n     Array conflicts;\n-    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+    BOOST_FOREACH(const blob256& conflict, wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n@@ -127,7 +127,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     if (account.vchPubKey.IsValid())\n     {\n         CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n+        for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n              it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n         {\n@@ -523,7 +523,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n@@ -572,7 +572,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n@@ -596,7 +596,7 @@ CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     CAmount nBalance = 0;\n \n     // Tally wallet transactions\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n@@ -667,7 +667,7 @@ Value getbalance(const Array& params, bool fHelp)\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' 0 should return the same number\n         CAmount nBalance = 0;\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n@@ -961,7 +961,7 @@ struct tallyitem\n {\n     CAmount nAmount;\n     int nConf;\n-    vector<uint256> txids;\n+    vector<blob256> txids;\n     bool fIsWatchonly;\n     tallyitem()\n     {\n@@ -990,7 +990,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n@@ -1060,7 +1060,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             Array transactions;\n             if (it != mapTally.end())\n             {\n-                BOOST_FOREACH(const uint256& item, (*it).second.txids)\n+                BOOST_FOREACH(const blob256& item, (*it).second.txids)\n                 {\n                     transactions.push_back(item.GetHex());\n                 }\n@@ -1397,7 +1397,7 @@ Value listaccounts(const Array& params, bool fHelp)\n             mapAccountBalances[entry.second.name] = 0;\n     }\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         CAmount nFee;\n@@ -1477,7 +1477,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     if (params.size() > 0)\n     {\n-        uint256 blockId;\n+        blob256 blockId;\n \n         blockId.SetHex(params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n@@ -1501,7 +1501,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     Array transactions;\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n+    for (map<blob256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n@@ -1510,7 +1510,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n-    uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n+    blob256 lastblock = pblockLast ? pblockLast->GetBlockHash() : blob256();\n \n     Object ret;\n     ret.push_back(Pair(\"transactions\", transactions));\n@@ -1557,7 +1557,7 @@ Value gettransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n-    uint256 hash;\n+    blob256 hash;\n     hash.SetHex(params[0].get_str());\n \n     isminefilter filter = ISMINE_SPENDABLE;"
      },
      {
        "sha": "1a9c120a9f0110d7a8082057c2d6cbd665c97f69",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -12,7 +12,7 @@\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"script/script.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n using namespace std;\n \n@@ -1028,7 +1028,7 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+blob256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n     if (nIn >= txTo.vin.size()) {\n@@ -1053,7 +1053,7 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const blob256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n@@ -1071,7 +1071,7 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    blob256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "f82581f462ec58837e30cbc7f1c1b68fb5555868",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -15,7 +15,7 @@\n class CPubKey;\n class CScript;\n class CTransaction;\n-class uint256;\n+class blob256;\n \n /** Signature hash types/flags */\n enum\n@@ -71,7 +71,7 @@ enum\n \n };\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+blob256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n class BaseSignatureChecker\n {\n@@ -91,7 +91,7 @@ class SignatureChecker : public BaseSignatureChecker\n     unsigned int nIn;\n \n protected:\n-    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const blob256& sighash) const;\n \n public:\n     SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}"
      },
      {
        "sha": "40c07452283721c3695ef7d24c43cbcc013dcedc",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"pubkey.h\"\n #include \"random.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n \n #include <boost/thread.hpp>\n@@ -24,13 +24,13 @@ class CSignatureCache\n {\n private:\n      //! sigdata_type is (signature hash, signature, public key):\n-    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n+    typedef boost::tuple<blob256, std::vector<unsigned char>, CPubKey> sigdata_type;\n     std::set< sigdata_type> setValid;\n     boost::shared_mutex cs_sigcache;\n \n public:\n     bool\n-    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    Get(const blob256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n     {\n         boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n \n@@ -41,7 +41,7 @@ class CSignatureCache\n         return false;\n     }\n \n-    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    void Set(const blob256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n     {\n         // DoS prevention: limit cache size to less than 10MB\n         // (~200 bytes per cache entry times 50,000 entries)\n@@ -58,7 +58,7 @@ class CSignatureCache\n             // foil would-be DoS attackers who might try to pre-generate\n             // and re-use a set of valid signatures just-slightly-greater\n             // than our cache size.\n-            uint256 randomHash = GetRandHash();\n+            blob256 randomHash = GetRandHash();\n             std::vector<unsigned char> unused;\n             std::set<sigdata_type>::iterator it =\n                 setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n@@ -74,7 +74,7 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const blob256& sighash) const\n {\n     static CSignatureCache signatureCache;\n "
      },
      {
        "sha": "2dd0a64b35428368e7fa732235c02ce2aed08761",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -20,7 +20,7 @@ class CachingSignatureChecker : public SignatureChecker\n public:\n     CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n-    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const blob256& sighash) const;\n };\n \n #endif // BITCOIN_SCRIPT_SIGCACHE_H"
      },
      {
        "sha": "e970c0744aa2e4f2925bda93e0148d64ca1b0710",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,15 +9,15 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script/standard.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <boost/foreach.hpp>\n \n using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool Sign1(const CKeyID& address, const CKeyStore& keystore, blob256 hash, int nHashType, CScript& scriptSigRet)\n {\n     CKey key;\n     if (!keystore.GetKey(address, key))\n@@ -32,7 +32,7 @@ bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int n\n     return true;\n }\n \n-bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, blob256 hash, int nHashType, CScript& scriptSigRet)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n@@ -52,7 +52,7 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n  * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, blob256 hash, int nHashType,\n                   CScript& scriptSigRet, txnouttype& whichTypeRet)\n {\n     scriptSigRet.clear();\n@@ -71,7 +71,7 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n         keyID = CPubKey(vSolutions[0]).GetID();\n         return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n     case TX_PUBKEYHASH:\n-        keyID = CKeyID(uint160(vSolutions[0]));\n+        keyID = CKeyID(blob160(vSolutions[0]));\n         if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n             return false;\n         else\n@@ -82,7 +82,7 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        return keystore.GetCScript(blob160(vSolutions[0]), scriptSigRet);\n \n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n@@ -98,7 +98,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n \n     // Leave out the signature from the hash, since a signature can't sign itself.\n     // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n+    blob256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n \n     txnouttype whichType;\n     if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n@@ -112,7 +112,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n         CScript subscript = txin.scriptSig;\n \n         // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n+        blob256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n \n         txnouttype subType;\n         bool fSolved ="
      },
      {
        "sha": "8f163a4c3cd5562d4a08bd57557897c4b42f6630",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -18,7 +18,7 @@ typedef vector<unsigned char> valtype;\n \n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n-CScriptID::CScriptID(const CScript& in) : uint160(in.size() ? Hash160(in.begin(), in.end()) : uint160()) {}\n+CScriptID::CScriptID(const CScript& in) : blob160(in.size() ? Hash160(in.begin(), in.end()) : blob160()) {}\n \n const char* GetTxnOutputType(txnouttype t)\n {\n@@ -125,7 +125,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n             }\n             else if (opcode2 == OP_PUBKEYHASH)\n             {\n-                if (vch1.size() != sizeof(uint160))\n+                if (vch1.size() != sizeof(blob160))\n                     break;\n                 vSolutionsRet.push_back(vch1);\n             }\n@@ -218,12 +218,12 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     }\n     else if (whichType == TX_PUBKEYHASH)\n     {\n-        addressRet = CKeyID(uint160(vSolutions[0]));\n+        addressRet = CKeyID(blob160(vSolutions[0]));\n         return true;\n     }\n     else if (whichType == TX_SCRIPTHASH)\n     {\n-        addressRet = CScriptID(uint160(vSolutions[0]));\n+        addressRet = CScriptID(blob160(vSolutions[0]));\n         return true;\n     }\n     // Multisig txns have more than one address..."
      },
      {
        "sha": "ecb2e56572a9125a6d9c05121db628e85c69c3d5",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_SCRIPT_STANDARD_H\n \n #include \"script/interpreter.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <boost/variant.hpp>\n \n@@ -17,12 +17,12 @@ class CKeyID;\n class CScript;\n \n /** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n-class CScriptID : public uint160\n+class CScriptID : public blob160\n {\n public:\n-    CScriptID() : uint160() {}\n+    CScriptID() : blob160() {}\n     CScriptID(const CScript& in);\n-    CScriptID(const uint160& in) : uint160(in) {}\n+    CScriptID(const blob160& in) : blob160(in) {}\n };\n \n static const unsigned int MAX_OP_RETURN_RELAY = 40;      //! bytes"
      },
      {
        "sha": "11ca5702727d2c44824f5a53133f0575f9f9bc8a",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"checkpoints.h\"\n \n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "5ce6af793936613975aadd8292654bd37358e8a9",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -31,8 +31,8 @@ struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n-extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n+extern std::map<blob256, COrphanTx> mapOrphanTransactions;\n+extern std::map<blob256, std::set<blob256> > mapOrphanTransactionsByPrev;\n \n CService ip(uint32_t i)\n {\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n CTransaction RandomOrphan()\n {\n-    std::map<uint256, COrphanTx>::iterator it;\n+    std::map<blob256, COrphanTx>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();"
      },
      {
        "sha": "6ae6376d6af6d51f847ddc28f2583aad1cc795f1",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -106,12 +106,12 @@ class TestPayloadVisitor : public boost::static_visitor<bool>\n     TestPayloadVisitor(std::vector<unsigned char> &exp_payload) : exp_payload(exp_payload) { }\n     bool operator()(const CKeyID &id) const\n     {\n-        uint160 exp_key(exp_payload);\n+        blob160 exp_key(exp_payload);\n         return exp_key == id;\n     }\n     bool operator()(const CScriptID &id) const\n     {\n-        uint160 exp_key(exp_payload);\n+        blob160 exp_key(exp_payload);\n         return exp_key == id;\n     }\n     bool operator()(const CNoDestination &no) const\n@@ -218,11 +218,11 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             CTxDestination dest;\n             if(exp_addrType == \"pubkey\")\n             {\n-                dest = CKeyID(uint160(exp_payload));\n+                dest = CKeyID(blob160(exp_payload));\n             }\n             else if(exp_addrType == \"script\")\n             {\n-                dest = CScriptID(uint160(exp_payload));\n+                dest = CScriptID(blob160(exp_payload));\n             }\n             else if(exp_addrType == \"none\")\n             {"
      },
      {
        "sha": "b407187ec84c34168d577d33ede3080d7b42cfff",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"base58.h\"\n #include \"key.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n \n #include <string>"
      },
      {
        "sha": "9b9df03cab2a4cc2e824f1a5e4ee2f570347dc1d",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -10,7 +10,7 @@\n #include \"merkleblock.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n \n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n-    uint160 hash = pubkey.GetID();\n+    blob160 hash = pubkey.GetID();\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -197,7 +197,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n@@ -242,12 +242,12 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    vector<uint256> vMatched;\n+    vector<blob256> vMatched;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -296,12 +296,12 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    vector<uint256> vMatched;\n+    vector<blob256> vMatched;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -351,7 +351,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    vector<uint256> vMatched;\n+    vector<blob256> vMatched;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n@@ -385,12 +385,12 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n-    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+    pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n-    vector<uint256> vMatched;\n+    vector<blob256> vMatched;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)"
      },
      {
        "sha": "1c105b1a3e0c7e448946cdda56b2019bdfc4e398",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"coins.h\"\n #include \"random.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <vector>\n #include <map>\n@@ -15,13 +15,13 @@ namespace\n {\n class CCoinsViewTest : public CCoinsView\n {\n-    uint256 hashBestBlock_;\n-    std::map<uint256, CCoins> map_;\n+    blob256 hashBestBlock_;\n+    std::map<blob256, CCoins> map_;\n \n public:\n-    bool GetCoins(const uint256& txid, CCoins& coins) const\n+    bool GetCoins(const blob256& txid, CCoins& coins) const\n     {\n-        std::map<uint256, CCoins>::const_iterator it = map_.find(txid);\n+        std::map<blob256, CCoins>::const_iterator it = map_.find(txid);\n         if (it == map_.end()) {\n             return false;\n         }\n@@ -33,15 +33,15 @@ class CCoinsViewTest : public CCoinsView\n         return true;\n     }\n \n-    bool HaveCoins(const uint256& txid) const\n+    bool HaveCoins(const blob256& txid) const\n     {\n         CCoins coins;\n         return GetCoins(txid, coins);\n     }\n \n-    uint256 GetBestBlock() const { return hashBestBlock_; }\n+    blob256 GetBestBlock() const { return hashBestBlock_; }\n \n-    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n+    bool BatchWrite(CCoinsMap& mapCoins, const blob256& hashBlock)\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n             map_[it->first] = it->second.coins;\n@@ -85,15 +85,15 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     bool missed_an_entry = false;\n \n     // A simple map to track what we expect the cache stack to represent.\n-    std::map<uint256, CCoins> result;\n+    std::map<blob256, CCoins> result;\n \n     // The cache stack.\n     CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n     std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCache(&base)); // Start with one cache.\n \n     // Use a limited set of random transaction ids, so we do test overwriting entries.\n-    std::vector<uint256> txids;\n+    std::vector<blob256> txids;\n     txids.resize(NUM_SIMULATION_ITERATIONS / 8);\n     for (unsigned int i = 0; i < txids.size(); i++) {\n         txids[i] = GetRandHash();\n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n         // Do a random modification.\n         {\n-            uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n+            blob256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n             CCoins& coins = result[txid];\n             CCoinsModifier entry = stack.back()->ModifyCoins(txid);\n             BOOST_CHECK(coins == *entry);\n@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n         if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n-            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+            for (std::map<blob256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n                 const CCoins* coins = stack.back()->AccessCoins(it->first);\n                 if (coins) {\n                     BOOST_CHECK(*coins == it->second);"
      },
      {
        "sha": "9588ac750cac4584f522ba8639c5bb6e0ae710e0",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"base58.h\"\n #include \"script/script.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -31,7 +31,7 @@ static const string strAddressBad(\"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF\");\n \n \n #ifdef KEY_TESTS_DUMPINFO\n-void dumpKeyInfo(uint256 privkey)\n+void dumpKeyInfo(blob256 privkey)\n {\n     CKey key;\n     key.resize(32);\n@@ -111,7 +111,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     for (int n=0; n<16; n++)\n     {\n         string strMsg = strprintf(\"Very secret message %i: 11\", n);\n-        uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+        blob256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n \n         // normal signatures\n \n@@ -168,7 +168,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n \n     std::vector<unsigned char> detsig, detsigc;\n     string strMsg = \"Very deterministic message\";\n-    uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+    blob256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);"
      },
      {
        "sha": "9e972baae6c8905f1c56cc7d241910a96b42c224",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -5,7 +5,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -54,7 +54,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n     CScript script;\n-    uint256 hash;\n+    blob256 hash;\n \n     LOCK(cs_main);\n     Checkpoints::fEnabled = false;"
      },
      {
        "sha": "9f4610feb9db8b617d7a4f30b48b4c617d7e1a3e",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -9,7 +9,7 @@\n #include \"script/script_error.h\"\n #include \"script/interpreter.h\"\n #include \"script/sign.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\"\n@@ -29,7 +29,7 @@ BOOST_AUTO_TEST_SUITE(multisig_tests)\n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+    blob256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround"
      },
      {
        "sha": "0566e482aa9e84f77d6c2add65395e83d04840d9",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -5,7 +5,7 @@\n #include \"merkleblock.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"version.h\"\n \n #include <vector>\n@@ -44,8 +44,8 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         }\n \n         // calculate actual merkle root and height\n-        uint256 merkleRoot1 = block.BuildMerkleTree();\n-        std::vector<uint256> vTxid(nTx, uint256());\n+        blob256 merkleRoot1 = block.BuildMerkleTree();\n+        std::vector<blob256> vTxid(nTx, blob256());\n         for (unsigned int j=0; j<nTx; j++)\n             vTxid[j] = block.vtx[j].GetHash();\n         int nHeight = 1, nTx_ = nTx;\n@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         for (int att = 1; att < 15; att++) {\n             // build random subset of txid's\n             std::vector<bool> vMatch(nTx, false);\n-            std::vector<uint256> vMatchTxid1;\n+            std::vector<blob256> vMatchTxid1;\n             for (unsigned int j=0; j<nTx; j++) {\n                 bool fInclude = (rand() & ((1 << (att/2)) - 1)) == 0;\n                 vMatch[j] = fInclude;\n@@ -82,8 +82,8 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             ss >> pmt2;\n \n             // extract merkle root and matched txids from copy\n-            std::vector<uint256> vMatchTxid2;\n-            uint256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2);\n+            std::vector<blob256> vMatchTxid2;\n+            blob256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2);\n \n             // check that it has the same merkle root as the original, and a valid one\n             BOOST_CHECK(merkleRoot1 == merkleRoot2);\n@@ -96,8 +96,8 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             for (int j=0; j<4; j++) {\n                 CPartialMerkleTreeTester pmt3(pmt2);\n                 pmt3.Damage();\n-                std::vector<uint256> vMatchTxid3;\n-                uint256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3);\n+                std::vector<blob256> vMatchTxid3;\n+                blob256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3);\n                 BOOST_CHECK(merkleRoot3 != merkleRoot1);\n             }\n         }"
      },
      {
        "sha": "2eae8a7de691c211bd69af5891a87d5ae9b18ac7",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(set)\n BOOST_AUTO_TEST_CASE(is)\n {\n     // Test CScript::IsPayToScriptHash()\n-    uint160 dummy;\n+    blob160 dummy;\n     CScript p2sh;\n     p2sh << OP_HASH160 << ToByteVector(dummy) << OP_EQUAL;\n     BOOST_CHECK(p2sh.IsPayToScriptHash());"
      },
      {
        "sha": "5fecce1a0156b1fa4dcb59a53f2bfc0c0032461f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -246,7 +246,7 @@ class TestBuilder\n \n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        blob256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -629,7 +629,7 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n CScript\n sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL);\n+    blob256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL);\n \n     CScript result;\n     //\n@@ -824,15 +824,15 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n-    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL);\n+    blob256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n     vector<unsigned char> sig2;\n-    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE);\n+    blob256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n     vector<unsigned char> sig3;\n-    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE);\n+    blob256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n "
      },
      {
        "sha": "9219164c1024efbfbe618aba9e94ac0494551eb7",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -22,7 +22,7 @@ using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n \n // Old script.cpp SignatureHash function\n-uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+blob256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n     if (nIn >= txTo.vin.size())\n@@ -138,7 +138,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n         RandomScript(scriptCode);\n         int nIn = insecure_rand() % txTo.vin.size();\n \n-        uint256 sh, sho;\n+        blob256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n         sh = SignatureHash(scriptCode, txTo, nIn, nHashType);\n         #if defined(PRINT_SIGHASH_JSON)\n@@ -181,7 +181,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n \n         std::string raw_tx, raw_script, sigHashHex;\n         int nIn, nHashType;\n-        uint256 sh;\n+        blob256 sh;\n         CTransaction tx;\n         CScript scriptCode = CScript();\n \n@@ -193,7 +193,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           nHashType = test[3].get_int();\n           sigHashHex = test[4].get_str();\n \n-          uint256 sh;\n+          blob256 sh;\n           CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION);\n           stream >> tx;\n "
      },
      {
        "sha": "b7024eee5faf9c20709ecbdaf8d49933e3645443",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,7 +6,7 @@\n #include \"key.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <vector>\n \n@@ -32,7 +32,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 0U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 0U);\n \n-    uint160 dummy;\n+    blob160 dummy;\n     s1 << OP_1 << ToByteVector(dummy) << ToByteVector(dummy) << OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 2U);\n     s1 << OP_IF << OP_CHECKSIG << OP_ENDIF;"
      },
      {
        "sha": "7387c6f27a2ed1380da84ae65839350344e4f6f6",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(skiplist_test)\n BOOST_AUTO_TEST_CASE(getlocator_test)\n {\n     // Build a main chain 100000 blocks long.\n-    std::vector<uint256> vHashMain(100000);\n+    std::vector<blob256> vHashMain(100000);\n     std::vector<CBlockIndex> vBlocksMain(100000);\n     for (unsigned int i=0; i<vBlocksMain.size(); i++) {\n         vHashMain[i] = i; // Set the hash equal to the height, so we can quickly check the distances.\n@@ -59,7 +59,7 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n     }\n \n     // Build a branch that splits off at block 49999, 50000 blocks long.\n-    std::vector<uint256> vHashSide(50000);\n+    std::vector<blob256> vHashSide(50000);\n     std::vector<CBlockIndex> vBlocksSide(50000);\n     for (unsigned int i=0; i<vBlocksSide.size(); i++) {\n         vHashSide[i] = i + 50000 + (uint256(1) << 128); // Add 1<<128 to the hashes, so GetLow64() still returns the height."
      },
      {
        "sha": "62da83422b55154e07615a0e18e63c160d101b32",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -6,44 +6,44 @@\n #include \"txdb.h\"\n \n #include \"pow.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n \n #include <stdint.h>\n \n #include <boost/thread.hpp>\n \n using namespace std;\n \n-void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n+void static BatchWriteCoins(CLevelDBBatch &batch, const blob256 &hash, const CCoins &coins) {\n     if (coins.IsPruned())\n         batch.Erase(make_pair('c', hash));\n     else\n         batch.Write(make_pair('c', hash), coins);\n }\n \n-void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n+void static BatchWriteHashBestChain(CLevelDBBatch &batch, const blob256 &hash) {\n     batch.Write('B', hash);\n }\n \n CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n }\n \n-bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n+bool CCoinsViewDB::GetCoins(const blob256 &txid, CCoins &coins) const {\n     return db.Read(make_pair('c', txid), coins);\n }\n \n-bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n+bool CCoinsViewDB::HaveCoins(const blob256 &txid) const {\n     return db.Exists(make_pair('c', txid));\n }\n \n-uint256 CCoinsViewDB::GetBestBlock() const {\n-    uint256 hashBestChain;\n+blob256 CCoinsViewDB::GetBestBlock() const {\n+    blob256 hashBestChain;\n     if (!db.Read('B', hashBestChain))\n-        return uint256();\n+        return blob256();\n     return hashBestChain;\n }\n \n-bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n+bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock) {\n     CLevelDBBatch batch;\n     size_t count = 0;\n     size_t changed = 0;\n@@ -109,7 +109,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n                 ssValue >> coins;\n-                uint256 txhash;\n+                blob256 txhash;\n                 ssKey >> txhash;\n                 ss << txhash;\n                 ss << VARINT(coins.nVersion);\n@@ -151,13 +151,13 @@ bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockF\n     return WriteBatch(batch, true);\n }\n \n-bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n+bool CBlockTreeDB::ReadTxIndex(const blob256 &txid, CDiskTxPos &pos) {\n     return Read(make_pair('t', txid), pos);\n }\n \n-bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n+bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<blob256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n-    for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+    for (std::vector<std::pair<blob256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair('t', it->first), it->second);\n     return WriteBatch(batch);\n }\n@@ -179,7 +179,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n     CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256());\n+    ssKeySet << make_pair('b', blob256());\n     pcursor->Seek(ssKeySet.str());\n \n     // Load mapBlockIndex"
      },
      {
        "sha": "fb2a507e15bca471bc12d8720b8b7f024d6caa2f",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -15,7 +15,7 @@\n #include <vector>\n \n class CCoins;\n-class uint256;\n+class blob256;\n \n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 100;\n@@ -32,10 +32,10 @@ class CCoinsViewDB : public CCoinsView\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool GetCoins(const blob256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const blob256 &txid) const;\n+    blob256 GetBestBlock() const;\n+    bool BatchWrite(CCoinsMap &mapCoins, const blob256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n };\n \n@@ -53,8 +53,8 @@ class CBlockTreeDB : public CLevelDBWrapper\n     bool ReadLastBlockFile(int &nFile);\n     bool WriteReindexing(bool fReindex);\n     bool ReadReindexing(bool &fReindex);\n-    bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n-    bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool ReadTxIndex(const blob256 &txid, CDiskTxPos &pos);\n+    bool WriteTxIndex(const std::vector<std::pair<blob256, CDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts();"
      },
      {
        "sha": "9940345cf04f49d9f5cfd30d26d71338fb0b7213",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -383,7 +383,7 @@ CTxMemPool::~CTxMemPool()\n     delete minerPolicyEstimator;\n }\n \n-void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n+void CTxMemPool::pruneSpent(const blob256 &hashTx, CCoins &coins)\n {\n     LOCK(cs);\n \n@@ -409,7 +409,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n }\n \n \n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n+bool CTxMemPool::addUnchecked(const blob256& hash, const CTxMemPoolEntry &entry)\n {\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n@@ -432,11 +432,11 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     // Remove transaction from memory pool\n     {\n         LOCK(cs);\n-        std::deque<uint256> txToRemove;\n+        std::deque<blob256> txToRemove;\n         txToRemove.push_back(origTx.GetHash());\n         while (!txToRemove.empty())\n         {\n-            uint256 hash = txToRemove.front();\n+            blob256 hash = txToRemove.front();\n             txToRemove.pop_front();\n             if (!mapTx.count(hash))\n                 continue;\n@@ -465,10 +465,10 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (std::map<blob256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->second.GetTx();\n         BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            std::map<blob256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end())\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n@@ -512,7 +512,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     std::vector<CTxMemPoolEntry> entries;\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n-        uint256 hash = tx.GetHash();\n+        blob256 hash = tx.GetHash();\n         if (mapTx.count(hash))\n             entries.push_back(mapTx[hash]);\n     }\n@@ -549,14 +549,14 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (std::map<blob256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->second.GetTxSize();\n         const CTransaction& tx = it->second.GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            std::map<blob256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n@@ -597,8 +597,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         }\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n-        uint256 hash = it->second.ptx->GetHash();\n-        map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n+        blob256 hash = it->second.ptx->GetHash();\n+        map<blob256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n         const CTransaction& tx = it2->second.GetTx();\n         assert(it2 != mapTx.end());\n         assert(&tx == it->second.ptx);\n@@ -609,20 +609,20 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     assert(totalTxSize == checkTotal);\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(vector<blob256>& vtxid)\n {\n     vtxid.clear();\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (map<uint256, CTxMemPoolEntry>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+    for (map<blob256, CTxMemPoolEntry>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n         vtxid.push_back((*mi).first);\n }\n \n-bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n+bool CTxMemPool::lookup(blob256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n+    map<blob256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n     result = i->second.GetTx();\n     return true;\n@@ -674,7 +674,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const blob256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n@@ -685,18 +685,18 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const blob256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n+    std::map<blob256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n     const std::pair<double, CAmount> &deltas = pos->second;\n     dPriorityDelta += deltas.first;\n     nFeeDelta += deltas.second;\n }\n \n-void CTxMemPool::ClearPrioritisation(const uint256 hash)\n+void CTxMemPool::ClearPrioritisation(const blob256 hash)\n {\n     LOCK(cs);\n     mapDeltas.erase(hash);\n@@ -705,7 +705,7 @@ void CTxMemPool::ClearPrioritisation(const uint256 hash)\n \n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n-bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n+bool CCoinsViewMemPool::GetCoins(const blob256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n     // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n@@ -717,6 +717,6 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return (base->GetCoins(txid, coins) && !coins.IsPruned());\n }\n \n-bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n+bool CCoinsViewMemPool::HaveCoins(const blob256 &txid) const {\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }"
      },
      {
        "sha": "1af5005aec459d83d5f4578f1c3910f413e9a911",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -95,9 +95,9 @@ class CTxMemPool\n \n public:\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTxMemPoolEntry> mapTx;\n+    std::map<blob256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n-    std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n+    std::map<blob256, std::pair<double, CAmount> > mapDeltas;\n \n     CTxMemPool(const CFeeRate& _minRelayFee);\n     ~CTxMemPool();\n@@ -111,22 +111,22 @@ class CTxMemPool\n     void check(const CCoinsViewCache *pcoins) const;\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n-    bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n+    bool addUnchecked(const blob256& hash, const CTxMemPoolEntry &entry);\n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n     void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts);\n     void clear();\n-    void queryHashes(std::vector<uint256>& vtxid);\n-    void pruneSpent(const uint256& hash, CCoins &coins);\n+    void queryHashes(std::vector<blob256>& vtxid);\n+    void pruneSpent(const blob256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n-    void ClearPrioritisation(const uint256 hash);\n+    void PrioritiseTransaction(const blob256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void ApplyDeltas(const blob256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n+    void ClearPrioritisation(const blob256 hash);\n \n     unsigned long size()\n     {\n@@ -139,13 +139,13 @@ class CTxMemPool\n         return totalTxSize;\n     }\n \n-    bool exists(uint256 hash)\n+    bool exists(blob256 hash)\n     {\n         LOCK(cs);\n         return (mapTx.count(hash) != 0);\n     }\n \n-    bool lookup(uint256 hash, CTransaction& result) const;\n+    bool lookup(blob256 hash, CTransaction& result) const;\n \n     /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;\n@@ -169,8 +169,8 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n \n public:\n     CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const blob256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const blob256 &txid) const;\n };\n \n #endif // BITCOIN_TXMEMPOOL_H"
      },
      {
        "sha": "a4c8f21a82352e940bf0f6b6c375d19441a6bccb",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -14,7 +14,7 @@\n \n class CBasicKeyStore;\n class CWallet;\n-class uint256;\n+class blob256;\n \n /** General change type (added, updated, removed). */\n enum ChangeType\n@@ -88,7 +88,7 @@ class CClientUIInterface\n      * New, updated or cancelled alert.\n      * @note called with lock cs_mapAlerts held.\n      */\n-    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;\n+    boost::signals2::signal<void (const blob256 &hash, ChangeType status)> NotifyAlertChanged;\n \n     /** A wallet has been loaded. */\n     boost::signals2::signal<void (CWallet* wallet)> LoadWallet;\n@@ -97,7 +97,7 @@ class CClientUIInterface\n     boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;\n \n     /** New block has been accepted */\n-    boost::signals2::signal<void (const uint256& hash)> NotifyBlockTip;\n+    boost::signals2::signal<void (const blob256& hash)> NotifyBlockTip;\n };\n \n extern CClientUIInterface uiInterface;"
      },
      {
        "sha": "aff6e8f6d4f98bc263fd02c5f8d23d9c1c5ede53",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 42,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -56,10 +56,10 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue));\n }\n \n-const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n+const CWalletTx* CWallet::GetWalletTx(const blob256& hash) const\n {\n     LOCK(cs_wallet);\n-    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(hash);\n+    std::map<blob256, CWalletTx>::const_iterator it = mapWallet.find(hash);\n     if (it == mapWallet.end())\n         return NULL;\n     return &(it->second);\n@@ -316,12 +316,12 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n-set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+set<blob256> CWallet::GetConflicts(const blob256& txid) const\n {\n-    set<uint256> result;\n+    set<blob256> result;\n     AssertLockHeld(cs_wallet);\n \n-    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(txid);\n+    std::map<blob256, CWalletTx>::const_iterator it = mapWallet.find(txid);\n     if (it == mapWallet.end())\n         return result;\n     const CWalletTx& wtx = it->second;\n@@ -349,7 +349,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n     const CWalletTx* copyFrom = NULL;\n     for (TxSpends::iterator it = range.first; it != range.second; ++it)\n     {\n-        const uint256& hash = it->second;\n+        const blob256& hash = it->second;\n         int n = mapWallet[hash].nOrderPos;\n         if (n < nMinOrderPos)\n         {\n@@ -360,7 +360,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n     // Now copy data from copyFrom to rest:\n     for (TxSpends::iterator it = range.first; it != range.second; ++it)\n     {\n-        const uint256& hash = it->second;\n+        const blob256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n@@ -379,23 +379,23 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(const blob256& hash, unsigned int n) const\n {\n     const COutPoint outpoint(hash, n);\n     pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n     range = mapTxSpends.equal_range(outpoint);\n \n     for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n     {\n-        const uint256& wtxid = it->second;\n-        std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n+        const blob256& wtxid = it->second;\n+        std::map<blob256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n         if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= 0)\n             return true; // Spent\n     }\n     return false;\n }\n \n-void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n+void CWallet::AddToSpends(const COutPoint& outpoint, const blob256& wtxid)\n {\n     mapTxSpends.insert(make_pair(outpoint, wtxid));\n \n@@ -405,7 +405,7 @@ void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n }\n \n \n-void CWallet::AddToSpends(const uint256& wtxid)\n+void CWallet::AddToSpends(const blob256& wtxid)\n {\n     assert(mapWallet.count(wtxid));\n     CWalletTx& thisTx = mapWallet[wtxid];\n@@ -531,7 +531,7 @@ CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries,\n \n     // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n     // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n     {\n         CWalletTx* wtx = &((*it).second);\n         txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n@@ -550,14 +550,14 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        BOOST_FOREACH(PAIRTYPE(const blob256, CWalletTx)& item, mapWallet)\n             item.second.MarkDirty();\n     }\n }\n \n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n {\n-    uint256 hash = wtxIn.GetHash();\n+    blob256 hash = wtxIn.GetHash();\n \n     if (fFromLoadWallet)\n     {\n@@ -569,7 +569,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n     {\n         LOCK(cs_wallet);\n         // Inserts only if not already there, returns tx inserted or tx found\n-        pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n+        pair<map<blob256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n         CWalletTx& wtx = (*ret.first).second;\n         wtx.BindWallet(this);\n         bool fInsertedNew = ret.second;\n@@ -714,7 +714,7 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n     }\n }\n \n-void CWallet::EraseFromWallet(const uint256 &hash)\n+void CWallet::EraseFromWallet(const blob256 &hash)\n {\n     if (!fFileBacked)\n         return;\n@@ -731,7 +731,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n-        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n+        map<blob256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n@@ -746,7 +746,7 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n         LOCK(cs_wallet);\n-        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n+        map<blob256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n@@ -797,23 +797,23 @@ int CWalletTx::GetRequestCount() const\n             // Generated block\n             if (!hashBlock.IsNull())\n             {\n-                map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n+                map<blob256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                 if (mi != pwallet->mapRequestCount.end())\n                     nRequests = (*mi).second;\n             }\n         }\n         else\n         {\n             // Did anyone request this transaction?\n-            map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(GetHash());\n+            map<blob256, int>::const_iterator mi = pwallet->mapRequestCount.find(GetHash());\n             if (mi != pwallet->mapRequestCount.end())\n             {\n                 nRequests = (*mi).second;\n \n                 // How about the block it's in?\n                 if (nRequests == 0 && !hashBlock.IsNull())\n                 {\n-                    map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n+                    map<blob256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                     if (mi != pwallet->mapRequestCount.end())\n                         nRequests = (*mi).second;\n                     else\n@@ -969,9 +969,9 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n void CWallet::ReacceptWalletTransactions()\n {\n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    BOOST_FOREACH(PAIRTYPE(const blob256, CWalletTx)& item, mapWallet)\n     {\n-        const uint256& wtxid = item.first;\n+        const blob256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n         assert(wtx.GetHash() == wtxid);\n \n@@ -997,12 +997,12 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n-set<uint256> CWalletTx::GetConflicts() const\n+set<blob256> CWalletTx::GetConflicts() const\n {\n-    set<uint256> result;\n+    set<blob256> result;\n     if (pwallet != NULL)\n     {\n-        uint256 myHash = GetHash();\n+        blob256 myHash = GetHash();\n         result = pwallet->GetConflicts(myHash);\n         result.erase(myHash);\n     }\n@@ -1031,7 +1031,7 @@ void CWallet::ResendWalletTransactions()\n         LOCK(cs_wallet);\n         // Sort them in chronological order\n         multimap<unsigned int, CWalletTx*> mapSorted;\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        BOOST_FOREACH(PAIRTYPE(const blob256, CWalletTx)& item, mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n             // Don't rebroadcast until it's had plenty of time that\n@@ -1063,7 +1063,7 @@ CAmount CWallet::GetBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (pcoin->IsTrusted())\n@@ -1079,7 +1079,7 @@ CAmount CWallet::GetUnconfirmedBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n@@ -1094,7 +1094,7 @@ CAmount CWallet::GetImmatureBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             nTotal += pcoin->GetImmatureCredit();\n@@ -1108,7 +1108,7 @@ CAmount CWallet::GetWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (pcoin->IsTrusted())\n@@ -1124,7 +1124,7 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n@@ -1139,7 +1139,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             nTotal += pcoin->GetImmatureWatchOnlyCredit();\n@@ -1157,9 +1157,9 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n \n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        for (map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const uint256& wtxid = it->first;\n+            const blob256& wtxid = it->first;\n             const CWalletTx* pcoin = &(*it).second;\n \n             if (!IsFinalTx(*pcoin))\n@@ -1861,7 +1861,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+        BOOST_FOREACH(PAIRTYPE(blob256, CWalletTx) walletEntry, mapWallet)\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n@@ -1901,7 +1901,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     set< set<CTxDestination> > groupings;\n     set<CTxDestination> grouping;\n \n-    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+    BOOST_FOREACH(PAIRTYPE(blob256, CWalletTx) walletEntry, mapWallet)\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n@@ -2055,12 +2055,12 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     }\n }\n \n-void CWallet::UpdatedTransaction(const uint256 &hashTx)\n+void CWallet::UpdatedTransaction(const blob256 &hashTx)\n {\n     {\n         LOCK(cs_wallet);\n         // Only notify UI if this transaction is in this wallet\n-        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashTx);\n+        map<blob256, CWalletTx>::const_iterator mi = mapWallet.find(hashTx);\n         if (mi != mapWallet.end())\n             NotifyTransactionChanged(this, hashTx, CT_UPDATED);\n     }\n@@ -2084,7 +2084,7 @@ void CWallet::UnlockAllCoins()\n     setLockedCoins.clear();\n }\n \n-bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n+bool CWallet::IsLockedCoin(blob256 hash, unsigned int n) const\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     COutPoint outpt(hash, n);\n@@ -2162,7 +2162,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n \n     // find first block that affects those keys, if there are any left\n     std::vector<CKeyID> vAffected;\n-    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+    for (std::map<blob256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = (*it).second;\n         BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);"
      },
      {
        "sha": "c484cf7abcddfe3132b2a86a368b287485573fe7",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -123,10 +123,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * detect and report conflicts (double-spends or\n      * mutated transactions where the mutant gets mined).\n      */\n-    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    typedef std::multimap<COutPoint, blob256> TxSpends;\n     TxSpends mapTxSpends;\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    void AddToSpends(const COutPoint& outpoint, const blob256& wtxid);\n+    void AddToSpends(const blob256& wtxid);\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n@@ -182,10 +182,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nTimeFirstKey = 0;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    std::map<blob256, CWalletTx> mapWallet;\n \n     int64_t nOrderPosNext;\n-    std::map<uint256, int> mapRequestCount;\n+    std::map<blob256, int> mapRequestCount;\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n@@ -195,17 +195,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nTimeFirstKey;\n \n-    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+    const CWalletTx* GetWalletTx(const blob256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsSpent(const blob256& hash, unsigned int n) const;\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n+    bool IsLockedCoin(blob256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n     void UnlockAllCoins();\n@@ -273,7 +273,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n-    void EraseFromWallet(const uint256 &hash);\n+    void EraseFromWallet(const blob256 &hash);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n@@ -379,13 +379,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx);\n+    void UpdatedTransaction(const blob256 &hashTx);\n \n-    void Inventory(const uint256 &hash)\n+    void Inventory(const blob256 &hash)\n     {\n         {\n             LOCK(cs_wallet);\n-            std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n+            std::map<blob256, int>::iterator mi = mapRequestCount.find(hash);\n             if (mi != mapRequestCount.end())\n                 (*mi).second++;\n         }\n@@ -409,7 +409,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n+    std::set<blob256> GetConflicts(const blob256& txid) const;\n \n     /** \n      * Address book entry changed.\n@@ -424,7 +424,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n+    boost::signals2::signal<void (CWallet *wallet, const blob256 &hashTx,\n             ChangeType status)> NotifyTransactionChanged;\n \n     /** Show progress e.g. for rescan */\n@@ -494,8 +494,8 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const;\n \n public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n+    blob256 hashBlock;\n+    std::vector<blob256> vMerkleBranch;\n     int nIndex;\n \n     // memory only\n@@ -514,7 +514,7 @@ class CMerkleTx : public CTransaction\n \n     void Init()\n     {\n-        hashBlock = uint256();\n+        hashBlock = blob256();\n         nIndex = -1;\n         fMerkleVerified = false;\n     }\n@@ -791,7 +791,7 @@ class CWalletTx : public CMerkleTx\n             return nAvailableCreditCached;\n \n         CAmount nCredit = 0;\n-        uint256 hashTx = GetHash();\n+        blob256 hashTx = GetHash();\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (!pwallet->IsSpent(hashTx, i))\n@@ -905,7 +905,7 @@ class CWalletTx : public CMerkleTx\n \n     void RelayWalletTransaction();\n \n-    std::set<uint256> GetConflicts() const;\n+    std::set<blob256> GetConflicts() const;\n };\n \n "
      },
      {
        "sha": "467563bbaf603bec1f82970781ced94287dbc2e1",
        "filename": "src/wallet_ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -56,13 +56,13 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n             return ISMINE_SPENDABLE;\n         break;\n     case TX_PUBKEYHASH:\n-        keyID = CKeyID(uint160(vSolutions[0]));\n+        keyID = CKeyID(blob160(vSolutions[0]));\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n     case TX_SCRIPTHASH:\n     {\n-        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScriptID scriptID = CScriptID(blob160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             isminetype ret = IsMine(keystore, subscript);"
      },
      {
        "sha": "6ef601fc2fd005cdbfe8bfe55fb2f0ec0d9dce82",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -53,13 +53,13 @@ bool CWalletDB::ErasePurpose(const string& strPurpose)\n     return Erase(make_pair(string(\"purpose\"), strPurpose));\n }\n \n-bool CWalletDB::WriteTx(uint256 hash, const CWalletTx& wtx)\n+bool CWalletDB::WriteTx(blob256 hash, const CWalletTx& wtx)\n {\n     nWalletDBUpdated++;\n     return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n }\n \n-bool CWalletDB::EraseTx(uint256 hash)\n+bool CWalletDB::EraseTx(blob256 hash)\n {\n     nWalletDBUpdated++;\n     return Erase(std::make_pair(std::string(\"tx\"), hash));\n@@ -109,7 +109,7 @@ bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n     return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n }\n \n-bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n+bool CWalletDB::WriteCScript(const blob160& hash, const CScript& redeemScript)\n {\n     nWalletDBUpdated++;\n     return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n@@ -259,7 +259,7 @@ DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n     typedef multimap<int64_t, TxPair > TxItems;\n     TxItems txByTime;\n \n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n+    for (map<blob256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n     {\n         CWalletTx* wtx = &((*it).second);\n         txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n@@ -332,7 +332,7 @@ class CWalletScanState {\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n-    vector<uint256> vWalletUpgrade;\n+    vector<blob256> vWalletUpgrade;\n \n     CWalletScanState() {\n         nKeys = nCKeys = nKeyMeta = 0;\n@@ -365,7 +365,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"tx\")\n         {\n-            uint256 hash;\n+            blob256 hash;\n             ssKey >> hash;\n             CWalletTx wtx;\n             ssValue >> wtx;\n@@ -439,7 +439,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             CKey key;\n             CPrivKey pkey;\n-            uint256 hash;\n+            blob256 hash;\n \n             if (strType == \"key\")\n             {\n@@ -564,7 +564,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"cscript\")\n         {\n-            uint160 hash;\n+            blob160 hash;\n             ssKey >> hash;\n             CScript script;\n             ssValue >> script;\n@@ -688,7 +688,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n         pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+    BOOST_FOREACH(blob256 hash, wss.vWalletUpgrade)\n         WriteTx(hash, pwallet->mapWallet[hash]);\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n@@ -704,7 +704,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vector<CWalletTx>& vWtx)\n+DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<blob256>& vTxHash, vector<CWalletTx>& vWtx)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     bool fNoncriticalErrors = false;\n@@ -745,7 +745,7 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n             string strType;\n             ssKey >> strType;\n             if (strType == \"tx\") {\n-                uint256 hash;\n+                blob256 hash;\n                 ssKey >> hash;\n \n                 CWalletTx wtx;\n@@ -773,13 +773,13 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n {\n     // build list of wallet TXs\n-    vector<uint256> vTxHash;\n+    vector<blob256> vTxHash;\n     DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n     if (err != DB_LOAD_OK)\n         return err;\n \n     // erase each wallet TX\n-    BOOST_FOREACH (uint256& hash, vTxHash) {\n+    BOOST_FOREACH (blob256& hash, vTxHash) {\n         if (!EraseTx(hash))\n             return DB_CORRUPT;\n     }"
      },
      {
        "sha": "625b2c91e3f4acd52aa274eaf3cbea232091c00a",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9569ed027298286e2e92f0a466ebe7e06fd0553/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "patch": "@@ -25,8 +25,8 @@ class CMasterKey;\n class CScript;\n class CWallet;\n class CWalletTx;\n-class uint160;\n-class uint256;\n+class blob160;\n+class blob256;\n \n /** Error statuses for the wallet database */\n enum DBErrors\n@@ -86,14 +86,14 @@ class CWalletDB : public CDB\n     bool WritePurpose(const std::string& strAddress, const std::string& purpose);\n     bool ErasePurpose(const std::string& strAddress);\n \n-    bool WriteTx(uint256 hash, const CWalletTx& wtx);\n-    bool EraseTx(uint256 hash);\n+    bool WriteTx(blob256 hash, const CWalletTx& wtx);\n+    bool EraseTx(blob256 hash);\n \n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n     bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);\n \n-    bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n+    bool WriteCScript(const blob160& hash, const CScript& redeemScript);\n \n     bool WriteWatchOnly(const CScript &script);\n     bool EraseWatchOnly(const CScript &script);\n@@ -125,7 +125,7 @@ class CWalletDB : public CDB\n \n     DBErrors ReorderTransactions(CWallet* pwallet);\n     DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n+    DBErrors FindWalletTx(CWallet* pwallet, std::vector<blob256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);"
      }
    ]
  },
  {
    "sha": "cc28e23c3381115f63150c72dde6b29d3afe9793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzI4ZTIzYzMzODExMTVmNjMxNTBjNzJkZGU2YjI5ZDNhZmU5Nzkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:05:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:40:38Z"
      },
      "message": "B: string conversions",
      "tree": {
        "sha": "76b5e9e481e70e7d7316b8a079a518b68cec96d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76b5e9e481e70e7d7316b8a079a518b68cec96d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc28e23c3381115f63150c72dde6b29d3afe9793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc28e23c3381115f63150c72dde6b29d3afe9793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc28e23c3381115f63150c72dde6b29d3afe9793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc28e23c3381115f63150c72dde6b29d3afe9793/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9569ed027298286e2e92f0a466ebe7e06fd0553",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9569ed027298286e2e92f0a466ebe7e06fd0553"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 67,
      "deletions": 67
    },
    "files": [
      {
        "sha": "14ae96236d2fe4b7b26312122d3dcc53a6d5bced",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -191,7 +191,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     string strTxid = strInput.substr(0, pos);\n     if ((strTxid.size() != 64) || !IsHex(strTxid))\n         throw runtime_error(\"invalid TX input txid\");\n-    uint256 txid(strTxid);\n+    blob256 txid(blob256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n     static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;"
      },
      {
        "sha": "64486cb78f648dfb8498e38f7b0f1fbad401c190",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -54,19 +54,19 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n  */\n static Checkpoints::MapCheckpoints mapCheckpoints =\n         boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+        ( 11111, blob256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+        ( 33333, blob256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+        ( 74000, blob256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+        (105000, blob256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+        (134444, blob256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+        (168000, blob256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+        (193000, blob256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+        (210000, blob256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+        (216116, blob256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+        (225430, blob256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+        (250000, blob256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+        (279000, blob256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+        (295000, blob256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n         ;\n static const Checkpoints::CCheckpointData data = {\n         &mapCheckpoints,\n@@ -78,7 +78,7 @@ static const Checkpoints::CCheckpointData data = {\n \n static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n         boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n+        ( 546, blob256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n         ;\n static const Checkpoints::CCheckpointData dataTestnet = {\n         &mapCheckpointsTestnet,\n@@ -89,7 +89,7 @@ static const Checkpoints::CCheckpointData dataTestnet = {\n \n static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n         boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ( 0, blob256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n         ;\n static const Checkpoints::CCheckpointData dataRegtest = {\n         &mapCheckpointsRegtest,\n@@ -149,8 +149,8 @@ class CMainParams : public CChainParams {\n         genesis.nNonce   = 2083236893;\n \n         hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n-        assert(genesis.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        assert(hashGenesisBlock == blob256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        assert(genesis.hashMerkleRoot == blob256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\"));\n@@ -209,7 +209,7 @@ class CTestNetParams : public CMainParams {\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n         hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        assert(hashGenesisBlock == blob256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -266,7 +266,7 @@ class CRegTestParams : public CTestNetParams {\n         genesis.nNonce = 2;\n         hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(hashGenesisBlock == blob256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds."
      },
      {
        "sha": "fa688d7d11c7a6151bdaa5a4cb5bc000a0a28f62",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -1642,8 +1642,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n     // initial block download.\n     bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n-                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n+                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == blob256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+                           (pindex->nHeight==91880 && pindex->GetBlockHash() == blob256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());"
      },
      {
        "sha": "a706144eefa0dfa19d0ce1d83fa06223bf5bde66",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -212,7 +212,7 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         if (item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means its a child node, so its not a parent node in tree mode)\n         {\n             copyTransactionHashAction->setEnabled(true);\n-            if (model->isLockedCoin(uint256(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt()))\n+            if (model->isLockedCoin(blob256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt()))\n             {\n                 lockAction->setEnabled(false);\n                 unlockAction->setEnabled(true);\n@@ -271,7 +271,7 @@ void CoinControlDialog::lockCoin()\n     if (contextMenuItem->checkState(COLUMN_CHECKBOX) == Qt::Checked)\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n-    COutPoint outpt(uint256(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n+    COutPoint outpt(blob256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->lockCoin(outpt);\n     contextMenuItem->setDisabled(true);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, QIcon(\":/icons/lock_closed\"));\n@@ -281,7 +281,7 @@ void CoinControlDialog::lockCoin()\n // context menu action: unlock coin\n void CoinControlDialog::unlockCoin()\n {\n-    COutPoint outpt(uint256(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n+    COutPoint outpt(blob256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->unlockCoin(outpt);\n     contextMenuItem->setDisabled(false);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, QIcon());\n@@ -387,7 +387,7 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n {\n     if (column == COLUMN_CHECKBOX && item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means its a child node, so its not a parent node in tree mode)\n     {\n-        COutPoint outpt(uint256(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n+        COutPoint outpt(blob256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n             coinControl->UnSelect(outpt);"
      },
      {
        "sha": "0e3a5ffe7c767c1835a14bf9cde33308a77aa33b",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -278,7 +278,7 @@ Value getblock(const Array& params, bool fHelp)\n         );\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    blob256 hash(blob256S(strHash));\n \n     bool fVerbose = true;\n     if (params.size() > 1)\n@@ -383,7 +383,7 @@ Value gettxout(const Array& params, bool fHelp)\n     Object ret;\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    blob256 hash(blob256S(strHash));\n     int n = params[1].get_int();\n     bool fMempool = true;\n     if (params.size() > 2)\n@@ -619,7 +619,7 @@ Value invalidateblock(const Array& params, bool fHelp)\n         );\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    blob256 hash(blob256S(strHash));\n     CValidationState state;\n \n     {\n@@ -658,7 +658,7 @@ Value reconsiderblock(const Array& params, bool fHelp)\n         );\n \n     std::string strHash = params[0].get_str();\n-    uint256 hash(strHash);\n+    blob256 hash(blob256S(strHash));\n     CValidationState state;\n \n     {"
      },
      {
        "sha": "c71001c67b2609df6b698a86863b6cb456676d49",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -1902,7 +1902,7 @@ Value lockunspent(const Array& params, bool fHelp)\n         if (nOutput < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n-        COutPoint outpt(uint256(txid), nOutput);\n+        COutPoint outpt(blob256S(txid), nOutput);\n \n         if (fUnlock)\n             pwalletMain->UnlockCoin(outpt);"
      },
      {
        "sha": "a791f2aa11e2dabc2f26a34bace39a80c4314394",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -1030,7 +1030,7 @@ class CTransactionSignatureSerializer {\n \n blob256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n-    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+    static const blob256 one(blob256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n         return one;"
      },
      {
        "sha": "9030cc445bf020566706a87bbbeabcf12217b403",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -18,8 +18,8 @@ BOOST_AUTO_TEST_SUITE(Checkpoints_tests)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n-    uint256 p11111 = uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n-    uint256 p134444 = uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n+    blob256 p11111 = blob256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n+    blob256 p134444 = blob256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n     BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n     BOOST_CHECK(Checkpoints::CheckBlock(134444, p134444));\n "
      },
      {
        "sha": "57b53f66da220e812e77ead6e7d8bfa489fa9e98",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     spendStream >> spendingTx;\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(uint256(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n+    filter.insert(blob256S(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n@@ -151,11 +151,11 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match output address\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n+    filter.insert(COutPoint(blob256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match COutPoint\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    COutPoint prevOutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n+    COutPoint prevOutPoint(blob256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n     {\n         vector<unsigned char> data(32 + sizeof(unsigned int));\n         memcpy(&data[0], prevOutPoint.hash.begin(), 32);\n@@ -165,19 +165,19 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(uint256(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n+    filter.insert(blob256S(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched random tx hash\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"0000006d2965547608b9e15d9032a7b9d64fa431\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched random address\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n+    filter.insert(COutPoint(blob256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n \n     filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n-    filter.insert(COutPoint(uint256(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n+    filter.insert(COutPoint(blob256S(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n }\n \n@@ -191,33 +191,33 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n-    filter.insert(uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    filter.insert(blob256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n \n-    vector<uint256> vMatched;\n+    vector<blob256> vMatched;\n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     // Also match the 8th transaction\n-    filter.insert(uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    filter.insert(blob256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);\n \n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n@@ -236,15 +236,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the first transaction\n-    filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    filter.insert(blob256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<blob256> vMatched;\n@@ -265,13 +265,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n \n     BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == blob256S(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256(\"0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == blob256S(\"0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 2);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == blob256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 3);\n \n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n@@ -290,15 +290,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n     // Match the first transaction\n-    filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    filter.insert(blob256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<blob256> vMatched;\n@@ -319,10 +319,10 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n \n     BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == blob256S(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == blob256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 3);\n \n     BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n@@ -341,14 +341,14 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the only transaction\n-    filter.insert(uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+    filter.insert(blob256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<blob256> vMatched;\n@@ -379,15 +379,15 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n \n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n-    filter.insert(uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+    filter.insert(blob256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n     pair<unsigned int, blob256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n     vector<blob256> vMatched;\n@@ -397,13 +397,13 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     // Also match the 4th transaction\n-    filter.insert(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    filter.insert(blob256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == blob256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 3);\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n@@ -432,9 +432,9 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     // We should match the generation outpoint\n-    BOOST_CHECK(filter.contains(COutPoint(uint256(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n+    BOOST_CHECK(filter.contains(COutPoint(blob256S(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n     // ... but not the 4th transaction's output (its not pay-2-pubkey)\n-    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(blob256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n }\n \n BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n@@ -455,8 +455,8 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n     // We shouldn't match any outpoints (UPDATE_NONE)\n-    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n-    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(blob256S(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(blob256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8d09921eb8a9932b16f59eeaa0dd7a2ff32564b0",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -24,7 +24,7 @@ extern Array read_json(const std::string& jsondata);\n // Old script.cpp SignatureHash function\n blob256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n-    static const uint256 one(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+    static const blob256 one(blob256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n         printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);"
      },
      {
        "sha": "7d7361c52893ddb4c95c551308a5ea5aa74bd1a1",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc28e23c3381115f63150c72dde6b29d3afe9793/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=cc28e23c3381115f63150c72dde6b29d3afe9793",
        "patch": "@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n-                mapprevOutScriptPubKeys[COutPoint(uint256(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                mapprevOutScriptPubKeys[COutPoint(blob256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n             }\n             if (!fValid)\n             {\n@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     break;\n                 }\n \n-                mapprevOutScriptPubKeys[COutPoint(uint256(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n+                mapprevOutScriptPubKeys[COutPoint(blob256S(vinput[0].get_str()), vinput[1].get_int())] = ParseScript(vinput[2].get_str());\n             }\n             if (!fValid)\n             {"
      }
    ]
  },
  {
    "sha": "9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzU3ZDVkNWY5NGRjNzM1ZGMzYWZjNTQ2ZTE3ODU2ZjJjN2M1NDk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:06:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:40:38Z"
      },
      "message": "C: Includes and predeclared classes",
      "tree": {
        "sha": "fb1ce87eedfcc79e771a015b131ab994c3c053d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb1ce87eedfcc79e771a015b131ab994c3c053d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc28e23c3381115f63150c72dde6b29d3afe9793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc28e23c3381115f63150c72dde6b29d3afe9793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc28e23c3381115f63150c72dde6b29d3afe9793"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2064c6e5c06dd0e2a325b2a9432801430227f77c",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CHAIN_H\n #define BITCOIN_CHAIN_H\n \n+#include \"blob256.h\"\n #include \"primitives/block.h\"\n #include \"pow.h\"\n #include \"tinyformat.h\""
      },
      {
        "sha": "01967f55ad153ab818478503b42fe69f306ed43a",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n+#include \"blob256.h\"\n #include \"chainparamsbase.h\"\n #include \"checkpoints.h\"\n #include \"primitives/block.h\""
      },
      {
        "sha": "2c03ba0cf93327d694fd6e2501d05f4724db5808",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "patch": "@@ -9,6 +9,7 @@\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n+#include \"uint256.h\"\n \n #include <secp256k1.h>\n #include \"ecwrapper.h\""
      },
      {
        "sha": "6d7558d399384697b2d3d1cea5f37f8cd2e02526",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "patch": "@@ -8,8 +8,9 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"primitives/block.h\"\n-#include \"uint256.h\"\n+#include \"blob256.h\"\n #include \"util.h\"\n+#include \"uint256.h\"\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {"
      },
      {
        "sha": "a50ed3c9588948ace95aa69318b77a8d4ac5ccd6",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c57d5d5f94dc735dc3afc546e17856f2c7c5494/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <stdint.h>\n \n+class blob256;\n class CBlockHeader;\n class CBlockIndex;\n class uint256;"
      }
    ]
  },
  {
    "sha": "65f2ff8404278b5641f0e61c61f14bffff014162",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYyZmY4NDA0Mjc4YjU2NDFmMGU2MWM2MWYxNGJmZmZmMDE0MTYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:07:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:40:38Z"
      },
      "message": "D: Necessary conversions between uint256 and blob256",
      "tree": {
        "sha": "4353188b63d6032d5619da551fe733c8f24083ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4353188b63d6032d5619da551fe733c8f24083ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f2ff8404278b5641f0e61c61f14bffff014162",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f2ff8404278b5641f0e61c61f14bffff014162",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f2ff8404278b5641f0e61c61f14bffff014162",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f2ff8404278b5641f0e61c61f14bffff014162/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c57d5d5f94dc735dc3afc546e17856f2c7c5494",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c57d5d5f94dc735dc3afc546e17856f2c7c5494"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 14,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b72bb6d722a544ee24cfac16c8711125e9d72f44",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f2ff8404278b5641f0e61c61f14bffff014162/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f2ff8404278b5641f0e61c61f14bffff014162/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=65f2ff8404278b5641f0e61c61f14bffff014162",
        "patch": "@@ -81,7 +81,7 @@ bool CKey::Sign(const blob256 &hash, std::vector<unsigned char>& vchSig, uint32_\n     do {\n         blob256 nonce;\n         prng.Generate((unsigned char*)&nonce, 32);\n-        nonce += test_case;\n+        nonce = UintToBlob256(BlobToUint256(nonce) + test_case);\n         int nSigLen = 72;\n         int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n         nonce = blob256();"
      },
      {
        "sha": "364785232699cb320351d25c758856a3634f3115",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f2ff8404278b5641f0e61c61f14bffff014162/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f2ff8404278b5641f0e61c61f14bffff014162/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=65f2ff8404278b5641f0e61c61f14bffff014162",
        "patch": "@@ -3505,7 +3505,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n                     uint64_t hashAddr = addr.GetHash();\n-                    uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n+                    blob256 hashRand = UintToBlob256(BlobToUint256(hashSalt) ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60)));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n                     multimap<blob256, CNode*> mapMix;\n                     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -3514,7 +3514,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             continue;\n                         unsigned int nPointer;\n                         memcpy(&nPointer, &pnode, sizeof(nPointer));\n-                        uint256 hashKey = hashRand ^ nPointer;\n+                        blob256 hashKey = UintToBlob256(BlobToUint256(hashRand) ^ nPointer);\n                         hashKey = Hash(BEGIN(hashKey), END(hashKey));\n                         mapMix.insert(make_pair(hashKey, pnode));\n                     }\n@@ -4381,9 +4381,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     static blob256 hashSalt;\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n-                    uint256 hashRand = inv.hash ^ hashSalt;\n+                    blob256 hashRand = UintToBlob256(BlobToUint256(inv.hash) ^ BlobToUint256(hashSalt));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((hashRand & 3) != 0);\n+                    bool fTrickleWait = ((BlobToUint256(hashRand) & 3) != 0);\n \n                     if (fTrickleWait)\n                     {"
      },
      {
        "sha": "3eb652d5224e9952ef2e8eb3f4ce8c4f4dfa7a48",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f2ff8404278b5641f0e61c61f14bffff014162/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f2ff8404278b5641f0e61c61f14bffff014162/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=65f2ff8404278b5641f0e61c61f14bffff014162",
        "patch": "@@ -494,7 +494,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Check if something found\n                 if (fFound)\n                 {\n-                    if (hash <= hashTarget)\n+                    if (BlobToUint256(hash) <= hashTarget)\n                     {\n                         // Found a solution\n                         pblock->nNonce = nNonce;"
      },
      {
        "sha": "354c6c174e685d881979a390a7ac00818f34b1e8",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f2ff8404278b5641f0e61c61f14bffff014162/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f2ff8404278b5641f0e61c61f14bffff014162/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=65f2ff8404278b5641f0e61c61f14bffff014162",
        "patch": "@@ -92,7 +92,7 @@ bool CheckProofOfWork(blob256 hash, unsigned int nBits)\n         return error(\"CheckProofOfWork() : nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n-    if (hash > bnTarget)\n+    if (BlobToUint256(hash) > bnTarget)\n         return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n \n     return true;"
      },
      {
        "sha": "ef395099fa4fc3451fdef7d3ea100bd0ad1e526d",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f2ff8404278b5641f0e61c61f14bffff014162/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f2ff8404278b5641f0e61c61f14bffff014162/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=65f2ff8404278b5641f0e61c61f14bffff014162",
        "patch": "@@ -21,8 +21,7 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n     void Damage() {\n         unsigned int n = rand() % vHash.size();\n         int bit = rand() % 256;\n-        uint256 &hash = vHash[n];\n-        hash ^= ((uint256)1 << bit);\n+        *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };\n "
      },
      {
        "sha": "d7a3d40b803dd565a63ee9619f45eeea696b1c4d",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f2ff8404278b5641f0e61c61f14bffff014162/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f2ff8404278b5641f0e61c61f14bffff014162/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=65f2ff8404278b5641f0e61c61f14bffff014162",
        "patch": "@@ -49,25 +49,25 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n     std::vector<blob256> vHashMain(100000);\n     std::vector<CBlockIndex> vBlocksMain(100000);\n     for (unsigned int i=0; i<vBlocksMain.size(); i++) {\n-        vHashMain[i] = i; // Set the hash equal to the height, so we can quickly check the distances.\n+        vHashMain[i] = UintToBlob256(i); // Set the hash equal to the height, so we can quickly check the distances.\n         vBlocksMain[i].nHeight = i;\n         vBlocksMain[i].pprev = i ? &vBlocksMain[i - 1] : NULL;\n         vBlocksMain[i].phashBlock = &vHashMain[i];\n         vBlocksMain[i].BuildSkip();\n-        BOOST_CHECK_EQUAL((int)vBlocksMain[i].GetBlockHash().GetLow64(), vBlocksMain[i].nHeight);\n+        BOOST_CHECK_EQUAL((int)BlobToUint256(vBlocksMain[i].GetBlockHash()).GetLow64(), vBlocksMain[i].nHeight);\n         BOOST_CHECK(vBlocksMain[i].pprev == NULL || vBlocksMain[i].nHeight == vBlocksMain[i].pprev->nHeight + 1);\n     }\n \n     // Build a branch that splits off at block 49999, 50000 blocks long.\n     std::vector<blob256> vHashSide(50000);\n     std::vector<CBlockIndex> vBlocksSide(50000);\n     for (unsigned int i=0; i<vBlocksSide.size(); i++) {\n-        vHashSide[i] = i + 50000 + (uint256(1) << 128); // Add 1<<128 to the hashes, so GetLow64() still returns the height.\n+        vHashSide[i] = UintToBlob256(i + 50000 + (uint256(1) << 128)); // Add 1<<128 to the hashes, so GetLow64() still returns the height.\n         vBlocksSide[i].nHeight = i + 50000;\n         vBlocksSide[i].pprev = i ? &vBlocksSide[i - 1] : &vBlocksMain[49999];\n         vBlocksSide[i].phashBlock = &vHashSide[i];\n         vBlocksSide[i].BuildSkip();\n-        BOOST_CHECK_EQUAL((int)vBlocksSide[i].GetBlockHash().GetLow64(), vBlocksSide[i].nHeight);\n+        BOOST_CHECK_EQUAL((int)BlobToUint256(vBlocksSide[i].GetBlockHash()).GetLow64(), vBlocksSide[i].nHeight);\n         BOOST_CHECK(vBlocksSide[i].pprev == NULL || vBlocksSide[i].nHeight == vBlocksSide[i].pprev->nHeight + 1);\n     }\n \n@@ -87,13 +87,13 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n \n         // Entries 1 through 11 (inclusive) go back one step each.\n         for (unsigned int i = 1; i < 12 && i < locator.vHave.size() - 1; i++) {\n-            BOOST_CHECK_EQUAL(locator.vHave[i].GetLow64(), tip->nHeight - i);\n+            BOOST_CHECK_EQUAL(BlobToUint256(locator.vHave[i]).GetLow64(), tip->nHeight - i);\n         }\n \n         // The further ones (excluding the last one) go back with exponential steps.\n         unsigned int dist = 2;\n         for (unsigned int i = 12; i < locator.vHave.size() - 1; i++) {\n-            BOOST_CHECK_EQUAL(locator.vHave[i - 1].GetLow64() - locator.vHave[i].GetLow64(), dist);\n+            BOOST_CHECK_EQUAL(BlobToUint256(locator.vHave[i - 1]).GetLow64() - BlobToUint256(locator.vHave[i]).GetLow64(), dist);\n             dist *= 2;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTBmNTgxMmJmYTBjZmVkNjlhYzc0NWUyNmNlNGY4NjliNDcwYTUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:24:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T07:00:07Z"
      },
      "message": "Remove uint160\n\nNo uint160 arithmetic is used at all. Also remove the tests.",
      "tree": {
        "sha": "5f1282bace6c4869d6fd4731a9316935f59f4853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f1282bace6c4869d6fd4731a9316935f59f4853"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65f2ff8404278b5641f0e61c61f14bffff014162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f2ff8404278b5641f0e61c61f14bffff014162",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f2ff8404278b5641f0e61c61f14bffff014162"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 23,
      "deletions": 283
    },
    "files": [
      {
        "sha": "70868ede20df80536acc020594e20642f7ed6c3e",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 256,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
        "patch": "@@ -19,39 +19,32 @@ const unsigned char R1Array[] =\n     \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n const double R1Ldouble = 0.4887374590559308955; // R1L equals roughly R1Ldouble * 2^256\n-const double R1Sdouble = 0.7096329412477836074; \n const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));\n-const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));\n const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;\n \n const unsigned char R2Array[] = \n     \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n     \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));\n-const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));\n \n const char R1LplusR2L[] = \"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\";\n \n const unsigned char ZeroArray[] = \n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n-const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n                              \n const unsigned char OneArray[] = \n     \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));\n-const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));\n \n const unsigned char MaxArray[] = \n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n     \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n-const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n \n const uint256 HalfL = (OneL << 255);\n-const uint160 HalfS = (OneS << 159);\n std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n@@ -68,26 +61,19 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(1 == 0+1);\n     // constructor uint256(vector<char>):\n     BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n-    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n     BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n-    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n     BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n-    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n     BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n-    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n     BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n-    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n     BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n-    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n \n     // == and !=\n-    BOOST_CHECK(R1L != R2L && R1S != R2S);\n-    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n-    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n-    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n-    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK(R1L != R2L);\n+    BOOST_CHECK(ZeroL != OneL);\n+    BOOST_CHECK(OneL != ZeroL);\n+    BOOST_CHECK(MaxL != ZeroL);\n+    BOOST_CHECK(~MaxL == ZeroL);\n     BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n-    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n     \n     uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n     for (unsigned int i = 0; i < 256; ++i) \n@@ -99,15 +85,6 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256)); \n \n-    for (unsigned int i = 0; i < 160; ++i) \n-    {\n-        BOOST_CHECK(ZeroS != (OneS << i)); \n-        BOOST_CHECK((OneS << i) != ZeroS); \n-        BOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n-        BOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n-    }\n-    BOOST_CHECK(ZeroS == (OneS << 256)); \n-\n     // String Constructor and Copy Constructor\n     BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n     BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n@@ -123,48 +100,22 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(uint256(ZeroL) == ZeroL);\n     BOOST_CHECK(uint256(OneL) == OneL);\n \n-    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n-    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n-    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n-    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n-    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n-    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n-    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n-    BOOST_CHECK(uint160(\"\") == ZeroS);\n-    BOOST_CHECK(R1S == uint160(R1ArrayHex));\n-\n-    BOOST_CHECK(uint160(R1S) == R1S);\n-    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n-    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n-    BOOST_CHECK(uint160(OneS) == OneS);\n-\n     // uint64_t constructor\n     BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(R1LLow64));\n     BOOST_CHECK(ZeroL == uint256(0));\n     BOOST_CHECK(OneL == uint256(1));\n     BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n-    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(R1LLow64));\n-    BOOST_CHECK(ZeroS == uint160(0));\n-    BOOST_CHECK(OneS == uint160(1));\n-    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n \n     // Assignment (from base_uint)\n     uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n     tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n     tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n     tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n     tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n-    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n-    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n-    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n-    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n-    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n \n     // Wrong length must throw exception.\n     BOOST_CHECK_THROW(uint256(std::vector<unsigned char>(OneArray,OneArray+31)), uint_error);\n     BOOST_CHECK_THROW(uint256(std::vector<unsigned char>(OneArray,OneArray+20)), uint_error);\n-    BOOST_CHECK_THROW(uint160(std::vector<unsigned char>(OneArray,OneArray+32)), uint_error);\n-    BOOST_CHECK_THROW(uint160(std::vector<unsigned char>(OneArray,OneArray+19)), uint_error);\n }\n \n void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n@@ -239,88 +190,38 @@ BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n     for (unsigned int i = 128; i < 256; ++i) {\n         BOOST_CHECK((c1L << i) == (c2L << (i-128)));\n     }\n-\n-    uint160 TmpS;\n-    for (unsigned int i = 0; i < 160; ++i)\n-    {\n-        shiftArrayLeft(TmpArray, OneArray, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (OneS << i));\n-        TmpS = OneS; TmpS <<= i;\n-        BOOST_CHECK(TmpS == (OneS << i));\n-        BOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n-        TmpS = HalfS; TmpS >>= (159-i);\n-        BOOST_CHECK(TmpS == (OneS << i));\n-                    \n-        shiftArrayLeft(TmpArray, R1Array, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S << i));\n-        TmpS = R1S; TmpS <<= i;\n-        BOOST_CHECK(TmpS == (R1S << i));\n-\n-        shiftArrayRight(TmpArray, R1Array, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (R1S >> i)); \n-        TmpS = R1S; TmpS >>= i;\n-        BOOST_CHECK(TmpS == (R1S >> i));\n-\n-        shiftArrayLeft(TmpArray, MaxArray, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS << i));\n-        TmpS = MaxS; TmpS <<= i;\n-        BOOST_CHECK(TmpS == (MaxS << i));\n-\n-        shiftArrayRight(TmpArray, MaxArray, 20, i);\n-        BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (MaxS >> i));\n-        TmpS = MaxS; TmpS >>= i;\n-        BOOST_CHECK(TmpS == (MaxS >> i));\n-    }\n-    uint160 c1S = uint160(0x0123456789abcdefULL);\n-    uint160 c2S = c1S << 80;\n-    for (unsigned int i = 0; i < 80; ++i) {\n-        BOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n-    }\n-    for (unsigned int i = 80; i < 160; ++i) {\n-        BOOST_CHECK((c1S << i) == (c2S << (i-80)));\n-    }\n }\n \n BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n {\n-    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n-    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    BOOST_CHECK(!ZeroL);\n+    BOOST_CHECK(!(!OneL));\n     for (unsigned int i = 0; i < 256; ++i) \n         BOOST_CHECK(!(!(OneL<<i)));\n-    for (unsigned int i = 0; i < 160; ++i) \n-        BOOST_CHECK(!(!(OneS<<i)));\n-    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n-    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n-    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+    BOOST_CHECK(!(!R1L));\n+    BOOST_CHECK(!(!MaxL));\n \n-    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+    BOOST_CHECK(~ZeroL == MaxL);\n \n     unsigned char TmpArray[32];\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n     BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (~R1L));\n-    BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (~R1S));\n \n-    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-ZeroL == ZeroL);\n     BOOST_CHECK(-R1L == (~R1L)+1);\n-    BOOST_CHECK(-R1S == (~R1S)+1);\n     for (unsigned int i = 0; i < 256; ++i) \n         BOOST_CHECK(-(OneL<<i) == (MaxL << i));\n-    for (unsigned int i = 0; i < 160; ++i) \n-        BOOST_CHECK(-(OneS<<i) == (MaxS << i));\n }\n \n \n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n // element of Aarray and Barray, and then converting the result into a uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L)); \\\n-    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n-    BOOST_CHECK(uint160(std::vector<unsigned char>(TmpArray,TmpArray+20)) == (_A_##S _OP_ _B_##S));\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));\n \n #define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_)                           \\\n-    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n-    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L));\n \n BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n {\n@@ -343,7 +244,6 @@ BOOST_AUTO_TEST_CASE( bitwiseOperators )\n     CHECKBITWISEOPERATOR(Max,R1,&)\n \n     uint256 TmpL;\n-    uint160 TmpS;\n     CHECKASSIGNMENTOPERATOR(R1,R2,|)\n     CHECKASSIGNMENTOPERATOR(R1,R2,^)\n     CHECKASSIGNMENTOPERATOR(R1,R2,&)\n@@ -362,13 +262,9 @@ BOOST_AUTO_TEST_CASE( bitwiseOperators )\n \n     uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n     TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n-    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n     TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n-    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n     TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n-    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n     TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n-    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n }\n \n BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n@@ -383,16 +279,6 @@ BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n         BOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n         BOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n     }\n-    uint160 TmpS;\n-    for (unsigned int i = 0; i < 160; ++i) {\n-        TmpS= OneS<< i;\n-        BOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n-        BOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n-        TmpS |= R1S;\n-        BOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n-        BOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n-        BOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n-    }\n }\n \n BOOST_AUTO_TEST_CASE( plusMinus ) \n@@ -437,49 +323,6 @@ BOOST_AUTO_TEST_CASE( plusMinus )\n     }\n     TmpL = R1L;\n     BOOST_CHECK(--TmpL == R1L-1);\n-\n-    // 160-bit; copy-pasted\n-    uint160 TmpS = 0;\n-    BOOST_CHECK(R1S+R2S == uint160(R1LplusR2L));\n-    TmpS += R1S;\n-    BOOST_CHECK(TmpS == R1S);\n-    TmpS += R2S;\n-    BOOST_CHECK(TmpS == R1S + R2S);\n-    BOOST_CHECK(OneS+MaxS == ZeroS);\n-    BOOST_CHECK(MaxS+OneS == ZeroS);\n-    for (unsigned int i = 1; i < 160; ++i) {\n-        BOOST_CHECK( (MaxS >> i) + OneS == (HalfS >> (i-1)) );\n-        BOOST_CHECK( OneS + (MaxS >> i) == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i); TmpS += OneS;\n-        BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i); TmpS += 1;\n-        BOOST_CHECK( TmpS == (HalfS >> (i-1)) );\n-        TmpS = (MaxS>>i); \n-        BOOST_CHECK( TmpS++ == (MaxS>>i) );\n-        BOOST_CHECK( TmpS == (HalfS >> (i-1)));\n-    }\n-    BOOST_CHECK(uint160(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint160(0xbedc77e27940a7ULL + 0xee8d836fce66fbULL));\n-    TmpS = uint160(0xbedc77e27940a7ULL); TmpS += 0xee8d836fce66fbULL;\n-    BOOST_CHECK(TmpS == uint160(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n-    TmpS -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpS == 0xbedc77e27940a7ULL);\n-    TmpS = R1S;\n-    BOOST_CHECK(++TmpS == R1S+1);\n-\n-    BOOST_CHECK(R1S -(-R2S) == R1S+R2S);\n-    BOOST_CHECK(R1S -(-OneS) == R1S+OneS);\n-    BOOST_CHECK(R1S - OneS == R1S+(-OneS));\n-    for (unsigned int i = 1; i < 160; ++i) {\n-        BOOST_CHECK((MaxS>>i) - (-OneS)  == (HalfS >> (i-1)));\n-        BOOST_CHECK((HalfS >> (i-1)) - OneS == (MaxS>>i));\n-        TmpS = (HalfS >> (i-1));\n-        BOOST_CHECK(TmpS-- == (HalfS >> (i-1)));\n-        BOOST_CHECK(TmpS == (MaxS >> i));\n-        TmpS = (HalfS >> (i-1));\n-        BOOST_CHECK(--TmpS == (MaxS >> i));\n-    }\n-    TmpS = R1S;\n-    BOOST_CHECK(--TmpS == R1S-1);\n-\n }\n \n BOOST_AUTO_TEST_CASE( multiply )\n@@ -495,28 +338,12 @@ BOOST_AUTO_TEST_CASE( multiply )\n     BOOST_CHECK((R2L * OneL) == R2L);\n     BOOST_CHECK((R2L * MaxL) == -R2L);\n \n-    BOOST_CHECK((R1S * R1S).ToString() == \"a7761bf30d5237e9873f9bff3642a732c4d84f10\");\n-    BOOST_CHECK((R1S * R2S).ToString() == \"ba51c008df851987d9dd323f0e5de07760529c40\");\n-    BOOST_CHECK((R1S * ZeroS) == ZeroS);\n-    BOOST_CHECK((R1S * OneS) == R1S);\n-    BOOST_CHECK((R1S * MaxS) == -R1S);\n-    BOOST_CHECK((R2S * R1S) == (R1S * R2S));\n-    BOOST_CHECK((R2S * R2S).ToString() == \"c28bb2b45a1d85ab7996ccd3e102a650f74ff100\");\n-    BOOST_CHECK((R2S * ZeroS) == ZeroS);\n-    BOOST_CHECK((R2S * OneS) == R2S);\n-    BOOST_CHECK((R2S * MaxS) == -R2S);\n-\n     BOOST_CHECK(MaxL * MaxL == OneL);\n-    BOOST_CHECK(MaxS * MaxS == OneS);\n \n     BOOST_CHECK((R1L * 0) == 0);\n     BOOST_CHECK((R1L * 1) == R1L);\n     BOOST_CHECK((R1L * 3).ToString() == \"7759b1c0ed14047f961ad09b20ff83687876a0181a367b813634046f91def7d4\");\n     BOOST_CHECK((R2L * 0x87654321UL).ToString() == \"23f7816e30c4ae2017257b7a0fa64d60402f5234d46e746b61c960d09a26d070\");\n-    BOOST_CHECK((R1S * 0) == 0);\n-    BOOST_CHECK((R1S * 1) == R1S);\n-    BOOST_CHECK((R1S * 7).ToString() == \"f7a987f3c3bf758d927f202d7e795faeff084244\");\n-    BOOST_CHECK((R2S * 0xFFFFFFFFUL).ToString() == \"1c6f6c930353e17f7d6127213bb18d2883e2cd90\");\n }\n \n BOOST_AUTO_TEST_CASE( divide )\n@@ -535,21 +362,6 @@ BOOST_AUTO_TEST_CASE( divide )\n     BOOST_CHECK(R2L / MaxL == ZeroL);\n     BOOST_CHECK(MaxL / R2L == 1);\n     BOOST_CHECK_THROW(R2L / ZeroL, uint_error);\n-\n-    uint160 D1S(\"D3C5EDCDEA54EB92679F0A4B4\");\n-    uint160 D2S(\"13037\");\n-    BOOST_CHECK((R1S / D1S).ToString() == \"0000000000000000000000000db9af3beade6c02\");\n-    BOOST_CHECK((R1S / D2S).ToString() == \"000098dfb6cc40ca592bf74366794f298ada205c\");\n-    BOOST_CHECK(R1S / OneS == R1S);\n-    BOOST_CHECK(R1S / MaxS == ZeroS);\n-    BOOST_CHECK(MaxS / R1S == 1);\n-    BOOST_CHECK_THROW(R1S / ZeroS, uint_error);\n-    BOOST_CHECK((R2S / D1S).ToString() == \"0000000000000000000000000c5608e781182047\");\n-    BOOST_CHECK((R2S / D2S).ToString() == \"00008966751b7187c3c67c1fda5cea7db2c1c069\");\n-    BOOST_CHECK(R2S / OneS == R2S);\n-    BOOST_CHECK(R2S / MaxS == ZeroS);\n-    BOOST_CHECK(MaxS / R2S == 1);\n-    BOOST_CHECK_THROW(R2S / ZeroS, uint_error);\n }\n \n \n@@ -598,59 +410,17 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(MaxL == TmpL);\n     ss.str(\"\");\n \n-    BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n-    BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n-    BOOST_CHECK(OneS.GetHex() == OneS.ToString());\n-    BOOST_CHECK(MaxS.GetHex() == MaxS.ToString());\n-    uint160 TmpS(R1S);\n-    BOOST_CHECK(TmpS == R1S);\n-    TmpS.SetHex(R2S.ToString());   BOOST_CHECK(TmpS == R2S);\n-    TmpS.SetHex(ZeroS.ToString()); BOOST_CHECK(TmpS == 0);\n-    TmpS.SetHex(HalfS.ToString()); BOOST_CHECK(TmpS == HalfS);\n-\n-    TmpS.SetHex(R1S.ToString());\n-    BOOST_CHECK(R1S.size() == 20);\n-    BOOST_CHECK(R2S.size() == 20);\n-    BOOST_CHECK(ZeroS.size() == 20);\n-    BOOST_CHECK(MaxS.size() == 20);\n-    BOOST_CHECK(HalfS.GetLow64() ==0x0000000000000000ULL); \n-    BOOST_CHECK(OneS.GetLow64() ==0x0000000000000001ULL);\n-    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-\n-    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(R1S == TmpS);\n-    ss.str(\"\");\n-    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ZeroS == TmpS);\n-    ss.str(\"\");\n-    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(MaxS == TmpS);\n-    ss.str(\"\");\n-    \n     for (unsigned int i = 0; i < 255; ++i) \n     {\n         BOOST_CHECK((OneL << i).getdouble() == ldexp(1.0,i));\n-        if (i < 160) BOOST_CHECK((OneS << i).getdouble() == ldexp(1.0,i));\n     }\n     BOOST_CHECK(ZeroL.getdouble() == 0.0);\n-    BOOST_CHECK(ZeroS.getdouble() == 0.0);\n     for (int i = 256; i > 53; --i) \n         BOOST_CHECK(almostEqual((R1L>>(256-i)).getdouble(), ldexp(R1Ldouble,i)));\n-    for (int i = 160; i > 53; --i) \n-        BOOST_CHECK(almostEqual((R1S>>(160-i)).getdouble(), ldexp(R1Sdouble,i)));\n     uint64_t R1L64part = (R1L>>192).GetLow64();\n-    uint64_t R1S64part = (R1S>>96).GetLow64();\n     for (int i = 53; i > 0; --i) // doubles can store all integers in {0,...,2^54-1} exactly\n     {\n         BOOST_CHECK((R1L>>(256-i)).getdouble() == (double)(R1L64part >> (64-i)));\n-        BOOST_CHECK((R1S>>(160-i)).getdouble() == (double)(R1S64part >> (64-i)));\n     }\n }\n \n@@ -786,23 +556,20 @@ BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% coverage\n {\n     // ~R1L give a base_uint<256>\n-    BOOST_CHECK((~~R1L >> 10) == (R1L >> 10)); BOOST_CHECK((~~R1S >> 10) == (R1S >> 10));\n-    BOOST_CHECK((~~R1L << 10) == (R1L << 10)); BOOST_CHECK((~~R1S << 10) == (R1S << 10));\n-    BOOST_CHECK(!(~~R1L < R1L)); BOOST_CHECK(!(~~R1S < R1S)); \n-    BOOST_CHECK(~~R1L <= R1L); BOOST_CHECK(~~R1S <= R1S); \n-    BOOST_CHECK(!(~~R1L > R1L)); BOOST_CHECK(!(~~R1S > R1S)); \n-    BOOST_CHECK(~~R1L >= R1L); BOOST_CHECK(~~R1S >= R1S); \n-    BOOST_CHECK(!(R1L < ~~R1L)); BOOST_CHECK(!(R1S < ~~R1S)); \n-    BOOST_CHECK(R1L <= ~~R1L); BOOST_CHECK(R1S <= ~~R1S); \n-    BOOST_CHECK(!(R1L > ~~R1L)); BOOST_CHECK(!(R1S > ~~R1S)); \n-    BOOST_CHECK(R1L >= ~~R1L); BOOST_CHECK(R1S >= ~~R1S); \n+    BOOST_CHECK((~~R1L >> 10) == (R1L >> 10));\n+    BOOST_CHECK((~~R1L << 10) == (R1L << 10));\n+    BOOST_CHECK(!(~~R1L < R1L));\n+    BOOST_CHECK(~~R1L <= R1L);\n+    BOOST_CHECK(!(~~R1L > R1L));\n+    BOOST_CHECK(~~R1L >= R1L);\n+    BOOST_CHECK(!(R1L < ~~R1L));\n+    BOOST_CHECK(R1L <= ~~R1L);\n+    BOOST_CHECK(!(R1L > ~~R1L));\n+    BOOST_CHECK(R1L >= ~~R1L);\n     \n     BOOST_CHECK(~~R1L + R2L == R1L + ~~R2L);\n-    BOOST_CHECK(~~R1S + R2S == R1S + ~~R2S);\n     BOOST_CHECK(~~R1L - R2L == R1L - ~~R2L);\n-    BOOST_CHECK(~~R1S - R2S == R1S - ~~R2S);\n     BOOST_CHECK(~R1L != R1L); BOOST_CHECK(R1L != ~R1L); \n-    BOOST_CHECK(~R1S != R1S); BOOST_CHECK(R1S != ~R1S); \n     unsigned char TmpArray[32];\n     CHECKBITWISEOPERATOR(~R1,R2,|)\n     CHECKBITWISEOPERATOR(~R1,R2,^)"
      },
      {
        "sha": "c6702f8d567aee0bbf79bf644aa77e03fbcc07a5",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
        "patch": "@@ -216,23 +216,6 @@ unsigned int base_uint<BITS>::bits() const\n     return 0;\n }\n \n-// Explicit instantiations for base_uint<160>\n-template base_uint<160>::base_uint(const std::string&);\n-template base_uint<160>::base_uint(const std::vector<unsigned char>&);\n-template base_uint<160>& base_uint<160>::operator<<=(unsigned int);\n-template base_uint<160>& base_uint<160>::operator>>=(unsigned int);\n-template base_uint<160>& base_uint<160>::operator*=(uint32_t b32);\n-template base_uint<160>& base_uint<160>::operator*=(const base_uint<160>& b);\n-template base_uint<160>& base_uint<160>::operator/=(const base_uint<160>& b);\n-template int base_uint<160>::CompareTo(const base_uint<160>&) const;\n-template bool base_uint<160>::EqualTo(uint64_t) const;\n-template double base_uint<160>::getdouble() const;\n-template std::string base_uint<160>::GetHex() const;\n-template std::string base_uint<160>::ToString() const;\n-template void base_uint<160>::SetHex(const char*);\n-template void base_uint<160>::SetHex(const std::string&);\n-template unsigned int base_uint<160>::bits() const;\n-\n // Explicit instantiations for base_uint<256>\n template base_uint<256>::base_uint(const std::string&);\n template base_uint<256>::base_uint(const std::vector<unsigned char>&);"
      },
      {
        "sha": "933b17d2e42113485e0bd131dfeda3e830ef94e3",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a0f5812bfa0cfed69ac745e26ce4f869b470a53/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
        "patch": "@@ -305,16 +305,6 @@ class base_uint\n     }\n };\n \n-/** 160-bit unsigned big integer. */\n-class uint160 : public base_uint<160> {\n-public:\n-    uint160() {}\n-    uint160(const base_uint<160>& b) : base_uint<160>(b) {}\n-    uint160(uint64_t b) : base_uint<160>(b) {}\n-    explicit uint160(const std::string& str) : base_uint<160>(str) {}\n-    explicit uint160(const std::vector<unsigned char>& vch) : base_uint<160>(vch) {}\n-};\n-\n /** 256-bit unsigned big integer. */\n class uint256 : public base_uint<256> {\n public:"
      }
    ]
  },
  {
    "sha": "cfe94532e7909fcae3067400b5315cb3e9efd701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmU5NDUzMmU3OTA5ZmNhZTMwNjc0MDBiNTMxNWNiM2U5ZWZkNzAx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T14:26:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T07:00:07Z"
      },
      "message": "Remove now-unused methods from uint256 and base_uint",
      "tree": {
        "sha": "75aed97d8af76caf52646f6e1d0a452d83b0f440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75aed97d8af76caf52646f6e1d0a452d83b0f440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfe94532e7909fcae3067400b5315cb3e9efd701",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe94532e7909fcae3067400b5315cb3e9efd701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe94532e7909fcae3067400b5315cb3e9efd701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe94532e7909fcae3067400b5315cb3e9efd701/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a0f5812bfa0cfed69ac745e26ce4f869b470a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a0f5812bfa0cfed69ac745e26ce4f869b470a53"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 0,
      "deletions": 116
    },
    "files": [
      {
        "sha": "5998222125116feeaa5c5cd6684fa352546c717f",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe94532e7909fcae3067400b5315cb3e9efd701/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe94532e7909fcae3067400b5315cb3e9efd701/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=cfe94532e7909fcae3067400b5315cb3e9efd701",
        "patch": "@@ -390,25 +390,6 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(R1L.GetLow64()  == R1LLow64);\n     BOOST_CHECK(HalfL.GetLow64() ==0x0000000000000000ULL);\n     BOOST_CHECK(OneL.GetLow64() ==0x0000000000000001ULL);\n-    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-\n-    std::stringstream ss;\n-    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(R1L == TmpL);\n-    ss.str(\"\");\n-    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ZeroL == TmpL);\n-    ss.str(\"\");\n-    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n-    BOOST_CHECK(MaxL == TmpL);\n-    ss.str(\"\");\n \n     for (unsigned int i = 0; i < 255; ++i) \n     {"
      },
      {
        "sha": "54a4a716a837aef39610b18ddeb6e7bdbe50ae00",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe94532e7909fcae3067400b5315cb3e9efd701/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe94532e7909fcae3067400b5315cb3e9efd701/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=cfe94532e7909fcae3067400b5315cb3e9efd701",
        "patch": "@@ -278,68 +278,6 @@ uint32_t uint256::GetCompact(bool fNegative) const\n     return nCompact;\n }\n \n-static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n-{\n-    // Taken from lookup3, by Bob Jenkins.\n-    a -= c;\n-    a ^= ((c << 4) | (c >> 28));\n-    c += b;\n-    b -= a;\n-    b ^= ((a << 6) | (a >> 26));\n-    a += c;\n-    c -= b;\n-    c ^= ((b << 8) | (b >> 24));\n-    b += a;\n-    a -= c;\n-    a ^= ((c << 16) | (c >> 16));\n-    c += b;\n-    b -= a;\n-    b ^= ((a << 19) | (a >> 13));\n-    a += c;\n-    c -= b;\n-    c ^= ((b << 4) | (b >> 28));\n-    b += a;\n-}\n-\n-static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n-{\n-    // Taken from lookup3, by Bob Jenkins.\n-    c ^= b;\n-    c -= ((b << 14) | (b >> 18));\n-    a ^= c;\n-    a -= ((c << 11) | (c >> 21));\n-    b ^= a;\n-    b -= ((a << 25) | (a >> 7));\n-    c ^= b;\n-    c -= ((b << 16) | (b >> 16));\n-    a ^= c;\n-    a -= ((c << 4) | (c >> 28));\n-    b ^= a;\n-    b -= ((a << 14) | (a >> 18));\n-    c ^= b;\n-    c -= ((b << 24) | (b >> 8));\n-}\n-\n-uint64_t uint256::GetHash(const uint256& salt) const\n-{\n-    uint32_t a, b, c;\n-    a = b = c = 0xdeadbeef + (WIDTH << 2);\n-\n-    a += pn[0] ^ salt.pn[0];\n-    b += pn[1] ^ salt.pn[1];\n-    c += pn[2] ^ salt.pn[2];\n-    HashMix(a, b, c);\n-    a += pn[3] ^ salt.pn[3];\n-    b += pn[4] ^ salt.pn[4];\n-    c += pn[5] ^ salt.pn[5];\n-    HashMix(a, b, c);\n-    a += pn[6] ^ salt.pn[6];\n-    b += pn[7] ^ salt.pn[7];\n-    HashFinal(a, b, c);\n-\n-    return ((((uint64_t)b) << 32) | c);\n-}\n-\n blob256 UintToBlob256(const uint256 &a)\n {\n     blob256 b;"
      },
      {
        "sha": "cb50199e3e854f48e2068f497e06541511c8b0dd",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe94532e7909fcae3067400b5315cb3e9efd701/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe94532e7909fcae3067400b5315cb3e9efd701/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=cfe94532e7909fcae3067400b5315cb3e9efd701",
        "patch": "@@ -269,40 +269,6 @@ class base_uint\n         assert(WIDTH >= 2);\n         return pn[0] | (uint64_t)pn[1] << 32;\n     }\n-\n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return sizeof(pn);\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n-    {\n-        s.write((char*)pn, sizeof(pn));\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n-    {\n-        s.read((char*)pn, sizeof(pn));\n-    }\n-\n-    // Temporary for migration to blob160/256\n-    uint64_t GetCheapHash() const\n-    {\n-        return GetLow64();\n-    }\n-    void SetNull()\n-    {\n-        memset(pn, 0, sizeof(pn));\n-    }\n-    bool IsNull() const\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            if (pn[i] != 0)\n-                return false;\n-        return true;\n-    }\n };\n \n /** 256-bit unsigned big integer. */\n@@ -337,7 +303,6 @@ class uint256 : public base_uint<256> {\n     uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL);\n     uint32_t GetCompact(bool fNegative = false) const;\n \n-    uint64_t GetHash(const uint256& salt) const;\n     friend uint256 BlobToUint256(const blob256 &);\n     friend blob256 UintToBlob256(const uint256 &);\n };"
      }
    ]
  },
  {
    "sha": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjE1NjNhM2E1YzI1OWZlNGZmMDM0ZjIwNmRmMDc4OGM1NjUzNjVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-15T15:27:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-16T09:02:58Z"
      },
      "message": "Add tests for blob256",
      "tree": {
        "sha": "ea729676f58885eeef2fb6e86a02b1bd1fc7f00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea729676f58885eeef2fb6e86a02b1bd1fc7f00a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f1563a3a5c259fe4ff034f206df0788c565365e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1563a3a5c259fe4ff034f206df0788c565365e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f1563a3a5c259fe4ff034f206df0788c565365e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1563a3a5c259fe4ff034f206df0788c565365e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfe94532e7909fcae3067400b5315cb3e9efd701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe94532e7909fcae3067400b5315cb3e9efd701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe94532e7909fcae3067400b5315cb3e9efd701"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 270,
      "deletions": 0
    },
    "files": [
      {
        "sha": "de87fb84bae9afa72186f4260f2f70d2985ad273",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1563a3a5c259fe4ff034f206df0788c565365e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1563a3a5c259fe4ff034f206df0788c565365e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8f1563a3a5c259fe4ff034f206df0788c565365e",
        "patch": "@@ -39,6 +39,7 @@ BITCOIN_TESTS =\\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n+  test/blob256_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\"
      },
      {
        "sha": "0098586603de879bde23bd451e7c6e2e997c98b9",
        "filename": "src/test/blob256_tests.cpp",
        "status": "added",
        "additions": 269,
        "deletions": 0,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1563a3a5c259fe4ff034f206df0788c565365e/src/test/blob256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1563a3a5c259fe4ff034f206df0788c565365e/src/test/blob256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blob256_tests.cpp?ref=8f1563a3a5c259fe4ff034f206df0788c565365e",
        "patch": "@@ -0,0 +1,269 @@\n+// Copyright (c) 2011-2013 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n+#include \"blob256.h\"\n+#include \"uint256.h\"\n+#include <string>\n+#include \"version.h\"\n+#include <stdio.h>\n+\n+BOOST_AUTO_TEST_SUITE(blob256_tests)\n+\n+const unsigned char R1Array[] =\n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const char R1ArrayHex[] = \"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c\";\n+const blob256 R1L = blob256(std::vector<unsigned char>(R1Array,R1Array+32));\n+const blob160 R1S = blob160(std::vector<unsigned char>(R1Array,R1Array+20));\n+\n+const unsigned char R2Array[] =\n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const blob256 R2L = blob256(std::vector<unsigned char>(R2Array,R2Array+32));\n+const blob160 R2S = blob160(std::vector<unsigned char>(R2Array,R2Array+20));\n+\n+const unsigned char ZeroArray[] =\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const blob256 ZeroL = blob256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));\n+const blob160 ZeroS = blob160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));\n+\n+const unsigned char OneArray[] =\n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const blob256 OneL = blob256(std::vector<unsigned char>(OneArray,OneArray+32));\n+const blob160 OneS = blob160(std::vector<unsigned char>(OneArray,OneArray+20));\n+\n+const unsigned char MaxArray[] =\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const blob256 MaxL = blob256(std::vector<unsigned char>(MaxArray,MaxArray+32));\n+const blob160 MaxS = blob160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n+\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+        Stream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }\n+    return Stream.str();\n+}\n+\n+inline blob160 blob160S(const char *str)\n+{\n+    blob160 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+inline blob160 blob160S(const std::string& str)\n+{\n+    blob160 rv;\n+    rv.SetHex(str);\n+    return rv;\n+}\n+\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n+{\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor blob256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(blob256S(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(blob256S(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(blob256S(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(blob256S(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(blob256S(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(blob256S(R1L.ToString()) == R1L);\n+    BOOST_CHECK(blob256S(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(blob256S(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == blob256S(R1ArrayHex));\n+    BOOST_CHECK(blob256(R1L) == R1L);\n+    BOOST_CHECK(blob256(ZeroL) == ZeroL);\n+    BOOST_CHECK(blob256(OneL) == OneL);\n+\n+    BOOST_CHECK(blob160S(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(blob160S(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(blob160S(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(blob160S(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(blob160S(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(blob160S(R1S.ToString()) == R1S);\n+    BOOST_CHECK(blob160S(\"   0x\"+R1S.ToString()+\"   \") == R1S);\n+    BOOST_CHECK(blob160S(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == blob160S(R1ArrayHex));\n+\n+    BOOST_CHECK(blob160(R1S) == R1S);\n+    BOOST_CHECK(blob160(ZeroS) == ZeroS);\n+    BOOST_CHECK(blob160(OneS) == OneS);\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    blob256 LastL;\n+    for (int i = 255; i >= 0; --i) {\n+        blob256 TmpL;\n+        *(TmpL.begin() + (i>>3)) |= 1<<(7-(i&7));\n+        BOOST_CHECK( LastL < TmpL );\n+        LastL = TmpL;\n+    }\n+\n+    BOOST_CHECK( ZeroL < R1L );\n+    BOOST_CHECK( R2L < R1L );\n+    BOOST_CHECK( ZeroL < OneL );\n+    BOOST_CHECK( OneL < MaxL );\n+    BOOST_CHECK( R1L < MaxL );\n+    BOOST_CHECK( R2L < MaxL );\n+\n+    blob160 LastS;\n+    for (int i = 159; i >= 0; --i) {\n+        blob160 TmpS;\n+        *(TmpS.begin() + (i>>3)) |= 1<<(7-(i&7));\n+        BOOST_CHECK( LastS < TmpS );\n+        LastS = TmpS;\n+    }\n+    BOOST_CHECK( ZeroS < R1S );\n+    BOOST_CHECK( R2S < R1S );\n+    BOOST_CHECK( ZeroS < OneS );\n+    BOOST_CHECK( OneS < MaxS );\n+    BOOST_CHECK( R1S < MaxS );\n+    BOOST_CHECK( R2S < MaxS );\n+}\n+\n+BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize\n+{\n+    BOOST_CHECK(R1L.GetHex() == R1L.ToString());\n+    BOOST_CHECK(R2L.GetHex() == R2L.ToString());\n+    BOOST_CHECK(OneL.GetHex() == OneL.ToString());\n+    BOOST_CHECK(MaxL.GetHex() == MaxL.ToString());\n+    blob256 TmpL(R1L);\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL.SetHex(R2L.ToString());   BOOST_CHECK(TmpL == R2L);\n+    TmpL.SetHex(ZeroL.ToString()); BOOST_CHECK(TmpL == blob256());\n+\n+    TmpL.SetHex(R1L.ToString());\n+    BOOST_CHECK(memcmp(R1L.begin(), R1Array, 32)==0);\n+    BOOST_CHECK(memcmp(TmpL.begin(), R1Array, 32)==0);\n+    BOOST_CHECK(memcmp(R2L.begin(), R2Array, 32)==0);\n+    BOOST_CHECK(memcmp(ZeroL.begin(), ZeroArray, 32)==0);\n+    BOOST_CHECK(memcmp(OneL.begin(), OneArray, 32)==0);\n+    BOOST_CHECK(R1L.size() == sizeof(R1L));\n+    BOOST_CHECK(sizeof(R1L) == 32);\n+    BOOST_CHECK(R1L.size() == 32);\n+    BOOST_CHECK(R2L.size() == 32);\n+    BOOST_CHECK(ZeroL.size() == 32);\n+    BOOST_CHECK(MaxL.size() == 32);\n+    BOOST_CHECK(R1L.begin() + 32 == R1L.end());\n+    BOOST_CHECK(R2L.begin() + 32 == R2L.end());\n+    BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n+    BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n+    BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n+    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+\n+    std::stringstream ss;\n+    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(R1L == TmpL);\n+    ss.str(\"\");\n+    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ZeroL == TmpL);\n+    ss.str(\"\");\n+    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n+    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(MaxL == TmpL);\n+    ss.str(\"\");\n+\n+    BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n+    BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n+    BOOST_CHECK(OneS.GetHex() == OneS.ToString());\n+    BOOST_CHECK(MaxS.GetHex() == MaxS.ToString());\n+    blob160 TmpS(R1S);\n+    BOOST_CHECK(TmpS == R1S);\n+    TmpS.SetHex(R2S.ToString());   BOOST_CHECK(TmpS == R2S);\n+    TmpS.SetHex(ZeroS.ToString()); BOOST_CHECK(TmpS == blob160());\n+\n+    TmpS.SetHex(R1S.ToString());\n+    BOOST_CHECK(memcmp(R1S.begin(), R1Array, 20)==0);\n+    BOOST_CHECK(memcmp(TmpS.begin(), R1Array, 20)==0);\n+    BOOST_CHECK(memcmp(R2S.begin(), R2Array, 20)==0);\n+    BOOST_CHECK(memcmp(ZeroS.begin(), ZeroArray, 20)==0);\n+    BOOST_CHECK(memcmp(OneS.begin(), OneArray, 20)==0);\n+    BOOST_CHECK(R1S.size() == sizeof(R1S));\n+    BOOST_CHECK(sizeof(R1S) == 20);\n+    BOOST_CHECK(R1S.size() == 20);\n+    BOOST_CHECK(R2S.size() == 20);\n+    BOOST_CHECK(ZeroS.size() == 20);\n+    BOOST_CHECK(MaxS.size() == 20);\n+    BOOST_CHECK(R1S.begin() + 20 == R1S.end());\n+    BOOST_CHECK(R2S.begin() + 20 == R2S.end());\n+    BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n+    BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n+    BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n+    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+\n+    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(R1S == TmpS);\n+    ss.str(\"\");\n+    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ZeroS == TmpS);\n+    ss.str(\"\");\n+    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n+    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    BOOST_CHECK(MaxS == TmpS);\n+    ss.str(\"\");\n+}\n+\n+BOOST_AUTO_TEST_CASE( conversion )\n+{\n+    BOOST_CHECK(UintToBlob256(BlobToUint256(ZeroL)) == ZeroL);\n+    BOOST_CHECK(UintToBlob256(BlobToUint256(OneL)) == OneL);\n+    BOOST_CHECK(UintToBlob256(BlobToUint256(R1L)) == R1L);\n+    BOOST_CHECK(UintToBlob256(BlobToUint256(R2L)) == R2L);\n+    BOOST_CHECK(BlobToUint256(ZeroL) == 0);\n+    BOOST_CHECK(BlobToUint256(OneL) == 1);\n+    BOOST_CHECK(UintToBlob256(0) == ZeroL);\n+    BOOST_CHECK(UintToBlob256(1) == OneL);\n+    BOOST_CHECK(uint256(R1L.GetHex()) == BlobToUint256(R1L));\n+    BOOST_CHECK(uint256(R2L.GetHex()) == BlobToUint256(R2L));\n+    BOOST_CHECK(R1L.GetHex() == BlobToUint256(R1L).GetHex());\n+    BOOST_CHECK(R2L.GetHex() == BlobToUint256(R2L).GetHex());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  }
]