[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67062561",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67062561",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5478",
    "id": 67062561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDYyNTYx",
    "user": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-15T20:46:43Z",
    "updated_at": "2014-12-15T20:46:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "This appears to be unused now:\n\n```\nsrc/test/uint256_tests.cpp:const double R1Sdouble = 0.7096329412477836074; \n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67062561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67113660",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67113660",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5478",
    "id": 67113660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTEzNjYw",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-16T05:16:15Z",
    "updated_at": "2014-12-16T05:16:15Z",
    "author_association": "MEMBER",
    "body": "@paveljanik Thanks, I'll remove it. All *S variables in `uint256_tests.cpp` are for testing uint160, which went away.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67113660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67123372",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67123372",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5478",
    "id": 67123372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTIzMzcy",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-16T07:45:43Z",
    "updated_at": "2014-12-16T08:40:58Z",
    "author_association": "MEMBER",
    "body": "Re: people complaining about rebasing their pulls, if the large diff in 'A: pure renames' is problematic, we could cheat by changing uint256 and uint160 to be blob types and introduce a new type for actual 256 bit integer arithmetic. But as clear type names are important I don't really like this.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67123372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67154146",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67154146",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5478",
    "id": 67154146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTU0MTQ2",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-16T12:44:19Z",
    "updated_at": "2014-12-16T12:44:19Z",
    "author_association": "MEMBER",
    "body": "I would actually like the PR as a whole to just introduce arith_uint256 or something (for the version with arithmetic semantics) and leave uint256/uint160 in place (for the version without). That will result in a much smaller patchset, and require much less rebasings while this is being reviewed.\n\nPerhaps later there can be mass rename that is trivial to review and merge.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67154146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67158692",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67158692",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5478",
    "id": 67158692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTU4Njky",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-16T13:25:41Z",
    "updated_at": "2014-12-16T13:25:41Z",
    "author_association": "MEMBER",
    "body": "Ok, reluctantly agreed... As I say above already I hate the idea of using uint160/uint256 for what are not actually integers and introduce a yes_this_is_really_an_int256 for real uint256 arithmetic, but yes the diff will be much smaller.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67158692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67163551",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67163551",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5478",
    "id": 67163551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTYzNTUx",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-16T14:05:41Z",
    "updated_at": "2014-12-17T10:06:10Z",
    "author_association": "MEMBER",
    "body": "Closing, will reopen after reorganization.\n\nContinued in #5490\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67163551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891455",
    "pull_request_review_id": null,
    "id": 21891455,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkxNDU1",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {",
    "path": "src/blob256.h",
    "position": 57,
    "original_position": 57,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it break anything if we defined the ordering of blob256 as platform-dependent? That would allow using memcmp for this operator too.\n",
    "created_at": "2014-12-16T11:24:25Z",
    "updated_at": "2014-12-16T11:24:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891455",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891455"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891455"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891628",
    "pull_request_review_id": null,
    "id": 21891628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkxNjI4",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {",
    "path": "src/blob256.h",
    "position": 57,
    "original_position": 57,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In fact, I think that would allow implementing blob\\* as wrappers around byte arrays, and leave all integer conversion to uint*.\n\nEDIT: Sorry, they already are byte-arrays; I should read more before commenting.\n\nEDIT2: In fact, I think the implementation below is already identical to just \"memcmp(a.data, b.data, sizeof(a.data)) < 0\".\n",
    "created_at": "2014-12-16T11:28:45Z",
    "updated_at": "2014-12-16T11:32:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891914",
    "pull_request_review_id": null,
    "id": 21891914,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkxOTE0",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)",
    "path": "src/blob256.h",
    "position": 31,
    "original_position": 31,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "memcpy?\n\nOr just the default copy constructor, really.\n",
    "created_at": "2014-12-16T11:35:58Z",
    "updated_at": "2014-12-16T11:36:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891914",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891914"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891914"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891916",
    "pull_request_review_id": null,
    "id": 21891916,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkxOTE2",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;",
    "path": "src/blob256.h",
    "position": 26,
    "original_position": 26,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "memset?\n",
    "created_at": "2014-12-16T11:36:03Z",
    "updated_at": "2014-12-16T11:36:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891916",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891916"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891916"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 26,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891982",
    "pull_request_review_id": null,
    "id": 21891982,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkxOTgy",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            if (a.data[i] < b.data[i])\n+                return true;\n+            else if (a.data[i] > b.data[i])\n+                return false;\n+        }\n+        return false;\n+    }\n+\n+    std::string GetHex() const;\n+    void SetHex(const char* psz);\n+    void SetHex(const std::string& str);\n+    std::string ToString() const;\n+\n+    unsigned char* begin()\n+    {\n+        return &data[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return &data[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    unsigned int size() const\n+    {\n+        return sizeof(data);\n+    }\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return sizeof(data);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        s.write((char*)data, sizeof(data));\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        s.read((char*)data, sizeof(data));\n+    }\n+\n+    /** A cheap hash function that just returns 64 bits from the result, it can be\n+     * used when the contents are considered uniformly random. It is not appropriate\n+     * when the value can easily be influenced from outside as e.g. a network adversary could\n+     * provide values to trigger worst-case behavior.\n+     * @note The result of this function is not stable between little and big endian.\n+     */\n+    uint64_t GetCheapHash() const",
    "path": "src/blob256.h",
    "position": 120,
    "original_position": 120,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This can probably be local to blob256.h?\n",
    "created_at": "2014-12-16T11:37:43Z",
    "updated_at": "2014-12-16T11:37:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891982",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891982"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891982"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21891982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892272",
    "pull_request_review_id": null,
    "id": 21892272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkyMjcy",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            if (a.data[i] < b.data[i])\n+                return true;\n+            else if (a.data[i] > b.data[i])\n+                return false;\n+        }\n+        return false;\n+    }\n+\n+    std::string GetHex() const;\n+    void SetHex(const char* psz);\n+    void SetHex(const std::string& str);\n+    std::string ToString() const;\n+\n+    unsigned char* begin()\n+    {\n+        return &data[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return &data[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    unsigned int size() const\n+    {\n+        return sizeof(data);\n+    }\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return sizeof(data);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        s.write((char*)data, sizeof(data));\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        s.read((char*)data, sizeof(data));\n+    }\n+\n+    /** A cheap hash function that just returns 64 bits from the result, it can be\n+     * used when the contents are considered uniformly random. It is not appropriate\n+     * when the value can easily be influenced from outside as e.g. a network adversary could\n+     * provide values to trigger worst-case behavior.\n+     * @note The result of this function is not stable between little and big endian.\n+     */\n+    uint64_t GetCheapHash() const",
    "path": "src/blob256.h",
    "position": 120,
    "original_position": 120,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How that? There are four uses of this function in addrman.cpp and one in main.h.\n",
    "created_at": "2014-12-16T11:44:54Z",
    "updated_at": "2014-12-16T11:45:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892296",
    "pull_request_review_id": null,
    "id": 21892296,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkyMjk2",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {",
    "path": "src/blob256.h",
    "position": 57,
    "original_position": 57,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, it's identical to memcmp, good catch. Will use that.\n",
    "created_at": "2014-12-16T11:45:25Z",
    "updated_at": "2014-12-16T11:45:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892296",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892296"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892296"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892309",
    "pull_request_review_id": null,
    "id": 21892309,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkyMzA5",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;",
    "path": "src/blob256.h",
    "position": 26,
    "original_position": 26,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ACK\n",
    "created_at": "2014-12-16T11:45:51Z",
    "updated_at": "2014-12-16T11:45:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892309",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892309"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892309"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 26,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892406",
    "pull_request_review_id": null,
    "id": 21892406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkyNDA2",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            if (a.data[i] < b.data[i])\n+                return true;\n+            else if (a.data[i] > b.data[i])\n+                return false;\n+        }\n+        return false;\n+    }\n+\n+    std::string GetHex() const;\n+    void SetHex(const char* psz);\n+    void SetHex(const std::string& str);\n+    std::string ToString() const;\n+\n+    unsigned char* begin()\n+    {\n+        return &data[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return &data[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    unsigned int size() const\n+    {\n+        return sizeof(data);\n+    }\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return sizeof(data);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        s.write((char*)data, sizeof(data));\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        s.read((char*)data, sizeof(data));\n+    }\n+\n+    /** A cheap hash function that just returns 64 bits from the result, it can be\n+     * used when the contents are considered uniformly random. It is not appropriate\n+     * when the value can easily be influenced from outside as e.g. a network adversary could\n+     * provide values to trigger worst-case behavior.\n+     * @note The result of this function is not stable between little and big endian.\n+     */\n+    uint64_t GetCheapHash() const",
    "path": "src/blob256.h",
    "position": 120,
    "original_position": 120,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry, that was confused. I mean making it specific to the blob256 type, as opposed to base_blob.\n",
    "created_at": "2014-12-16T11:48:15Z",
    "updated_at": "2014-12-16T11:48:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892775",
    "pull_request_review_id": null,
    "id": 21892775,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkyNzc1",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)",
    "path": "src/blob256.h",
    "position": 31,
    "original_position": 31,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. The default POD copy constructor (as well as assignment operator?) will do the right thing here.\n",
    "created_at": "2014-12-16T11:58:31Z",
    "updated_at": "2014-12-16T11:58:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892775",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892775"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892775"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21892775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21893340",
    "pull_request_review_id": null,
    "id": 21893340,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODkzMzQw",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)",
    "path": "src/blob256.h",
    "position": 31,
    "original_position": 31,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yup, the assignment operator too. Though perhaps those are needed to make the inherited blob256/uint256 work; unsure.\n",
    "created_at": "2014-12-16T12:13:51Z",
    "updated_at": "2014-12-16T12:13:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21893340",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21893340"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21893340"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21893340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21894230",
    "pull_request_review_id": null,
    "id": 21894230,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODk0MjMw",
    "diff_hunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOB256_H\n+#define BITCOIN_BLOB256_H\n+\n+#include <assert.h>\n+#include <cstring>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+/** Template base class for fixed-sized opaque blobs. */\n+template<unsigned int BITS>\n+class base_blob\n+{\n+protected:\n+    enum { WIDTH=BITS/8 };\n+    uint8_t data[WIDTH];\n+public:\n+    base_blob()\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = 0;\n+    }\n+\n+    base_blob(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+    }\n+\n+    base_blob& operator=(const base_blob& b)\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            data[i] = b.data[i];\n+        return *this;\n+    }\n+    explicit base_blob(const std::vector<unsigned char>& vch);\n+\n+    bool IsNull() const\n+    {\n+        for (int i = 0; i < WIDTH; i++)\n+            if (data[i] != 0)\n+                return false;\n+        return true;\n+    }\n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+\n+    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }\n+    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }\n+    friend inline bool operator<(const base_blob& a, const base_blob& b) {\n+        for (int i = 0; i < WIDTH; i++)\n+        {\n+            if (a.data[i] < b.data[i])\n+                return true;\n+            else if (a.data[i] > b.data[i])\n+                return false;\n+        }\n+        return false;\n+    }\n+\n+    std::string GetHex() const;\n+    void SetHex(const char* psz);\n+    void SetHex(const std::string& str);\n+    std::string ToString() const;\n+\n+    unsigned char* begin()\n+    {\n+        return &data[0];\n+    }\n+\n+    unsigned char* end()\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    const unsigned char* begin() const\n+    {\n+        return &data[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return &data[WIDTH];\n+    }\n+\n+    unsigned int size() const\n+    {\n+        return sizeof(data);\n+    }\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return sizeof(data);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        s.write((char*)data, sizeof(data));\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        s.read((char*)data, sizeof(data));\n+    }\n+\n+    /** A cheap hash function that just returns 64 bits from the result, it can be\n+     * used when the contents are considered uniformly random. It is not appropriate\n+     * when the value can easily be influenced from outside as e.g. a network adversary could\n+     * provide values to trigger worst-case behavior.\n+     * @note The result of this function is not stable between little and big endian.\n+     */\n+    uint64_t GetCheapHash() const",
    "path": "src/blob256.h",
    "position": 120,
    "original_position": 120,
    "commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "original_commit_id": "8f1563a3a5c259fe4ff034f206df0788c565365e",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "SGTM\n",
    "created_at": "2014-12-16T12:31:40Z",
    "updated_at": "2014-12-16T12:31:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21894230",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21894230"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21894230"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5478"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21894230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 120,
    "original_line": 120,
    "side": "RIGHT"
  }
]