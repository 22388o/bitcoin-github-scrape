paveljanik,2014-12-15T20:46:43Z,This appears to be unused now:\n\n```\nsrc/test/uint256_tests.cpp:const double R1Sdouble = 0.7096329412477836074; \n```\n,https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67062561,67062561,
laanwj,2014-12-16T05:16:15Z,"@paveljanik Thanks, I'll remove it. All *S variables in `uint256_tests.cpp` are for testing uint160, which went away.\n",https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67113660,67113660,
laanwj,2014-12-16T07:45:43Z,"Re: people complaining about rebasing their pulls, if the large diff in 'A: pure renames' is problematic, we could cheat by changing uint256 and uint160 to be blob types and introduce a new type for actual 256 bit integer arithmetic. But as clear type names are important I don't really like this.\n",https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67123372,67123372,
sipa,2014-12-16T12:44:19Z,"I would actually like the PR as a whole to just introduce arith_uint256 or something (for the version with arithmetic semantics) and leave uint256/uint160 in place (for the version without). That will result in a much smaller patchset, and require much less rebasings while this is being reviewed.\n\nPerhaps later there can be mass rename that is trivial to review and merge.\n",https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67154146,67154146,
laanwj,2014-12-16T13:25:41Z,"Ok, reluctantly agreed... As I say above already I hate the idea of using uint160/uint256 for what are not actually integers and introduce a yes_this_is_really_an_int256 for real uint256 arithmetic, but yes the diff will be much smaller.\n",https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67158692,67158692,
laanwj,2014-12-16T14:05:41Z,"Closing, will reopen after reorganization.\n\nContinued in #5490\n",https://github.com/bitcoin/bitcoin/pull/5478#issuecomment-67163551,67163551,
sipa,2014-12-16T11:24:25Z,Would it break anything if we defined the ordering of blob256 as platform-dependent? That would allow using memcmp for this operator too.\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891455,21891455,src/blob256.h
sipa,2014-12-16T11:28:45Z,"In fact, I think that would allow implementing blob\* as wrappers around byte arrays, and leave all integer conversion to uint*.\n\nEDIT: Sorry, they already are byte-arrays; I should read more before commenting.\n\nEDIT2: In fact, I think the implementation below is already identical to just ""memcmp(a.data, b.data, sizeof(a.data)) < 0"".\n",https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891628,21891628,src/blob256.h
sipa,2014-12-16T11:35:58Z,"memcpy?\n\nOr just the default copy constructor, really.\n",https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891914,21891914,src/blob256.h
sipa,2014-12-16T11:36:03Z,memset?\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891916,21891916,src/blob256.h
sipa,2014-12-16T11:37:43Z,This can probably be local to blob256.h?\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21891982,21891982,src/blob256.h
laanwj,2014-12-16T11:44:54Z,How that? There are four uses of this function in addrman.cpp and one in main.h.\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892272,21892272,src/blob256.h
laanwj,2014-12-16T11:45:25Z,"Yes, it's identical to memcmp, good catch. Will use that.\n",https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892296,21892296,src/blob256.h
laanwj,2014-12-16T11:45:51Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892309,21892309,src/blob256.h
sipa,2014-12-16T11:48:15Z,"Sorry, that was confused. I mean making it specific to the blob256 type, as opposed to base_blob.\n",https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892406,21892406,src/blob256.h
laanwj,2014-12-16T11:58:31Z,Good point. The default POD copy constructor (as well as assignment operator?) will do the right thing here.\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21892775,21892775,src/blob256.h
sipa,2014-12-16T12:13:51Z,"Yup, the assignment operator too. Though perhaps those are needed to make the inherited blob256/uint256 work; unsure.\n",https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21893340,21893340,src/blob256.h
laanwj,2014-12-16T12:31:40Z,SGTM\n,https://github.com/bitcoin/bitcoin/pull/5478#discussion_r21894230,21894230,src/blob256.h
