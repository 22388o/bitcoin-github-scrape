[
  {
    "sha": "70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGJiYjkzNTRjYzAyMTNiZDVmZjYzZTJlY2Q4NWY4ZmM0ZTM4MzU2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T08:44:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T12:05:38Z"
      },
      "message": "[MOVEONLY] move ReadKeyValue to walletmapper.c",
      "tree": {
        "sha": "68f3c47fc0457f2bbadf7fcd0a1f14be19c09027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f3c47fc0457f2bbadf7fcd0a1f14be19c09027"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQBIXAAoJECnUvLZBb1Ps89cP/09DKlmhQ9pZoI45y5o1xmQE\nMKKJwNuq3a+9O0dxlbQKpGDsCuzUAAOJpf7gSFHLZx/TF7Vhr57rU4R0kvF2sAHZ\nHjKY44T61IQ478yHD1/b7VXZ6w3jALMKAoMIn6plIsPuXs2HvMFdk5WoiTAAlNzJ\n7jPp7SgO337x+MluzrC+eu9Pc3bI497XAHZ/UcZdRFyMK9twLIn2TJ9KdKWKfOsP\nTZlLPlt8DlIn7mF7tV2Lp4P+Mw6OaSDcFE0rA7e2KgqltbkcuoCf1/Cqhx6BTQw3\nLlo3Nnhq6C5OSC6BhQOGMohC2+SVeMWOVyz6+PFrQFoiB25clhzIs4q+51xRZ3Cs\nXCYj5kM1NCkB5cePk006dZRRENiQgxA9T4k4M9gQmhTHa5EyI+qwljyJQR9k53r9\njzX4C8vvN7RzrRIc7iAKpWN6isMnUTzqMy8G1pYEvAGmgGExZd6i8o10Jx+WcTXe\nCGaHodjI6GYeaOgESyHopsKwwPnT7AMLKEaCFWly1O4TYv1IHmQJSzm1RyyfvuJH\nkzzCvTIgFnI0iDQ9gviFnTvFjYlgFJbWrkmGViz9HCkItKJE8vyS6tqDGvO8c5ml\nGBY/JzjEzCwcuWNrrjFZhnqrSDqg0N5qxar3DWCfk+O4IqgyoGU+HWgK7E/OmJA4\nNbVIR4mDbi/Ly1/HWaO4\n=FIiZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 68f3c47fc0457f2bbadf7fcd0a1f14be19c09027\nparent 3bf06e9bac57b5b5a746677b75e297a7b154bdbd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1480581841 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1480593938 +0100\n\n[MOVEONLY] move ReadKeyValue to walletmapper.c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bf06e9bac57b5b5a746677b75e297a7b154bdbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf06e9bac57b5b5a746677b75e297a7b154bdbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf06e9bac57b5b5a746677b75e297a7b154bdbd"
      }
    ],
    "stats": {
      "total": 543,
      "additions": 279,
      "deletions": 264
    },
    "files": [
      {
        "sha": "9612f2bf57420b3cd4992285fdacc40560fa7c79",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 264,
        "changes": 264,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
        "patch": "@@ -269,270 +269,6 @@ class CWalletScanState {\n     }\n };\n \n-bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, string& strType, string& strErr)\n-{\n-    try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        if (strType == \"name\")\n-        {\n-            string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].name;\n-        }\n-        else if (strType == \"purpose\")\n-        {\n-            string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].purpose;\n-        }\n-        else if (strType == \"tx\")\n-        {\n-            uint256 hash;\n-            ssKey >> hash;\n-            CWalletTx wtx;\n-            ssValue >> wtx;\n-            CValidationState state;\n-            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n-                return false;\n-\n-            // Undo serialize changes in 31600\n-            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-            {\n-                if (!ssValue.empty())\n-                {\n-                    char fTmp;\n-                    char fUnused;\n-                    ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                    strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\",\n-                                       wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount, hash.ToString());\n-                    wtx.fTimeReceivedIsTxTime = fTmp;\n-                }\n-                else\n-                {\n-                    strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                    wtx.fTimeReceivedIsTxTime = 0;\n-                }\n-                wss.vWalletUpgrade.push_back(hash);\n-            }\n-\n-            if (wtx.nOrderPos == -1)\n-                wss.fAnyUnordered = true;\n-\n-            pwallet->LoadToWallet(wtx);\n-        }\n-        else if (strType == \"acentry\")\n-        {\n-            string strAccount;\n-            ssKey >> strAccount;\n-            uint64_t nNumber;\n-            ssKey >> nNumber;\n-            if (nNumber > nAccountingEntryNumber)\n-                nAccountingEntryNumber = nNumber;\n-\n-            if (!wss.fAnyUnordered)\n-            {\n-                CAccountingEntry acentry;\n-                ssValue >> acentry;\n-                if (acentry.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n-            }\n-        }\n-        else if (strType == \"watchs\")\n-        {\n-            CScript script;\n-            ssKey >> *(CScriptBase*)(&script);\n-            char fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1')\n-                pwallet->LoadWatchOnly(script);\n-\n-            // Watch-only addresses have no birthday information for now,\n-            // so set the wallet birthday to the beginning of time.\n-            pwallet->nTimeFirstKey = 1;\n-        }\n-        else if (strType == \"key\" || strType == \"wkey\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n-\n-            if (strType == \"key\")\n-            {\n-                wss.nKeys++;\n-                ssValue >> pkey;\n-            } else {\n-                CWalletKey wkey;\n-                ssValue >> wkey;\n-                pkey = wkey.vchPrivKey;\n-            }\n-\n-            // Old wallets store keys as \"key\" [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n-            }\n-            catch (...) {}\n-\n-            bool fSkipCheck = false;\n-\n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n-\n-                if (Hash(vchKey.begin(), vchKey.end()) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n-\n-                fSkipCheck = true;\n-            }\n-\n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadKey failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"mkey\")\n-        {\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        }\n-        else if (strType == \"ckey\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-            wss.nCKeys++;\n-\n-            if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        }\n-        else if (strType == \"keymeta\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-\n-            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-            // find earliest key creation time, as wallet birthday\n-            if (!pwallet->nTimeFirstKey ||\n-                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n-        }\n-        else if (strType == \"defaultkey\")\n-        {\n-            ssValue >> pwallet->vchDefaultKey;\n-        }\n-        else if (strType == \"pool\")\n-        {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-\n-            pwallet->LoadKeyPool(nIndex, keypool);\n-        }\n-        else if (strType == \"version\")\n-        {\n-            ssValue >> wss.nFileVersion;\n-            if (wss.nFileVersion == 10300)\n-                wss.nFileVersion = 300;\n-        }\n-        else if (strType == \"cscript\")\n-        {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> *(CScriptBase*)(&script);\n-            if (!pwallet->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LoadCScript failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"orderposnext\")\n-        {\n-            ssValue >> pwallet->nOrderPosNext;\n-        }\n-        else if (strType == \"destdata\")\n-        {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            if (!pwallet->LoadDestData(CBitcoinAddress(strAddress).Get(), strKey, strValue))\n-            {\n-                strErr = \"Error reading wallet database: LoadDestData failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"hdchain\")\n-        {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            if (!pwallet->SetHDChain(chain, true))\n-            {\n-                strErr = \"Error reading wallet database: SetHDChain failed\";\n-                return false;\n-            }\n-        }\n-    } catch (...)\n-    {\n-        return false;\n-    }\n-    return true;\n-}\n-\n static bool IsKeyType(string strType)\n {\n     return (strType== \"key\" || strType == \"wkey\" ||"
      },
      {
        "sha": "ab3f216214e122f6484a827580e39a0a5d60b879",
        "filename": "src/wallet/walletmapper.cpp",
        "status": "added",
        "additions": 269,
        "deletions": 0,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/src/wallet/walletmapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/src/wallet/walletmapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletmapper.cpp?ref=70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
        "patch": "@@ -0,0 +1,269 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/walletmapper.h\"\n+\n+bool\n+ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n+             CWalletScanState &wss, string& strType, string& strErr)\n+{\n+    try {\n+        // Unserialize\n+        // Taking advantage of the fact that pair serialization\n+        // is just the two items serialized one after the other\n+        ssKey >> strType;\n+        if (strType == \"name\")\n+        {\n+            string strAddress;\n+            ssKey >> strAddress;\n+            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].name;\n+        }\n+        else if (strType == \"purpose\")\n+        {\n+            string strAddress;\n+            ssKey >> strAddress;\n+            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].purpose;\n+        }\n+        else if (strType == \"tx\")\n+        {\n+            uint256 hash;\n+            ssKey >> hash;\n+            CWalletTx wtx;\n+            ssValue >> wtx;\n+            CValidationState state;\n+            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+                return false;\n+            \n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!ssValue.empty())\n+                {\n+                    char fTmp;\n+                    char fUnused;\n+                    ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n+                    strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                wss.vWalletUpgrade.push_back(hash);\n+            }\n+            \n+            if (wtx.nOrderPos == -1)\n+                wss.fAnyUnordered = true;\n+            \n+            pwallet->LoadToWallet(wtx);\n+        }\n+        else if (strType == \"acentry\")\n+        {\n+            string strAccount;\n+            ssKey >> strAccount;\n+            uint64_t nNumber;\n+            ssKey >> nNumber;\n+            if (nNumber > nAccountingEntryNumber)\n+                nAccountingEntryNumber = nNumber;\n+            \n+            if (!wss.fAnyUnordered)\n+            {\n+                CAccountingEntry acentry;\n+                ssValue >> acentry;\n+                if (acentry.nOrderPos == -1)\n+                    wss.fAnyUnordered = true;\n+            }\n+        }\n+        else if (strType == \"watchs\")\n+        {\n+            CScript script;\n+            ssKey >> *(CScriptBase*)(&script);\n+            char fYes;\n+            ssValue >> fYes;\n+            if (fYes == '1')\n+                pwallet->LoadWatchOnly(script);\n+            \n+            // Watch-only addresses have no birthday information for now,\n+            // so set the wallet birthday to the beginning of time.\n+            pwallet->nTimeFirstKey = 1;\n+        }\n+        else if (strType == \"key\" || strType == \"wkey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+            \n+            if (strType == \"key\")\n+            {\n+                wss.nKeys++;\n+                ssValue >> pkey;\n+            } else {\n+                CWalletKey wkey;\n+                ssValue >> wkey;\n+                pkey = wkey.vchPrivKey;\n+            }\n+            \n+            // Old wallets store keys as \"key\" [pubkey] => [privkey]\n+            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+            // using EC operations as a checksum.\n+            // Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+            // remaining backwards-compatible.\n+            try\n+            {\n+                ssValue >> hash;\n+            }\n+            catch (...) {}\n+            \n+            bool fSkipCheck = false;\n+            \n+            if (!hash.IsNull())\n+            {\n+                // hash pubkey/privkey to accelerate wallet load\n+                std::vector<unsigned char> vchKey;\n+                vchKey.reserve(vchPubKey.size() + pkey.size());\n+                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+                \n+                if (Hash(vchKey.begin(), vchKey.end()) != hash)\n+                {\n+                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                    return false;\n+                }\n+                \n+                fSkipCheck = true;\n+            }\n+            \n+            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            if (!pwallet->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadKey failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"mkey\")\n+        {\n+            unsigned int nID;\n+            ssKey >> nID;\n+            CMasterKey kMasterKey;\n+            ssValue >> kMasterKey;\n+            if(pwallet->mapMasterKeys.count(nID) != 0)\n+            {\n+                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+                return false;\n+            }\n+            pwallet->mapMasterKeys[nID] = kMasterKey;\n+            if (pwallet->nMasterKeyMaxID < nID)\n+                pwallet->nMasterKeyMaxID = nID;\n+        }\n+        else if (strType == \"ckey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            vector<unsigned char> vchPrivKey;\n+            ssValue >> vchPrivKey;\n+            wss.nCKeys++;\n+            \n+            if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadCryptedKey failed\";\n+                return false;\n+            }\n+            wss.fIsEncrypted = true;\n+        }\n+        else if (strType == \"keymeta\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+            CKeyMetadata keyMeta;\n+            ssValue >> keyMeta;\n+            wss.nKeyMeta++;\n+            \n+            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+            \n+            // find earliest key creation time, as wallet birthday\n+            if (!pwallet->nTimeFirstKey ||\n+                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n+                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n+        }\n+        else if (strType == \"defaultkey\")\n+        {\n+            ssValue >> pwallet->vchDefaultKey;\n+        }\n+        else if (strType == \"pool\")\n+        {\n+            int64_t nIndex;\n+            ssKey >> nIndex;\n+            CKeyPool keypool;\n+            ssValue >> keypool;\n+            \n+            pwallet->LoadKeyPool(nIndex, keypool);\n+        }\n+        else if (strType == \"version\")\n+        {\n+            ssValue >> wss.nFileVersion;\n+            if (wss.nFileVersion == 10300)\n+                wss.nFileVersion = 300;\n+        }\n+        else if (strType == \"cscript\")\n+        {\n+            uint160 hash;\n+            ssKey >> hash;\n+            CScript script;\n+            ssValue >> *(CScriptBase*)(&script);\n+            if (!pwallet->LoadCScript(script))\n+            {\n+                strErr = \"Error reading wallet database: LoadCScript failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"orderposnext\")\n+        {\n+            ssValue >> pwallet->nOrderPosNext;\n+        }\n+        else if (strType == \"destdata\")\n+        {\n+            std::string strAddress, strKey, strValue;\n+            ssKey >> strAddress;\n+            ssKey >> strKey;\n+            ssValue >> strValue;\n+            if (!pwallet->LoadDestData(CBitcoinAddress(strAddress).Get(), strKey, strValue))\n+            {\n+                strErr = \"Error reading wallet database: LoadDestData failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"hdchain\")\n+        {\n+            CHDChain chain;\n+            ssValue >> chain;\n+            if (!pwallet->SetHDChain(chain, true))\n+            {\n+                strErr = \"Error reading wallet database: SetHDChain failed\";\n+                return false;\n+            }\n+        }\n+    } catch (...)\n+    {\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "3c313147cbedcabb6132fd9663961eb3305e4666",
        "filename": "src/wallet/walletmapper.h",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/src/wallet/walletmapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356/src/wallet/walletmapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletmapper.h?ref=70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_WALLETMAPPER_H\n+#define BITCOIN_WALLET_WALLETMAPPER_H\n+\n+\n+\n+#endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "860e775ac3effa5841d0c8307898c265506b64bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjBlNzc1YWMzZWZmYTU4NDFkMGM4MzA3ODk4YzI2NTUwNmI2NGJk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T08:53:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T12:05:43Z"
      },
      "message": "[MOVEONLY] move CWalletScanState to walletdb.h (expose it)",
      "tree": {
        "sha": "804553a9935d0bb4e3406f9b4aed77c70d3f8d01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/804553a9935d0bb4e3406f9b4aed77c70d3f8d01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/860e775ac3effa5841d0c8307898c265506b64bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQBIXAAoJECnUvLZBb1PsoNcP/jCJic7tC7LRKXWqmCP+PqR0\nkTm7SuJlEAp1c37p57n2ZBe2vWt+EAMEsXECcfeG5Ju1ZLUDIxM8oGkvFAdacR2Z\njjeDnNqKQnR1IjkzN3XWehL5772XIUn/eLlONceNhqcwC+ZPlq85NzzvKvRtJTFt\nvd+5SZlYs0ExhmiqWOWE4nOyTpP1WPW/wY1eVypstfLesYu38JguwkSXy6pXkSH5\nGgsBNMpMpBvvXz+DVSYCTiUABtau9KdNlUxkLoc7iinxr1kvC5nO/dsErgU3PYZv\nfo3H/9DZN2YzVAzgkjVxc79dZ53iB/+Je9gwNW3zfC9JN5NgnZu0R9jhcqFUQNzV\n0F62U0mDboHSI5Mt5t8Z4RHSJwiLn3SC/6toapsnuNLy7z8Q46aCY2tHXaG2zpLe\nloaV89z52ywcqAVxSHbNjhBD9klED0VaIlJcWRlLbjjRlZHQwfm3kmePoKZ/xfaS\nLA7cpf5DFUiP81z5j+GS8Pjf+5bXc21SPtv7nx8pLAEG2CnPnBOlDGEKiLayNZsT\n301dtz/RnX5c947auGQajM1Cmw+stpTvrgHjcgkIieqSB6/bUEtz3pWct94EXmH7\nSA52Ofk5SPQH2iyN0SIaXbKI4619XHQKd4trIwXeveBFyEFaJDQFXvtmTJ26DKDS\noxgBLKiV4rYl7AJes4le\n=p6G1\n-----END PGP SIGNATURE-----",
        "payload": "tree 804553a9935d0bb4e3406f9b4aed77c70d3f8d01\nparent 70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1480582422 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1480593943 +0100\n\n[MOVEONLY] move CWalletScanState to walletdb.h (expose it)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860e775ac3effa5841d0c8307898c265506b64bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/860e775ac3effa5841d0c8307898c265506b64bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860e775ac3effa5841d0c8307898c265506b64bd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70bbb9354cc0213bd5ff63e2ecd85f8fc4e38356"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "8d5020537e2f21f382cdc4b2197e41bc9d1507cf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/860e775ac3effa5841d0c8307898c265506b64bd/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/860e775ac3effa5841d0c8307898c265506b64bd/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=860e775ac3effa5841d0c8307898c265506b64bd",
        "patch": "@@ -251,24 +251,6 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     pcursor->close();\n }\n \n-class CWalletScanState {\n-public:\n-    unsigned int nKeys;\n-    unsigned int nCKeys;\n-    unsigned int nKeyMeta;\n-    bool fIsEncrypted;\n-    bool fAnyUnordered;\n-    int nFileVersion;\n-    vector<uint256> vWalletUpgrade;\n-\n-    CWalletScanState() {\n-        nKeys = nCKeys = nKeyMeta = 0;\n-        fIsEncrypted = false;\n-        fAnyUnordered = false;\n-        nFileVersion = 0;\n-    }\n-};\n-\n static bool IsKeyType(string strType)\n {\n     return (strType== \"key\" || strType == \"wkey\" ||"
      },
      {
        "sha": "09c86140497ba668c423d676705defe7284717b7",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/860e775ac3effa5841d0c8307898c265506b64bd/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/860e775ac3effa5841d0c8307898c265506b64bd/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=860e775ac3effa5841d0c8307898c265506b64bd",
        "patch": "@@ -112,6 +112,24 @@ class CKeyMetadata\n     }\n };\n \n+class CWalletScanState {\n+public:\n+    unsigned int nKeys;\n+    unsigned int nCKeys;\n+    unsigned int nKeyMeta;\n+    bool fIsEncrypted;\n+    bool fAnyUnordered;\n+    int nFileVersion;\n+    vector<uint256> vWalletUpgrade;\n+    \n+    CWalletScanState() {\n+        nKeys = nCKeys = nKeyMeta = 0;\n+        fIsEncrypted = false;\n+        fAnyUnordered = false;\n+        nFileVersion = 0;\n+    }\n+};\n+\n /** Access to the wallet database */\n class CWalletDB : public CDB\n {"
      }
    ]
  },
  {
    "sha": "aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTgwYmRlYzhkYmU0MDY5ZmEyYjgyODZlYTM4MGE4MDgyOTQ5ZmQw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T10:00:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T12:05:44Z"
      },
      "message": "Remove recover callback from CDB",
      "tree": {
        "sha": "e948e47091c4f81237e69d455ca60781604e2416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e948e47091c4f81237e69d455ca60781604e2416"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQBIYAAoJECnUvLZBb1PsJO8P+wcutPQxLbkyShYZq+kgrmnG\nJwLtuFfV7N3VLhWy7cDKHE12A2iz/K7qklwI6R7vnaVvCZByCal5ZjH6nlcjTeD1\njcTN/urYIokKvQZ9k76GY11TAUqSsotvyd8B53k2MDSjiCNQ2FrA2utNraOqdkD4\nrsiGdSTqQ9+byYraRb5OasXZASkD8MwtU+xh+V+WHR8XyQSu9EvDU74S12jqhtao\nwxoPnpvQIrAxDYePK1G8s2LyrKI1/85NSmdEeCPPzx7fbfEmTsKpHXlKuiftxiVE\nPXV7Lm65tOfDRpvRaaOxuXg21l9tH05vVGx2Em2GuQ6hRPpTfaaXdmIGLZxZndYT\nIoSejyHdtof+yqM8wJTIpCku94BGJbQhS62858hnBo6BOy+JY/ivM0dK34Kx3SN6\nqdesjm+Is0ZCVZ6xVEhDWrUnkO7FKzdOo24a3LXy57hmugw9Ut4Nwp3Tbt3VFQJV\njz4lsnbVTlBp5s1zenkD6L6KOIDTwbg5ZN1WiTYnrgwB0ZRh+FeXax0Z/Tc0ERaC\nVhiki3uLAAVCquhhiZpyJWePYGfD5cRH6KmSOyoIEn+08KMaRGZb+NKHyHAswKnV\nECE2qi/fuyy6ADEDIZhRNVSEfnlHPaqMuUJO4clQVggoP1e1cEntbpdzR7KAGgt8\ngrMLohmsfIFziyALKGYl\n=EY0k\n-----END PGP SIGNATURE-----",
        "payload": "tree e948e47091c4f81237e69d455ca60781604e2416\nparent 860e775ac3effa5841d0c8307898c265506b64bd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1480586400 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1480593944 +0100\n\nRemove recover callback from CDB\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "860e775ac3effa5841d0c8307898c265506b64bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860e775ac3effa5841d0c8307898c265506b64bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/860e775ac3effa5841d0c8307898c265506b64bd"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 67,
      "deletions": 23
    },
    "files": [
      {
        "sha": "ce64cb41f261be88477d6f618d14527f6264b7b5",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "patch": "@@ -148,7 +148,7 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n-CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile))\n+CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n@@ -157,12 +157,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFu\n     int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n     if (result == 0)\n         return VERIFY_OK;\n-    else if (recoverFunc == NULL)\n-        return RECOVER_FAIL;\n-\n-    // Try to recover:\n-    bool fRecovered = (*recoverFunc)(*this, strFile);\n-    return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n+    return VERIFY_FAIL;\n }\n \n /* End of headers, beginning of key/value data */"
      },
      {
        "sha": "439e6e157beda0f0cd0e0293711dbc0f6602003d",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "patch": "@@ -50,15 +50,14 @@ class CDBEnv\n     bool IsMock() { return fMockDb; }\n \n     /**\n-     * Verify that database file strFile is OK. If it is not,\n-     * call the callback to try to recover.\n+     * Verify that database file strFile is OK.\n      * This must be called BEFORE strFile is opened.\n      * Returns true if strFile is OK.\n      */\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n-                        RECOVER_FAIL };\n-    VerifyResult Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile));\n+                        VERIFY_FAIL };\n+    VerifyResult Verify(const std::string& strFile);\n     /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation)."
      },
      {
        "sha": "8d092a21644043a57ebccf06e715319b0e9ef5bf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 2,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "patch": "@@ -8,7 +8,6 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"chain.h\"\n-#include \"wallet/coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\"\n@@ -25,6 +24,8 @@\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"utilmoneystr.h\"\n+#include \"wallet/coincontrol.h\"\n+#include \"wallet/walletmapper.h\"\n \n #include <assert.h>\n \n@@ -2647,7 +2648,22 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    CWalletScanState wss;\n+    vchDefaultKey = CPubKey();\n+    \n+    /* instanciate a CWalletMapper and attach the current wallet */\n+    CWalletMapper mapper(this);\n+    /* define a mapper callback for CWalletDB::LoadWallet */\n+    auto mapperFunc = std::bind(&CWalletMapper::ReadKeyValue, mapper, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, std::placeholders::_6);\n+    \n+    /* load wallet, pass in callback to CWalletMapper */\n+    LOCK(cs_wallet);\n+    int loadWalletMinVersion;\n+    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(wss, loadWalletMinVersion, mapperFunc);\n+    \n+    /* set the min version */\n+    LoadMinVersion(loadWalletMinVersion);\n+    \n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -2662,6 +2678,28 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n+    \n+    // nTimeFirstKey is only reliable if all keys have metadata\n+    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n+        nTimeFirstKey = 1; // 0 would be considered 'no value'\n+    \n+    if (!wss.vWalletUpgrade.empty())\n+    {\n+        CWalletDB walletdb(strWalletFile);\n+        for(uint256 hash : wss.vWalletUpgrade)\n+            walletdb.WriteTx(mapWallet[hash]);\n+    }\n+    \n+    // reorder transactions if necessary\n+    if (wss.fAnyUnordered)\n+        nLoadWalletRet = ReorderTransactions();\n+    \n+    laccentries.clear();\n+    ListAccountCreditDebit(\"*\", laccentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, laccentries) {\n+        wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+    }\n+    \n     fFirstRunRet = !vchDefaultKey.IsValid();\n \n     uiInterface.LoadWallet(this);"
      },
      {
        "sha": "734baa82b655611a78b0382cd56f732f40fbfeb4",
        "filename": "src/wallet/walletmapper.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/walletmapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/walletmapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletmapper.cpp?ref=aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "patch": "@@ -4,9 +4,12 @@\n \n #include \"wallet/walletmapper.h\"\n \n-bool\n-ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, string& strType, string& strErr)\n+#include \"base58.h\"\n+#include \"consensus/validation.h\"\n+#include \"main.h\" // For CheckTransaction\n+\n+bool CWalletMapper::ReadKeyValue(CDataStream& ssKey, CDataStream& ssValue,\n+             CWalletScanState &wss, std::string& strType, std::string& strErr, uint64_t &accountingEntryNumberRef)\n {\n     try {\n         // Unserialize\n@@ -15,13 +18,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         ssKey >> strType;\n         if (strType == \"name\")\n         {\n-            string strAddress;\n+            std::string strAddress;\n             ssKey >> strAddress;\n             ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].name;\n         }\n         else if (strType == \"purpose\")\n         {\n-            string strAddress;\n+            std::string strAddress;\n             ssKey >> strAddress;\n             ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].purpose;\n         }\n@@ -62,12 +65,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"acentry\")\n         {\n-            string strAccount;\n+            std::string strAccount;\n             ssKey >> strAccount;\n             uint64_t nNumber;\n             ssKey >> nNumber;\n-            if (nNumber > nAccountingEntryNumber)\n-                nAccountingEntryNumber = nNumber;\n+            if (nNumber > accountingEntryNumberRef)\n+                accountingEntryNumberRef = nNumber;\n             \n             if (!wss.fAnyUnordered)\n             {\n@@ -178,7 +181,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: CPubKey corrupt\";\n                 return false;\n             }\n-            vector<unsigned char> vchPrivKey;\n+            std::vector<unsigned char> vchPrivKey;\n             ssValue >> vchPrivKey;\n             wss.nCKeys++;\n             "
      },
      {
        "sha": "a18916a54e1dc559fbaaf653b051a5d81cbc9ec6",
        "filename": "src/wallet/walletmapper.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/walletmapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa80bdec8dbe4069fa2b8286ea380a8082949fd0/src/wallet/walletmapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletmapper.h?ref=aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "patch": "@@ -5,6 +5,15 @@\n #ifndef BITCOIN_WALLET_WALLETMAPPER_H\n #define BITCOIN_WALLET_WALLETMAPPER_H\n \n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n+#include \"streams.h\"\n \n-\n+class CWalletMapper {\n+private:\n+    CWallet *pwallet;\n+public:\n+    CWalletMapper(CWallet *pWalletIn) : pwallet(pWalletIn) {}\n+    bool ReadKeyValue(CDataStream& ssKey, CDataStream& ssValue, CWalletScanState &wss, std::string& strType, std::string& strErr, uint64_t &accountingEntryNumberRef);\n+};\n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "448a0233b5775ac1eeda4fa253535fc6fff4ee58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDhhMDIzM2I1Nzc1YWMxZWVkYTRmYTI1MzUzNWZjNmZmZjRlZTU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T10:00:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-01T16:31:55Z"
      },
      "message": "Avoid CWallet usage in CWalletDB",
      "tree": {
        "sha": "da70a8c7e7c9f35c6c6e8caf557146c2020eaac4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da70a8c7e7c9f35c6c6e8caf557146c2020eaac4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/448a0233b5775ac1eeda4fa253535fc6fff4ee58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQFB7AAoJECnUvLZBb1Ps5DMP/RAhyX+yjnYB7fGoT9w3pu7h\nbNMtNsxj35xHcd+8sqHm+WrTRFrqzKbOGcGzxG9pdwYscxMT+vZhJGIe6aiET6yk\nbgCCegLXESkwVBiSnLeKfQ+dyvN6z5sLf5nPkaiHvGEGYe3ctOoKFZMN40/MlEAd\npage2FTEzDEzWwRdrhiX3VPlAEEEJ2hxyjqZ09MBqLm/CXr3v5HpZs4nWRwuAAOA\nHQ2fQ1xRycZ3nddN9v+6Y754ToaTKOeQ/cdP7cjWa0MP/5mIj5pOxkwKoQ62pwJA\no5MoTosx6/A53IQ15WU19qQf2v6fs9ceNWBmGNsMv9AXjPQlblWzeMdC8I4tGNdI\nXuek/damxqj4atvuvXLpU65/O3tSCzdylPbTX6WDWUVrwmwiGM1LZXks+8aRC/CF\nMHmtH8sxbJtfQRhABZ3KZr6UETDzc46D+mNzq8MCewCujNlQtZs54zOo5RIXCb3+\nmZpw2qJkongAd8OQT5d6bJvZNuIeBJIG/jZRyXFg9SJvm84Nhtkfcne5NSb/dn/2\nFmIS7P49G7c3oe3RWpieL2WnkuMNaon8lYTv9OHzSayuEYCtxpx84+S371S+K1wQ\ntupnOTtQlN1f/kztxhGSGiBQVuPwtMlPxJpiXT9WFo8OwPYggJ6xiJS1BdeT7bK9\nyY4GeVwLNXgEs4/JfvPc\n=OjK+\n-----END PGP SIGNATURE-----",
        "payload": "tree da70a8c7e7c9f35c6c6e8caf557146c2020eaac4\nparent aa80bdec8dbe4069fa2b8286ea380a8082949fd0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1480586428 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1480609915 +0100\n\nAvoid CWallet usage in CWalletDB\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448a0233b5775ac1eeda4fa253535fc6fff4ee58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/448a0233b5775ac1eeda4fa253535fc6fff4ee58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448a0233b5775ac1eeda4fa253535fc6fff4ee58/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa80bdec8dbe4069fa2b8286ea380a8082949fd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa80bdec8dbe4069fa2b8286ea380a8082949fd0"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 46,
      "deletions": 49
    },
    "files": [
      {
        "sha": "2a76f8915785a0dd0a9d218efa81ab4a14ab3081",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=448a0233b5775ac1eeda4fa253535fc6fff4ee58",
        "patch": "@@ -153,6 +153,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/walletmapper.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n   zmq/zmqnotificationinterface.h \\\n@@ -226,6 +227,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n+  wallet/walletmapper.cpp \\\n   policy/rbf.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "01750a099c6241178e3db38ca3564a3bda9e07e7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 16,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=448a0233b5775ac1eeda4fa253535fc6fff4ee58",
        "patch": "@@ -451,28 +451,39 @@ bool CWallet::Verify()\n         }\n     }\n     \n-    if (GetBoolArg(\"-salvagewallet\", false))\n-    {\n-        // Recover readable keypairs:\n-        if (!CWalletDB::Recover(bitdb, walletFile, true))\n-            return false;\n-    }\n+   \n+    bool recoverWallet = GetBoolArg(\"-salvagewallet\", false);\n     \n     if (boost::filesystem::exists(GetDataDir() / walletFile))\n     {\n-        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n-        if (r == CDBEnv::RECOVER_OK)\n+        CDBEnv::VerifyResult r = bitdb.Verify(walletFile);\n+        if (r == CDBEnv::VERIFY_FAIL)\n         {\n             InitWarning(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n                                          \" Original %s saved as %s in %s; if\"\n                                          \" your balance or transactions are incorrect you should\"\n                                          \" restore from a backup.\"),\n                 walletFile, \"wallet.{timestamp}.bak\", GetDataDir()));\n+            \n+            recoverWallet = true;\n         }\n-        if (r == CDBEnv::RECOVER_FAIL)\n-            return InitError(strprintf(_(\"%s corrupt, salvage failed\"), walletFile));\n     }\n     \n+    if (recoverWallet)\n+    {\n+        // instantiate a CWalletMapper and attach the current wallet\n+        CWallet dummyWallet;\n+        CWalletMapper mapper(&dummyWallet);\n+        \n+        // define a mapper callback for CWalletDB::Recover\n+        // this is required to check if all the records could be read (detect corruption of keys)\n+        auto mapperFunc = std::bind(&CWalletMapper::ReadKeyValue, mapper, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, std::placeholders::_6);\n+        \n+        // Recover wallet\n+        LOCK(dummyWallet.cs_wallet);\n+        if (!CWalletDB::Recover(bitdb, walletFile, mapperFunc, true))\n+            return InitError(strprintf(_(\"%s corrupt, salvage failed\"), walletFile));\n+    }\n     return true;\n }\n \n@@ -2651,19 +2662,17 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     CWalletScanState wss;\n     vchDefaultKey = CPubKey();\n     \n-    /* instanciate a CWalletMapper and attach the current wallet */\n+    // instantiate a CWalletMapper and attach the current wallet\n     CWalletMapper mapper(this);\n-    /* define a mapper callback for CWalletDB::LoadWallet */\n+\n+    // define a mapper callback for CWalletDB::LoadWallet\n     auto mapperFunc = std::bind(&CWalletMapper::ReadKeyValue, mapper, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5, std::placeholders::_6);\n     \n-    /* load wallet, pass in callback to CWalletMapper */\n+    // load wallet, pass in callback to map the recods to the CWallet object\n     LOCK(cs_wallet);\n     int loadWalletMinVersion;\n     DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(wss, loadWalletMinVersion, mapperFunc);\n     \n-    /* set the min version */\n-    LoadMinVersion(loadWalletMinVersion);\n-    \n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -2679,10 +2688,14 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n     \n+    // set the min version\n+    LoadMinVersion(loadWalletMinVersion);\n+    \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n         nTimeFirstKey = 1; // 0 would be considered 'no value'\n     \n+    // check for transactions that require rewrite (migration)\n     if (!wss.vWalletUpgrade.empty())\n     {\n         CWalletDB walletdb(strWalletFile);\n@@ -2694,6 +2707,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     if (wss.fAnyUnordered)\n         nLoadWalletRet = ReorderTransactions();\n     \n+    // fill in wtxOrdered\n     laccentries.clear();\n     ListAccountCreditDebit(\"*\", laccentries);\n     BOOST_FOREACH(CAccountingEntry& entry, laccentries) {"
      },
      {
        "sha": "6a05be3f535537484e34f52d7ccfccd56fcbf366",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 29,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=448a0233b5775ac1eeda4fa253535fc6fff4ee58",
        "patch": "@@ -7,7 +7,6 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -257,21 +256,18 @@ static bool IsKeyType(string strType)\n             strType == \"mkey\" || strType == \"ckey\");\n }\n \n-DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n+DBErrors CWalletDB::LoadWallet(CWalletScanState &wss, int &minVersionOut, const walletReadFunc_t readFunc)\n {\n-    pwallet->vchDefaultKey = CPubKey();\n-    CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n \n     try {\n-        LOCK(pwallet->cs_wallet);\n         int nMinVersion = 0;\n         if (Read((string)\"minversion\", nMinVersion))\n         {\n             if (nMinVersion > CLIENT_VERSION)\n                 return DB_TOO_NEW;\n-            pwallet->LoadMinVersion(nMinVersion);\n+            minVersionOut = nMinVersion;\n         }\n \n         // Get cursor\n@@ -298,7 +294,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n             // Try to be tolerant of single corrupt records:\n             string strType, strErr;\n-            if (!ReadKeyValue(pwallet, ssKey, ssValue, wss, strType, strErr))\n+            if (!readFunc(ssKey, ssValue, wss, strType, strErr, nAccountingEntryNumber))\n             {\n                 // losing keys is considered a catastrophic error, anything else\n                 // we assume the user can live with:\n@@ -338,12 +334,6 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     LogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n-    // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n-\n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n-        WriteTx(pwallet->mapWallet[hash]);\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n     if (wss.fIsEncrypted && (wss.nFileVersion == 40000 || wss.nFileVersion == 50000))\n@@ -352,15 +342,6 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if (wss.nFileVersion < CLIENT_VERSION) // Update\n         WriteVersion(CLIENT_VERSION);\n \n-    if (wss.fAnyUnordered)\n-        result = pwallet->ReorderTransactions();\n-\n-    pwallet->laccentries.clear();\n-    ListAccountCreditDebit(\"*\", pwallet->laccentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n-        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n     return result;\n }\n \n@@ -551,7 +532,7 @@ void ThreadFlushWalletDB(const string& strFile)\n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //\n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, const walletReadFunc_t readFunc, bool fOnlyKeys)\n {\n     // Recovery procedure:\n     // move wallet file to wallet.timestamp.bak\n@@ -594,7 +575,6 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n         LogPrintf(\"Cannot create database file %s\\n\", filename);\n         return false;\n     }\n-    CWallet dummyWallet;\n     CWalletScanState wss;\n \n     DbTxn* ptxn = dbenv.TxnBegin();\n@@ -608,9 +588,8 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n             bool fReadOK;\n             {\n                 // Required in LoadKeyMetadata():\n-                LOCK(dummyWallet.cs_wallet);\n-                fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue,\n-                                        wss, strType, strErr);\n+                uint64_t dummyInt = 0;\n+                fReadOK = readFunc(ssKey, ssValue, wss, strType, strErr, dummyInt);\n             }\n             if (!IsKeyType(strType) && strType != \"hdchain\")\n                 continue;\n@@ -632,9 +611,9 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n     return fSuccess;\n }\n \n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, const walletReadFunc_t readFunc)\n {\n-    return CWalletDB::Recover(dbenv, filename, false);\n+    return CWalletDB::Recover(dbenv, filename, readFunc, false);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "469bfac5fa59a73f53993454c5e48ff5b1242f96",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448a0233b5775ac1eeda4fa253535fc6fff4ee58/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=448a0233b5775ac1eeda4fa253535fc6fff4ee58",
        "patch": "@@ -120,7 +120,7 @@ class CWalletScanState {\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n-    vector<uint256> vWalletUpgrade;\n+    std::vector<uint256> vWalletUpgrade;\n     \n     CWalletScanState() {\n         nKeys = nCKeys = nKeyMeta = 0;\n@@ -130,6 +130,8 @@ class CWalletScanState {\n     }\n };\n \n+typedef std::function<bool(CDataStream& ssKey, CDataStream& ssValue, CWalletScanState &wss, std::string& strType, std::string& strErr, uint64_t &accountingEntryNumberRef)> walletReadFunc_t;\n+\n /** Access to the wallet database */\n class CWalletDB : public CDB\n {\n@@ -184,12 +186,12 @@ class CWalletDB : public CDB\n     CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    DBErrors LoadWallet(CWallet* pwallet);\n+    DBErrors LoadWallet(CWalletScanState &wss, int &minVersionOut, const walletReadFunc_t readFunc);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-    static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n-    static bool Recover(CDBEnv& dbenv, const std::string& filename);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename, const walletReadFunc_t readFunc, bool fOnlyKeys);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename, const walletReadFunc_t readFunc);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  }
]