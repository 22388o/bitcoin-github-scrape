[
  {
    "sha": "5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjRiY2YyOGVmOGExYjc3NWIxMmM5ZmYwNjM2N2ZkNjY1NmU5MWMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-13T15:48:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-13T15:48:02Z"
      },
      "message": "[tests] Remove maxblocksinflight testcase\n\nmaxblocksinflight tested that a node would not send get_data messages\nfor more than 16 new blocks at the same time. bitcoin core no longer\nresponds to block invs with get_data, since it does headers-first\nsync'ing. This test was therefore testing nothing and can be removed.\n\nthe sendheaders test script tests that bitcoin will not send get_headers\nfor more than 16 blocks simultaneously.",
      "tree": {
        "sha": "f1ec57edb06f3552be47583bc4612fab2b645651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ec57edb06f3552be47583bc4612fab2b645651"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b44adf92342ad4f9c343ba29c081a91687932936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b44adf92342ad4f9c343ba29c081a91687932936",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b44adf92342ad4f9c343ba29c081a91687932936"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 1,
      "deletions": 95
    },
    "files": [
      {
        "sha": "e6c4849702c7fe14796d54f1ea53ab8ce9c51ebe",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3",
        "patch": "@@ -59,7 +59,7 @@ thread.)\n * RPC calls are available in p2p tests.\n \n * Can be used to write free-form tests, where specific p2p-protocol behavior\n-is tested.  Examples: ```p2p-accept-block.py```, ```maxblocksinflight.py```.\n+is tested.  Examples: ```p2p-accept-block.py```, ```p2p-compactblocks.py```.\n \n ## Comptool\n "
      },
      {
        "sha": "4ef2a35a44522cb0fff2871ec7f0ceef6222458c",
        "filename": "test/functional/maxblocksinflight.py",
        "status": "removed",
        "additions": 0,
        "deletions": 93,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b44adf92342ad4f9c343ba29c081a91687932936/test/functional/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b44adf92342ad4f9c343ba29c081a91687932936/test/functional/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxblocksinflight.py?ref=b44adf92342ad4f9c343ba29c081a91687932936",
        "patch": "@@ -1,93 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2015-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test nodes responses to having many blocks in flight.\n-\n-In this test we connect to one node over p2p, send it numerous inv's, and\n-compare the resulting number of getdata requests to a max allowed value.  We\n-test for exceeding 128 blocks in flight, which was the limit an 0.9 client will\n-reach. [0.10 clients shouldn't request more than 16 from a single peer.]\n-\"\"\"\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-MAX_REQUESTS = 128\n-\n-class TestManager(NodeConnCB):\n-    def on_getdata(self, conn, message):\n-        self.log.debug(\"got getdata %s\" % repr(message))\n-        # Log the requests\n-        for inv in message.inv:\n-            if inv.hash not in self.blockReqCounts:\n-                self.blockReqCounts[inv.hash] = 0\n-            self.blockReqCounts[inv.hash] += 1\n-\n-    def on_close(self, conn):\n-        if not self.disconnectOkay:\n-            raise EarlyDisconnectError(0)\n-\n-    def add_new_connection(self, connection):\n-        super().add_connection(connection)\n-        self.blockReqCounts = {}\n-        self.disconnectOkay = False\n-\n-    def run(self):\n-        self.connection.rpc.generate(1)  # Leave IBD\n-\n-        numBlocksToGenerate = [8, 16, 128, 1024]\n-        for count in range(len(numBlocksToGenerate)):\n-            current_invs = []\n-            for i in range(numBlocksToGenerate[count]):\n-                current_invs.append(CInv(2, random.randrange(0, 1 << 256)))\n-                if len(current_invs) >= 50000:\n-                    self.connection.send_message(msg_inv(current_invs))\n-                    current_invs = []\n-            if len(current_invs) > 0:\n-                self.connection.send_message(msg_inv(current_invs))\n-\n-            # Wait and see how many blocks were requested\n-            time.sleep(2)\n-\n-            total_requests = 0\n-            with mininode_lock:\n-                for key in self.blockReqCounts:\n-                    total_requests += self.blockReqCounts[key]\n-                    if self.blockReqCounts[key] > 1:\n-                        raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n-            if total_requests > MAX_REQUESTS:\n-                raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n-            self.log.info(\"Round %d: success (total requests: %d)\" % (count, total_requests))\n-\n-        self.disconnectOkay = True\n-        self.connection.disconnect_node()\n-\n-\n-class MaxBlocksInFlightTest(BitcoinTestFramework):\n-    def add_options(self, parser):\n-        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n-                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n-                          help=\"Binary to test max block requests behavior\")\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = True\n-        self.num_nodes = 1\n-\n-    def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1']],\n-                                 binary=[self.options.testbinary])\n-\n-    def run_test(self):\n-        test = TestManager()\n-        # pass log handler through to the test manager object\n-        test.log = self.log\n-        test.add_new_connection(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test))\n-        NetworkThread().start()  # Start up network handling in another thread\n-        test.run()\n-\n-if __name__ == '__main__':\n-    MaxBlocksInFlightTest().main()"
      },
      {
        "sha": "722b3326ca1a9feb9e12d8e75f4ec5b9fa2679db",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=5f4bcf28ef8a1b775b12c9ff06367fd6656e91c3",
        "patch": "@@ -135,7 +135,6 @@\n     'txn_clone.py --mineblock',\n     'forknotify.py',\n     'invalidateblock.py',\n-    'maxblocksinflight.py',\n     'p2p-acceptblock.py',\n     'replace-by-fee.py',\n ]"
      }
    ]
  }
]