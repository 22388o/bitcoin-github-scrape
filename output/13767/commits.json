[
  {
    "sha": "cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGY0MDg5NDU3ODU2YmRmZTMzNmI2ZjRiMzM3ZDdlMWVhNGZkYmQz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-26T14:33:45Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T12:30:53Z"
      },
      "message": "Remove redundant assignments (dead stores)",
      "tree": {
        "sha": "9c7e66306acaff0756d5a871b8556220f5a90bfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c7e66306acaff0756d5a871b8556220f5a90bfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e57766906237834906b979a59015eed218d34656",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e57766906237834906b979a59015eed218d34656",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e57766906237834906b979a59015eed218d34656"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 9,
      "deletions": 15
    },
    "files": [
      {
        "sha": "3ff106cb87f51048dc417aa4a107791bdc1267a6",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
        "patch": "@@ -80,18 +80,16 @@ static void SipHash_32b(benchmark::State& state)\n static void FastRandom_32bit(benchmark::State& state)\n {\n     FastRandomContext rng(true);\n-    uint32_t x = 0;\n     while (state.KeepRunning()) {\n-        x += rng.rand32();\n+        rng.rand32();\n     }\n }\n \n static void FastRandom_1bit(benchmark::State& state)\n {\n     FastRandomContext rng(true);\n-    uint32_t x = 0;\n     while (state.KeepRunning()) {\n-        x += rng.randbool();\n+        rng.randbool();\n     }\n }\n "
      },
      {
        "sha": "f1363557f20ccb17c727359fe82fb713e39b9c4d",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
        "patch": "@@ -12,7 +12,6 @@ static void RollingBloom(benchmark::State& state)\n     CRollingBloomFilter filter(120000, 0.000001);\n     std::vector<unsigned char> data(32);\n     uint32_t count = 0;\n-    uint64_t match = 0;\n     while (state.KeepRunning()) {\n         count++;\n         data[0] = count;\n@@ -25,7 +24,7 @@ static void RollingBloom(benchmark::State& state)\n         data[1] = count >> 16;\n         data[2] = count >> 8;\n         data[3] = count;\n-        match += filter.contains(data);\n+        filter.contains(data);\n     }\n }\n "
      },
      {
        "sha": "643da90f09bbbe2d2919a58aae2af97c240da670",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
        "patch": "@@ -937,17 +937,19 @@ BOOST_AUTO_TEST_CASE(script_build)\n         }\n     }\n \n+#ifdef UPDATE_JSON_TESTS\n     std::string strGen;\n-\n+#endif\n     for (TestBuilder& test : tests) {\n         test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n-#ifndef UPDATE_JSON_TESTS\n+#ifdef UPDATE_JSON_TESTS\n+        strGen += str + \",\\n\";\n+#else\n         if (tests_set.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n         }\n #endif\n-        strGen += str + \",\\n\";\n     }\n \n #ifdef UPDATE_JSON_TESTS"
      },
      {
        "sha": "88ee3a3d4344d6e2956e4c19f448945008984029",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
        "patch": "@@ -640,19 +640,14 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         innerUsage += memusage::DynamicUsage(links.parents) + memusage::DynamicUsage(links.children);\n         bool fDependsWait = false;\n         setEntries setParentCheck;\n-        int64_t parentSizes = 0;\n-        int64_t parentSigOpCost = 0;\n         for (const CTxIn &txin : tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n                 fDependsWait = true;\n-                if (setParentCheck.insert(it2).second) {\n-                    parentSizes += it2->GetTxSize();\n-                    parentSigOpCost += it2->GetSigOpCost();\n-                }\n+                setParentCheck.insert(it2);\n             } else {\n                 assert(pcoins->HaveCoin(txin.prevout));\n             }"
      }
    ]
  },
  {
    "sha": "dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDc3N2YzZTEyMjBkZDFhNzZlOGEyOWNhZmRkNGZlNjI0NGM1YzBm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T07:22:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T12:30:59Z"
      },
      "message": "Remove unused variable",
      "tree": {
        "sha": "cd889fd2285ebd6f2e268a3b596a401e038d6df7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd889fd2285ebd6f2e268a3b596a401e038d6df7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdf4089457856bdfe336b6f4b337d7e1ea4fdbd3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e739b84a483a8e8b534d65cf2f0c3461b869d739",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=dd777f3e1220dd1a76e8a29cafdd4fe6244c5c0f",
        "patch": "@@ -64,7 +64,7 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     BOOST_CHECK_EQUAL(pub, pub2);\n \n     // Check that both can be serialized with private key back to the private version, but not without private key.\n-    std::string prv1, prv2;\n+    std::string prv1;\n     BOOST_CHECK(parse_priv->ToPrivateString(keys_priv, prv1));\n     BOOST_CHECK_EQUAL(prv, prv1);\n     BOOST_CHECK(!parse_priv->ToPrivateString(keys_pub, prv1));"
      }
    ]
  }
]