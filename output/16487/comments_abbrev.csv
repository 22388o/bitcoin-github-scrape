practicalswift,2019-07-29 18:08:51,Could add a test to make it technically in use? Perhaps with a comment describing that the parameter is intentionally (and temporarily) unused outside of tests.,https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516101703,516101703,
DrahtBot,2019-07-29 21:29:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16324](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16324.html) (Get cs_main out of the critical path in Pro",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516169688,516169688,
ryanofsky,2019-07-30 19:56:47,"The current [appveyor errors](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/26320361) are really brutal, they don't even tell you what source file they come from\n\n```\nc:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits(912): error C2139: 'CChainState': an undefined class is not allowed as an argument to compiler intrinsic type",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516571886,516571886,
MarcoFalke,2019-07-30 20:28:52,cc @sipsorcery ,https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516583025,516583025,
TheBlueMatt,2019-07-31 01:29:30,"I'm really not a fan of this. Specifically, it seems to be muddling chain sync state outside of validation. assumeutxo is very, very tied to validation process and logic, and I think should be (as much as possible, though admittedly that may not be much) unobservable outside of validation.cpp. Long-long-long term, I want validation.h to be something that ends up looking like libconsensus, but this",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516656391,516656391,
ryanofsky,2019-07-31 02:03:44,"> For a wallet dealing correctly with its transactions for one chainstate is hard enough, now if it has to filter them, that's need more thought...\n\nI think for now assumeutxo is just supposed to be useful for new wallets (or wallets with birthdays after the utxo snapshot time), so these wallets should be ok with not seeing notifications from the background sync chain.\n\n> assumeutxo is ver",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516663394,516663394,
sipsorcery,2019-07-31 08:08:43,"I've submitted #16505 to increase the msbuild verbosity in the appveyor script.\n\nIn the meantime additional log messages for the 2 msbuild errors in this PR:\n\n````\n1>------ Build started: Project: libbitcoin_server, Configuration: Debug x64 ------\n1>validationinterface.cpp\n1>c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits(91",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516744753,516744753,
sipsorcery,2019-07-31 08:20:05,Including `validation.h` in `validationinterface.cpp` fixes the msbuild errors. That makes the concrete `CChainState` implementation available rather than only a forward declaration. I'm not familiar enough with this part of the code to know whether that will cause other side effects.,https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516748480,516748480,
MarcoFalke,2019-07-31 11:34:03,"> Once we have multiple chainstates doing their thing simultaneously, we'll need to allow CValidationInterface clients to determine which chainstate a given event pertains to so that they can respond accordingly; for example, a wallet client should respond differently to BlockConnected events for the background validation chain vs. the active chain.\n\nI don't understand why this is needed. The ",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516811102,516811102,
ryanofsky,2019-07-31 16:02:47,"re: https://github.com/bitcoin/bitcoin/pull/16487#pullrequestreview-268744787\n\n> Wandering if clients shouldn't choose at `RegisterValidationInterface` which chainstate they subscribe. And call it multiple times if they want both background and foreground.\n\nI like this suggestion, and suspect it'd slightly simplify the overall assumeutxo implementation by avoiding the need to add new param",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516913738,516913738,
ryanofsky,2019-08-01 14:46:10,"My previous ACK is still valid, by the way. The decision to use enums or references to indicate chain state, and the decision whether to add a parameter to existing callbacks, or add a new callback for background blocks, or to not change any callbacks but add a chain argument to the register function all seem skin-deep. I do not see how these decisions would have any significant impact on future c",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-517319405,517319405,
jamesob,2019-08-01 20:08:36,"Thanks to everyone for the thoughts. I think I'm going to try the approach suggested by @MarcoFalke, since I think it'll reduce the diff by at least 40 lines or so. After reviewing the parent PR (#15606) I've realized that the majority of validationinterface clients just ignore the background chainstate, and so introducing a `BackgroundBlockConnected()` event should be a less intrusive way of doin",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-517438708,517438708,
jamesob,2019-08-06 14:49:11,Closing for now since the alternate approaches suggested will mostly exclude these changes.,https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-518703031,518703031,
Sjors,2020-01-29 10:58:25,"Don't forget to remove this from the ""In progress"" column: https://github.com/bitcoin/bitcoin/projects/11",https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-579703052,579703052,
ryanofsky,2019-07-30 20:50:33,"CChainState isn't really a data object by itself, more of a handle to access other objects containing real state, so I'm curious what the `const` keywords throughout the PR are expressing. \n\nI guess I'm asking to be reassured that this PR isn't likely to be followed with another PR in the future removing all these consts because one `CValidationInterface` listener needs call a non-const method",https://github.com/bitcoin/bitcoin/pull/16487#discussion_r308936332,308936332,src/index/base.cpp
ryanofsky,2019-07-30 21:13:21,"This looks right, but in case the std::bind code is what's responsible for the msvc errors, you could try a workaround by replacing `std::bind` calls with lambdas:\n\n```\nvoid RegisterValidationInterface(CValidationInterface* pwalletIn) {\n    ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n    conns.UpdatedBlockTip = g_signals.m_internals->Updat",https://github.com/bitcoin/bitcoin/pull/16487#discussion_r308945435,308945435,src/validationinterface.cpp
