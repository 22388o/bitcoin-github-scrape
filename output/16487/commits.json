[
  {
    "sha": "fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ3YTczMzMwMTk5NzU4ZDhjN2I3ZTFhZDZhYjIwOTI3NmQ1NGMz",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-28T15:22:03Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-07-29T18:16:24Z"
      },
      "message": "validationinterface: add unused CChainState parameter\n\nOnce we have multiple chainstates, we'll need to allow CValidationInterface\nclients to determine which chainstate was changed so that they can respond\naccordingly; for example, a wallet client should respond differently to\nBlockConnected events for the background validation chain vs. the active\nchain.",
      "tree": {
        "sha": "ae52c8b0c26f984f0e2794d567f72dd616b33809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae52c8b0c26f984f0e2794d567f72dd616b33809"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa47a73330199758d8c7b7e1ad6ab209276d54c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa47a73330199758d8c7b7e1ad6ab209276d54c3/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68da54987df4d4b76d0696b8139ae2bb32394214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68da54987df4d4b76d0696b8139ae2bb32394214",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68da54987df4d4b76d0696b8139ae2bb32394214"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 101,
      "deletions": 74
    },
    "files": [
      {
        "sha": "11bb149810e3e23822432a02c6e3b6ce60af7035",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -188,7 +188,8 @@ bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_ti\n     return true;\n }\n \n-void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+void BaseIndex::BlockConnected(const CChainState& chainstate,\n+                               const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                                const std::vector<CTransactionRef>& txn_conflicted)\n {\n     if (!m_synced) {\n@@ -231,7 +232,7 @@ void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const\n     }\n }\n \n-void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n+void BaseIndex::ChainStateFlushed(const CChainState& chainstate, const CBlockLocator& locator)\n {\n     if (!m_synced) {\n         return;"
      },
      {
        "sha": "87b1868edffcf989ba391b908c2d578529a54643",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -65,10 +65,11 @@ class BaseIndex : public CValidationInterface\n     bool Commit();\n \n protected:\n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+    void BlockConnected(const CChainState& chainstate,\n+                        const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                         const std::vector<CTransactionRef>& txn_conflicted) override;\n \n-    void ChainStateFlushed(const CBlockLocator& locator) override;\n+    void ChainStateFlushed(const CChainState& chainstate, const CBlockLocator& locator) override;\n \n     /// Initialize internal state from the database and block index.\n     virtual bool Init();"
      },
      {
        "sha": "f1f52119804eba82d2876b56bfe09fe4912da0c9",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -183,21 +183,25 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n     {\n         m_notifications->TransactionRemovedFromMempool(tx);\n     }\n-    void BlockConnected(const std::shared_ptr<const CBlock>& block,\n+    void BlockConnected(const CChainState& chainstate,\n+        const std::shared_ptr<const CBlock>& block,\n         const CBlockIndex* index,\n         const std::vector<CTransactionRef>& tx_conflicted) override\n     {\n         m_notifications->BlockConnected(*block, tx_conflicted);\n     }\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    void BlockDisconnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& block) override\n     {\n         m_notifications->BlockDisconnected(*block);\n     }\n-    void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n+    void ChainStateFlushed(const CChainState& chainstate, const CBlockLocator& locator) override\n+    {\n+        m_notifications->ChainStateFlushed(locator);\n+    }\n+    void UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {\n         m_notifications->UpdatedBlockTip();\n     }\n-    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n     Chain& m_chain;\n     Chain::Notifications* m_notifications;\n };"
      },
      {
        "sha": "0df9c4c45a946f35c54faf07a2d2815ca6aa52ea",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -1108,7 +1108,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n  * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n  * block. Also save the time of the last tip update.\n  */\n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void PeerLogicValidation::BlockConnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK(g_cs_orphans);\n \n     std::vector<uint256> vOrphanErase;\n@@ -1151,7 +1151,7 @@ static bool fWitnessesPresentInMostRecentCompactBlock GUARDED_BY(cs_most_recent_\n  * Maintain state about the best-seen block and fast-announce a compact block\n  * to compatible peers.\n  */\n-void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n+void PeerLogicValidation::NewPoWValidBlock(const CChainState& chainstate, const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n     const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n@@ -1198,7 +1198,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n  * Update our best height and announce any block hashes which weren't previously\n  * in ::ChainActive() to our peers.\n  */\n-void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+void PeerLogicValidation::UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n \n@@ -1232,7 +1232,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n  */\n-void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n+void PeerLogicValidation::BlockChecked(const CChainState& chainstate, const CBlock& block, const CValidationState& state) {\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());"
      },
      {
        "sha": "0c2d54f5f77342dc2784995afb8f98ded22e60e2",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -33,19 +33,19 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void BlockChecked(const CBlock& block, const CValidationState& state) override;\n+    void BlockChecked(const CChainState& chainstate, const CBlock& block, const CValidationState& state) override;\n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n+    void NewPoWValidBlock(const CChainState& chainstate, const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n     /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;"
      },
      {
        "sha": "4fb70b1d5bb7cf00c3e902f25b4899c3b8d20f08",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -674,7 +674,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n \n protected:\n-    void BlockChecked(const CBlock& block, const CValidationState& stateIn) override {\n+    void BlockChecked(const CChainState& chainstate, const CBlock& block, const CValidationState& stateIn) override {\n         if (block.GetHash() != hash)\n             return;\n         found = true;"
      },
      {
        "sha": "2df98bcb00b5e5f7ce4db8dad9c4248afd05dc72",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -31,20 +31,20 @@ struct TestSubscriber : public CValidationInterface {\n \n     explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n \n-    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n+    void UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n     }\n \n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted) override\n+    void BlockConnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n         BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n \n         m_expected_tip = block->GetHash();\n     }\n \n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    void BlockDisconnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& block) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n "
      },
      {
        "sha": "edc6f7194a0ea68906a65c4a5be6ec7a8e0baccc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -1042,7 +1042,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n \n // Note that though this is marked const, we may end up modifying `m_cached_finished_ibd`, which\n // is a performance-related implementation detail. This function must be marked\n-// `const` so that `CValidationInterface` clients (which are given a `const CChainState*`)\n+// `const` so that `CValidationInterface` clients (which are given a `const CChainState&`)\n // can call it.\n //\n bool CChainState::IsInitialBlockDownload() const\n@@ -2076,7 +2076,7 @@ bool CChainState::FlushStateToDisk(\n     }\n     if (full_flush_completed) {\n         // Update best block in wallet (so we can detect restored wallets).\n-        GetMainSignals().ChainStateFlushed(m_chain.GetLocator());\n+        GetMainSignals().ChainStateFlushed(*this, m_chain.GetLocator());\n     }\n     } catch (const std::runtime_error& e) {\n         return AbortNode(state, std::string(\"System error while flushing: \") + e.what());\n@@ -2221,7 +2221,7 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    GetMainSignals().BlockDisconnected(pblock);\n+    GetMainSignals().BlockDisconnected(*this, pblock);\n     return true;\n }\n \n@@ -2321,7 +2321,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     {\n         CCoinsViewCache view(pcoinsTip.get());\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n-        GetMainSignals().BlockChecked(blockConnecting, state);\n+        GetMainSignals().BlockChecked(*this, blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n@@ -2614,7 +2614,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n                 for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                     assert(trace.pblock && trace.pindex);\n-                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n+                    GetMainSignals().BlockConnected(*this, trace.pblock, trace.pindex, trace.conflictedTxs);\n                 }\n             } while (!m_chain.Tip() || (starting_tip && CBlockIndexWorkComparator()(m_chain.Tip(), starting_tip)));\n             if (!blocks_connected) return true;\n@@ -2626,7 +2626,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             // Enqueue while holding cs_main to ensure that UpdatedBlockTip is called in the order in which blocks are connected\n             if (pindexFork != pindexNewTip) {\n                 // Notify ValidationInterface subscribers\n-                GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n+                GetMainSignals().UpdatedBlockTip(*this, pindexNewTip, pindexFork, fInitialDownload);\n \n                 // Always notify the UI if a new block tip was connected\n                 uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n@@ -3447,7 +3447,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n     // (but if it does not build on our best tip, let the SendMessages loop relay it)\n     if (!IsInitialBlockDownload() && m_chain.Tip() == pindex->pprev)\n-        GetMainSignals().NewPoWValidBlock(pindex, pblock);\n+        GetMainSignals().NewPoWValidBlock(*this, pindex, pblock);\n \n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n@@ -3490,7 +3490,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n             ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n+            GetMainSignals().BlockChecked(g_chainstate, *pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n         }\n     }"
      },
      {
        "sha": "377e8acafa825e881daaac1f69305d0d7bf84f64",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 28,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -28,14 +28,14 @@ struct ValidationInterfaceConnections {\n };\n \n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CChainState& chainstate, const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CChainState& chainstate, const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const CChainState& chainstate, const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    boost::signals2::signal<void (const CChainState& chainstate, const CBlockLocator &)> ChainStateFlushed;\n+    boost::signals2::signal<void (const CChainState& chainstate, const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (const CChainState& chainstate, const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n@@ -91,14 +91,14 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n-    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4));\n     conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(std::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, std::placeholders::_1));\n-    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n-    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n+    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4));\n+    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n     conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n-    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n-    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n-    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n@@ -136,13 +136,18 @@ void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason\n     }\n }\n \n-void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+void CMainSignals::UpdatedBlockTip(\n+        const CChainState& chainstate,\n+        const CBlockIndex *pindexNew,\n+        const CBlockIndex *pindexFork,\n+        bool fInitialDownload)\n+{\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n-        m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+    m_internals->m_schedulerClient.AddToProcessQueue([&chainstate, pindexNew, pindexFork, fInitialDownload, this] {\n+        m_internals->UpdatedBlockTip(chainstate, pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n@@ -152,28 +157,33 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n     });\n }\n \n-void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n-        m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n+void CMainSignals::BlockConnected(\n+        const CChainState& chainstate,\n+        const std::shared_ptr<const CBlock> &pblock,\n+        const CBlockIndex *pindex,\n+        const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted)\n+{\n+    m_internals->m_schedulerClient.AddToProcessQueue([&chainstate, pblock, pindex, pvtxConflicted, this] {\n+        m_internals->BlockConnected(chainstate, pblock, pindex, *pvtxConflicted);\n     });\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n-        m_internals->BlockDisconnected(pblock);\n+void CMainSignals::BlockDisconnected(const CChainState& chainstate, const std::shared_ptr<const CBlock> &pblock) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([&chainstate, pblock, this] {\n+        m_internals->BlockDisconnected(chainstate, pblock);\n     });\n }\n \n-void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n-        m_internals->ChainStateFlushed(locator);\n+void CMainSignals::ChainStateFlushed(const CChainState& chainstate, const CBlockLocator &locator) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([&chainstate, locator, this] {\n+        m_internals->ChainStateFlushed(chainstate, locator);\n     });\n }\n \n-void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n-    m_internals->BlockChecked(block, state);\n+void CMainSignals::BlockChecked(const CChainState& chainstate, const CBlock& block, const CValidationState& state) {\n+    m_internals->BlockChecked(chainstate, block, state);\n }\n \n-void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n-    m_internals->NewPoWValidBlock(pindex, block);\n+void CMainSignals::NewPoWValidBlock(const CChainState& chainstate, const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    m_internals->NewPoWValidBlock(chainstate, pindex, block);\n }"
      },
      {
        "sha": "e01b4e6e18b092bf77a2efb99f815a1ca1cb5739",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 23,
        "deletions": 12,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -13,6 +13,7 @@\n #include <memory>\n \n extern CCriticalSection cs_main;\n+class CChainState;\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n@@ -84,7 +85,11 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void UpdatedBlockTip(\n+        const CChainState& chainstate,\n+        const CBlockIndex *pindexNew,\n+        const CBlockIndex *pindexFork,\n+        bool fInitialDownload) {}\n     /**\n      * Notifies listeners of a transaction having been added to mempool.\n      *\n@@ -108,13 +113,19 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n+    virtual void BlockConnected(\n+        const CChainState& chainstate,\n+        const std::shared_ptr<const CBlock> &block,\n+        const CBlockIndex *pindex,\n+        const std::vector<CTransactionRef> &txnConflicted) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    virtual void BlockDisconnected(\n+        const CChainState& chainstate,\n+        const std::shared_ptr<const CBlock> &block) {}\n     /**\n      * Notifies listeners of the new active block chain on-disk.\n      *\n@@ -131,18 +142,18 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void ChainStateFlushed(const CBlockLocator &locator) {}\n+    virtual void ChainStateFlushed(const CChainState& chainstate, const CBlockLocator &locator) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n+    virtual void BlockChecked(const CChainState& chainstate, const CBlock&, const CValidationState&) {}\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    virtual void NewPoWValidBlock(const CChainState& chainstate, const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -175,13 +186,13 @@ class CMainSignals {\n     /** Unregister with mempool */\n     void UnregisterWithMempoolSignals(CTxMemPool& pool);\n \n-    void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n+    void UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n-    void ChainStateFlushed(const CBlockLocator &);\n-    void BlockChecked(const CBlock&, const CValidationState&);\n-    void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n+    void BlockConnected(const CChainState& chainstate, const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n+    void BlockDisconnected(const CChainState& chainstate, const std::shared_ptr<const CBlock> &);\n+    void ChainStateFlushed(const CChainState& chainstate, const CBlockLocator &);\n+    void BlockChecked(const CChainState& chainstate, const CBlock&, const CValidationState&);\n+    void NewPoWValidBlock(const CChainState& chainstate, const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "926999bdf8e0eee501ccc5f6032d839e1ec8c16f",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -137,7 +137,7 @@ void CZMQNotificationInterface::Shutdown()\n     }\n }\n \n-void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+void CZMQNotificationInterface::UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n     if (fInitialDownload || pindexNew == pindexFork) // In IBD or blocks were disconnected without any new ones\n         return;\n@@ -178,15 +178,15 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n-void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+void CZMQNotificationInterface::BlockConnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block\n         TransactionAddedToMempool(ptx);\n     }\n }\n \n-void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n+void CZMQNotificationInterface::BlockDisconnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& pblock)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction removed in block disconnection"
      },
      {
        "sha": "993bd8e3f457288b7623a214216a55e58d74e12b",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47a73330199758d8c7b7e1ad6ab209276d54c3/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=fa47a73330199758d8c7b7e1ad6ab209276d54c3",
        "patch": "@@ -28,9 +28,9 @@ class CZMQNotificationInterface final : public CValidationInterface\n \n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void BlockConnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected(const CChainState& chainstate, const std::shared_ptr<const CBlock>& pblock) override;\n+    void UpdatedBlockTip(const CChainState& chainstate, const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n \n private:\n     CZMQNotificationInterface();"
      }
    ]
  }
]