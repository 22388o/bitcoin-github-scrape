[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516101703",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516101703",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516101703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjEwMTcwMw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-29T18:08:51Z",
    "updated_at": "2019-07-29T18:08:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could add a test to make it technically in use? Perhaps with a comment describing that the parameter is intentionally (and temporarily) unused outside of tests.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516101703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516169688",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516169688",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516169688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjE2OTY4OA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-29T21:29:03Z",
    "updated_at": "2019-08-06T07:06:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16324](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16324.html) (Get cs_main out of the critical path in ProcessMessages by TheBlueMatt)\n* [#16323](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16323.html) (Call ProcessNewBlock() asynchronously by TheBlueMatt)\n* [#16279](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16279.html) (Return the AcceptBlock CValidationState directly in ProcessNewBlock by TheBlueMatt)\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on locked chain interface by ariard)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Fire TransactionRemovedFromMempool callbacks from mempool by l2a5b1)\n* [#13686](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13686.html) (ZMQ: Small cleanups in the ZMQ code by domob1812)\n* [#9849](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/9849.html) (Qt: Network Watch tool by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516169688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516571886",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516571886",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516571886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjU3MTg4Ng==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T19:56:47Z",
    "updated_at": "2019-07-30T19:56:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "The current [appveyor errors](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/26320361) are really brutal, they don't even tell you what source file they come from\r\n\r\n```\r\nc:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits(912): error C2139: 'CChainState': an undefined class is not allowed as an argument to compiler intrinsic type trait '__is_assignable' [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_server\\libbitcoin_server.vcxproj]\r\nc:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits(901): error C2139: 'CChainState': an undefined class is not allowed as an argument to compiler intrinsic type trait '__is_assignable' [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_server\\libbitcoin_server.vcxproj]\r\n```\r\n\r\n@MarcoFalke, maybe we should consider removing the `/v:q` option from the appveyor config? (I'm guessing it controls verbosity)?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/74f1a27f2f45af7dafcc34df766cf76d29c7c6ed/.appveyor.yml#L36\r\n\r\nWe could experiment with removing `/v:q` in this PR to see if that helps.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516571886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516583025",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516583025",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516583025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjU4MzAyNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T20:28:52Z",
    "updated_at": "2019-07-30T20:28:52Z",
    "author_association": "MEMBER",
    "body": "cc @sipsorcery ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516583025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516656391",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516656391",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516656391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjY1NjM5MQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T01:29:30Z",
    "updated_at": "2019-07-31T01:29:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm really not a fan of this. Specifically, it seems to be muddling chain sync state outside of validation. assumeutxo is very, very tied to validation process and logic, and I think should be (as much as possible, though admittedly that may not be much) unobservable outside of validation.cpp. Long-long-long term, I want validation.h to be something that ends up looking like libconsensus, but this is a step towards the \"driver\" thereof deciding how to connect what block to where.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516656391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516663394",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516663394",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516663394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjY2MzM5NA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T02:03:44Z",
    "updated_at": "2019-07-31T02:03:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> For a wallet dealing correctly with its transactions for one chainstate is hard enough, now if it has to filter them, that's need more thought...\r\n\r\nI think for now assumeutxo is just supposed to be useful for new wallets (or wallets with birthdays after the utxo snapshot time), so these wallets should be ok with not seeing notifications from the background sync chain.\r\n\r\n> assumeutxo is very, very tied to validation process and logic, and I think should be (as much as possible, though admittedly that may not be much) unobservable outside of validation.cpp\r\n\r\nI don't think I understand what this is envisioning. If the point is to download the more useful blocks first, then go get the less useful blocks, instead of downloading all the blocks in order, it kind of defeats the purpose if you don't tell anyone about the more useful blocks.\r\n\r\nWhen you were talking about this earlier I thought you were just objecting to a full `CChainState` reference being passed around rather than an `enum` or something. But this now sounds like even an enum would be exposing too much information.\r\n\r\nIt'd probably be good to say how you think assumeutxo could be implemented in a more acceptable way, or be more specific about the problems the current design causes or could cause. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516663394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516744753",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516744753",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516744753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjc0NDc1Mw==",
    "user": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?u=56479352d085f0d392512768d25957b0b3b770b4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T08:08:43Z",
    "updated_at": "2019-07-31T08:08:43Z",
    "author_association": "MEMBER",
    "body": "I've submitted #16505 to increase the msbuild verbosity in the appveyor script.\r\n\r\nIn the meantime additional log messages for the 2 msbuild errors in this PR:\r\n\r\n````\r\n1>------ Build started: Project: libbitcoin_server, Configuration: Debug x64 ------\r\n1>validationinterface.cpp\r\n1>c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits(912): error C2139: 'CChainState': an undefined class is not allowed as an argument to compiler intrinsic type trait '__is_assignable'\r\n1>c:\\dev\\github\\bitcoin\\src\\validationinterface.h(16): note: see declaration of 'CChainState'\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\signals2\\detail\\variadic_slot_invoker.hpp(138): note: see reference to class template instantiation 'std::is_move_assignable<_This>' being compiled\r\n1>        with\r\n1>        [\r\n1>            _This=const CChainState &\r\n1>        ]\r\n1>c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits(912): note: see reference to variable template 'const bool conjunction_v<std::is_move_assignable<CChainState const &>,std::is_move_assignable<CBlockIndex const * &>,std::is_move_assignable<std::shared_ptr<CBlock const > const &> >' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\signals2\\detail\\signal_template.hpp(239): note: see reference to class template instantiation 'boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\signals2\\detail\\signal_template.hpp(226): note: while compiling class template member function 'void boost::signals2::detail::signal_impl<R (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &),Combiner,Group,GroupCompare,SlotFunction,ExtendedSlotFunction,Mutex>::operator ()(const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)'\r\n1>        with\r\n1>        [\r\n1>            R=void,\r\n1>            Combiner=boost::signals2::optional_last_value<void>,\r\n1>            Group=int,\r\n1>            GroupCompare=std::less<int>,\r\n1>            SlotFunction=boost::function<void (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,\r\n1>            ExtendedSlotFunction=boost::function<void (const boost::signals2::connection &,const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,\r\n1>            Mutex=boost::signals2::mutex\r\n1>        ]\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\signals2\\detail\\signal_template.hpp(722): note: see reference to function template instantiation 'void boost::signals2::detail::signal_impl<R (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &),Combiner,Group,GroupCompare,SlotFunction,ExtendedSlotFunction,Mutex>::operator ()(const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)' being compiled\r\n1>        with\r\n1>        [\r\n1>            R=void,\r\n1>            Combiner=boost::signals2::optional_last_value<void>,\r\n1>            Group=int,\r\n1>            GroupCompare=std::less<int>,\r\n1>            SlotFunction=boost::function<void (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,\r\n1>            ExtendedSlotFunction=boost::function<void (const boost::signals2::connection &,const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,\r\n1>            Mutex=boost::signals2::mutex\r\n1>        ]\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\signals2\\detail\\signal_template.hpp(613): note: see reference to class template instantiation 'boost::signals2::detail::signal_impl<R (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &),Combiner,Group,GroupCompare,SlotFunction,ExtendedSlotFunction,Mutex>' being compiled\r\n1>        with\r\n1>        [\r\n1>            R=void,\r\n1>            Combiner=boost::signals2::optional_last_value<void>,\r\n1>            Group=int,\r\n1>            GroupCompare=std::less<int>,\r\n1>            SlotFunction=boost::function<void (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,\r\n1>            ExtendedSlotFunction=boost::function<void (const boost::signals2::connection &,const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,\r\n1>            Mutex=boost::signals2::mutex\r\n1>        ]\r\n1>c:\\dev\\github\\bitcoin\\src\\validationinterface.cpp(38): note: see reference to class template instantiation 'boost::signals2::signal<void (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<Signature>,boost::function<R (const boost::signals2::connection &,const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &)>,boost::signals2::mutex>' being compiled\r\n1>        with\r\n1>        [\r\n1>            Signature=void (const CChainState &,const CBlockIndex *,const std::shared_ptr<const CBlock> &),\r\n1>            R=void\r\n1>        ]\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(54): note: see reference to class template instantiation 'boost::arg<9>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(53): note: see reference to class template instantiation 'boost::arg<8>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(52): note: see reference to class template instantiation 'boost::arg<7>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(51): note: see reference to class template instantiation 'boost::arg<6>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(50): note: see reference to class template instantiation 'boost::arg<5>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(49): note: see reference to class template instantiation 'boost::arg<4>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(48): note: see reference to class template instantiation 'boost::arg<3>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(47): note: see reference to class template instantiation 'boost::arg<2>' being compiled\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\bind\\placeholders.hpp(46): note: see reference to class template instantiation 'boost::arg<1>' being compiled\r\n1>c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits(901): error C2139: 'CChainState': an undefined class is not allowed as an argument to compiler intrinsic type trait '__is_assignable'\r\n1>c:\\dev\\github\\bitcoin\\src\\validationinterface.h(16): note: see declaration of 'CChainState'\r\n1>c:\\dev\\github\\vcpkg\\installed\\x64-windows-static\\include\\boost\\signals2\\detail\\variadic_slot_invoker.hpp(138): note: see reference to class template instantiation 'std::is_copy_assignable<_This>' being compiled\r\n1>        with\r\n1>        [\r\n1>            _This=const CChainState &\r\n1>        ]\r\n1>c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits(901): note: see reference to variable template 'const bool conjunction_v<std::is_copy_assignable<CChainState const &>,std::is_copy_assignable<CBlockIndex const * &>,std::is_copy_assignable<std::shared_ptr<CBlock const > const &> >' being compiled\r\n1>Done building project \"libbitcoin_server.vcxproj\" -- FAILED.\r\n========== Build: 0 succeeded, 1 failed, 18 up-to-date, 0 skipped ==========\r\n````",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516744753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516748480",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516748480",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516748480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjc0ODQ4MA==",
    "user": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?u=56479352d085f0d392512768d25957b0b3b770b4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T08:20:05Z",
    "updated_at": "2019-07-31T08:20:05Z",
    "author_association": "MEMBER",
    "body": "Including `validation.h` in `validationinterface.cpp` fixes the msbuild errors. That makes the concrete `CChainState` implementation available rather than only a forward declaration. I'm not familiar enough with this part of the code to know whether that will cause other side effects.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516748480/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516811102",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516811102",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516811102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjgxMTEwMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T11:34:03Z",
    "updated_at": "2019-07-31T12:04:06Z",
    "author_association": "MEMBER",
    "body": "> Once we have multiple chainstates doing their thing simultaneously, we'll need to allow CValidationInterface clients to determine which chainstate a given event pertains to so that they can respond accordingly; for example, a wallet client should respond differently to BlockConnected events for the background validation chain vs. the active chain.\r\n\r\nI don't understand why this is needed. The wallet should never even receive the notifications for the background validation.\r\n\r\nCan you explain a bit more when a chainstate different from the active one is passed through here? And which listeners are supposed to receive it?\r\n\r\nI'd presume the answers are:\r\n* When a block is connected on the background chain\r\n* Only net_processing needs to know about the event\r\n\r\nSo to me it seems simpler, less code, and less computational complexity at listeners, to just add a single new connection for `BackroundBlockConnected` (or none at all if it is not needed), no?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516811102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516913738",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516913738",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 516913738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjkxMzczOA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T16:02:47Z",
    "updated_at": "2019-07-31T16:02:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16487#pullrequestreview-268744787\r\n\r\n> Wandering if clients shouldn't choose at `RegisterValidationInterface` which chainstate they subscribe. And call it multiple times if they want both background and foreground.\r\n\r\nI like this suggestion, and suspect it'd slightly simplify the overall assumeutxo implementation by avoiding the need to add new parameters to various validationinterface notifications. It's actually pretty similar to Marco's suggestion of adding a separate background BlockConnected notification (though I think it's a little more future proof in case clients start also being interested in background `ChainStateFlushed` events or whatever).\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516656391\r\n\r\n> assumeutxo is very, very tied to validation process and logic, and I think should be (as much as possible, though admittedly that may not be much) unobservable outside of validation.cpp\r\n\r\nTurns out this is overstated and Matt is ok with exposing existence of multiple chains as long as they are referenced by enums instead of full CChainState objects.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516748480\r\n\r\nThanks for the debug help sipsorcery! And for confirming a simple #include fixes this.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-516811102\r\n\r\n> The wallet should never even receive the notifications for the background validation.\r\n\r\nI don't think this is necessarily true, though maybe it's true in the near term. I could imagine the wallet being updated to process the utxo snapshot and show balances right away, and then backfilling actual transaction history from background notifications. I believe Jonas Schnelli implemented something like this a while ago with his \"no validation\" wallet transactions in #9076.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516913738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517319405",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-517319405",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 517319405,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzMxOTQwNQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-01T14:46:10Z",
    "updated_at": "2019-08-01T14:46:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "My previous ACK is still valid, by the way. The decision to use enums or references to indicate chain state, and the decision whether to add a parameter to existing callbacks, or add a new callback for background blocks, or to not change any callbacks but add a chain argument to the register function all seem skin-deep. I do not see how these decisions would have any significant impact on future code added to bitcoin or hypothetical code written to use libconsensus.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517319405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517438708",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-517438708",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 517438708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzQzODcwOA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-01T20:08:36Z",
    "updated_at": "2019-08-01T20:08:36Z",
    "author_association": "MEMBER",
    "body": "Thanks to everyone for the thoughts. I think I'm going to try the approach suggested by @MarcoFalke, since I think it'll reduce the diff by at least 40 lines or so. After reviewing the parent PR (#15606) I've realized that the majority of validationinterface clients just ignore the background chainstate, and so introducing a `BackgroundBlockConnected()` event should be a less intrusive way of doing what this PR was intended to prepare for.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517438708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518703031",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-518703031",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 518703031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODcwMzAzMQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T14:49:11Z",
    "updated_at": "2019-08-06T14:49:11Z",
    "author_association": "MEMBER",
    "body": "Closing for now since the alternate approaches suggested will mostly exclude these changes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518703031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579703052",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#issuecomment-579703052",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16487",
    "id": 579703052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTcwMzA1Mg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T10:58:25Z",
    "updated_at": "2020-01-29T10:58:25Z",
    "author_association": "MEMBER",
    "body": "Don't forget to remove this from the \"In progress\" column: https://github.com/bitcoin/bitcoin/projects/11",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579703052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308936332",
    "pull_request_review_id": 268659955,
    "id": 308936332,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkzNjMzMg==",
    "diff_hunk": "@@ -188,7 +188,8 @@ bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_ti\n     return true;\n }\n \n-void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+void BaseIndex::BlockConnected(const CChainState& chainstate,",
    "path": "src/index/base.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "original_commit_id": "fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "CChainState isn't really a data object by itself, more of a handle to access other objects containing real state, so I'm curious what the `const` keywords throughout the PR are expressing. \r\n\r\nI guess I'm asking to be reassured that this PR isn't likely to be followed with another PR in the future removing all these consts because one `CValidationInterface` listener needs call a non-const method. It's good have some general reasoning before adding an infectious `const` to avoid churn or arms races of `mutable`'s overriding `const`'s and generally misleading code.",
    "created_at": "2019-07-30T20:50:33Z",
    "updated_at": "2019-07-30T21:20:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#discussion_r308936332",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308936332"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16487#discussion_r308936332"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308936332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 191,
    "original_line": 191,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308945435",
    "pull_request_review_id": 268659955,
    "id": 308945435,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODk0NTQzNQ==",
    "diff_hunk": "@@ -91,14 +91,14 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {",
    "path": "src/validationinterface.cpp",
    "position": 23,
    "original_position": 23,
    "commit_id": "fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "original_commit_id": "fa47a73330199758d8c7b7e1ad6ab209276d54c3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This looks right, but in case the std::bind code is what's responsible for the msvc errors, you could try a workaround by replacing `std::bind` calls with lambdas:\r\n\r\n```\r\nvoid RegisterValidationInterface(CValidationInterface* pwalletIn) {\r\n    ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\r\n    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect([pwalletIn](const CChainState& chainstate, const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload){ pwalletIn->UpdatedBlockTip(chainstate, pindexNew, pindexFork, fInitialDownload); });\r\n    conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect([pwalletIn](const CTransactionRef &ptxn){ pwalletIn->TransactionAddedToMempool(ptxn); });\r\n    conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect([pwalletIn](const CTransactionRef &ptx){ pwalletIn->TransactionRemovedFromMempool(ptx); });\r\n    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect([pwalletIn](const CChainState& chainstate, const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted){ pwalletIn->BlockConnected(chainstate, block, pindex, txnConflicted); });\r\n    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect([pwalletIn](const CChainState& chainstate, const std::shared_ptr<const CBlock> &block){ pwalletIn->BlockDisconnected(chainstate, block); });\r\n    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect([pwalletIn](const CChainState& chainstate, const CBlockLocator &locator){ pwalletIn->ChainStateFlushed(chainstate, locator); });\r\n    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect([pwalletIn](const CChainState& chainstate, const CBlock& block, const CValidationState& state){ pwalletIn->BlockChecked(chainstate, block, state); });\r\n    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect([pwalletIn](const CChainState& chainstate, const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block){ pwalletIn->NewPoWValidBlock(chainstate, pindex, block); });\r\n}\r\n```",
    "created_at": "2019-07-30T21:13:21Z",
    "updated_at": "2019-07-30T21:20:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16487#discussion_r308945435",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16487",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308945435"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16487#discussion_r308945435"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16487"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308945435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 92,
    "original_line": 92,
    "side": "RIGHT"
  }
]