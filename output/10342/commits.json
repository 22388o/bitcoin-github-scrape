[
  {
    "sha": "329ac3bab11819d59921dcd2cc033b02610fcf9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjlhYzNiYWIxMTgxOWQ1OTkyMWRjZDJjYzAzM2IwMjYxMGZjZjlh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-05T13:17:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-08T18:00:40Z"
      },
      "message": "[tests] use wait_until in mempool_persist.py",
      "tree": {
        "sha": "8cc863c7f8652222a9be5547e2cc4a11049e1396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cc863c7f8652222a9be5547e2cc4a11049e1396"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/329ac3bab11819d59921dcd2cc033b02610fcf9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/329ac3bab11819d59921dcd2cc033b02610fcf9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/329ac3bab11819d59921dcd2cc033b02610fcf9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/329ac3bab11819d59921dcd2cc033b02610fcf9a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 20,
      "deletions": 21
    },
    "files": [
      {
        "sha": "7b15476ea2714a4b2b6cdc8b49e361f71f1e8385",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 20,
        "deletions": 21,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/329ac3bab11819d59921dcd2cc033b02610fcf9a/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/329ac3bab11819d59921dcd2cc033b02610fcf9a/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=329ac3bab11819d59921dcd2cc033b02610fcf9a",
        "patch": "@@ -6,11 +6,11 @@\n \n By default, bitcoind will dump mempool on shutdown and\n then reload it on startup. This can be overridden with\n-the -persistmempool=false command line option.\n+the -persistmempool=0 command line option.\n \n Test is as follows:\n \n-  - start node0, node1 and node2. node1 has -persistmempool=false\n+  - start node0, node1 and node2. node1 has -persistmempool=0\n   - create 5 transactions on node2 to its own address. Note that these\n     are not sent to node0 or node1 addresses because we don't want\n     them to be saved in the wallet.\n@@ -20,43 +20,38 @@\n     in its mempool. Shutdown node0. This tests that by default the\n     mempool is persistent.\n   - startup node1. Verify that its mempool is empty. Shutdown node1.\n-    This tests that with -persistmempool=false, the mempool is not\n+    This tests that with -persistmempool=0, the mempool is not\n     dumped to disk when the node is shut down.\n-  - Restart node0 with -persistmempool=false. Verify that its mempool is\n-    empty. Shutdown node0. This tests that with -persistmempool=false,\n+  - Restart node0 with -persistmempool=0. Verify that its mempool is\n+    empty. Shutdown node0. This tests that with -persistmempool=0,\n     the mempool is not loaded from disk on start up.\n-  - Restart node0 with -persistmempool=true. Verify that it has 5\n-    transactions in its mempool. This tests that -persistmempool=false\n+  - Restart node0 with -persistmempool. Verify that it has 5\n+    transactions in its mempool. This tests that -persistmempool=0\n     does not overwrite a previously valid mempool stored on disk.\n \n \"\"\"\n+import time\n \n+from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n class MempoolPersistTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n+        # We need 3 nodes for this test. Node1 does not have a persistent mempool.\n         self.num_nodes = 3\n         self.setup_clean_chain = False\n-\n-    def setup_network(self):\n-        # We need 3 nodes for this test. Node1 does not have a persistent mempool.\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-persistmempool=false\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir))\n-        connect_nodes_bi(self.nodes, 0, 2)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        self.is_network_split = False\n+        self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)\n \n         self.log.debug(\"Mine a single block to get out of IBD\")\n         self.nodes[0].generate(1)\n+        self.sync_all()\n \n         self.log.debug(\"Send 5 transactions from node2 (to its own address)\")\n         for i in range(5):\n@@ -72,20 +67,24 @@ def run_test(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir))\n         self.nodes.append(start_node(1, self.options.tmpdir))\n-        assert_equal(len(self.nodes[0].getrawmempool()), 5)\n+        # Give bitcoind a second to reload the mempool\n+        time.sleep(1)\n+        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n-        self.log.debug(\"Stop-start node0 with -persistmempool=false. Verify that it doesn't load its mempool.dat file.\")\n+        self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         stop_nodes(self.nodes)\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-persistmempool=false\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n+        # Give bitcoind a second to reload the mempool\n+        time.sleep(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         stop_nodes(self.nodes)\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir))\n-        assert_equal(len(self.nodes[0].getrawmempool()), 5)\n+        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':\n     MempoolPersistTest().main()"
      }
    ]
  }
]