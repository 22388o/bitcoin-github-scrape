DrahtBot,2019-12-12 19:52:13,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #18152 (qt: Use SynchronizationState enum for signals to GUI by hebas",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-565159369,565159369,
jonatack,2020-01-16 19:18:22,"Bringing in [this IRC comment](http://www.erisian.com.au/bitcoin-core-dev/log-2020-01-16.html#l-454), if helpful:\n\n""recent utxo snapshots for testing are available here: https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-555213164""",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-575302740,575302740,
MarcoFalke,2020-01-24 20:20:09,"ACK 16d20d91b43b1c30333fe14272d69cfb543229b3 only, will continue review later on üöÄ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 16d20d91b43b1c30333fe14272d69cfb543229b3 only, will continue review later on üöÄ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAAC",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-578285881,578285881,
MarcoFalke,2020-01-28 19:01:28,"ACK 1c173812bac34e263ae49e0bc80e45b437e95e8b, but it looks like the tests fail üç¢\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 1c173812bac34e263ae49e0bc80e45b437e95e8b, but it looks like the tests fail üç¢\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQz",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579403029,579403029,
jamesob,2020-01-28 22:11:29,Thanks for the good reviews! I'll be following up shortly with corresponding changes.,https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579483360,579483360,
jamesob,2020-01-29 15:39:49,"[`au.chainman.6`](https://github.com/jamesob/bitcoin/tree/au.chainman.6) -> [`au.chainman.9`](https://github.com/jamesob/bitcoin/tree/au.chainman.9) [(changes)](https://github.com/bitcoin/bitcoin/compare/1c173812bac34e263ae49e0bc80e45b437e95e8b..94ca1e07bb56a1d1d4d21871056144ae00941ef3)\n\nI've incorporated most if not all of the feedback from @MarcoFalke and @ryanofsky which has nicely reduced ",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579817106,579817106,
jamesob,2020-01-29 16:04:26,"[`au.chainman.9`](https://github.com/jamesob/bitcoin/tree/au.chainman.9) -> [`au.chainman.11`](https://github.com/jamesob/bitcoin/tree/au.chainman.11)\n\nPushed fixes for some small bugs, @MarcoFalke's `VerifyDB` comment, and [one big embarrassing typo](https://github.com/bitcoin/bitcoin/compare/94ca1e07bb56a1d1d4d21871056144ae00941ef3..ead4c5fada4246e1a37551469430a07c04d783a7).",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579829160,579829160,
MarcoFalke,2020-01-29 18:34:52,"re-ACK d88f75e495a46ae474d8ad67faaec13ef1950f5e  will probably do a fresh review some time later üç∂\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK d88f75e495a46ae474d8ad67faaec13ef1950f5e  will probably do a fresh review some time later üç∂\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPo",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579897660,579897660,
jamesob,2020-01-29 19:47:04,"[`au.chainman.11`](https://github.com/jamesob/bitcoin/tree/au.chainman.11) -> [`au.chainman.12`](https://github.com/jamesob/bitcoin/tree/au.chainman.12)[(changes)](https://github.com/bitcoin/bitcoin/compare/d88f75e495a46ae474d8ad67faaec13ef1950f5e..8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62)\n\nThanks for the continued reviews!",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579928429,579928429,
MarcoFalke,2020-01-29 21:14:01,Tests fail when compiled with `--enable-debug`,https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579962488,579962488,
ryanofsky,2020-02-07 21:40:44,"> Code review ACK [8fe8b2e](https://github.com/bitcoin/bitcoin/commit/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62). Changes since last review: making SnapshotBlockhash return optional, removing qt test workaround, minor style / include tweaks\n> \n> Are there still problems with tests?\n\nRunning this locally, I see a simple error in a wallet test that is locking `cs_main` in `ChainActive()` afte",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-583626665,583626665,
jamesob,2020-02-14 16:50:04,"[`au.chainman.12`](https://github.com/jamesob/bitcoin/tree/au.chainman.12) -> [`au.chainman.13`](https://github.com/jamesob/bitcoin/tree/au.chainman.13) [(changes)](https://github.com/bitcoin/bitcoin/compare/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62..abfc15273f817d30c3f53f910a8b340a72a6377a)\n\nThanks for the fix, @ryanofsky. Tests are now passing.",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-586372113,586372113,
ryanofsky,2020-02-14 21:35:28,"Code review ACK abfc15273f817d30c3f53f910a8b340a72a6377a. Changes since last review:\n\n```diff\n+Co-authored-by: Russell Yanofsky <russ@yanofsky.org>\n```\n\nwith my test fix. Waiting for my github royalties to start rolling in.",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-586482139,586482139,
fjahr,2020-03-17 19:55:29,Code Review Re-ACK abfc15273f817d30c3f53f910a8b340a72a6377a,https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600267492,600267492,
MarcoFalke,2020-03-18 15:08:03,"re-ACK c9017ce3bc27665594c9d80f395780d40755bb22 üìô\n\nOnly changes since my last review:\n\n* Fix lock order in tests\n* Making the snapshot blockhash optional\n\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK c9017ce3bc27665594c9d80f395780d40755bb22 üìô\n\nOnly changes since my last review:",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600677309,600677309,
MarcoFalke,2020-03-18 15:10:08,@fjahr It looks like your commit hash is the same in the re-ACK,https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600678437,600678437,
fjahr,2020-03-18 15:14:19,"> @fjahr It looks like your commit hash is the same in the re-ACK\n\nUgh, how did I do that? I definitely re-reviewed the new code.\n\nCode Review Re-ACK c9017ce3bc27665594c9d80f395780d40755bb22\n\n",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600680873,600680873,
jamesob,2020-03-31 16:32:01,"This tip has accumulated a good number of code ACKs, so I'm hesitant to address nits here. If anyone thinks that's the right move though I'm happy to.\n\nEdit: and thanks for the reviews, everyone!",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-606736762,606736762,
fanquake,2020-04-01 04:14:10,">  If anyone thinks that's the right move though I'm happy to.\n\nI think we can merge this after the 0.20 branch off.",https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-607019806,607019806,
MarcoFalke,2019-12-13 15:51:26,"in commit 6d1491603f6dfb9f755e60d77685635c35d5a48b: \n\nIs m_chain.SetTip assumed to be under cs_main? If yes, this should say ` ... = WITH_LOCK(cs_main, return m_chain.Tip());`",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709665,357709665,src/validation.cpp
MarcoFalke,2019-12-13 15:52:03,"in commit 6d14916:\n\nI think the arguments are switched?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709949,357709949,src/validation.cpp
MarcoFalke,2019-12-13 15:55:41,"in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\n\nShould be const to ensure at compile time that we know whether a chainstate was created from a snapshot?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357711715,357711715,src/validation.h
MarcoFalke,2019-12-13 15:56:44,"in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\n\nconstructors (especially single arg ones) should be explicit. Otherwise any hash can be passed into a function that accepts a chainstate. Hmmm",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712223,357712223,src/validation.h
MarcoFalke,2019-12-13 15:57:52,"in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\n\nNow the arguments are correct. Might just squash the commits?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712757,357712757,src/validation.cpp
MarcoFalke,2019-12-13 15:58:41,"style-nit in 6b62d2f15397226b273cb87f56b8978404fd415f:\n\nThe colon goes into a new line according to our clang-format",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357713099,357713099,src/validation.cpp
MarcoFalke,2019-12-13 16:07:06,"in commit 6a629cfd02:\n\nWouldn't this need to happen under some chainstate manager lock? Otherwise the chainstate might point to uninitialized memory in case of a race where "" Its contents will be freed when background validation of the snapshot has completed.""",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357716948,357716948,src/validation.h
MarcoFalke,2019-12-13 16:11:38,"in commit 6a629cfd029071: \n\nHow and why is this different from `return !m_ibd_chainstate`?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357719170,357719170,src/validation.h
MarcoFalke,2019-12-13 16:16:07,"in commit 6a629cfd02907162ce:\n\nI wonder if this method needs to happen under some kind of lock. Otherwise there might be a race in validation or net processing where the chainstate is switched down under during a call.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357721286,357721286,src/validation.cpp
MarcoFalke,2019-12-13 16:21:52,"in commit 6a629cfd0290716:\n\nHow and why is this different from `return m_active_chainstate->m_snapshot_blockhash;`?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357723785,357723785,src/validation.h
MarcoFalke,2019-12-13 16:29:30,"in commit 4813167d989c:\n\nIs this comment no longer relevant?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357727259,357727259,src/init.cpp
promag,2019-12-14 02:14:57,Agree. Same question for other methods.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357890585,357890585,src/validation.h
ariard,2019-12-16 22:45:42,"6b62d2f\n\nEven if I understand what you mean by an assumed-valid UTXO, I think it may confuse readers try to learn what's the difference is between assume-utxo and assume-valid. Wouldn't be shock by a simple `assume-utxo snapshot`.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358506358,358506358,src/validation.h
ariard,2019-12-16 22:48:01,"6b62d2f\n\nIt's ambiguous here, do you mean a chainstate for which validity is assumed ? Overall, what's the definition of validity w.r.t to chainstates types ? I.e a IBD chainstate is always considered valid (because all consensus checks are done by us) or only when it's out-of-IBD? What's about a assume-valid IBD chainstate ?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123,358507123,src/validation.h
ariard,2019-12-16 22:50:19,"6b62d2f\n\nLogger is weird, given than default activate is true, no blockhash is going to be display, maybe `snapshot_blockhash.IsNull ? ""an IBD one"" : snapshot_blockhash.ToString()`",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507922,358507922,src/validation.cpp
ariard,2019-12-16 22:52:45,"6b62d2f\n\nI think consequences of activating a non valid chainstate by mistake can be pretty bad, would be better to have default to false in case of buggy call of this method.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358508803,358508803,src/validation.h
ariard,2019-12-16 22:58:22,"Agree, could be removed in GetAll, if idea is to garbage collect m_ibd_chainstate when foreground utxo get validated",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358510858,358510858,src/validation.h
ariard,2019-12-16 22:59:21,"6a629cf\n\nnit: you can move body function to validation.cpp, like `IsSnapshotActive`",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511242,358511242,src/validation.h
ariard,2019-12-16 23:00:48,"6a629cf\n\nMaybe reset `m_snapshot_blockhash` to null and `m_snapshot_validated` to false?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511722,358511722,src/validation.cpp
ariard,2019-12-16 23:08:56,"175e570\n\nI'm not sure if `RewindBlockIndex` is still relevant.\n\nFollowing Suhas comment https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-257943026, it was added to let upgrading nodes after segwit activation redownload consensus data without redownloading the whole blockchain.\n\nAccording to sipa in #15402, the rewinding logic ""is probably becoming increasingly unnecessary, as ",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358514335,358514335,src/init.cpp
ariard,2019-12-16 23:12:43,"4813167\n\nJust iterate for the `VerifyDB`, pruning and best block seen by RPC maybe should be common to both chainstates ?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358515509,358515509,src/init.cpp
jamesob,2019-12-17 15:23:30,"Thanks for raising this point. Initially, I had all pointers in the ChainstateManager protected by a private `m_cs` lock. I later found that there were irreconcilable lock inversions that happened during initialization - because a function like `ChainActive()` would necessarily have to acquire `ChainstateManager.m_cs`, there were many tricky inversions that happened between that lock and others li",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358853789,358853789,src/validation.h
jamesob,2019-12-17 15:30:30,"Also, it's worth noting that the comment you quote is out of date (my fault!). We don't actually free the contents of the background validation chainstate *immediately* when validation completes - [we do it during shutdown](https://github.com/bitcoin/bitcoin/pull/15606/commits/8d6e0c34c32c5b95c126a963b16b5aebf707acbd#diff-24efdb00bfbe56b140fb006b562cc70bR5653-R5679) when `g_chainman.Reset()` is ca",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324,358858324,src/validation.h
jamesob,2019-12-17 15:31:40,See my comment above for background: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324. Perhaps we can do this without necessarily needing to maintain extra state (`m_snapshot_validated`) for it. I'll look into it.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859057,358859057,src/validation.h
jamesob,2019-12-17 15:32:09,"In practice all usages of this happen under `cs_main`, but as I said above I'll do explicit annotations.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859358,358859358,src/validation.cpp
jamesob,2019-12-17 15:32:30,"I think you're right here, I'll remove this.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859584,358859584,src/validation.h
jamesob,2019-12-17 15:34:40,"I think this method is called so infrequently and has such major effects that it'd be hard to accidentally do anything one way or the other, and the results would be immediately obvious and buggy. But to your point, maybe I should remove the default parameters so that everything has to be explicit.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358860840,358860840,src/validation.h
jamesob,2020-01-02 17:21:18,I think it was incorrect since we haven't initialized the coins views at that point.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362555635,362555635,src/init.cpp
jamesob,2020-01-02 17:22:26,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556013,362556013,src/validation.h
jamesob,2020-01-02 17:23:39,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556449,362556449,src/validation.cpp
jamesob,2020-01-02 17:24:03,"Removed the default parameters, thanks.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556568,362556568,src/validation.h
jamesob,2020-01-02 17:24:38,"Agree this is worth investigating, but probably not within this PR. I'd rather just preserve existing behavior.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556744,362556744,src/init.cpp
jamesob,2020-01-02 22:06:45,"Good point - I'm changing this to only report a new tip to RPC for the active chain. The tip/time check is very cheap and doesn't hurt to be done for both. There isn't anything that actually happens for pruning here other than a possible log statement, so I think leaving that as-is should be fine. Thanks!",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362648146,362648146,src/init.cpp
ariard,2020-01-03 22:54:50,"FYI, https://github.com/bitcoin/bitcoin/issues/17862. I had a second look, I think it's safe to maintain logic as it is for this PR even it should be never triggered because both chainstates will belong to segwit nodes. ",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362987653,362987653,src/init.cpp
MarcoFalke,2020-01-24 19:48:07,"in commit 16d20d91b43b1c30333fe14272d69cfb543229b3:\n\nYou mention that ""// If a snapshot chainstate exists, it will always be our active.""\n\nHowever, then you provide code here to activate a ibd chainstate even though a snapshot chainstate might exist. This is confusing and the code should probably not provide such a backdoor.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370812356,370812356,src/validation.cpp
MarcoFalke,2020-01-24 19:54:27,"Maybe a check like `if (m_active_chainstate && to_modify != m_snapshot_chainstate) LogPrintf(""Error!""); else ...` or similar could prevent that?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370815097,370815097,src/validation.cpp
MarcoFalke,2020-01-24 20:05:05,"in commit 16d20d91b43b1c30333fe14272d69cfb543229b3:\n\nShould `assert m_active_chainstate` first?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370819528,370819528,src/validation.cpp
MarcoFalke,2020-01-24 20:10:37,"in commit 16d20d9:\n\n""proven invalid"" sounds odd. In normal operation (with the assumevalid hash baked in) an assumevalid chainstate can never be invalid. And if it is, there is no way to recover from this, right? So proving that one or the other chainstate is invalid is impossible with conflicting information. The only way to handle this is to crash the node immediately. I'd say to remove the ",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370821538,370821538,src/validation.h
jamesob,2020-01-27 19:47:06,"Yep, good point.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371446270,371446270,src/validation.h
jamesob,2020-01-27 20:15:42,"Yep, this is a really good point. Fixed it to only allow a single activation sequence. ",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371459713,371459713,src/validation.cpp
MarcoFalke,2020-01-28 15:48:24,"in commit e89fbd3cf0820ee263a94c49751a97a784acb049:\n\nI have a hard time following the logic-change.\n\n* You replace all calls to ChainActive with a for loop over all chainstates\n* You only initialize the ""ibd"" chainstate, which will retain all logic as it was before\n* However, is_coinsview_empty will be set to the result of whatever chainstate was processed last, and then used (in the n",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886443,371886443,src/init.cpp
MarcoFalke,2020-01-28 15:49:07,"in commit e89fbd3cf0820ee263a94c49751a97a784acb049:\n\nPreviously we'd break out, now we continue. Why?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886873,371886873,src/init.cpp
jamesob,2020-01-28 16:30:42,"Maybe it's a little hard to see in the diff, but the current value of `is_coinsview_empty` is only ever used within a single loop. In the next loop, the [value is reset](https://github.com/jamesob/bitcoin/blob/1c173812bac34e263ae49e0bc80e45b437e95e8b/src/init.cpp#L1619-L1620) based on the chainstate being worked on.\n\nIt's safe to reset the value on line 1619 because it's not possible for the c",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371914209,371914209,src/init.cpp
ryanofsky,2020-01-28 16:40:22,"> Yep, this is a really good point. Fixed it to only allow a single activation sequence.\n\nIf you're going to do this I think it would be clearer as:\n\n```\nLogPrintf(""Switching active chainstate to %s\n"", to_modify->ToString());\nassert (is_snapshot || !m_active_chainstate);\nm_active_chainstate = to_modify.get();\n```\n\nIn current version, it's confusing to mentally reconcile the ""a",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371920391,371920391,src/validation.cpp
MarcoFalke,2020-01-28 17:57:35,"Oh, I missed that the value is reset. Maybe it would help to limit the scope of the variable to make that more clear and avoid this issue accidentally coming up in the future?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371963531,371963531,src/init.cpp
MarcoFalke,2020-01-28 18:15:00,"in commit e89fbd3:\n\nVerifyDB will verify the db based on the active chain. How is this supposed to work when you pass in a db that is not from the active chainstate?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371972320,371972320,src/init.cpp
MarcoFalke,2020-01-28 18:58:20,"in commit 1c173812bac34e263ae49e0bc80e45b437e95e8b:\n\nWhy is this a hack and what should be used instead of the hack? If there is nothing that can be used instead, this is not a hack and the comment should go.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371994558,371994558,src/init.cpp
MarcoFalke,2020-01-28 19:00:08,Same here and everywhere else you use the `XXX`,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371995471,371995471,src/net_processing.cpp
ryanofsky,2020-01-28 19:50:06,"In commit ""validation: introduce unused ChainstateManager"" (10837ab1d33e126c4f36221cb5077038ca65f00d)\n\nWould be nice to drop ambiguity of ""multiple"" chainstates here and say more specifically ""one or two chainstates: an IBD chainstate generated by downloading blocks, and an optional snapshot chainstate loaded from a UTXO snapshot""",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372020529,372020529,src/validation.h
ryanofsky,2020-01-28 19:57:34,"In commit ""validation: introduce unused ChainstateManager"" (10837ab1d33e126c4f36221cb5077038ca65f00d)\n\nThe ""Background validation chainstate"" term seems a little awkward to me, where I guess every background validation chainstate is an IBD chainstate, but an IBD chainstate isn't a background validation chainstate until a separate snapshot chainstate has been loaded.\n\nIt seems like if you r",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372024285,372024285,src/validation.h
ryanofsky,2020-01-28 20:23:01,"In commit ""validation: introduce unused ChainstateManager"" (10837ab1d33e126c4f36221cb5077038ca65f00d)\n\nre: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123\n\n> It's ambiguous here, do you mean a chainstate for which validity is assumed\n\nAgree ""whose validity is not assumed"" could be misinterpreted as ""that isn't necessarily valid"" instead of ""that has been validated l",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372035982,372035982,src/validation.h
ryanofsky,2020-01-28 20:39:38,"> Oh, I missed that the value is reset. Maybe it would help to limit the scope of the variable to make that more clear and avoid this issue accidentally coming up in the future?\n\nI agree it would be clearer to limit the scope of this variable. It's crazy to give a variable a 200 line scope if it should have a 2 line scope.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372043181,372043181,src/init.cpp
ryanofsky,2020-01-28 20:47:53,"In commit ""test: add basic tests for ChainstateManager"" (997bf7f38626978cce84a33ee1c6e353a3440e25)\n\nI think boosts BOOST_CHECK_EQUAL_COLLECTIONS macro might give better error reporting than this function. We're using the macro already in some other tests",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372046963,372046963,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-01-28 20:49:54,Oh good point - looks like I split the commits up a bit out of order. I could pull this (https://github.com/bitcoin/bitcoin/pull/15606/commits/23a074b6630dd75fd4a4a5b6495fe046012f2cc9) in or only do verification for the active chain... any preference?,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372047892,372047892,src/init.cpp
ryanofsky,2020-01-28 20:52:03,"In commit ""test: add basic tests for ChainstateManager"" (997bf7f38626978cce84a33ee1c6e353a3440e25)\n\nNo test for the case where IsSnapshotValidated returns true, I guess. Understandable if it would make the test setup too complicated",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372048958,372048958,src/test/validation_chainstatemanager_tests.cpp
ryanofsky,2020-01-28 21:08:58,"> in commit [1c17381](https://github.com/bitcoin/bitcoin/commit/1c173812bac34e263ae49e0bc80e45b437e95e8b):\n> \n> Why is this a hack and what should be used instead of the hack? If there is nothing that can be used instead, this is not a hack and the comment should go.\n\nTend to agree with Marco that if it is a hack you should say what the specific problem is. Maybe a problem could be that on",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372056833,372056833,src/init.cpp
ryanofsky,2020-01-28 21:34:52,"In commit ""use ChainstateManager to initialize chainstate"" (e89fbd3cf0820ee263a94c49751a97a784acb049)\n\nThere's a stray reference to `g_chainstate` a few lines up in a comment which should be updated\n\nAlso in AppInitMain line 1713 below, PruneAndFlush is only called on active chain, not both chains. I'm probably missing something, but it seem like a loop might be right there as well. Or may",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372070692,372070692,src/init.cpp
ryanofsky,2020-01-28 21:39:13,"In commit ""use ChainstateManager to initialize chainstate"" (e89fbd3cf0820ee263a94c49751a97a784acb049)\n\nShould this line refer to chainstate now instead of ::ChainActive?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372072808,372072808,src/init.cpp
ryanofsky,2020-01-28 21:51:53,"In commit ""protect g_chainman with cs_main"" (1c173812bac34e263ae49e0bc80e45b437e95e8b)\n\nAdding these lock annotations seems to makes these convenience functions a lot less convenient and blow up the size of this commit with lots of new cs_main locks. Would it be bad to lock cs_main inside ChainstateActive(), ChainstateActive(), and BlockIndex() instead of requiring it to be locked beforehand?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372078668,372078668,src/validation.h
jamesob,2020-01-28 22:41:14,"What gets kind of confusing here is that chainstates created from snapshots still technically go through IBD, since by the time the snapshot is actually used to create a chainstate, it's far enough behind the tip that it technically undergoes IBD (albeit an abbreviated one). So I think referring to what I now call the background validation chainstate as the IBD chainstate might be confusing in tha",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372099708,372099708,src/validation.h
ryanofsky,2020-01-28 23:28:32,"re: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372099708\n\nI guess I see that but it would seem more like a reason to avoid the term ""IBD chainstate"" entirely. \n\nSince chain state manager only has a snapshot chainstate and a non snapshot chainstate, I like the idea of just referring to the two chainstates with the same names consistently, and not muddying the water with other",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372116260,372116260,src/validation.h
MarcoFalke,2020-01-29 00:06:40,"If you think that the commit that switches `AppInitMain` to use for-loops is blowing up this pull request too much, you can also leave it for later, I guess. I haven't checked, but it should be correct to just call `g_chainman.InitializeChainstate();` to initialize the ""ibd"" chainstate and then leave all calls as they were previously, i.e. `ChainstateActive()....`",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372127798,372127798,src/init.cpp
jamesob,2020-01-29 15:40:10,"Fixed, using Russ' definition.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372459488,372459488,src/validation.h
jamesob,2020-01-29 15:40:49,Fixed by removing the variable entirely and replacing it with a function.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372459933,372459933,src/init.cpp
jamesob,2020-01-29 15:41:07,Good catch! Fixed.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372460119,372460119,src/init.cpp
jamesob,2020-01-29 15:42:27,Fixed by cleaning up inline comments and adding documentation to the ChainstateManager pointer definitions.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372460995,372460995,src/init.cpp
jamesob,2020-01-29 15:42:51,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372461235,372461235,src/validation.h
jamesob,2020-01-29 15:44:16,"Partially (?) fixed by changing `IsBackgroundValidationChainstate()` to `IsBackgroundIBD()`. I think blocksonly is somewhat confusing because there'd be a confusing overlap with the P2P definition of blocksonly, which I think is different or unrelated.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462118,372462118,src/validation.h
jamesob,2020-01-29 15:44:36,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462324,372462324,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-01-29 15:44:51,"Good catches! Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462476,372462476,src/init.cpp
jamesob,2020-01-29 15:45:11,Fixed.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462677,372462677,src/init.cpp
jamesob,2020-01-29 15:46:18,"Fixed by taking your suggestion. I didn't initially do this because I thought it created some kind of lock annotation problem, but after trying this change and rebasing the parent PR onto it, clang threw no warnings. Subsequently the diff has contracted a bit - thanks!",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372463387,372463387,src/validation.h
laanwj,2020-01-29 15:52:10,I'd prefer this to return an `Optional<uint256>` instead of special-casing `00000000000000000000000000000000`.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372467174,372467174,src/validation.cpp
ryanofsky,2020-01-29 15:57:09,"In commit ""protect g_chainman with cs_main"" (d88f75e495a46ae474d8ad67faaec13ef1950f5e)\n\nShould keep current style if you prefer it, but it'd be possible to shorten this initializing the `chainstates` variable on one line instead of two lines, or just dropping it:\n\n```c++\nfor (CChainState* chainstate : WITH_LOCK(::cs_main, return g_chainman.GetAll())) {\n   ...\n}\n```",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372470449,372470449,src/init.cpp
laanwj,2020-01-29 16:00:26,`to_modify->get()`?,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372472680,372472680,src/validation.cpp
ryanofsky,2020-01-29 16:13:11,"In commit ""protect g_chainman with cs_main"" (d88f75e495a46ae474d8ad67faaec13ef1950f5e)\n\nI don't understand the two swaps between `::ActivateBestChain(...)` and `::ChainstateActive().ActivateBestChain(...)` in this commit. They don't seem to do anything, and if I revert them there don't seem to be obvious problems.\n\nNot specific to this PR but generally it seems confusing to have an instanc",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372480374,372480374,src/validation.cpp
ryanofsky,2020-01-29 16:27:02,"In commit ""protect g_chainman with cs_main"" (d88f75e495a46ae474d8ad67faaec13ef1950f5e)\n\nThis doesn't explain what happens if you load two snapshots (one after the other). It seems like `ChainstateManager::InitializeChainstate` explicitly allows this so it would be good to add some clarification here or there.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372489096,372489096,src/validation.h
ryanofsky,2020-01-29 17:06:50,"In commit ""use ChainstateManager to initialize chainstate"" (741db94e52b51d4df8173d56bfb1258ccf9ddbb3)\n\nJust to understand, is checking ChainstateActive() == chainstate here an optimization to avoid verifying the same db multiple times? Could update comment, but no need to since hopefully this will be pretty shortlived",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372512973,372512973,src/init.cpp
MarcoFalke,2020-01-29 18:24:23,"Please remove this hack in the unit tests. It will lead to potentially not resetting global state and preserving a chainstate of previous tests. The test failure is due to a missing reset in the gui tests, which can be fixed with a one-line patch:\n\n\n```diff\ndiff --git a/src/qt/test/apptests.cpp b/src/qt/test/apptests.cpp\nindex 14a75b23f3..f9eb4cde30 100644\n--- a/src/qt/test/apptests.cp",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372552842,372552842,src/test/util/setup_common.cpp
MarcoFalke,2020-01-29 18:33:33,"Heh, member access has a higher precedence than indirection (dereference), so this is correct. Though, the same could be written shorter as just `*to_modify`",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372557456,372557456,src/validation.cpp
jamesob,2020-01-29 19:40:02,"Good point, fixed.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591004,372591004,src/validation.cpp
jamesob,2020-01-29 19:40:16,Went with Marco short-form.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591105,372591105,src/validation.cpp
jamesob,2020-01-29 19:40:32,"Ah yeah, that's a nice improvement. Fixed.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591315,372591315,src/init.cpp
jamesob,2020-01-29 19:41:52,"I don't think `InitializeChainstate` allows this because of this check: https://github.com/jamesob/bitcoin/blob/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62/src/validation.cpp#L5164-L5170\n\nI wrote it to not allow the initialization of more than one ""kind"" of chainstate.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591998,372591998,src/validation.h
jamesob,2020-01-29 19:43:09,"Yeah, it's just because `VerifyDB` at the moment makes explicit reference to `ChainActive`: https://github.com/jamesob/bitcoin/blob/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62/src/validation.cpp#L4224-L4234",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372592637,372592637,src/init.cpp
jamesob,2020-01-29 19:44:41,"Yeah, this was churn from when I was reverting the inline cs_main locking I was initially doing for the last commit. Reverted, good catch. \n\nI'm for your ActivateBestChain suggestions, but would prefer to do them in a follow-up PR to limit the scope of this one. If anyone thinks that'd be best done here, I'm happy to.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372593371,372593371,src/validation.cpp
jamesob,2020-01-29 19:46:10,"Ah, thanks for the patch. Fixed.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372594059,372594059,src/test/util/setup_common.cpp
ariard,2020-02-28 21:40:45,"68998ec\n\nMaybe precise what happens at chainstates intersection. Are they merged altogether, drop away, ... ?\n\nAlso, is this targeted to be part of libconsensus ? If yes, maybe add same design requirements than CChainState, ""Eventually, the API here is targeted at being exposed externally as a consumable libconsensus library, ...""",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385935195,385935195,src/validation.h
ariard,2020-02-28 22:46:59,"f349e96\n\nStill I would prefer only iterate for `VerifyDB` because multiple log/ui messages may be confusing and adding `failed_verification`, it's more control flow. Okay for now, but eager to clean a bit this part aroud parameterize of `VerifyDB`",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385957152,385957152,src/init.cpp
ariard,2020-02-28 23:05:20,"abfc152\n\nIf understand well the new lock model, `g_chainman` content is under `cs_main` but not `CChainState`. If yes, why some `GetAll` access in init.cpp don't use lock for access ?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962192,385962192,src/validation.h
ariard,2020-02-28 23:07:36,"68998ec\n\nAssert `m_snapshot_chainstate` == `m_active_chainstate` ?",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962760,385962760,src/validation.cpp
fjahr,2020-03-17 16:00:08,"nit: Do you anticipate more than one snapshot to be present? From the rest of the code it seems to me that this will not be the case. Then I think naming the db just ""snapshot"" or so is more intuitive.",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393788717,393788717,src/validation.cpp
fjahr,2020-03-17 16:29:07,typo: `chaintates`,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393809388,393809388,src/validation.cpp
fjahr,2020-03-17 18:07:33,nit: That comment is still relevant to the code below but because of the empty line it seems detached.,https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393873473,393873473,src/init.cpp
ariard,2020-03-19 17:39:21,"c9017ce\n\nIs this LOCK really necessary given we call `::ChainstateActive()` just after ? Doesn't hurt because we use recursive_mutex but still..",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r395205730,395205730,src/validation.cpp
ryanofsky,2020-03-25 22:08:15,"re: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962192\n\n> If understand well the new lock model, `g_chainman` content is under `cs_main` but not `CChainState`. If yes, why some `GetAll` access in init.cpp don't use lock for access ?\n\nI don't think this is true. Maybe it was resolved? You can add EXCLUSIVE_LOCKS_REQUIRED(cs_main) to the GetAll declaration, and it will only ",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r398200231,398200231,src/validation.h
ryanofsky,2020-03-25 22:21:33,"re: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r395205730\n\n> Is this LOCK really necessary given we call `::ChainstateActive()` just after ? Doesn't hurt because we use recursive_mutex but still..\n\nAgree it's definitely not necessary (but harmless)",https://github.com/bitcoin/bitcoin/pull/17737#discussion_r398206011,398206011,src/validation.cpp
