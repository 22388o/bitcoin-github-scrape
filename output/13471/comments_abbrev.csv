DrahtBot,2018-06-14T20:07:01Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13386 (SHA256 implementations based on Intel SHA Extensions by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/13471#issuecomment-397422207,397422207,
theuni,2018-06-15T21:15:00Z,utACK 14a2ccccbc27bd136005c8b057809c8663418e4a,https://github.com/bitcoin/bitcoin/pull/13471#issuecomment-397744153,397744153,
Empact,2018-06-19T01:05:41Z,utACK 32d153f - note I did not separately research and validate the bit checking,https://github.com/bitcoin/bitcoin/pull/13471#issuecomment-398241917,398241917,
Empact,2018-06-14T21:10:28Z,Possible to use `_xgetbv` intrinsic here? https://software.intel.com/en-us/node/694243,https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195572308,195572308,src/crypto/sha256.cpp
sipa,2018-06-14T21:11:44Z,"I tried that, but it doesn't seem GCC has that.",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195572633,195572633,src/crypto/sha256.cpp
Empact,2018-06-14T21:14:12Z,"How about something like this?:\n```\n#ifndef _xgetbv\nstatic inline unsigned long long _xgetbv(unsigned int index){\n  unsigned int eax, edx;\n  __asm__ __volatile__(""xgetbv"" : ""=a""(eax), ""=d""(edx) : ""c""(index));\n  return ((unsigned long long)edx << 32) | eax;\n}\n#endif\n```\nhttps://lists.macports.org/pipermail/macports-dev/2013-January/021782.html",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195573283,195573283,src/crypto/sha256.cpp
sipa,2018-06-14T21:21:26Z,"It's the same thing, just specialized for AVX (which AFAIK is the only thing it's useful for entirely).",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195575244,195575244,src/crypto/sha256.cpp
ken2812221,2018-06-14T21:25:07Z,"From gcc code I don't think `_xgetbv` is a mcro\nhttps://github.com/gcc-mirror/gcc/commit/154452f45aad4bfe7a1f719c65cd26837f416a48#diff-547c091edc6345b286585818a4ae7528R60",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195576227,195576227,src/crypto/sha256.cpp
sipa,2018-06-14T22:41:44Z,"Access to `_xgetbv` requires compiling with `-mxsave`, and you can't run any `-mxsave` code without verifying you're running on a CPU which supports XSAVE. There are a few options around this:\n* Add a separate libbitcoin_crypto_xsave.a library, with just the `AVXEnabled()` function (seems a lot of effort)\n* Put `AVXEnabled()` in libbitcoin_crypto_avx2.a (which would then be compiled with `-mav",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195592817,195592817,src/crypto/sha256.cpp
Empact,2018-06-14T23:18:55Z,Agreed,https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195598850,195598850,src/crypto/sha256.cpp
theuni,2018-06-15T21:14:46Z,Does this need ```#ifdef USE_ASM``` ? I'm really not even sure what the option is intended to mean anymore.,https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195863575,195863575,src/crypto/sha256.cpp
sipa,2018-06-15T23:24:08Z,It's within a `#if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__) || defined(__i386__))` block.,https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195882699,195882699,src/crypto/sha256.cpp
theuni,2018-06-16T00:04:34Z,"Indeed, nevermind.",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195886181,195886181,src/crypto/sha256.cpp
Empact,2018-06-17T20:55:37Z,"nit: Presuming this line is to avoid an unused function warning, how about instead either:\n* Commenting as to its purpose\n* Defining it in an `#else` block below\n* Only defining `AVXEnabled` when `defined(ENABLE_AVX2) && !defined(BUILD_BITCOIN_INTERNAL)`?",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r195941092,195941092,src/crypto/sha256.cpp
laanwj,2018-06-18T15:45:17Z,Could be `static`,https://github.com/bitcoin/bitcoin/pull/13471#discussion_r196127966,196127966,src/crypto/sha256.cpp
sipa,2018-06-18T15:49:56Z,It's inside an anonymous namespace.,https://github.com/bitcoin/bitcoin/pull/13471#discussion_r196129528,196129528,src/crypto/sha256.cpp
sipa,2018-06-18T21:57:11Z,"I added a comment.\n\nI'd rather not add logic around the compilation of the function itself, as it may grow increasingly complex in the future (if we also have avx1 code, for example). It's in an anonymous namespace anyway, so if it's unused, the compiler will drop it.",https://github.com/bitcoin/bitcoin/pull/13471#discussion_r196238489,196238489,src/crypto/sha256.cpp
