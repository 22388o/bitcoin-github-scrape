[
  {
    "sha": "facb959747660daac95016c55ac764bea77bdbe9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNiOTU5NzQ3NjYwZGFhYzk1MDE2YzU1YWM3NjRiZWE3N2JkYmU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-12T17:12:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-12T17:13:20Z"
      },
      "message": "Set startup time for uptime at the beginning of AppInitParameterInteraction\n\nStop initializing nStartupTime to system time. This is needed for many\nthings:\n\n* It is making it harder to assert that fuzzing only uses mocked time.\n* When using mocked time in the program arguments, nStartupTime will be\n  incorrectly initialized to system time.",
      "tree": {
        "sha": "f6f4133b012f1beec9d723fddfeaa60b268c8a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6f4133b012f1beec9d723fddfeaa60b268c8a7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facb959747660daac95016c55ac764bea77bdbe9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgvcwwAi/pstqwxS1XA7afU0U//xErbB+i+VDh4RmycwuErVhCEUjZHgPTI842u\nuZCUe9eUrEusm4AuluIkIsfTlycD7wZ1MpgPlbR2H+hEdLP7opRliBrzTsdbTG07\nkORndChDTEQ69LriGUZH7fMy+da2z+ci89YP3Op/uhjmb5tcOkorrny7IypZyHd+\nI1bMcY+3cEfjNdDa9EWukqMDL9ydjCuFayQhyvFQba/iAFPn598588zb5MUbTdD+\nEqqftI/5QTBFvsDKus5nw/VAvzQMe4/ro6M2FKE1fbIe5FiARISTep5KkzBNDvA1\nTfraKufhY32RCGHwBmnz12uRm5m2R2dHhQseC38UkGJtkNLDS4P6QX1gYTnQe81d\nkcCVeOTo8ZxFQ3hr3D5eT1aoxY244aIVLBKUaCMpnQjTZpK8JzO2cFS0rrwriST2\nnwr3U5ZhnH2ohlY/0idA7Xt4gntzzDiKERp3HSpABzmhhpioXKGIrLB1QtjEkojm\nbv+X24VI\n=D2kL\n-----END PGP SIGNATURE-----",
        "payload": "tree f6f4133b012f1beec9d723fddfeaa60b268c8a7b\nparent e9c037ba64dd5b073fccf059ef75db1c97abd0bd\nauthor MarcoFalke <falke.marco@gmail.com> 1613149954 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1613150000 +0100\n\nSet startup time for uptime at the beginning of AppInitParameterInteraction\n\nStop initializing nStartupTime to system time. This is needed for many\nthings:\n\n* It is making it harder to assert that fuzzing only uses mocked time.\n* When using mocked time in the program arguments, nStartupTime will be\n  incorrectly initialized to system time.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facb959747660daac95016c55ac764bea77bdbe9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facb959747660daac95016c55ac764bea77bdbe9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facb959747660daac95016c55ac764bea77bdbe9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9c037ba64dd5b073fccf059ef75db1c97abd0bd"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "db2f3f42e77b5c44eceb1f08f0770c36a2e0e3dd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb959747660daac95016c55ac764bea77bdbe9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb959747660daac95016c55ac764bea77bdbe9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=facb959747660daac95016c55ac764bea77bdbe9",
        "patch": "@@ -966,6 +966,10 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // also see: InitParameterInteraction()\n \n+    // Option to startup with mocktime set (used for regression testing):\n+    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetStartupTime();\n+\n     // Error if network-specific options (-addnode, -connect, etc) are\n     // specified in default section of config file, but not overridden\n     // on the command line or in this network's section of the config file.\n@@ -1186,9 +1190,6 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n-    // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n-\n     if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n "
      },
      {
        "sha": "05eaa54c17a49bc4f11cf06a977f3062526a8ff7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb959747660daac95016c55ac764bea77bdbe9/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb959747660daac95016c55ac764bea77bdbe9/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=facb959747660daac95016c55ac764bea77bdbe9",
        "patch": "@@ -71,7 +71,7 @@\n #include <univalue.h>\n \n // Application startup time (used for uptime calculation)\n-const int64_t nStartupTime = GetTime();\n+std::optional<std::chrono::seconds> g_startup_time{};\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_SETTINGS_FILENAME = \"settings.json\";\n@@ -1353,7 +1353,12 @@ std::string CopyrightHolders(const std::string& strPrefix)\n // Obtain the application startup time (used for uptime calculation)\n int64_t GetStartupTime()\n {\n-    return nStartupTime;\n+    return count_seconds(*Assert(g_startup_time));\n+}\n+void SetStartupTime()\n+{\n+    Assert(!g_startup_time);\n+    g_startup_time = GetTime<std::chrono::seconds>();\n }\n \n fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)"
      },
      {
        "sha": "3dd592453031b7f498b8bb8023d3c1e4ae04623b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facb959747660daac95016c55ac764bea77bdbe9/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facb959747660daac95016c55ac764bea77bdbe9/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=facb959747660daac95016c55ac764bea77bdbe9",
        "patch": "@@ -39,6 +39,7 @@ class UniValue;\n \n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();\n+void SetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n extern const char * const BITCOIN_SETTINGS_FILENAME;"
      }
    ]
  },
  {
    "sha": "fa1025d33869f77977f86befa6e666b4e880ae29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEwMjVkMzM4NjlmNzc5NzdmODZiZWZhNmU2NjZiNGU4ODBhZTI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-12T17:29:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-12T17:14:59Z"
      },
      "message": "test: Use mocktime to speed up test_seed_peers",
      "tree": {
        "sha": "241f6f1d6e7e1a7afc99148f0abc41c60e5108b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/241f6f1d6e7e1a7afc99148f0abc41c60e5108b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1025d33869f77977f86befa6e666b4e880ae29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj9pwwAmIoGrN8hLnhD4523xfiStyT74bzH2Cx47AIa7HUJyMNTydDJ+VvZ4Q6g\nh1AEWtdEp43TkG9ylDCvSxRTQmJdM4i92UQVBBiwt9Bu/jCS0lBUNKPlOnP6MuWW\n2Q/9Hfi9GyZFW+Rc00VKCt/s4t/J4eFKK/JOEv2rv4Rvds1xdog4i+awRuloK33P\ngXNhOfiPVJCdqWRMjgeuQjzbAIkRjTO1OwMeAYPRi4c1OVFfQnsEzkgkrfCBp8N1\nVEggiIVNxke9/ostcam4dM8O+VEbbPQfwOac9giLTXGxi5EipPzYa07gmDGpThWY\nscApuhLrqy4PcYxnh9EU8DlVhbCNkECU0OBkJsDPq4MylXHBegvY5M0YW7ovGsVQ\n0yHJAKmXhyuGzZ37HQlxjtyAhaveacLYKlN5KPtwi7/NDltaGhvtjnkffUDfz7eu\n89u5Q7iLYil0GoS4NqL44vvnF0jzKMiVMco0051AfHD/CUeZPyVisLycXesMffY1\n0c1xRoE0\n=cLga\n-----END PGP SIGNATURE-----",
        "payload": "tree 241f6f1d6e7e1a7afc99148f0abc41c60e5108b4\nparent facb959747660daac95016c55ac764bea77bdbe9\nauthor MarcoFalke <falke.marco@gmail.com> 1613150995 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1613150099 +0100\n\ntest: Use mocktime to speed up test_seed_peers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1025d33869f77977f86befa6e666b4e880ae29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1025d33869f77977f86befa6e666b4e880ae29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1025d33869f77977f86befa6e666b4e880ae29/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "facb959747660daac95016c55ac764bea77bdbe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facb959747660daac95016c55ac764bea77bdbe9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/facb959747660daac95016c55ac764bea77bdbe9"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c2e7ca0301dd15c1dc60f5d961cf3355da7cc00c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1025d33869f77977f86befa6e666b4e880ae29/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1025d33869f77977f86befa6e666b4e880ae29/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa1025d33869f77977f86befa6e666b4e880ae29",
        "patch": "@@ -1813,7 +1813,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LOCK2(m_addr_fetches_mutex, cs_vAddedNodes);\n                 if (m_addr_fetches.empty() && vAddedNodes.empty()) {\n                     add_fixed_seeds_now = true;\n-                    LogPrintf(\"Adding fixed seeds as -dnsseed=0, -addnode is not provided and and all -seednode(s) attempted\\n\");\n+                    LogPrintf(\"Adding fixed seeds as -dnsseed=0, -addnode is not provided and all -seednode(s) attempted\\n\");\n                 }\n             }\n "
      },
      {
        "sha": "e2fe6c99610f9b5879fdd387988369ec9b4e811f",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1025d33869f77977f86befa6e666b4e880ae29/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1025d33869f77977f86befa6e666b4e880ae29/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=fa1025d33869f77977f86befa6e666b4e880ae29",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n \n import os\n-import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework import util\n@@ -149,60 +148,61 @@ def test_networkactive(self):\n         self.stop_node(0)\n \n     def test_seed_peers(self):\n-        self.log.info('Test seed peers, this will take about 2 minutes')\n+        self.log.info('Test seed peers')\n         default_data_dir = self.nodes[0].datadir\n \n         # No peers.dat exists and -dnsseed=1\n         # We expect the node will use DNS Seeds, but Regtest mode has 0 DNS seeds\n         # So after 60 seconds, the node should fallback to fixed seeds (this is a slow test)\n         assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n-        start = time.time()\n+        START = 1613146990\n         with self.nodes[0].assert_debug_log(expected_msgs=[\n                 \"Loaded 0 addresses from peers.dat\",\n                 \"0 addresses found from DNS seeds\",\n-                \"Adding fixed seeds as 60 seconds have passed and addrman is empty\"], timeout=80):\n-            self.start_node(0, extra_args=['-dnsseed=1'])\n-        assert time.time() - start >= 60\n+                \"Adding fixed seeds as 60 seconds have passed and addrman is empty\",\n+        ]):\n+            self.start_node(0, extra_args=['-dnsseed=1', f'-mocktime={START}'])\n+            self.nodes[0].setmocktime(START + 61)\n+        util.assert_equal(self.nodes[0].uptime(), 61)\n         self.stop_node(0)\n \n         # No peers.dat exists and -dnsseed=0\n         # We expect the node will fallback immediately to fixed seeds\n         assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n-        start = time.time()\n         with self.nodes[0].assert_debug_log(expected_msgs=[\n                 \"Loaded 0 addresses from peers.dat\",\n                 \"DNS seeding disabled\",\n-                \"Adding fixed seeds as -dnsseed=0, -addnode is not provided and and all -seednode(s) attempted\\n\"]):\n-            self.start_node(0, extra_args=['-dnsseed=0'])\n-        assert time.time() - start < 60\n+                \"Adding fixed seeds as -dnsseed=0, -addnode is not provided and all -seednode(s) attempted\\n\",\n+        ]):\n+            self.start_node(0, extra_args=['-dnsseed=0', f'-mocktime={START}'])\n+        util.assert_equal(self.nodes[0].uptime(), 0)\n         self.stop_node(0)\n \n         # No peers.dat exists and dns seeds are disabled.\n         # We expect the node will not add fixed seeds when explicitly disabled.\n         assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n-        start = time.time()\n         with self.nodes[0].assert_debug_log(expected_msgs=[\n                 \"Loaded 0 addresses from peers.dat\",\n                 \"DNS seeding disabled\",\n-                \"Fixed seeds are disabled\"]):\n-            self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=0'])\n-        assert time.time() - start < 60\n+                \"Fixed seeds are disabled\",\n+        ]):\n+            self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=0', f'-mocktime={START}'])\n+        util.assert_equal(self.nodes[0].uptime(), 0)\n         self.stop_node(0)\n \n         # No peers.dat exists and -dnsseed=0, but a -addnode is provided\n         # We expect the node will allow 60 seconds prior to using fixed seeds\n         assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n-        start = time.time()\n         with self.nodes[0].assert_debug_log(expected_msgs=[\n                 \"Loaded 0 addresses from peers.dat\",\n                 \"DNS seeding disabled\",\n-                \"Adding fixed seeds as 60 seconds have passed and addrman is empty\"],\n-                timeout=80):\n-            self.start_node(0, extra_args=['-dnsseed=0', '-addnode=fakenodeaddr'])\n-        assert time.time() - start >= 60\n+                \"Adding fixed seeds as 60 seconds have passed and addrman is empty\",\n+        ]):\n+            self.start_node(0, extra_args=['-dnsseed=0', '-addnode=fakenodeaddr', f'-mocktime={START}'])\n+            self.nodes[0].setmocktime(START + 61)\n+        util.assert_equal(self.nodes[0].uptime(), 61)\n         self.stop_node(0)\n \n-\n     def run_test(self):\n         self.stop_node(0)\n "
      }
    ]
  }
]