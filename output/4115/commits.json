[
  {
    "sha": "e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjdjNDExMGQ5YzQ3ZDMwZmVkNGI5NDA4MTNjOWM4YjgyYTk3ZmJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-01T10:07:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-01T10:15:36Z"
      },
      "message": "Remove build-time no-IPv6 setting\n\nThe year is 2014. All supported operating systems have IPv6 support,\nmost certainly at build time (this doesn't mean that IPv6 is configured,\nof course).\n\nIf noone is exercising the functionality to disable it, that means it\ndoesn't get tested, and IMO it's better to get rid of it.\n\n(it's also not used consistently in RPC/boost and Net code...)",
      "tree": {
        "sha": "288e02bd1addb587a17cfc2c350e74d5545bb56f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/288e02bd1addb587a17cfc2c350e74d5545bb56f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "426dc16f7b74d5dc91a947bb22acb7a3a414bb8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/426dc16f7b74d5dc91a947bb22acb7a3a414bb8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/426dc16f7b74d5dc91a947bb22acb7a3a414bb8f"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 0,
      "deletions": 101
    },
    "files": [
      {
        "sha": "6a8afe6e44526c1042835cc6dc85a47ae084b5d0",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
        "patch": "@@ -62,13 +62,6 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n-dnl enable ipv6 support\n-AC_ARG_ENABLE([ipv6],\n-  [AS_HELP_STRING([--enable-ipv6],\n-  [enable ipv6 (default is yes)])],\n-  [use_ipv6=$enableval],\n-  [use_ipv6=yes])\n-\n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n     [use_tests=$enableval],\n@@ -560,27 +553,6 @@ AC_MSG_RESULT($build_bitcoin_cli)\n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n \n-\n-if test x$use_ipv6 = xyes; then\n-  dnl Check for ipv6 build requirements\n-  AC_MSG_CHECKING(for operating system IPv6 support)\n-  AC_TRY_LINK([\n-  #if defined(_WINDOWS)\n-  #include <winsock2.h>\n-  #else\n-  #include <sys/types.h>\n-  #include <sys/socket.h>\n-  #include <netinet/in.h>\n-  #endif\n-  ],[\n-  #if !defined(_WINDOWS)\n-  struct in6_addr ipv6Addr;\n-  struct sockaddr_in6 addr;\n-  #endif\n-  int temp = socket(AF_INET6, SOCK_STREAM, 0);],\n-  [AC_MSG_RESULT(yes); have_ipv6=yes; AC_DEFINE(HAVE_IPV6, 1, [Define this symbol if you have operating system IPv6 support])],\n-  [AC_MSG_RESULT(no)]; have_ipv6=no)\n-fi\n AC_LANG_POP\n \n if test \"x$use_ccache\" != \"xno\"; then\n@@ -609,22 +581,6 @@ else\n   AC_MSG_RESULT(no)\n fi\n \n-dnl enable ipv6 support\n-AC_MSG_CHECKING([whether to build with support for IPv6])\n-if test x$have_ipv6 = xno; then\n-  if test x$use_ipv6 = xyes; then\n-     AC_MSG_ERROR([IPv6 requested, but cannot be built. use --disable-ipv6])\n-  fi\n-  AC_MSG_RESULT(no)\n-else\n-  if test x$use_ipv6 = xyes; then\n-      AC_MSG_RESULT(yes)\n-      AC_DEFINE([USE_IPV6],[1],[Define if IPv6 support should be compiled in])\n-  else\n-      AC_MSG_RESULT(no)\n-  fi\n-fi\n-\n dnl enable upnp support\n AC_MSG_CHECKING([whether to build with support for UPnP])\n if test x$have_miniupnpc = xno; then\n@@ -730,7 +686,6 @@ AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n \n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n-AC_SUBST(USE_IPV6)\n AC_SUBST(INCLUDES)\n AC_SUBST(BOOST_LIBS)\n AC_SUBST(TESTDEFS)"
      },
      {
        "sha": "f990b69c8484f83fde2831f459bf7a88e8e5160b",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
        "patch": "@@ -32,10 +32,6 @@ turned off by default.  See the configure options for upnp behavior desired:\n \t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n \t--enable-upnp-default    UPnP support turned on by default at runtime\n \n-IPv6 support may be disabled by setting:\n-\n-\t--disable-ipv6           Disable IPv6 support\n-\n Licenses of statically linked libraries:\n  Berkeley DB   New BSD license with additional requirement that linked\n                software must be free open source"
      },
      {
        "sha": "c33a3f8f55740282621895b78af56b3d7dbcaf33",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
        "patch": "@@ -689,12 +689,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 SetLimited(net);\n         }\n     }\n-#if defined(USE_IPV6)\n-#if ! USE_IPV6\n-    else\n-        SetLimited(NET_IPV6);\n-#endif\n-#endif\n \n     CService addrProxy;\n     bool fProxy = false;\n@@ -706,10 +700,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (!IsLimited(NET_IPV4))\n             SetProxy(NET_IPV4, addrProxy, nSocksVersion);\n         if (nSocksVersion > 4) {\n-#ifdef USE_IPV6\n             if (!IsLimited(NET_IPV6))\n                 SetProxy(NET_IPV6, addrProxy, nSocksVersion);\n-#endif\n             SetNameProxy(addrProxy, nSocksVersion);\n         }\n         fProxy = true;\n@@ -751,9 +743,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         else {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n-#ifdef USE_IPV6\n             fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n-#endif\n             fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n         }\n         if (!fBound)"
      },
      {
        "sha": "a73ff73ebd4041b21dc9646825cdb587b8c7da2d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
        "patch": "@@ -917,11 +917,7 @@ void ThreadSocketHandler()\n         BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n         if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n         {\n-#ifdef USE_IPV6\n             struct sockaddr_storage sockaddr;\n-#else\n-            struct sockaddr sockaddr;\n-#endif\n             socklen_t len = sizeof(sockaddr);\n             SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n             CAddress addr;\n@@ -1582,11 +1578,7 @@ bool BindListenPort(const CService &addrBind, string& strError)\n     int nOne = 1;\n \n     // Create socket for listening for incoming connections\n-#ifdef USE_IPV6\n     struct sockaddr_storage sockaddr;\n-#else\n-    struct sockaddr sockaddr;\n-#endif\n     socklen_t len = sizeof(sockaddr);\n     if (!addrBind.GetSockAddr((struct sockaddr*)&sockaddr, &len))\n     {\n@@ -1627,7 +1619,6 @@ bool BindListenPort(const CService &addrBind, string& strError)\n         return false;\n     }\n \n-#ifdef USE_IPV6\n     // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {\n@@ -1645,7 +1636,6 @@ bool BindListenPort(const CService &addrBind, string& strError)\n         setsockopt(hListenSocket, IPPROTO_IPV6, nParameterId, (const char*)&nProtLevel, sizeof(int));\n #endif\n     }\n-#endif\n \n     if (::bind(hListenSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n@@ -1712,15 +1702,13 @@ void static Discover(boost::thread_group& threadGroup)\n                 if (AddLocal(addr, LOCAL_IF))\n                     LogPrintf(\"IPv4 %s: %s\\n\", ifa->ifa_name, addr.ToString());\n             }\n-#ifdef USE_IPV6\n             else if (ifa->ifa_addr->sa_family == AF_INET6)\n             {\n                 struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);\n                 CNetAddr addr(s6->sin6_addr);\n                 if (AddLocal(addr, LOCAL_IF))\n                     LogPrintf(\"IPv6 %s: %s\\n\", ifa->ifa_name, addr.ToString());\n             }\n-#endif\n         }\n         freeifaddrs(myaddrs);\n     }"
      },
      {
        "sha": "ec275f738cea0fd0a5d4896f8eb1ec4b77995704",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
        "patch": "@@ -78,11 +78,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n \n     aiHint.ai_socktype = SOCK_STREAM;\n     aiHint.ai_protocol = IPPROTO_TCP;\n-#ifdef USE_IPV6\n     aiHint.ai_family = AF_UNSPEC;\n-#else\n-    aiHint.ai_family = AF_INET;\n-#endif\n #ifdef WIN32\n     aiHint.ai_flags = fAllowLookup ? 0 : AI_NUMERICHOST;\n #else\n@@ -102,13 +98,11 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n             vIP.push_back(CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr));\n         }\n \n-#ifdef USE_IPV6\n         if (aiTrav->ai_family == AF_INET6)\n         {\n             assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n             vIP.push_back(CNetAddr(((struct sockaddr_in6*)(aiTrav->ai_addr))->sin6_addr));\n         }\n-#endif\n \n         aiTrav = aiTrav->ai_next;\n     }\n@@ -321,11 +315,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n {\n     hSocketRet = INVALID_SOCKET;\n \n-#ifdef USE_IPV6\n     struct sockaddr_storage sockaddr;\n-#else\n-    struct sockaddr sockaddr;\n-#endif\n     socklen_t len = sizeof(sockaddr);\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n         LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n@@ -585,12 +575,10 @@ CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n     memcpy(ip+12, &ipv4Addr, 4);\n }\n \n-#ifdef USE_IPV6\n CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)\n {\n     memcpy(ip, &ipv6Addr, 16);\n }\n-#endif\n \n CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)\n {\n@@ -764,11 +752,7 @@ std::string CNetAddr::ToStringIP() const\n     if (IsTor())\n         return EncodeBase32(&ip[6], 10) + \".onion\";\n     CService serv(*this, 0);\n-#ifdef USE_IPV6\n     struct sockaddr_storage sockaddr;\n-#else\n-    struct sockaddr sockaddr;\n-#endif\n     socklen_t socklen = sizeof(sockaddr);\n     if (serv.GetSockAddr((struct sockaddr*)&sockaddr, &socklen)) {\n         char name[1025] = \"\";\n@@ -813,13 +797,11 @@ bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const\n     return true;\n }\n \n-#ifdef USE_IPV6\n bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const\n {\n     memcpy(pipv6Addr, ip, 16);\n     return true;\n }\n-#endif\n \n // get canonical identifier of an address' group\n // no two connections will be attempted to addresses with the same group\n@@ -993,35 +975,29 @@ CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNet\n {\n }\n \n-#ifdef USE_IPV6\n CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)\n {\n }\n-#endif\n \n CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))\n {\n     assert(addr.sin_family == AF_INET);\n }\n \n-#ifdef USE_IPV6\n CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr), port(ntohs(addr.sin6_port))\n {\n    assert(addr.sin6_family == AF_INET6);\n }\n-#endif\n \n bool CService::SetSockAddr(const struct sockaddr *paddr)\n {\n     switch (paddr->sa_family) {\n     case AF_INET:\n         *this = CService(*(const struct sockaddr_in*)paddr);\n         return true;\n-#ifdef USE_IPV6\n     case AF_INET6:\n         *this = CService(*(const struct sockaddr_in6*)paddr);\n         return true;\n-#endif\n     default:\n         return false;\n     }\n@@ -1093,7 +1069,6 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n         paddrin->sin_port = htons(port);\n         return true;\n     }\n-#ifdef USE_IPV6\n     if (IsIPv6()) {\n         if (*addrlen < (socklen_t)sizeof(struct sockaddr_in6))\n             return false;\n@@ -1106,7 +1081,6 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n         paddrin6->sin6_port = htons(port);\n         return true;\n     }\n-#endif\n     return false;\n }\n "
      },
      {
        "sha": "95b1795767524040138dbfbfc842865e0e8629c1",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e27c4110d9c47d30fed4b940813c9c8b82a97fbd/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=e27c4110d9c47d30fed4b940813c9c8b82a97fbd",
        "patch": "@@ -77,10 +77,8 @@ class CNetAddr\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = NULL) const;\n         void print() const;\n \n-#ifdef USE_IPV6\n         CNetAddr(const struct in6_addr& pipv6Addr);\n         bool GetIn6Addr(struct in6_addr* pipv6Addr) const;\n-#endif\n \n         friend bool operator==(const CNetAddr& a, const CNetAddr& b);\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b);\n@@ -121,10 +119,8 @@ class CService : public CNetAddr\n         std::string ToStringIPPort() const;\n         void print() const;\n \n-#ifdef USE_IPV6\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n         CService(const struct sockaddr_in6& addr);\n-#endif\n \n         IMPLEMENT_SERIALIZE\n             ("
      }
    ]
  }
]