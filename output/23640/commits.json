[
  {
    "sha": "7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
    "node_id": "C_kwDOABII59oAKDdiMDRhMDY0ZjZlOGVlOWQ5M2U1YTVhZDU0ZGFiMjBiNzY5MDgzZjI",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T00:10:43Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T06:07:49Z"
      },
      "message": "Introduce wallet/rpc/util",
      "tree": {
        "sha": "c5c70fe5bf437a4f534f64b5a3b3db23680035bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5c70fe5bf437a4f534f64b5a3b3db23680035bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aef8c7cf82cff24ddd88fab0a3c5fb93de467886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef8c7cf82cff24ddd88fab0a3c5fb93de467886",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aef8c7cf82cff24ddd88fab0a3c5fb93de467886"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4a60ce8b900563919be63ced04aaa0faa0efa67e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
        "patch": "@@ -283,6 +283,7 @@ BITCOIN_CORE_H = \\\n   wallet/load.h \\\n   wallet/receive.h \\\n   wallet/rpcwallet.h \\\n+  wallet/rpc/util.h \\\n   wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/spend.h \\\n@@ -410,6 +411,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/receive.cpp \\\n   wallet/rpc/signmessage.cpp \\\n+  wallet/rpc/util.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\"
      },
      {
        "sha": "4fbe0c172c96f86033194f2f02347012082fc65b",
        "filename": "src/wallet/rpc/util.cpp",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/src/wallet/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/src/wallet/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/util.cpp?ref=7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
        "patch": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/rpc/util.h>"
      },
      {
        "sha": "5987c60d07d0ef52c10f00629bacae0b0d6f01c1",
        "filename": "src/wallet/rpc/util.h",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/src/wallet/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2/src/wallet/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/util.h?ref=7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2017-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_RPC_UTIL_H\n+#define BITCOIN_WALLET_RPC_UTIL_H\n+\n+\n+\n+#endif // BITCOIN_WALLET_RPC_UTIL_H"
      }
    ]
  },
  {
    "sha": "ff945e553affbb7e25da1257a0dd47e413ec5164",
    "node_id": "C_kwDOABII59oAKGZmOTQ1ZTU1M2FmZmJiN2UyNWRhMTI1N2EwZGQ0N2U0MTNlYzUxNjQ",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T06:20:33Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T06:22:38Z"
      },
      "message": "MOVEONLY: Move utility functions from rpcwallet to wallet/rpc/util",
      "tree": {
        "sha": "6293d5aa59548ee9573a4a577989cec260c5460b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6293d5aa59548ee9573a4a577989cec260c5460b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff945e553affbb7e25da1257a0dd47e413ec5164",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff945e553affbb7e25da1257a0dd47e413ec5164",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff945e553affbb7e25da1257a0dd47e413ec5164",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff945e553affbb7e25da1257a0dd47e413ec5164/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b04a064f6e8ee9d93e5a5ad54dab20b769083f2"
      }
    ],
    "stats": {
      "total": 287,
      "additions": 148,
      "deletions": 139
    },
    "files": [
      {
        "sha": "bb8d7fc13fe605dd7f4175f49414d1e538e131b5",
        "filename": "src/wallet/rpc/signmessage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpc/signmessage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpc/signmessage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/signmessage.cpp?ref=ff945e553affbb7e25da1257a0dd47e413ec5164",
        "patch": "@@ -5,7 +5,7 @@\n #include <key_io.h>\n #include <rpc/util.h>\n #include <util/message.h>\n-#include <wallet/rpcwallet.h>\n+#include <wallet/rpc/util.h>\n #include <wallet/wallet.h>\n \n #include <univalue.h>"
      },
      {
        "sha": "b926bfc75fd4daa152ca8f16f92d31578f97bbfd",
        "filename": "src/wallet/rpc/util.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/util.cpp?ref=ff945e553affbb7e25da1257a0dd47e413ec5164",
        "patch": "@@ -3,3 +3,120 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <wallet/rpc/util.h>\n+\n+#include <rpc/util.h>\n+#include <util/url.h>\n+#include <wallet/context.h>\n+#include <wallet/wallet.h>\n+\n+#include <univalue.h>\n+\n+static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n+const std::string HELP_REQUIRING_PASSPHRASE{\"\\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\\n\"};\n+\n+bool GetAvoidReuseFlag(const CWallet& wallet, const UniValue& param) {\n+    bool can_avoid_reuse = wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n+    bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n+\n+    if (avoid_reuse && !can_avoid_reuse) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"wallet does not have the \\\"avoid reuse\\\" feature enabled\");\n+    }\n+\n+    return avoid_reuse;\n+}\n+\n+/** Used by RPC commands that have an include_watchonly parameter.\n+ *  We default to true for watchonly wallets if include_watchonly isn't\n+ *  explicitly set.\n+ */\n+bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& wallet)\n+{\n+    if (include_watchonly.isNull()) {\n+        // if include_watchonly isn't explicitly set, then check if we have a watchonly wallet\n+        return wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    }\n+\n+    // otherwise return whatever include_watchonly was set to\n+    return include_watchonly.get_bool();\n+}\n+\n+bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)\n+{\n+    if (URL_DECODE && request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n+        // wallet endpoint was used\n+        wallet_name = URL_DECODE(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n+        return true;\n+    }\n+    return false;\n+}\n+\n+std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n+{\n+    CHECK_NONFATAL(request.mode == JSONRPCRequest::EXECUTE);\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    std::string wallet_name;\n+    if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n+        const std::shared_ptr<CWallet> pwallet = GetWallet(context, wallet_name);\n+        if (!pwallet) throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n+        return pwallet;\n+    }\n+\n+    std::vector<std::shared_ptr<CWallet>> wallets = GetWallets(context);\n+    if (wallets.size() == 1) {\n+        return wallets[0];\n+    }\n+\n+    if (wallets.empty()) {\n+        throw JSONRPCError(\n+            RPC_WALLET_NOT_FOUND, \"No wallet is loaded. Load a wallet using loadwallet or create a new one with createwallet. (Note: A default wallet is no longer automatically created)\");\n+    }\n+    throw JSONRPCError(RPC_WALLET_NOT_SPECIFIED,\n+        \"Wallet file not specified (must request wallet RPC through /wallet/<filename> uri-path).\");\n+}\n+\n+void EnsureWalletIsUnlocked(const CWallet& wallet)\n+{\n+    if (wallet.IsLocked()) {\n+        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+    }\n+}\n+\n+WalletContext& EnsureWalletContext(const std::any& context)\n+{\n+    auto wallet_context = util::AnyPtr<WalletContext>(context);\n+    if (!wallet_context) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet context not found\");\n+    }\n+    return *wallet_context;\n+}\n+\n+// also_create should only be set to true only when the RPC is expected to add things to a blank wallet and make it no longer blank\n+LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create)\n+{\n+    LegacyScriptPubKeyMan* spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    if (!spk_man && also_create) {\n+        spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n+    }\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+    return *spk_man;\n+}\n+\n+const LegacyScriptPubKeyMan& EnsureConstLegacyScriptPubKeyMan(const CWallet& wallet)\n+{\n+    const LegacyScriptPubKeyMan* spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n+    }\n+    return *spk_man;\n+}\n+\n+std::string LabelFromValue(const UniValue& value)\n+{\n+    std::string label = value.get_str();\n+    if (label == \"*\")\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, \"Invalid label name\");\n+    return label;\n+}"
      },
      {
        "sha": "a493a80a748594687c24ce09583f1cae26cbc25c",
        "filename": "src/wallet/rpc/util.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/util.h?ref=ff945e553affbb7e25da1257a0dd47e413ec5164",
        "patch": "@@ -5,6 +5,34 @@\n #ifndef BITCOIN_WALLET_RPC_UTIL_H\n #define BITCOIN_WALLET_RPC_UTIL_H\n \n+#include <any>\n+#include <memory>\n+#include <string>\n \n+class CWallet;\n+class JSONRPCRequest;\n+class LegacyScriptPubKeyMan;\n+class UniValue;\n+struct WalletContext;\n+\n+extern const std::string HELP_REQUIRING_PASSPHRASE;\n+\n+/**\n+ * Figures out what wallet, if any, to use for a JSONRPCRequest.\n+ *\n+ * @param[in] request JSONRPCRequest that wishes to access a wallet\n+ * @return nullptr if no wallet should be used, or a pointer to the CWallet\n+ */\n+std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n+bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name);\n+\n+void EnsureWalletIsUnlocked(const CWallet&);\n+WalletContext& EnsureWalletContext(const std::any& context);\n+LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n+const LegacyScriptPubKeyMan& EnsureConstLegacyScriptPubKeyMan(const CWallet& wallet);\n+\n+bool GetAvoidReuseFlag(const CWallet& wallet, const UniValue& param);\n+bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& wallet);\n+std::string LabelFromValue(const UniValue& value);\n \n #endif // BITCOIN_WALLET_RPC_UTIL_H"
      },
      {
        "sha": "db22a19a6301b0407a16e49b3fe65c6e7d5a24ae",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ff945e553affbb7e25da1257a0dd47e413ec5164",
        "patch": "@@ -17,7 +17,7 @@\n #include <util/system.h>\n #include <util/time.h>\n #include <util/translation.h>\n-#include <wallet/rpcwallet.h>\n+#include <wallet/rpc/util.h>\n #include <wallet/wallet.h>\n \n #include <stdint.h>"
      },
      {
        "sha": "84f7462540dd5f2a1629e00118446b267ab86ad7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 110,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ff945e553affbb7e25da1257a0dd47e413ec5164",
        "patch": "@@ -32,6 +32,7 @@\n #include <wallet/load.h>\n #include <wallet/receive.h>\n #include <wallet/rpcwallet.h>\n+#include <wallet/rpc/util.h>\n #include <wallet/spend.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -46,36 +47,6 @@\n \n using interfaces::FoundBlock;\n \n-static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n-const std::string HELP_REQUIRING_PASSPHRASE{\"\\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\\n\"};\n-\n-static inline bool GetAvoidReuseFlag(const CWallet& wallet, const UniValue& param) {\n-    bool can_avoid_reuse = wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n-    bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n-\n-    if (avoid_reuse && !can_avoid_reuse) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"wallet does not have the \\\"avoid reuse\\\" feature enabled\");\n-    }\n-\n-    return avoid_reuse;\n-}\n-\n-\n-/** Used by RPC commands that have an include_watchonly parameter.\n- *  We default to true for watchonly wallets if include_watchonly isn't\n- *  explicitly set.\n- */\n-static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWallet& wallet)\n-{\n-    if (include_watchonly.isNull()) {\n-        // if include_watchonly isn't explicitly set, then check if we have a watchonly wallet\n-        return wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-    }\n-\n-    // otherwise return whatever include_watchonly was set to\n-    return include_watchonly.get_bool();\n-}\n-\n \n /** Checks if a CKey is in the given CWallet compressed or otherwise*/\n bool HaveKey(const SigningProvider& wallet, const CKey& key)\n@@ -85,79 +56,6 @@ bool HaveKey(const SigningProvider& wallet, const CKey& key)\n     return wallet.HaveKey(key.GetPubKey().GetID()) || wallet.HaveKey(key2.GetPubKey().GetID());\n }\n \n-bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)\n-{\n-    if (URL_DECODE && request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n-        // wallet endpoint was used\n-        wallet_name = URL_DECODE(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n-        return true;\n-    }\n-    return false;\n-}\n-\n-std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n-{\n-    CHECK_NONFATAL(request.mode == JSONRPCRequest::EXECUTE);\n-    WalletContext& context = EnsureWalletContext(request.context);\n-\n-    std::string wallet_name;\n-    if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n-        const std::shared_ptr<CWallet> pwallet = GetWallet(context, wallet_name);\n-        if (!pwallet) throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n-        return pwallet;\n-    }\n-\n-    std::vector<std::shared_ptr<CWallet>> wallets = GetWallets(context);\n-    if (wallets.size() == 1) {\n-        return wallets[0];\n-    }\n-\n-    if (wallets.empty()) {\n-        throw JSONRPCError(\n-            RPC_WALLET_NOT_FOUND, \"No wallet is loaded. Load a wallet using loadwallet or create a new one with createwallet. (Note: A default wallet is no longer automatically created)\");\n-    }\n-    throw JSONRPCError(RPC_WALLET_NOT_SPECIFIED,\n-        \"Wallet file not specified (must request wallet RPC through /wallet/<filename> uri-path).\");\n-}\n-\n-void EnsureWalletIsUnlocked(const CWallet& wallet)\n-{\n-    if (wallet.IsLocked()) {\n-        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n-    }\n-}\n-\n-WalletContext& EnsureWalletContext(const std::any& context)\n-{\n-    auto wallet_context = util::AnyPtr<WalletContext>(context);\n-    if (!wallet_context) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet context not found\");\n-    }\n-    return *wallet_context;\n-}\n-\n-// also_create should only be set to true only when the RPC is expected to add things to a blank wallet and make it no longer blank\n-LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create)\n-{\n-    LegacyScriptPubKeyMan* spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    if (!spk_man && also_create) {\n-        spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n-    }\n-    if (!spk_man) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n-    }\n-    return *spk_man;\n-}\n-\n-const LegacyScriptPubKeyMan& EnsureConstLegacyScriptPubKeyMan(const CWallet& wallet)\n-{\n-    const LegacyScriptPubKeyMan* spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    if (!spk_man) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n-    }\n-    return *spk_man;\n-}\n-\n static void WalletTxToJSON(const CWallet& wallet, const CWalletTx& wtx, UniValue& entry)\n {\n     interfaces::Chain& chain = wallet.chain();\n@@ -200,13 +98,6 @@ static void WalletTxToJSON(const CWallet& wallet, const CWalletTx& wtx, UniValue\n         entry.pushKV(item.first, item.second);\n }\n \n-static std::string LabelFromValue(const UniValue& value)\n-{\n-    std::string label = value.get_str();\n-    if (label == \"*\")\n-        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, \"Invalid label name\");\n-    return label;\n-}\n \n /**\n  * Update coin control with fee estimation based on the given parameters"
      },
      {
        "sha": "2c3d413cb0fe354fb7a8b51f74e4cf4f9559d72f",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff945e553affbb7e25da1257a0dd47e413ec5164/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=ff945e553affbb7e25da1257a0dd47e413ec5164",
        "patch": "@@ -7,37 +7,10 @@\n \n #include <span.h>\n \n-#include <any>\n-#include <memory>\n-#include <string>\n-#include <vector>\n-\n class CRPCCommand;\n-class CWallet;\n-class JSONRPCRequest;\n-class LegacyScriptPubKeyMan;\n-class UniValue;\n-class CTransaction;\n-struct PartiallySignedTransaction;\n-struct WalletContext;\n-\n-extern const std::string HELP_REQUIRING_PASSPHRASE;\n \n Span<const CRPCCommand> GetWalletRPCCommands();\n \n-/**\n- * Figures out what wallet, if any, to use for a JSONRPCRequest.\n- *\n- * @param[in] request JSONRPCRequest that wishes to access a wallet\n- * @return nullptr if no wallet should be used, or a pointer to the CWallet\n- */\n-std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n-\n-void EnsureWalletIsUnlocked(const CWallet&);\n-WalletContext& EnsureWalletContext(const std::any& context);\n-LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n-const LegacyScriptPubKeyMan& EnsureConstLegacyScriptPubKeyMan(const CWallet& wallet);\n-\n RPCHelpMan getaddressinfo();\n RPCHelpMan signrawtransactionwithwallet();\n #endif // BITCOIN_WALLET_RPCWALLET_H"
      }
    ]
  }
]