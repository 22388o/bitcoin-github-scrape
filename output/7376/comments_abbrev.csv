luke-jr,2016-01-18T21:38:01Z,"This needs a BIP, especially for a Motivation section... ie, what's the use case?\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172660961,172660961,
toby,2016-01-18T21:43:46Z,I was wondering if I needed to add one :)\n\nI address the use case in a message I sent to the dev list:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011874.html\n\nI can certainly go into more detail in a BIP draft if that would be helpful. \n\nI was hoping it wouldn't need a BIP (although I can't see it hurting) since allowing non-zero OP_RETURNs seems like a bug that,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172662062,172662062,
luke-jr,2016-01-18T21:50:41Z,"> Hi all. I've been working on a new publication platform based on Bitcoin\n\nSo it's a spamming service. Not something we'd want to support.\n\n> I was hoping it wouldn't need a BIP (although I can't see it hurting) since allowing non-zero OP_RETURNs seems like a bug that's worth fixing ASAP.\n\nAllowing non-zero outputs would be a bug as it stands, since BIP 70 explicitly states: ""If the sum of ",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172663436,172663436,
toby,2016-01-18T21:57:52Z,"> So it's a spamming service. Not something we'd want to support.\n\nIt's an exploration into grouping transactions by OP_RETURN value, not meant for spamming :) Regardless, there are other use cases that would benefit from this. Essentially anything that uses OP_RETURN is currently incompatible with Payments. I'm happy to write up a BIP if this has any chance of going through.\n\n> Allowing non-z",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172665365,172665365,
toby,2016-01-18T22:12:50Z,"For example, here is a PaymentRequest with a 6000 Satoshi value on an OP_RETURN output:\n\n`bitcoin:?r=http%3A%2F%2Fkey.run%2Fkr%2Fmessage%2Fpayreq%3Fmessage%3Dd295285dd45fd0c9a0e86095d8fe31ddb6a07dcb`\n\nBitcoin Core will currently open and process this transaction resulting in 6000 lost Satoshi.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172668062,172668062,
laanwj,2016-01-19T10:38:47Z,"I think it makes sense to support OP_RETURN with zero value outputs. We've had the spamming discussion multiple times, at least OP_RETURN is the least harmful (from the point of the UTXO set) of doing so. That's the reason it was added to IsStandard in the first place. It's perfectly possible to spam in other ways, but at least these outputs can be pruned.\n\nBut I do agree that it needs a BIP. Bi",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172812949,172812949,
luke-jr,2016-01-19T17:09:45Z,"@laanwj There's quite a difference between passively tolerating some spam to avoid unintentionally tolerating worse spam, and actively enabling it. In this case, there is no worse-spam being prevented at all, and the user may not even be aware he is participating in spam!\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172920890,172920890,
toby,2016-01-19T17:23:28Z,"@laanwj that sounds great! I will write up a BIP draft. \n\n@luke-jr hopefully the BIP will help. There are definitely non-spam applications for this. Also, this fixes non-zero value OP_RETURNs which are currently allowed. I doubt the user ever wants to destroy Bitcoin but BIP-70 allows for that. \n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-172924829,172924829,
laanwj,2016-01-20T10:46:20Z,"> and the user may not even be aware he is participating in spam!\n\nRight - the software should at least show that it is happening, so that it doesn't go behind the user's back.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173168821,173168821,
toby,2016-01-20T12:27:48Z,">  Right - the software should at least show that it is happening, so that it doesn't go behind the user's back.\n\nI totally agree here as well. The OP_RETURN data should be displayed to the user when present. I would propose to do that in a second pull request though. This patch will plug the value destruction hole and introduce the BIP (where I was planning on recommending the OP_RETURN data be",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173190141,173190141,
luke-jr,2016-01-20T16:55:00Z,I still think it should be rejected in every way possible. At least without an established legitimate use case. (Also note OP_RETURN data _especially_ should never be ASCII content... so what exactly do you plan to display to the user?)\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173270797,173270797,
toby,2016-01-20T17:08:10Z,"@luke-jr here's an example of why you might want an ASCII OP_RETURN:\n\nImagine including a hash of the invoice or contract that went along with the transaction into the OP_RETURN of that transaction. It would be a way to verify and prove what that transaction was for. \n\nThere are _many_ potential use cases for OP_RETURN, some of which are yet to be invented and will help Bitcoin. Since it's alr",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173276255,173276255,
luke-jr,2016-01-20T17:20:01Z,"@toby So you'd display the preimage of the OP_RETURN'd hash?\n\nNote also, that it is possible to include the hash in the signature itself, without increasing the data required, something I hope to see in future versions (mainly waiting on libsecp256k1 to add the special sign function needed).\n\n> Since it's already been decided that OP_RETURN is standard it seems odd to not offer support for it\",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173282514,173282514,
toby,2016-01-20T17:29:58Z,"> So you'd display the preimage of the OP_RETURN'd hash?\n\nSince Bitcoin Core is a ""generic"" client I would just show the hash itself, much like how blockchain.info renders OP_RETURN values. I imagine more specialized clients could also display the preimage of whatever made sense in their domain.\n\n> OP_RETURN is not standard in any way. It is simply tolerated by Core's IsStandard function.\n\nI",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173292968,173292968,
luke-jr,2016-01-20T17:34:38Z,"Again, there is a significant difference in relaying them when there is no way to effectively filter them, vs generating them ourselves in a situation where there is no way presently to avoid destroying dust. Adding support for 0-value OP_RETURN in payment requests literally has no benefit, and (at least lacking a legitimate use case) encourages abuse.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173296564,173296564,
luke-jr,2016-01-20T17:35:03Z,"(and when/if there is a legitimate use case, it makes more sense to figure out if there's a specialised way to add that only without enabling abuse)\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173296728,173296728,
toby,2016-01-20T17:38:04Z,"> Adding support for 0-value OP_RETURN in payment requests literally has no benefit\n\nSo you're fine supporting OP_RETURN now because it doesn't work with zero value and you think that will discourage people from using it? It seems better to take away support altogether than offer broken support.\n\n> encourages abuse.\n\nI'm not comfortable classifying other people's use cases as ""abuse"". As @la",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173298180,173298180,
luke-jr,2016-01-20T17:41:21Z,"> So you're fine supporting OP_RETURN now because it doesn't work with zero value and you think that will discourage people from using it? It seems better to take away support altogether than offer broken support.\n\nIf OP_RETURN doesn't work, they could just encode the spam in p2pkh. But in this case, they can't, because of the dust rule. (Actually, maybe this is also true of the relayed transact",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173299183,173299183,
sipa,2016-01-20T17:41:27Z,"OP_RETURN was a way to allow people to store data in the chain that did not\nhurt as much as other mechanisms. I wish we could have done it in a way\nthat didn't make it look like it was encouraged behaviour.\n\nAnyway, reality is that it exists now, and without it, abuse woukd be much\nworse.\n\nI'd like to understand your use case, though.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173299206,173299206,
toby,2016-01-20T17:47:28Z,@sipa my particular use case was to use the OP_RETURN for voting. On http://key.run I'm aggregating transactions sent to a particular address based on OP_RETURN value then displaying the OP_RETURNs that got the most Bitcoin sent to them.\n\nI probably _looks_ like spam because I haven't built anything useful with it yet and the amounts are super low because I've been testing with it. You could ima,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173301291,173301291,
luke-jr,2016-01-20T17:50:30Z,"My point is that it is better to require the value be lost in the process, in this scenario.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173302436,173302436,
toby,2016-01-20T18:02:13Z,"> My point is that it is better to require the value be lost in the process, in this scenario.\n\nI appreciate your sentiment and motivation but I strongly disagree. Features that exist need to be properly supported. It's not good to offer broken support just to discourage use, it would be far better to not support OP_RETURN at all.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173306112,173306112,
luke-jr,2016-01-20T18:06:48Z,"You're missing the point. OP_RETURN is not supported for the sake of people who wish to spam. It is tolerated for the sake of people _harmed by_ said spam. Making it cheaper _increases_ the harm, so it goes against the purpose of tolerating OP_RETURN.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173308486,173308486,
toby,2016-01-20T18:12:50Z,"@luke-jr I understand your point but I think you're not quite seeing what is going to motivate people to use this anyway...\n\nOP_RETURN was created because people were encoding data on the blockchain using ad hoc methods that weren't efficient. Even though some people (like yourself) would rather **no** data be encoded on the blockchain, OP_RETURN gave people a less damaging way to do what they w",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173311658,173311658,
luke-jr,2016-01-20T18:16:17Z,"I see no benefit to the users harmed, to avoid the burning of 6,000sat/tx.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173312638,173312638,
toby,2016-01-20T18:20:45Z,There shouldn't even be a way to burn Bitcoin. It's bad for everyone.\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173313876,173313876,
sipa,2016-01-20T18:26:53Z,You can't prevent voluntary burning. Someone can always send to a\nnon-existing address.\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173315600,173315600,
toby,2016-01-20T18:28:01Z,"@sipa correct, but this is an additional way to burn value that can be prevented and even worse, value _must_ be burned to fulfill a use case.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173315909,173315909,
laanwj,2016-01-22T12:40:17Z,"> Not using payment protocol, there aren't...?\n\nSure, by voluntary burning to a non-existent address that encodes data.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-173909998,173909998,
toby,2016-01-26T01:21:48Z,I've written a BIP draft.\n\nLive copy: https://gist.github.com/toby/9e71811d387923a71a53 \nMailing list: http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012283.html\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-174757256,174757256,
felipelalli,2016-01-26T05:58:41Z,"NACK. 6,000sat/tx is even too cheap to do what you want. If I were you I would encourage your users to burn even more. You said ""(...) It's bad for everyone."" - Actually, it is the opposite: burn bitcoin is good for everyone as Satoshi said: ""Lost coins only make everyone else’s coins worth slightly more. Think of it as a donation to everyone.""\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-174848666,174848666,
toby,2016-01-26T06:46:45Z,@felipelalli I believe you should provide a reason for your NACK. As it stands I don't understand why you're objecting.\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-174859853,174859853,
toby,2016-01-27T01:00:40Z,I've updated the BIP specification section with feedback from the list re: multiple outputs that sum to zero value:\n\nhttps://gist.github.com/toby/9e71811d387923a71a53#specification\n\nThis pull request doesn't address this case since Core doesn't fully implement BIP70 when there are multiple zero value outputs. Core currently alerts the user saying that values must be greater than zero instead o,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-175320063,175320063,
sipa,2016-01-27T16:47:26Z,"NACK: a payment request is a request for a payment. requesting someone to send 0 money doesn't make sense.\n\nOP_RETURN helps for some cases where you need messages to travel along with transactions, where no other communication channel is available. However, in the specific case of the Payment Protocol, such a channel already exists (you're directly communicating with the receiver, so why not use",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-175739051,175739051,
toby,2016-01-27T16:57:54Z,@sipa as proposed in the BIP you would need to include more than just the OP_RETURN and the end value of the transaction will have to be greater than zero so I think it is a request for payment in that sense.\n\nEDIT: I made this more clear in the BIP specification:\n\n> Payment requests also must contain at least one payable output (i.e. no payment requests with just a zero value OP_RETURN).\n\nI,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-175742534,175742534,
killerstorm,2016-01-28T10:01:52Z,"@sipa Transaction metadata can be used to create an unambiguous link between the payment and the invoice (PaymentRequest).\n\nPaymentRequest is signed by the merchant, but multiple conflicting signed PaymentRequests can exist.\n\nNon-repudiation properties can be strengthened through secure timestamping, and here we have a timestamping mechanism which requires less than 13% space overhead and requ",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-176098518,176098518,
toby,2016-01-29T01:11:35Z,"I've updated the PR and BIP to support all values (zero or greater) for OP_RETURN. Multiple people have pointed out that it would be best for backward compatibility, and I agree. I've also been making the case that the Payment protocol should work in a manner consistent with non-Payment protocol transactions and this change is in line with that.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-176507993,176507993,
luke-jr,2016-01-29T01:16:22Z,"It's still not backward compatible, because you need old BIP70 clients to _reject_ your new format.\n\nRegardless of whether you address that problem or not, I maintain a NACK on supporting such a BIP in Core.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-176509256,176509256,
toby,2016-01-29T01:23:15Z,"@luke-jr good point, I'll address that in the BIP.\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-176510260,176510260,
sipa,2016-05-20T16:22:42Z,What is the state of this?\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-220652210,220652210,
MarcoFalke,2016-05-24T11:23:40Z,the bip: https://github.com/bitcoin/bips/blob/master/bip-0074.mediawiki\n\nand the commits need a squash?\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-221240175,221240175,
luke-jr,2016-05-25T02:02:42Z,I maintain that this BIP is a bad idea and should not be supported.\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-221454146,221454146,
wallclockbuilder,2016-05-25T03:21:53Z,Here we have a timestamping mechanism which requires no 3rd party services.\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-221463516,221463516,
arowser,2016-05-25T08:45:01Z,Can one of the admins verify this patch?\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-221510759,221510759,
laanwj,2016-08-31T12:36:32Z,"So the BIP is there; looks like this needs rebase, and update of `doc/bips.md`\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-243750292,243750292,
luke-jr,2016-08-31T18:35:54Z,The fact that he's made a BIP does not change the fact that it _should not_ be supported.\n,https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-243858797,243858797,
laanwj,2016-09-01T13:40:26Z,"Personally I don't see any harm in supporting this. OP_RETURN with zero-value outputs is standard, after all, so why should users be prevented from sending them through the payment protocol?\n\nThen again, closing this, this is probably not worth the fight...\n",https://github.com/bitcoin/bitcoin/pull/7376#issuecomment-244081627,244081627,
