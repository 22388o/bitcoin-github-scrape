[
  {
    "sha": "d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWQzZWMwN2NmZTQ1Y2ZhNTUwMjhjYzg3OWRjOGE1NWFlY2I0ZDNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-28T19:00:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-24T01:38:34Z"
      },
      "message": "Consolidate XOnlyPubKey lookup hack\n\nThe places where we need to lookup information for a XOnlyPubKey\ncurrently implement a hack which makes both serializations of the full\npubkey in order to try the CKeyIDs for the lookup functions. Instead of\nduplicating this everywhere it is needed, we can consolidate the CKeyID\ngeneration into a function, and then have wrappers around GetPubKey,\nGetKey, and GetKeyOrigin which takes the XOnlyPubKey, retrieves all of\nthe CKeyIDs (using the new GetKeyIDs() function in XOnlyPubKey), and\ntries their respective underlying lookup function.",
      "tree": {
        "sha": "32cb83e14faad38a733c603196d2625349cfac58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32cb83e14faad38a733c603196d2625349cfac58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbcb5742c48fd26f77e500291d7083e12eec741b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbcb5742c48fd26f77e500291d7083e12eec741b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbcb5742c48fd26f77e500291d7083e12eec741b"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 48,
      "deletions": 23
    },
    "files": [
      {
        "sha": "100b3156158294f7b9f43d86e1628f5cc9aa46e6",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
        "patch": "@@ -180,6 +180,23 @@ XOnlyPubKey::XOnlyPubKey(Span<const unsigned char> bytes)\n     std::copy(bytes.begin(), bytes.end(), m_keydata.begin());\n }\n \n+std::vector<CKeyID> XOnlyPubKey::GetKeyIDs() const\n+{\n+    std::vector<CKeyID> out;\n+    // For now, use the old full pubkey-based key derivation logic. As it is indexed by\n+    // Hash160(full pubkey), we need to return both a version prefixed with 0x02, and one\n+    // with 0x03.\n+    unsigned char b[33] = {0x02};\n+    std::copy(m_keydata.begin(), m_keydata.end(), b + 1);\n+    CPubKey fullpubkey;\n+    fullpubkey.Set(b, b + 33);\n+    out.push_back(fullpubkey.GetID());\n+    b[0] = 0x03;\n+    fullpubkey.Set(b, b + 33);\n+    out.push_back(fullpubkey.GetID());\n+    return out;\n+}\n+\n bool XOnlyPubKey::IsFullyValid() const\n {\n     secp256k1_xonly_pubkey pubkey;"
      },
      {
        "sha": "861a2cf500679657dfbbd619325fa8626c649f3d",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
        "patch": "@@ -267,6 +267,11 @@ class XOnlyPubKey\n     /** Construct a Taproot tweaked output point with this point as internal key. */\n     std::optional<std::pair<XOnlyPubKey, bool>> CreateTapTweak(const uint256* merkle_root) const;\n \n+    /** Returns a list of CKeyIDs for the CPubKeys that could have been used to create this XOnlyPubKey.\n+     * This is needed for key lookups since keys are indexed by CKeyID.\n+     */\n+    std::vector<CKeyID> GetKeyIDs() const;\n+\n     const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n     const unsigned char* data() const { return m_keydata.begin(); }\n     static constexpr size_t size() { return decltype(m_keydata)::size(); }"
      },
      {
        "sha": "621a1b9fd6ab3dbbb07dd81ee16a571402344988",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
        "patch": "@@ -1242,14 +1242,8 @@ std::unique_ptr<PubkeyProvider> InferXOnlyPubkey(const XOnlyPubKey& xkey, ParseS\n     CPubKey pubkey(full_key);\n     std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, true);\n     KeyOriginInfo info;\n-    if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+    if (provider.GetKeyOriginByXOnly(xkey, info)) {\n         return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n-    } else {\n-        full_key[0] = 0x03;\n-        pubkey = CPubKey(full_key);\n-        if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n-            return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n-        }\n     }\n     return key_provider;\n }"
      },
      {
        "sha": "b912b00365bc1d992c55b9ecbf8a58cf82d98f1f",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
        "patch": "@@ -60,22 +60,7 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n \n     CKey key;\n-    {\n-        // For now, use the old full pubkey-based key derivation logic. As it is indexed by\n-        // Hash160(full pubkey), we need to try both a version prefixed with 0x02, and one\n-        // with 0x03.\n-        unsigned char b[33] = {0x02};\n-        std::copy(pubkey.begin(), pubkey.end(), b + 1);\n-        CPubKey fullpubkey;\n-        fullpubkey.Set(b, b + 33);\n-        CKeyID keyid = fullpubkey.GetID();\n-        if (!provider.GetKey(keyid, key)) {\n-            b[0] = 0x03;\n-            fullpubkey.Set(b, b + 33);\n-            CKeyID keyid = fullpubkey.GetID();\n-            if (!provider.GetKey(keyid, key)) return false;\n-        }\n-    }\n+    if (!provider.GetKeyByXOnly(pubkey, key)) return false;\n \n     // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n     // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset"
      },
      {
        "sha": "fbce61c6a962ebe718388634889bc545e938a3f9",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=d9d3ec07cfe45cfa55028cc879dc8a55aecb4d3c",
        "patch": "@@ -26,6 +26,30 @@ class SigningProvider\n     virtual bool HaveKey(const CKeyID &address) const { return false; }\n     virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n     virtual bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const { return false; }\n+\n+    bool GetKeyByXOnly(const XOnlyPubKey& pubkey, CKey& key) const\n+    {\n+        for (const auto& id : pubkey.GetKeyIDs()) {\n+            if (GetKey(id, key)) return true;\n+        }\n+        return false;\n+    }\n+\n+    bool GetPubKeyByXOnly(const XOnlyPubKey& pubkey, CPubKey& out) const\n+    {\n+        for (const auto& id : pubkey.GetKeyIDs()) {\n+            if (GetPubKey(id, out)) return true;\n+        }\n+        return false;\n+    }\n+\n+    bool GetKeyOriginByXOnly(const XOnlyPubKey& pubkey, KeyOriginInfo& info) const\n+    {\n+        for (const auto& id : pubkey.GetKeyIDs()) {\n+            if (GetKeyOrigin(id, info)) return true;\n+        }\n+        return false;\n+    }\n };\n \n extern const SigningProvider& DUMMY_SIGNING_PROVIDER;"
      }
    ]
  }
]