[
  {
    "sha": "faf41ea6f32465cd8752e2c51794c65574170a58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY0MWVhNmYzMjQ2NWNkODc1MmUyYzUxNzk0YzY1NTc0MTcwYTU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-19T17:36:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-19T17:55:47Z"
      },
      "message": "[rpc] Tidy up reporting of buried and ongoing softforks\n\nThis combines reporting of buried (formally ISM) softfork deployments\nand BIP9 versionbits softfork deployments into one JSON object\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "dd69fbd512f61ab93dc8243a9adca7107ef044b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd69fbd512f61ab93dc8243a9adca7107ef044b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf41ea6f32465cd8752e2c51794c65574170a58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgKSAv/XI2p+QYq79NNFm0yd+qoRCBMy/7Lx0MWK0yzGFMNiaXAxNmcRNQkiTqL\nNcJWhLMQ9aU2zrZfidE9ubd7+h6Xgvi9/oMATuCoqiGioagXy9s2GkohIB5doTHr\nFmBde0+5zERTFoyJDtkcu9SYR0QoXvNeXOfnALKMGUs8LiworPluGFARBnekFVlu\nijUYKdwTt/cherpDNCXy1xBX8flJcYPHODRG7j+PudkxXPL0wyv3gQQLYeNHjPnD\n9AByvTzxDt+sNH7/yQDmjfWJ6HTE2BOcWTohZK77xjkfB7NysNznW27SttD0v9aE\nBn4+NrW1nokj0W3ZPMkF95kaeiaYLw2VVmPrXnadnU2FTt81GeybUxEc8XZ3z+4S\ntzjjHpFsPGuK6DcNZEBQr4G41PSXKszMFrkfvpItUqhJq8JhzfcjY0nuP7P8/QPS\nFBJdZS+j19RXt0eX0VCI9fQL6vYY1JMLTt/y/Q+J/Sz82U6nHGIf0E/ojiJnnYyA\nFw98l2YH\n=FvS1\n-----END PGP SIGNATURE-----",
        "payload": "tree dd69fbd512f61ab93dc8243a9adca7107ef044b3\nparent 59ce537a4994a8f49a9dbdf2b3cec0b08041260b\nauthor MarcoFalke <falke.marco@gmail.com> 1563557773 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1563558947 -0400\n\n[rpc] Tidy up reporting of buried and ongoing softforks\n\nThis combines reporting of buried (formally ISM) softfork deployments\nand BIP9 versionbits softfork deployments into one JSON object\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\nCo-authored-by: John Newbery <john@johnnewbery.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf41ea6f32465cd8752e2c51794c65574170a58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf41ea6f32465cd8752e2c51794c65574170a58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf41ea6f32465cd8752e2c51794c65574170a58/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59ce537a4994a8f49a9dbdf2b3cec0b08041260b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ce537a4994a8f49a9dbdf2b3cec0b08041260b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59ce537a4994a8f49a9dbdf2b3cec0b08041260b"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 117,
      "deletions": 97
    },
    "files": [
      {
        "sha": "324f59f3d783aadbad07fe35b7ba2e32e28cd273",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -106,6 +106,8 @@ Low-level changes\n RPC\n ---\n \n+- The array `softforks` and object `bip9_softforks` in the `getblockchaininfo` RPC are combined and moved into a new\n+  `getforkinfo` RPC. Refer to the RPC help for further details.\n \n Tests\n -----"
      },
      {
        "sha": "c73b43d44e156fe87ae18e5f790c6483c37dd11d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 76,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -1183,75 +1183,67 @@ static UniValue verifychain(const JSONRPCRequest& request)\n     return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n }\n \n-/** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string& name, int height, const CBlockIndex& tip)\n {\n     UniValue rv(UniValue::VOBJ);\n-    bool activated = false;\n-    switch(version)\n-    {\n-        case 2:\n-            activated = pindex->nHeight >= consensusParams.BIP34Height;\n-            break;\n-        case 3:\n-            activated = pindex->nHeight >= consensusParams.BIP66Height;\n-            break;\n-        case 4:\n-            activated = pindex->nHeight >= consensusParams.BIP65Height;\n-            break;\n-    }\n-    rv.pushKV(\"status\", activated);\n-    return rv;\n-}\n+    rv.pushKV(\"type\", \"buried\");\n+    rv.pushKV(\"height\", height);\n+    rv.pushKV(\"active\", tip.nHeight + 1 >= height);\n \n-static UniValue SoftForkDesc(const std::string &name, int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n-    UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"id\", name);\n-    rv.pushKV(\"version\", version);\n-    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n-    return rv;\n+    softforks.pushKV(name, rv);\n }\n \n-static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static UniValue BIP9SoftForkDesc(const CBlockIndex* pindex, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    UniValue rv(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n+    UniValue bip9(UniValue::VOBJ);\n+    const ThresholdState thresholdState = VersionBitsState(pindex, consensusParams, id, versionbitscache);\n     switch (thresholdState) {\n-    case ThresholdState::DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: rv.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: rv.pushKV(\"status\", \"failed\"); break;\n+    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n+    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n+    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n+    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n-    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n+    bip9.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    int64_t since_height = VersionBitsStateSinceHeight(pindex, consensusParams, id, versionbitscache);\n+    bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n+        BIP9Stats statsStruct = VersionBitsStatistics(pindex, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        rv.pushKV(\"statistics\", statsUV);\n+        bip9.pushKV(\"statistics\", statsUV);\n     }\n+\n+    UniValue rv(UniValue::VOBJ);\n+    rv.pushKV(\"type\", \"bip9\");\n+    rv.pushKV(\"bip9\", bip9);\n+    if (ThresholdState::LOCKED_IN == thresholdState) {\n+        rv.pushKV(\"height\", since_height + consensusParams.nMinerConfirmationWindow);\n+    } else if (ThresholdState::ACTIVE == thresholdState) {\n+        rv.pushKV(\"height\", since_height);\n+    }\n+    rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n+\n     return rv;\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const CBlockIndex* pindex, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Deployments with timeout value of 0 are hidden.\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n+        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(pindex, consensusParams, id));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1275,31 +1267,6 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n             \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n             \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": [                (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",           (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,          (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {             (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,        (boolean) true if threshold reached\\n\"\n-            \"        },\\n\"\n-            \"     }, ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {           (object) status of BIP9 softforks in progress\\n\"\n-            \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"        }\\n\"\n-            \"     }\\n\"\n-            \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n             \"}\\n\"\n                 },\n@@ -1341,20 +1308,69 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n         }\n     }\n \n+    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n+    return obj;\n+}\n+\n+UniValue getforkinfo(const JSONRPCRequest& request)\n+{\n+            RPCHelpMan{\"getforkinfo\",\n+                \"Returns an object containing various state info regarding softfork status.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* default */ \"chain tip\", \"The hash of the block at which to get fork info.\"},\n+                },\n+                RPCResult{\n+            \"{\\n\"\n+            \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n+            \"      \\\"type\\\": \\\"xxxx\\\",           (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n+            \"      \\\"bip9\\\": {                 (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n+            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"        }\\n\"\n+            \"      },\\n\"\n+            \"      \\\"height\\\": \\\"xxxxxx\\\",       (numeric) height of the first block which the rules are enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"locked_in\\\" or \\\"active\\\" status)\\n\"\n+            \"      \\\"active\\\": xx,             (boolean) true if the rules are enforced after this block\\n\"\n+            \"     }\\n\"\n+            \"}\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getforkinfo\", \"\")\n+            + HelpExampleRpc(\"getforkinfo\", \"\")\n+                },\n+            }.Check(request);\n+\n+    const CBlockIndex* tip;\n+\n+    LOCK(cs_main);\n+    if (request.params[0].isNull()) {\n+        tip = ::ChainActive().Tip();\n+    } else {\n+        uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n+        tip = LookupBlockIndex(hash);\n+        if (!tip) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+    }\n+\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    UniValue softforks(UniValue::VARR);\n-    UniValue bip9_softforks(UniValue::VOBJ);\n-    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n+    UniValue softforks(UniValue::VOBJ);\n+    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, *tip);\n+    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, *tip);\n+    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, *tip);\n     for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n-        BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n+        BIP9SoftForkDescPushBack(softforks, tip, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n     }\n-    obj.pushKV(\"softforks\",             softforks);\n-    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n-    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n-    return obj;\n+    return softforks;\n }\n \n /** Comparison function for sorting the getchaintips heads.  */\n@@ -2315,6 +2331,7 @@ static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      {} },\n+    { \"blockchain\",         \"getforkinfo\",            &getforkinfo,            {\"blockhash\"} },\n     { \"blockchain\",         \"getchaintxstats\",        &getchaintxstats,        {\"nblocks\", \"blockhash\"} },\n     { \"blockchain\",         \"getblockstats\",          &getblockstats,          {\"hash_or_height\", \"stats\"} },\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       {} },"
      },
      {
        "sha": "09085c5e31433420f0585093754efe53eafaed51",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -386,7 +386,7 @@ def test_bip68_not_consensus(self):\n \n     def activateCSV(self):\n         # activation should happen at block height 432 (3 periods)\n-        # getblockchaininfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n+        # getforkinfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)"
      },
      {
        "sha": "f825596fb53a0d66e87a7625d435f802d730742e",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -70,13 +70,11 @@ def skip_test_if_missing_module(self):\n \n     def test_cltv_info(self, *, is_active):\n         assert_equal(\n-            next(s for s in self.nodes[0].getblockchaininfo()['softforks'] if s['id'] == 'bip65'),\n+            self.nodes[0].getforkinfo()['bip65'],\n             {\n-                \"id\": \"bip65\",\n-                \"version\": 4,\n-                \"reject\": {\n-                    \"status\": is_active\n-                }\n+                'type': 'buried',\n+                'active': is_active,\n+                'height': 1351\n             },\n         )\n \n@@ -106,7 +104,7 @@ def run_test(self):\n \n         self.test_cltv_info(is_active=False)\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n-        self.test_cltv_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_cltv_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         self.log.info(\"Test that blocks must now be at least version 4\")\n@@ -155,7 +153,7 @@ def run_test(self):\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n \n-        self.test_cltv_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_cltv_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n         self.test_cltv_info(is_active=True)  # Active as of current tip\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)"
      },
      {
        "sha": "fd3823686d79d8d26d2679a4ac327b1edba07afe",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -53,13 +53,11 @@ def skip_test_if_missing_module(self):\n \n     def test_dersig_info(self, *, is_active):\n         assert_equal(\n-            next(s for s in self.nodes[0].getblockchaininfo()['softforks'] if s['id'] == 'bip66'),\n+            self.nodes[0].getforkinfo()['bip66'],\n             {\n-                \"id\": \"bip66\",\n-                \"version\": 3,\n-                \"reject\": {\n-                    \"status\": is_active\n-                }\n+                'type': 'buried',\n+                'active': is_active,\n+                'height': 1251\n             },\n         )\n \n@@ -90,7 +88,7 @@ def run_test(self):\n \n         self.test_dersig_info(is_active=False)\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n-        self.test_dersig_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_dersig_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         self.log.info(\"Test that blocks must now be at least version 3\")\n@@ -144,7 +142,7 @@ def run_test(self):\n         block.rehash()\n         block.solve()\n \n-        self.test_dersig_info(is_active=False)  # Not active as of current tip, but next block must obey rules\n+        self.test_dersig_info(is_active=True)  # Not active as of current tip, but next block must obey rules\n         self.nodes[0].p2p.send_and_ping(msg_block(block))\n         self.test_dersig_info(is_active=True)  # Active as of current tip\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)"
      },
      {
        "sha": "eda119fe8f25c823cd8ee4e8b74ca83a578818b1",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -217,6 +217,9 @@ def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n         add_witness_commitment(block, nonce)\n         block.solve()\n \n+    def get_segwit_info(self, node_id):\n+        return self.nodes[node_id].getforkinfo()['segwit']\n+\n     def run_test(self):\n         # Setup the p2p connections\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n@@ -285,12 +288,14 @@ def func_wrapper(self, *args, **kwargs):\n             self.log.info(\"Subtest: {} (Segwit status = {})\".format(func.__name__, self.segwit_status))\n             # Assert segwit status is as expected\n             assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n+            assert_equal(self.get_segwit_info(0)['active'], self.segwit_status == 'active')\n             func(self, *args, **kwargs)\n             # Each subtest should leave some utxos for the next subtest\n             assert self.utxo\n             self.sync_blocks()\n             # Assert segwit status is as expected at end of subtest\n             assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n+            assert_equal(self.get_segwit_info(0)['active'], self.segwit_status == 'active')\n \n         return func_wrapper\n \n@@ -710,8 +715,10 @@ def advance_to_segwit_active(self):\n         height = self.nodes[0].getblockcount()\n         self.nodes[0].generate(VB_PERIOD - (height % VB_PERIOD) - 2)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        assert_equal(self.get_segwit_info(0)['active'], False)\n         self.nodes[0].generate(1)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n+        assert_equal(self.get_segwit_info(0)['active'], True)\n         self.segwit_status = 'active'\n \n     @subtest"
      },
      {
        "sha": "de238d6f202d8d75987b523758126ef9ba3aa988",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -78,7 +78,6 @@ def _test_getblockchaininfo(self):\n \n         keys = [\n             'bestblockhash',\n-            'bip9_softforks',\n             'blocks',\n             'chain',\n             'chainwork',\n@@ -88,7 +87,6 @@ def _test_getblockchaininfo(self):\n             'mediantime',\n             'pruned',\n             'size_on_disk',\n-            'softforks',\n             'verificationprogress',\n             'warnings',\n         ]"
      },
      {
        "sha": "e9e83cbf3d5d913977e13d653334d858050b211b",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf41ea6f32465cd8752e2c51794c65574170a58/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faf41ea6f32465cd8752e2c51794c65574170a58",
        "patch": "@@ -343,8 +343,8 @@ def delete_cookie_file(datadir):\n         os.remove(os.path.join(datadir, \"regtest\", \".cookie\"))\n \n def get_bip9_status(node, key):\n-    info = node.getblockchaininfo()\n-    return info['bip9_softforks'][key]\n+    info = node.getforkinfo()\n+    return info[key]['bip9']\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      }
    ]
  },
  {
    "sha": "fab4bd992e7232ef792269e1c6a299c0d2da931e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI0YmQ5OTJlNzIzMmVmNzkyMjY5ZTFjNmEyOTljMGQyZGE5MzFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-19T18:21:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-19T18:48:49Z"
      },
      "message": "rpc: Renambe bip9 to vb in getforkinfo",
      "tree": {
        "sha": "9917f2284649c3fa3c92524165d64df3c8ff24c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9917f2284649c3fa3c92524165d64df3c8ff24c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab4bd992e7232ef792269e1c6a299c0d2da931e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjCWwv+PduutvUH+lyVarNLZVY5ac8sGmLOKCVCFudzyBNGb8wEUvSjK/GejWoS\nq3M3fkDIwPX+6ywr4NPP+4Q9VwIRD1rvp2izyr+AORJPfbbrRlriHQvR8kQc1ZNt\n7SIlnKNHYtgiSfTMJLqRS74JDBdGp48sjxhHh14hGtoOqZr3Q3WSYOfONePLTzTL\n8iR0007ZiQVO8MXJDK4fJ+nsGaCfJJqU/nXUmqGBfTK/3oqH5Fap4jyF54w07vyj\n0l5spO3yjW5ZZsqdG8gXh7LjGr4qyX0roUolimUH0BEF/qylSdvrmdbJNMTi3ELp\nxrHTbMNksIcQzqWmdMYr3nP7Ef/vT0lFXJUuqfcvnHdWFl5QjSz/sAz/U2xCUEKN\nrfZN6qCOiD2nN+zrYhnoilQmiDyTzoKNYCCQFNfEJina8+oYMkitxC7BPUv81Ugk\nosu0UTfqZHbL75YBABY8Nj10EfKVjSgHx13OACAW3BAcxubVD6HbPEs9L1CGxTuO\n7XEaIM7z\n=bi8t\n-----END PGP SIGNATURE-----",
        "payload": "tree 9917f2284649c3fa3c92524165d64df3c8ff24c7\nparent faf41ea6f32465cd8752e2c51794c65574170a58\nauthor MarcoFalke <falke.marco@gmail.com> 1563560475 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1563562129 -0400\n\nrpc: Renambe bip9 to vb in getforkinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4bd992e7232ef792269e1c6a299c0d2da931e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab4bd992e7232ef792269e1c6a299c0d2da931e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4bd992e7232ef792269e1c6a299c0d2da931e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf41ea6f32465cd8752e2c51794c65574170a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf41ea6f32465cd8752e2c51794c65574170a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf41ea6f32465cd8752e2c51794c65574170a58"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 29,
      "deletions": 29
    },
    "files": [
      {
        "sha": "b9a7d8354441fb9fd1878f6eac0725b3e91562ba",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bd992e7232ef792269e1c6a299c0d2da931e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bd992e7232ef792269e1c6a299c0d2da931e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "patch": "@@ -1225,8 +1225,8 @@ static UniValue BIP9SoftForkDesc(const CBlockIndex* pindex, const Consensus::Par\n     }\n \n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n+    rv.pushKV(\"type\", \"vb\");\n+    rv.pushKV(\"vb\", bip9);\n     if (ThresholdState::LOCKED_IN == thresholdState) {\n         rv.pushKV(\"height\", since_height + consensusParams.nMinerConfirmationWindow);\n     } else if (ThresholdState::ACTIVE == thresholdState) {\n@@ -1322,8 +1322,8 @@ UniValue getforkinfo(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{\\n\"\n             \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"      \\\"type\\\": \\\"xxxx\\\",           (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n-            \"      \\\"bip9\\\": {                 (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"      \\\"type\\\": \\\"xxxx\\\",           (string) one of \\\"buried\\\", \\\"vb\\\"\\n\"\n+            \"      \\\"vb\\\": {                 (object) status of versionbits softforks (only for \\\"vb\\\" type)\\n\"\n             \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n             \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n             \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n@@ -1337,7 +1337,7 @@ UniValue getforkinfo(const JSONRPCRequest& request)\n             \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n             \"        }\\n\"\n             \"      },\\n\"\n-            \"      \\\"height\\\": \\\"xxxxxx\\\",       (numeric) height of the first block which the rules are enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"locked_in\\\" or \\\"active\\\" status)\\n\"\n+            \"      \\\"height\\\": \\\"xxxxxx\\\",       (numeric) height of the first block which the rules are enforced (only for \\\"buried\\\" type, or \\\"vb\\\" type with \\\"locked_in\\\" or \\\"active\\\" status)\\n\"\n             \"      \\\"active\\\": xx,             (boolean) true if the rules are enforced after this block\\n\"\n             \"     }\\n\"\n             \"}\\n\""
      },
      {
        "sha": "1042cee57289d5a4f80cee367165a268b3d984a6",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "patch": "@@ -14,7 +14,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    get_bip9_status,\n+    get_vb_status,\n     satoshi_round,\n )\n \n@@ -341,7 +341,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n     # being run, then it's possible the test has activated the soft fork, and\n     # this test should be moved to run earlier, or deleted.\n     def test_bip68_not_consensus(self):\n-        assert get_bip9_status(self.nodes[0], 'csv')['status'] != 'active'\n+        assert get_vb_status(self.nodes[0], 'csv')['status'] != 'active'\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n@@ -391,9 +391,9 @@ def activateCSV(self):\n         height = self.nodes[0].getblockcount()\n         assert_greater_than(min_activation_height - height, 2)\n         self.nodes[0].generate(min_activation_height - height - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], \"active\")\n         self.sync_blocks()\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      },
      {
        "sha": "8804048842e2a982e7179fb16186fcc079e4b7c0",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "patch": "@@ -58,7 +58,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    get_bip9_status,\n+    get_vb_status,\n     hex_str_to_bytes,\n )\n \n@@ -188,12 +188,12 @@ def run_test(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         self.log.info(\"Test that the csv softfork is DEFINED\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], 'defined')\n         test_blocks = self.generate_blocks(61, 4)\n         self.send_blocks(test_blocks)\n \n         self.log.info(\"Advance from DEFINED to STARTED, height = 143\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], 'started')\n \n         self.log.info(\"Fail to achieve LOCKED_IN\")\n         # 100 out of 144 signal bit 0. Use a variety of bits to simulate multiple parallel softforks\n@@ -205,7 +205,7 @@ def run_test(self):\n         self.send_blocks(test_blocks)\n \n         self.log.info(\"Failed to advance past STARTED, height = 287\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], 'started')\n \n         self.log.info(\"Generate blocks to achieve LOCK-IN\")\n         # 108 out of 144 signal bit 0 to achieve lock-in\n@@ -217,7 +217,7 @@ def run_test(self):\n         self.send_blocks(test_blocks)\n \n         self.log.info(\"Advanced from STARTED to LOCKED_IN, height = 431\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n         # Generate 140 more version 4 blocks\n         test_blocks = self.generate_blocks(140, 4)\n@@ -267,7 +267,7 @@ def run_test(self):\n         self.send_blocks(test_blocks)\n \n         self.log.info(\"Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\")\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n@@ -343,7 +343,7 @@ def run_test(self):\n         # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n         test_blocks = self.generate_blocks(1, 4)\n         self.send_blocks(test_blocks)\n-        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n+        assert_equal(get_vb_status(self.nodes[0], 'csv')['status'], 'active')\n \n         self.log.info(\"Post-Soft Fork Tests.\")\n "
      },
      {
        "sha": "e64e5beb342443fb02903068f7f8706cc4281fe5",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, get_bip9_status, wait_until\n+from test_framework.util import assert_equal, get_vb_status, wait_until\n \n # TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n class TestP2PConn(P2PInterface):\n@@ -803,7 +803,7 @@ def run_test(self):\n         # We will need UTXOs to construct transactions in later tests.\n         self.make_utxos()\n \n-        assert_equal(get_bip9_status(self.nodes[0], \"segwit\")[\"status\"], 'active')\n+        assert_equal(get_vb_status(self.nodes[0], \"segwit\")[\"status\"], 'active')\n \n         self.log.info(\"Testing SENDCMPCT p2p message... \")\n         self.test_sendcmpct(self.segwit_node, old_node=self.old_node)"
      },
      {
        "sha": "54d98ad33e34214999b77be1c68ab3e018c285bf",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "patch": "@@ -76,7 +76,7 @@\n     assert_equal,\n     connect_nodes,\n     disconnect_nodes,\n-    get_bip9_status,\n+    get_vb_status,\n     hex_str_to_bytes,\n     assert_raises_rpc_error,\n )\n@@ -287,14 +287,14 @@ def subtest(func):  # noqa: N805\n         def func_wrapper(self, *args, **kwargs):\n             self.log.info(\"Subtest: {} (Segwit status = {})\".format(func.__name__, self.segwit_status))\n             # Assert segwit status is as expected\n-            assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n+            assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n             assert_equal(self.get_segwit_info(0)['active'], self.segwit_status == 'active')\n             func(self, *args, **kwargs)\n             # Each subtest should leave some utxos for the next subtest\n             assert self.utxo\n             self.sync_blocks()\n             # Assert segwit status is as expected at end of subtest\n-            assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n+            assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], self.segwit_status)\n             assert_equal(self.get_segwit_info(0)['active'], self.segwit_status == 'active')\n \n         return func_wrapper\n@@ -548,7 +548,7 @@ def advance_to_segwit_started(self):\n         assert height < VB_PERIOD - 1\n         # Advance to end of period, status should now be 'started'\n         self.nodes[0].generate(VB_PERIOD - height - 1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n+        assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], 'started')\n         self.segwit_status = 'started'\n \n     @subtest\n@@ -584,9 +584,9 @@ def advance_to_segwit_lockin(self):\n         self.nodes[0].generate(VB_PERIOD - 1)\n         height = self.nodes[0].getblockcount()\n         assert (height % VB_PERIOD) == VB_PERIOD - 2\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n+        assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], 'started')\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n         self.segwit_status = 'locked_in'\n \n     @subtest\n@@ -714,10 +714,10 @@ def advance_to_segwit_active(self):\n         \"\"\"Mine enough blocks to activate segwit.\"\"\"\n         height = self.nodes[0].getblockcount()\n         self.nodes[0].generate(VB_PERIOD - (height % VB_PERIOD) - 2)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n+        assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n         assert_equal(self.get_segwit_info(0)['active'], False)\n         self.nodes[0].generate(1)\n-        assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n+        assert_equal(get_vb_status(self.nodes[0], 'segwit')['status'], 'active')\n         assert_equal(self.get_segwit_info(0)['active'], True)\n         self.segwit_status = 'active'\n \n@@ -1937,7 +1937,7 @@ def test_upgrade_after_activation(self):\n         self.sync_blocks()\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert get_bip9_status(self.nodes[2], 'segwit')['status'] == \"active\"\n+        assert get_vb_status(self.nodes[2], 'segwit')['status'] == \"active\"\n \n         # Make sure this peer's blocks match those of node0.\n         height = self.nodes[2].getblockcount()"
      },
      {
        "sha": "0e8d5d5df47a8a28508d3a90dea4606324fd8d26",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bd992e7232ef792269e1c6a299c0d2da931e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "patch": "@@ -342,9 +342,9 @@ def delete_cookie_file(datadir):\n         logger.debug(\"Deleting leftover cookie file\")\n         os.remove(os.path.join(datadir, \"regtest\", \".cookie\"))\n \n-def get_bip9_status(node, key):\n+def get_vb_status(node, key):\n     info = node.getforkinfo()\n-    return info[key]['bip9']\n+    return info[key]['vb']\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      }
    ]
  },
  {
    "sha": "4a4178b61c4352d72677b6f0c7a11bd809e153f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTQxNzhiNjFjNDM1MmQ3MjY3N2I2ZjBjN2ExMWJkODA5ZTE1M2Y1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-07-04T06:09:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-19T18:48:49Z"
      },
      "message": "drop VersionBitsTip, explain versionbitscache guard",
      "tree": {
        "sha": "3a756d88fecdc48eda8e64dabc0d07fb8104a298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a756d88fecdc48eda8e64dabc0d07fb8104a298"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a4178b61c4352d72677b6f0c7a11bd809e153f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a4178b61c4352d72677b6f0c7a11bd809e153f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a4178b61c4352d72677b6f0c7a11bd809e153f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a4178b61c4352d72677b6f0c7a11bd809e153f5/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4bd992e7232ef792269e1c6a299c0d2da931e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab4bd992e7232ef792269e1c6a299c0d2da931e"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 1,
      "deletions": 29
    },
    "files": [
      {
        "sha": "3c395652480e7437c637849045432582f3d7a2f8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a4178b61c4352d72677b6f0c7a11bd809e153f5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a4178b61c4352d72677b6f0c7a11bd809e153f5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4a4178b61c4352d72677b6f0c7a11bd809e153f5",
        "patch": "@@ -4608,24 +4608,6 @@ CBlockFileInfo* GetBlockFileInfo(size_t n)\n     return &vinfoBlockFile.at(n);\n }\n \n-ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n-{\n-    LOCK(cs_main);\n-    return VersionBitsState(::ChainActive().Tip(), params, pos, versionbitscache);\n-}\n-\n-BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos)\n-{\n-    LOCK(cs_main);\n-    return VersionBitsStatistics(::ChainActive().Tip(), params, pos);\n-}\n-\n-int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)\n-{\n-    LOCK(cs_main);\n-    return VersionBitsStateSinceHeight(::ChainActive().Tip(), params, pos, versionbitscache);\n-}\n-\n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n bool LoadMempool(CTxMemPool& pool)"
      },
      {
        "sha": "0f2cd5a6c1d7b94b57dcdb323a3062977fe9a622",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a4178b61c4352d72677b6f0c7a11bd809e153f5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a4178b61c4352d72677b6f0c7a11bd809e153f5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4a4178b61c4352d72677b6f0c7a11bd809e153f5",
        "patch": "@@ -280,16 +280,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n-ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n-BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n-int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n-\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n \n@@ -669,7 +659,7 @@ extern std::unique_ptr<CBlockTreeDB> pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n-extern VersionBitsCache versionbitscache;\n+extern VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n \n /**\n  * Determine what nVersion a new block should use."
      }
    ]
  }
]