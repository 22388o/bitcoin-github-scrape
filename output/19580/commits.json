[
  {
    "sha": "daad49020427293506d88ae4d0242937232629c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWFkNDkwMjA0MjcyOTM1MDZkODhhZTRkMDI0MjkzNzIzMjYyOWM3",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-24T12:10:37Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-24T12:10:37Z"
      },
      "message": "Remove message_count, replace with has_verack\n\nmessage_count is almost completely unused.  Additionally, the values it\nholds are no longer correct.\n\nThis commit removes it and replaces its only use with a new has_verack\nboolean.",
      "tree": {
        "sha": "eba9a241fe23820044cd65a3ac1ca3147937fa1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eba9a241fe23820044cd65a3ac1ca3147937fa1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daad49020427293506d88ae4d0242937232629c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daad49020427293506d88ae4d0242937232629c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daad49020427293506d88ae4d0242937232629c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daad49020427293506d88ae4d0242937232629c7/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "007e15dcd7f8b42501e31cc36343655c53027077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/007e15dcd7f8b42501e31cc36343655c53027077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/007e15dcd7f8b42501e31cc36343655c53027077"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "bbf31ce4cb43f41c93d340ac20d6d85c62a784d8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daad49020427293506d88ae4d0242937232629c7/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daad49020427293506d88ae4d0242937232629c7/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=daad49020427293506d88ae4d0242937232629c7",
        "patch": "@@ -283,9 +283,10 @@ class P2PInterface(P2PConnection):\n     def __init__(self):\n         super().__init__()\n \n-        # Track number of messages of each type received and the most recent\n-        # message of each type\n-        self.message_count = defaultdict(int)\n+        # Track whether we've received a verack\n+        self.has_verack = False\n+\n+        # Track the most recent message of each type\n         self.last_message = {}\n \n         # A count of the number of ping messages we've sent to the node\n@@ -314,12 +315,12 @@ def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=T\n     def on_message(self, message):\n         \"\"\"Receive message and dispatch message to appropriate callback.\n \n-        We keep a count of how many of each message type has been received\n-        and the most recent message of each type.\"\"\"\n+        We keep track of the most recent message of each type.\"\"\"\n         with mininode_lock:\n             try:\n                 msgtype = message.msgtype.decode('ascii')\n-                self.message_count[msgtype] += 1\n+                if msgtype == \"verack\":\n+                    self.has_verack = True\n                 self.last_message[msgtype] = message\n                 getattr(self, 'on_' + msgtype)(message)\n             except:\n@@ -472,7 +473,7 @@ def test_function():\n \n     def wait_for_verack(self, timeout=60):\n         def test_function():\n-            return self.message_count[\"verack\"]\n+            return self.has_verack\n \n         self.wait_until(test_function, timeout=timeout)\n "
      }
    ]
  }
]