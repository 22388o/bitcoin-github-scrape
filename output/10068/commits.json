[
  {
    "sha": "7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTMwYmJiOTJiMmNiNmE4YjEzMjllNDRkZDk0ZDZkMDYzNDExMmM1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-23T09:38:54Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-05T04:38:26Z"
      },
      "message": "Make CCoinControl parameter of FundTransaction",
      "tree": {
        "sha": "8aadd84fa70c009cc967e6edec994d723a020f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aadd84fa70c009cc967e6edec994d723a020f83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "080d7c700fc3291560d79fc590e05b8e2bad984f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080d7c700fc3291560d79fc590e05b8e2bad984f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/080d7c700fc3291560d79fc590e05b8e2bad984f"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b5526f73a74cac103c062f5192dbd9b49db418c0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
        "patch": "@@ -19,6 +19,7 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"wallet.h\"\n+#include \"coincontrol.h\"\n #include \"walletdb.h\"\n \n #include <stdint.h>\n@@ -2766,7 +2767,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     std::string strFailReason;\n \n-    if (!pwallet->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress)) {\n+    CCoinControl coinControl;\n+    coinControl.destChange = changeAddress;\n+    coinControl.fAllowOtherInputs = true;\n+    coinControl.fAllowWatchOnly = includeWatching;\n+    coinControl.fOverrideFeeRate = overrideEstimatedFeerate;\n+    coinControl.nFeeRate = feeRate;\n+\n+    if (!pwallet->FundTransaction(tx, nFeeOut, coinControl, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "bc3d11f79a6bcbb679bcb3f8b58b77dd6ef59469",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
        "patch": "@@ -2255,7 +2255,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, CCoinControl& coinControl, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey)\n {\n     std::vector<CRecipient> vecSend;\n \n@@ -2267,13 +2267,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         vecSend.push_back(recipient);\n     }\n \n-    CCoinControl coinControl;\n-    coinControl.destChange = destChange;\n-    coinControl.fAllowOtherInputs = true;\n-    coinControl.fAllowWatchOnly = includeWatching;\n-    coinControl.fOverrideFeeRate = overrideEstimatedFeeRate;\n-    coinControl.nFeeRate = specificFeeRate;\n-\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n "
      },
      {
        "sha": "ee438623baa73b1666829a6dd6e6f504d0cb4032",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
        "patch": "@@ -866,7 +866,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, CCoinControl& coinControl, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins"
      }
    ]
  },
  {
    "sha": "1e959b125f7585c87781bd3063d72f79f857c985",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTk1OWIxMjVmNzU4NWM4Nzc4MWJkMzA2M2Q3MmY3OWY4NTdjOTg1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-24T03:39:10Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-05T04:40:19Z"
      },
      "message": "Replace std:pair<CWalletTx,uint> by CInputCoin",
      "tree": {
        "sha": "30690c4967eb2c0a94353c791b18284723000aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30690c4967eb2c0a94353c791b18284723000aba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e959b125f7585c87781bd3063d72f79f857c985",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e959b125f7585c87781bd3063d72f79f857c985",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e959b125f7585c87781bd3063d72f79f857c985",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e959b125f7585c87781bd3063d72f79f857c985/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a30bbb92b2cb6a8b1329e44dd94d6d0634112c5"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 56,
      "deletions": 28
    },
    "files": [
      {
        "sha": "42891f345b7c8e7cb57800427891b51e1844c81e",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e959b125f7585c87781bd3063d72f79f857c985/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e959b125f7585c87781bd3063d72f79f857c985/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=1e959b125f7585c87781bd3063d72f79f857c985",
        "patch": "@@ -48,7 +48,7 @@ static void CoinSelection(benchmark::State& state)\n             addCoin(1000 * COIN, wallet, vCoins);\n         addCoin(3 * COIN, wallet, vCoins);\n \n-        std::set<std::pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;\n         bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet);\n         assert(success);"
      },
      {
        "sha": "75143c48af96521e0b4aa0b4c04c5f862620492b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1e959b125f7585c87781bd3063d72f79f857c985",
        "patch": "@@ -2796,14 +2796,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, CWallet &wallet)\n {\n     CMutableTransaction txNew(tx);\n-    std::vector<std::pair<CWalletTx*, unsigned int>> vCoins;\n+    std::vector<CInputCoin> vCoins;\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n     // wallet, with a valid index into the vout array.\n     for (auto& input : tx.vin) {\n         const auto mi = wallet.mapWallet.find(input.prevout.hash);\n         assert(mi != wallet.mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n+        vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n     }\n     if (!wallet.DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)"
      },
      {
        "sha": "03353619213c4eb9e0e7f1fcfeb2094812781dcd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1e959b125f7585c87781bd3063d72f79f857c985",
        "patch": "@@ -29,7 +29,7 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n \n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n-typedef std::set<std::pair<const CWalletTx*,unsigned int> > CoinSet;\n+typedef std::set<CInputCoin> CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n "
      },
      {
        "sha": "d4570a4640b91cf5e04c4d19951d561d73d1c14c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1e959b125f7585c87781bd3063d72f79f857c985",
        "patch": "@@ -64,8 +64,8 @@ const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"00000000000000000000000000000000\n \n struct CompareValueOnly\n {\n-    bool operator()(const std::pair<CAmount, std::pair<const CWalletTx*, unsigned int> >& t1,\n-                    const std::pair<CAmount, std::pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const std::pair<CAmount, CInputCoin>& t1,\n+                    const std::pair<CAmount, CInputCoin>& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -2031,7 +2031,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n     }\n }\n \n-static void ApproximateBestSubset(const std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > >& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoin > >& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     std::vector<char> vfIncluded;\n@@ -2078,16 +2078,15 @@ static void ApproximateBestSubset(const std::vector<std::pair<CAmount, std::pair\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    std::pair<CAmount, CInputCoin> coinLowestLarger;\n     coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n-    coinLowestLarger.second.first = NULL;\n-    std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > > vValue;\n+    std::vector<std::pair<CAmount, CInputCoin>> vValue;\n     CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n@@ -2108,7 +2107,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n         int i = output.i;\n         CAmount n = pcoin->tx->vout[i].nValue;\n \n-        std::pair<CAmount,std::pair<const CWalletTx*,unsigned int> > coin = std::make_pair(n,std::make_pair(pcoin, i));\n+        std::pair<CAmount, CInputCoin> coin = std::make_pair(n, CInputCoin(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -2139,7 +2138,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     if (nTotalLower < nTargetValue)\n     {\n-        if (coinLowestLarger.second.first == NULL)\n+        if (coinLowestLarger.second.IsNull())\n             return false;\n         setCoinsRet.insert(coinLowestLarger.second);\n         nValueRet += coinLowestLarger.first;\n@@ -2158,7 +2157,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger.second.first &&\n+    if (!coinLowestLarger.second.IsNull() &&\n         ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n     {\n         setCoinsRet.insert(coinLowestLarger.second);\n@@ -2186,7 +2185,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n@@ -2198,13 +2197,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (!out.fSpendable)\n                  continue;\n             nValueRet += out.tx->tx->vout[out.i].nValue;\n-            setCoinsRet.insert(std::make_pair(out.tx, out.i));\n+            setCoinsRet.insert(CInputCoin(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n \n     // calculate value from preset inputs and store them\n-    std::set<std::pair<const CWalletTx*, uint32_t> > setPresetCoins;\n+    std::set<CInputCoin> setPresetCoins;\n     CAmount nValueFromPresetInputs = 0;\n \n     std::vector<COutPoint> vPresetInputs;\n@@ -2220,15 +2219,15 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (pcoin->tx->vout.size() <= outpoint.n)\n                 return false;\n             nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(std::make_pair(pcoin, outpoint.n));\n+            setPresetCoins.insert(CInputCoin(pcoin, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n     }\n \n     // remove preset inputs from vCoins\n     for (std::vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)\n     {\n-        if (setPresetCoins.count(std::make_pair(it->tx, it->i)))\n+        if (setPresetCoins.count(CInputCoin(it->tx, it->i)))\n             it = vCoins.erase(it);\n         else\n             ++it;\n@@ -2365,7 +2364,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n \n     {\n-        std::set<std::pair<const CWalletTx*,unsigned int> > setCoins;\n+        std::set<CInputCoin> setCoins;\n         LOCK2(cs_main, cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n@@ -2524,7 +2523,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // behavior.\"\n                 bool rbf = coinControl ? coinControl->signalRbf : fWalletRbf;\n                 for (const auto& coin : setCoins)\n-                    txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n+                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               std::numeric_limits<unsigned int>::max() - (rbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n@@ -2607,10 +2606,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             int nIn = 0;\n             for (const auto& coin : setCoins)\n             {\n-                const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+                const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->tx->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n+                if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\");\n                     return false;"
      },
      {
        "sha": "9d6f72fc61ae06586ea0839b4b59d3d948e03d1d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 34,
        "deletions": 5,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e959b125f7585c87781bd3063d72f79f857c985/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1e959b125f7585c87781bd3063d72f79f857c985",
        "patch": "@@ -92,7 +92,6 @@ enum WalletFeature\n     FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n-\n /** A key pool entry */\n class CKeyPool\n {\n@@ -474,8 +473,38 @@ class CWalletTx : public CMerkleTx\n     std::set<uint256> GetConflicts() const;\n };\n \n+class CInputCoin {\n+public:\n+    CInputCoin()\n+    {\n+    }\n+    CInputCoin(const CWalletTx* walletTx, unsigned int i)\n+    {\n+        if (walletTx != nullptr && i < walletTx->tx->vout.size())\n+        {\n+            outpoint = COutPoint(walletTx->GetHash(), i);\n+            txout = walletTx->tx->vout[i];\n+        }\n+    }\n+    bool IsNull() const\n+    {\n+        return outpoint.IsNull() && txout.IsNull();\n+    }\n+    COutPoint outpoint;\n+    CTxOut txout;\n \n+    bool operator<(const CInputCoin& rhs) const {\n+        return outpoint < rhs.outpoint;\n+    }\n \n+    bool operator!=(const CInputCoin& rhs) const {\n+        return outpoint != rhs.outpoint;\n+    }\n+\n+    bool operator==(const CInputCoin& rhs) const {\n+        return outpoint == rhs.outpoint;\n+    }\n+};\n \n class COutput\n {\n@@ -632,7 +661,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * all coins from coinControl are selected; Never select unconfirmed coins\n      * if they are not ours\n      */\n-    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -780,7 +809,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n@@ -1122,7 +1151,7 @@ class CAccount\n };\n \n // Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n-// ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n+// ContainerType is meant to hold CInputCoin, and be iterable\n // so that each entry corresponds to each vIn, in order.\n template <typename ContainerType>\n bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n@@ -1131,7 +1160,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     int nIn = 0;\n     for (const auto& coin : coins)\n     {\n-        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        const CScript& scriptPubKey = coin.txout.scriptPubKey;\n         SignatureData sigdata;\n \n         if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))"
      }
    ]
  },
  {
    "sha": "22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmE0NGU2OGM0YzhmZmIzNTJiYzNhNzIzYWZiMTJmNThhZWEyZTYx",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-24T04:33:52Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-05T04:40:19Z"
      },
      "message": "FundRawTransaction check into mempool and UTXO for the preset inputs",
      "tree": {
        "sha": "19821442710ad006c257839ea371df04f52f96f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19821442710ad006c257839ea371df04f52f96f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e959b125f7585c87781bd3063d72f79f857c985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e959b125f7585c87781bd3063d72f79f857c985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e959b125f7585c87781bd3063d72f79f857c985"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 62,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8cfefb3863157586d9e6d011b7280cecb3c28af4",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n+#include <map>\n \n /** Coin Control Features. */\n class CCoinControl\n@@ -76,8 +77,23 @@ class CCoinControl\n         vOutpoints.assign(setSelected.begin(), setSelected.end());\n     }\n \n+    void AddKnownCoins(const CInputCoin& coin)\n+    {\n+        knownCoins.insert(std::make_pair(coin.outpoint, coin));\n+    }\n+\n+    bool FindKnownCoin(const COutPoint& outpoint, CInputCoin& foundCoin) const\n+    {\n+        auto it = knownCoins.find(outpoint);\n+        if (it == knownCoins.end())\n+            return false;\n+        foundCoin = it->second;\n+        return true;\n+    }\n private:\n     std::set<COutPoint> setSelected;\n+    //! A map of known UTXO\n+    std::map<COutPoint, CInputCoin> knownCoins;\n };\n \n #endif // BITCOIN_WALLET_COINCONTROL_H"
      },
      {
        "sha": "75ddb146b4d262baeab0b0e8035359e5885c2dbe",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
        "patch": "@@ -2621,6 +2621,21 @@ UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n+bool FindInCoinView(const COutPoint& outpoint, CInputCoin& outputCoin)\n+{\n+    LOCK2(cs_main, mempool.cs);\n+    CCoinsViewMemPool coinsTipMempool(pcoinsTip, mempool);\r\n+    CCoinsViewCache view(&coinsTipMempool);\n+    CCoins coins;\n+    if (!view.GetCoins(outpoint.hash, coins))\n+        return false;\n+    if (outpoint.n >= coins.vout.size())\n+        return false;\n+    outputCoin.outpoint = outpoint;\n+    outputCoin.txout = coins.vout[outpoint.n];\n+    return !outputCoin.IsNull();\n+}\n+\n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -2774,6 +2789,18 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     coinControl.fOverrideFeeRate = overrideEstimatedFeerate;\n     coinControl.nFeeRate = feeRate;\n \n+    for(const CTxIn& txin: tx.vin)\n+    {\n+        CInputCoin coin;\n+        if (!pwallet->FindCoin(txin.prevout, coin) &&\n+            !FindInCoinView(txin.prevout, coin))\n+        {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"unknown-input\");\n+        }\n+        coinControl.AddKnownCoins(coin);\n+        coinControl.Select(txin.prevout);\n+    }\n+\n     if (!pwallet->FundTransaction(tx, nFeeOut, coinControl, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }"
      },
      {
        "sha": "8fe82d13f29a04ba3c323a0209cd850a8fff6d45",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
        "patch": "@@ -2211,17 +2211,11 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         coinControl->ListSelected(vPresetInputs);\n     BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n     {\n-        std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n-        if (it != mapWallet.end())\n-        {\n-            const CWalletTx* pcoin = &it->second;\n-            // Clearly invalid input, fail\n-            if (pcoin->tx->vout.size() <= outpoint.n)\n-                return false;\n-            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(CInputCoin(pcoin, outpoint.n));\n-        } else\n-            return false; // TODO: Allow non-wallet inputs\n+        CInputCoin foundCoin;\n+        if (!coinControl->FindKnownCoin(outpoint, foundCoin))\n+            return false;\n+        nValueFromPresetInputs += foundCoin.txout.nValue;\n+        setPresetCoins.insert(foundCoin);\n     }\n \n     // remove preset inputs from vCoins\n@@ -2266,9 +2260,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, CCoinCo\n         vecSend.push_back(recipient);\n     }\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        coinControl.Select(txin.prevout);\n-\n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n     if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n@@ -2303,6 +2294,18 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, CCoinCo\n     return true;\n }\n \n+bool CWallet::FindCoin(const COutPoint& outpoint, CInputCoin& foundCoin)\n+{\n+    LOCK(cs_wallet);\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n+    if (it != mapWallet.end())\n+    {\n+        foundCoin = CInputCoin(&it->second, outpoint.n);\n+        return !foundCoin.IsNull();\n+    }\n+    return false;\n+}\n+\n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {"
      },
      {
        "sha": "365eb93e2f62e0306ee7a90917aff52adafe0f0c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a44e68c4c8ffb352bc3a723afb12f58aea2e61/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
        "patch": "@@ -891,6 +891,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n \n+    bool FindCoin(const COutPoint& outpoint, CInputCoin& foundCoin);\n+\n     /**\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();"
      }
    ]
  },
  {
    "sha": "a3c8c7077780574159db13b1e44b99162709bed5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2M4YzcwNzc3ODA1NzQxNTlkYjEzYjFlNDRiOTkxNjI3MDliZWQ1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-24T06:34:24Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-05T04:41:49Z"
      },
      "message": "Remove useless remaining make_pair",
      "tree": {
        "sha": "6ca079267a0de5c6fb55983f1e976cdfd41a2d35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ca079267a0de5c6fb55983f1e976cdfd41a2d35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3c8c7077780574159db13b1e44b99162709bed5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3c8c7077780574159db13b1e44b99162709bed5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3c8c7077780574159db13b1e44b99162709bed5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3c8c7077780574159db13b1e44b99162709bed5/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a44e68c4c8ffb352bc3a723afb12f58aea2e61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a44e68c4c8ffb352bc3a723afb12f58aea2e61"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 25,
      "deletions": 26
    },
    "files": [
      {
        "sha": "8d7d2b19468787ab16b97aab3e25012b44dd01fd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 26,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3c8c7077780574159db13b1e44b99162709bed5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3c8c7077780574159db13b1e44b99162709bed5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a3c8c7077780574159db13b1e44b99162709bed5",
        "patch": "@@ -64,10 +64,10 @@ const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"00000000000000000000000000000000\n \n struct CompareValueOnly\n {\n-    bool operator()(const std::pair<CAmount, CInputCoin>& t1,\n-                    const std::pair<CAmount, CInputCoin>& t2) const\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n     {\n-        return t1.first < t2.first;\n+        return t1.txout.nValue < t2.txout.nValue;\n     }\n };\n \n@@ -2031,7 +2031,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n     }\n }\n \n-static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoin > >& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     std::vector<char> vfIncluded;\n@@ -2058,7 +2058,7 @@ static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoi\n                 //the selection random.\n                 if (nPass == 0 ? insecure_rand.rand32()&1 : !vfIncluded[i])\n                 {\n-                    nTotal += vValue[i].first;\n+                    nTotal += vValue[i].txout.nValue;\n                     vfIncluded[i] = true;\n                     if (nTotal >= nTargetValue)\n                     {\n@@ -2068,7 +2068,7 @@ static void ApproximateBestSubset(const std::vector<std::pair<CAmount, CInputCoi\n                             nBest = nTotal;\n                             vfBest = vfIncluded;\n                         }\n-                        nTotal -= vValue[i].first;\n+                        nTotal -= vValue[i].txout.nValue;\n                         vfIncluded[i] = false;\n                     }\n                 }\n@@ -2084,9 +2084,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     nValueRet = 0;\n \n     // List of values less than target\n-    std::pair<CAmount, CInputCoin> coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n-    std::vector<std::pair<CAmount, CInputCoin>> vValue;\n+    CInputCoin coinLowestLarger;\n+    std::vector<CInputCoin> vValue;\n     CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n@@ -2105,22 +2104,22 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-        CAmount n = pcoin->tx->vout[i].nValue;\n \n-        std::pair<CAmount, CInputCoin> coin = std::make_pair(n, CInputCoin(pcoin, i));\n+        CInputCoin coin = CInputCoin(pcoin, i);\n+        CAmount n = coin.txout.nValue;\n \n         if (n == nTargetValue)\n         {\n-            setCoinsRet.insert(coin.second);\n-            nValueRet += coin.first;\n+            setCoinsRet.insert(coin);\n+            nValueRet += n;\n             return true;\n         }\n         else if (n < nTargetValue + MIN_CHANGE)\n         {\n             vValue.push_back(coin);\n             nTotalLower += n;\n         }\n-        else if (n < coinLowestLarger.first)\n+        else if (coinLowestLarger.IsNull() || n < coinLowestLarger.txout.nValue)\n         {\n             coinLowestLarger = coin;\n         }\n@@ -2130,18 +2129,18 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     {\n         for (unsigned int i = 0; i < vValue.size(); ++i)\n         {\n-            setCoinsRet.insert(vValue[i].second);\n-            nValueRet += vValue[i].first;\n+            setCoinsRet.insert(vValue[i]);\n+            nValueRet += vValue[i].txout.nValue;\n         }\n         return true;\n     }\n \n     if (nTotalLower < nTargetValue)\n     {\n-        if (coinLowestLarger.second.IsNull())\n+        if (coinLowestLarger.IsNull())\n             return false;\n-        setCoinsRet.insert(coinLowestLarger.second);\n-        nValueRet += coinLowestLarger.first;\n+        setCoinsRet.insert(coinLowestLarger);\n+        nValueRet += coinLowestLarger.txout.nValue;\n         return true;\n     }\n \n@@ -2157,25 +2156,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n-    if (!coinLowestLarger.second.IsNull() &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n+    if (!coinLowestLarger.IsNull() &&\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.txout.nValue <= nBest))\n     {\n-        setCoinsRet.insert(coinLowestLarger.second);\n-        nValueRet += coinLowestLarger.first;\n+        setCoinsRet.insert(coinLowestLarger);\n+        nValueRet += coinLowestLarger.txout.nValue;\n     }\n     else {\n         for (unsigned int i = 0; i < vValue.size(); i++)\n             if (vfBest[i])\n             {\n-                setCoinsRet.insert(vValue[i].second);\n-                nValueRet += vValue[i].first;\n+                setCoinsRet.insert(vValue[i]);\n+                nValueRet += vValue[i].txout.nValue;\n             }\n \n         if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n             LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n             for (unsigned int i = 0; i < vValue.size(); i++) {\n                 if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].first));\n+                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n                 }\n             }\n             LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));"
      }
    ]
  },
  {
    "sha": "8074e8831959fb14e2776e619ff956977ddf8f73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDc0ZTg4MzE5NTlmYjE0ZTI3NzZlNjE5ZmY5NTY5NzdkZGY4Zjcz",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-24T12:02:34Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-05T04:41:50Z"
      },
      "message": "Do not DummySign input which are not solvable",
      "tree": {
        "sha": "46801345faa66b698368d51f66c298476b9b5565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46801345faa66b698368d51f66c298476b9b5565"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8074e8831959fb14e2776e619ff956977ddf8f73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8074e8831959fb14e2776e619ff956977ddf8f73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8074e8831959fb14e2776e619ff956977ddf8f73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8074e8831959fb14e2776e619ff956977ddf8f73/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3c8c7077780574159db13b1e44b99162709bed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3c8c7077780574159db13b1e44b99162709bed5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3c8c7077780574159db13b1e44b99162709bed5"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ee8167cc09bf07feeca892a6a6b4d22158adc729",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8074e8831959fb14e2776e619ff956977ddf8f73/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8074e8831959fb14e2776e619ff956977ddf8f73/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8074e8831959fb14e2776e619ff956977ddf8f73",
        "patch": "@@ -1164,14 +1164,16 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     {\n         const CScript& scriptPubKey = coin.txout.scriptPubKey;\n         SignatureData sigdata;\n-\n-        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n-        {\n-            return false;\n-        } else {\n-            UpdateTransaction(txNew, nIn, sigdata);\n+        auto ismine = IsMine(coin.txout);\n+        if (ismine == ISMINE_SPENDABLE || ismine == ISMINE_WATCH_SOLVABLE)\n+        { \n+            if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+            {\n+                return false;\n+            } else {\n+                UpdateTransaction(txNew, nIn, sigdata);\n+            }\n         }\n-\n         nIn++;\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "267b89e8cf214a2f03aa783fe6daef8c88db1448",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjdiODllOGNmMjE0YTJmMDNhYTc4M2ZlNmRhZWY4Yzg4ZGIxNDQ4",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-24T12:03:03Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-05T04:41:50Z"
      },
      "message": "Testing fundrawtransaction with TxOut in mempool or coinview",
      "tree": {
        "sha": "3a501df4d915b537bdad507aa9595ac5c9f93e28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a501df4d915b537bdad507aa9595ac5c9f93e28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/267b89e8cf214a2f03aa783fe6daef8c88db1448",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/267b89e8cf214a2f03aa783fe6daef8c88db1448",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/267b89e8cf214a2f03aa783fe6daef8c88db1448",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/267b89e8cf214a2f03aa783fe6daef8c88db1448/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8074e8831959fb14e2776e619ff956977ddf8f73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8074e8831959fb14e2776e619ff956977ddf8f73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8074e8831959fb14e2776e619ff956977ddf8f73"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3040fbc723ecb48455e1c051bea570c9baed8a10",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/267b89e8cf214a2f03aa783fe6daef8c88db1448/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/267b89e8cf214a2f03aa783fe6daef8c88db1448/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=267b89e8cf214a2f03aa783fe6daef8c88db1448",
        "patch": "@@ -63,6 +63,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 3.0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -307,6 +308,29 @@ def run_test(self):\n         assert_equal(matchingOuts, 2)\n         assert_equal(len(dec_tx['vout']), 3)\n \n+        ##############################################################################################\n+        # test a fundrawtransaction with one vin from wallet and one from mempool, one from CoinView #\n+        ##############################################################################################\n+        utx = get_unspent(self.nodes[0].listunspent(), 50)\n+        recei = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 4)\n+        self.sync_all()\n+        utx2 = get_unspent(self.nodes[2].listunspent(minconf=0, maxconf=0, addresses=None, include_unsafe=True), 4)\n+        utx3 = get_unspent(self.nodes[2].listunspent(), 3)\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']},{'txid' : utx3['txid'], 'vout' : utx3['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 50 + 4 + 3 + 2 }\n+        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+        dec_tx  = self.nodes[0].decoderawtransaction(rawtxfund['hex'])\n+        # Should contains the 3 previous vin + a new one added by the wallet\n+        assert_equal(len(dec_tx['vin']), 4)\n+        # Should contains the change, nodes[0] having only 50 BTC coins, it should returns around 43 BTC\n+        assert_equal(len(dec_tx['vout']), 2)\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+        assert_greater_than(totalOut, 50 + 4 + 3 + 2 + 42.9)\n+        assert_greater_than(50 + 4 + 3 + 2 + 43, totalOut)\n+\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n@@ -316,7 +340,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_jsonrpc(-4, \"unknown-input\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction"
      }
    ]
  }
]