[
  {
    "sha": "877e3af8bac76c00bc060943649debdab40e0344",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzdlM2FmOGJhYzc2YzAwYmMwNjA5NDM2NDlkZWJkYWI0MGUwMzQ0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-29T15:15:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:20:42Z"
      },
      "message": "Add a CHub for communication from p2p/wallet to blockstore.\n\nThe goal is for p2p code/wallet to only get information/communicate\ninformation about the blockchain through CHub, giving Bitcoin a\nmuch more clearly-defined structure and allowing for the removal\nof a ton of the current global mess.",
      "tree": {
        "sha": "5749ad1ee14d33fcde07f1e3dcf573860cac57a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5749ad1ee14d33fcde07f1e3dcf573860cac57a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/877e3af8bac76c00bc060943649debdab40e0344",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877e3af8bac76c00bc060943649debdab40e0344",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/877e3af8bac76c00bc060943649debdab40e0344",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877e3af8bac76c00bc060943649debdab40e0344/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "883a310904b3d36c9d74b887d47c14a072ebae7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/883a310904b3d36c9d74b887d47c14a072ebae7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/883a310904b3d36c9d74b887d47c14a072ebae7d"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 128,
      "deletions": 0
    },
    "files": [
      {
        "sha": "68a01ad4312a8d4c629fc24d4dbd8749cd3eadf6",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -115,6 +115,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/serialize.h \\\n     src/strlcpy.h \\\n     src/main.h \\\n+    src/hub.h \\\n     src/net.h \\\n     src/key.h \\\n     src/db.h \\\n@@ -180,6 +181,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/key.cpp \\\n     src/script.cpp \\\n     src/main.cpp \\\n+    src/hub.cpp \\\n     src/init.cpp \\\n     src/net.cpp \\\n     src/irc.cpp \\"
      },
      {
        "sha": "4e60a2336de89aa4f6e41b0c6576289865d6f4c0",
        "filename": "src/hub.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -0,0 +1,61 @@\n+#include \"hub.h\"\n+#include \"main.h\"\n+\n+CHub* phub;\n+\n+void CHub::ProcessCallbacks()\n+{\n+    {\n+        LOCK(cs_callbacks);\n+        if (fProcessCallbacks)\n+            nCallbackThreads++;\n+        else\n+            return;\n+    }\n+\n+    loop\n+    {\n+        CHubCallback *pcallback = NULL;\n+        sem_callbacks.wait();\n+        if (fProcessCallbacks)\n+        {\n+            LOCK(cs_callbacks);\n+            assert(queueCallbacks.size() > 0);\n+            pcallback = queueCallbacks.front();\n+            queueCallbacks.pop();\n+        }\n+        else\n+        {\n+            LOCK(cs_callbacks);\n+            nCallbackThreads--;\n+            return;\n+        }\n+\n+        pcallback->Signal(sigtable);\n+        delete pcallback;\n+    }\n+}\n+\n+void CHub::StopProcessCallbacks()\n+{\n+    {\n+        LOCK(cs_callbacks);\n+        fProcessCallbacks = false;\n+        for (int i = 0; i < nCallbackThreads; i++)\n+            sem_callbacks.post();\n+    }\n+    while (nCallbackThreads > 0)\n+        Sleep(20);\n+}\n+\n+void ProcessCallbacks(void* parg)\n+{\n+    ((CHub*)parg)->ProcessCallbacks();\n+}\n+\n+CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0)\n+{\n+    for (int i = 0; i < GetArg(\"-callbackconcurrency\", 1); i++)\n+        if (!CreateThread(::ProcessCallbacks, this))\n+            throw std::runtime_error(\"Couldn't create callback threads\");\n+}"
      },
      {
        "sha": "68b926ca620d7bc7e459399825c80e2cc6757773",
        "filename": "src/hub.h",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -0,0 +1,53 @@\n+#ifndef BITCOIN_HUB_H\n+#define BITCOIN_HUB_H\n+\n+// This API is considered stable ONLY for existing bitcoin codebases,\n+// any futher uses are not yet supported.\n+// This API is subject to change dramatically overnight, do not\n+// depend on it for anything.\n+\n+#include <boost/signals2/signal.hpp>\n+#include <queue>\n+\n+#include \"sync.h\"\n+\n+class CBlock;\n+\n+class CHubSignalTable\n+{\n+public:\n+};\n+\n+class CHubCallback\n+{\n+public:\n+    virtual ~CHubCallback() {};\n+    virtual void Signal(CHubSignalTable& sigtable) =0;\n+};\n+\n+class CHub\n+{\n+private:\n+    CHubSignalTable sigtable;\n+\n+    CCriticalSection cs_callbacks;\n+    std::queue<CHubCallback*> queueCallbacks;\n+    CSemaphore sem_callbacks;\n+\n+    bool fProcessCallbacks;\n+    int nCallbackThreads;\n+\n+public:\n+//Util methods\n+    // Loops to process callbacks (do not call manually, automatically started in the constructor)\n+        void ProcessCallbacks();\n+    // Stop callback processing threads \n+    void StopProcessCallbacks();\n+\n+    CHub();\n+    ~CHub()  { StopProcessCallbacks(); }\n+};\n+\n+extern CHub* phub;\n+\n+#endif"
      },
      {
        "sha": "f49f43d7542bebdba40a596988398803f1a4026f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -9,6 +9,7 @@\n #include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n+#include \"hub.h\"\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/filesystem/convenience.hpp>\n@@ -55,6 +56,7 @@ void Shutdown(void* parg)\n     if (fFirstThread)\n     {\n         fShutdown = true;\n+        if (phub) phub->StopProcessCallbacks();\n         nTransactionsUpdated++;\n         bitdb.Flush(false);\n         StopNode();\n@@ -527,6 +529,12 @@ bool AppInit2()\n         return false;\n     }\n \n+    try {\n+        phub = new CHub();\n+    } catch (runtime_error& e) {\n+        return InitError(_(\"Unable to create CHub.\"));\n+    }\n+\n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();"
      },
      {
        "sha": "464eb674e18026d4ffdda13a0f523f1ad6c2fe1a",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -65,6 +65,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hub.o \\\n     obj/noui.o\n \n all: bitcoind.exe"
      },
      {
        "sha": "5e2707ac5279c5ca2c3216333ac4ade16e672c42",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -62,6 +62,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hub.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "74fa94387803cf5b8b4a02e866eae9a56a458fd5",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -89,6 +89,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hub.o \\\n     obj/noui.o\n \n ifdef USE_UPNP"
      },
      {
        "sha": "1d8a75d5bcb01bd1b632d347e6b04685ee130cd3",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877e3af8bac76c00bc060943649debdab40e0344/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=877e3af8bac76c00bc060943649debdab40e0344",
        "patch": "@@ -109,6 +109,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hub.o \\\n     obj/noui.o\n \n "
      }
    ]
  },
  {
    "sha": "c42d0f15a2d7ad7779287643c7f087ca546e3a25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDJkMGYxNWEyZDdhZDc3NzkyODc2NDNjN2YwODdjYTU0NmUzYTI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T15:47:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:20:42Z"
      },
      "message": "Add a basic CHubListener that can be extended.",
      "tree": {
        "sha": "fe4f1706adf29237bf3e418fc37451ac7074af7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe4f1706adf29237bf3e418fc37451ac7074af7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c42d0f15a2d7ad7779287643c7f087ca546e3a25/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "877e3af8bac76c00bc060943649debdab40e0344",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877e3af8bac76c00bc060943649debdab40e0344",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/877e3af8bac76c00bc060943649debdab40e0344"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "82b9ccba3999ea1fb5620977568c7c2075629642",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c42d0f15a2d7ad7779287643c7f087ca546e3a25/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c42d0f15a2d7ad7779287643c7f087ca546e3a25/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=c42d0f15a2d7ad7779287643c7f087ca546e3a25",
        "patch": "@@ -3,6 +3,22 @@\n \n CHub* phub;\n \n+class CHubCallbackAskForBlocks : public CHubCallback\n+{\n+private:\n+    uint256 hashEnd, hashOrig;\n+public:\n+    CHubCallbackAskForBlocks(uint256 hashEndIn, uint256 hashOrigIn) : hashEnd(hashEndIn), hashOrig(hashOrigIn) {}\n+    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOrig); }\n+};\n+\n+void CHub::AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n+{\n+    LOCK(cs_callbacks);\n+        queueCallbacks.push(new CHubCallbackAskForBlocks(hashEnd, hashOriginator));\n+    sem_callbacks.post();\n+}\n+\n void CHub::ProcessCallbacks()\n {\n     {\n@@ -59,3 +75,15 @@ CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0)\n         if (!CreateThread(::ProcessCallbacks, this))\n             throw std::runtime_error(\"Couldn't create callback threads\");\n }\n+\n+\n+\n+void CHubListener::RegisterWithHub(CHub* phub)\n+{\n+    phub->RegisterAskForBlocks(boost::bind(&CHubListener::HandleAskForBlocks, this, _1, _2));\n+}\n+\n+void CHubListener::DeregisterFromHub()\n+{\n+    // TODO: Allow deregistration from CHub callbacks\n+}"
      },
      {
        "sha": "3cc7f65d1ef5670d1fc547518e49ec1675920e2b",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c42d0f15a2d7ad7779287643c7f087ca546e3a25/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c42d0f15a2d7ad7779287643c7f087ca546e3a25/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=c42d0f15a2d7ad7779287643c7f087ca546e3a25",
        "patch": "@@ -9,13 +9,16 @@\n #include <boost/signals2/signal.hpp>\n #include <queue>\n \n+#include \"uint256.h\"\n #include \"sync.h\"\n \n class CBlock;\n \n class CHubSignalTable\n {\n public:\n+    CCriticalSection cs_sigAskForBlocks;\n+    boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n };\n \n class CHubCallback\n@@ -46,6 +49,36 @@ class CHub\n \n     CHub();\n     ~CHub()  { StopProcessCallbacks(); }\n+\n+//Register methods\n+    // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n+    //   Should always start from the best block (GetBestBlockIndex())\n+    //   The receiver should check if it has a peer which is known to have a block with hash hashOriginator and if it does, it should\n+    //    send the block query to that node.\n+    void RegisterAskForBlocks(boost::function<void (const uint256, const uint256)> func) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks.connect(func); }\n+\n+//Connected wallet/etc access methods\n+\n+    // Ask that any listeners who have access to ask other nodes for blocks\n+    // (ie net) ask for all blocks between GetBestBlockIndex() and hashEnd\n+    // If hashOriginator is specified, then a node which is known to have a block\n+    //   with that hash will be the one to get the block request, unless no connected\n+    //   nodes are known to have this block, in which case a random one will be queried.\n+    void AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator);\n+};\n+\n+// A simple generic CHub Listening class which can be extended, if you wish\n+class CHubListener\n+{\n+public:\n+    void RegisterWithHub(CHub* phub);\n+    void DeregisterFromHub();\n+\n+    CHubListener() {}\n+    CHubListener(CHub* phub) { RegisterWithHub(phub); }\n+    ~CHubListener() { DeregisterFromHub(); }\n+\n+    virtual void HandleAskForBlocks(const uint256, const uint256) {}\n };\n \n extern CHub* phub;"
      },
      {
        "sha": "99febe0cc0412847e3a52604c85ecc383658b420",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c42d0f15a2d7ad7779287643c7f087ca546e3a25/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c42d0f15a2d7ad7779287643c7f087ca546e3a25/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c42d0f15a2d7ad7779287643c7f087ca546e3a25",
        "patch": "@@ -10,6 +10,7 @@\n #include \"strlcpy.h\"\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n+#include \"hub.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -86,6 +87,32 @@ unsigned short GetListenPort()\n     return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n }\n \n+void AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n+{\n+    CInv inv(MSG_BLOCK, hashOriginator);\n+    CNode* pnodeToAsk = NULL;\n+    {\n+        LOCK(cs_vNodes);\n+        if (hashOriginator != 0)\n+        {\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n+            {\n+                LOCK(pnode->cs_inventory);\n+                if (pnode->setInventoryKnown.count(inv))\n+                {\n+                    pnodeToAsk = pnode;\n+                    break;\n+                }\n+            }\n+        }\n+        if (pnodeToAsk == NULL)\n+            pnodeToAsk = vNodes.front();\n+        pnodeToAsk->AddRef();\n+    }\n+    pnodeToAsk->PushGetBlocks(pindexBest, hashEnd);\n+    pnodeToAsk->Release();\n+}\n+\n void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n {\n     // Filter out duplicate requests\n@@ -1833,6 +1860,8 @@ void static Discover()\n \n void StartNode(void* parg)\n {\n+    phub->RegisterAskForBlocks(&AskForBlocks);\n+\n     if (semOutbound == NULL) {\n         // initialize semaphore\n         int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, (int)GetArg(\"-maxconnections\", 125));"
      }
    ]
  },
  {
    "sha": "dd3593c500f931aab72af5929a72bfcc7ca99355",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDM1OTNjNTAwZjkzMWFhYjcyYWY1OTI5YTcyYmZjYzdjYTk5MzU1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T00:45:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:21Z"
      },
      "message": "Add EmitBlock/CommitBlock functionality to CHub.\n\nReplacing ProcessBlock with EmitBlock, and creating callbacks for\nCommitBlock.",
      "tree": {
        "sha": "8f6154598c7ea2d2bb82a600f61079be9c5c6f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f6154598c7ea2d2bb82a600f61079be9c5c6f9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd3593c500f931aab72af5929a72bfcc7ca99355",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3593c500f931aab72af5929a72bfcc7ca99355",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3593c500f931aab72af5929a72bfcc7ca99355",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3593c500f931aab72af5929a72bfcc7ca99355/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c42d0f15a2d7ad7779287643c7f087ca546e3a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c42d0f15a2d7ad7779287643c7f087ca546e3a25"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 69,
      "deletions": 31
    },
    "files": [
      {
        "sha": "19ead36861f3a897f10fcc643c31c634754db367",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3593c500f931aab72af5929a72bfcc7ca99355/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3593c500f931aab72af5929a72bfcc7ca99355/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=dd3593c500f931aab72af5929a72bfcc7ca99355",
        "patch": "@@ -12,6 +12,7 @@\n #include \"ui_interface.h\"\n #include \"base58.h\"\n #include \"bitcoinrpc.h\"\n+#include \"hub.h\"\n \n #undef printf\n #include <boost/asio.hpp>\n@@ -2190,7 +2191,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n         CBlock pblock;\n         ssBlock >> pblock;\n \n-        return ProcessBlock(NULL, &pblock);\n+        return phub->EmitBlock(pblock);\n     }\n }\n "
      },
      {
        "sha": "93555cf6bf3d6c2e8d50e41ec030583e651e7a7c",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3593c500f931aab72af5929a72bfcc7ca99355/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3593c500f931aab72af5929a72bfcc7ca99355/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=dd3593c500f931aab72af5929a72bfcc7ca99355",
        "patch": "@@ -3,6 +3,15 @@\n \n CHub* phub;\n \n+class CHubCallbackCommitBlock : public CHubCallback\n+{\n+private:\n+    CBlock block;\n+public:\n+    CHubCallbackCommitBlock(const CBlock &blockIn) : block(blockIn) {}\n+    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock(block); }\n+};\n+\n class CHubCallbackAskForBlocks : public CHubCallback\n {\n private:\n@@ -12,6 +21,13 @@ class CHubCallbackAskForBlocks : public CHubCallback\n     void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOrig); }\n };\n \n+void CHub::SubmitCallbackCommitBlock(const CBlock &block)\n+{\n+    LOCK(cs_callbacks);\n+        queueCallbacks.push(new CHubCallbackCommitBlock(block));\n+    sem_callbacks.post();\n+}\n+\n void CHub::AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n {\n     LOCK(cs_callbacks);\n@@ -80,6 +96,8 @@ CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0)\n \n void CHubListener::RegisterWithHub(CHub* phub)\n {\n+    phub->RegisterCommitBlock(boost::bind(&CHubListener::HandleCommitBlock, this, _1));\n+\n     phub->RegisterAskForBlocks(boost::bind(&CHubListener::HandleAskForBlocks, this, _1, _2));\n }\n "
      },
      {
        "sha": "5264a81383faadb3edd660c29e436c94dd6920f9",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3593c500f931aab72af5929a72bfcc7ca99355/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3593c500f931aab72af5929a72bfcc7ca99355/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=dd3593c500f931aab72af5929a72bfcc7ca99355",
        "patch": "@@ -17,6 +17,9 @@ class CBlock;\n class CHubSignalTable\n {\n public:\n+    CCriticalSection cs_sigCommitBlock;\n+    boost::signals2::signal<void (const CBlock&)> sigCommitBlock;\n+\n     CCriticalSection cs_sigAskForBlocks;\n     boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n };\n@@ -40,6 +43,7 @@ class CHub\n     bool fProcessCallbacks;\n     int nCallbackThreads;\n \n+    void SubmitCallbackCommitBlock(const CBlock &block);\n public:\n //Util methods\n     // Loops to process callbacks (do not call manually, automatically started in the constructor)\n@@ -51,12 +55,20 @@ class CHub\n     ~CHub()  { StopProcessCallbacks(); }\n \n //Register methods\n+    // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n+    void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n+\n     // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n     //   Should always start from the best block (GetBestBlockIndex())\n     //   The receiver should check if it has a peer which is known to have a block with hash hashOriginator and if it does, it should\n     //    send the block query to that node.\n     void RegisterAskForBlocks(boost::function<void (const uint256, const uint256)> func) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks.connect(func); }\n \n+//Blockchain access methods\n+    // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n+    //   be handled by listeners\n+    bool EmitBlock(CBlock& block);\n+\n //Connected wallet/etc access methods\n \n     // Ask that any listeners who have access to ask other nodes for blocks\n@@ -78,6 +90,9 @@ class CHubListener\n     CHubListener(CHub* phub) { RegisterWithHub(phub); }\n     ~CHubListener() { DeregisterFromHub(); }\n \n+protected:\n+    virtual void HandleCommitBlock(const CBlock& block) {}\n+\n     virtual void HandleAskForBlocks(const uint256, const uint256) {}\n };\n "
      },
      {
        "sha": "cf89602dcadb6e983efa96aa90cb12a032a471d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 29,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3593c500f931aab72af5929a72bfcc7ca99355/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3593c500f931aab72af5929a72bfcc7ca99355/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dd3593c500f931aab72af5929a72bfcc7ca99355",
        "patch": "@@ -8,6 +8,7 @@\n #include \"net.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n+#include \"hub.h\"\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -1778,60 +1779,60 @@ bool CBlock::AcceptBlock()\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CHub::EmitBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n+\n     if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return error(\"CHub::EmitBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n     if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+        return error(\"CHub::EmitBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+        return error(\"CHub::EmitBlock() : CheckBlock FAILED\");\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            return block.DoS(100, error(\"CHub::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            return block.DoS(100, error(\"CHub::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CHub::EmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        AskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!block.AcceptBlock())\n+        return error(\"CHub::EmitBlock() : AcceptBlock FAILED\");\n+\n+    SubmitCallbackCommitBlock(block);\n \n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n@@ -1845,14 +1846,18 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n             if (pblockOrphan->AcceptBlock())\n+            {\n                 vWorkQueue.push_back(pblockOrphan->GetHash());\n+                SubmitCallbackCommitBlock(*pblockOrphan);\n+            }\n             mapOrphanBlocks.erase(pblockOrphan->GetHash());\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CHub::EmitBlock: ACCEPTED\\n\");\n+\n     return true;\n }\n \n@@ -2114,7 +2119,7 @@ bool LoadExternalBlockFile(FILE* fileIn)\n                 {\n                     CBlock block;\n                     blkdat >> block;\n-                    if (ProcessBlock(NULL,&block))\n+                    if (phub->EmitBlock(block))\n                     {\n                         nLoaded++;\n                         nPos += 4 + nSize;\n@@ -2767,7 +2772,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if (ProcessBlock(pfrom, &block))\n+        if (phub->EmitBlock(block))\n             mapAlreadyAskedFor.erase(inv);\n         if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n     }\n@@ -3537,8 +3542,8 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n         }\n \n         // Process this block the same as if we had received it from another node\n-        if (!ProcessBlock(NULL, pblock))\n-            return error(\"BitcoinMiner : ProcessBlock, block not accepted\");\n+        if (!phub->EmitBlock(*pblock))\n+            return error(\"BitcoinMiner : phub->EmitBlock, block not accepted\");\n     }\n \n     return true;"
      },
      {
        "sha": "63c61043e967682fed2f5fe883b85c8466e98abe",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3593c500f931aab72af5929a72bfcc7ca99355/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3593c500f931aab72af5929a72bfcc7ca99355/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=dd3593c500f931aab72af5929a72bfcc7ca99355",
        "patch": "@@ -82,7 +82,6 @@ class CTxIndex;\n void RegisterWallet(CWallet* pwalletIn);\n void UnregisterWallet(CWallet* pwalletIn);\n void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n-bool ProcessBlock(CNode* pfrom, CBlock* pblock);\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);"
      }
    ]
  },
  {
    "sha": "e6d39a887308fd65b62051380477528ef6f6b9f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmQzOWE4ODczMDhmZDY1YjYyMDUxMzgwNDc3NTI4ZWY2ZjZiOWY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:00:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:22Z"
      },
      "message": "Fix typo",
      "tree": {
        "sha": "0b62a999a63e580caacf1058e9f6c4b07319c2d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b62a999a63e580caacf1058e9f6c4b07319c2d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d39a887308fd65b62051380477528ef6f6b9f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d39a887308fd65b62051380477528ef6f6b9f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d39a887308fd65b62051380477528ef6f6b9f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d39a887308fd65b62051380477528ef6f6b9f6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "dd3593c500f931aab72af5929a72bfcc7ca99355",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3593c500f931aab72af5929a72bfcc7ca99355",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3593c500f931aab72af5929a72bfcc7ca99355"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a53364f284caef558835d7b9e778d46bbc3adf31",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d39a887308fd65b62051380477528ef6f6b9f6/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d39a887308fd65b62051380477528ef6f6b9f6/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=e6d39a887308fd65b62051380477528ef6f6b9f6",
        "patch": "@@ -2188,10 +2188,10 @@ Value getmemorypool(const Array& params, bool fHelp)\n     {\n         // Parse parameters\n         CDataStream ssBlock(ParseHex(params[0].get_str()), SER_NETWORK, PROTOCOL_VERSION);\n-        CBlock pblock;\n-        ssBlock >> pblock;\n+        CBlock block;\n+        ssBlock >> block;\n \n-        return phub->EmitBlock(pblock);\n+        return phub->EmitBlock(block);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "159c528cec68498d202f6f17d57825bdcf89d0c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTljNTI4Y2VjNjg0OThkMjAyZjZmMTdkNTc4MjViZGNmODlkMGM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:21:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:23Z"
      },
      "message": "Add HandleCommitBlock to net.cpp & move stuff from main.cpp to it",
      "tree": {
        "sha": "0ef1ac35b26268a4fa934763f3b331f57a9a22ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ef1ac35b26268a4fa934763f3b331f57a9a22ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159c528cec68498d202f6f17d57825bdcf89d0c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159c528cec68498d202f6f17d57825bdcf89d0c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159c528cec68498d202f6f17d57825bdcf89d0c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159c528cec68498d202f6f17d57825bdcf89d0c5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e6d39a887308fd65b62051380477528ef6f6b9f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d39a887308fd65b62051380477528ef6f6b9f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d39a887308fd65b62051380477528ef6f6b9f6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 21,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ac269c89c731fdc06fa3f70cde8d4b5e7b322e89",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159c528cec68498d202f6f17d57825bdcf89d0c5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159c528cec68498d202f6f17d57825bdcf89d0c5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=159c528cec68498d202f6f17d57825bdcf89d0c5",
        "patch": "@@ -1766,16 +1766,6 @@ bool CBlock::AcceptBlock()\n     if (!AddToBlockIndex(nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n "
      },
      {
        "sha": "63824698b2f01f2bf31ac55fab632f7ddac26852",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159c528cec68498d202f6f17d57825bdcf89d0c5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159c528cec68498d202f6f17d57825bdcf89d0c5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=159c528cec68498d202f6f17d57825bdcf89d0c5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n #include \"hub.h\"\n+#include \"checkpoints.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -87,6 +88,25 @@ unsigned short GetListenPort()\n     return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n }\n \n+\n+\n+void HandleCommitBlock(const CBlock& block)\n+{\n+    // Relay inventory, but don't relay old inventory during initial block download\n+    uint256 hash = block.GetHash();\n+    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n+    if (hashBestChain == hash)\n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n+            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n+                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n+    }\n+}\n+\n+\n+\n+\n void AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n {\n     CInv inv(MSG_BLOCK, hashOriginator);\n@@ -1861,6 +1881,7 @@ void static Discover()\n void StartNode(void* parg)\n {\n     phub->RegisterAskForBlocks(&AskForBlocks);\n+    phub->RegisterCommitBlock(&HandleCommitBlock);\n \n     if (semOutbound == NULL) {\n         // initialize semaphore"
      }
    ]
  },
  {
    "sha": "94a440ae79cd865e235b8c59a8b4ad59781cc42a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGE0NDBhZTc5Y2Q4NjVlMjM1YjhjNTlhOGI0YWQ1OTc4MWNjNDJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:43:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:24Z"
      },
      "message": "Remove uiInterface.NotifyBlocksChanged and replace with CommitBlock\n\nAlso rename NotifyBlocksChanged to NotifyNewBlock and remove from\nthe uiInterface signals list.\n\nThis removes some functionality, but NofiyBlocksChanged was not\nused anyway, so it shouldn't matter.  That said, if it is ever\nneeded, it would be fairly trivial to add a new callback for it\nin CHub.",
      "tree": {
        "sha": "11508385e1ca31fed5a6b545d08d31d2cf2d153a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11508385e1ca31fed5a6b545d08d31d2cf2d153a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a440ae79cd865e235b8c59a8b4ad59781cc42a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "159c528cec68498d202f6f17d57825bdcf89d0c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159c528cec68498d202f6f17d57825bdcf89d0c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/159c528cec68498d202f6f17d57825bdcf89d0c5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "22e57a105faf5ff57d40a543d978c650d1b6a4c3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94a440ae79cd865e235b8c59a8b4ad59781cc42a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94a440ae79cd865e235b8c59a8b4ad59781cc42a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=94a440ae79cd865e235b8c59a8b4ad59781cc42a",
        "patch": "@@ -961,7 +961,6 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     {\n         bnBestInvalidWork = pindexNew->bnChainWork;\n         CTxDB().WriteBestInvalidWork(bnBestInvalidWork);\n-        uiInterface.NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n@@ -1664,7 +1663,6 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n         hashPrevBestCoinBase = vtx[0].GetHash();\n     }\n \n-    uiInterface.NotifyBlocksChanged();\n     return true;\n }\n "
      },
      {
        "sha": "4955d0eca80ebbd801fd1791caf45b375cbbe944",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94a440ae79cd865e235b8c59a8b4ad59781cc42a/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94a440ae79cd865e235b8c59a8b4ad59781cc42a/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=94a440ae79cd865e235b8c59a8b4ad59781cc42a",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactiontablemodel.h\"\n \n #include \"main.h\"\n+#include \"hub.h\"\n #include \"ui_interface.h\"\n \n #include <QDateTime>\n@@ -136,7 +137,7 @@ QString ClientModel::formatClientStartupTime() const\n }\n \n // Handlers for core signals\n-static void NotifyBlocksChanged(ClientModel *clientmodel)\n+static void NotifyNewBlock(ClientModel *clientmodel, const CBlock& block)\n {\n     // This notification is too frequent. Don't trigger a signal.\n     // Don't remove it, though, as it might be useful later.\n@@ -160,15 +161,15 @@ static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, Ch\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    uiInterface.NotifyBlocksChanged.connect(boost::bind(NotifyBlocksChanged, this));\n+    phub->RegisterCommitBlock(boost::bind(NotifyNewBlock, this, _1));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n-    uiInterface.NotifyBlocksChanged.disconnect(boost::bind(NotifyBlocksChanged, this));\n+    //  Note that CHub does not support disconnecting (yet)!\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n }"
      },
      {
        "sha": "dba72314b5c3e8020ca06b038891be880b90e2b5",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94a440ae79cd865e235b8c59a8b4ad59781cc42a/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94a440ae79cd865e235b8c59a8b4ad59781cc42a/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=94a440ae79cd865e235b8c59a8b4ad59781cc42a",
        "patch": "@@ -76,9 +76,6 @@ class CClientUIInterface\n     /** Translate a message to the native language of the user. */\n     boost::signals2::signal<std::string (const char* psz)> Translate;\n \n-    /** Block chain changed. */\n-    boost::signals2::signal<void ()> NotifyBlocksChanged;\n-\n     /** Number of network connections changed. */\n     boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n "
      }
    ]
  },
  {
    "sha": "1aad2e99bbc48b03197d389d59243a9efc1add29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWFkMmU5OWJiYzQ4YjAzMTk3ZDM4OWQ1OTI0M2E5ZWZjMWFkZDI5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:03:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:25Z"
      },
      "message": "Add EmitAlert/CommitAlert functionality to CHub.\n\nReplace ProcessAlert with calls to EmitAlert and create callbacks\nfor CommitAlert.",
      "tree": {
        "sha": "ca27ab024da3f0a52462195983dcc0ef17c7c207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca27ab024da3f0a52462195983dcc0ef17c7c207"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aad2e99bbc48b03197d389d59243a9efc1add29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aad2e99bbc48b03197d389d59243a9efc1add29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1aad2e99bbc48b03197d389d59243a9efc1add29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aad2e99bbc48b03197d389d59243a9efc1add29/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "94a440ae79cd865e235b8c59a8b4ad59781cc42a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94a440ae79cd865e235b8c59a8b4ad59781cc42a"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 44,
      "deletions": 18
    },
    "files": [
      {
        "sha": "640849ea3ce625af59c44d6af1e311e41d300eb8",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aad2e99bbc48b03197d389d59243a9efc1add29/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aad2e99bbc48b03197d389d59243a9efc1add29/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=1aad2e99bbc48b03197d389d59243a9efc1add29",
        "patch": "@@ -12,6 +12,15 @@ class CHubCallbackCommitBlock : public CHubCallback\n     void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock(block); }\n };\n \n+class CHubCallbackCommitAlert : public CHubCallback\n+{\n+private:\n+    CAlert alert;\n+public:\n+    CHubCallbackCommitAlert(const CAlert &alertIn) : alert(alertIn) {}\n+    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert(alert); }\n+};\n+\n class CHubCallbackAskForBlocks : public CHubCallback\n {\n private:\n@@ -28,6 +37,13 @@ void CHub::SubmitCallbackCommitBlock(const CBlock &block)\n     sem_callbacks.post();\n }\n \n+void CHub::SubmitCallbackCommitAlert(const CAlert &alert)\n+{\n+    LOCK(cs_callbacks);\n+        queueCallbacks.push(new CHubCallbackCommitAlert(alert));\n+    sem_callbacks.post();\n+}\n+\n void CHub::AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n {\n     LOCK(cs_callbacks);\n@@ -97,6 +113,7 @@ CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0)\n void CHubListener::RegisterWithHub(CHub* phub)\n {\n     phub->RegisterCommitBlock(boost::bind(&CHubListener::HandleCommitBlock, this, _1));\n+    phub->RegisterCommitAlert(boost::bind(&CHubListener::HandleCommitAlert, this, _1));\n \n     phub->RegisterAskForBlocks(boost::bind(&CHubListener::HandleAskForBlocks, this, _1, _2));\n }"
      },
      {
        "sha": "9f4a99fd59a566ce85a87663a020647b52a05682",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aad2e99bbc48b03197d389d59243a9efc1add29/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aad2e99bbc48b03197d389d59243a9efc1add29/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=1aad2e99bbc48b03197d389d59243a9efc1add29",
        "patch": "@@ -13,13 +13,17 @@\n #include \"sync.h\"\n \n class CBlock;\n+class CAlert;\n \n class CHubSignalTable\n {\n public:\n     CCriticalSection cs_sigCommitBlock;\n     boost::signals2::signal<void (const CBlock&)> sigCommitBlock;\n \n+    CCriticalSection cs_sigCommitAlert;\n+    boost::signals2::signal<void (const CAlert&)> sigCommitAlert;\n+\n     CCriticalSection cs_sigAskForBlocks;\n     boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n };\n@@ -44,6 +48,7 @@ class CHub\n     int nCallbackThreads;\n \n     void SubmitCallbackCommitBlock(const CBlock &block);\n+    void SubmitCallbackCommitAlert(const CAlert &alert);\n public:\n //Util methods\n     // Loops to process callbacks (do not call manually, automatically started in the constructor)\n@@ -58,6 +63,9 @@ class CHub\n     // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n     void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n \n+    // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert commit\n+    void RegisterCommitAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert.connect(func); }\n+\n     // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n     //   Should always start from the best block (GetBestBlockIndex())\n     //   The receiver should check if it has a peer which is known to have a block with hash hashOriginator and if it does, it should\n@@ -68,6 +76,7 @@ class CHub\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n     bool EmitBlock(CBlock& block);\n+    bool EmitAlert(CAlert& alert);\n \n //Connected wallet/etc access methods\n \n@@ -92,6 +101,7 @@ class CHubListener\n \n protected:\n     virtual void HandleCommitBlock(const CBlock& block) {}\n+    virtual void HandleCommitAlert(const CAlert& alert) {}\n \n     virtual void HandleAskForBlocks(const uint256, const uint256) {}\n };"
      },
      {
        "sha": "635469494818438254bafbaae8711a840e6dbf37",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aad2e99bbc48b03197d389d59243a9efc1add29/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aad2e99bbc48b03197d389d59243a9efc1add29/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1aad2e99bbc48b03197d389d59243a9efc1add29",
        "patch": "@@ -2196,28 +2196,28 @@ CAlert CAlert::getAlertByHash(const uint256 &hash)\n     return retval;\n }\n \n-bool CAlert::ProcessAlert()\n+bool CHub::EmitAlert(CAlert& alert)\n {\n-    if (!CheckSignature())\n+    if (!alert.CheckSignature())\n         return false;\n-    if (!IsInEffect())\n+    if (!alert.IsInEffect())\n         return false;\n \n     {\n         LOCK(cs_mapAlerts);\n         // Cancel previous alerts\n         for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n         {\n-            const CAlert& alert = (*mi).second;\n-            if (Cancels(alert))\n+            const CAlert& alert2 = (*mi).second;\n+            if (alert.Cancels(alert2))\n             {\n-                printf(\"cancelling alert %d\\n\", alert.nID);\n+                printf(\"cancelling alert %d\\n\", alert2.nID);\n                 uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n                 mapAlerts.erase(mi++);\n             }\n-            else if (!alert.IsInEffect())\n+            else if (!alert2.IsInEffect())\n             {\n-                printf(\"expiring alert %d\\n\", alert.nID);\n+                printf(\"expiring alert %d\\n\", alert2.nID);\n                 uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n                 mapAlerts.erase(mi++);\n             }\n@@ -2228,22 +2228,23 @@ bool CAlert::ProcessAlert()\n         // Check if this alert has been cancelled\n         BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n         {\n-            const CAlert& alert = item.second;\n-            if (alert.Cancels(*this))\n+            const CAlert& alert2 = item.second;\n+            if (alert2.Cancels(alert))\n             {\n-                printf(\"alert already cancelled by %d\\n\", alert.nID);\n+                printf(\"alert already cancelled by %d\\n\", alert2.nID);\n                 return false;\n             }\n         }\n \n         // Add to mapAlerts\n-        mapAlerts.insert(make_pair(GetHash(), *this));\n+        mapAlerts.insert(make_pair(alert.GetHash(), alert));\n         // Notify UI if it applies to me\n-        if(AppliesToMe())\n-            uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n+        if(alert.AppliesToMe())\n+            uiInterface.NotifyAlertChanged(alert.GetHash(), CT_NEW);\n     }\n \n-    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n+    printf(\"accepted alert %d, AppliesToMe()=%d\\n\", alert.nID, alert.AppliesToMe());\n+    SubmitCallbackCommitAlert(alert);\n     return true;\n }\n \n@@ -2849,7 +2850,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CAlert alert;\n         vRecv >> alert;\n \n-        if (alert.ProcessAlert())\n+        if (phub->EmitAlert(alert))\n         {\n             // Relay\n             pfrom->setKnown.insert(alert.GetHash());"
      },
      {
        "sha": "beb930eb35c67fd3698cc1664f6499f2d208f248",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aad2e99bbc48b03197d389d59243a9efc1add29/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aad2e99bbc48b03197d389d59243a9efc1add29/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1aad2e99bbc48b03197d389d59243a9efc1add29",
        "patch": "@@ -1584,8 +1584,6 @@ class CAlert : public CUnsignedAlert\n         return true;\n     }\n \n-    bool ProcessAlert();\n-\n     /*\n      * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n      */"
      }
    ]
  },
  {
    "sha": "5365eca78c4458fbb88ec5c1641d6826d80d8d68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzY1ZWNhNzhjNDQ1OGZiYjg4ZWM1YzE2NDFkNjgyNmQ4MGQ4ZDY4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:23:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:26Z"
      },
      "message": "Use CommitAlert in qt/clientmodel.cpp",
      "tree": {
        "sha": "cc1a22f1111c64a35ba2e36ede92ad7940eda039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc1a22f1111c64a35ba2e36ede92ad7940eda039"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5365eca78c4458fbb88ec5c1641d6826d80d8d68/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1aad2e99bbc48b03197d389d59243a9efc1add29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aad2e99bbc48b03197d389d59243a9efc1add29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1aad2e99bbc48b03197d389d59243a9efc1add29"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "565e32c861bea2dd0ae6098b29227e1453be0833",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5365eca78c4458fbb88ec5c1641d6826d80d8d68/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5365eca78c4458fbb88ec5c1641d6826d80d8d68/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5365eca78c4458fbb88ec5c1641d6826d80d8d68",
        "patch": "@@ -2238,9 +2238,6 @@ bool CHub::EmitAlert(CAlert& alert)\n \n         // Add to mapAlerts\n         mapAlerts.insert(make_pair(alert.GetHash(), alert));\n-        // Notify UI if it applies to me\n-        if(alert.AppliesToMe())\n-            uiInterface.NotifyAlertChanged(alert.GetHash(), CT_NEW);\n     }\n \n     printf(\"accepted alert %d, AppliesToMe()=%d\\n\", alert.nID, alert.AppliesToMe());"
      },
      {
        "sha": "f8fee212b90c1e9f18bd8248cb5211a4f0fed96a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5365eca78c4458fbb88ec5c1641d6826d80d8d68/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5365eca78c4458fbb88ec5c1641d6826d80d8d68/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=5365eca78c4458fbb88ec5c1641d6826d80d8d68",
        "patch": "@@ -158,12 +158,19 @@ static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, Ch\n                               Q_ARG(int, status));\n }\n \n+static void NotifyAlertCommitted(ClientModel *clientmodel, const CAlert& alert)\n+{\n+    if (alert.AppliesToMe())\n+        NotifyAlertChanged(clientmodel, alert.GetHash(), CT_NEW);\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     phub->RegisterCommitBlock(boost::bind(NotifyNewBlock, this, _1));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+    phub->RegisterCommitAlert(boost::bind(NotifyAlertCommitted, this, _1));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()"
      }
    ]
  },
  {
    "sha": "7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGEwYmVkMWYyOWJkM2MwNDAxMTkxZWE5YzhlYTc0OWZmZjQzNmNl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:30:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:27Z"
      },
      "message": "Add RegisterRemoveAlert functionality to CHub.",
      "tree": {
        "sha": "941c9cb687edff60a0ae5384bcd90710c38bf5c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/941c9cb687edff60a0ae5384bcd90710c38bf5c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5365eca78c4458fbb88ec5c1641d6826d80d8d68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5365eca78c4458fbb88ec5c1641d6826d80d8d68"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "851f97061acc0cf912b7e50acee8c2f61b7b6d0f",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
        "patch": "@@ -21,6 +21,15 @@ class CHubCallbackCommitAlert : public CHubCallback\n     void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert(alert); }\n };\n \n+class CHubCallbackRemoveAlert : public CHubCallback\n+{\n+private:\n+    CAlert alert;\n+public:\n+    CHubCallbackRemoveAlert(const CAlert &alertIn) : alert(alertIn) {}\n+    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigRemoveAlert); sigtable.sigRemoveAlert(alert); }\n+};\n+\n class CHubCallbackAskForBlocks : public CHubCallback\n {\n private:\n@@ -44,6 +53,13 @@ void CHub::SubmitCallbackCommitAlert(const CAlert &alert)\n     sem_callbacks.post();\n }\n \n+void CHub::SubmitCallbackRemoveAlert(const CAlert &alert)\n+{\n+    LOCK(cs_callbacks);\n+        queueCallbacks.push(new CHubCallbackRemoveAlert(alert));\n+    sem_callbacks.post();\n+}\n+\n void CHub::AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n {\n     LOCK(cs_callbacks);\n@@ -113,7 +129,9 @@ CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0)\n void CHubListener::RegisterWithHub(CHub* phub)\n {\n     phub->RegisterCommitBlock(boost::bind(&CHubListener::HandleCommitBlock, this, _1));\n+\n     phub->RegisterCommitAlert(boost::bind(&CHubListener::HandleCommitAlert, this, _1));\n+    phub->RegisterRemoveAlert(boost::bind(&CHubListener::HandleRemoveAlert, this, _1));\n \n     phub->RegisterAskForBlocks(boost::bind(&CHubListener::HandleAskForBlocks, this, _1, _2));\n }"
      },
      {
        "sha": "de0bb082d69daa8021a99259839046c47c3bc2e1",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
        "patch": "@@ -23,6 +23,8 @@ class CHubSignalTable\n \n     CCriticalSection cs_sigCommitAlert;\n     boost::signals2::signal<void (const CAlert&)> sigCommitAlert;\n+    CCriticalSection cs_sigRemoveAlert;\n+    boost::signals2::signal<void (const CAlert&)> sigRemoveAlert;\n \n     CCriticalSection cs_sigAskForBlocks;\n     boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n@@ -48,7 +50,9 @@ class CHub\n     int nCallbackThreads;\n \n     void SubmitCallbackCommitBlock(const CBlock &block);\n+\n     void SubmitCallbackCommitAlert(const CAlert &alert);\n+    void SubmitCallbackRemoveAlert(const CAlert &alert);\n public:\n //Util methods\n     // Loops to process callbacks (do not call manually, automatically started in the constructor)\n@@ -65,6 +69,8 @@ class CHub\n \n     // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert commit\n     void RegisterCommitAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert.connect(func); }\n+    // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert cancel or expire\n+    void RegisterRemoveAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigRemoveAlert); sigtable.sigRemoveAlert.connect(func); }\n \n     // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n     //   Should always start from the best block (GetBestBlockIndex())\n@@ -101,7 +107,9 @@ class CHubListener\n \n protected:\n     virtual void HandleCommitBlock(const CBlock& block) {}\n+\n     virtual void HandleCommitAlert(const CAlert& alert) {}\n+    virtual void HandleRemoveAlert(const CAlert& alert) {}\n \n     virtual void HandleAskForBlocks(const uint256, const uint256) {}\n };"
      },
      {
        "sha": "a74e12a7496c4a07b0015b0894fd516d3623dba4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da0bed1f29bd3c0401191ea9c8ea749fff436ce/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
        "patch": "@@ -2213,12 +2213,14 @@ bool CHub::EmitAlert(CAlert& alert)\n             {\n                 printf(\"cancelling alert %d\\n\", alert2.nID);\n                 uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n+                SubmitCallbackRemoveAlert(alert2);\n                 mapAlerts.erase(mi++);\n             }\n             else if (!alert2.IsInEffect())\n             {\n                 printf(\"expiring alert %d\\n\", alert2.nID);\n                 uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n+                SubmitCallbackRemoveAlert(alert2);\n                 mapAlerts.erase(mi++);\n             }\n             else"
      }
    ]
  },
  {
    "sha": "8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjZjMjA2NTYxMzY1NjY4ZjMxYTc1YzhlZjQ2ZDZhY2IxZThkMmYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:34:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:28Z"
      },
      "message": "Replace NotifyAlertChanged with RegisterRemoveAlert.",
      "tree": {
        "sha": "150594ccdfac38e998b7e5d4cf4cb29ab1a71ac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/150594ccdfac38e998b7e5d4cf4cb29ab1a71ac1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7da0bed1f29bd3c0401191ea9c8ea749fff436ce"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "493d4f8d8d423ea4b4a639ce86316164d7ce3c1f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
        "patch": "@@ -2212,14 +2212,12 @@ bool CHub::EmitAlert(CAlert& alert)\n             if (alert.Cancels(alert2))\n             {\n                 printf(\"cancelling alert %d\\n\", alert2.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n                 SubmitCallbackRemoveAlert(alert2);\n                 mapAlerts.erase(mi++);\n             }\n             else if (!alert2.IsInEffect())\n             {\n                 printf(\"expiring alert %d\\n\", alert2.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n                 SubmitCallbackRemoveAlert(alert2);\n                 mapAlerts.erase(mi++);\n             }"
      },
      {
        "sha": "e5c0f48a20048dc90c9417a59b9b173f0a7c2cc3",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
        "patch": "@@ -164,19 +164,24 @@ static void NotifyAlertCommitted(ClientModel *clientmodel, const CAlert& alert)\n         NotifyAlertChanged(clientmodel, alert.GetHash(), CT_NEW);\n }\n \n+static void NotifyAlertRemoved(ClientModel *clientmodel, const CAlert& alert)\n+{\n+    if (alert.AppliesToMe())\n+        NotifyAlertChanged(clientmodel, alert.GetHash(), CT_DELETED);\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     phub->RegisterCommitBlock(boost::bind(NotifyNewBlock, this, _1));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n     phub->RegisterCommitAlert(boost::bind(NotifyAlertCommitted, this, _1));\n+    phub->RegisterRemoveAlert(boost::bind(NotifyAlertRemoved, this, _1));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n     //  Note that CHub does not support disconnecting (yet)!\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n }"
      },
      {
        "sha": "3bb1ff0a94465a48f520c1fd07373884d2930aeb",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6c206561365668f31a75c8ef46d6acb1e8d2f3/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
        "patch": "@@ -78,12 +78,6 @@ class CClientUIInterface\n \n     /** Number of network connections changed. */\n     boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n-\n-    /**\n-     * New, updated or cancelled alert.\n-     * @note called with lock cs_mapAlerts held.\n-     */\n-    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;\n };\n \n extern CClientUIInterface uiInterface;"
      }
    ]
  },
  {
    "sha": "c6c30dca1a3918eac85d455308817fbd33ec7345",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmMzMGRjYTFhMzkxOGVhYzg1ZDQ1NTMwODgxN2ZiZDMzZWM3MzQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T23:12:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:30Z"
      },
      "message": "Convert Orphan Tx storage to CTransactions from CDataStreams.\n\nThere was no reason to use CDataStream as the transaction was\nalready being serialized/deserialized several times, with this\nchange, transactions coming in over network are deserialized once\nwhen received, and then only reserialized in the call to\nRelayMessage, which will be called in a callback thread, not\nblocking cs_main.",
      "tree": {
        "sha": "a1cc950b9806fab1b272207290b1cfdc0c876486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1cc950b9806fab1b272207290b1cfdc0c876486"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c30dca1a3918eac85d455308817fbd33ec7345",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c30dca1a3918eac85d455308817fbd33ec7345",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c30dca1a3918eac85d455308817fbd33ec7345",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c30dca1a3918eac85d455308817fbd33ec7345/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6c206561365668f31a75c8ef46d6acb1e8d2f3"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 27,
      "deletions": 43
    },
    "files": [
      {
        "sha": "3a56856fed7e87709e61ee24c4f9a8ae998d3964",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 23,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c30dca1a3918eac85d455308817fbd33ec7345/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c30dca1a3918eac85d455308817fbd33ec7345/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c6c30dca1a3918eac85d455308817fbd33ec7345",
        "patch": "@@ -44,8 +44,8 @@ CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes\n map<uint256, CBlock*> mapOrphanBlocks;\n multimap<uint256, CBlock*> mapOrphanBlocksByPrev;\n \n-map<uint256, CDataStream*> mapOrphanTransactions;\n-map<uint256, map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;\n+map<uint256, CTransaction*> mapOrphanTransactions;\n+map<uint256, map<uint256, CTransaction*> > mapOrphanTransactionsByPrev;\n \n // Constant stuff for coinbase transactions we create:\n CScript COINBASE_FLAGS;\n@@ -162,15 +162,13 @@ void static ResendWalletTransactions()\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CDataStream& vMsg)\n+bool AddOrphanTx(const CTransaction& tx)\n {\n-    CTransaction tx;\n-    CDataStream(vMsg) >> tx;\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n         return false;\n \n-    CDataStream* pvMsg = new CDataStream(vMsg);\n+    CTransaction* pTx = new CTransaction(tx);\n \n     // Ignore big transactions, to avoid a\n     // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n@@ -179,16 +177,17 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     // have been mined or received.\n     // 10,000 orphans, each of which is at most 5,000 bytes big is\n     // at most 500 megabytes of orphans:\n-    if (pvMsg->size() > 5000)\n+    unsigned int size = tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION);\n+    if (size > 5000)\n     {\n-        delete pvMsg;\n-        printf(\"ignoring large orphan tx (size: %u, hash: %s)\\n\", pvMsg->size(), hash.ToString().substr(0,10).c_str());\n+        delete pTx;\n+        printf(\"ignoring large orphan tx (size: %u, hash: %s)\\n\", size, hash.ToString().substr(0,10).c_str());\n         return false;\n     }\n \n-    mapOrphanTransactions[hash] = pvMsg;\n+    mapOrphanTransactions[hash] = pTx;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pTx));\n \n     printf(\"stored orphan tx %s (mapsz %u)\\n\", hash.ToString().substr(0,10).c_str(),\n         mapOrphanTransactions.size());\n@@ -199,16 +198,14 @@ void static EraseOrphanTx(uint256 hash)\n {\n     if (!mapOrphanTransactions.count(hash))\n         return;\n-    const CDataStream* pvMsg = mapOrphanTransactions[hash];\n-    CTransaction tx;\n-    CDataStream(*pvMsg) >> tx;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    const CTransaction* pTx = mapOrphanTransactions[hash];\n+    BOOST_FOREACH(const CTxIn& txin, pTx->vin)\n     {\n         mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n         if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n             mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n     }\n-    delete pvMsg;\n+    delete pTx;\n     mapOrphanTransactions.erase(hash);\n }\n \n@@ -219,7 +216,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, CDataStream*>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        map<uint256, CTransaction*>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -2703,21 +2700,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n                 uint256 hashPrev = vWorkQueue[i];\n-                for (map<uint256, CDataStream*>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n+                for (map<uint256, CTransaction*>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n                      mi != mapOrphanTransactionsByPrev[hashPrev].end();\n                      ++mi)\n                 {\n-                    const CDataStream& vMsg = *((*mi).second);\n-                    CTransaction tx;\n-                    CDataStream(vMsg) >> tx;\n+                    CTransaction& tx = *((*mi).second);\n                     CInv inv(MSG_TX, tx.GetHash());\n                     bool fMissingInputs2 = false;\n \n                     if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs2))\n                     {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                         SyncWithWallets(tx, NULL, true);\n-                        RelayMessage(inv, vMsg);\n+                        RelayMessage(inv, tx);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);\n                         vEraseQueue.push_back(inv.hash);\n@@ -2736,7 +2731,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n         else if (fMissingInputs)\n         {\n-            AddOrphanTx(vMsg);\n+            AddOrphanTx(tx);\n \n             // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n             unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);"
      },
      {
        "sha": "30437a5e1f0cd01c8960fa15a0008151f36f5fce",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 20,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c30dca1a3918eac85d455308817fbd33ec7345/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c30dca1a3918eac85d455308817fbd33ec7345/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=c6c30dca1a3918eac85d455308817fbd33ec7345",
        "patch": "@@ -16,10 +16,10 @@\n #include <stdint.h>\n \n // Tests this internal-to-main.cpp method:\n-extern bool AddOrphanTx(const CDataStream& vMsg);\n+extern bool AddOrphanTx(const CTransaction& vMsg);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern std::map<uint256, CDataStream*> mapOrphanTransactions;\n-extern std::map<uint256, std::map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;\n+extern std::map<uint256, CTransaction*> mapOrphanTransactions;\n+extern std::map<uint256, std::map<uint256, CTransaction*> > mapOrphanTransactionsByPrev;\n \n CService ip(uint32_t i)\n {\n@@ -134,14 +134,11 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n CTransaction RandomOrphan()\n {\n-    std::map<uint256, CDataStream*>::iterator it;\n+    std::map<uint256, CTransaction*>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n-    const CDataStream* pvMsg = it->second;\n-    CTransaction tx;\n-    CDataStream(*pvMsg) >> tx;\n-    return tx;\n+    return *(it->second);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n@@ -163,9 +160,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // ... and 50 that depend on other orphans:\n@@ -182,9 +177,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // This really-big orphan should be ignored:\n@@ -208,9 +201,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        BOOST_CHECK(!AddOrphanTx(ds));\n+        BOOST_CHECK(!AddOrphanTx(tx));\n     }\n \n     // Test LimitOrphanTxSize() function:\n@@ -246,9 +237,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // Create a transaction that depends on orphans:"
      }
    ]
  },
  {
    "sha": "9dc89066a8042e42ca04eda19593b4fb4e23fe31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGM4OTA2NmE4MDQyZTQyY2EwNGVkYTE5NTkzYjRmYjRlMjNmZTMx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T22:42:10Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:30Z"
      },
      "message": "Add a cs around mapAlreadyAskedFor.",
      "tree": {
        "sha": "f8d080f263170faa60906c21150f23350d8733a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8d080f263170faa60906c21150f23350d8733a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dc89066a8042e42ca04eda19593b4fb4e23fe31/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c6c30dca1a3918eac85d455308817fbd33ec7345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c30dca1a3918eac85d455308817fbd33ec7345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c30dca1a3918eac85d455308817fbd33ec7345"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 22,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b51617866bf3a58dc2c890770315ba6430cfa913",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dc89066a8042e42ca04eda19593b4fb4e23fe31/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dc89066a8042e42ca04eda19593b4fb4e23fe31/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9dc89066a8042e42ca04eda19593b4fb4e23fe31",
        "patch": "@@ -2692,7 +2692,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n-            mapAlreadyAskedFor.erase(inv);\n+            {\n+                LOCK(cs_mapAlreadyAskedFor);\n+                mapAlreadyAskedFor.erase(inv);\n+            }\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n@@ -2713,7 +2716,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                         SyncWithWallets(tx, NULL, true);\n                         RelayMessage(inv, tx);\n-                        mapAlreadyAskedFor.erase(inv);\n+                        {\n+                            LOCK(cs_mapAlreadyAskedFor);\n+                            mapAlreadyAskedFor.erase(inv);\n+                        }\n                         vWorkQueue.push_back(inv.hash);\n                         vEraseQueue.push_back(inv.hash);\n                     }\n@@ -2754,7 +2760,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         if (phub->EmitBlock(block))\n+        {\n+            LOCK(cs_mapAlreadyAskedFor);\n             mapAlreadyAskedFor.erase(inv);\n+        }\n         if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n     }\n \n@@ -3136,7 +3145,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     vGetData.clear();\n                 }\n             }\n-            mapAlreadyAskedFor[inv] = nNow;\n+            {\n+                LOCK(cs_mapAlreadyAskedFor);\n+                mapAlreadyAskedFor[inv] = nNow;\n+            }\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())"
      },
      {
        "sha": "4251850697292aacdcee99660eb70fc88d502295",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dc89066a8042e42ca04eda19593b4fb4e23fe31/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dc89066a8042e42ca04eda19593b4fb4e23fe31/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9dc89066a8042e42ca04eda19593b4fb4e23fe31",
        "patch": "@@ -68,6 +68,7 @@ map<CInv, CDataStream> mapRelay;\n deque<pair<int64, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n map<CInv, int64> mapAlreadyAskedFor;\n+CCriticalSection cs_mapAlreadyAskedFor;\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;"
      },
      {
        "sha": "0e8c40015340a99d00c7d1a62467460aa7a1f46f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dc89066a8042e42ca04eda19593b4fb4e23fe31/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dc89066a8042e42ca04eda19593b4fb4e23fe31/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9dc89066a8042e42ca04eda19593b4fb4e23fe31",
        "patch": "@@ -123,6 +123,7 @@ extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n extern std::map<CInv, int64> mapAlreadyAskedFor;\n+extern CCriticalSection cs_mapAlreadyAskedFor;\n \n \n \n@@ -295,7 +296,11 @@ class CNode\n     {\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n-        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+        int64 nRequestTime;\n+        {\n+            LOCK(cs_mapAlreadyAskedFor);\n+            nRequestTime = mapAlreadyAskedFor[inv];\n+        }\n         printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n \n         // Make sure not to reuse time indexes to keep things in the same order"
      }
    ]
  },
  {
    "sha": "ac33eeca2c38bb902423e99bd26bef509a990b58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzMzZWVjYTJjMzhiYjkwMjQyM2U5OWJkMjZiZWY1MDlhOTkwYjU4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T22:29:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:31Z"
      },
      "message": "Add basic EmitTransaction/CommitTransaction functionality to CHub.",
      "tree": {
        "sha": "642efb9af43dd459b8c98b9294b96a8838393c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/642efb9af43dd459b8c98b9294b96a8838393c02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac33eeca2c38bb902423e99bd26bef509a990b58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac33eeca2c38bb902423e99bd26bef509a990b58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac33eeca2c38bb902423e99bd26bef509a990b58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac33eeca2c38bb902423e99bd26bef509a990b58/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9dc89066a8042e42ca04eda19593b4fb4e23fe31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dc89066a8042e42ca04eda19593b4fb4e23fe31"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 83,
      "deletions": 61
    },
    "files": [
      {
        "sha": "b82e71599d98506f338967e6cf0fe73c3fff8dd1",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac33eeca2c38bb902423e99bd26bef509a990b58/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac33eeca2c38bb902423e99bd26bef509a990b58/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=ac33eeca2c38bb902423e99bd26bef509a990b58",
        "patch": "@@ -39,6 +39,15 @@ class CHubCallbackAskForBlocks : public CHubCallback\n     void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOrig); }\n };\n \n+class CHubCallbackCommitTransactionToMemoryPool : public CHubCallback\n+{\n+private:\n+    CTransaction tx;\n+public:\n+    CHubCallbackCommitTransactionToMemoryPool(const CTransaction &txIn) : tx(txIn) {}\n+    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitTransactionToMemoryPool); sigtable.sigCommitTransactionToMemoryPool(tx); }\n+};\n+\n void CHub::SubmitCallbackCommitBlock(const CBlock &block)\n {\n     LOCK(cs_callbacks);\n@@ -67,6 +76,13 @@ void CHub::AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n     sem_callbacks.post();\n }\n \n+void CHub::SubmitCallbackCommitTransactionToMemoryPool(const CTransaction &tx)\n+{\n+    LOCK(cs_callbacks);\n+        queueCallbacks.push(new CHubCallbackCommitTransactionToMemoryPool(tx));\n+    sem_callbacks.post();\n+}\n+\n void CHub::ProcessCallbacks()\n {\n     {\n@@ -130,6 +146,8 @@ void CHubListener::RegisterWithHub(CHub* phub)\n {\n     phub->RegisterCommitBlock(boost::bind(&CHubListener::HandleCommitBlock, this, _1));\n \n+    phub->RegisterCommitTransactionToMemoryPool(boost::bind(&CHubListener::HandleCommitTransactionToMemoryPool, this, _1));\n+\n     phub->RegisterCommitAlert(boost::bind(&CHubListener::HandleCommitAlert, this, _1));\n     phub->RegisterRemoveAlert(boost::bind(&CHubListener::HandleRemoveAlert, this, _1));\n "
      },
      {
        "sha": "734b0279b177bcd2808220e8a623ce1d412972d9",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac33eeca2c38bb902423e99bd26bef509a990b58/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac33eeca2c38bb902423e99bd26bef509a990b58/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=ac33eeca2c38bb902423e99bd26bef509a990b58",
        "patch": "@@ -13,6 +13,7 @@\n #include \"sync.h\"\n \n class CBlock;\n+class CTransaction;\n class CAlert;\n \n class CHubSignalTable\n@@ -21,6 +22,9 @@ class CHubSignalTable\n     CCriticalSection cs_sigCommitBlock;\n     boost::signals2::signal<void (const CBlock&)> sigCommitBlock;\n \n+    CCriticalSection cs_sigCommitTransactionToMemoryPool;\n+    boost::signals2::signal<void (const CTransaction&)> sigCommitTransactionToMemoryPool;\n+\n     CCriticalSection cs_sigCommitAlert;\n     boost::signals2::signal<void (const CAlert&)> sigCommitAlert;\n     CCriticalSection cs_sigRemoveAlert;\n@@ -51,6 +55,8 @@ class CHub\n \n     void SubmitCallbackCommitBlock(const CBlock &block);\n \n+    void SubmitCallbackCommitTransactionToMemoryPool(const CTransaction &tx);\n+\n     void SubmitCallbackCommitAlert(const CAlert &alert);\n     void SubmitCallbackRemoveAlert(const CAlert &alert);\n public:\n@@ -67,6 +73,9 @@ class CHub\n     // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n     void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n \n+    // Register a handler (of the form void f(const CTransaction& tx)) to be called after every transaction commit to memory pool\n+    void RegisterCommitTransactionToMemoryPool(boost::function<void (const CTransaction&)> func) { LOCK(sigtable.cs_sigCommitTransactionToMemoryPool); sigtable.sigCommitTransactionToMemoryPool.connect(func); }\n+\n     // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert commit\n     void RegisterCommitAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert.connect(func); }\n     // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert cancel or expire\n@@ -83,6 +92,8 @@ class CHub\n     //   be handled by listeners\n     bool EmitBlock(CBlock& block);\n     bool EmitAlert(CAlert& alert);\n+    // Do not call EmitTransaction except for loose transactions (ie transactions not in a block)\n+    bool EmitTransaction(CTransaction& tx);\n \n //Connected wallet/etc access methods\n \n@@ -108,6 +119,8 @@ class CHubListener\n protected:\n     virtual void HandleCommitBlock(const CBlock& block) {}\n \n+    virtual void HandleCommitTransactionToMemoryPool(const CTransaction& tx) {}\n+\n     virtual void HandleCommitAlert(const CAlert& alert) {}\n     virtual void HandleRemoveAlert(const CAlert& alert) {}\n "
      },
      {
        "sha": "f52eab0f3acd44db431ef7f26ede77696897bc86",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 61,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac33eeca2c38bb902423e99bd26bef509a990b58/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac33eeca2c38bb902423e99bd26bef509a990b58/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ac33eeca2c38bb902423e99bd26bef509a990b58",
        "patch": "@@ -617,6 +617,48 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n     return mempool.accept(txdb, *this, fCheckInputs, pfMissingInputs);\n }\n \n+bool CHub::EmitTransaction(CTransaction& tx)\n+{\n+    CTxDB txdb(\"r\");\n+    uint256 hash = tx.GetHash();\n+\n+    bool fMissingInputs = false;\n+    if (mempool.accept(txdb, tx, true, &fMissingInputs))\n+    {\n+        SyncWithWallets(tx, NULL, true);\n+\n+        // Recursively process any orphan transactions that depended on this one\n+        for (map<uint256, CTransaction*>::iterator mi = mapOrphanTransactionsByPrev[hash].begin();\n+             mi != mapOrphanTransactionsByPrev[hash].end();\n+             ++mi)\n+        {\n+            CTransaction& tx2 = *((*mi).second);\n+            CInv inv(MSG_TX, tx2.GetHash());\n+\n+            if (phub->EmitTransaction(tx2))\n+                printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+        }\n+\n+        SubmitCallbackCommitTransactionToMemoryPool(tx);\n+        return true;\n+    }\n+    else if (fMissingInputs)\n+    {\n+        AddOrphanTx(tx);\n+\n+        // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+        unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n+        if (nEvicted > 0)\n+            printf(\"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+\n+        return true;\n+    }\n+    else\n+        EraseOrphanTx(hash);\n+\n+    return false;\n+}\n+\n bool CTxMemPool::addUnchecked(CTransaction &tx)\n {\n     // Add to memory pool without checking anything.  Don't call this directly,\n@@ -2677,73 +2719,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     else if (strCommand == \"tx\")\n     {\n-        vector<uint256> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n-        CDataStream vMsg(vRecv);\n-        CTxDB txdb(\"r\");\n         CTransaction tx;\n         vRecv >> tx;\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        bool fMissingInputs = false;\n-        if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))\n-        {\n-            SyncWithWallets(tx, NULL, true);\n-            RelayMessage(inv, vMsg);\n-            {\n-                LOCK(cs_mapAlreadyAskedFor);\n-                mapAlreadyAskedFor.erase(inv);\n-            }\n-            vWorkQueue.push_back(inv.hash);\n-            vEraseQueue.push_back(inv.hash);\n-\n-            // Recursively process any orphan transactions that depended on this one\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-            {\n-                uint256 hashPrev = vWorkQueue[i];\n-                for (map<uint256, CTransaction*>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n-                     mi != mapOrphanTransactionsByPrev[hashPrev].end();\n-                     ++mi)\n-                {\n-                    CTransaction& tx = *((*mi).second);\n-                    CInv inv(MSG_TX, tx.GetHash());\n-                    bool fMissingInputs2 = false;\n-\n-                    if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs2))\n-                    {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n-                        SyncWithWallets(tx, NULL, true);\n-                        RelayMessage(inv, tx);\n-                        {\n-                            LOCK(cs_mapAlreadyAskedFor);\n-                            mapAlreadyAskedFor.erase(inv);\n-                        }\n-                        vWorkQueue.push_back(inv.hash);\n-                        vEraseQueue.push_back(inv.hash);\n-                    }\n-                    else if (!fMissingInputs2)\n-                    {\n-                        // invalid orphan\n-                        vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed invalid orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n-                    }\n-                }\n-            }\n-\n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n-                EraseOrphanTx(hash);\n-        }\n-        else if (fMissingInputs)\n-        {\n-            AddOrphanTx(tx);\n-\n-            // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n-            unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n-            if (nEvicted > 0)\n-                printf(\"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        }\n+        phub->EmitTransaction(tx);\n         if (tx.nDoS) pfrom->Misbehaving(tx.nDoS);\n     }\n "
      },
      {
        "sha": "4b8b36be02256149f469ce20b66f2aafc1523318",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac33eeca2c38bb902423e99bd26bef509a990b58/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac33eeca2c38bb902423e99bd26bef509a990b58/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ac33eeca2c38bb902423e99bd26bef509a990b58",
        "patch": "@@ -105,6 +105,15 @@ void HandleCommitBlock(const CBlock& block)\n     }\n }\n \n+void HandleCommitTransactionToMemoryPool(const CTransaction& tx)\n+{\n+    CInv inv(MSG_TX, tx.GetHash());\n+    RelayMessage(inv, tx);\n+\n+    LOCK(cs_mapAlreadyAskedFor);\n+    mapAlreadyAskedFor.erase(inv);\n+}\n+\n \n \n "
      }
    ]
  },
  {
    "sha": "3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmZiNjBmNjRkYzY4ZDFlZTU1OGIxNWVhMzJmOWU0NjkwZDRlMjhk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T23:47:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:26Z"
      },
      "message": "Use EmitTransaction instead of AcceptToMemoryPool in sendrawtx.",
      "tree": {
        "sha": "6fbffaa7ac32254b8951c8ec3e2811747297ff26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fbffaa7ac32254b8951c8ec3e2811747297ff26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ac33eeca2c38bb902423e99bd26bef509a990b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac33eeca2c38bb902423e99bd26bef509a990b58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac33eeca2c38bb902423e99bd26bef509a990b58"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "740fa126e50b0f629bfd5663a9f1aa9177d2342e",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
        "patch": "@@ -2255,16 +2255,9 @@ Value sendrawtx(const Array& params, bool fHelp)\n     }\n \n     // push to local node\n-    CTxDB txdb(\"r\");\n-    if (!tx.AcceptToMemoryPool(txdb))\n+    if (!phub->EmitTransaction(tx))\n         throw JSONRPCError(-22, \"TX rejected\");\n \n-    SyncWithWallets(tx, NULL, true);\n-\n-    // relay to network\n-    CInv inv(MSG_TX, tx.GetHash());\n-    RelayInventory(inv);\n-\n     return tx.GetHash().GetHex();\n }\n "
      }
    ]
  },
  {
    "sha": "c277c93f2353abd71d25c2632877bed9d1bda1ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjc3YzkzZjIzNTNhYmQ3MWQyNWMyNjMyODc3YmVkOWQxYmRhMWVm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:10:10Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:26Z"
      },
      "message": "Add CWallet support for registering with a CHub.",
      "tree": {
        "sha": "e0c9f603551548b39f27a88d3c85ef637dd85616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0c9f603551548b39f27a88d3c85ef637dd85616"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c277c93f2353abd71d25c2632877bed9d1bda1ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c277c93f2353abd71d25c2632877bed9d1bda1ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c277c93f2353abd71d25c2632877bed9d1bda1ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c277c93f2353abd71d25c2632877bed9d1bda1ef/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24f4fad213459a4123fe4f7ae2140b1d3f2728b3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c277c93f2353abd71d25c2632877bed9d1bda1ef/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c277c93f2353abd71d25c2632877bed9d1bda1ef/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c277c93f2353abd71d25c2632877bed9d1bda1ef",
        "patch": "@@ -637,6 +637,7 @@ bool AppInit2()\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     RegisterWallet(pwalletMain);\n+    pwalletMain->RegisterWithHub(phub);\n \n     CBlockIndex *pindexRescan = pindexBest;\n     if (GetBoolArg(\"-rescan\"))"
      },
      {
        "sha": "e23b88291b6878e02b1d3762bb7fe48fa346c1d2",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c277c93f2353abd71d25c2632877bed9d1bda1ef/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c277c93f2353abd71d25c2632877bed9d1bda1ef/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=c277c93f2353abd71d25c2632877bed9d1bda1ef",
        "patch": "@@ -10,6 +10,7 @@\n #include \"keystore.h\"\n #include \"script.h\"\n #include \"ui_interface.h\"\n+#include \"hub.h\"\n \n class CWalletTx;\n class CReserveKey;\n@@ -57,7 +58,7 @@ class CKeyPool\n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet : public CCryptoKeyStore\n+class CWallet : public CCryptoKeyStore, public CHubListener\n {\n private:\n     bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;"
      }
    ]
  },
  {
    "sha": "916ffbfe9dbc11b9597762b928c55db3480cdbd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTZmZmJmZTlkYmMxMWI5NTk3NzYyYjkyOGM1NWRiMzQ4MGNkYmQ5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T23:41:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:28Z"
      },
      "message": "Use HandleCommitTransactionToMemoryPool instead of SyncWithWallets.",
      "tree": {
        "sha": "4ab954173767aacc0e1e686d1d640d3916fb1a08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ab954173767aacc0e1e686d1d640d3916fb1a08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916ffbfe9dbc11b9597762b928c55db3480cdbd9/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c277c93f2353abd71d25c2632877bed9d1bda1ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c277c93f2353abd71d25c2632877bed9d1bda1ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c277c93f2353abd71d25c2632877bed9d1bda1ef"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c401efa3c7bb2b79146b23eb77092ce7cd27758b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=916ffbfe9dbc11b9597762b928c55db3480cdbd9",
        "patch": "@@ -622,11 +622,11 @@ bool CHub::EmitTransaction(CTransaction& tx)\n     CTxDB txdb(\"r\");\n     uint256 hash = tx.GetHash();\n \n+    LOCK(cs_main);\n+\n     bool fMissingInputs = false;\n     if (mempool.accept(txdb, tx, true, &fMissingInputs))\n     {\n-        SyncWithWallets(tx, NULL, true);\n-\n         // Recursively process any orphan transactions that depended on this one\n         for (map<uint256, CTransaction*>::iterator mi = mapOrphanTransactionsByPrev[hash].begin();\n              mi != mapOrphanTransactionsByPrev[hash].end();"
      },
      {
        "sha": "5763d638a498f22f344395571ad8862a59958cf4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=916ffbfe9dbc11b9597762b928c55db3480cdbd9",
        "patch": "@@ -81,7 +81,6 @@ class CTxIndex;\n \n void RegisterWallet(CWallet* pwalletIn);\n void UnregisterWallet(CWallet* pwalletIn);\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);"
      },
      {
        "sha": "d6b55b0b03baf21ba11d83bf8c1f5277ac26a93b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=916ffbfe9dbc11b9597762b928c55db3480cdbd9",
        "patch": "@@ -409,6 +409,11 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+void CWallet::HandleCommitTransactionToMemoryPool(const CTransaction& tx)\n+{\n+    AddToWalletIfInvolvingMe(tx, NULL, true);\n+}\n+\n bool CWallet::EraseFromWallet(uint256 hash)\n {\n     if (!fFileBacked)"
      },
      {
        "sha": "6c4d0ff9f88299197ec1e9419fe36bbc4a4f0249",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ffbfe9dbc11b9597762b928c55db3480cdbd9/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=916ffbfe9dbc11b9597762b928c55db3480cdbd9",
        "patch": "@@ -137,6 +137,7 @@ class CWallet : public CCryptoKeyStore, public CHubListener\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n+    void HandleCommitTransactionToMemoryPool(const CTransaction& tx);\n     bool EraseFromWallet(uint256 hash);\n     void WalletUpdateSpent(const CTransaction& prevout);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);"
      }
    ]
  },
  {
    "sha": "e60084cae3add85c54878bd6f620b41f107dc691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjAwODRjYWUzYWRkODVjNTQ4NzhiZDZmNjIwYjQxZjEwN2RjNjkx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-02T01:16:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:28Z"
      },
      "message": "Remove AcceptToMemoryPool and replace with EmitTransaction.\n\n * This removes not only CTransaction::AcceptToMemoryPool, but\n    also CMerkleTx::AcceptToMemoryPool. It also moves\n    CWalletTx::AcceptWalletTransaction to wallet.cpp\n\n * This adds a fCheckInputs flag to EmitTransaction, which is\n    similar to the fCheckInputs flag to AcceptToMemoryPool,\n    however, it has stricter guidlines that it should only be set\n    \"when transaction is a supporting tx for one of our own.\"\n    Additionally, \"fCheckInputs is ignored (and set to true)\n    if !IsInitialBlockDownload() && !fClient\"\n\n    As a part of these guidelines,\n    CWalletTx::AcceptWalletTransaction calls EmitTransaction with\n    fCheckInputs set to true (the default) on the final\n    transaction, whereas it used to call with fCheckInputs set to\n    false. This has the important side-effect of allowing wallet-\n    generated transactions to end up getting AddOrphanTx'd.\n    However, if a supporting transaction to one of our own had\n    previously been AddOrphanTx'd, it would immediately be added\n    to memory pool as it is \"a supporting tx for one of our own\"\n    and thus is re-added with fCheckInputs=false.\n\n    Note that the possibility of a wallet transaction getting\n    AddOrphanTx'd is very low, and should only happen if\n    a) a transaction's input is a generate and we are missing that\n       block (note that no transactions should be generated with a\n       generation input if we don't have that block anyway).\n    b) We match the !IsInitialBlockDownload() && !fClient check,\n       are not caught up to the latest block, and an input is in a\n       block we do not yet have (possible after the last\n       checkpoint). This situation is temporary and should resolve\n       itself once we catch up (though AddOrphanTx'd transactions\n       may be permanently orphaned).\n\n    Largely, these guidelines are there because there is no reason\n    to add a transaction without checking its inputs, as we have\n    those inputs available, and checking them as any other\n    transaction would provides additional sanity-checks.\n\n * A second EmitTransaction was added with tx of type CMerkleTx.\n    This keeps behavior of CMerkleTx::AcceptToMemoryPool the same\n    in fClient mode. Note that new behavior was invented for\n    CHub::EmitTransaction(CTransaction&...) in fClient mode,\n    namely that ClientConnectInputs is only checked if\n    fCheckInputs is true. This was chosen to make emitting a\n    transaction possible in fClient mode even if its inputs are\n    not available, but could be changed if support for that is not\n    needed when fClient mode is actually implemented.",
      "tree": {
        "sha": "e6d11d62fab89e707fd2837a807baa1d7deee44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6d11d62fab89e707fd2837a807baa1d7deee44b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e60084cae3add85c54878bd6f620b41f107dc691",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60084cae3add85c54878bd6f620b41f107dc691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e60084cae3add85c54878bd6f620b41f107dc691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60084cae3add85c54878bd6f620b41f107dc691/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "916ffbfe9dbc11b9597762b928c55db3480cdbd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/916ffbfe9dbc11b9597762b928c55db3480cdbd9"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 61,
      "deletions": 68
    },
    "files": [
      {
        "sha": "112bfdb107d24a260a2606995d581fce8813f2ce",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60084cae3add85c54878bd6f620b41f107dc691/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60084cae3add85c54878bd6f620b41f107dc691/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=e60084cae3add85c54878bd6f620b41f107dc691",
        "patch": "@@ -13,6 +13,7 @@\n #include \"sync.h\"\n \n class CBlock;\n+class CMerkleTx;\n class CTransaction;\n class CAlert;\n \n@@ -55,6 +56,7 @@ class CHub\n \n     void SubmitCallbackCommitBlock(const CBlock &block);\n \n+    bool EmitTransactionInner(CTransaction& tx, bool fCheckInputs);\n     void SubmitCallbackCommitTransactionToMemoryPool(const CTransaction &tx);\n \n     void SubmitCallbackCommitAlert(const CAlert &alert);\n@@ -92,8 +94,12 @@ class CHub\n     //   be handled by listeners\n     bool EmitBlock(CBlock& block);\n     bool EmitAlert(CAlert& alert);\n-    // Do not call EmitTransaction except for loose transactions (ie transactions not in a block)\n-    bool EmitTransaction(CTransaction& tx);\n+    // Emitting transactions already in a block is acceptable only if it is a supporting\n+    //   transaction for one of our own\n+    // fCheckInputs is ignored (and set to true) if !IsInitialBlockDownload() && !fClient\n+    // Only set fCheckInputs when tx is a supporting transaction for one of our own\n+    bool EmitTransaction(CMerkleTx& tx, bool fCheckInputs=true);\n+    bool EmitTransaction(CTransaction& tx, bool fCheckInputs=true);\n \n //Connected wallet/etc access methods\n "
      },
      {
        "sha": "c561d1ed26a1a7ab5803e7b1bef80f4e74d4d4c3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 57,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60084cae3add85c54878bd6f620b41f107dc691/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60084cae3add85c54878bd6f620b41f107dc691/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e60084cae3add85c54878bd6f620b41f107dc691",
        "patch": "@@ -612,20 +612,16 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     return true;\n }\n \n-bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)\n+bool CHub::EmitTransactionInner(CTransaction& tx, bool fCheckInputs)\n {\n-    return mempool.accept(txdb, *this, fCheckInputs, pfMissingInputs);\n-}\n-\n-bool CHub::EmitTransaction(CTransaction& tx)\n-{\n-    CTxDB txdb(\"r\");\n     uint256 hash = tx.GetHash();\n \n-    LOCK(cs_main);\n+    CTxDB* ptxdb = NULL;\n+    if (!fClient && fCheckInputs)\n+        ptxdb = new CTxDB(\"r\");\n \n     bool fMissingInputs = false;\n-    if (mempool.accept(txdb, tx, true, &fMissingInputs))\n+    if (mempool.accept(*ptxdb, tx, fCheckInputs, &fMissingInputs))\n     {\n         // Recursively process any orphan transactions that depended on this one\n         for (map<uint256, CTransaction*>::iterator mi = mapOrphanTransactionsByPrev[hash].begin();\n@@ -659,6 +655,34 @@ bool CHub::EmitTransaction(CTransaction& tx)\n     return false;\n }\n \n+bool CHub::EmitTransaction(CTransaction& tx, bool fCheckInputs)\n+{\n+    LOCK(cs_main);\n+\n+    if (!fClient && !IsInitialBlockDownload())\n+        fCheckInputs = true;\n+\n+    if (fClient && fCheckInputs)\n+        if (!tx.ClientConnectInputs())\n+            return false;\n+\n+    return EmitTransactionInner(tx, fCheckInputs);\n+}\n+\n+bool CHub::EmitTransaction(CMerkleTx& tx, bool fCheckInputs)\n+{\n+    LOCK(cs_main);\n+\n+    if (!fClient && !IsInitialBlockDownload())\n+        fCheckInputs = true;\n+\n+    if (fClient)\n+        if (!tx.IsInMainChain() && !tx.ClientConnectInputs())\n+            return false;\n+\n+    return EmitTransactionInner(tx, fCheckInputs);\n+}\n+\n bool CTxMemPool::addUnchecked(CTransaction &tx)\n {\n     // Add to memory pool without checking anything.  Don't call this directly,\n@@ -731,53 +755,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs)\n-{\n-    if (fClient)\n-    {\n-        if (!IsInMainChain() && !ClientConnectInputs())\n-            return false;\n-        return CTransaction::AcceptToMemoryPool(txdb, false);\n-    }\n-    else\n-    {\n-        return CTransaction::AcceptToMemoryPool(txdb, fCheckInputs);\n-    }\n-}\n-\n-bool CMerkleTx::AcceptToMemoryPool()\n-{\n-    CTxDB txdb(\"r\");\n-    return AcceptToMemoryPool(txdb);\n-}\n-\n-\n-\n-bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)\n-{\n-\n-    {\n-        LOCK(mempool.cs);\n-        // Add previous supporting transactions first\n-        BOOST_FOREACH(CMerkleTx& tx, vtxPrev)\n-        {\n-            if (!tx.IsCoinBase())\n-            {\n-                uint256 hash = tx.GetHash();\n-                if (!mempool.exists(hash) && !txdb.ContainsTx(hash))\n-                    tx.AcceptToMemoryPool(txdb, fCheckInputs);\n-            }\n-        }\n-        return AcceptToMemoryPool(txdb, fCheckInputs);\n-    }\n-    return false;\n-}\n-\n-bool CWalletTx::AcceptWalletTransaction()\n-{\n-    CTxDB txdb(\"r\");\n-    return AcceptWalletTransaction(txdb);\n-}\n \n int CTxIndex::GetDepthInMainChain() const\n {\n@@ -1528,7 +1505,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n \n     // Resurrect memory transactions that were in the disconnected branch\n     BOOST_FOREACH(CTransaction& tx, vResurrect)\n-        tx.AcceptToMemoryPool(txdb, false);\n+        mempool.accept(txdb, tx, false, NULL);\n \n     // Delete redundant memory transactions that are in the connected branch\n     BOOST_FOREACH(CTransaction& tx, vDelete)"
      },
      {
        "sha": "9cff6c7b11e3a2adb0e471619c5d5190a32bdc75",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60084cae3add85c54878bd6f620b41f107dc691/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60084cae3add85c54878bd6f620b41f107dc691/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e60084cae3add85c54878bd6f620b41f107dc691",
        "patch": "@@ -681,7 +681,6 @@ class CTransaction\n                        const CBlockIndex* pindexBlock, bool fBlock, bool fMiner, bool fStrictPayToScriptHash=true);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n-    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n \n protected:\n     const CTxOut& GetOutputFor(const CTxIn& input, const MapPrevTx& inputs) const;\n@@ -736,8 +735,6 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true);\n-    bool AcceptToMemoryPool();\n };\n \n "
      },
      {
        "sha": "5cffd70b65db8dcb489ede59014b5b4dcc4f8b2e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60084cae3add85c54878bd6f620b41f107dc691/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60084cae3add85c54878bd6f620b41f107dc691/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e60084cae3add85c54878bd6f620b41f107dc691",
        "patch": "@@ -107,8 +107,14 @@ void HandleCommitBlock(const CBlock& block)\n \n void HandleCommitTransactionToMemoryPool(const CTransaction& tx)\n {\n-    CInv inv(MSG_TX, tx.GetHash());\n-    RelayMessage(inv, tx);\n+    assert(!fClient);\n+    CTxDB txdb;\n+\n+    uint256 hash = tx.GetHash();\n+    CInv inv(MSG_TX, hash);\n+\n+    if (!tx.IsCoinBase() && !txdb.ContainsTx(hash))\n+        RelayMessage(inv, tx);\n \n     LOCK(cs_mapAlreadyAskedFor);\n     mapAlreadyAskedFor.erase(inv);"
      },
      {
        "sha": "d1f8ac6a16ccdf6d2443494acf13ba15ea90526f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60084cae3add85c54878bd6f620b41f107dc691/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60084cae3add85c54878bd6f620b41f107dc691/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e60084cae3add85c54878bd6f620b41f107dc691",
        "patch": "@@ -709,6 +709,15 @@ int CWallet::ScanForWalletTransaction(const uint256& hashTx)\n     return 0;\n }\n \n+bool CWalletTx::AcceptWalletTransaction()\n+{\n+    // Add previous supporting transactions first\n+    BOOST_FOREACH(CMerkleTx& tx, vtxPrev)\n+        phub->EmitTransaction(tx, false);\n+    return phub->EmitTransaction(*this);\n+}\n+\n+\n void CWallet::ReacceptWalletTransactions()\n {\n     CTxDB txdb(\"r\");\n@@ -756,7 +765,7 @@ void CWallet::ReacceptWalletTransactions()\n             {\n                 // Reaccept any txes of ours that aren't already in a block\n                 if (!wtx.IsCoinBase())\n-                    wtx.AcceptWalletTransaction(txdb, false);\n+                    wtx.AcceptWalletTransaction();\n             }\n         }\n         if (!vMissingTx.empty())\n@@ -1211,13 +1220,12 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n         // Broadcast\n-        if (!wtxNew.AcceptToMemoryPool())\n+        if (!wtxNew.AcceptWalletTransaction())\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n             printf(\"CommitTransaction() : Error: Transaction not valid\");\n             return false;\n         }\n-        wtxNew.RelayWalletTransaction();\n     }\n     return true;\n }"
      },
      {
        "sha": "6b1c3648de4a2a4ac3a86fe80968dbe13ef50baf",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e60084cae3add85c54878bd6f620b41f107dc691/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e60084cae3add85c54878bd6f620b41f107dc691/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e60084cae3add85c54878bd6f620b41f107dc691",
        "patch": "@@ -596,7 +596,6 @@ class CWalletTx : public CMerkleTx\n \n     void AddSupportingTransactions(CTxDB& txdb);\n \n-    bool AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs=true);\n     bool AcceptWalletTransaction();\n \n     void RelayWalletTransaction(CTxDB& txdb);"
      }
    ]
  },
  {
    "sha": "41ff3cf8169c45366e93ee3477c39f9380f11674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWZmM2NmODE2OWM0NTM2NmU5M2VlMzQ3N2MzOWY5MzgwZjExNjc0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T15:46:12Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:53Z"
      },
      "message": "Add a CBlockStore class to hold the blockstore.",
      "tree": {
        "sha": "d9e727713ba66b5258f46b3514e91116fcaf77ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9e727713ba66b5258f46b3514e91116fcaf77ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ff3cf8169c45366e93ee3477c39f9380f11674",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ff3cf8169c45366e93ee3477c39f9380f11674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41ff3cf8169c45366e93ee3477c39f9380f11674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ff3cf8169c45366e93ee3477c39f9380f11674/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e60084cae3add85c54878bd6f620b41f107dc691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e60084cae3add85c54878bd6f620b41f107dc691",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e60084cae3add85c54878bd6f620b41f107dc691"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd394e88486ab86112c7befc00cab8cdc366292c",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ff3cf8169c45366e93ee3477c39f9380f11674/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ff3cf8169c45366e93ee3477c39f9380f11674/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=41ff3cf8169c45366e93ee3477c39f9380f11674",
        "patch": "@@ -116,6 +116,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/strlcpy.h \\\n     src/main.h \\\n     src/hub.h \\\n+    src/blockstore.h \\\n     src/net.h \\\n     src/key.h \\\n     src/db.h \\"
      },
      {
        "sha": "a281f8ea27934de7b40d266495a2191715e5e2ba",
        "filename": "src/blockstore.h",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ff3cf8169c45366e93ee3477c39f9380f11674/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ff3cf8169c45366e93ee3477c39f9380f11674/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=41ff3cf8169c45366e93ee3477c39f9380f11674",
        "patch": "@@ -0,0 +1,31 @@\n+#ifndef BITCOIN_BLOCKSTORE_H\n+#define BITCOIN_BLOCKSTORE_H\n+\n+// This API is considered stable ONLY for existing bitcoin codebases,\n+// any futher uses are not yet supported.\n+// This API is subject to change dramatically overnight, do not\n+// depend on it for anything.\n+\n+#include <boost/signals2/signal.hpp>\n+#include <queue>\n+\n+#include \"sync.h\"\n+\n+class CBlockStoreSignalTable\n+{\n+public:\n+\n+};\n+\n+class CBlockStore\n+{\n+private:\n+    CBlockStoreSignalTable sigtable;\n+public:\n+//Register methods\n+\n+//Blockchain access methods\n+\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "9a268f437b04317f2037450f22ddcbb8f45ef178",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTI2OGY0MzdiMDQzMTdmMjAzNzQ1MGYyMmRkY2JiOGY0NWVmMTc4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T16:38:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:54Z"
      },
      "message": "Add support for registering a CBlockStore with CHub.",
      "tree": {
        "sha": "3606dce72d687f332573b47196f2105a2df94ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3606dce72d687f332573b47196f2105a2df94ef3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a268f437b04317f2037450f22ddcbb8f45ef178",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a268f437b04317f2037450f22ddcbb8f45ef178",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a268f437b04317f2037450f22ddcbb8f45ef178",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a268f437b04317f2037450f22ddcbb8f45ef178/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "41ff3cf8169c45366e93ee3477c39f9380f11674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ff3cf8169c45366e93ee3477c39f9380f11674",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41ff3cf8169c45366e93ee3477c39f9380f11674"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "95dfb67e73805ae878022e06714daf227031a4f0",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a268f437b04317f2037450f22ddcbb8f45ef178/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a268f437b04317f2037450f22ddcbb8f45ef178/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=9a268f437b04317f2037450f22ddcbb8f45ef178",
        "patch": "@@ -83,6 +83,15 @@ void CHub::SubmitCallbackCommitTransactionToMemoryPool(const CTransaction &tx)\n     sem_callbacks.post();\n }\n \n+bool CHub::ConnectToBlockStore(CBlockStore* pblockstoreIn)\n+{\n+    if (pblockstore)\n+        return false;\n+    pblockstore = pblockstoreIn;\n+\n+    return true;\n+}\n+\n void CHub::ProcessCallbacks()\n {\n     {\n@@ -133,7 +142,7 @@ void ProcessCallbacks(void* parg)\n     ((CHub*)parg)->ProcessCallbacks();\n }\n \n-CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0)\n+CHub::CHub() : sem_callbacks(0), fProcessCallbacks(true), nCallbackThreads(0), pblockstore(NULL)\n {\n     for (int i = 0; i < GetArg(\"-callbackconcurrency\", 1); i++)\n         if (!CreateThread(::ProcessCallbacks, this))"
      },
      {
        "sha": "c0bc1194173074a3fb440215316a049d94b76384",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a268f437b04317f2037450f22ddcbb8f45ef178/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a268f437b04317f2037450f22ddcbb8f45ef178/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=9a268f437b04317f2037450f22ddcbb8f45ef178",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"uint256.h\"\n #include \"sync.h\"\n+#include \"blockstore.h\"\n \n class CBlock;\n class CMerkleTx;\n@@ -54,6 +55,8 @@ class CHub\n     bool fProcessCallbacks;\n     int nCallbackThreads;\n \n+    CBlockStore* pblockstore;\n+\n     void SubmitCallbackCommitBlock(const CBlock &block);\n \n     bool EmitTransactionInner(CTransaction& tx, bool fCheckInputs);\n@@ -71,6 +74,8 @@ class CHub\n     CHub();\n     ~CHub()  { StopProcessCallbacks(); }\n \n+    bool ConnectToBlockStore(CBlockStore* pblockstoreIn);\n+\n //Register methods\n     // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n     void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n@@ -92,7 +97,7 @@ class CHub\n //Blockchain access methods\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n-    bool EmitBlock(CBlock& block);\n+    bool EmitBlock(CBlock& block) { if (!pblockstore) return false; return pblockstore->EmitBlock(block); }\n     bool EmitAlert(CAlert& alert);\n     // Emitting transactions already in a block is acceptable only if it is a supporting\n     //   transaction for one of our own"
      },
      {
        "sha": "e8996b6491530db74366e36606251861a814b9ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a268f437b04317f2037450f22ddcbb8f45ef178/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a268f437b04317f2037450f22ddcbb8f45ef178/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9a268f437b04317f2037450f22ddcbb8f45ef178",
        "patch": "@@ -534,6 +534,8 @@ bool AppInit2()\n     } catch (runtime_error& e) {\n         return InitError(_(\"Unable to create CHub.\"));\n     }\n+    CBlockStore* pblockstore = new CBlockStore(phub);\n+    phub->ConnectToBlockStore(pblockstore);\n \n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");"
      }
    ]
  },
  {
    "sha": "60ba767b3e2fa767fd8c81db2239a05285a72dab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGJhNzY3YjNlMmZhNzY3ZmQ4YzgxZGIyMjM5YTA1Mjg1YTcyZGFi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T16:53:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:55Z"
      },
      "message": "Move EmitBlock handling from CHub to CBlockStore.",
      "tree": {
        "sha": "a28f7c0faa7c5c9f3024abd4d215b19670e17f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a28f7c0faa7c5c9f3024abd4d215b19670e17f8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60ba767b3e2fa767fd8c81db2239a05285a72dab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ba767b3e2fa767fd8c81db2239a05285a72dab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60ba767b3e2fa767fd8c81db2239a05285a72dab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ba767b3e2fa767fd8c81db2239a05285a72dab/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9a268f437b04317f2037450f22ddcbb8f45ef178",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a268f437b04317f2037450f22ddcbb8f45ef178",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a268f437b04317f2037450f22ddcbb8f45ef178"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 116,
      "deletions": 86
    },
    "files": [
      {
        "sha": "e55b5a21ff9fd4f09ca143bedb8cb6187469ebb1",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 35,
        "deletions": 1,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "patch": "@@ -10,22 +10,56 @@\n #include <queue>\n \n #include \"sync.h\"\n+#include \"uint256.h\"\n+\n+class CBlock;\n+class CTxDB;\n+class CBlockIndex;\n+class CHub;\n \n class CBlockStoreSignalTable\n {\n public:\n+    CCriticalSection cs_sigCommitBlock;\n+    boost::signals2::signal<void (const CBlock&)> sigCommitBlock;\n \n+    CCriticalSection cs_sigAskForBlocks;\n+    boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n };\n \n class CBlockStore\n {\n private:\n     CBlockStoreSignalTable sigtable;\n+\n+    void CallbackCommitBlock(const CBlock &block) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock(block); }\n+\n+    void CallbackAskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)  { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOriginator); }\n+\n+    bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew);\n+    bool DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n+    bool ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n+    bool SetBestChainInner(CBlock& block, CTxDB& txdb, CBlockIndex *pindexNew);\n+    bool SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNew);\n+    bool AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned int nBlockPos);\n+    bool AcceptBlock(CBlock& block);\n public:\n+    bool LoadBlockIndex(bool fAllowNew=true);\n+\n //Register methods\n+    // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n+    void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n \n-//Blockchain access methods\n+    // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n+    //   Should always start from the best block (GetBestBlockIndex())\n+    //   The receiver should check if it has a peer which is known to have a block with hash hashOriginator and if it does, it should\n+    //    send the block query to that node.\n+    void RegisterAskForBlocks(boost::function<void (const uint256, const uint256)> func) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks.connect(func); }\n \n+//Blockchain access methods\n+    // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n+    //   be handled by listeners\n+    bool EmitBlock(CBlock& block);\n };\n \n #endif"
      },
      {
        "sha": "5bb5dddd1218245c58148d877f0f41d278cae027",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "patch": "@@ -696,8 +696,9 @@ bool CTxDB::LoadBlockIndex()\n         CBlock block;\n         if (!block.ReadFromDisk(pindexFork))\n             return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n-        CTxDB txdb;\n-        block.SetBestChain(txdb, pindexFork);\n+        //CTxDB txdb;\n+        //block.SetBestChain(txdb, pindexFork);\n+        assert(false);\n     }\n \n     return true;"
      },
      {
        "sha": "bfaafe2a7e7b0c6998ea8a58434a54df341813db",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "patch": "@@ -89,6 +89,10 @@ bool CHub::ConnectToBlockStore(CBlockStore* pblockstoreIn)\n         return false;\n     pblockstore = pblockstoreIn;\n \n+    pblockstore->RegisterCommitBlock(boost::bind(&CHub::SubmitCallbackCommitBlock, this, _1));\n+\n+    pblockstore->RegisterAskForBlocks(boost::bind(&CHub::AskForBlocks, this, _1, _2));\n+\n     return true;\n }\n "
      },
      {
        "sha": "b82126fbf8f122847c3a212cb1e17f46d2b51fb7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "patch": "@@ -534,13 +534,13 @@ bool AppInit2()\n     } catch (runtime_error& e) {\n         return InitError(_(\"Unable to create CHub.\"));\n     }\n-    CBlockStore* pblockstore = new CBlockStore(phub);\n+    CBlockStore* pblockstore = new CBlockStore();\n     phub->ConnectToBlockStore(pblockstore);\n \n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n-    if (!LoadBlockIndex())\n+    if (!pblockstore->LoadBlockIndex())\n         strErrors << _(\"Error loading blkindex.dat\") << \"\\n\";\n \n     // as LoadBlockIndex can take several minutes, it's possible the user"
      },
      {
        "sha": "c237fa047e1085782bc518642700ed43685a7865",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 72,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "patch": "@@ -1298,11 +1298,11 @@ bool CTransaction::ClientConnectInputs()\n \n \n \n-bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n+bool CBlockStore::DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n {\n     // Disconnect in reverse order\n-    for (int i = vtx.size()-1; i >= 0; i--)\n-        if (!vtx[i].DisconnectInputs(txdb))\n+    for (int i = block.vtx.size()-1; i >= 0; i--)\n+        if (!block.vtx[i].DisconnectInputs(txdb))\n             return false;\n \n     // Update block index on disk without changing it in memory.\n@@ -1318,10 +1318,10 @@ bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     return true;\n }\n \n-bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n+bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock())\n+    if (!block.CheckBlock())\n         return false;\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n@@ -1336,7 +1336,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     // On testnet it is enabled as of februari 20, 2012, 0:00 UTC.\n     if (pindex->nTime > 1331769600 || (fTestNet && pindex->nTime > 1329696000))\n     {\n-        BOOST_FOREACH(CTransaction& tx, vtx)\n+        BOOST_FOREACH(CTransaction& tx, block.vtx)\n         {\n             CTxIndex txindexOld;\n             if (txdb.ReadTxIndex(tx.GetHash(), txindexOld))\n@@ -1353,19 +1353,19 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n \n     //// issue here: it doesn't know the version\n-    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK, CLIENT_VERSION) - 1 + GetSizeOfCompactSize(vtx.size());\n+    unsigned int nTxPos = pindex->nBlockPos + GetSerializeSize(CBlock(), SER_DISK, CLIENT_VERSION) - 1 + GetSizeOfCompactSize(block.vtx.size());\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(CTransaction& tx, vtx)\n+    BOOST_FOREACH(CTransaction& tx, block.vtx)\n     {\n         nSigOps += tx.GetLegacySigOpCount();\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n+            return block.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n \n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n-        nTxPos += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n+        nTxPos += GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n \n         MapPrevTx mapInputs;\n         if (!tx.IsCoinBase())\n@@ -1381,7 +1381,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n+                    return block.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n             }\n \n             nFees += tx.GetValueIn(mapInputs)-tx.GetValueOut();\n@@ -1400,7 +1400,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             return error(\"ConnectBlock() : UpdateTxIndex failed\");\n     }\n \n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return false;\n \n     // Update block index on disk without changing it in memory.\n@@ -1414,13 +1414,13 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     }\n \n     // Watch for transactions paying to me\n-    BOOST_FOREACH(CTransaction& tx, vtx)\n-        SyncWithWallets(tx, this, true);\n+    BOOST_FOREACH(CTransaction& tx, block.vtx)\n+        SyncWithWallets(tx, &block, true);\n \n     return true;\n }\n \n-bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n+bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n {\n     printf(\"REORGANIZE\\n\");\n \n@@ -1431,11 +1431,11 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n     {\n         while (plonger->nHeight > pfork->nHeight)\n             if (!(plonger = plonger->pprev))\n-                return error(\"Reorganize() : plonger->pprev is null\");\n+                return error(\"CBlockStore::Reorganize() : plonger->pprev is null\");\n         if (pfork == plonger)\n             break;\n         if (!(pfork = pfork->pprev))\n-            return error(\"Reorganize() : pfork->pprev is null\");\n+            return error(\"CBlockStore::Reorganize() : pfork->pprev is null\");\n     }\n \n     // List of what to disconnect\n@@ -1458,9 +1458,9 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n     {\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n-            return error(\"Reorganize() : ReadFromDisk for disconnect failed\");\n-        if (!block.DisconnectBlock(txdb, pindex))\n-            return error(\"Reorganize() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"CBlockStore::Reorganize() : ReadFromDisk for disconnect failed\");\n+        if (!DisconnectBlock(block, txdb, pindex))\n+            return error(\"CBlockStore::Reorganize() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n \n         // Queue memory transactions to resurrect\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -1475,23 +1475,23 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         CBlockIndex* pindex = vConnect[i];\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n-            return error(\"Reorganize() : ReadFromDisk for connect failed\");\n-        if (!block.ConnectBlock(txdb, pindex))\n+            return error(\"CBlockStore::Reorganize() : ReadFromDisk for connect failed\");\n+        if (!ConnectBlock(block, txdb, pindex))\n         {\n             // Invalid block\n-            return error(\"Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"CBlockStore::Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n         }\n \n         // Queue memory transactions to delete\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n             vDelete.push_back(tx);\n     }\n     if (!txdb.WriteHashBestChain(pindexNew->GetBlockHash()))\n-        return error(\"Reorganize() : WriteHashBestChain failed\");\n+        return error(\"CBlockStore::Reorganize() : WriteHashBestChain failed\");\n \n     // Make sure it's successfully written to disk before changing memory structure\n     if (!txdb.TxnCommit())\n-        return error(\"Reorganize() : TxnCommit failed\");\n+        return error(\"CBlockStore::Reorganize() : TxnCommit failed\");\n \n     // Disconnect shorter branch\n     BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)\n@@ -1518,12 +1518,12 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n \n \n // Called from inside SetBestChain: attaches a block to the new best chain being built\n-bool CBlock::SetBestChainInner(CTxDB& txdb, CBlockIndex *pindexNew)\n+bool CBlockStore::SetBestChainInner(CBlock& block, CTxDB& txdb, CBlockIndex *pindexNew)\n {\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n \n     // Adding to current best branch\n-    if (!ConnectBlock(txdb, pindexNew) || !txdb.WriteHashBestChain(hash))\n+    if (!ConnectBlock(block, txdb, pindexNew) || !txdb.WriteHashBestChain(hash))\n     {\n         txdb.TxnAbort();\n         InvalidChainFound(pindexNew);\n@@ -1536,15 +1536,15 @@ bool CBlock::SetBestChainInner(CTxDB& txdb, CBlockIndex *pindexNew)\n     pindexNew->pprev->pnext = pindexNew;\n \n     // Delete redundant memory transactions\n-    BOOST_FOREACH(CTransaction& tx, vtx)\n+    BOOST_FOREACH(CTransaction& tx, block.vtx)\n         mempool.remove(tx);\n \n     return true;\n }\n \n-bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n+bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNew)\n {\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n \n     if (!txdb.TxnBegin())\n         return error(\"SetBestChain() : TxnBegin failed\");\n@@ -1556,9 +1556,9 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n             return error(\"SetBestChain() : TxnCommit failed\");\n         pindexGenesisBlock = pindexNew;\n     }\n-    else if (hashPrevBlock == hashBestChain)\n+    else if (block.hashPrevBlock == hashBestChain)\n     {\n-        if (!SetBestChainInner(txdb, pindexNew))\n+        if (!SetBestChainInner(block, txdb, pindexNew))\n             return error(\"SetBestChain() : SetBestChainInner failed\");\n     }\n     else\n@@ -1591,8 +1591,8 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n         // Connect futher blocks\n         BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vpindexSecondary)\n         {\n-            CBlock block;\n-            if (!block.ReadFromDisk(pindex))\n+            CBlock block2;\n+            if (!block2.ReadFromDisk(pindex))\n             {\n                 printf(\"SetBestChain() : ReadFromDisk failed\\n\");\n                 break;\n@@ -1602,7 +1602,7 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n                 break;\n             }\n             // errors now are not fatal, we still did a reorganisation to a new chain in a valid way\n-            if (!block.SetBestChainInner(txdb, pindex))\n+            if (!SetBestChainInner(block2, txdb, pindex))\n                 break;\n         }\n     }\n@@ -1636,20 +1636,20 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n }\n \n \n-bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n+bool CBlockStore::AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned int nBlockPos)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(0,20).c_str());\n \n     // Construct new block index object\n-    CBlockIndex* pindexNew = new CBlockIndex(nFile, nBlockPos, *this);\n+    CBlockIndex* pindexNew = new CBlockIndex(nFile, nBlockPos, block);\n     if (!pindexNew)\n         return error(\"AddToBlockIndex() : new CBlockIndex failed\");\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n-    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n     {\n         pindexNew->pprev = (*miPrev).second;\n@@ -1666,7 +1666,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n \n     // New best\n     if (pindexNew->bnChainWork > bnBestChainWork)\n-        if (!SetBestChain(txdb, pindexNew))\n+        if (!SetBestChain(block, txdb, pindexNew))\n             return false;\n \n     txdb.Close();\n@@ -1676,7 +1676,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n         // Notify UI to display prev block's coinbase if it was ours\n         static uint256 hashPrevBestCoinBase;\n         UpdatedTransaction(hashPrevBestCoinBase);\n-        hashPrevBestCoinBase = vtx[0].GetHash();\n+        hashPrevBestCoinBase = block.vtx[0].GetHash();\n     }\n \n     return true;\n@@ -1739,65 +1739,65 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n     return true;\n }\n \n-bool CHub::EmitBlock(CBlock& block)\n+bool CBlockStore::EmitBlock(CBlock& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n \n     LOCK(cs_main);\n \n     if (mapBlockIndex.count(hash))\n-        return error(\"CHub::EmitBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return error(\"CBlockStore::EmitBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n     if (mapOrphanBlocks.count(hash))\n-        return error(\"CHub::EmitBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+        return error(\"CBlockStore::EmitBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n \n     // Preliminary checks\n     if (!block.CheckBlock())\n-        return error(\"CHub::EmitBlock() : CheckBlock FAILED\");\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n     if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n@@ -1806,37 +1806,37 @@ bool CHub::EmitBlock(CBlock& block)\n         int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            return block.DoS(100, error(\"CHub::EmitBlock() : block with timestamp before last checkpoint\"));\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n         bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            return block.DoS(100, error(\"CHub::EmitBlock() : block with too little proof-of-work\"));\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n     if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"CHub::EmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        printf(\"CBlockStore::EmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n         CBlock* pblock = new CBlock(block);\n         mapOrphanBlocks.insert(make_pair(hash, pblock));\n         mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        AskForBlocks(GetOrphanRoot(pblock), hash);\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!block.AcceptBlock())\n-        return error(\"CHub::EmitBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+        return error(\"CBlockStore::EmitBlock() : AcceptBlock FAILED\");\n \n-    SubmitCallbackCommitBlock(block);\n+    CallbackCommitBlock(block);\n \n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n@@ -1849,18 +1849,18 @@ bool CHub::EmitBlock(CBlock& block)\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n+            if (AcceptBlock(*pblockOrphan))\n             {\n                 vWorkQueue.push_back(pblockOrphan->GetHash());\n-                SubmitCallbackCommitBlock(*pblockOrphan);\n+                CallbackCommitBlock(*pblockOrphan);\n             }\n             mapOrphanBlocks.erase(pblockOrphan->GetHash());\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"CHub::EmitBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::EmitBlock: ACCEPTED\\n\");\n \n     return true;\n }\n@@ -1931,7 +1931,7 @@ FILE* AppendBlockFile(unsigned int& nFileRet)\n     }\n }\n \n-bool LoadBlockIndex(bool fAllowNew)\n+bool CBlockStore::LoadBlockIndex(bool fAllowNew)\n {\n     if (fTestNet)\n     {\n@@ -2001,7 +2001,7 @@ bool LoadBlockIndex(bool fAllowNew)\n         unsigned int nBlockPos;\n         if (!block.WriteToDisk(nFile, nBlockPos))\n             return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n-        if (!block.AddToBlockIndex(nFile, nBlockPos))\n+        if (!AddToBlockIndex(block, nFile, nBlockPos))\n             return error(\"LoadBlockIndex() : genesis block not accepted\");\n     }\n "
      },
      {
        "sha": "0ec6626cd4216341620d9753698b8a53d2c79bd5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ba767b3e2fa767fd8c81db2239a05285a72dab/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "patch": "@@ -84,7 +84,6 @@ void UnregisterWallet(CWallet* pwalletIn);\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);\n-bool LoadBlockIndex(bool fAllowNew=true);\n void PrintBlockTree();\n bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n@@ -1008,16 +1007,8 @@ class CBlock\n     }\n \n \n-    bool DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex);\n-    bool ConnectBlock(CTxDB& txdb, CBlockIndex* pindex);\n     bool ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions=true);\n-    bool SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew);\n-    bool AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos);\n     bool CheckBlock() const;\n-    bool AcceptBlock();\n-\n-private:\n-    bool SetBestChainInner(CTxDB& txdb, CBlockIndex *pindexNew);\n };\n \n "
      }
    ]
  },
  {
    "sha": "9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjkyNmM4ZDM0YTM4ZTFmZjliYmNiODY2YmYxMjY2YzI4NmIzZjY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T19:26:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:56Z"
      },
      "message": "Move block checking from CTxDB::LoadBlockIndex->LoadBlockIndex.",
      "tree": {
        "sha": "3bd84dc339c54a28acb85fb739b4d5d6c457af05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bd84dc339c54a28acb85fb739b4d5d6c457af05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ba767b3e2fa767fd8c81db2239a05285a72dab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60ba767b3e2fa767fd8c81db2239a05285a72dab"
      }
    ],
    "stats": {
      "total": 275,
      "additions": 137,
      "deletions": 138
    },
    "files": [
      {
        "sha": "24e77a7b22d4176fa38c36d63574737084194c76",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
        "patch": "@@ -44,7 +44,7 @@ class CBlockStore\n     bool AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned int nBlockPos);\n     bool AcceptBlock(CBlock& block);\n public:\n-    bool LoadBlockIndex(bool fAllowNew=true);\n+    bool LoadBlockIndex(bool fReadOnly=false);\n \n //Register methods\n     // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit"
      },
      {
        "sha": "62e952058a55882b9fc8491d2e73df146ca411d9",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 126,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
        "patch": "@@ -575,132 +575,6 @@ bool CTxDB::LoadBlockIndex()\n     // Load bnBestInvalidWork, OK if it doesn't exist\n     ReadBestInvalidWork(bnBestInvalidWork);\n \n-    // Verify blocks in the best chain\n-    int nCheckLevel = GetArg(\"-checklevel\", 1);\n-    int nCheckDepth = GetArg( \"-checkblocks\", 2500);\n-    if (nCheckDepth == 0)\n-        nCheckDepth = 1000000000; // suffices until the year 19000\n-    if (nCheckDepth > nBestHeight)\n-        nCheckDepth = nBestHeight;\n-    printf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n-    CBlockIndex* pindexFork = NULL;\n-    map<pair<unsigned int, unsigned int>, CBlockIndex*> mapBlockPos;\n-    for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex = pindex->pprev)\n-    {\n-        if (fRequestShutdown || pindex->nHeight < nBestHeight-nCheckDepth)\n-            break;\n-        CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n-            return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n-        // check level 1: verify block validity\n-        if (nCheckLevel>0 && !block.CheckBlock())\n-        {\n-            printf(\"LoadBlockIndex() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n-            pindexFork = pindex->pprev;\n-        }\n-        // check level 2: verify transaction index validity\n-        if (nCheckLevel>1)\n-        {\n-            pair<unsigned int, unsigned int> pos = make_pair(pindex->nFile, pindex->nBlockPos);\n-            mapBlockPos[pos] = pindex;\n-            BOOST_FOREACH(const CTransaction &tx, block.vtx)\n-            {\n-                uint256 hashTx = tx.GetHash();\n-                CTxIndex txindex;\n-                if (ReadTxIndex(hashTx, txindex))\n-                {\n-                    // check level 3: checker transaction hashes\n-                    if (nCheckLevel>2 || pindex->nFile != txindex.pos.nFile || pindex->nBlockPos != txindex.pos.nBlockPos)\n-                    {\n-                        // either an error or a duplicate transaction\n-                        CTransaction txFound;\n-                        if (!txFound.ReadFromDisk(txindex.pos))\n-                        {\n-                            printf(\"LoadBlockIndex() : *** cannot read mislocated transaction %s\\n\", hashTx.ToString().c_str());\n-                            pindexFork = pindex->pprev;\n-                        }\n-                        else\n-                            if (txFound.GetHash() != hashTx) // not a duplicate tx\n-                            {\n-                                printf(\"LoadBlockIndex(): *** invalid tx position for %s\\n\", hashTx.ToString().c_str());\n-                                pindexFork = pindex->pprev;\n-                            }\n-                    }\n-                    // check level 4: check whether spent txouts were spent within the main chain\n-                    unsigned int nOutput = 0;\n-                    if (nCheckLevel>3)\n-                    {\n-                        BOOST_FOREACH(const CDiskTxPos &txpos, txindex.vSpent)\n-                        {\n-                            if (!txpos.IsNull())\n-                            {\n-                                pair<unsigned int, unsigned int> posFind = make_pair(txpos.nFile, txpos.nBlockPos);\n-                                if (!mapBlockPos.count(posFind))\n-                                {\n-                                    printf(\"LoadBlockIndex(): *** found bad spend at %d, hashBlock=%s, hashTx=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str(), hashTx.ToString().c_str());\n-                                    pindexFork = pindex->pprev;\n-                                }\n-                                // check level 6: check whether spent txouts were spent by a valid transaction that consume them\n-                                if (nCheckLevel>5)\n-                                {\n-                                    CTransaction txSpend;\n-                                    if (!txSpend.ReadFromDisk(txpos))\n-                                    {\n-                                        printf(\"LoadBlockIndex(): *** cannot read spending transaction of %s:%i from disk\\n\", hashTx.ToString().c_str(), nOutput);\n-                                        pindexFork = pindex->pprev;\n-                                    }\n-                                    else if (!txSpend.CheckTransaction())\n-                                    {\n-                                        printf(\"LoadBlockIndex(): *** spending transaction of %s:%i is invalid\\n\", hashTx.ToString().c_str(), nOutput);\n-                                        pindexFork = pindex->pprev;\n-                                    }\n-                                    else\n-                                    {\n-                                        bool fFound = false;\n-                                        BOOST_FOREACH(const CTxIn &txin, txSpend.vin)\n-                                            if (txin.prevout.hash == hashTx && txin.prevout.n == nOutput)\n-                                                fFound = true;\n-                                        if (!fFound)\n-                                        {\n-                                            printf(\"LoadBlockIndex(): *** spending transaction of %s:%i does not spend it\\n\", hashTx.ToString().c_str(), nOutput);\n-                                            pindexFork = pindex->pprev;\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                            nOutput++;\n-                        }\n-                    }\n-                }\n-                // check level 5: check whether all prevouts are marked spent\n-                if (nCheckLevel>4)\n-                {\n-                     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n-                     {\n-                          CTxIndex txindex;\n-                          if (ReadTxIndex(txin.prevout.hash, txindex))\n-                              if (txindex.vSpent.size()-1 < txin.prevout.n || txindex.vSpent[txin.prevout.n].IsNull())\n-                              {\n-                                  printf(\"LoadBlockIndex(): *** found unspent prevout %s:%i in %s\\n\", txin.prevout.hash.ToString().c_str(), txin.prevout.n, hashTx.ToString().c_str());\n-                                  pindexFork = pindex->pprev;\n-                              }\n-                     }\n-                }\n-            }\n-        }\n-    }\n-    if (pindexFork && !fRequestShutdown)\n-    {\n-        // Reorg back to the fork\n-        printf(\"LoadBlockIndex() : *** moving best chain pointer back to block %d\\n\", pindexFork->nHeight);\n-        CBlock block;\n-        if (!block.ReadFromDisk(pindexFork))\n-            return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n-        //CTxDB txdb;\n-        //block.SetBestChain(txdb, pindexFork);\n-        assert(false);\n-    }\n-\n     return true;\n }\n "
      },
      {
        "sha": "66f6413fae50c7bc9b0437261fdbdd4713b7f41f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
        "patch": "@@ -521,14 +521,6 @@ bool AppInit2()\n \n     // ********************************************************* Step 6: load blockchain\n \n-    if (GetBoolArg(\"-loadblockindextest\"))\n-    {\n-        CTxDB txdb(\"r\");\n-        txdb.LoadBlockIndex();\n-        PrintBlockTree();\n-        return false;\n-    }\n-\n     try {\n         phub = new CHub();\n     } catch (runtime_error& e) {\n@@ -537,6 +529,13 @@ bool AppInit2()\n     CBlockStore* pblockstore = new CBlockStore();\n     phub->ConnectToBlockStore(pblockstore);\n \n+    if (GetBoolArg(\"-loadblockindextest\"))\n+    {\n+        pblockstore->LoadBlockIndex(true);\n+        PrintBlockTree();\n+        return false;\n+    }\n+\n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();"
      },
      {
        "sha": "c65c85c62475fbffd7c5101c43056d7be0b2df70",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 129,
        "deletions": 3,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
        "patch": "@@ -1931,7 +1931,7 @@ FILE* AppendBlockFile(unsigned int& nFileRet)\n     }\n }\n \n-bool CBlockStore::LoadBlockIndex(bool fAllowNew)\n+bool CBlockStore::LoadBlockIndex(bool fReadOnly)\n {\n     if (fTestNet)\n     {\n@@ -1945,17 +1945,143 @@ bool CBlockStore::LoadBlockIndex(bool fAllowNew)\n     //\n     // Load block index\n     //\n-    CTxDB txdb(\"cr\");\n+    CTxDB txdb(fReadOnly ? \"r\" : \"cr\");\n     if (!txdb.LoadBlockIndex())\n         return false;\n+\n+    // Verify blocks in the best chain\n+    int nCheckLevel = GetArg(\"-checklevel\", 1);\n+    int nCheckDepth = GetArg( \"-checkblocks\", 2500);\n+    if (nCheckDepth == 0)\n+        nCheckDepth = 1000000000; // suffices until the year 19000\n+    if (nCheckDepth > nBestHeight)\n+        nCheckDepth = nBestHeight;\n+    printf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n+    CBlockIndex* pindexFork = NULL;\n+    map<pair<unsigned int, unsigned int>, CBlockIndex*> mapBlockPos;\n+    for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex = pindex->pprev)\n+    {\n+        if (fRequestShutdown || pindex->nHeight < nBestHeight-nCheckDepth)\n+            break;\n+        CBlock block;\n+        if (!block.ReadFromDisk(pindex))\n+            return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n+        // check level 1: verify block validity\n+        if (nCheckLevel>0 && !block.CheckBlock())\n+        {\n+            printf(\"LoadBlockIndex() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n+            pindexFork = pindex->pprev;\n+        }\n+        // check level 2: verify transaction index validity\n+        if (nCheckLevel>1)\n+        {\n+            pair<unsigned int, unsigned int> pos = make_pair(pindex->nFile, pindex->nBlockPos);\n+            mapBlockPos[pos] = pindex;\n+            BOOST_FOREACH(const CTransaction &tx, block.vtx)\n+            {\n+                uint256 hashTx = tx.GetHash();\n+                CTxIndex txindex;\n+                if (txdb.ReadTxIndex(hashTx, txindex))\n+                {\n+                    // check level 3: checker transaction hashes\n+                    if (nCheckLevel>2 || pindex->nFile != txindex.pos.nFile || pindex->nBlockPos != txindex.pos.nBlockPos)\n+                    {\n+                        // either an error or a duplicate transaction\n+                        CTransaction txFound;\n+                        if (!txFound.ReadFromDisk(txindex.pos))\n+                        {\n+                            printf(\"LoadBlockIndex() : *** cannot read mislocated transaction %s\\n\", hashTx.ToString().c_str());\n+                            pindexFork = pindex->pprev;\n+                        }\n+                        else\n+                            if (txFound.GetHash() != hashTx) // not a duplicate tx\n+                            {\n+                                printf(\"LoadBlockIndex(): *** invalid tx position for %s\\n\", hashTx.ToString().c_str());\n+                                pindexFork = pindex->pprev;\n+                            }\n+                    }\n+                    // check level 4: check whether spent txouts were spent within the main chain\n+                    unsigned int nOutput = 0;\n+                    if (nCheckLevel>3)\n+                    {\n+                        BOOST_FOREACH(const CDiskTxPos &txpos, txindex.vSpent)\n+                        {\n+                            if (!txpos.IsNull())\n+                            {\n+                                pair<unsigned int, unsigned int> posFind = make_pair(txpos.nFile, txpos.nBlockPos);\n+                                if (!mapBlockPos.count(posFind))\n+                                {\n+                                    printf(\"LoadBlockIndex(): *** found bad spend at %d, hashBlock=%s, hashTx=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str(), hashTx.ToString().c_str());\n+                                    pindexFork = pindex->pprev;\n+                                }\n+                                // check level 6: check whether spent txouts were spent by a valid transaction that consume them\n+                                if (nCheckLevel>5)\n+                                {\n+                                    CTransaction txSpend;\n+                                    if (!txSpend.ReadFromDisk(txpos))\n+                                    {\n+                                        printf(\"LoadBlockIndex(): *** cannot read spending transaction of %s:%i from disk\\n\", hashTx.ToString().c_str(), nOutput);\n+                                        pindexFork = pindex->pprev;\n+                                    }\n+                                    else if (!txSpend.CheckTransaction())\n+                                    {\n+                                        printf(\"LoadBlockIndex(): *** spending transaction of %s:%i is invalid\\n\", hashTx.ToString().c_str(), nOutput);\n+                                        pindexFork = pindex->pprev;\n+                                    }\n+                                    else\n+                                    {\n+                                        bool fFound = false;\n+                                        BOOST_FOREACH(const CTxIn &txin, txSpend.vin)\n+                                            if (txin.prevout.hash == hashTx && txin.prevout.n == nOutput)\n+                                                fFound = true;\n+                                        if (!fFound)\n+                                        {\n+                                            printf(\"LoadBlockIndex(): *** spending transaction of %s:%i does not spend it\\n\", hashTx.ToString().c_str(), nOutput);\n+                                            pindexFork = pindex->pprev;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            nOutput++;\n+                        }\n+                    }\n+                }\n+                // check level 5: check whether all prevouts are marked spent\n+                if (nCheckLevel>4)\n+                {\n+                     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+                     {\n+                          CTxIndex txindex;\n+                          if (txdb.ReadTxIndex(txin.prevout.hash, txindex))\n+                              if (txindex.vSpent.size()-1 < txin.prevout.n || txindex.vSpent[txin.prevout.n].IsNull())\n+                              {\n+                                  printf(\"LoadBlockIndex(): *** found unspent prevout %s:%i in %s\\n\", txin.prevout.hash.ToString().c_str(), txin.prevout.n, hashTx.ToString().c_str());\n+                                  pindexFork = pindex->pprev;\n+                              }\n+                     }\n+                }\n+            }\n+        }\n+    }\n+    if (pindexFork && !fRequestShutdown)\n+    {\n+        // Reorg back to the fork\n+        printf(\"LoadBlockIndex() : *** moving best chain pointer back to block %d\\n\", pindexFork->nHeight);\n+        CBlock block;\n+        if (!block.ReadFromDisk(pindexFork))\n+            return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n+        CTxDB txdb;\n+        SetBestChain(block, txdb, pindexFork);\n+    }\n+\n     txdb.Close();\n \n     //\n     // Init with genesis block\n     //\n     if (mapBlockIndex.empty())\n     {\n-        if (!fAllowNew)\n+        if (fReadOnly)\n             return false;\n \n         // Genesis Block:"
      }
    ]
  },
  {
    "sha": "9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YThjZDFkZTliMTlhN2UxNmI4MDI4ZWVlZWFjMzA5ODE2NzE0OGM2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T20:59:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:57Z"
      },
      "message": "Add CWallet::HandleCommitBlock and move junk from main.cpp to it.\n\nNote that this changes the way the GUI shows coinbases of users:\nit now shows them only after the first non-orphan block based on\nthe generating block, instead of after the first block based on\nthe generating one period.",
      "tree": {
        "sha": "029d6fb01b418ba4b98f4f12105bdf706288f61a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/029d6fb01b418ba4b98f4f12105bdf706288f61a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 30,
      "deletions": 45
    },
    "files": [
      {
        "sha": "332f7c5582c3b1a3f227ddfe03a1695226e1f161",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 45,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
        "patch": "@@ -116,20 +116,6 @@ void SyncWithWallets(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n         pwallet->AddToWalletIfInvolvingMe(tx, pblock, fUpdate);\n }\n \n-// notify wallets about a new best chain\n-void static SetBestChain(const CBlockLocator& loc)\n-{\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->SetBestChain(loc);\n-}\n-\n-// notify wallets about an updated transaction\n-void static UpdatedTransaction(const uint256& hashTx)\n-{\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->UpdatedTransaction(hashTx);\n-}\n-\n // dump all wallets\n void static PrintWallets(const CBlock& block)\n {\n@@ -1413,10 +1399,6 @@ bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n             return error(\"ConnectBlock() : WriteBlockIndex failed\");\n     }\n \n-    // Watch for transactions paying to me\n-    BOOST_FOREACH(CTransaction& tx, block.vtx)\n-        SyncWithWallets(tx, &block, true);\n-\n     return true;\n }\n \n@@ -1469,7 +1451,7 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n     }\n \n     // Connect longer branch\n-    vector<CTransaction> vDelete;\n+    vector<CBlock> vCommitted;\n     for (unsigned int i = 0; i < vConnect.size(); i++)\n     {\n         CBlockIndex* pindex = vConnect[i];\n@@ -1483,8 +1465,7 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         }\n \n         // Queue memory transactions to delete\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-            vDelete.push_back(tx);\n+        vCommitted.push_back(block);\n     }\n     if (!txdb.WriteHashBestChain(pindexNew->GetBlockHash()))\n         return error(\"CBlockStore::Reorganize() : WriteHashBestChain failed\");\n@@ -1508,8 +1489,12 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         mempool.accept(txdb, tx, false, NULL);\n \n     // Delete redundant memory transactions that are in the connected branch\n-    BOOST_FOREACH(CTransaction& tx, vDelete)\n-        mempool.remove(tx);\n+    BOOST_FOREACH(CBlock& block, vCommitted)\n+        BOOST_FOREACH(CTransaction& tx, block.vtx)\n+            mempool.remove(tx);\n+\n+    BOOST_FOREACH(CBlock& block, vCommitted)\n+        CallbackCommitBlock(block);\n \n     printf(\"REORGANIZE: done\\n\");\n \n@@ -1539,6 +1524,8 @@ bool CBlockStore::SetBestChainInner(CBlock& block, CTxDB& txdb, CBlockIndex *pin\n     BOOST_FOREACH(CTransaction& tx, block.vtx)\n         mempool.remove(tx);\n \n+    CallbackCommitBlock(block);\n+\n     return true;\n }\n \n@@ -1607,14 +1594,6 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n         }\n     }\n \n-    // Update best block in wallet (so we can detect restored wallets)\n-    bool fIsInitialDownload = IsInitialBlockDownload();\n-    if (!fIsInitialDownload)\n-    {\n-        const CBlockLocator locator(pindexNew);\n-        ::SetBestChain(locator);\n-    }\n-\n     // New best block\n     hashBestChain = hash;\n     pindexBest = pindexNew;\n@@ -1626,7 +1605,7 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n \n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n-    if (!fIsInitialDownload && !strCmd.empty())\n+    if (!IsInitialBlockDownload() && !strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", hashBestChain.GetHex());\n         boost::thread t(runCommand, strCmd); // thread runs free\n@@ -1671,14 +1650,6 @@ bool CBlockStore::AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned in\n \n     txdb.Close();\n \n-    if (pindexNew == pindexBest)\n-    {\n-        // Notify UI to display prev block's coinbase if it was ours\n-        static uint256 hashPrevBestCoinBase;\n-        UpdatedTransaction(hashPrevBestCoinBase);\n-        hashPrevBestCoinBase = block.vtx[0].GetHash();\n-    }\n-\n     return true;\n }\n \n@@ -1836,8 +1807,6 @@ bool CBlockStore::EmitBlock(CBlock& block)\n     if (!AcceptBlock(block))\n         return error(\"CBlockStore::EmitBlock() : AcceptBlock FAILED\");\n \n-    CallbackCommitBlock(block);\n-\n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n     vWorkQueue.push_back(hash);\n@@ -1850,10 +1819,7 @@ bool CBlockStore::EmitBlock(CBlock& block)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n             if (AcceptBlock(*pblockOrphan))\n-            {\n                 vWorkQueue.push_back(pblockOrphan->GetHash());\n-                CallbackCommitBlock(*pblockOrphan);\n-            }\n             mapOrphanBlocks.erase(pblockOrphan->GetHash());\n             delete pblockOrphan;\n         }"
      },
      {
        "sha": "d77dc5851b523e659d72793b4749bd7e68e8672c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
        "patch": "@@ -409,6 +409,24 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+void CWallet::HandleCommitBlock(const CBlock& block)\n+{\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        AddToWalletIfInvolvingMe(tx, &block, true);\n+\n+    // we can write best chain locator more often because its in a separate thread from the actual chain download\n+    if (!IsInitialBlockDownload() || nBestHeight % 500 == 0)\n+    {\n+        const CBlockLocator locator(pindexBest);\n+        SetBestChain(locator);\n+    }\n+\n+    // Notify UI to display prev block's coinbase if it was ours\n+    static uint256 hashPrevBestCoinBase;\n+    UpdatedTransaction(hashPrevBestCoinBase);\n+    hashPrevBestCoinBase = block.vtx[0].GetHash();\n+}\n+\n void CWallet::HandleCommitTransactionToMemoryPool(const CTransaction& tx)\n {\n     AddToWalletIfInvolvingMe(tx, NULL, true);"
      },
      {
        "sha": "2724dff10d26c994edc242e2935060e6fff974b8",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8cd1de9b19a7e16b8028eeeeac3098167148c6/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
        "patch": "@@ -137,6 +137,7 @@ class CWallet : public CCryptoKeyStore, public CHubListener\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n+    void HandleCommitBlock(const CBlock& block);\n     void HandleCommitTransactionToMemoryPool(const CTransaction& tx);\n     bool EraseFromWallet(uint256 hash);\n     void WalletUpdateSpent(const CTransaction& prevout);"
      }
    ]
  },
  {
    "sha": "03aaa47487f566e5f00305e48d2a8223260eead3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2FhYTQ3NDg3ZjU2NmU1ZjAwMzA1ZTQ4ZDJhODIyMzI2MGVlYWQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T19:18:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T01:29:23Z"
      },
      "message": "Add ability to post_all() in CSemaphore.",
      "tree": {
        "sha": "83d794878be0d77890465ee05f52716cec132830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83d794878be0d77890465ee05f52716cec132830"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03aaa47487f566e5f00305e48d2a8223260eead3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aaa47487f566e5f00305e48d2a8223260eead3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03aaa47487f566e5f00305e48d2a8223260eead3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aaa47487f566e5f00305e48d2a8223260eead3/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8cd1de9b19a7e16b8028eeeeac3098167148c6"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "88ad5035e24d4b5e02995ec9c94b8dced335d614",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03aaa47487f566e5f00305e48d2a8223260eead3/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03aaa47487f566e5f00305e48d2a8223260eead3/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=03aaa47487f566e5f00305e48d2a8223260eead3",
        "patch": "@@ -126,15 +126,18 @@ class CSemaphore\n     boost::condition_variable condition;\n     boost::mutex mutex;\n     int value;\n+    int waiting;\n \n public:\n-    CSemaphore(int init) : value(init) {}\n+    CSemaphore(int init) : value(init), waiting(0) {}\n \n     void wait() {\n         boost::unique_lock<boost::mutex> lock(mutex);\n+        waiting++;\n         while (value < 1) {\n             condition.wait(lock);\n         }\n+        waiting--;\n         value--;\n     }\n \n@@ -153,6 +156,14 @@ class CSemaphore\n         }\n         condition.notify_one();\n     }\n+\n+    void post_all() {\n+        {\n+            boost::unique_lock<boost::mutex> lock(mutex);\n+            value += waiting;\n+        }\n+        condition.notify_all();\n+    }\n };\n \n /** RAII-style semaphore lock */"
      }
    ]
  },
  {
    "sha": "c54072bf68dff06e4187f2f42a026dc5833bf494",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTQwNzJiZjY4ZGZmMDZlNDE4N2YyZjQyYTAyNmRjNTgzM2JmNDk0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T15:54:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T01:29:23Z"
      },
      "message": "Move AlreadyHave to CHub::NeedInv",
      "tree": {
        "sha": "5155e385c092809f97e8c2af42971b581d34a85d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5155e385c092809f97e8c2af42971b581d34a85d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c54072bf68dff06e4187f2f42a026dc5833bf494",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54072bf68dff06e4187f2f42a026dc5833bf494",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c54072bf68dff06e4187f2f42a026dc5833bf494",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54072bf68dff06e4187f2f42a026dc5833bf494/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "03aaa47487f566e5f00305e48d2a8223260eead3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aaa47487f566e5f00305e48d2a8223260eead3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03aaa47487f566e5f00305e48d2a8223260eead3"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 36,
      "deletions": 18
    },
    "files": [
      {
        "sha": "a98bc630776b469d02eca4d3a94f7c32bf03f8a1",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c54072bf68dff06e4187f2f42a026dc5833bf494/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c54072bf68dff06e4187f2f42a026dc5833bf494/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=c54072bf68dff06e4187f2f42a026dc5833bf494",
        "patch": "@@ -60,6 +60,10 @@ class CBlockStore\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n     bool EmitBlock(CBlock& block);\n+\n+    // Returns true if we have/have seen a block with the given hash\n+    // Does not indicate whether the block is orphan/was invalid/is in the main chain/is waiting to be committed/etc\n+    bool HaveSeenBlock(const uint256& hash);\n };\n \n #endif"
      },
      {
        "sha": "2fbb8923f473b98880c5a7644c1698fcf50b35f6",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c54072bf68dff06e4187f2f42a026dc5833bf494/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c54072bf68dff06e4187f2f42a026dc5833bf494/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=c54072bf68dff06e4187f2f42a026dc5833bf494",
        "patch": "@@ -17,6 +17,7 @@ class CBlock;\n class CMerkleTx;\n class CTransaction;\n class CAlert;\n+class CInv;\n \n class CHubSignalTable\n {\n@@ -106,6 +107,9 @@ class CHub\n     bool EmitTransaction(CMerkleTx& tx, bool fCheckInputs=true);\n     bool EmitTransaction(CTransaction& tx, bool fCheckInputs=true);\n \n+    // Returns true if we haven't seen a given inv and want it\n+    bool NeedInv(const CInv& inv);\n+\n //Connected wallet/etc access methods\n \n     // Ask that any listeners who have access to ask other nodes for blocks"
      },
      {
        "sha": "0821e8abf413a496a19b8cafe328b6d1e96182e8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 18,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c54072bf68dff06e4187f2f42a026dc5833bf494/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c54072bf68dff06e4187f2f42a026dc5833bf494/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c54072bf68dff06e4187f2f42a026dc5833bf494",
        "patch": "@@ -1831,6 +1831,12 @@ bool CBlockStore::EmitBlock(CBlock& block)\n     return true;\n }\n \n+bool CBlockStore::HaveSeenBlock(const uint256& hash)\n+{\n+    LOCK(cs_main);\n+    return mapBlockIndex.count(hash) ||\n+           mapOrphanBlocks.count(hash);\n+}\n \n \n \n@@ -2366,28 +2372,33 @@ bool CHub::EmitAlert(CAlert& alert)\n //\n \n \n-bool static AlreadyHave(CTxDB& txdb, const CInv& inv)\n+bool CHub::NeedInv(const CInv& inv)\n {\n     switch (inv.type)\n     {\n     case MSG_TX:\n         {\n-        bool txInMap = false;\n             {\n-            LOCK(mempool.cs);\n-            txInMap = (mempool.exists(inv.hash));\n+                LOCK(mempool.cs);\n+                if (mempool.exists(inv.hash))\n+                    return false;\n+            }\n+            {\n+                LOCK(cs_main);\n+                if (mapOrphanTransactions.count(inv.hash))\n+                    return false;\n             }\n-        return txInMap ||\n-               mapOrphanTransactions.count(inv.hash) ||\n-               txdb.ContainsTx(inv.hash);\n+            CTxDB txdb(\"r\");\n+            return !txdb.ContainsTx(inv.hash);\n         }\n-\n     case MSG_BLOCK:\n-        return mapBlockIndex.count(inv.hash) ||\n-               mapOrphanBlocks.count(inv.hash);\n+        if (pblockstore)\n+            return !pblockstore->HaveSeenBlock(inv.hash);\n+        else\n+            return false;\n     }\n-    // Don't know what it is, just say we already got one\n-    return true;\n+    // Don't know what it is, guess we don't need it\n+    return false;\n }\n \n \n@@ -2623,7 +2634,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 break;\n             }\n         }\n-        CTxDB txdb(\"r\");\n+\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             const CInv &inv = vInv[nInv];\n@@ -2632,11 +2643,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 return true;\n             pfrom->AddInventoryKnown(inv);\n \n-            bool fAlreadyHave = AlreadyHave(txdb, inv);\n+            bool fNeed = phub->NeedInv(inv);\n             if (fDebug)\n-                printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n+                printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fNeed ? \"need\" : \"have\");\n \n-            if (!fAlreadyHave)\n+            if (fNeed)\n                 pfrom->AskFor(inv);\n             else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n                 pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n@@ -3182,11 +3193,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         vector<CInv> vGetData;\n         int64 nNow = GetTime() * 1000000;\n-        CTxDB txdb(\"r\");\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(txdb, inv))\n+            if (phub->NeedInv(inv))\n             {\n                 printf(\"sending getdata: %s\\n\", inv.ToString().c_str());\n                 vGetData.push_back(inv);"
      }
    ]
  },
  {
    "sha": "b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGVlY2JlNjlkN2ZkNDExNWE0MmFlNzMyMWNkNGYzYzJiNTA5NDJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-07T07:39:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:10Z"
      },
      "message": "Add a setBlocksSeen and use it for duplicate checks.",
      "tree": {
        "sha": "1a68087fa2bd56c6bde68ee2430bfc5069d0ebff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a68087fa2bd56c6bde68ee2430bfc5069d0ebff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c54072bf68dff06e4187f2f42a026dc5833bf494",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54072bf68dff06e4187f2f42a026dc5833bf494",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c54072bf68dff06e4187f2f42a026dc5833bf494"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 21,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1fb721c2d353316d1b1f13440d462f2fb7f5842c",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <boost/signals2/signal.hpp>\n #include <queue>\n+#include <set>\n \n #include \"sync.h\"\n #include \"uint256.h\"\n@@ -30,6 +31,9 @@ class CBlockStoreSignalTable\n class CBlockStore\n {\n private:\n+    CCriticalSection cs_setBlocksSeen;\n+    std::set<uint256> setBlocksSeen;\n+\n     CBlockStoreSignalTable sigtable;\n \n     void CallbackCommitBlock(const CBlock &block) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock(block); }"
      },
      {
        "sha": "04df0eebf455aef547d2993c9adfea278415d5aa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
        "patch": "@@ -1758,14 +1758,14 @@ bool CBlockStore::EmitBlock(CBlock& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     LOCK(cs_main);\n \n-    if (mapBlockIndex.count(hash))\n-        return error(\"CBlockStore::EmitBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"CBlockStore::EmitBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n-\n     // Preliminary checks\n     if (!block.CheckBlock())\n         return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n@@ -1789,6 +1789,10 @@ bool CBlockStore::EmitBlock(CBlock& block)\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n     if (!mapBlockIndex.count(block.hashPrevBlock))\n@@ -1833,9 +1837,10 @@ bool CBlockStore::EmitBlock(CBlock& block)\n \n bool CBlockStore::HaveSeenBlock(const uint256& hash)\n {\n-    LOCK(cs_main);\n-    return mapBlockIndex.count(hash) ||\n-           mapOrphanBlocks.count(hash);\n+    LOCK(cs_setBlocksSeen);\n+    if (setBlocksSeen.count(hash))\n+        return true;\n+    return false;\n }\n \n \n@@ -2103,6 +2108,10 @@ bool CBlockStore::LoadBlockIndex(bool fReadOnly)\n             return error(\"LoadBlockIndex() : genesis block not accepted\");\n     }\n \n+    // Init setBlocksSeen\n+    for (map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++)\n+        setBlocksSeen.insert(it->first);\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjQ2YjlmYjBiNWNhYTMyZmZkY2JmMzFkMWM2MzI4ODg4NWQzOTRl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-07T06:50:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:10Z"
      },
      "message": "Add support for calling CNode->Misbehaving from CHub & CBlockStore.",
      "tree": {
        "sha": "f59fe851f4a10dfc61b2a183bd10d4b2c5a4a574",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f59fe851f4a10dfc61b2a183bd10d4b2c5a4a574"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "533d4cfa15c0b1acd93017d74b4aa4b4f2095c35",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
        "patch": "@@ -17,6 +17,7 @@ class CBlock;\n class CTxDB;\n class CBlockIndex;\n class CHub;\n+class CNode;\n \n class CBlockStoreSignalTable\n {\n@@ -26,6 +27,9 @@ class CBlockStoreSignalTable\n \n     CCriticalSection cs_sigAskForBlocks;\n     boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n+\n+    CCriticalSection cs_sigDoS;\n+    boost::function<void (CNode* pNode, const int nDoS)> sigDoS;\n };\n \n class CBlockStore\n@@ -40,6 +44,8 @@ class CBlockStore\n \n     void CallbackAskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)  { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOriginator); }\n \n+    void CallbackDoS(CNode* pNode, const int nDoS) { LOCK(sigtable.cs_sigDoS); sigtable.sigDoS(pNode, nDoS); }\n+\n     bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew);\n     bool DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n     bool ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n@@ -60,6 +66,9 @@ class CBlockStore\n     //    send the block query to that node.\n     void RegisterAskForBlocks(boost::function<void (const uint256, const uint256)> func) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks.connect(func); }\n \n+    // Register a handler (of the form void f(CNode* pNode, const int nDoS)) that calls pNode->Misbehaving(nDoS)\n+    void RegisterDoSHandler(boost::function<void (CNode* pNode, const int nDoS)> func) { LOCK(sigtable.cs_sigDoS); sigtable.sigDoS = func; }\n+\n //Blockchain access methods\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners"
      },
      {
        "sha": "0f5ff7009b371d82766668bcde272a7c0e437be9",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
        "patch": "@@ -48,6 +48,17 @@ class CHubCallbackCommitTransactionToMemoryPool : public CHubCallback\n     void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitTransactionToMemoryPool); sigtable.sigCommitTransactionToMemoryPool(tx); }\n };\n \n+class CHubCallbackDoS : public CHubCallback\n+{\n+private:\n+    CNode* pNode;\n+    int nDoS;\n+public:\n+    CHubCallbackDoS(CNode* pNodeIn, const int nDoSIn) { pNode = pNodeIn; nDoS = nDoSIn; if(pNode) pNode->AddRef(); }\n+    void Signal(CHubSignalTable& sigtable) { if (pNode) pNode->Misbehaving(nDoS); }\n+    ~CHubCallbackDoS() { if(pNode) pNode->Release(); }\n+};\n+\n void CHub::SubmitCallbackCommitBlock(const CBlock &block)\n {\n     LOCK(cs_callbacks);\n@@ -93,9 +104,18 @@ bool CHub::ConnectToBlockStore(CBlockStore* pblockstoreIn)\n \n     pblockstore->RegisterAskForBlocks(boost::bind(&CHub::AskForBlocks, this, _1, _2));\n \n+    pblockstore->RegisterDoSHandler(boost::bind(&CHub::SubmitCallbackDoS, this, _1, _2));\n+\n     return true;\n }\n \n+void CHub::SubmitCallbackDoS(CNode* pNode, const int nDoS)\n+{\n+    LOCK(cs_callbacks);\n+        queueCallbacks.push(new CHubCallbackDoS(pNode, nDoS));\n+    sem_callbacks.post();\n+}\n+\n void CHub::ProcessCallbacks()\n {\n     {"
      },
      {
        "sha": "9f0ce58c6fe5e113b43cfc227c012ee4d6e7481f",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
        "patch": "@@ -18,6 +18,7 @@ class CMerkleTx;\n class CTransaction;\n class CAlert;\n class CInv;\n+class CNode;\n \n class CHubSignalTable\n {\n@@ -65,6 +66,8 @@ class CHub\n \n     void SubmitCallbackCommitAlert(const CAlert &alert);\n     void SubmitCallbackRemoveAlert(const CAlert &alert);\n+\n+    void SubmitCallbackDoS(CNode* pNode, const int nDoS);\n public:\n //Util methods\n     // Loops to process callbacks (do not call manually, automatically started in the constructor)"
      }
    ]
  },
  {
    "sha": "296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTZmNjBkNTNmMmMxZGY1NmZiZmVmZGIwODdiZWViMDA4ZWE2YzJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T01:25:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:10Z"
      },
      "message": "Add support for emitting DoS callbacks from EmitBlock.",
      "tree": {
        "sha": "bc321e61fda622424850994d2569a766da550b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc321e61fda622424850994d2569a766da550b81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fc0a4c5c96d56f5c8c3b037b4874ed7cb8f093b5",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
        "patch": "@@ -72,7 +72,8 @@ class CBlockStore\n //Blockchain access methods\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n-    bool EmitBlock(CBlock& block);\n+    // DoSHandler will be called with the final value of block.nDoS at some point during callbacks.\n+    bool EmitBlock(CBlock& block, CNode* pNodeDoS=NULL);\n \n     // Returns true if we have/have seen a block with the given hash\n     // Does not indicate whether the block is orphan/was invalid/is in the main chain/is waiting to be committed/etc"
      },
      {
        "sha": "ad948a497cd70cfbc61840f24ac2173d29f87dc5",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
        "patch": "@@ -101,8 +101,12 @@ class CHub\n //Blockchain access methods\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n-    bool EmitBlock(CBlock& block) { if (!pblockstore) return false; return pblockstore->EmitBlock(block); }\n+\n+    // pNodeDoS->Misbehaving() will be called with the final value of block.nDoS at some point during callbacks.\n+    bool EmitBlock(CBlock& block, CNode* pNodeDoS=NULL) { if (!pblockstore) return false; return pblockstore->EmitBlock(block, pNodeDoS); }\n+\n     bool EmitAlert(CAlert& alert);\n+\n     // Emitting transactions already in a block is acceptable only if it is a supporting\n     //   transaction for one of our own\n     // fCheckInputs is ignored (and set to true) if !IsInitialBlockDownload() && !fClient"
      },
      {
        "sha": "b49528b84274c6ee3f91b82c2510740f9c826430",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/296f60d53f2c1df56fbfefdb087beeb008ea6c2b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
        "patch": "@@ -1754,7 +1754,7 @@ bool CBlockStore::AcceptBlock(CBlock& block)\n     return true;\n }\n \n-bool CBlockStore::EmitBlock(CBlock& block)\n+bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -1768,7 +1768,11 @@ bool CBlockStore::EmitBlock(CBlock& block)\n \n     // Preliminary checks\n     if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n         return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n     if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n@@ -1777,6 +1781,7 @@ bool CBlockStore::EmitBlock(CBlock& block)\n         int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n             return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n@@ -1785,6 +1790,7 @@ bool CBlockStore::EmitBlock(CBlock& block)\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n             return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n@@ -1809,7 +1815,11 @@ bool CBlockStore::EmitBlock(CBlock& block)\n \n     // Store to disk\n     if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n         return error(\"CBlockStore::EmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;"
      }
    ]
  },
  {
    "sha": "8d006b6c780dbfa91e3e45b7701fdce274c78dae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDAwNmI2Yzc4MGRiZmE5MWUzZTQ1Yjc3MDFmZGNlMjc0Yzc4ZGFl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T15:31:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:11Z"
      },
      "message": "Lock cs_main in ProcessMessage instead of ProcessMessages.\n\nThis removes the locking of cs_main before calling Emit* and should\nallow multiple ProcessMessage calls at once.\n\nIt no doubt locks cs_main in places where it isnt neccessary, but\nto avoid complicated and unforseen interactions, cs_main is locked\nfor nearly every message in ProcessMessage.",
      "tree": {
        "sha": "cc7e71222735de6d7b05b45bc2f515256ef2dfe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc7e71222735de6d7b05b45bc2f515256ef2dfe0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d006b6c780dbfa91e3e45b7701fdce274c78dae/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/296f60d53f2c1df56fbfefdb087beeb008ea6c2b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "76826878835ce27603f5cd1bbcb176c49d51c7fc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d006b6c780dbfa91e3e45b7701fdce274c78dae/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d006b6c780dbfa91e3e45b7701fdce274c78dae/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d006b6c780dbfa91e3e45b7701fdce274c78dae",
        "patch": "@@ -2431,6 +2431,7 @@ unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n \n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n {\n+    static CCriticalSection cs_mapReuseKey;\n     static map<CService, CPubKey> mapReuseKey;\n     RandAddSeedPerfmon();\n     if (fDebug)\n@@ -2447,6 +2448,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     if (strCommand == \"version\")\n     {\n+        LOCK(cs_main);\n+\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n@@ -2570,6 +2573,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     else if (strCommand == \"addr\")\n     {\n+        LOCK(cs_main);\n+\n         vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n@@ -2654,6 +2659,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n+        LOCK(cs_main);\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             const CInv &inv = vInv[nInv];\n@@ -2696,6 +2702,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return error(\"message getdata size() = %d\", vInv.size());\n         }\n \n+        LOCK(cs_main);\n+\n         BOOST_FOREACH(const CInv& inv, vInv)\n         {\n             if (fShutdown)\n@@ -2748,6 +2756,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n \n+        LOCK(cs_main);\n+\n         // Find the last block the caller has in the main chain\n         CBlockIndex* pindex = locator.GetBlockIndex();\n \n@@ -2786,6 +2796,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n \n+        LOCK(cs_main);\n+\n         CBlockIndex* pindex = NULL;\n         if (locator.IsNull())\n         {\n@@ -2851,6 +2863,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     else if (strCommand == \"getaddr\")\n     {\n+        LOCK(cs_main);\n+\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n@@ -2874,6 +2888,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         /// we have a chance to check the order here\n \n+        LOCK(cs_mapReuseKey);\n+\n         // Keep giving the same key to the same ip until they use it\n         if (!mapReuseKey.count(pfrom->addr))\n             pwalletMain->GetKeyFromPool(mapReuseKey[pfrom->addr], true);\n@@ -2900,6 +2916,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 pfrom->mapRequests.erase(mi);\n             }\n         }\n+\n+        LOCK(cs_main);\n+\n         if (!tracker.IsNull())\n             tracker.fn(tracker.param1, vRecv);\n     }\n@@ -3039,10 +3058,7 @@ bool ProcessMessages(CNode* pfrom)\n         bool fRet = false;\n         try\n         {\n-            {\n-                LOCK(cs_main);\n-                fRet = ProcessMessage(pfrom, strCommand, vMsg);\n-            }\n+            fRet = ProcessMessage(pfrom, strCommand, vMsg);\n             if (fShutdown)\n                 return true;\n         }"
      }
    ]
  },
  {
    "sha": "235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzVhMDI3N2NmZWJmNGRkNjVlNDAwNzBjMTNmODJhYzViNmViNmZm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T19:55:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Add a CBlockStore::GetBlockIndex to encapsulate mapBlockIndex.\n\nIt has a fBlocking flag to wait for the block being requested to\nbe committed after having been emitted (for use in the\n\"force request\" block request in the \"inv\" message handler).\n\nThis fixes a potential segfault if -blockbuffersize is overly big.",
      "tree": {
        "sha": "f81ab468180bed35d161938d576e28e766709e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f81ab468180bed35d161938d576e28e766709e51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8d006b6c780dbfa91e3e45b7701fdce274c78dae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d006b6c780dbfa91e3e45b7701fdce274c78dae"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 85,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8af4311814fa46a6f1b2ee42604cd48b71cea418",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -183,6 +183,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/script.cpp \\\n     src/main.cpp \\\n     src/hub.cpp \\\n+    src/blockstore.cpp \\\n     src/init.cpp \\\n     src/net.cpp \\\n     src/irc.cpp \\"
      },
      {
        "sha": "1c6c2fd9e7caf731c978b224777819e94f8fbf9f",
        "filename": "src/blockstore.cpp",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/blockstore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/blockstore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.cpp?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -0,0 +1,15 @@\n+#include \"blockstore.h\"\n+#include \"util.h\"\n+#include \"main.h\"\n+\n+void CBlockStore::CallbackCommitBlock(const CBlock &block)\n+{\n+    {\n+        LOCK(cs_mapGetBlockIndexWaits);\n+        std::map<uint256, CSemaphore*>::iterator it = mapGetBlockIndexWaits.find(block.GetHash());\n+        if (it != mapGetBlockIndexWaits.end() && it->second != NULL)\n+            it->second->post_all();\n+    }\n+    LOCK(sigtable.cs_sigCommitBlock);\n+    sigtable.sigCommitBlock(block);\n+}"
      },
      {
        "sha": "5c2268c57443bb2345095b0593b3a64d29feb8cf",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -38,9 +38,12 @@ class CBlockStore\n     CCriticalSection cs_setBlocksSeen;\n     std::set<uint256> setBlocksSeen;\n \n+    CCriticalSection cs_mapGetBlockIndexWaits;\n+    std::map<uint256, CSemaphore*> mapGetBlockIndexWaits;\n+\n     CBlockStoreSignalTable sigtable;\n \n-    void CallbackCommitBlock(const CBlock &block) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock(block); }\n+    void CallbackCommitBlock(const CBlock &block);\n \n     void CallbackAskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)  { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOriginator); }\n \n@@ -78,6 +81,12 @@ class CBlockStore\n     // Returns true if we have/have seen a block with the given hash\n     // Does not indicate whether the block is orphan/was invalid/is in the main chain/is waiting to be committed/etc\n     bool HaveSeenBlock(const uint256& hash);\n+\n+    // Return CBlockIndex* with *phashBlock == hash or NULL if we dont have one\n+    // if (fBlocking) wait for the block to be committed (assuming it has already been emitted)\n+    //   This can still return NULL even if the block has been emitted if the block is invalid\n+    // WARNING: DO NOT call this with fBlocking == true if you are holding cs_main\n+    const CBlockIndex* GetBlockIndex(const uint256& hash, bool fBlocking=false);\n };\n \n #endif"
      },
      {
        "sha": "38dcd84c1ba462412e9140e34ef5ce0075faf23c",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -117,6 +117,12 @@ class CHub\n     // Returns true if we haven't seen a given inv and want it\n     bool NeedInv(const CInv& inv);\n \n+    // Return CBlockIndex* with *phashBlock == hash or NULL if we dont have one\n+    // if (fBlocking) wait for the block to be committed (assuming it has already been emitted)\n+    //   This can still return NULL even if the block has been emitted if the block is invalid\n+    // WARNING: DO NOT call this with fBlocking == true if you are holding cs_main\n+    const CBlockIndex* GetBlockIndex(const uint256& hash, bool fBlocking=false) { if (!pblockstore) return NULL; return pblockstore->GetBlockIndex(hash, fBlocking); }\n+\n //Connected wallet/etc access methods\n \n     // Ask that any listeners who have access to ask other nodes for blocks"
      },
      {
        "sha": "35abaf9b42d814a15bc16d9d9399b5403598a4c5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 4,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -1853,6 +1853,42 @@ bool CBlockStore::HaveSeenBlock(const uint256& hash)\n     return false;\n }\n \n+const CBlockIndex* CBlockStore::GetBlockIndex(const uint256& hash, bool fBlocking)\n+{\n+    bool fHave;\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        fHave = setBlocksSeen.count(hash) > 0;\n+    }\n+    CSemaphore* psem;\n+    {\n+        LOCK(cs_main);\n+        if (mapBlockIndex.count(hash) > 0)\n+            return mapBlockIndex[hash];\n+\n+        if (!fBlocking || !fHave)\n+            return NULL;\n+        else\n+        {\n+            LOCK(cs_mapGetBlockIndexWaits);\n+            std::map<uint256, CSemaphore*>::iterator it = mapGetBlockIndexWaits.find(hash);\n+            if (it != mapGetBlockIndexWaits.end() && it->second != NULL)\n+                psem = it->second;\n+            else\n+                psem = mapGetBlockIndexWaits[hash] = new CSemaphore(0);\n+        }\n+    }\n+    psem->wait();\n+    {\n+        LOCK(cs_main);\n+        std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(hash);\n+        if (it != mapBlockIndex.end())\n+            return it->second;\n+        else\n+            return NULL;\n+    }\n+}\n+\n \n \n \n@@ -2659,7 +2695,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n-        LOCK(cs_main);\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             const CInv &inv = vInv[nInv];\n@@ -2672,16 +2707,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             if (fDebug)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fNeed ? \"need\" : \"have\");\n \n+            bool fOrphanBlock = false;\n+            if (!fNeed && inv.type == MSG_BLOCK)\n+            {\n+                LOCK(cs_main);\n+                fOrphanBlock = mapOrphanBlocks.count(inv.hash);\n+            }\n+\n             if (fNeed)\n                 pfrom->AskFor(inv);\n-            else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+            else if (fOrphanBlock) {\n+                LOCK(cs_main);\n                 pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n             } else if (nInv == nLastBlock) {\n                 // In case we are on a very long side-chain, it is possible that we already have\n                 // the last block in an inv bundle sent in response to getblocks. Try to detect\n                 // this situation and push another getblocks to continue.\n-                std::vector<CInv> vGetData(1,inv);\n-                pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n+                pfrom->PushGetBlocks(phub->GetBlockIndex(inv.hash, true), uint256(0));\n                 if (fDebug)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }"
      },
      {
        "sha": "4d9f655127477bf6442f8c0fb062439a1882f8c9",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -66,6 +66,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hub.o \\\n+    obj/blockstore.o \\\n     obj/noui.o\n \n all: bitcoind.exe"
      },
      {
        "sha": "c2c2f9c263777bbe0675c030f521d99b430da70e",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -63,6 +63,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hub.o \\\n+    obj/blockstore.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "4cab225bdd5917b5faff7166c09cc4e8a23dec5c",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -90,6 +90,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hub.o \\\n+    obj/blockstore.o \\\n     obj/noui.o\n \n ifdef USE_UPNP"
      },
      {
        "sha": "22d799bc17222d76faf50587023f38fa18c152e5",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -110,6 +110,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hub.o \\\n+    obj/blockstore.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "7571a3ca430d0b74b14a4c2c7b82b26ae32dce98",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -149,7 +149,7 @@ void AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)\n     pnodeToAsk->Release();\n }\n \n-void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n+void CNode::PushGetBlocks(const CBlockIndex* pindexBegin, uint256 hashEnd)\n {\n     // Filter out duplicate requests\n     if (pindexBegin == pindexLastGetBlocksBegin && hashEnd == hashLastGetBlocksEnd)"
      },
      {
        "sha": "58e734917798a7431f1384d460e6fb0400bf9b30",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "patch": "@@ -173,7 +173,7 @@ class CNode\n     std::map<uint256, CRequestTracker> mapRequests;\n     CCriticalSection cs_mapRequests;\n     uint256 hashContinue;\n-    CBlockIndex* pindexLastGetBlocksBegin;\n+    const CBlockIndex* pindexLastGetBlocksBegin;\n     uint256 hashLastGetBlocksEnd;\n     int nStartingHeight;\n \n@@ -595,7 +595,7 @@ class CNode\n \n \n \n-    void PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd);\n+    void PushGetBlocks(const CBlockIndex* pindexBegin, uint256 hashEnd);\n     bool IsSubscribed(unsigned int nChannel);\n     void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n     void CancelSubscribe(unsigned int nChannel);"
      }
    ]
  },
  {
    "sha": "2514150e66f2c290c444e210ac5b89267aaa5ebd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTE0MTUwZTY2ZjJjMjkwYzQ0NGUyMTBhYzViODkyNjdhYWE1ZWJk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T00:52:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Add support for EmitBlock concurrency.",
      "tree": {
        "sha": "fbef9d0b3fa793ba55d0dc19cc6f1f06e84425d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbef9d0b3fa793ba55d0dc19cc6f1f06e84425d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2514150e66f2c290c444e210ac5b89267aaa5ebd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2514150e66f2c290c444e210ac5b89267aaa5ebd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2514150e66f2c290c444e210ac5b89267aaa5ebd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2514150e66f2c290c444e210ac5b89267aaa5ebd/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 114,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c558055134f74d836e41a01b330298ce3440649e",
        "filename": "src/blockstore.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/blockstore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/blockstore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.cpp?ref=2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "patch": "@@ -1,5 +1,6 @@\n #include \"blockstore.h\"\n #include \"util.h\"\n+#include \"net.h\"\n #include \"main.h\"\n \n void CBlockStore::CallbackCommitBlock(const CBlock &block)\n@@ -13,3 +14,65 @@ void CBlockStore::CallbackCommitBlock(const CBlock &block)\n     LOCK(sigtable.cs_sigCommitBlock);\n     sigtable.sigCommitBlock(block);\n }\n+\n+void CBlockStore::SubmitCallbackFinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    LOCK(cs_callbacks);\n+    if (pNodeDoS) pNodeDoS->AddRef();\n+    queueFinishEmitBlockCallbacks.push(std::make_pair(new CBlock(block), pNodeDoS));\n+    sem_callbacks.post();\n+}\n+\n+void CBlockStore::StopProcessCallbacks()\n+{\n+    {\n+        LOCK(cs_callbacks);\n+        fProcessCallbacks = false;\n+        sem_callbacks.post();\n+    }\n+    while (fProcessingCallbacks)\n+        Sleep(20);\n+}\n+\n+void CBlockStore::ProcessCallbacks()\n+{\n+    {\n+        LOCK(cs_callbacks);\n+        if (!fProcessCallbacks)\n+            return;\n+        fProcessingCallbacks = true;\n+    }\n+\n+    loop\n+    {\n+        std::pair<CBlock*, CNode*> callback;\n+        sem_callbacks.wait();\n+        if (fProcessCallbacks)\n+        {\n+            LOCK(cs_callbacks);\n+            assert(queueFinishEmitBlockCallbacks.size() > 0);\n+            callback = queueFinishEmitBlockCallbacks.front();\n+            queueFinishEmitBlockCallbacks.pop();\n+        }\n+        else\n+        {\n+            fProcessingCallbacks = false;\n+            return;\n+        }\n+\n+        FinishEmitBlock(*(callback.first), callback.second);\n+        delete callback.first;\n+        if (callback.second) callback.second->Release();\n+    }\n+}\n+\n+void CBlockStoreProcessCallbacks(void* parg)\n+{\n+    ((CBlockStore*)parg)->ProcessCallbacks();\n+}\n+\n+CBlockStore::CBlockStore() : sem_callbacks(0), fProcessCallbacks(true), fProcessingCallbacks(false)\n+{\n+    if (!CreateThread(CBlockStoreProcessCallbacks, this))\n+        throw std::runtime_error(\"Couldn't create callback threads\");\n+}"
      },
      {
        "sha": "6118286a3128952988bce459a3d2bde75c518a6b",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "patch": "@@ -49,6 +49,15 @@ class CBlockStore\n \n     void CallbackDoS(CNode* pNode, const int nDoS) { LOCK(sigtable.cs_sigDoS); sigtable.sigDoS(pNode, nDoS); }\n \n+    CCriticalSection cs_callbacks;\n+    CSemaphore sem_callbacks;\n+    bool fProcessCallbacks;\n+    bool fProcessingCallbacks;\n+\n+    std::queue<std::pair<CBlock*, CNode*> > queueFinishEmitBlockCallbacks;\n+    void SubmitCallbackFinishEmitBlock(CBlock& block, CNode* pNodeDoS);\n+    bool FinishEmitBlock(CBlock& block, CNode* pNodeDoS);\n+\n     bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew);\n     bool DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n     bool ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n@@ -57,6 +66,14 @@ class CBlockStore\n     bool AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned int nBlockPos);\n     bool AcceptBlock(CBlock& block);\n public:\n+    // Loops to process callbacks (do not call manually, automatically started in the constructor)\n+        void ProcessCallbacks();\n+    // Stop callback processing threads\n+    void StopProcessCallbacks();\n+\n+    CBlockStore();\n+    ~CBlockStore()  { StopProcessCallbacks(); }\n+\n     bool LoadBlockIndex(bool fReadOnly=false);\n \n //Register methods\n@@ -75,8 +92,11 @@ class CBlockStore\n //Blockchain access methods\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n+\n+    // if (!fBlocking) only initial checks will be performed before returning\n+    //   This means block.nDoS may not be set to its final value before returning\n     // DoSHandler will be called with the final value of block.nDoS at some point during callbacks.\n-    bool EmitBlock(CBlock& block, CNode* pNodeDoS=NULL);\n+    bool EmitBlock(CBlock& block, bool fBlocking=true, CNode* pNodeDoS=NULL);\n \n     // Returns true if we have/have seen a block with the given hash\n     // Does not indicate whether the block is orphan/was invalid/is in the main chain/is waiting to be committed/etc"
      },
      {
        "sha": "98b83c5e745e04a879026f0fa5025e628abd1361",
        "filename": "src/hub.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/hub.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/hub.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.h?ref=2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "patch": "@@ -102,8 +102,10 @@ class CHub\n     // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n     //   be handled by listeners\n \n+    // if (!fBlocking) only initial checks will be performed before returning\n+    //   This means block.nDoS may not be set to its final value before returning\n     // pNodeDoS->Misbehaving() will be called with the final value of block.nDoS at some point during callbacks.\n-    bool EmitBlock(CBlock& block, CNode* pNodeDoS=NULL) { if (!pblockstore) return false; return pblockstore->EmitBlock(block, pNodeDoS); }\n+    bool EmitBlock(CBlock& block, bool fBlocking=true, CNode* pNodeDoS=NULL) { if (!pblockstore) return false; return pblockstore->EmitBlock(block, fBlocking, pNodeDoS); }\n \n     bool EmitAlert(CAlert& alert);\n "
      },
      {
        "sha": "87f36fff6c900f9a81588d97c55843bc1816f8d3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "patch": "@@ -24,6 +24,7 @@ using namespace std;\n using namespace boost;\n \n CWallet* pwalletMain;\n+CBlockStore* pblockstore;\n CClientUIInterface uiInterface;\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -57,6 +58,7 @@ void Shutdown(void* parg)\n     {\n         fShutdown = true;\n         if (phub) phub->StopProcessCallbacks();\n+        if (pblockstore) pblockstore->StopProcessCallbacks();\n         nTransactionsUpdated++;\n         bitdb.Flush(false);\n         StopNode();\n@@ -526,7 +528,7 @@ bool AppInit2()\n     } catch (runtime_error& e) {\n         return InitError(_(\"Unable to create CHub.\"));\n     }\n-    CBlockStore* pblockstore = new CBlockStore();\n+    pblockstore = new CBlockStore();\n     phub->ConnectToBlockStore(pblockstore);\n \n     if (GetBoolArg(\"-loadblockindextest\"))"
      },
      {
        "sha": "3301f31621a17f9f0b0e960fca1605b7007c12c7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 7,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2514150e66f2c290c444e210ac5b89267aaa5ebd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "patch": "@@ -1754,7 +1754,7 @@ bool CBlockStore::AcceptBlock(CBlock& block)\n     return true;\n }\n \n-bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -1764,8 +1764,6 @@ bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n             return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n     }\n \n-    LOCK(cs_main);\n-\n     // Preliminary checks\n     if (!block.CheckBlock())\n     {\n@@ -1774,7 +1772,12 @@ bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n         return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n     }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+    CBlockIndex* pcheckpoint = NULL;\n+    {\n+        LOCK(cs_main); //TODO Remove this lock, as it kills performance\n+        pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+    }\n+\n     if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n@@ -1800,10 +1803,24 @@ bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n         setBlocksSeen.insert(hash);\n     }\n \n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n+\n     // If don't already have its previous block, shunt it off to holding area until we get it\n     if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"CBlockStore::EmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n         CBlock* pblock = new CBlock(block);\n         mapOrphanBlocks.insert(make_pair(hash, pblock));\n         mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n@@ -1818,7 +1835,7 @@ bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n     {\n         if (block.nDoS && pNodeDoS)\n             CallbackDoS(pNodeDoS, block.nDoS);\n-        return error(\"CBlockStore::EmitBlock() : AcceptBlock FAILED\");\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n     }\n \n     // Recursively process any orphan blocks that depended on this one\n@@ -1840,7 +1857,7 @@ bool CBlockStore::EmitBlock(CBlock& block, CNode* pNodeDoS)\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"CBlockStore::EmitBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "c3782838fca23899dc3f7b50909b6bfc6696b466",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzc4MjgzOGZjYTIzODk5ZGMzZjdiNTA5MDliNmJmYzY2OTZiNDY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T01:59:43Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Use EmitBlock concurrency in ProcessMessage.",
      "tree": {
        "sha": "de4c264b31b92ec44ac57c2528c618544b189894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de4c264b31b92ec44ac57c2528c618544b189894"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3782838fca23899dc3f7b50909b6bfc6696b466",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3782838fca23899dc3f7b50909b6bfc6696b466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3782838fca23899dc3f7b50909b6bfc6696b466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3782838fca23899dc3f7b50909b6bfc6696b466/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2514150e66f2c290c444e210ac5b89267aaa5ebd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2514150e66f2c290c444e210ac5b89267aaa5ebd"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "90816c7d413c23000bf8e9c463a55d5a080efd5b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3782838fca23899dc3f7b50909b6bfc6696b466/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3782838fca23899dc3f7b50909b6bfc6696b466/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c3782838fca23899dc3f7b50909b6bfc6696b466",
        "patch": "@@ -2911,12 +2911,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if (phub->EmitBlock(block))\n-        {\n-            LOCK(cs_mapAlreadyAskedFor);\n-            mapAlreadyAskedFor.erase(inv);\n-        }\n-        if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n+        phub->EmitBlock(block, false, pfrom);\n     }\n \n "
      },
      {
        "sha": "da1894da9eecb7302c0c5fc50d1969122b70a63d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3782838fca23899dc3f7b50909b6bfc6696b466/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3782838fca23899dc3f7b50909b6bfc6696b466/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c3782838fca23899dc3f7b50909b6bfc6696b466",
        "patch": "@@ -93,8 +93,15 @@ unsigned short GetListenPort()\n \n void HandleCommitBlock(const CBlock& block)\n {\n-    // Relay inventory, but don't relay old inventory during initial block download\n     uint256 hash = block.GetHash();\n+\n+    CInv inv(MSG_BLOCK, hash);\n+    {\n+        LOCK(cs_mapAlreadyAskedFor);\n+        mapAlreadyAskedFor.erase(inv);\n+    }\n+\n+    // Relay inventory, but don't relay old inventory during initial block download\n     int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n     if (hashBestChain == hash)\n     {"
      }
    ]
  },
  {
    "sha": "7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTIyY2M4ZGMxNDU2ZGMyNGUxZDFhOTFlM2U5NGU4YWUxMTFmZmQx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-09T05:18:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Cache last checkpoint.",
      "tree": {
        "sha": "d9f5ad172e16735cee9891f7d1e47406309f6015",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9f5ad172e16735cee9891f7d1e47406309f6015"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c3782838fca23899dc3f7b50909b6bfc6696b466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3782838fca23899dc3f7b50909b6bfc6696b466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3782838fca23899dc3f7b50909b6bfc6696b466"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 31,
      "deletions": 14
    },
    "files": [
      {
        "sha": "361f9d4354c042df0a37e611606f146c7764343c",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
        "patch": "@@ -14,6 +14,8 @@ namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;\n \n+    static const CBlockIndex* lastCheckpoint = NULL;\n+\n     //\n     // What makes a good checkpoint block?\n     // + Is surrounded by blocks with reasonable timestamps\n@@ -56,17 +58,28 @@ namespace Checkpoints\n         return checkpoints.rbegin()->first;\n     }\n \n-    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex)\n+    void HandleCommitBlock(const CBlock& block)\n     {\n         MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n \n+        const uint256 blockHash = block.GetHash();\n+\n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {\n             const uint256& hash = i.second;\n-            std::map<uint256, CBlockIndex*>::const_iterator t = mapBlockIndex.find(hash);\n-            if (t != mapBlockIndex.end())\n-                return t->second;\n+            if (blockHash != hash)\n+                continue;\n+\n+            LOCK(cs_main);\n+\n+            assert(mapBlockIndex.count(hash));\n+            lastCheckpoint = mapBlockIndex[hash];\n+            return;\n         }\n-        return NULL;\n+    }\n+\n+    const CBlockIndex* GetLastCheckpoint()\n+    {\n+        return lastCheckpoint;\n     }\n }"
      },
      {
        "sha": "01bb44349a96aad75daf5aa0ad4adc71e44839a3",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
        "patch": "@@ -8,6 +8,7 @@\n \n class uint256;\n class CBlockIndex;\n+class CBlock;\n \n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n@@ -20,8 +21,11 @@ namespace Checkpoints\n     // Return conservative estimate of total number of blocks, 0 if unknown\n     int GetTotalBlocksEstimate();\n \n-    // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex);\n+    // Used to keep last checkpoint cache up to date\n+    void HandleCommitBlock(const CBlock& block);\n+\n+    // Returns last CBlockIndex* that is a checkpoint\n+    const CBlockIndex* GetLastCheckpoint();\n }\n \n #endif"
      },
      {
        "sha": "28c4d0020529731f31cce86c11d943f8dabd05f3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
        "patch": "@@ -10,6 +10,7 @@\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"hub.h\"\n+#include \"checkpoints.h\"\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/filesystem/convenience.hpp>\n@@ -530,6 +531,7 @@ bool AppInit2()\n     }\n     pblockstore = new CBlockStore();\n     phub->ConnectToBlockStore(pblockstore);\n+    phub->RegisterCommitBlock(&Checkpoints::HandleCommitBlock);\n \n     if (GetBoolArg(\"-loadblockindextest\"))\n     {"
      },
      {
        "sha": "362d2925449c77286c4da375c60decd5512344b2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
        "patch": "@@ -1772,12 +1772,7 @@ bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n         return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n     }\n \n-    CBlockIndex* pcheckpoint = NULL;\n-    {\n-        LOCK(cs_main); //TODO Remove this lock, as it kills performance\n-        pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    }\n-\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n@@ -2171,9 +2166,12 @@ bool CBlockStore::LoadBlockIndex(bool fReadOnly)\n             return error(\"LoadBlockIndex() : genesis block not accepted\");\n     }\n \n-    // Init setBlocksSeen\n+    // Init setBlocksSeen and checkpoints TODO this can be much more efficient\n     for (map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++)\n+    {\n         setBlocksSeen.insert(it->first);\n+        Checkpoints::HandleCommitBlock(it->second->GetBlockHeader());\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTZhYjE1NzcxZTE2MTNmMTNmNDk2YzlkM2FhNGYyOGU4ZTEyNDM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-06T00:51:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Move getdata handling out of cs_main in SendMessages.\n\nThis resolves a bug where the block buffer is allowed to deplete\nbecause the getdata that is required to continue is not sent.",
      "tree": {
        "sha": "9d714d20e9005c273d7d8a3a92d2c6f42d272097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d714d20e9005c273d7d8a3a92d2c6f42d272097"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6ab15771e1613f13f496c9d3aa4f28e8e12435/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "84992afc0c0068fc2dc2f737a2f7f5124fe2b76d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a6ab15771e1613f13f496c9d3aa4f28e8e12435/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a6ab15771e1613f13f496c9d3aa4f28e8e12435/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
        "patch": "@@ -3273,7 +3273,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         }\n         if (!vInv.empty())\n             pto->PushMessage(\"inv\", vInv);\n+    }\n \n+    {\n+        LOCK(pto->cs_mapAskFor);\n \n         //\n         // Message: getdata\n@@ -3301,8 +3304,8 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         }\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);\n-\n     }\n+\n     return true;\n }\n "
      },
      {
        "sha": "b5188f373329ad19fa48250b5b26c4c51340b1b1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a6ab15771e1613f13f496c9d3aa4f28e8e12435/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a6ab15771e1613f13f496c9d3aa4f28e8e12435/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
        "patch": "@@ -188,6 +188,7 @@ class CNode\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n+    CCriticalSection cs_mapAskFor;\n \n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)\n     {\n@@ -312,6 +313,7 @@ class CNode\n \n         // Each retry is 2 minutes after the last\n         nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n+        LOCK(cs_mapAskFor);\n         mapAskFor.insert(std::make_pair(nRequestTime, inv));\n     }\n "
      }
    ]
  },
  {
    "sha": "fb20713497c5e7fc011f9500e50b021b59be0371",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjIwNzEzNDk3YzVlN2ZjMDExZjk1MDBlNTBiMDIxYjU5YmUwMzcx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-09T06:14:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Add -blockbuffersize, default 20.",
      "tree": {
        "sha": "4ed752288c2fcf47bfe1999cab9d5c281488611f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ed752288c2fcf47bfe1999cab9d5c281488611f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb20713497c5e7fc011f9500e50b021b59be0371",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb20713497c5e7fc011f9500e50b021b59be0371",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb20713497c5e7fc011f9500e50b021b59be0371",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb20713497c5e7fc011f9500e50b021b59be0371/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6ab15771e1613f13f496c9d3aa4f28e8e12435"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b1ffaa7bc3dd268c3bb3929eaed7690844dd5988",
        "filename": "src/blockstore.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb20713497c5e7fc011f9500e50b021b59be0371/src/blockstore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb20713497c5e7fc011f9500e50b021b59be0371/src/blockstore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.cpp?ref=fb20713497c5e7fc011f9500e50b021b59be0371",
        "patch": "@@ -17,8 +17,21 @@ void CBlockStore::CallbackCommitBlock(const CBlock &block)\n \n void CBlockStore::SubmitCallbackFinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n {\n-    LOCK(cs_callbacks);\n+    unsigned int nQueueSize;\n+    {\n+        LOCK(cs_callbacks);\n+        nQueueSize = queueFinishEmitBlockCallbacks.size();\n+    }\n+    while (nQueueSize >= GetArg(\"-blockbuffersize\", 20) && fProcessCallbacks)\n+    {\n+        Sleep(20);\n+        LOCK(cs_callbacks);\n+        nQueueSize = queueFinishEmitBlockCallbacks.size();\n+    }\n+\n     if (pNodeDoS) pNodeDoS->AddRef();\n+\n+    LOCK(cs_callbacks);\n     queueFinishEmitBlockCallbacks.push(std::make_pair(new CBlock(block), pNodeDoS));\n     sem_callbacks.post();\n }"
      },
      {
        "sha": "699698a5e1999f4869b849132172bbba10e82367",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb20713497c5e7fc011f9500e50b021b59be0371/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb20713497c5e7fc011f9500e50b021b59be0371/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fb20713497c5e7fc011f9500e50b021b59be0371",
        "patch": "@@ -264,6 +264,7 @@ std::string HelpMessage()\n         \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n         \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000?.dat file\") + \"\\n\" +\n+        \"  -blockbuffersize=<n>   \" + _(\"The maximum number of blocks to buffer for committing to disk (default: 20)\") + \"\\n\";\n         \"  -?                     \" + _(\"This help message\") + \"\\n\";\n \n     strUsage += string() +"
      }
    ]
  },
  {
    "sha": "9c3362552479d95569817d149c253a717bd67a25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzMzNjI1NTI0NzlkOTU1Njk4MTdkMTQ5YzI1M2E3MTdiZDY3YTI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-06T13:09:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Call PushGetBlocks after last block, instead of just on orphans.\n\nThis keeps the block buffer from running out until the final\nblock's FinishEmitBlock is run.",
      "tree": {
        "sha": "59a6eadf392352d9293ccbcd33b26fb2f34efdc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a6eadf392352d9293ccbcd33b26fb2f34efdc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c3362552479d95569817d149c253a717bd67a25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3362552479d95569817d149c253a717bd67a25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3362552479d95569817d149c253a717bd67a25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3362552479d95569817d149c253a717bd67a25/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "fb20713497c5e7fc011f9500e50b021b59be0371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb20713497c5e7fc011f9500e50b021b59be0371",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb20713497c5e7fc011f9500e50b021b59be0371"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8d7eceafb4aceb1ed686f6a3f9a2d4ff648c1ed0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c3362552479d95569817d149c253a717bd67a25/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c3362552479d95569817d149c253a717bd67a25/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c3362552479d95569817d149c253a717bd67a25",
        "patch": "@@ -2710,6 +2710,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n+        int nBlockCount = 0;\n+\n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             const CInv &inv = vInv[nInv];\n@@ -2743,6 +2745,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)\n+                pfrom->hashLastInvLastBlock = inv.hash;\n+\n             // Track requests for our stuff\n             Inventory(inv.hash);\n         }\n@@ -2910,6 +2919,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         phub->EmitBlock(block, false, pfrom);\n+\n+        // Though we request duplicates, Satoshi nodes will not return any,\n+        // thanks to setInventoryKnown, however they will still count them\n+        // towards the block size in the inv result, its still better to\n+        // request blocks now, but #973 will optimize this further.\n+        if (pfrom->hashLastInvLastBlock == inv.hash)\n+        {\n+            LOCK(cs_main);\n+            pfrom->PushGetBlocks(pindexBest, uint256(0));\n+        }\n     }\n \n "
      },
      {
        "sha": "8194ee750099cc5182163ad5712d52394da17b21",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c3362552479d95569817d149c253a717bd67a25/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c3362552479d95569817d149c253a717bd67a25/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9c3362552479d95569817d149c253a717bd67a25",
        "patch": "@@ -175,6 +175,7 @@ class CNode\n     uint256 hashContinue;\n     const CBlockIndex* pindexLastGetBlocksBegin;\n     uint256 hashLastGetBlocksEnd;\n+    uint256 hashLastInvLastBlock;\n     int nStartingHeight;\n \n     // flood relay"
      }
    ]
  },
  {
    "sha": "7176054d236e793f6708d4929bc1d01f835f0759",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTc2MDU0ZDIzNmU3OTNmNjcwOGQ0OTI5YmMxZDAxZjgzNWYwNzU5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-09T21:36:58Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Use EmitBlock concurrency in LoadExternalBlockFile.",
      "tree": {
        "sha": "fed47417e6a4f0cbaa079e75691b84d89f3f7dbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed47417e6a4f0cbaa079e75691b84d89f3f7dbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7176054d236e793f6708d4929bc1d01f835f0759",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7176054d236e793f6708d4929bc1d01f835f0759",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7176054d236e793f6708d4929bc1d01f835f0759",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7176054d236e793f6708d4929bc1d01f835f0759/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9c3362552479d95569817d149c253a717bd67a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3362552479d95569817d149c253a717bd67a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3362552479d95569817d149c253a717bd67a25"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2b66296a007100d0255aa73bc40a2e06334e7b27",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7176054d236e793f6708d4929bc1d01f835f0759/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7176054d236e793f6708d4929bc1d01f835f0759/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7176054d236e793f6708d4929bc1d01f835f0759",
        "patch": "@@ -2254,7 +2254,6 @@ bool LoadExternalBlockFile(FILE* fileIn)\n {\n     int nLoaded = 0;\n     {\n-        LOCK(cs_main);\n         try {\n             CAutoFile blkdat(fileIn, SER_DISK, CLIENT_VERSION);\n             unsigned int nPos = 0;\n@@ -2291,7 +2290,7 @@ bool LoadExternalBlockFile(FILE* fileIn)\n                 {\n                     CBlock block;\n                     blkdat >> block;\n-                    if (phub->EmitBlock(block))\n+                    if (phub->EmitBlock(block, false))\n                     {\n                         nLoaded++;\n                         nPos += 4 + nSize;"
      },
      {
        "sha": "f13f58344c3c37558ddd7d7f2ad36455a863905f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7176054d236e793f6708d4929bc1d01f835f0759/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7176054d236e793f6708d4929bc1d01f835f0759/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7176054d236e793f6708d4929bc1d01f835f0759",
        "patch": "@@ -742,7 +742,7 @@ void CWallet::ReacceptWalletTransactions()\n     bool fRepeat = true;\n     while (fRepeat)\n     {\n-        LOCK(cs_wallet);\n+        LOCK2(cs_main, cs_wallet);\n         fRepeat = false;\n         vector<CDiskTxPos> vMissingTx;\n         BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)"
      }
    ]
  },
  {
    "sha": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTJhZmY2YTY4YjQwYTMxZDQ4MzNiMjU2MjQ1YmJiYWQwYWQzOGMy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T22:54:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "message": "Fix improper use of STL Containers.",
      "tree": {
        "sha": "7cce16e872fff221f8be97240a593505d5583356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cce16e872fff221f8be97240a593505d5583356"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e2aff6a68b40a31d4833b256245bbbad0ad38c2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7176054d236e793f6708d4929bc1d01f835f0759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7176054d236e793f6708d4929bc1d01f835f0759",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7176054d236e793f6708d4929bc1d01f835f0759"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 44,
      "deletions": 43
    },
    "files": [
      {
        "sha": "123a480085dc4e850f6ebdfbe2f1f7fa9a1469ed",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e2aff6a68b40a31d4833b256245bbbad0ad38c2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e2aff6a68b40a31d4833b256245bbbad0ad38c2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
        "patch": "@@ -1421,22 +1421,21 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n     }\n \n     // List of what to disconnect\n-    vector<CBlockIndex*> vDisconnect;\n+    list<CBlockIndex*> lDisconnect;\n     for (CBlockIndex* pindex = pindexBest; pindex != pfork; pindex = pindex->pprev)\n-        vDisconnect.push_back(pindex);\n+        lDisconnect.push_back(pindex);\n \n     // List of what to connect\n-    vector<CBlockIndex*> vConnect;\n+    list<CBlockIndex*> lConnect;\n     for (CBlockIndex* pindex = pindexNew; pindex != pfork; pindex = pindex->pprev)\n-        vConnect.push_back(pindex);\n-    reverse(vConnect.begin(), vConnect.end());\n+        lConnect.push_front(pindex);\n \n-    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n-    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n+    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", lDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n+    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", lConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n \n     // Disconnect shorter branch\n-    vector<CTransaction> vResurrect;\n-    BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)\n+    list<CTransaction> lResurrect;\n+    BOOST_FOREACH(CBlockIndex* pindex, lDisconnect)\n     {\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n@@ -1447,14 +1446,13 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         // Queue memory transactions to resurrect\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n             if (!tx.IsCoinBase())\n-                vResurrect.push_back(tx);\n+                lResurrect.push_back(tx);\n     }\n \n     // Connect longer branch\n-    vector<CBlock> vCommitted;\n-    for (unsigned int i = 0; i < vConnect.size(); i++)\n+    list<CBlock> lCommitted;\n+    BOOST_FOREACH(CBlockIndex* pindex, lConnect)\n     {\n-        CBlockIndex* pindex = vConnect[i];\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n             return error(\"CBlockStore::Reorganize() : ReadFromDisk for connect failed\");\n@@ -1465,7 +1463,7 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         }\n \n         // Queue memory transactions to delete\n-        vCommitted.push_back(block);\n+        lCommitted.push_back(block);\n     }\n     if (!txdb.WriteHashBestChain(pindexNew->GetBlockHash()))\n         return error(\"CBlockStore::Reorganize() : WriteHashBestChain failed\");\n@@ -1475,26 +1473,26 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         return error(\"CBlockStore::Reorganize() : TxnCommit failed\");\n \n     // Disconnect shorter branch\n-    BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)\n+    BOOST_FOREACH(CBlockIndex* pindex, lDisconnect)\n         if (pindex->pprev)\n             pindex->pprev->pnext = NULL;\n \n     // Connect longer branch\n-    BOOST_FOREACH(CBlockIndex* pindex, vConnect)\n+    BOOST_FOREACH(CBlockIndex* pindex, lConnect)\n         if (pindex->pprev)\n             pindex->pprev->pnext = pindex;\n \n     // Resurrect memory transactions that were in the disconnected branch\n-    BOOST_FOREACH(CTransaction& tx, vResurrect)\n+    BOOST_FOREACH(CTransaction& tx, lResurrect)\n         mempool.accept(txdb, tx, false, NULL);\n \n     // Delete redundant memory transactions that are in the connected branch\n-    BOOST_FOREACH(CBlock& block, vCommitted)\n+    BOOST_FOREACH(CBlock& block, lCommitted)\n+    {\n         BOOST_FOREACH(CTransaction& tx, block.vtx)\n             mempool.remove(tx);\n-\n-    BOOST_FOREACH(CBlock& block, vCommitted)\n         CallbackCommitBlock(block);\n+    }\n \n     printf(\"REORGANIZE: done\\n\");\n \n@@ -1554,18 +1552,18 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n         CBlockIndex *pindexIntermediate = pindexNew;\n \n         // list of blocks that need to be connected afterwards\n-        std::vector<CBlockIndex*> vpindexSecondary;\n+        std::list<CBlockIndex*> lpindexSecondary;\n \n         // Reorganize is costly in terms of db load, as it works in a single db transaction.\n         // Try to limit how much needs to be done inside\n         while (pindexIntermediate->pprev && pindexIntermediate->pprev->bnChainWork > pindexBest->bnChainWork)\n         {\n-            vpindexSecondary.push_back(pindexIntermediate);\n+            lpindexSecondary.push_back(pindexIntermediate);\n             pindexIntermediate = pindexIntermediate->pprev;\n         }\n \n-        if (!vpindexSecondary.empty())\n-            printf(\"Postponing %i reconnects\\n\", vpindexSecondary.size());\n+        if (!lpindexSecondary.empty())\n+            printf(\"Postponing %i reconnects\\n\", lpindexSecondary.size());\n \n         // Switch to new best branch\n         if (!Reorganize(txdb, pindexIntermediate))\n@@ -1576,7 +1574,7 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n         }\n \n         // Connect futher blocks\n-        BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vpindexSecondary)\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindex, lpindexSecondary)\n         {\n             CBlock block2;\n             if (!block2.ReadFromDisk(pindex))\n@@ -1834,19 +1832,21 @@ bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n     }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n             if (AcceptBlock(*pblockOrphan))\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n@@ -2191,15 +2191,15 @@ void PrintBlockTree()\n         //    mapNext[pindex->pprev].push_back(pindex);\n     }\n \n-    vector<pair<int, CBlockIndex*> > vStack;\n-    vStack.push_back(make_pair(0, pindexGenesisBlock));\n+    stack<pair<int, CBlockIndex*> > sStack;\n+    sStack.push(make_pair(0, pindexGenesisBlock));\n \n     int nPrevCol = 0;\n-    while (!vStack.empty())\n+    while (!sStack.empty())\n     {\n-        int nCol = vStack.back().first;\n-        CBlockIndex* pindex = vStack.back().second;\n-        vStack.pop_back();\n+        int nCol = sStack.top().first;\n+        CBlockIndex* pindex = sStack.top().second;\n+        sStack.pop();\n \n         // print split or gap\n         if (nCol > nPrevCol)\n@@ -2246,7 +2246,7 @@ void PrintBlockTree()\n \n         // iterate children\n         for (unsigned int i = 0; i < vNext.size(); i++)\n-            vStack.push_back(make_pair(nCol+i, vNext[i]));\n+            sStack.push(make_pair(nCol+i, vNext[i]));\n     }\n }\n "
      },
      {
        "sha": "8ec38c596f481232e4cf50d2c6963c49c14fc10c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e2aff6a68b40a31d4833b256245bbbad0ad38c2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e2aff6a68b40a31d4833b256245bbbad0ad38c2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
        "patch": "@@ -635,18 +635,19 @@ void CWalletTx::AddSupportingTransactions(CTxDB& txdb)\n     const int COPY_DEPTH = 3;\n     if (SetMerkleBranch() < COPY_DEPTH)\n     {\n-        vector<uint256> vWorkQueue;\n+        queue<uint256> qWorkQueue;\n         BOOST_FOREACH(const CTxIn& txin, vin)\n-            vWorkQueue.push_back(txin.prevout.hash);\n+            qWorkQueue.push(txin.prevout.hash);\n \n         // This critsect is OK because txdb is already open\n         {\n             LOCK(pwallet->cs_wallet);\n             map<uint256, const CMerkleTx*> mapWalletPrev;\n             set<uint256> setAlreadyDone;\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+            while(!qWorkQueue.empty())\n             {\n-                uint256 hash = vWorkQueue[i];\n+                uint256 hash = qWorkQueue.front();\n+                qWorkQueue.pop();\n                 if (setAlreadyDone.count(hash))\n                     continue;\n                 setAlreadyDone.insert(hash);\n@@ -679,7 +680,7 @@ void CWalletTx::AddSupportingTransactions(CTxDB& txdb)\n                 if (nDepth < COPY_DEPTH)\n                 {\n                     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                        vWorkQueue.push_back(txin.prevout.hash);\n+                        qWorkQueue.push(txin.prevout.hash);\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTVjN2IwMWJlZjIyZDlkNGJiMTFkOTRkMTdkMjNmN2ZkMjkzYTAy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T14:20:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Merge branch 'prune' into parallelcheck",
      "tree": {
        "sha": "3c3178d8da1632609375a589da88f15f7f3ab10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c3178d8da1632609375a589da88f15f7f3ab10d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e2aff6a68b40a31d4833b256245bbbad0ad38c2"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 190,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f5850c006922863c9dff5051c6507a739ed1845",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "patch": "@@ -58,6 +58,13 @@ namespace Checkpoints\n         return checkpoints.rbegin()->first;\n     }\n \n+    uint256 GetLastCheckpointHash()\n+    {\n+        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+\n+        return checkpoints.rbegin()->second;\n+    }\n+\n     void HandleCommitBlock(const CBlock& block)\n     {\n         MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n@@ -82,4 +89,11 @@ namespace Checkpoints\n     {\n         return lastCheckpoint;\n     }\n+\n+    bool IsCheckpoint(int nHeight)\n+    {\n+        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+\n+        return checkpoints.count(nHeight) > 0;\n+    }\n }"
      },
      {
        "sha": "0d4c45caa4ed562e49f19ee39de7e5cb6a38a9f2",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "patch": "@@ -21,11 +21,16 @@ namespace Checkpoints\n     // Return conservative estimate of total number of blocks, 0 if unknown\n     int GetTotalBlocksEstimate();\n \n+    // Return the hash of the most recent checkpoint (with height GetTotalBlocksEstimate())\n+    uint256 GetLastCheckpointHash();\n+\n     // Used to keep last checkpoint cache up to date\n     void HandleCommitBlock(const CBlock& block);\n \n     // Returns last CBlockIndex* that is a checkpoint\n     const CBlockIndex* GetLastCheckpoint();\n+\n+    bool IsCheckpoint(int nHeight);\n }\n \n #endif"
      },
      {
        "sha": "65ab570780dc0d3dfad57029afc74c78c2958e34",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 128,
        "deletions": 0,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "patch": "@@ -398,6 +398,12 @@ bool CTxDB::EraseTxIndex(const CTransaction& tx)\n     return Erase(make_pair(string(\"tx\"), hash));\n }\n \n+bool CTxDB::EraseTxIndex(uint256 hash)\n+{\n+    assert(!fClient);\n+    return Erase(make_pair(string(\"tx\"), hash));\n+}\n+\n bool CTxDB::ContainsTx(uint256 hash)\n {\n     assert(!fClient);\n@@ -505,6 +511,16 @@ bool CTxDB::WriteHashBestChain(uint256 hashBestChain)\n     return Write(string(\"hashBestChain\"), hashBestChain);\n }\n \n+bool CTxDB::ReadHashBestCheckpoint(uint256& hashBestCheckpoint)\n+{\n+    return Read(string(\"hashBestCheckpoint\"), hashBestCheckpoint);\n+}\n+\n+bool CTxDB::WriteHashBestCheckpoint(uint256 hashBestCheckpoint)\n+{\n+    return Write(string(\"hashBestCheckpoint\"), hashBestCheckpoint);\n+}\n+\n bool CTxDB::ReadBestInvalidWork(CBigNum& bnBestInvalidWork)\n {\n     return Read(string(\"bnBestInvalidWork\"), bnBestInvalidWork);\n@@ -535,6 +551,118 @@ CBlockIndex static * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n+bool CTxDB::PruneBlockIndex(uint256 hashPruneFrom, uint256 hashPruneTo)\n+{\n+//    TODO: assert here, but cant #include main.h\n+//    if (hashPruneFrom != 0)\n+//        assert(hashPruneTo == hashBestBlock);\n+\n+    CBlockIndex* pindexScan = pindexGenesisBlock;\n+    uint256 hashOldBestCheckpoint;\n+    if (ReadHashBestCheckpoint(hashOldBestCheckpoint) && hashOldBestCheckpoint == hashPruneTo)\n+        return true;\n+\n+    if (!mapBlockIndex.count(hashPruneTo))\n+        return true;\n+\n+    if (hashPruneFrom != 0)\n+        pindexScan = mapBlockIndex[hashPruneFrom];\n+    assert(pindexScan);\n+\n+    printf(\"Pruning Block Index from %s to %s.\\n\", hashPruneFrom.ToString().substr(0,20).c_str(), hashPruneTo.ToString().substr(0,20).c_str());\n+\n+    // Cache of Txes by hash -> txouts spent before hashPruneTo flags + cant be deleted flag\n+    map<uint256, pair<vector<bool>, bool> > mapTxIndexCache;\n+\n+    while (pindexScan != NULL && *(pindexScan->phashBlock) != hashPruneTo)\n+    {\n+        if(fRequestShutdown)\n+            return true;\n+\n+        CBlock block;\n+        block.ReadFromDisk(pindexScan);\n+\n+        BOOST_FOREACH(CTransaction& tx, block.vtx)\n+        {\n+            if (tx.IsCoinBase())\n+                continue;\n+\n+            BOOST_FOREACH(CTxIn& txin, tx.vin)\n+            {\n+                COutPoint& txout = txin.prevout;\n+                uint256& hash = txout.hash;\n+                pair<vector<bool>, bool>& pairTx = mapTxIndexCache[hash];\n+\n+                if (pairTx.first.size() == 0)\n+                {\n+                    CTxIndex txindex;\n+                    if (!ReadTxIndex(hash, txindex))\n+                    {\n+                        // This should only ever happen if we get interrupted pruning and dont WriteHashBestCheckpoint\n+                        pairTx.second = false;\n+                        break;\n+                    }\n+\n+                    vector<CDiskTxPos>& vSpent = txindex.vSpent;\n+                    unsigned int vouts = vSpent.size();\n+\n+                    pairTx.first.resize(vouts);\n+\n+                    pairTx.second = true;\n+                    for (unsigned int i = 0; i < vouts; i++)\n+                    {\n+                        if (vSpent[i].IsNull())\n+                        {\n+                            pairTx.second = false;\n+                            break;\n+                        }\n+                        pairTx.first[i] = false;\n+                    }\n+                }\n+\n+                if (pairTx.second == false)\n+                    continue;\n+\n+                pairTx.first[txout.n] = true;\n+            }\n+        }\n+\n+        pindexScan = pindexScan->pnext;\n+    }\n+\n+    // TODO: It may be prudent to use DB Transactions here, but if we do we overrun our maximum lock objects\n+    //if (!TxnBegin())\n+    //    return false;\n+\n+    unsigned int nTxsPruned = 0;\n+    typedef pair<const uint256, pair<vector<bool>, bool> > TxIndexCachePairType;\n+    BOOST_FOREACH(TxIndexCachePairType& pair, mapTxIndexCache)\n+    {\n+        bool fPrunable = true;\n+        BOOST_FOREACH(bool fSpent, pair.second.first)\n+            if (!fSpent)\n+            {\n+                fPrunable = false;\n+                break;\n+            }\n+\n+        if (!fPrunable)\n+            continue;\n+\n+        EraseTxIndex(pair.first);\n+        nTxsPruned++;\n+    }\n+\n+    WriteHashBestCheckpoint(hashPruneTo);\n+\n+    //if (!TxnCommit())\n+    //    return false;\n+\n+    printf(\"Pruned %u items from txindex.dat\\n\", nTxsPruned);\n+\n+    return true;\n+}\n+\n bool CTxDB::LoadBlockIndex()\n {\n     if (!LoadBlockIndexGuts())"
      },
      {
        "sha": "5e06a0ad9a81ce57522de2036bc79483256432a0",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "patch": "@@ -306,6 +306,7 @@ class CTxDB : public CDB\n     bool UpdateTxIndex(uint256 hash, const CTxIndex& txindex);\n     bool AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight);\n     bool EraseTxIndex(const CTransaction& tx);\n+    bool EraseTxIndex(uint256 hash);\n     bool ContainsTx(uint256 hash);\n     bool ReadOwnerTxes(uint160 hash160, int nHeight, std::vector<CTransaction>& vtx);\n     bool ReadDiskTx(uint256 hash, CTransaction& tx, CTxIndex& txindex);\n@@ -315,9 +316,12 @@ class CTxDB : public CDB\n     bool WriteBlockIndex(const CDiskBlockIndex& blockindex);\n     bool ReadHashBestChain(uint256& hashBestChain);\n     bool WriteHashBestChain(uint256 hashBestChain);\n+    bool ReadHashBestCheckpoint(uint256& hashBestCheckpoint);\n+    bool WriteHashBestCheckpoint(uint256 hashBestCheckpoint);\n     bool ReadBestInvalidWork(CBigNum& bnBestInvalidWork);\n     bool WriteBestInvalidWork(CBigNum bnBestInvalidWork);\n     bool LoadBlockIndex();\n+    bool PruneBlockIndex(uint256 hashPruneFrom, uint256 hashPruneTo);\n private:\n     bool LoadBlockIndexGuts();\n };"
      },
      {
        "sha": "8fabded0ebaed2fd8e28e912089768a6b9229da4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "patch": "@@ -265,6 +265,8 @@ std::string HelpMessage()\n         \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000?.dat file\") + \"\\n\" +\n         \"  -blockbuffersize=<n>   \" + _(\"The maximum number of blocks to buffer for committing to disk (default: 20)\") + \"\\n\";\n+        \"  -autoprune             \" + _(\"Prunes blkindex.dat of spent transactions during download (default: 1)\") + \"\\n\" +\n+        \"  -prune                 \" + _(\"Prunes blkindex.dat of spent transactions during startup (default: 0)\") + \"\\n\" +\n         \"  -?                     \" + _(\"This help message\") + \"\\n\";\n \n     strUsage += string() +\n@@ -586,6 +588,26 @@ bool AppInit2()\n         return false;\n     }\n \n+    uiInterface.InitMessage(_(\"Upgrading block index...\"));\n+    printf(\"Upgrading block index...\\n\");\n+    nStart = GetTimeMillis();\n+    if (GetBoolArg(\"-prune\", false))\n+    {\n+        CTxDB txdb;\n+        if (!txdb.PruneBlockIndex(0, Checkpoints::GetLastCheckpointHash()))\n+            strErrors << _(\"Error pruning blkindex.dat\") << \"\\n\";\n+    }\n+\n+    // as PruneBlockIndex can take several minutes, it's possible the user\n+    // requested to kill bitcoin-qt during the last operation. If so, exit.\n+    // As the program has not fully started yet, Shutdown() is possibly overkill.\n+    if (fRequestShutdown)\n+    {\n+        printf(\"Shutdown requested. Exiting.\\n\");\n+        return false;\n+    }\n+    printf(\" block index prune %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+\n     // ********************************************************* Step 7: load wallet\n \n     uiInterface.InitMessage(_(\"Loading wallet...\"));\n@@ -668,6 +690,7 @@ bool AppInit2()\n \n     if (mapArgs.count(\"-loadblock\"))\n     {\n+        uiInterface.InitMessage(_(\"Importing additional blocks...\"));\n         BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n         {\n             FILE *file = fopen(strFile.c_str(), \"rb\");"
      },
      {
        "sha": "482e3f889cc08c6b5cfb516f6eeb40ad78ee880e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "patch": "@@ -1739,6 +1739,10 @@ bool CBlockStore::AcceptBlock(CBlock& block)\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n         return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n+    const CBlockIndex* pPrevCheckpoint = NULL;\n+    if (GetBoolArg(\"-autoprune\", true))\n+        pPrevCheckpoint = Checkpoints::GetLastCheckpoint();\n+\n     // Write block to history file\n     if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n@@ -1749,6 +1753,18 @@ bool CBlockStore::AcceptBlock(CBlock& block)\n     if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n+    if (GetBoolArg(\"-autoprune\", true))\n+    {\n+        if (Checkpoints::IsCheckpoint(nBestHeight))\n+        {\n+            CTxDB txdb;\n+            if (!pPrevCheckpoint)\n+                txdb.PruneBlockIndex(0, hash);\n+            else\n+                txdb.PruneBlockIndex(*(pPrevCheckpoint->phashBlock), hash);\n+        }\n+    }\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmRjNDE3ZDhiZjM1NTViYzA1MDZlYjFiZmZlMDc0NGYxNGQ1Yjhi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T17:37:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Basic genesis block load and hash test.",
      "tree": {
        "sha": "a2589102389448239fb1a7223c2b23056113f174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2589102389448239fb1a7223c2b23056113f174"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5c7b01bef22d9d4bb11d94d17d23f7fd293a02"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0174b7be6d604e12d02e50cfddc4941fe1d7ca34",
        "filename": "src/test/block_tests.cpp",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b/src/test/block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b/src/test/block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_tests.cpp?ref=42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
        "patch": "@@ -0,0 +1,39 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"main.h\"\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(block_tests)\n+\n+BOOST_AUTO_TEST_CASE(genesis_block_load)\n+{\n+    // Genesis Block:\n+    // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+    //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+    //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+    //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+    //   vMerkleTree: 4a5e1e\n+\n+    // Genesis block\n+    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+    CTransaction txNew;\n+    txNew.vin.resize(1);\n+    txNew.vout.resize(1);\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vout[0].nValue = 50 * COIN;\n+    txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    CBlock block;\n+    block.vtx.push_back(txNew);\n+    block.hashPrevBlock = 0;\n+    block.hashMerkleRoot = block.BuildMerkleTree();\n+    block.nVersion = 1;\n+    block.nTime    = 1231006505;\n+    block.nBits    = 0x1d00ffff;\n+    block.nNonce   = 2083236893;\n+\n+    BOOST_CHECK_MESSAGE(block.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"), \"Merkle root hash of genesis block incorrect.\");\n+    BOOST_CHECK_MESSAGE(block.GetHash() == hashGenesisBlock, \"Genesis block hash incorrect.\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjQwOGI0ZWI1MjFiOWZkZjhjZmZmMzIxNmNhZmU5OTNhMzBjZTRj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T16:11:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Fix duplicate CheckBlock() calls",
      "tree": {
        "sha": "0c16ca4c010c038a6919a7927e869e8f3317f143",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c16ca4c010c038a6919a7927e869e8f3317f143"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82408b4eb521b9fdf8cfff3216cafe993a30ce4c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42dc417d8bf3555bc0506eb1bffe0744f14d5b8b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4638dbd7874d211a15b28e0a4be666a4860cb3ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82408b4eb521b9fdf8cfff3216cafe993a30ce4c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82408b4eb521b9fdf8cfff3216cafe993a30ce4c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
        "patch": "@@ -1306,10 +1306,6 @@ bool CBlockStore::DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pinde\n \n bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n {\n-    // Check it again in case a previous version let a bad block in\n-    if (!block.CheckBlock())\n-        return false;\n-\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n@@ -1456,6 +1452,9 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n             return error(\"CBlockStore::Reorganize() : ReadFromDisk for connect failed\");\n+        // Check it again in case a previous version let a bad block in\n+        if (!block.CheckBlock())\n+            return error(\"CBlockStore::Reorganize() : CheckBlock for connect failed\");\n         if (!ConnectBlock(block, txdb, pindex))\n         {\n             // Invalid block\n@@ -1582,6 +1581,12 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n                 printf(\"SetBestChain() : ReadFromDisk failed\\n\");\n                 break;\n             }\n+            // Check it again in case a previous version let a bad block in\n+            if (!block2.CheckBlock())\n+            {\n+                printf(\"SetBestChain() : CheckBlock for connect failed\");\n+                break;\n+            }\n             if (!txdb.TxnBegin()) {\n                 printf(\"SetBestChain() : TxnBegin 2 failed\\n\");\n                 break;"
      }
    ]
  },
  {
    "sha": "a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDM1YjJkM2Q2ODE1YjM3ZTRlYjUwMjVkZTNhZjhmMWRhMmYzMTY1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T16:23:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Skip duplicate block.GetHash() calls.",
      "tree": {
        "sha": "b71a5640970bc66c8cdf4653ec59c97ccd94cf83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b71a5640970bc66c8cdf4653ec59c97ccd94cf83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a035b2d3d6815b37e4eb5025de3af8f1da2f3165/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82408b4eb521b9fdf8cfff3216cafe993a30ce4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82408b4eb521b9fdf8cfff3216cafe993a30ce4c"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 18,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ebfdc11034eef908d5386fe5cca919e4eec056a9",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a035b2d3d6815b37e4eb5025de3af8f1da2f3165/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a035b2d3d6815b37e4eb5025de3af8f1da2f3165/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
        "patch": "@@ -61,10 +61,10 @@ class CBlockStore\n     bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew);\n     bool DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n     bool ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex);\n-    bool SetBestChainInner(CBlock& block, CTxDB& txdb, CBlockIndex *pindexNew);\n-    bool SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNew);\n-    bool AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned int nBlockPos);\n-    bool AcceptBlock(CBlock& block);\n+    bool SetBestChainInner(CBlock& block, uint256& hash, CTxDB& txdb, CBlockIndex *pindexNew);\n+    bool SetBestChain(CBlock& block, uint256& hash, CTxDB& txdb, CBlockIndex* pindexNew);\n+    bool AddToBlockIndex(CBlock& block, uint256& hash, unsigned int nFile, unsigned int nBlockPos);\n+    bool AcceptBlock(CBlock& block, uint256& hash);\n public:\n     // Loops to process callbacks (do not call manually, automatically started in the constructor)\n         void ProcessCallbacks();"
      },
      {
        "sha": "a7da936063dc2d2196bc582ce7fc9c0e422abb70",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a035b2d3d6815b37e4eb5025de3af8f1da2f3165/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a035b2d3d6815b37e4eb5025de3af8f1da2f3165/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
        "patch": "@@ -1500,10 +1500,8 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n \n \n // Called from inside SetBestChain: attaches a block to the new best chain being built\n-bool CBlockStore::SetBestChainInner(CBlock& block, CTxDB& txdb, CBlockIndex *pindexNew)\n+bool CBlockStore::SetBestChainInner(CBlock& block, uint256& hash, CTxDB& txdb, CBlockIndex *pindexNew)\n {\n-    uint256 hash = block.GetHash();\n-\n     // Adding to current best branch\n     if (!ConnectBlock(block, txdb, pindexNew) || !txdb.WriteHashBestChain(hash))\n     {\n@@ -1526,10 +1524,8 @@ bool CBlockStore::SetBestChainInner(CBlock& block, CTxDB& txdb, CBlockIndex *pin\n     return true;\n }\n \n-bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNew)\n+bool CBlockStore::SetBestChain(CBlock& block, uint256& hash, CTxDB& txdb, CBlockIndex* pindexNew)\n {\n-    uint256 hash = block.GetHash();\n-\n     if (!txdb.TxnBegin())\n         return error(\"SetBestChain() : TxnBegin failed\");\n \n@@ -1542,7 +1538,7 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n     }\n     else if (block.hashPrevBlock == hashBestChain)\n     {\n-        if (!SetBestChainInner(block, txdb, pindexNew))\n+        if (!SetBestChainInner(block, hash, txdb, pindexNew))\n             return error(\"SetBestChain() : SetBestChainInner failed\");\n     }\n     else\n@@ -1592,7 +1588,8 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n                 break;\n             }\n             // errors now are not fatal, we still did a reorganisation to a new chain in a valid way\n-            if (!SetBestChainInner(block2, txdb, pindex))\n+            uint256 hashblock2 = block2.GetHash();\n+            if (!SetBestChainInner(block2, hashblock2, txdb, pindex))\n                 break;\n         }\n     }\n@@ -1618,10 +1615,9 @@ bool CBlockStore::SetBestChain(CBlock& block, CTxDB& txdb, CBlockIndex* pindexNe\n }\n \n \n-bool CBlockStore::AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned int nBlockPos)\n+bool CBlockStore::AddToBlockIndex(CBlock& block, uint256& hash, unsigned int nFile, unsigned int nBlockPos)\n {\n     // Check for duplicate\n-    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(0,20).c_str());\n \n@@ -1648,7 +1644,7 @@ bool CBlockStore::AddToBlockIndex(CBlock& block, unsigned int nFile, unsigned in\n \n     // New best\n     if (pindexNew->bnChainWork > bnBestChainWork)\n-        if (!SetBestChain(block, txdb, pindexNew))\n+        if (!SetBestChain(block, hash, txdb, pindexNew))\n             return false;\n \n     txdb.Close();\n@@ -1713,10 +1709,9 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlockStore::AcceptBlock(CBlock& block)\n+bool CBlockStore::AcceptBlock(CBlock& block, uint256& hash)\n {\n     // Check for duplicate\n-    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n@@ -1755,7 +1750,7 @@ bool CBlockStore::AcceptBlock(CBlock& block)\n     unsigned int nBlockPos = 0;\n     if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(block, nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, hash, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n     if (GetBoolArg(\"-autoprune\", true))\n@@ -1845,7 +1840,7 @@ bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n     }\n \n     // Store to disk\n-    if (!AcceptBlock(block))\n+    if (!AcceptBlock(block, hash))\n     {\n         if (block.nDoS && pNodeDoS)\n             CallbackDoS(pNodeDoS, block.nDoS);\n@@ -1865,7 +1860,7 @@ bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n             uint256 hashOrphan = pblockOrphan->GetHash();\n-            if (AcceptBlock(*pblockOrphan))\n+            if (AcceptBlock(*pblockOrphan, hashOrphan))\n                 qWorkQueue.push(hashOrphan);\n             mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n@@ -2127,7 +2122,8 @@ bool CBlockStore::LoadBlockIndex(bool fReadOnly)\n         if (!block.ReadFromDisk(pindexFork))\n             return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n         CTxDB txdb;\n-        SetBestChain(block, txdb, pindexFork);\n+        uint256 hashblock = block.GetHash();\n+        SetBestChain(block, hashblock, txdb, pindexFork);\n     }\n \n     txdb.Close();\n@@ -2183,7 +2179,7 @@ bool CBlockStore::LoadBlockIndex(bool fReadOnly)\n         unsigned int nBlockPos;\n         if (!block.WriteToDisk(nFile, nBlockPos))\n             return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n-        if (!AddToBlockIndex(block, nFile, nBlockPos))\n+        if (!AddToBlockIndex(block, hashGenesisBlock, nFile, nBlockPos))\n             return error(\"LoadBlockIndex() : genesis block not accepted\");\n     }\n "
      }
    ]
  },
  {
    "sha": "3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjk4ZTg5YjM4YTkwYzliY2RlYzMyYWM5MzljMGU2ZWM1ZmNlYTE0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T17:25:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Skip more duplicate hash checks in CBlockIndexs.",
      "tree": {
        "sha": "a71d965a4634718d69771a314afdd3e4712b9c89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a71d965a4634718d69771a314afdd3e4712b9c89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a035b2d3d6815b37e4eb5025de3af8f1da2f3165",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a035b2d3d6815b37e4eb5025de3af8f1da2f3165"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "744ab1fcf0ae76be43e7c0d656a7e32811380ccc",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
        "patch": "@@ -496,9 +496,9 @@ bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx)\n     return ReadDiskTx(outpoint.hash, tx, txindex);\n }\n \n-bool CTxDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)\n+bool CTxDB::WriteBlockIndex(const uint256& blockhash, const CDiskBlockIndex& blockindex)\n {\n-    return Write(make_pair(string(\"blockindex\"), blockindex.GetBlockHash()), blockindex);\n+    return Write(make_pair(string(\"blockindex\"), blockhash), blockindex);\n }\n \n bool CTxDB::ReadHashBestChain(uint256& hashBestChain)"
      },
      {
        "sha": "2d7fb21945d90e292cdcbd691d9eb3f255d06bbd",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
        "patch": "@@ -313,7 +313,7 @@ class CTxDB : public CDB\n     bool ReadDiskTx(uint256 hash, CTransaction& tx);\n     bool ReadDiskTx(COutPoint outpoint, CTransaction& tx, CTxIndex& txindex);\n     bool ReadDiskTx(COutPoint outpoint, CTransaction& tx);\n-    bool WriteBlockIndex(const CDiskBlockIndex& blockindex);\n+    bool WriteBlockIndex(const uint256& blockhash, const CDiskBlockIndex& blockindex);\n     bool ReadHashBestChain(uint256& hashBestChain);\n     bool WriteHashBestChain(uint256 hashBestChain);\n     bool ReadHashBestCheckpoint(uint256& hashBestCheckpoint);"
      },
      {
        "sha": "9fc8410c50a3143e3220dade6dbf168bd737dc35",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
        "patch": "@@ -1297,7 +1297,7 @@ bool CBlockStore::DisconnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pinde\n     {\n         CDiskBlockIndex blockindexPrev(pindex->pprev);\n         blockindexPrev.hashNext = 0;\n-        if (!txdb.WriteBlockIndex(blockindexPrev))\n+        if (!txdb.WriteBlockIndex(*(pindex->pprev->phashBlock), blockindexPrev))\n             return error(\"DisconnectBlock() : WriteBlockIndex failed\");\n     }\n \n@@ -1391,7 +1391,7 @@ bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n     {\n         CDiskBlockIndex blockindexPrev(pindex->pprev);\n         blockindexPrev.hashNext = pindex->GetBlockHash();\n-        if (!txdb.WriteBlockIndex(blockindexPrev))\n+        if (!txdb.WriteBlockIndex(*(pindex->pprev->phashBlock), blockindexPrev))\n             return error(\"ConnectBlock() : WriteBlockIndex failed\");\n     }\n \n@@ -1638,7 +1638,7 @@ bool CBlockStore::AddToBlockIndex(CBlock& block, uint256& hash, unsigned int nFi\n     CTxDB txdb;\n     if (!txdb.TxnBegin())\n         return false;\n-    txdb.WriteBlockIndex(CDiskBlockIndex(pindexNew));\n+    txdb.WriteBlockIndex(hash, CDiskBlockIndex(pindexNew));\n     if (!txdb.TxnCommit())\n         return false;\n "
      }
    ]
  },
  {
    "sha": "9ad2f5788e80bebad957e89bd7686706ba28dd53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWQyZjU3ODhlODBiZWJhZDk1N2U4OWJkNzY4NjcwNmJhMjhkZDUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T18:17:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Skip duplicate GetHash in CBlock::ReadFromDisk",
      "tree": {
        "sha": "c9b6fed4d3f82fbe7b7a52e9a13db80928ceda30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9b6fed4d3f82fbe7b7a52e9a13db80928ceda30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ad2f5788e80bebad957e89bd7686706ba28dd53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad2f5788e80bebad957e89bd7686706ba28dd53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad2f5788e80bebad957e89bd7686706ba28dd53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad2f5788e80bebad957e89bd7686706ba28dd53/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3298e89b38a90c9bcdec32ac939c0e6ec5fcea14"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fe643e68406143dafefa791ff00b682d32fbe781",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad2f5788e80bebad957e89bd7686706ba28dd53/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad2f5788e80bebad957e89bd7686706ba28dd53/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9ad2f5788e80bebad957e89bd7686706ba28dd53",
        "patch": "@@ -803,10 +803,8 @@ bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)\n         *this = pindex->GetBlockHeader();\n         return true;\n     }\n-    if (!ReadFromDisk(pindex->nFile, pindex->nBlockPos, fReadTransactions))\n+    if (!ReadFromDisk(pindex->nFile, pindex->nBlockPos, fReadTransactions, pindex->GetBlockHash()))\n         return false;\n-    if (GetHash() != pindex->GetBlockHash())\n-        return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");\n     return true;\n }\n "
      },
      {
        "sha": "e68e101bef66db0af1f92c4feddc5689da760942",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad2f5788e80bebad957e89bd7686706ba28dd53/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad2f5788e80bebad957e89bd7686706ba28dd53/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9ad2f5788e80bebad957e89bd7686706ba28dd53",
        "patch": "@@ -958,7 +958,7 @@ class CBlock\n         return true;\n     }\n \n-    bool ReadFromDisk(unsigned int nFile, unsigned int nBlockPos, bool fReadTransactions=true)\n+    bool ReadFromDisk(unsigned int nFile, unsigned int nBlockPos, bool fReadTransactions=true, uint256 hashTarget=0)\n     {\n         SetNull();\n \n@@ -977,8 +977,13 @@ class CBlock\n             return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n         }\n \n+        uint256 hash = GetHash();\n+\n+        if (hashTarget != 0 && hash != hashTarget)\n+            return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match hashTarget\");\n+\n         // Check the header\n-        if (!CheckProofOfWork(GetHash(), nBits))\n+        if (!CheckProofOfWork(hash, nBits))\n             return error(\"CBlock::ReadFromDisk() : errors in block header\");\n \n         return true;"
      }
    ]
  },
  {
    "sha": "65269339162d8643934170560154db384167e316",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTI2OTMzOTE2MmQ4NjQzOTM0MTcwNTYwMTU0ZGIzODQxNjdlMzE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T18:23:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Remove costly uint256/CBigNum::ToString() from SetBestChain.",
      "tree": {
        "sha": "91e3b79a2ffb44f8eae1fc4ba18053edbc50190a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91e3b79a2ffb44f8eae1fc4ba18053edbc50190a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65269339162d8643934170560154db384167e316",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65269339162d8643934170560154db384167e316",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65269339162d8643934170560154db384167e316",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65269339162d8643934170560154db384167e316/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9ad2f5788e80bebad957e89bd7686706ba28dd53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad2f5788e80bebad957e89bd7686706ba28dd53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad2f5788e80bebad957e89bd7686706ba28dd53"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "88f70256586639cba3954ebf9a5d93db194cf1d7",
        "filename": "src/hub.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65269339162d8643934170560154db384167e316/src/hub.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65269339162d8643934170560154db384167e316/src/hub.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hub.cpp?ref=65269339162d8643934170560154db384167e316",
        "patch": "@@ -9,7 +9,7 @@ class CHubCallbackCommitBlock : public CHubCallback\n     CBlock block;\n public:\n     CHubCallbackCommitBlock(const CBlock &blockIn) : block(blockIn) {}\n-    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock(block); }\n+    void Signal(CHubSignalTable& sigtable) { LOCK(sigtable.cs_sigCommitBlock); printf(\"CHubCallbackCommitBlock: New Block Committed: %s\\n\", block.GetHash().ToString().substr(0,20).c_str()); sigtable.sigCommitBlock(block); }\n };\n \n class CHubCallbackCommitAlert : public CHubCallback"
      },
      {
        "sha": "4da34f2fc96a2b180fe0bbb9460c054f50f8e40d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65269339162d8643934170560154db384167e316/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65269339162d8643934170560154db384167e316/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=65269339162d8643934170560154db384167e316",
        "patch": "@@ -1599,7 +1599,7 @@ bool CBlockStore::SetBestChain(CBlock& block, uint256& hash, CTxDB& txdb, CBlock\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n-    printf(\"SetBestChain: new best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"SetBestChain: new best height=%d\\n\", nBestHeight);\n \n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n "
      }
    ]
  },
  {
    "sha": "dc5f5395b8bbc5b51ef105de52229425ab59d714",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzVmNTM5NWI4YmJjNWI1MWVmMTA1ZGU1MjIyOTQyNWFiNTlkNzE0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T18:39:12Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Remove duplicate GetHash() in ConnectBlock.",
      "tree": {
        "sha": "3b574344f399b47f4ef417cc93422cbd8deb4a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b574344f399b47f4ef417cc93422cbd8deb4a2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc5f5395b8bbc5b51ef105de52229425ab59d714",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5f5395b8bbc5b51ef105de52229425ab59d714",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5f5395b8bbc5b51ef105de52229425ab59d714",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5f5395b8bbc5b51ef105de52229425ab59d714/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "65269339162d8643934170560154db384167e316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65269339162d8643934170560154db384167e316",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65269339162d8643934170560154db384167e316"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "72e2a3961f042f1b5b3f1933c865569bdf083540",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc5f5395b8bbc5b51ef105de52229425ab59d714/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc5f5395b8bbc5b51ef105de52229425ab59d714/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc5f5395b8bbc5b51ef105de52229425ab59d714",
        "patch": "@@ -1314,19 +1314,7 @@ bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n     // already refuses previously-known transaction id's entirely.\n     // This rule applies to all blocks whose timestamp is after March 15, 2012, 0:00 UTC.\n     // On testnet it is enabled as of februari 20, 2012, 0:00 UTC.\n-    if (pindex->nTime > 1331769600 || (fTestNet && pindex->nTime > 1329696000))\n-    {\n-        BOOST_FOREACH(CTransaction& tx, block.vtx)\n-        {\n-            CTxIndex txindexOld;\n-            if (txdb.ReadTxIndex(tx.GetHash(), txindexOld))\n-            {\n-                BOOST_FOREACH(CDiskTxPos &pos, txindexOld.vSpent)\n-                    if (pos.IsNull())\n-                        return false;\n-            }\n-        }\n-    }\n+    bool fEnforceBIP30 = pindex->nTime > 1331769600 || (fTestNet && pindex->nTime > 1329696000);\n \n     // BIP16 didn't become active until Apr 1 2012 (Feb 15 on testnet)\n     int64 nBIP16SwitchTime = fTestNet ? 1329264000 : 1333238400;\n@@ -1340,6 +1328,20 @@ bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(CTransaction& tx, block.vtx)\n     {\n+        // TODO: cache this value from when we check the merkle tree\n+        uint256 hashTx = tx.GetHash();\n+\n+        if (fEnforceBIP30)\n+        {\n+            CTxIndex txindexOld;\n+            if (txdb.ReadTxIndex(hashTx, txindexOld))\n+            {\n+                BOOST_FOREACH(CDiskTxPos &pos, txindexOld.vSpent)\n+                    if (pos.IsNull())\n+                        return false;\n+            }\n+        }\n+\n         nSigOps += tx.GetLegacySigOpCount();\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n             return block.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n@@ -1370,7 +1372,7 @@ bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n                 return false;\n         }\n \n-        mapQueuedChanges[tx.GetHash()] = CTxIndex(posThisTx, tx.vout.size());\n+        mapQueuedChanges[hashTx] = CTxIndex(posThisTx, tx.vout.size());\n     }\n \n     // Write queued txindex changes"
      }
    ]
  },
  {
    "sha": "80e3ac4168da89cf4a78d3974e00e314e9cb0883",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGUzYWM0MTY4ZGE4OWNmNGE3OGQzOTc0ZTAwZTMxNGU5Y2IwODgz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-19T18:40:51Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Use vMerkleTree as a cache of transactions hashes.",
      "tree": {
        "sha": "ed3eb568c2d2afd9b2ee43ffdc167edf1184cf6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed3eb568c2d2afd9b2ee43ffdc167edf1184cf6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80e3ac4168da89cf4a78d3974e00e314e9cb0883",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80e3ac4168da89cf4a78d3974e00e314e9cb0883",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80e3ac4168da89cf4a78d3974e00e314e9cb0883",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80e3ac4168da89cf4a78d3974e00e314e9cb0883/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "dc5f5395b8bbc5b51ef105de52229425ab59d714",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5f5395b8bbc5b51ef105de52229425ab59d714",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5f5395b8bbc5b51ef105de52229425ab59d714"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0751accfa1a43cb3bfe96a3497c5de71f03fe860",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80e3ac4168da89cf4a78d3974e00e314e9cb0883/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80e3ac4168da89cf4a78d3974e00e314e9cb0883/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=80e3ac4168da89cf4a78d3974e00e314e9cb0883",
        "patch": "@@ -685,17 +685,18 @@ bool CTxMemPool::addUnchecked(CTransaction &tx)\n }\n \n \n-bool CTxMemPool::remove(CTransaction &tx)\n+bool CTxMemPool::remove(CTransaction &tx, uint256 hashTx)\n {\n     // Remove transaction from memory pool\n     {\n         LOCK(cs);\n-        uint256 hash = tx.GetHash();\n-        if (mapTx.count(hash))\n+        if (hashTx == 0)\n+            hashTx = tx.GetHash();\n+        if (mapTx.count(hashTx))\n         {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                 mapNextTx.erase(txin.prevout);\n-            mapTx.erase(hash);\n+            mapTx.erase(hashTx);\n             nTransactionsUpdated++;\n         }\n     }\n@@ -1326,10 +1327,13 @@ bool CBlockStore::ConnectBlock(CBlock& block, CTxDB& txdb, CBlockIndex* pindex)\n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(CTransaction& tx, block.vtx)\n+    unsigned int nTxes = block.vtx.size();\n+    if (block.vMerkleTree.size() < nTxes)\n+        block.BuildMerkleTree();\n+    for (unsigned int i = 0; i < nTxes; i++)\n     {\n-        // TODO: cache this value from when we check the merkle tree\n-        uint256 hashTx = tx.GetHash();\n+        uint256& hashTx = block.vMerkleTree[i];\n+        CTransaction& tx = block.vtx[i];\n \n         if (fEnforceBIP30)\n         {\n@@ -1516,8 +1520,11 @@ bool CBlockStore::SetBestChainInner(CBlock& block, uint256& hash, CTxDB& txdb, C\n     pindexNew->pprev->pnext = pindexNew;\n \n     // Delete redundant memory transactions\n-    BOOST_FOREACH(CTransaction& tx, block.vtx)\n-        mempool.remove(tx);\n+    unsigned int nTxes = block.vtx.size();\n+    if (block.vMerkleTree.size() < nTxes)\n+        block.BuildMerkleTree();\n+    for (unsigned int i = 0; i < nTxes; i++)\n+        mempool.remove(block.vtx[i], block.vMerkleTree[i]);\n \n     CallbackCommitBlock(block);\n "
      },
      {
        "sha": "2042d42b62a337fc1428b7ad79c710f8ffa2022d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80e3ac4168da89cf4a78d3974e00e314e9cb0883/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80e3ac4168da89cf4a78d3974e00e314e9cb0883/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=80e3ac4168da89cf4a78d3974e00e314e9cb0883",
        "patch": "@@ -1592,7 +1592,7 @@ class CTxMemPool\n     bool accept(CTxDB& txdb, CTransaction &tx,\n                 bool fCheckInputs, bool* pfMissingInputs);\n     bool addUnchecked(CTransaction &tx);\n-    bool remove(CTransaction &tx);\n+    bool remove(CTransaction &tx, uint256 hash=0);\n \n     unsigned long size()\n     {"
      }
    ]
  },
  {
    "sha": "d2a057967657cbbc59a3902cf87eb50f63df6a86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmEwNTc5Njc2NTdjYmJjNTlhMzkwMmNmODdlYjUwZjYzZGY2YTg2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T20:27:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:53Z"
      },
      "message": "Remove duplicate GetHash() in CBlockStore::CallbackCommitBlock.",
      "tree": {
        "sha": "703d2643b7694332f3fa6518317a1284798c655e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/703d2643b7694332f3fa6518317a1284798c655e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2a057967657cbbc59a3902cf87eb50f63df6a86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a057967657cbbc59a3902cf87eb50f63df6a86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2a057967657cbbc59a3902cf87eb50f63df6a86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a057967657cbbc59a3902cf87eb50f63df6a86/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "80e3ac4168da89cf4a78d3974e00e314e9cb0883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80e3ac4168da89cf4a78d3974e00e314e9cb0883",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80e3ac4168da89cf4a78d3974e00e314e9cb0883"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "9690436c62c5468e30bbacd3d5a0906b61737e99",
        "filename": "src/blockstore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2a057967657cbbc59a3902cf87eb50f63df6a86/src/blockstore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2a057967657cbbc59a3902cf87eb50f63df6a86/src/blockstore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.cpp?ref=d2a057967657cbbc59a3902cf87eb50f63df6a86",
        "patch": "@@ -3,11 +3,11 @@\n #include \"net.h\"\n #include \"main.h\"\n \n-void CBlockStore::CallbackCommitBlock(const CBlock &block)\n+void CBlockStore::CallbackCommitBlock(const CBlock& block, const uint256& hash)\n {\n     {\n         LOCK(cs_mapGetBlockIndexWaits);\n-        std::map<uint256, CSemaphore*>::iterator it = mapGetBlockIndexWaits.find(block.GetHash());\n+        std::map<uint256, CSemaphore*>::iterator it = mapGetBlockIndexWaits.find(hash);\n         if (it != mapGetBlockIndexWaits.end() && it->second != NULL)\n             it->second->post_all();\n     }"
      },
      {
        "sha": "25f9b72b283d16d20cd131fdec015aa6971633ba",
        "filename": "src/blockstore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2a057967657cbbc59a3902cf87eb50f63df6a86/src/blockstore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2a057967657cbbc59a3902cf87eb50f63df6a86/src/blockstore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockstore.h?ref=d2a057967657cbbc59a3902cf87eb50f63df6a86",
        "patch": "@@ -43,7 +43,7 @@ class CBlockStore\n \n     CBlockStoreSignalTable sigtable;\n \n-    void CallbackCommitBlock(const CBlock &block);\n+    void CallbackCommitBlock(const CBlock& block, const uint256& hash);\n \n     void CallbackAskForBlocks(const uint256 hashEnd, const uint256 hashOriginator)  { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks(hashEnd, hashOriginator); }\n "
      },
      {
        "sha": "d87b0f894e289029a7b8488b6ebf73018467a0be",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2a057967657cbbc59a3902cf87eb50f63df6a86/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2a057967657cbbc59a3902cf87eb50f63df6a86/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d2a057967657cbbc59a3902cf87eb50f63df6a86",
        "patch": "@@ -1450,7 +1450,7 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n     }\n \n     // Connect longer branch\n-    list<CBlock> lCommitted;\n+    list<pair<uint256, CBlock> > lCommitted;\n     BOOST_FOREACH(CBlockIndex* pindex, lConnect)\n     {\n         CBlock block;\n@@ -1466,7 +1466,7 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         }\n \n         // Queue memory transactions to delete\n-        lCommitted.push_back(block);\n+        lCommitted.push_back(make_pair(*(pindex->phashBlock), block));\n     }\n     if (!txdb.WriteHashBestChain(pindexNew->GetBlockHash()))\n         return error(\"CBlockStore::Reorganize() : WriteHashBestChain failed\");\n@@ -1490,11 +1490,11 @@ bool CBlockStore::Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         mempool.accept(txdb, tx, false, NULL);\n \n     // Delete redundant memory transactions that are in the connected branch\n-    BOOST_FOREACH(CBlock& block, lCommitted)\n+    for (list<pair<uint256, CBlock> >::iterator it = lCommitted.begin(); it != lCommitted.end(); it++)\n     {\n-        BOOST_FOREACH(CTransaction& tx, block.vtx)\n+        BOOST_FOREACH(CTransaction& tx, it->second.vtx)\n             mempool.remove(tx);\n-        CallbackCommitBlock(block);\n+        CallbackCommitBlock(it->second, it->first);\n     }\n \n     printf(\"REORGANIZE: done\\n\");\n@@ -1526,7 +1526,7 @@ bool CBlockStore::SetBestChainInner(CBlock& block, uint256& hash, CTxDB& txdb, C\n     for (unsigned int i = 0; i < nTxes; i++)\n         mempool.remove(block.vtx[i], block.vMerkleTree[i]);\n \n-    CallbackCommitBlock(block);\n+    CallbackCommitBlock(block, hash);\n \n     return true;\n }"
      }
    ]
  }
]