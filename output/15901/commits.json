[
  {
    "sha": "6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWQzNzJhOTczY2ZhM2JkMDk4OGIyZTQwZGZmMGEwMDRkYjFjZjhk",
    "commit": {
      "author": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-04-27T14:15:56Z"
      },
      "committer": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-04-27T14:15:56Z"
      },
      "message": "wallet: log on rescan completion",
      "tree": {
        "sha": "f034836a14b55bde8ba4cd58a65514328d9b364e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f034836a14b55bde8ba4cd58a65514328d9b364e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3356799ee3f5441b8d6e68b9172eb641011354f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3356799ee3f5441b8d6e68b9172eb641011354f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3356799ee3f5441b8d6e68b9172eb641011354f8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34014f6204d1ea873298fc76dea73334a2ab69d7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
        "patch": "@@ -1771,6 +1771,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n+    int64_t start_time = GetTimeMillis();\n \n     assert(reserver.isReserved());\n \n@@ -1862,6 +1863,8 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n         } else if (block_height && chain().shutdownRequested()) {\n             WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);\n             result.status = ScanResult::USER_ABORT;\n+        } else {\n+            WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - start_time);\n         }\n     }\n     return result;\n@@ -4245,15 +4248,13 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n         }\n \n-        nStart = GetTimeMillis();\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n                 chain.initError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }\n         }\n-        walletInstance->WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n         walletInstance->database->IncrementUpdateCounter();\n "
      }
    ]
  },
  {
    "sha": "1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjYwMmY2ZmVkMmE2YTAzZmQ0ZDQ2M2JjNTZmYTllYjBjNGM3Nzlj",
    "commit": {
      "author": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-04-27T14:16:33Z"
      },
      "committer": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-04-27T14:16:33Z"
      },
      "message": "remove extraneous scope",
      "tree": {
        "sha": "de6ef6e0052d1902dd9590c8d5943da9321f16fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de6ef6e0052d1902dd9590c8d5943da9321f16fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad372a973cfa3bd0988b2e40dff0a004db1cf8d"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 73,
      "deletions": 75
    },
    "files": [
      {
        "sha": "4ab94f0c2c34b0649823b591cb9ec09d5b1a533a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 75,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1b602f6fed2a6a03fd4d463bc56fa9eb0c4c779c",
        "patch": "@@ -1780,92 +1780,90 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n \n     WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n+    fAbortRescan = false;\n+    ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n+    uint256 tip_hash;\n+    // The way the 'block_height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n+    Optional<int> block_height = MakeOptional(false, int());\n+    double progress_begin;\n+    double progress_end;\n     {\n-        fAbortRescan = false;\n-        ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        uint256 tip_hash;\n-        // The way the 'block_height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n-        Optional<int> block_height = MakeOptional(false, int());\n-        double progress_begin;\n-        double progress_end;\n-        {\n-            auto locked_chain = chain().lock();\n-            if (Optional<int> tip_height = locked_chain->getHeight()) {\n-                tip_hash = locked_chain->getBlockHash(*tip_height);\n-            }\n-            block_height = locked_chain->getBlockHeight(block_hash);\n-            progress_begin = chain().guessVerificationProgress(block_hash);\n-            progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n-        }\n-        double progress_current = progress_begin;\n-        while (block_height && !fAbortRescan && !chain().shutdownRequested()) {\n-            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n-                ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n-            }\n-            if (GetTime() >= nNow + 60) {\n-                nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n-            }\n+        auto locked_chain = chain().lock();\n+        if (Optional<int> tip_height = locked_chain->getHeight()) {\n+            tip_hash = locked_chain->getBlockHash(*tip_height);\n+        }\n+        block_height = locked_chain->getBlockHeight(block_hash);\n+        progress_begin = chain().guessVerificationProgress(block_hash);\n+        progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n+    }\n+    double progress_current = progress_begin;\n+    while (block_height && !fAbortRescan && !chain().shutdownRequested()) {\n+        if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n+            ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n+        }\n+        if (GetTime() >= nNow + 60) {\n+            nNow = GetTime();\n+            WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n+        }\n \n-            CBlock block;\n-            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n-                auto locked_chain = chain().lock();\n-                LOCK(cs_wallet);\n-                if (!locked_chain->getBlockHeight(block_hash)) {\n-                    // Abort scan if current block is no longer active, to prevent\n-                    // marking transactions as coming from the wrong block.\n-                    // TODO: This should return success instead of failure, see\n-                    // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n-                    result.last_failed_block = block_hash;\n-                    result.status = ScanResult::FAILURE;\n-                    break;\n-                }\n-                for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n-                }\n-                // scan succeeded, record block as most recent successfully scanned\n-                result.last_scanned_block = block_hash;\n-                result.last_scanned_height = *block_height;\n-            } else {\n-                // could not scan block, keep scanning but record this block as the most recent failure\n+        CBlock block;\n+        if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+            auto locked_chain = chain().lock();\n+            LOCK(cs_wallet);\n+            if (!locked_chain->getBlockHeight(block_hash)) {\n+                // Abort scan if current block is no longer active, to prevent\n+                // marking transactions as coming from the wrong block.\n+                // TODO: This should return success instead of failure, see\n+                // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n                 result.last_failed_block = block_hash;\n                 result.status = ScanResult::FAILURE;\n+                break;\n+            }\n+            for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n+                SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n             }\n-            if (block_hash == stop_block) {\n+            // scan succeeded, record block as most recent successfully scanned\n+            result.last_scanned_block = block_hash;\n+            result.last_scanned_height = *block_height;\n+        } else {\n+            // could not scan block, keep scanning but record this block as the most recent failure\n+            result.last_failed_block = block_hash;\n+            result.status = ScanResult::FAILURE;\n+        }\n+        if (block_hash == stop_block) {\n+            break;\n+        }\n+        {\n+            auto locked_chain = chain().lock();\n+            Optional<int> tip_height = locked_chain->getHeight();\n+            if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n+                // break successfully when rescan has reached the tip, or\n+                // previous block is no longer on the chain due to a reorg\n                 break;\n             }\n-            {\n-                auto locked_chain = chain().lock();\n-                Optional<int> tip_height = locked_chain->getHeight();\n-                if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n-                    // break successfully when rescan has reached the tip, or\n-                    // previous block is no longer on the chain due to a reorg\n-                    break;\n-                }\n \n-                // increment block and verification progress\n-                block_hash = locked_chain->getBlockHash(++*block_height);\n-                progress_current = chain().guessVerificationProgress(block_hash);\n+            // increment block and verification progress\n+            block_hash = locked_chain->getBlockHash(++*block_height);\n+            progress_current = chain().guessVerificationProgress(block_hash);\n \n-                // handle updated tip hash\n-                const uint256 prev_tip_hash = tip_hash;\n-                tip_hash = locked_chain->getBlockHash(*tip_height);\n-                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n-                    // in case the tip has changed, update progress max\n-                    progress_end = chain().guessVerificationProgress(tip_hash);\n-                }\n+            // handle updated tip hash\n+            const uint256 prev_tip_hash = tip_hash;\n+            tip_hash = locked_chain->getBlockHash(*tip_height);\n+            if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n+                // in case the tip has changed, update progress max\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             }\n         }\n-        ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n-        if (block_height && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n-            result.status = ScanResult::USER_ABORT;\n-        } else if (block_height && chain().shutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);\n-            result.status = ScanResult::USER_ABORT;\n-        } else {\n-            WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - start_time);\n-        }\n+    }\n+    ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n+    if (block_height && fAbortRescan) {\n+        WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n+        result.status = ScanResult::USER_ABORT;\n+    } else if (block_height && chain().shutdownRequested()) {\n+        WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);\n+        result.status = ScanResult::USER_ABORT;\n+    } else {\n+        WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - start_time);\n     }\n     return result;\n }"
      }
    ]
  }
]