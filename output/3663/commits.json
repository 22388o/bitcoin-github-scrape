[
  {
    "sha": "b23aaf8207deafdff04cfed279c4c509541df376",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjNhYWY4MjA3ZGVhZmRmZjA0Y2ZlZDI3OWM0YzUwOTU0MWRmMzc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-13T08:38:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-13T08:42:25Z"
      },
      "message": "Add RPC call `getrawwallettransaction`\n\nThis allows getting raw transaction data from the wallet even if the\ntransaction is no longer in the blockchain / mempool (for example if it\ngot orphaned due to malleability abuse).\n\nWas also proposed in #3220, but is urgently useful now.",
      "tree": {
        "sha": "77fffd74e16ffdf4e2c1de27b4a05cabaed935e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77fffd74e16ffdf4e2c1de27b4a05cabaed935e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b23aaf8207deafdff04cfed279c4c509541df376",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b23aaf8207deafdff04cfed279c4c509541df376",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b23aaf8207deafdff04cfed279c4c509541df376",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b23aaf8207deafdff04cfed279c4c509541df376/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19e5b9d2dfcac4efadba636745485d9660fb1abe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e5b9d2dfcac4efadba636745485d9660fb1abe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19e5b9d2dfcac4efadba636745485d9660fb1abe"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "15b72bbb2206f7ebe5461524659149faea68488f",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=b23aaf8207deafdff04cfed279c4c509541df376",
        "patch": "@@ -163,6 +163,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n     if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getrawwallettransaction\"&& n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);"
      },
      {
        "sha": "b516e7cb3222c21a81cf47d3078df45b38dc78c2",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b23aaf8207deafdff04cfed279c4c509541df376",
        "patch": "@@ -196,6 +196,55 @@ Value getrawtransaction(const Array& params, bool fHelp)\n }\n \n #ifdef ENABLE_WALLET\n+Value getrawwallettransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"getrawwallettransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"\\nReturn raw wallet transaction data from the wallet.\\n\"\n+            \"\\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n+            \"If verbose is non-zero, returns an Object with information about 'txid'.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"      (string, required) The transaction id to look up in the wallet\\n\"\n+            \"2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object\\n\"\n+\n+            \"\\nResult (if verbose is not set or set to 0):\\n\"\n+            \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n+\n+            \"\\nResult (if verbose > 0):\\n\"\n+            \"See the help for 'getrawtransaction'.\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getrawwallettransaction\", \"\\\"mytxid\\\"\")\n+            + HelpExampleCli(\"getrawwallettransaction\", \"\\\"mytxid\\\" 1\")\n+            + HelpExampleRpc(\"getrawwallettransaction\", \"\\\"mytxid\\\", 1\")\n+        );\n+\n+    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+\n+    bool fVerbose = false;\n+    if (params.size() > 1)\n+        fVerbose = (params[1].get_int() != 0);\n+\n+    std::map<uint256, CWalletTx>::iterator i = pwalletMain->mapWallet.find(hash);\n+    if (i == pwalletMain->mapWallet.end())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CTransaction &tx = i->second;\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    string strHex = HexStr(ssTx.begin(), ssTx.end());\n+\n+    if (!fVerbose)\n+        return strHex;\n+\n+    Object result;\n+    result.push_back(Pair(\"hex\", strHex));\n+    TxToJSON(tx, uint256(0), result);\n+    return result;\n+}\n+\n Value listunspent(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)"
      },
      {
        "sha": "89c133ae4dfcec44c5f6b6f9dda6dcdccf87a909",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b23aaf8207deafdff04cfed279c4c509541df376",
        "patch": "@@ -296,6 +296,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"settxfee\",               &settxfee,               false,     false,      true },\n+    { \"getrawwallettransaction\",&getrawwallettransaction,false,     false,      true },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "98adaa23d231771ed5d750cd85bf225f6d84ef1d",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b23aaf8207deafdff04cfed279c4c509541df376/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=b23aaf8207deafdff04cfed279c4c509541df376",
        "patch": "@@ -165,6 +165,7 @@ extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n+extern json_spirit::Value getrawwallettransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  }
]