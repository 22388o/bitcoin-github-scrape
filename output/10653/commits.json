[
  {
    "sha": "01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWJkNGJlZjIzZDBmM2M4MWJiMTFmYjhlY2JhNDA5ODk4ZmYwMWYx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T23:30:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T23:30:45Z"
      },
      "message": "Simple, backwards compatible RPC multiwallet support.\n\nThis change allows existing RPCs to work on multiple wallets by calling those\nRPCs with a wallet=filename named argument. Example usage:\n\n    bitcoind -regtest -wallet=w1.dat -wallet=w2.dat\n    bitcoin-cli -regtest -named getwalletinfo wallet=w1.dat\n    bitcoin-cli -regtest -named getwalletinfo wallet=w2.dat\n    bitcoin-cli -regtest -named getbalance wallet=w2.dat\n\nIndividual RPCs can override handling of the wallet named argument, but if they\ndon't, the `GetWalletForJSONRPCRequest` function will automatically chose the\nright wallet based on the argument value.\n\nThis change only allows JSON-RPC calls made with named arguments to access\nmultiple wallets. JSON-RPC calls made with positional arguments will still\ncontinue to access the default wallet as before.",
      "tree": {
        "sha": "a55bca0982f99526bc020164a177bf8b1e7018b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a55bca0982f99526bc020164a177bf8b1e7018b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c38f540298f0e188df5ed68fd56c623b9ac8331b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38f540298f0e188df5ed68fd56c623b9ac8331b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c38f540298f0e188df5ed68fd56c623b9ac8331b"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2c4b0bb709c514fbf782f7d76d8d986097236cde",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
        "patch": "@@ -456,6 +456,11 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n             hole += 1;\n         }\n     }\n+    auto wallet = argsIn.find(\"wallet\");\n+    if (wallet != argsIn.end() && wallet->second->isStr()) {\n+        out.wallet = wallet->second->getValStr();\n+        argsIn.erase(wallet);\n+    }\n     // If there are still arguments in the argsIn map, this is an error.\n     if (!argsIn.empty()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown named parameter \" + argsIn.begin()->first);"
      },
      {
        "sha": "48d9cb68b1d9270f23b9b50357ae23d101d4f26f",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
        "patch": "@@ -42,11 +42,25 @@ class JSONRPCRequest\n public:\n     UniValue id;\n     std::string strMethod;\n+    /**\n+     * Parameters from JSON-RPC request.\n+     * This will be either an object or an array when the JSONRPCRequest object is\n+     * originally created and parsed. But it will be transformed into an\n+     * array before being passed to the RPC method implementation (using the\n+     * list of named arguments provided by the implementation).\n+     */\n     UniValue params;\n     bool fHelp;\n     std::string URI;\n     std::string authUser;\n \n+    /**\n+     * Optional wallet name, set for backwards compatibility if the RPC method\n+     * was called with a named \"wallet\" parameter and the RPC method\n+     * implementation doesn't handle it itself.\n+     */\n+    std::string wallet;\n+\n     JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n     void parse(const UniValue& valRequest);\n };"
      },
      {
        "sha": "68625efaee4f66179f3ee6e8bce4c440c8d71534",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01bd4bef23d0f3c81bb11fb8ecba409898ff01f1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=01bd4bef23d0f3c81bb11fb8ecba409898ff01f1",
        "patch": "@@ -31,7 +31,14 @@\n \n CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n-    // TODO: Some way to access secondary wallets\n+    if (!request.wallet.empty()) {\n+        for (const auto& wallet : ::vpwallets) {\n+            if (request.wallet == wallet->GetName()) {\n+                return wallet;\n+            }\n+        }\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Requested wallet does not exist or is not loaded\");\n+    }\n     return vpwallets.empty() ? nullptr : vpwallets[0];\n }\n "
      }
    ]
  }
]