jonasschnelli,2017-06-23T08:50:55Z,"This is a simple and effective change. I could think this is viable for a first step.\n\nThe downsides of this are:\n-> Incompatible with non name based RPC calls\n-> Harder for later process separation (wallet switch is then in the JSON/Data layer)",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-310610290,310610290,
laanwj,2017-06-24T11:26:58Z,"I kind of like this solution. It's simple and elegant. A pity no one brought this up at the IRC meeting two weeks ago when this was discussed. I hadn't realized name-based arguments had made this so easy.\n\nEndpoint-based has the slight advantage that the RPC client code only has to make one change to use a different wallet: use a different URL. This needs a change to pass the argument for ever",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-310833084,310833084,
gmaxwell,2017-06-27T19:21:28Z,"> A pity no one brought this up at the IRC meeting two weeks ago when this was discussed\n\n> 12:46 < luke-jr> BTW, did we consider a generic JSON-RPC ""wallet"" named param?\n> 12:46 < sipa> luke-jr: i suggested that before, yes\n> 12:46 < sipa> luke-jr: i'd be fine with it, except it's less compatible with a future change that moves it to a different process (which will necessarily have a new ",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311458573,311458573,
jnewbery,2017-06-27T19:47:54Z,"I like this approach. It seems like the simplest and most straightforward way of exposing multiwallet functionality through the RPC interface. Longer term, if we do separate wallets out into separate processes, then I think multiple endpoints (#10650) makes sense. So my preference would be to do this now, with a warning that the API is unstable and will likely change in the future.\n\nI haven't ",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311465199,311465199,
ryanofsky,2017-06-28T00:34:06Z,"Thanks, updated the description. I do think #10661 is preferable to this PR. Although #10661 and this PR look almost the same externally (both accepting new wallet= named parameters for wallet methods), there are some differences:\n\n- Wallet parameters are documented in #10661, while in this PR they are completely undocumented.\n- Extra wallet= parameters on non-wallet methods trigger errors i",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311523589,311523589,
ryanofsky,2017-06-28T00:50:14Z,"Just want to point out that both this PR and #10661 are compatible with #10615 and #10650. Accepting wallet JSON-RPC arguments doesn't prevent us from restricting access to wallets based on endpoint or user authorization in the future. (In #10661, I'm keeping the unused `request` argument to `GetWalletForJSONRPCRequest` specifically to make sure this is easy to do later on.)\n\n> This needs a ch",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311525753,311525753,
sipa,2017-06-28T00:54:03Z,"> Extra wallet= parameters on non-wallet methods trigger errors in #10661, while here they are silently ignored.\n\nThis seems to be the largest downside of this approach to me, but it seems fixable by adding a flag to the RPC dispatch tables to mark wallet RPC specially?",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311526218,311526218,
ryanofsky,2017-06-28T01:02:42Z,"> This seems to be the largest downside of this approach to me, but it seems fixable by adding a flag to the RPC dispatch tables to mark wallet RPC specially?\n\nSure, but adding more special treatment of wallet parameters to this PR would just make me prefer #10661 even more. I don't like the idea of wallet parameters having magical attributes that make them different from other parameters when",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311527551,311527551,
sipa,2017-06-28T01:07:00Z,@ryanofsky I don't think that's so bad if you see it as a preparation for moving the wallet to a separate process entirely.,https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311528150,311528150,
ryanofsky,2017-06-28T01:26:52Z,"> @ryanofsky I don't think that's so bad if you see it as a preparation for moving the wallet to a separate process entirely.\n\nAgree that magic arguments are less bad if they are magic _and_ disappearing (i.e. temporary). But I don't see any advantage in having them at all when you can have normal arguments that don't require special treatment. Am I missing something?",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311530911,311530911,
sipa,2017-06-28T01:37:12Z,"@ryanofsky I think it's very ugly that wallet RPCs need to even be aware of the fact that there is such a thing as multiple wallets. In a hypothetical future where every wallet runs as its own process, there is no need for something like that. It seems much cleaner to add some plumbing to make sure RPCs don't need to be written with that in mind.",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311532389,311532389,
jnewbery,2017-06-28T14:12:54Z,"I've read the code for all the proposals now, and my preference is for #10650, implemented as a query option, since it seems like that's what we'd want for wallet separation (I think we'd also want to be able to access the wallet RPC calls directly on the wallet process). If that's going to take a long time to review/argue over/merge, then I don't see any harm in merging this PR sooner with a warn",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-311672219,311672219,
ryanofsky,2017-07-06T19:26:04Z,"Closing in favor of 10650 (https://botbot.me/freenode/bitcoin-core-dev/msg/88240462/), even though I do think 10650 is a worse solution: https://github.com/bitcoin/bitcoin/pull/10650#issuecomment-315066331\n\nThere is a newer version of the code in this PR which adds a test & makes it an error not to specify a wallet when more than one is loaded: https://github.com/bitcoin/bitcoin/compare/master",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-313494869,313494869,
ryanofsky,2017-07-13T18:09:28Z,"> Longer term, if we do separate wallets out into separate processes, then I think multiple endpoints (#10650) makes sense.\n\nFWIW, I was implementing RPC dispatch to wallet processes yesterday and found the opposite. With #10653 and #10661, rpc/server.cpp can take the wallet name directly from the RPC params and dispatch the request to the right wallet process, while with #10653, because the w",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-315158014,315158014,
sipa,2017-07-13T18:32:43Z,"@ryanofsky The reason why endpoints are preferable as a preparation for multiprocess has nothing to do with the server side, but with the client side. Having clients treat your wallet as a separate endpoint means they're well prepared for a future where it's a separate process - just change the endpoint.",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-315164126,315164126,
ryanofsky,2017-07-13T18:55:58Z,"> @ryanofsky The reason why endpoints are preferable as a preparation for multiprocess has nothing to do with the server side, but with the client side. Having clients treat your wallet as a separate endpoint means they're well prepared for a future where it's a separate process - just change the endpoint.\n\nThanks, that is helpful. I was thinking all along that endpoints are an unnecessary and",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-315170318,315170318,
morcos,2017-07-14T19:56:23Z,"Do we not want the behavior here where defaulting to vpwallets[0] only works if vpwallets.size() == 1?\n",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-315452733,315452733,
ryanofsky,2017-07-14T19:57:52Z,"> Do we not want the behavior here where defaulting to vpwallets[0] only works if vpwallets.size() == 1?\n\nThat behavior is implemented in the branch ( https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/multiparam), it's just not showing up in the PR because the PR is closed\n\n",https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-315453048,315453048,
ryanofsky,2017-07-14T20:06:56Z,Reopened as #10829.,https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-315454960,315454960,
jonasschnelli,2017-06-23T08:51:33Z,I guess `vpwallets` needs concurrency protection. ,https://github.com/bitcoin/bitcoin/pull/10653#discussion_r123700777,123700777,src/wallet/rpcwallet.cpp
promag,2017-07-04T11:12:02Z,Why? `vpwallets` is initialized in `InitLoadWallet` and then never changes.,https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125448408,125448408,src/wallet/rpcwallet.cpp
jnewbery,2017-07-04T11:13:31Z,"Because we may want to add dynamic loading/unloading/creation of wallets in future. In fact, I'm working on a branch that does just that.",https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125448657,125448657,src/wallet/rpcwallet.cpp
promag,2017-07-04T11:13:53Z,I would say `wallet` argument **must** be a string otherwise `RPC_INVALID_PARAMETER` should be raised.,https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125448706,125448706,src/rpc/server.cpp
promag,2017-07-04T11:21:54Z,Sure! When that happens proper concurrency protection must be added no? IMO is work for other PR.,https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125450106,125450106,src/wallet/rpcwallet.cpp
promag,2017-07-04T11:23:48Z,"Mixed feelings here, could we just return `nullptr` because if no wallet is loaded then it is the same outcome: wallet not found?",https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125450369,125450369,src/wallet/rpcwallet.cpp
luke-jr,2017-07-04T18:46:06Z,"Wallets should be passed as a CWallet reference, not as a string...",https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125519434,125519434,src/rpc/server.h
ryanofsky,2017-07-05T18:10:41Z,`RPC_INVALID_PARAMETER` will be raised when wallet isn't a string because `!argsIn.empty()` will be true below.,https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125717917,125717917,src/rpc/server.cpp
ryanofsky,2017-07-05T18:39:06Z,"> Wallets should be passed as a CWallet reference, not as a string...\n\nAdvantage of doing that is that it could simplify test code wanting to emulate RPC calls by avoiding the need for it to have to manipulate `vpwallets.` Disadvantage is it would require sticking an `#ifdef ENABLE_WALLET` in the PR and moving wallet-selection logic from the wallet layer (`GetWalletForJSONRPCRequest`) to the r",https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125724879,125724879,src/rpc/server.h
ryanofsky,2017-07-05T18:41:36Z,"Yeah, I don't think anyone is suggesting it's needed in this PR.",https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125725439,125725439,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-05T18:49:24Z,"Reason for throwing here instead of returning `nullptr` is to make it an error to pass an invalid wallet filename to RPC calls like `validateaddress`, `createmultisig`, or `getinfo` where having a wallet is optional.",https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125727292,125727292,src/wallet/rpcwallet.cpp
luke-jr,2017-07-05T23:30:26Z,Another advantage is to properly call RPCs from the GUI without going wallet->string->wallet (which would be just begging for bugs).,https://github.com/bitcoin/bitcoin/pull/10653#discussion_r125781777,125781777,src/rpc/server.h
