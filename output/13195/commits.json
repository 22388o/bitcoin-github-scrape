[
  {
    "sha": "641517d8e931d4598673162ad91a95e6f7c4cb98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDE1MTdkOGU5MzFkNDU5ODY3MzE2MmFkOTFhOTVlNmY3YzRjYjk4",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T04:24:07Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:28:18Z"
      },
      "message": "[WIP] Wrap C++17 std::filesystem::path to solve encoding issue on Windows",
      "tree": {
        "sha": "86de757949ce954614e78d3e77cc8282e8ae011a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86de757949ce954614e78d3e77cc8282e8ae011a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/641517d8e931d4598673162ad91a95e6f7c4cb98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/641517d8e931d4598673162ad91a95e6f7c4cb98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/641517d8e931d4598673162ad91a95e6f7c4cb98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/641517d8e931d4598673162ad91a95e6f7c4cb98/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b824c090f53d0a56833930fd38c41bcaec8ff4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b824c090f53d0a56833930fd38c41bcaec8ff4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b824c090f53d0a56833930fd38c41bcaec8ff4a"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5863caad8e0ea42761c3245cbbebf69257aa3dec",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/641517d8e931d4598673162ad91a95e6f7c4cb98/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/641517d8e931d4598673162ad91a95e6f7c4cb98/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=641517d8e931d4598673162ad91a95e6f7c4cb98",
        "patch": "@@ -1,4 +1,5 @@\n #include <fs.h>\n+#include <utilstrencodings.h>\n \n namespace fsbridge {\n \n@@ -12,4 +13,17 @@ FILE *freopen(const fs::path& p, const char *mode, FILE *stream)\n     return ::freopen(p.string().c_str(), mode, stream);\n }\n \n+Path::Path() : fs::path(){}\n+\n+Path::Path(const fs::path& p) : fs::path(p) {}\n+\n+std::string Path::u8string() const\n+{\n+    return NativeToUtf8(boost::filesystem::path::string());\n+}\n+\n+Path U8Path(const std::string& source)\n+{\n+    return Utf8ToNative(source);\n+}\n } // fsbridge"
      },
      {
        "sha": "86a8e53984a3ce2cd26ef6d8d9d8f5a87e0ddb7a",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/641517d8e931d4598673162ad91a95e6f7c4cb98/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/641517d8e931d4598673162ad91a95e6f7c4cb98/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=641517d8e931d4598673162ad91a95e6f7c4cb98",
        "patch": "@@ -19,6 +19,20 @@ namespace fs = boost::filesystem;\n namespace fsbridge {\n     FILE *fopen(const fs::path& p, const char *mode);\n     FILE *freopen(const fs::path& p, const char *mode, FILE *stream);\n+\n+    class Path : public fs::path\n+    {\n+    public:\n+        Path();\n+        template<typename Source>\n+        Path(const Source & source) : fs::path(source){}\n+        template<typename Source>\n+        Path(const Source & source, const codecvt_type& cvt) : fs::path(source, cvt){}\n+        Path(const fs::path& p);\n+        std::string u8string() const;\n+    };\n+\n+    Path U8Path(const std::string& source);\n };\n \n #endif // BITCOIN_FS_H"
      },
      {
        "sha": "4e58b208f59bf20c3de61c267a4246f451ca05b0",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/641517d8e931d4598673162ad91a95e6f7c4cb98/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/641517d8e931d4598673162ad91a95e6f7c4cb98/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=641517d8e931d4598673162ad91a95e6f7c4cb98",
        "patch": "@@ -12,6 +12,10 @@\n #include <errno.h>\n #include <limits>\n \n+#ifdef WIN32\n+#include <stringapiset.h>\n+#endif\n+\n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n static const std::string SAFE_CHARS[] =\n@@ -544,3 +548,34 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n     return true;\n }\n \n+std::string NativeToUtf8(const std::string& source)\n+{\n+#ifdef WIN32\n+    wchar_t wide[MAX_PATH];\n+    char utf8[MAX_PATH];\n+    if (source.size() == 0) return source;\n+    int size = MultiByteToWideChar(CP_ACP, 0, source.c_str(), source.size(), wide, MAX_PATH);\n+    assert(size);\n+    size = WideCharToMultiByte(CP_UTF8, 0, wide, size, utf8, MAX_PATH, nullptr, nullptr);\n+    assert(size);\n+    return std::string(utf8, 0, size);\n+#else\n+    return source;\n+#endif\n+}\n+\n+std::string Utf8ToNative(const std::string& source)\n+{\n+#ifdef WIN32\n+    wchar_t wide[MAX_PATH];\n+    char native[MAX_PATH];\n+    if (source.size() == 0) return source;\n+    int size = MultiByteToWideChar(CP_UTF8, 0, source.c_str(), source.size(), wide, MAX_PATH);\n+    assert(size);\n+    size = WideCharToMultiByte(CP_ACP, 0, wide, size, native, MAX_PATH, nullptr, nullptr);\n+    assert(size);\n+    return std::string(native, 0, size);\n+#else\n+    return source;\n+#endif\n+}"
      },
      {
        "sha": "fb86858b8735d4000e73baea48adbabc77d524f1",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/641517d8e931d4598673162ad91a95e6f7c4cb98/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/641517d8e931d4598673162ad91a95e6f7c4cb98/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=641517d8e931d4598673162ad91a95e6f7c4cb98",
        "patch": "@@ -173,4 +173,8 @@ bool ConvertBits(const O& outfn, I it, I end) {\n     return true;\n }\n \n+std::string NativeToUtf8(const std::string& source);\n+\n+std::string Utf8ToNative(const std::string& source);\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      }
    ]
  },
  {
    "sha": "d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOThjYzRlYWE4YjNkODk0OWFhNTBkOGY0NTA2ZDVmNDlhMWYzZWI2",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T16:21:25Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:28:36Z"
      },
      "message": "scripted-diff: Use fsbridge::Path instead of boost::filesystem::path\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/fs::path/fsbridge::Path/g' $(git grep --name-only 'fs::path' -- '*.cpp' '*.h' | grep -v 'fs.h' | grep -v 'fs.cpp')\nsed -i 's/boost::filesystem::path/fsbridge::Path/g' $(git grep --name-only 'boost::filesystem::path' -- '*.cpp' '*.h' | grep -v 'fs.h' | grep -v 'fs.cpp')\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "02f0c12a25c9dd6a326c02c6baecc9197870558d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02f0c12a25c9dd6a326c02c6baecc9197870558d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "641517d8e931d4598673162ad91a95e6f7c4cb98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/641517d8e931d4598673162ad91a95e6f7c4cb98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/641517d8e931d4598673162ad91a95e6f7c4cb98"
      }
    ],
    "stats": {
      "total": 308,
      "additions": 154,
      "deletions": 154
    },
    "files": [
      {
        "sha": "944d07229953dd06c67fc609a5fbf9151ffdd31a",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -33,15 +33,15 @@ bool SerializeDB(Stream& stream, const Data& data)\n }\n \n template <typename Data>\n-bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)\n+bool SerializeFileDB(const std::string& prefix, const fsbridge::Path& path, const Data& data)\n {\n     // Generate random temporary filename\n     unsigned short randv = 0;\n     GetRandBytes((unsigned char*)&randv, sizeof(randv));\n     std::string tmpfn = strprintf(\"%s.%04x\", prefix, randv);\n \n     // open temp output file, and associate with CAutoFile\n-    fs::path pathTmp = GetDataDir() / tmpfn;\n+    fsbridge::Path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n@@ -92,7 +92,7 @@ bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n }\n \n template <typename Data>\n-bool DeserializeFileDB(const fs::path& path, Data& data)\n+bool DeserializeFileDB(const fsbridge::Path& path, Data& data)\n {\n     // open input file, and associate with CAutoFile\n     FILE *file = fsbridge::fopen(path, \"rb\");"
      },
      {
        "sha": "338a15dbaddc52d25d69735a270a63438bced277",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -80,7 +80,7 @@ typedef std::map<CSubNet, CBanEntry> banmap_t;\n class CAddrDB\n {\n private:\n-    fs::path pathAddr;\n+    fsbridge::Path pathAddr;\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n@@ -92,7 +92,7 @@ class CAddrDB\n class CBanDB\n {\n private:\n-    fs::path pathBanlist;\n+    fsbridge::Path pathBanlist;\n public:\n     CBanDB();\n     bool Write(const banmap_t& banSet);"
      },
      {
        "sha": "594409cc376dad1e39826413fe61360adb9584a0",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -114,7 +114,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const fsbridge::Path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n     : m_name(fs::basename(path))\n {\n     penv = nullptr;"
      },
      {
        "sha": "c3eabfbdf2f93c7b5c2a436d37a1db118d018be2",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -221,7 +221,7 @@ class CDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    CDBWrapper(const fsbridge::Path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CDBWrapper();\n \n     CDBWrapper(const CDBWrapper&) = delete;"
      },
      {
        "sha": "b721c9fde5f1f64d933a8276f155cc91337947a8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -233,7 +233,7 @@ void Shutdown()\n     if (fFeeEstimatesInitialized)\n     {\n         ::feeEstimator.FlushUnconfirmed();\n-        fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+        fsbridge::Path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n             ::feeEstimator.Write(est_fileout);\n@@ -606,13 +606,13 @@ struct CImportingNow\n // works correctly.\n static void CleanupBlockRevFiles()\n {\n-    std::map<std::string, fs::path> mapBlockFiles;\n+    std::map<std::string, fsbridge::Path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    fs::path blocksdir = GetBlocksDir();\n+    fsbridge::Path blocksdir = GetBlocksDir();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (fs::is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n@@ -630,7 +630,7 @@ static void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    for (const std::pair<std::string, fs::path>& item : mapBlockFiles) {\n+    for (const std::pair<std::string, fsbridge::Path>& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -639,7 +639,7 @@ static void CleanupBlockRevFiles()\n     }\n }\n \n-static void ThreadImport(std::vector<fs::path> vImportFiles)\n+static void ThreadImport(std::vector<fsbridge::Path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n@@ -670,11 +670,11 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n-    fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    fsbridge::Path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n     if (fs::exists(pathBootstrap)) {\n         FILE *file = fsbridge::fopen(pathBootstrap, \"rb\");\n         if (file) {\n-            fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            fsbridge::Path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n@@ -684,7 +684,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    for (const fs::path& path : vImportFiles) {\n+    for (const fsbridge::Path& path : vImportFiles) {\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n@@ -1188,7 +1188,7 @@ bool AppInitParameterInteraction()\n static bool LockDataDirectory(bool probeOnly)\n {\n     // Make sure only a single Bitcoin process is using the data directory.\n-    fs::path datadir = GetDataDir();\n+    fsbridge::Path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n         return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n     }\n@@ -1258,7 +1258,7 @@ bool AppInitMain()\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n-    if (gArgs.IsArgSet(\"-datadir\") && !fs::path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n+    if (gArgs.IsArgSet(\"-datadir\") && !fsbridge::Path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n         LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \" /* Continued */\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n@@ -1611,7 +1611,7 @@ bool AppInitMain()\n         LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n     }\n \n-    fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    fsbridge::Path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n@@ -1666,7 +1666,7 @@ bool AppInitMain()\n     if (gArgs.IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n-    std::vector<fs::path> vImportFiles;\n+    std::vector<fsbridge::Path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n         vImportFiles.push_back(strFile);\n     }"
      },
      {
        "sha": "08480964d47a28dcd4bf804337f5e01e4f268201",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -82,7 +82,7 @@ namespace BCLog {\n         bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;\n         bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;\n \n-        fs::path m_file_path;\n+        fsbridge::Path m_file_path;\n         std::atomic<bool> m_reopen_file{false};\n \n         /** Send a string to the log output */"
      },
      {
        "sha": "d2d2ed5f146ebb10878ea3a82b323f92b322cf53",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -394,7 +394,7 @@ bool isObscured(QWidget *w)\n \n void openDebugLogfile()\n {\n-    fs::path pathDebug = GetDataDir() / \"debug.log\";\n+    fsbridge::Path pathDebug = GetDataDir() / \"debug.log\";\n \n     /* Open debug.log with the associated application */\n     if (fs::exists(pathDebug))\n@@ -403,7 +403,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+    fsbridge::Path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);\n@@ -597,7 +597,7 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n }\n \n #ifdef WIN32\n-fs::path static StartupShortcutPath()\n+fsbridge::Path static StartupShortcutPath()\n {\n     std::string chain = gArgs.GetChainName();\n     if (chain == CBaseChainParams::MAIN)\n@@ -686,16 +686,16 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n // Follow the Desktop Application Autostart Spec:\n // http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n-fs::path static GetAutostartDir()\n+fsbridge::Path static GetAutostartDir()\n {\n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n-    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n+    if (pszConfigHome) return fsbridge::Path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");\n-    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n-    return fs::path();\n+    if (pszHome) return fsbridge::Path(pszHome) / \".config\" / \"autostart\";\n+    return fsbridge::Path();\n }\n \n-fs::path static GetAutostartFilePath()\n+fsbridge::Path static GetAutostartFilePath()\n {\n     std::string chain = gArgs.GetChainName();\n     if (chain == CBaseChainParams::MAIN)\n@@ -854,12 +854,12 @@ void setClipboard(const QString& str)\n     QApplication::clipboard()->setText(str, QClipboard::Selection);\n }\n \n-fs::path qstringToBoostPath(const QString &path)\n+fsbridge::Path qstringToBoostPath(const QString &path)\n {\n-    return fs::path(path.toStdString(), utf8);\n+    return fsbridge::Path(path.toStdString(), utf8);\n }\n \n-QString boostPathToQString(const fs::path &path)\n+QString boostPathToQString(const fsbridge::Path &path)\n {\n     return QString::fromStdString(path.string(utf8));\n }"
      },
      {
        "sha": "223fe3be03ea39b149a27fecfddffc20be85db37",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -184,10 +184,10 @@ namespace GUIUtil\n     bool SetStartOnSystemStartup(bool fAutoStart);\n \n     /* Convert QString to OS specific boost path through UTF-8 */\n-    fs::path qstringToBoostPath(const QString &path);\n+    fsbridge::Path qstringToBoostPath(const QString &path);\n \n     /* Convert OS specific boost path to QString through UTF-8 */\n-    QString boostPathToQString(const fs::path &path);\n+    QString boostPathToQString(const fsbridge::Path &path);\n \n     /* Convert seconds into a QString with days, hours, mins, secs */\n     QString formatDurationStr(int secs);"
      },
      {
        "sha": "0bbe68cc8eda3ea01ac64065bd2a833aa8b59301",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -71,14 +71,14 @@ FreespaceChecker::FreespaceChecker(Intro *_intro)\n void FreespaceChecker::check()\n {\n     QString dataDirStr = intro->getPathToCheck();\n-    fs::path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n+    fsbridge::Path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n     uint64_t freeBytesAvailable = 0;\n     int replyStatus = ST_OK;\n     QString replyMessage = tr(\"A new data directory will be created.\");\n \n     /* Find first parent that exists, so that fs::space does not fail */\n-    fs::path parentDir = dataDir;\n-    fs::path parentDirOld = fs::path();\n+    fsbridge::Path parentDir = dataDir;\n+    fsbridge::Path parentDirOld = fsbridge::Path();\n     while(parentDir.has_parent_path() && !fs::exists(parentDir))\n     {\n         parentDir = parentDir.parent_path();"
      },
      {
        "sha": "84b460dce52a58c525ce8c283ee9717688b5a5c1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -160,7 +160,7 @@ static void CopySettings(QSettings& dst, const QSettings& src)\n }\n \n /** Back up a QSettings to an ini-formatted file. */\n-static void BackupSettings(const fs::path& filename, const QSettings& src)\n+static void BackupSettings(const fsbridge::Path& filename, const QSettings& src)\n {\n     qWarning() << \"Backing up GUI settings to\" << GUIUtil::boostPathToQString(filename);\n     QSettings dst(GUIUtil::boostPathToQString(filename), QSettings::IniFormat);"
      },
      {
        "sha": "10e8b1d8c3fbe42b9cfd0fb6504f7a6864760425",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -55,7 +55,7 @@ int main(int argc, char *argv[])\n     SelectParams(CBaseChainParams::MAIN);\n     noui_connect();\n     ClearDatadirCache();\n-    fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n+    fsbridge::Path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n     fs::create_directories(pathTemp);\n     gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n "
      },
      {
        "sha": "d0a3a6b9243db5ec246cd69ebab69bed0b4baf4d",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -66,13 +66,13 @@ static const std::string COOKIEAUTH_USER = \"__cookie__\";\n static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n /** Get name of RPC authentication cookie file */\n-static fs::path GetAuthCookieFile(bool temp=false)\n+static fsbridge::Path GetAuthCookieFile(bool temp=false)\n {\n     std::string arg = gArgs.GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE);\n     if (temp) {\n         arg += \".tmp\";\n     }\n-    return AbsPathForConfigVal(fs::path(arg));\n+    return AbsPathForConfigVal(fsbridge::Path(arg));\n }\n \n bool GenerateAuthCookie(std::string *cookie_out)\n@@ -86,7 +86,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      * these are set to 077 in init.cpp unless overridden with -sysperms.\n      */\n     std::ofstream file;\n-    fs::path filepath_tmp = GetAuthCookieFile(true);\n+    fsbridge::Path filepath_tmp = GetAuthCookieFile(true);\n     file.open(filepath_tmp.string().c_str());\n     if (!file.is_open()) {\n         LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.string());\n@@ -95,7 +95,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n     file << cookie;\n     file.close();\n \n-    fs::path filepath = GetAuthCookieFile(false);\n+    fsbridge::Path filepath = GetAuthCookieFile(false);\n     if (!RenameOver(filepath_tmp, filepath)) {\n         LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.string(), filepath.string());\n         return false;\n@@ -111,7 +111,7 @@ bool GetAuthCookie(std::string *cookie_out)\n {\n     std::ifstream file;\n     std::string cookie;\n-    fs::path filepath = GetAuthCookieFile();\n+    fsbridge::Path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         return false;"
      },
      {
        "sha": "eb8dcb80fbff5b50d85cdeab7352f75af087ff71",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = InsecureRand256();\n@@ -47,7 +47,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -122,8 +122,8 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n-    // We're going to share this fs::path between two wrappers\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    // We're going to share this fsbridge::Path between two wrappers\n+    fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -163,8 +163,8 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n-    // We're going to share this fs::path between two wrappers\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    // We're going to share this fsbridge::Path between two wrappers\n+    fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -199,7 +199,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fsbridge::Path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {"
      },
      {
        "sha": "8a130d362be767e49e0124e28bd9c75590b5c12a",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -59,7 +59,7 @@ struct CConnmanTest {\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n-    fs::path pathTemp;\n+    fsbridge::Path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n     CScheduler scheduler;"
      },
      {
        "sha": "e6fc7c91c4184ab5cd1073d446d88cc942e79984",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -1039,7 +1039,7 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n-static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)\n+static void TestOtherThread(fsbridge::Path dirname, std::string lockname, bool *result)\n {\n     *result = LockDirectory(dirname, lockname);\n }\n@@ -1049,7 +1049,7 @@ static constexpr char LockCommand = 'L';\n static constexpr char UnlockCommand = 'U';\n static constexpr char ExitCommand = 'X';\n \n-static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n+static void TestOtherProcess(fsbridge::Path dirname, std::string lockname, int fd)\n {\n     char ch;\n     while (true) {\n@@ -1078,7 +1078,7 @@ static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n \n BOOST_AUTO_TEST_CASE(test_LockDirectory)\n {\n-    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    fsbridge::Path dirname = fs::temp_directory_path() / fs::unique_path();\n     const std::string lockname = \".lock\";\n #ifndef WIN32\n     // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n@@ -1167,7 +1167,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n BOOST_AUTO_TEST_CASE(test_DirIsWritable)\n {\n     // Should be able to write to the system tmp dir.\n-    fs::path tmpdirname = fs::temp_directory_path();\n+    fsbridge::Path tmpdirname = fs::temp_directory_path();\n     BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), true);\n \n     // Should not be able to write to a non-existent dir."
      },
      {
        "sha": "930a039f53986d321a2fad53a9bc65f11a2250f7",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -364,7 +364,7 @@ static std::map<std::string,std::string> ParseTorReplyMapping(const std::string\n  * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n  *         (with len > maxsize) will be returned.\n  */\n-static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n+static std::pair<bool,std::string> ReadBinaryFile(const fsbridge::Path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n {\n     FILE *f = fsbridge::fopen(filename, \"rb\");\n     if (f == nullptr)\n@@ -390,7 +390,7 @@ static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size\n /** Write contents of std::string to a file.\n  * @return true on success.\n  */\n-static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+static bool WriteBinaryFile(const fsbridge::Path &filename, const std::string &data)\n {\n     FILE *f = fsbridge::fopen(filename, \"wb\");\n     if (f == nullptr)\n@@ -415,7 +415,7 @@ class TorController\n     ~TorController();\n \n     /** Get name fo file to store private key in */\n-    fs::path GetPrivateKeyFile();\n+    fsbridge::Path GetPrivateKeyFile();\n \n     /** Reconnect, after getting disconnected */\n     void Reconnect();\n@@ -718,7 +718,7 @@ void TorController::Reconnect()\n     }\n }\n \n-fs::path TorController::GetPrivateKeyFile()\n+fsbridge::Path TorController::GetPrivateKeyFile()\n {\n     return GetDataDir() / \"onion_private_key\";\n }"
      },
      {
        "sha": "698cbcdafd0834606c1b2d0c400eb0c695f8f0b0",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -146,10 +146,10 @@ static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> di\n /** Mutex to protect dir_locks. */\n static std::mutex cs_dir_locks;\n \n-bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n+bool LockDirectory(const fsbridge::Path& directory, const std::string lockfile_name, bool probe_only)\n {\n     std::lock_guard<std::mutex> ulock(cs_dir_locks);\n-    fs::path pathLockFile = directory / lockfile_name;\n+    fsbridge::Path pathLockFile = directory / lockfile_name;\n \n     // If a lock for this directory already exists in the map, don't try to re-lock it\n     if (dir_locks.count(pathLockFile.string())) {\n@@ -181,9 +181,9 @@ void ReleaseDirectoryLocks()\n     dir_locks.clear();\n }\n \n-bool DirIsWritable(const fs::path& directory)\n+bool DirIsWritable(const fsbridge::Path& directory)\n {\n-    fs::path tmpFile = directory / fs::unique_path();\n+    fsbridge::Path tmpFile = directory / fs::unique_path();\n \n     FILE* file = fsbridge::fopen(tmpFile, \"a\");\n     if (!file) return false;\n@@ -579,7 +579,7 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n     fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n }\n \n-fs::path GetDefaultDataDir()\n+fsbridge::Path GetDefaultDataDir()\n {\n     // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n     // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n@@ -589,12 +589,12 @@ fs::path GetDefaultDataDir()\n     // Windows\n     return GetSpecialFolderPath(CSIDL_APPDATA) / \"Bitcoin\";\n #else\n-    fs::path pathRet;\n+    fsbridge::Path pathRet;\n     char* pszHome = getenv(\"HOME\");\n     if (pszHome == nullptr || strlen(pszHome) == 0)\n-        pathRet = fs::path(\"/\");\n+        pathRet = fsbridge::Path(\"/\");\n     else\n-        pathRet = fs::path(pszHome);\n+        pathRet = fsbridge::Path(pszHome);\n #ifdef MAC_OSX\n     // Mac\n     return pathRet / \"Library/Application Support/Bitcoin\";\n@@ -605,18 +605,18 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-static fs::path g_blocks_path_cached;\n-static fs::path g_blocks_path_cache_net_specific;\n-static fs::path pathCached;\n-static fs::path pathCachedNetSpecific;\n+static fsbridge::Path g_blocks_path_cached;\n+static fsbridge::Path g_blocks_path_cache_net_specific;\n+static fsbridge::Path pathCached;\n+static fsbridge::Path pathCachedNetSpecific;\n static CCriticalSection csPathCached;\n \n-const fs::path &GetBlocksDir(bool fNetSpecific)\n+const fsbridge::Path &GetBlocksDir(bool fNetSpecific)\n {\n \n     LOCK(csPathCached);\n \n-    fs::path &path = fNetSpecific ? g_blocks_path_cache_net_specific : g_blocks_path_cached;\n+    fsbridge::Path &path = fNetSpecific ? g_blocks_path_cache_net_specific : g_blocks_path_cached;\n \n     // This can be called during exceptions by LogPrintf(), so we cache the\n     // value so we don't have to do memory allocations after that.\n@@ -640,12 +640,12 @@ const fs::path &GetBlocksDir(bool fNetSpecific)\n     return path;\n }\n \n-const fs::path &GetDataDir(bool fNetSpecific)\n+const fsbridge::Path &GetDataDir(bool fNetSpecific)\n {\n \n     LOCK(csPathCached);\n \n-    fs::path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;\n+    fsbridge::Path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;\n \n     // This can be called during exceptions by LogPrintf(), so we cache the\n     // value so we don't have to do memory allocations after that.\n@@ -676,15 +676,15 @@ void ClearDatadirCache()\n {\n     LOCK(csPathCached);\n \n-    pathCached = fs::path();\n-    pathCachedNetSpecific = fs::path();\n-    g_blocks_path_cached = fs::path();\n-    g_blocks_path_cache_net_specific = fs::path();\n+    pathCached = fsbridge::Path();\n+    pathCachedNetSpecific = fsbridge::Path();\n+    g_blocks_path_cached = fsbridge::Path();\n+    g_blocks_path_cache_net_specific = fsbridge::Path();\n }\n \n-fs::path GetConfigFile(const std::string& confPath)\n+fsbridge::Path GetConfigFile(const std::string& confPath)\n {\n-    return AbsPathForConfigVal(fs::path(confPath), false);\n+    return AbsPathForConfigVal(fsbridge::Path(confPath), false);\n }\n \n void ArgsManager::ReadConfigStream(std::istream& stream)\n@@ -742,12 +742,12 @@ std::string ArgsManager::GetChainName() const\n }\n \n #ifndef WIN32\n-fs::path GetPidFile()\n+fsbridge::Path GetPidFile()\n {\n-    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+    return AbsPathForConfigVal(fsbridge::Path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n-void CreatePidFile(const fs::path &path, pid_t pid)\n+void CreatePidFile(const fsbridge::Path &path, pid_t pid)\n {\n     FILE* file = fsbridge::fopen(path, \"w\");\n     if (file)\n@@ -758,7 +758,7 @@ void CreatePidFile(const fs::path &path, pid_t pid)\n }\n #endif\n \n-bool RenameOver(fs::path src, fs::path dest)\n+bool RenameOver(fsbridge::Path src, fsbridge::Path dest)\n {\n #ifdef WIN32\n     return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n@@ -774,7 +774,7 @@ bool RenameOver(fs::path src, fs::path dest)\n  * Specifically handles case where path p exists, but it wasn't possible for the user to\n  * write to the parent directory.\n  */\n-bool TryCreateDirectories(const fs::path& p)\n+bool TryCreateDirectories(const fsbridge::Path& p)\n {\n     try\n     {\n@@ -901,17 +901,17 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n }\n \n #ifdef WIN32\n-fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n+fsbridge::Path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n     char pszPath[MAX_PATH] = \"\";\n \n     if(SHGetSpecialFolderPathA(nullptr, pszPath, nFolder, fCreate))\n     {\n-        return fs::path(pszPath);\n+        return fsbridge::Path(pszPath);\n     }\n \n     LogPrintf(\"SHGetSpecialFolderPathA() failed, could not obtain requested path.\\n\");\n-    return fs::path(\"\");\n+    return fsbridge::Path(\"\");\n }\n #endif\n \n@@ -963,9 +963,9 @@ void SetupEnvironment()\n     // The path locale is lazy initialized and to avoid deinitialization errors\n     // in multithreading environments, it is set explicitly by the main thread.\n     // A dummy locale is used to extract the internal default locale, used by\n-    // fs::path, which is then used to explicitly imbue the path.\n-    std::locale loc = fs::path::imbue(std::locale::classic());\n-    fs::path::imbue(loc);\n+    // fsbridge::Path, which is then used to explicitly imbue the path.\n+    std::locale loc = fsbridge::Path::imbue(std::locale::classic());\n+    fsbridge::Path::imbue(loc);\n }\n \n bool SetupNetworking()\n@@ -1002,7 +1002,7 @@ int64_t GetStartupTime()\n     return nStartupTime;\n }\n \n-fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n+fsbridge::Path AbsPathForConfigVal(const fsbridge::Path& path, bool net_specific)\n {\n     return fs::absolute(path, GetDataDir(net_specific));\n }"
      },
      {
        "sha": "8b79ee68a94cd2bf0d9c8d02167acef05f4af507",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -75,27 +75,27 @@ bool FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n-bool RenameOver(fs::path src, fs::path dest);\n-bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n-bool DirIsWritable(const fs::path& directory);\n+bool RenameOver(fsbridge::Path src, fsbridge::Path dest);\n+bool LockDirectory(const fsbridge::Path& directory, const std::string lockfile_name, bool probe_only=false);\n+bool DirIsWritable(const fsbridge::Path& directory);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks.\n  */\n void ReleaseDirectoryLocks();\n \n-bool TryCreateDirectories(const fs::path& p);\n-fs::path GetDefaultDataDir();\n-const fs::path &GetBlocksDir(bool fNetSpecific = true);\n-const fs::path &GetDataDir(bool fNetSpecific = true);\n+bool TryCreateDirectories(const fsbridge::Path& p);\n+fsbridge::Path GetDefaultDataDir();\n+const fsbridge::Path &GetBlocksDir(bool fNetSpecific = true);\n+const fsbridge::Path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-fs::path GetConfigFile(const std::string& confPath);\n+fsbridge::Path GetConfigFile(const std::string& confPath);\n #ifndef WIN32\n-fs::path GetPidFile();\n-void CreatePidFile(const fs::path &path, pid_t pid);\n+fsbridge::Path GetPidFile();\n+void CreatePidFile(const fsbridge::Path &path, pid_t pid);\n #endif\n #ifdef WIN32\n-fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n+fsbridge::Path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n void runCommand(const std::string& strCommand);\n \n@@ -107,7 +107,7 @@ void runCommand(const std::string& strCommand);\n  * @param net_specific Forwarded to GetDataDir().\n  * @return The normalized path.\n  */\n-fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific = true);\n+fsbridge::Path AbsPathForConfigVal(const fsbridge::Path& path, bool net_specific = true);\n \n inline bool IsSwitchChar(char c)\n {"
      },
      {
        "sha": "900f333d08b3392c5f82625c7e4f862057525f6f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -3701,7 +3701,7 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n {\n     if (pos.IsNull())\n         return nullptr;\n-    fs::path path = GetBlockPosFilename(pos, prefix);\n+    fsbridge::Path path = GetBlockPosFilename(pos, prefix);\n     fs::create_directories(path.parent_path());\n     FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n     if (!file && !fReadOnly)\n@@ -3729,7 +3729,7 @@ static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fsbridge::Path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n {\n     return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }"
      },
      {
        "sha": "703e71140b9f742e7e677ba682e33713e6a32fd5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -260,7 +260,7 @@ bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fsbridge::Path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */"
      },
      {
        "sha": "6d24ceac4d371c1e34a9cbf64c78b688c6c2d6d6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -56,9 +56,9 @@ CCriticalSection cs_db;\n std::map<std::string, BerkeleyEnvironment> g_dbenvs; //!< Map from directory name to open db environment.\n } // namespace\n \n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+BerkeleyEnvironment* GetWalletEnv(const fsbridge::Path& wallet_path, std::string& database_filename)\n {\n-    fs::path env_directory;\n+    fsbridge::Path env_directory;\n     if (fs::is_regular_file(wallet_path)) {\n         // Special case for backwards compatibility: if wallet path points to an\n         // existing file, treat it as the path to a BDB data file in a parent\n@@ -114,7 +114,7 @@ void BerkeleyEnvironment::Reset()\n     fMockDb = false;\n }\n \n-BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.string())\n+BerkeleyEnvironment::BerkeleyEnvironment(const fsbridge::Path& dir_path) : strPath(dir_path.string())\n {\n     Reset();\n }\n@@ -131,16 +131,16 @@ bool BerkeleyEnvironment::Open(bool retry)\n \n     boost::this_thread::interruption_point();\n \n-    fs::path pathIn = strPath;\n+    fsbridge::Path pathIn = strPath;\n     TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n     }\n \n-    fs::path pathLogDir = pathIn / \"database\";\n+    fsbridge::Path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n-    fs::path pathErrorFile = pathIn / \"db.log\";\n+    fsbridge::Path pathErrorFile = pathIn / \"db.log\";\n     LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n@@ -172,7 +172,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n         LogPrintf(\"BerkeleyEnvironment::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n         if (retry) {\n             // try moving the database env out of the way\n-            fs::path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n+            fsbridge::Path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n             try {\n                 fs::rename(pathLogDir, pathDatabaseBak);\n                 LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.string(), pathDatabaseBak.string());\n@@ -239,11 +239,11 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n         return VerifyResult::RECOVER_FAIL;\n \n     // Try to recover:\n-    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n+    bool fRecovered = (*recoverFunc)(fsbridge::Path(strPath) / strFile, out_backup_filename);\n     return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n }\n \n-bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool BerkeleyBatch::Recover(const fsbridge::Path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n     BerkeleyEnvironment* env = GetWalletEnv(file_path, filename);\n@@ -312,11 +312,11 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     return fSuccess;\n }\n \n-bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n+bool BerkeleyBatch::VerifyEnvironment(const fsbridge::Path& file_path, std::string& errorStr)\n {\n     std::string walletFile;\n     BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n-    fs::path walletDir = env->Directory();\n+    fsbridge::Path walletDir = env->Directory();\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n@@ -336,11 +336,11 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fsbridge::Path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n {\n     std::string walletFile;\n     BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n-    fs::path walletDir = env->Directory();\n+    fsbridge::Path walletDir = env->Directory();\n \n     if (fs::exists(walletDir / walletFile))\n     {\n@@ -691,7 +691,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n-                    fs::remove_all(fs::path(strPath) / \"database\");\n+                    fs::remove_all(fsbridge::Path(strPath) / \"database\");\n             }\n         }\n     }\n@@ -762,8 +762,8 @@ bool BerkeleyDatabase::Backup(const std::string& strDest)\n                 env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n-                fs::path pathSrc = GetWalletDir() / strFile;\n-                fs::path pathDest(strDest);\n+                fsbridge::Path pathSrc = GetWalletDir() / strFile;\n+                fsbridge::Path pathDest(strDest);\n                 if (fs::is_directory(pathDest))\n                     pathDest /= strFile;\n "
      },
      {
        "sha": "07ef7eea5b3daae6cec417f4434ccb2959f6f6c1",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -30,7 +30,7 @@ class BerkeleyEnvironment\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n-    // Don't change into fs::path, as that can result in\n+    // Don't change into fsbridge::Path, as that can result in\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n@@ -39,14 +39,14 @@ class BerkeleyEnvironment\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n-    BerkeleyEnvironment(const fs::path& env_directory);\n+    BerkeleyEnvironment(const fsbridge::Path& env_directory);\n     ~BerkeleyEnvironment();\n     void Reset();\n \n     void MakeMock();\n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n-    fs::path Directory() const { return strPath; }\n+    fsbridge::Path Directory() const { return strPath; }\n \n     /**\n      * Verify that database file strFile is OK. If it is not,\n@@ -57,7 +57,7 @@ class BerkeleyEnvironment\n     enum class VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n+    typedef bool (*recoverFunc_type)(const fsbridge::Path& file_path, std::string& out_backup_filename);\n     VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n     /**\n      * Salvage data from a file that Verify says is bad.\n@@ -87,7 +87,7 @@ class BerkeleyEnvironment\n };\n \n /** Get BerkeleyEnvironment and database filename given a wallet path. */\n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n+BerkeleyEnvironment* GetWalletEnv(const fsbridge::Path& wallet_path, std::string& database_filename);\n \n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n@@ -102,7 +102,7 @@ class BerkeleyDatabase\n     }\n \n     /** Create DB handle to real database */\n-    BerkeleyDatabase(const fs::path& wallet_path, bool mock = false) :\n+    BerkeleyDatabase(const fsbridge::Path& wallet_path, bool mock = false) :\n         nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n     {\n         env = GetWalletEnv(wallet_path, strFile);\n@@ -114,7 +114,7 @@ class BerkeleyDatabase\n     }\n \n     /** Return object for accessing database at specified path. */\n-    static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)\n+    static std::unique_ptr<BerkeleyDatabase> Create(const fsbridge::Path& path)\n     {\n         return MakeUnique<BerkeleyDatabase>(path);\n     }\n@@ -183,15 +183,15 @@ class BerkeleyBatch\n \n     void Flush();\n     void Close();\n-    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fsbridge::Path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     static bool PeriodicFlush(BerkeleyDatabase& database);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n+    static bool VerifyEnvironment(const fsbridge::Path& file_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fsbridge::Path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>"
      },
      {
        "sha": "c4ad3aebc2ba31e7729243ff7105df2f32d6956c",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -183,7 +183,7 @@ bool WalletInit::Verify() const\n     }\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n-        fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n+        fsbridge::Path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n         if (!fs::exists(wallet_dir)) {\n             return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n         } else if (!fs::is_directory(wallet_dir)) {\n@@ -198,7 +198,7 @@ bool WalletInit::Verify() const\n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n \n     // Keep track of each wallet absolute path to detect duplicates.\n-    std::set<fs::path> wallet_paths;\n+    std::set<fsbridge::Path> wallet_paths;\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n         // Do some checking on wallet path. It should be either a:\n@@ -207,11 +207,11 @@ bool WalletInit::Verify() const\n         // 2. Path to an existing directory.\n         // 3. Path to a symlink to a directory.\n         // 4. For backwards compatibility, the name of a data file in -walletdir.\n-        fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n+        fsbridge::Path wallet_path = fs::absolute(walletFile, GetWalletDir());\n         fs::file_type path_type = fs::symlink_status(wallet_path).type();\n         if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n               (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-              (path_type == fs::regular_file && fs::path(walletFile).filename() == walletFile))) {\n+              (path_type == fs::regular_file && fsbridge::Path(walletFile).filename() == walletFile))) {\n             return InitError(strprintf(\n                 _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n                   \"database/log.?????????? files can be stored, a location where such a directory could be created, \""
      },
      {
        "sha": "29b1800e22bedf12640ab4d96f62192b32dde970",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -710,7 +710,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    boost::filesystem::path filepath = request.params[0].get_str();\n+    fsbridge::Path filepath = request.params[0].get_str();\n     filepath = boost::filesystem::absolute(filepath);\n \n     /* Prevent arbitrary files from being overwritten. There have been reports"
      },
      {
        "sha": "a5192834db6cc0ab5c8bfe1b79ca239ab57172c4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -3955,7 +3955,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n+CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fsbridge::Path& path)\n {\n     const std::string& walletFile = name;\n "
      },
      {
        "sha": "e28f3bf71a86714d6888ba27f6c96a6bdae99bc0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -1107,7 +1107,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);\n+    static CWallet* CreateWalletFromFile(const std::string& name, const fsbridge::Path& path);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "034428cbdd2a53f12aecc6cfadc3d5dd9d3f8942",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -779,12 +779,12 @@ void MaybeCompactWalletDB()\n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //\n-bool WalletBatch::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n+bool WalletBatch::Recover(const fsbridge::Path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n {\n     return BerkeleyBatch::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n }\n \n-bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n+bool WalletBatch::Recover(const fsbridge::Path& wallet_path, std::string& out_backup_filename)\n {\n     // recover without a key filter callback\n     // results in recovering all record types\n@@ -814,12 +814,12 @@ bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, C\n     return true;\n }\n \n-bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)\n+bool WalletBatch::VerifyEnvironment(const fsbridge::Path& wallet_path, std::string& errorStr)\n {\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fsbridge::Path& wallet_path, std::string& warningStr, std::string& errorStr)\n {\n     return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warningStr, errorStr, WalletBatch::Recover);\n }"
      },
      {
        "sha": "c616a9d0b15efd82dc250c2a00b6379883bda449",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -219,17 +219,17 @@ class WalletBatch\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fsbridge::Path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n     /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n+    static bool Recover(const fsbridge::Path& wallet_path, std::string& out_backup_filename);\n     /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n     static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n+    static bool VerifyEnvironment(const fsbridge::Path& wallet_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fsbridge::Path& wallet_path, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "be671bdcbc949ab2aa66e07bef47bc9f02e22b1a",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <wallet/walletutil.h>\n \n-fs::path GetWalletDir()\n+fsbridge::Path GetWalletDir()\n {\n-    fs::path path;\n+    fsbridge::Path path;\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         path = gArgs.GetArg(\"-walletdir\", \"\");"
      },
      {
        "sha": "1ed7c26d1366f8929b22135a4bfd075ef8ff9a5a",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "patch": "@@ -9,6 +9,6 @@\n #include <util.h>\n \n //! Get the path of the wallet directory.\n-fs::path GetWalletDir();\n+fsbridge::Path GetWalletDir();\n \n #endif // BITCOIN_WALLET_WALLETUTIL_H"
      }
    ]
  },
  {
    "sha": "a492285b496f950798913db635a00a9c90b18936",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDkyMjg1YjQ5NmY5NTA3OTg5MTNkYjYzNWEwMGE5YzkwYjE4OTM2",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:25:42Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:28:36Z"
      },
      "message": "Move fs::path(string) to fsbridge::U8Path(string)",
      "tree": {
        "sha": "d9d3ad6ba06a5ec673db8420f295d4e8fc235d48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9d3ad6ba06a5ec673db8420f295d4e8fc235d48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a492285b496f950798913db635a00a9c90b18936",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a492285b496f950798913db635a00a9c90b18936",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a492285b496f950798913db635a00a9c90b18936",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a492285b496f950798913db635a00a9c90b18936/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d98cc4eaa8b3d8949aa50d8f4506d5f49a1f3eb6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e7875b17f4de1dae08689193b13c77272ef90b0a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a492285b496f950798913db635a00a9c90b18936/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a492285b496f950798913db635a00a9c90b18936/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a492285b496f950798913db635a00a9c90b18936",
        "patch": "@@ -836,7 +836,7 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n void InitLogging()\n {\n     g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    g_logger->m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    g_logger->m_file_path = AbsPathForConfigVal(fsbridge::U8Path(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n \n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n@@ -1668,7 +1668,7 @@ bool AppInitMain()\n \n     std::vector<fsbridge::Path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n-        vImportFiles.push_back(strFile);\n+        vImportFiles.push_back(fsbridge::U8Path(strFile));\n     }\n \n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));"
      },
      {
        "sha": "51b3e5b6c9a6298c4a76bdc8d2f520b31af313d3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a492285b496f950798913db635a00a9c90b18936/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a492285b496f950798913db635a00a9c90b18936/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=a492285b496f950798913db635a00a9c90b18936",
        "patch": "@@ -657,7 +657,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n         } else if (methods.count(\"SAFECOOKIE\")) {\n             // Cookie: hexdump -e '32/1 \"%02x\"\"\\n\"'  ~/.tor/control_auth_cookie\n             LogPrint(BCLog::TOR, \"tor: Using SAFECOOKIE authentication, reading cookie authentication from %s\\n\", cookiefile);\n-            std::pair<bool,std::string> status_cookie = ReadBinaryFile(cookiefile, TOR_COOKIE_SIZE);\n+            std::pair<bool,std::string> status_cookie = ReadBinaryFile(fsbridge::U8Path(cookiefile), TOR_COOKIE_SIZE);\n             if (status_cookie.first && status_cookie.second.size() == TOR_COOKIE_SIZE) {\n                 // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), boost::bind(&TorController::auth_cb, this, _1, _2));\n                 cookie = std::vector<uint8_t>(status_cookie.second.begin(), status_cookie.second.end());"
      }
    ]
  },
  {
    "sha": "d37d4b2835225570cd1855dfc962e35082748afc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzdkNGIyODM1MjI1NTcwY2QxODU1ZGZjOTYyZTM1MDgyNzQ4YWZj",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:48:14Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:48:14Z"
      },
      "message": "Read command line arguments as utf8",
      "tree": {
        "sha": "38bc706882584713ff539bceabad3a095d3854c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38bc706882584713ff539bceabad3a095d3854c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d37d4b2835225570cd1855dfc962e35082748afc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37d4b2835225570cd1855dfc962e35082748afc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d37d4b2835225570cd1855dfc962e35082748afc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37d4b2835225570cd1855dfc962e35082748afc/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a492285b496f950798913db635a00a9c90b18936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a492285b496f950798913db635a00a9c90b18936",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a492285b496f950798913db635a00a9c90b18936"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9293e36e72dcd58d8b09f44641a5ce7bc538fc86",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d37d4b2835225570cd1855dfc962e35082748afc/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d37d4b2835225570cd1855dfc962e35082748afc/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=d37d4b2835225570cd1855dfc962e35082748afc",
        "patch": "@@ -404,7 +404,10 @@ static int CommandLineRPC(int argc, char *argv[])\n             }\n             gArgs.ForceSetArg(\"-rpcpassword\", rpcPass);\n         }\n-        std::vector<std::string> args = std::vector<std::string>(&argv[1], &argv[argc]);\n+        std::vector<std::string> args;\n+        for(char ** i = &argv[1]; i != &argv[argc]; i++) {\n+            args.push_back(NativeToUtf8(*i));\n+        }\n         if (gArgs.GetBoolArg(\"-stdin\", false)) {\n             // Read one arg per line from stdin and append\n             std::string line;"
      },
      {
        "sha": "e84a4df7c629bdcc5e551b36758353c959e544ea",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d37d4b2835225570cd1855dfc962e35082748afc/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d37d4b2835225570cd1855dfc962e35082748afc/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d37d4b2835225570cd1855dfc962e35082748afc",
        "patch": "@@ -418,7 +418,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n     m_override_args.clear();\n \n     for (int i = 1; i < argc; i++) {\n-        std::string key(argv[i]);\n+        std::string key(NativeToUtf8(argv[i]));\n         std::string val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {"
      }
    ]
  },
  {
    "sha": "02fb8835ba9ef8c34594494852b2370a40e4a8b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmZiODgzNWJhOWVmOGMzNDU5NDQ5NDg1MmIyMzcwYTQwZTRhOGIy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T22:57:02Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-05-09T23:10:08Z"
      },
      "message": "scripted-diff: Use `.u8string()` instead of `.string()`\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\.string()/\\.u8string()/g' $(git grep --name-only '\\.string()' -- '*.cpp' '*.h' | grep -v 'fs.h' | grep -v 'fs.cpp')\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "3bbb5f09d89654f8f16833873e12d7534e6a9ede",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bbb5f09d89654f8f16833873e12d7534e6a9ede"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02fb8835ba9ef8c34594494852b2370a40e4a8b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fb8835ba9ef8c34594494852b2370a40e4a8b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02fb8835ba9ef8c34594494852b2370a40e4a8b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fb8835ba9ef8c34594494852b2370a40e4a8b2/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d37d4b2835225570cd1855dfc962e35082748afc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37d4b2835225570cd1855dfc962e35082748afc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d37d4b2835225570cd1855dfc962e35082748afc"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 67,
      "deletions": 67
    },
    "files": [
      {
        "sha": "63fd403c6383fe3bc4d40d19a0240e69e7990468",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -45,12 +45,12 @@ bool SerializeFileDB(const std::string& prefix, const fsbridge::Path& path, cons\n     FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.u8string());\n \n     // Serialize\n     if (!SerializeDB(fileout, data)) return false;\n     if (!FileCommit(fileout.Get()))\n-        return error(\"%s: Failed to flush file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to flush file %s\", __func__, pathTmp.u8string());\n     fileout.fclose();\n \n     // replace existing file, if any, with new file\n@@ -98,7 +98,7 @@ bool DeserializeFileDB(const fsbridge::Path& path, Data& data)\n     FILE *file = fsbridge::fopen(path, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, path.string());\n+        return error(\"%s: Failed to open file %s\", __func__, path.u8string());\n \n     return DeserializeDB(filein, data);\n }"
      },
      {
        "sha": "7d2c2e9856afcc0f5c3f26d48091110cad2cc9b1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -367,7 +367,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n         if (failedToGetAuthCookie) {\n             throw std::runtime_error(strprintf(\n                 _(\"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\"),\n-                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n+                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).u8string().c_str()));\n         } else {\n             throw std::runtime_error(\"Authorization failed: Incorrect rpcuser or rpcpassword\");\n         }"
      },
      {
        "sha": "5cebbd362e2a410548887e0b0c85fb2f87cbd799",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -129,21 +129,21 @@ CDBWrapper::CDBWrapper(const fsbridge::Path& path, size_t nCacheSize, bool fMemo\n         options.env = penv;\n     } else {\n         if (fWipe) {\n-            LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            LogPrintf(\"Wiping LevelDB in %s\\n\", path.u8string());\n+            leveldb::Status result = leveldb::DestroyDB(path.u8string(), options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n-        LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n+        LogPrintf(\"Opening LevelDB in %s\\n\", path.u8string());\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n+    leveldb::Status status = leveldb::DB::Open(options, path.u8string(), &pdb);\n     dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n     if (gArgs.GetBoolArg(\"-forcecompactdb\", false)) {\n-        LogPrintf(\"Starting database compaction of %s\\n\", path.string());\n+        LogPrintf(\"Starting database compaction of %s\\n\", path.u8string());\n         pdb->CompactRange(nullptr, nullptr);\n-        LogPrintf(\"Finished database compaction of %s\\n\", path.string());\n+        LogPrintf(\"Finished database compaction of %s\\n\", path.u8string());\n     }\n \n     // The base-case obfuscation key, which is a noop.\n@@ -160,10 +160,10 @@ CDBWrapper::CDBWrapper(const fsbridge::Path& path, size_t nCacheSize, bool fMemo\n         Write(OBFUSCATE_KEY_KEY, new_key);\n         obfuscate_key = new_key;\n \n-        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.u8string(), HexStr(obfuscate_key));\n     }\n \n-    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.u8string(), HexStr(obfuscate_key));\n }\n \n CDBWrapper::~CDBWrapper()"
      },
      {
        "sha": "55e613963724a75a329440a2a0ec082957fc1cb0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -238,7 +238,7 @@ void Shutdown()\n         if (!est_fileout.IsNull())\n             ::feeEstimator.Write(est_fileout);\n         else\n-            LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n+            LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.u8string());\n         fFeeEstimatesInitialized = false;\n     }\n \n@@ -615,12 +615,12 @@ static void CleanupBlockRevFiles()\n     fsbridge::Path blocksdir = GetBlocksDir();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (fs::is_regular_file(*it) &&\n-            it->path().filename().string().length() == 12 &&\n-            it->path().filename().string().substr(8,4) == \".dat\")\n+            it->path().filename().u8string().length() == 12 &&\n+            it->path().filename().u8string().substr(8,4) == \".dat\")\n         {\n-            if (it->path().filename().string().substr(0,3) == \"blk\")\n-                mapBlockFiles[it->path().filename().string().substr(3,5)] = it->path();\n-            else if (it->path().filename().string().substr(0,3) == \"rev\")\n+            if (it->path().filename().u8string().substr(0,3) == \"blk\")\n+                mapBlockFiles[it->path().filename().u8string().substr(3,5)] = it->path();\n+            else if (it->path().filename().u8string().substr(0,3) == \"rev\")\n                 remove(it->path());\n         }\n     }\n@@ -679,18 +679,18 @@ static void ThreadImport(std::vector<fsbridge::Path> vImportFiles)\n             LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n-            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n+            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.u8string());\n         }\n     }\n \n     // -loadblock=\n     for (const fsbridge::Path& path : vImportFiles) {\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n-            LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n+            LogPrintf(\"Importing blocks file %s...\\n\", path.u8string());\n             LoadExternalBlockFile(chainparams, file);\n         } else {\n-            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.u8string());\n         }\n     }\n \n@@ -1190,10 +1190,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fsbridge::Path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.u8string()));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), _(PACKAGE_NAME)));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.u8string(), _(PACKAGE_NAME)));\n     }\n     return true;\n }\n@@ -1246,15 +1246,15 @@ bool AppInitMain()\n         }\n         if (!g_logger->OpenDebugLog()) {\n             return InitError(strprintf(\"Could not open debug log file %s\",\n-                                       g_logger->m_file_path.string()));\n+                                       g_logger->m_file_path.u8string()));\n         }\n     }\n \n     if (!g_logger->m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n-    LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n-    LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+    LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().u8string());\n+    LogPrintf(\"Using data directory %s\\n\", GetDataDir().u8string());\n+    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).u8string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n@@ -1263,7 +1263,7 @@ bool AppInitMain()\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n                   \"also be data loss if bitcoin is started while in a temporary directory.\\n\",\n-            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n+            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().u8string());\n     }\n \n     InitSignatureCache();"
      },
      {
        "sha": "a85e828e57a8a82c6790cf510d25f99f4be5af95",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -666,7 +666,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             {\n                 WCHAR pwsz[MAX_PATH];\n                 // Ensure that the string is ANSI.\n-                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().string().c_str(), -1, pwsz, MAX_PATH);\n+                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().u8string().c_str(), -1, pwsz, MAX_PATH);\n                 // Save the link by calling IPersistFile::Save.\n                 hres = ppf->Save(pwsz, TRUE);\n                 ppf->Release();"
      },
      {
        "sha": "fcbc69432f896e8ebb32c5d609d1d864fc2ca98a",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -235,7 +235,7 @@ bool Intro::pickDataDirectory(interfaces::Node& node)\n      * (to be consistent with bitcoind behavior)\n      */\n     if(dataDir != getDefaultDataDirectory()) {\n-        node.softSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+        node.softSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).u8string()); // use OS locale for path setting\n     }\n     return true;\n }"
      },
      {
        "sha": "9597125777a0dfb4aed3c83508b5f0de8059756f",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -57,7 +57,7 @@ int main(int argc, char *argv[])\n     ClearDatadirCache();\n     fsbridge::Path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n     fs::create_directories(pathTemp);\n-    gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+    gArgs.ForceSetArg(\"-datadir\", pathTemp.u8string());\n \n     bool fInvalid = false;\n "
      },
      {
        "sha": "592274631c3b3cf8bc7d851b1751fa373c3c3538",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -87,20 +87,20 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      */\n     std::ofstream file;\n     fsbridge::Path filepath_tmp = GetAuthCookieFile(true);\n-    file.open(filepath_tmp.string().c_str());\n+    file.open(filepath_tmp.u8string().c_str());\n     if (!file.is_open()) {\n-        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.string());\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.u8string());\n         return false;\n     }\n     file << cookie;\n     file.close();\n \n     fsbridge::Path filepath = GetAuthCookieFile(false);\n     if (!RenameOver(filepath_tmp, filepath)) {\n-        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.string(), filepath.string());\n+        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.u8string(), filepath.u8string());\n         return false;\n     }\n-    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n+    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.u8string());\n \n     if (cookie_out)\n         *cookie_out = cookie;\n@@ -112,7 +112,7 @@ bool GetAuthCookie(std::string *cookie_out)\n     std::ifstream file;\n     std::string cookie;\n     fsbridge::Path filepath = GetAuthCookieFile();\n-    file.open(filepath.string().c_str());\n+    file.open(filepath.u8string().c_str());\n     if (!file.is_open())\n         return false;\n     std::getline(file, cookie);"
      },
      {
        "sha": "0b53fbea401470f3f1a7d658d5637f46ed4257f2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -67,7 +67,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         ClearDatadirCache();\n         pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));\n         fs::create_directories(pathTemp);\n-        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+        gArgs.ForceSetArg(\"-datadir\", pathTemp.u8string());\n \n         // We have to run a scheduler thread to prevent ActivateBestChain\n         // from blocking due to queue overrun."
      },
      {
        "sha": "0daf3eb7f0d10b4a4ab786620a170233732fed59",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -467,7 +467,7 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n+        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().u8string());\n         private_key = pkf.second;\n     }\n }\n@@ -505,9 +505,9 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().u8string());\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().u8string());\n         }\n         AddLocal(service, LOCAL_MANUAL);\n         // ... onion requested - keep connection open"
      },
      {
        "sha": "4bf730864439042959981c4fcba85868b15037b2",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -152,7 +152,7 @@ bool LockDirectory(const fsbridge::Path& directory, const std::string lockfile_n\n     fsbridge::Path pathLockFile = directory / lockfile_name;\n \n     // If a lock for this directory already exists in the map, don't try to re-lock it\n-    if (dir_locks.count(pathLockFile.string())) {\n+    if (dir_locks.count(pathLockFile.u8string())) {\n         return true;\n     }\n \n@@ -161,16 +161,16 @@ bool LockDirectory(const fsbridge::Path& directory, const std::string lockfile_n\n     if (file) fclose(file);\n \n     try {\n-        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.u8string().c_str());\n         if (!lock->try_lock()) {\n             return false;\n         }\n         if (!probe_only) {\n             // Lock successful and we're not just probing, put it into the map\n-            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n+            dir_locks.emplace(pathLockFile.u8string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n-        return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n+        return error(\"Error while attempting to lock directory %s: %s\", directory.u8string(), e.what());\n     }\n     return true;\n }\n@@ -761,10 +761,10 @@ void CreatePidFile(const fsbridge::Path &path, pid_t pid)\n bool RenameOver(fsbridge::Path src, fsbridge::Path dest)\n {\n #ifdef WIN32\n-    return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n+    return MoveFileExA(src.u8string().c_str(), dest.u8string().c_str(),\n                        MOVEFILE_REPLACE_EXISTING) != 0;\n #else\n-    int rc = std::rename(src.string().c_str(), dest.string().c_str());\n+    int rc = std::rename(src.u8string().c_str(), dest.u8string().c_str());\n     return (rc == 0);\n #endif /* WIN32 */\n }"
      },
      {
        "sha": "d6cffed8267072d7c5d8b0ed14bead08e08e12ae",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -3707,12 +3707,12 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n     if (!file && !fReadOnly)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        LogPrintf(\"Unable to open file %s\\n\", path.u8string());\n         return nullptr;\n     }\n     if (pos.nPos) {\n         if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.u8string());\n             fclose(file);\n             return nullptr;\n         }"
      },
      {
        "sha": "c8426f8e9ba511ad30424888f88e03fca4754ba5",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -64,7 +64,7 @@ BerkeleyEnvironment* GetWalletEnv(const fsbridge::Path& wallet_path, std::string\n         // existing file, treat it as the path to a BDB data file in a parent\n         // directory that also contains BDB log files.\n         env_directory = wallet_path.parent_path();\n-        database_filename = wallet_path.filename().string();\n+        database_filename = wallet_path.filename().u8string();\n     } else {\n         // Normal case: Interpret wallet path as a directory path containing\n         // data and log files.\n@@ -76,7 +76,7 @@ BerkeleyEnvironment* GetWalletEnv(const fsbridge::Path& wallet_path, std::string\n     // emplace function if the key already exists. This is a little inefficient,\n     // but not a big concern since the map will be changed in the future to hold\n     // pointers instead of objects, anyway.\n-    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.u8string()), std::forward_as_tuple(env_directory)).first->second;\n }\n \n //\n@@ -114,7 +114,7 @@ void BerkeleyEnvironment::Reset()\n     fMockDb = false;\n }\n \n-BerkeleyEnvironment::BerkeleyEnvironment(const fsbridge::Path& dir_path) : strPath(dir_path.string())\n+BerkeleyEnvironment::BerkeleyEnvironment(const fsbridge::Path& dir_path) : strPath(dir_path.u8string())\n {\n     Reset();\n }\n@@ -141,13 +141,13 @@ bool BerkeleyEnvironment::Open(bool retry)\n     fsbridge::Path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n     fsbridge::Path pathErrorFile = pathIn / \"db.log\";\n-    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.u8string(), pathErrorFile.u8string());\n \n     unsigned int nEnvFlags = 0;\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_lg_dir(pathLogDir.u8string().c_str());\n     dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n     dbenv->set_lg_bsize(0x10000);\n     dbenv->set_lg_max(1048576);\n@@ -175,7 +175,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n             fsbridge::Path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n             try {\n                 fs::rename(pathLogDir, pathDatabaseBak);\n-                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.string(), pathDatabaseBak.string());\n+                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.u8string(), pathDatabaseBak.u8string());\n             } catch (const fs::filesystem_error&) {\n                 // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n@@ -324,7 +324,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fsbridge::Path& file_path, std::stri\n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n-        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.string());\n+        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.u8string());\n         return false;\n     }\n \n@@ -769,15 +769,15 @@ bool BerkeleyDatabase::Backup(const std::string& strDest)\n \n                 try {\n                     if (fs::equivalent(pathSrc, pathDest)) {\n-                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.u8string());\n                         return false;\n                     }\n \n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n-                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n+                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.u8string());\n                     return true;\n                 } catch (const fs::filesystem_error& e) {\n-                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.string(), e.what());\n+                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.u8string(), e.what());\n                     return false;\n                 }\n             }"
      },
      {
        "sha": "e8d1bf8078f22a5a08d230bd344ce03148aa5cac",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -185,15 +185,15 @@ bool WalletInit::Verify() const\n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         fsbridge::Path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n         if (!fs::exists(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.u8string()));\n         } else if (!fs::is_directory(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.u8string()));\n         } else if (!wallet_dir.is_absolute()) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.u8string()));\n         }\n     }\n \n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().u8string());\n \n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n "
      },
      {
        "sha": "47bf2bea81cccf69612c8e19ba4e78a6d4029504",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -719,11 +719,11 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n      * It may also avoid other security issues.\n      */\n     if (boost::filesystem::exists(filepath)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.u8string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n     }\n \n     std::ofstream file;\n-    file.open(filepath.string().c_str());\n+    file.open(filepath.u8string().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n@@ -805,7 +805,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.pushKV(\"filename\", filepath.string());\n+    reply.pushKV(\"filename\", filepath.u8string());\n \n     return reply;\n }"
      },
      {
        "sha": "1d24b7e459d53d81bc99fb32bc56ddbdb5f12fb1",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fb8835ba9ef8c34594494852b2370a40e4a8b2/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=02fb8835ba9ef8c34594494852b2370a40e4a8b2",
        "patch": "@@ -139,7 +139,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         JSONRPCRequest request;\n         request.params.setArray();\n-        request.params.push_back((pathTemp / \"wallet.backup\").string());\n+        request.params.push_back((pathTemp / \"wallet.backup\").u8string());\n         AddWallet(&wallet);\n         ::dumpwallet(request);\n         RemoveWallet(&wallet);\n@@ -152,7 +152,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         JSONRPCRequest request;\n         request.params.setArray();\n-        request.params.push_back((pathTemp / \"wallet.backup\").string());\n+        request.params.push_back((pathTemp / \"wallet.backup\").u8string());\n         AddWallet(&wallet);\n         ::importwallet(request);\n         RemoveWallet(&wallet);"
      }
    ]
  }
]