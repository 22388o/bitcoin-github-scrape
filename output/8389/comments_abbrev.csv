luke-jr,2016-07-21T19:23:22Z,Will this destroy the old HD seed? Seems like it'd be valuable to keep it around _somewhere_...\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234356778,234356778,
MarcoFalke,2016-07-21T19:24:59Z,"@jonasschnelli Could you open this against master, please? (The backport can be done after merge and discussion/nits etc.)\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234357181,234357181,
jonasschnelli,2016-07-21T19:26:26Z,@luke-jr The old HD seed is still available over dumpwallet. You can get the CKeyID from the used masterkey when calling `validateaddress`.\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234357548,234357548,
jonasschnelli,2016-07-21T19:41:32Z,Fixed the nits.\nSorry for opening this against 0.13 in the first place.\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234361534,234361534,
MarcoFalke,2016-07-21T19:59:44Z,"So this makes it impossible to encrypt a seed which is already in use and is planned to be used in the future, but I guess for 0.13 this is fair enough.\n\nConcept ACK\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234366153,234366153,
pstratem,2016-07-21T21:35:45Z,@jonasschnelli Does BDB guarantee the order in which keys are iterated? If not then this isn't guaranteed to work.\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234391499,234391499,
pstratem,2016-07-21T22:32:56Z,@jonasschnelli Indeed you're going to need to use the key metadata timestamp to select which hdchain to use.\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234404295,234404295,
dooglus,2016-07-22T02:24:58Z,"@pstratem It reads to me as if the old `hdchain` key is overwritten by the new one:\n\n```\nbool CWalletDB::WriteHDChain(const CHDChain& chain)\n{\n    nWalletDBUpdated++;\n    return Write(std::string(""hdchain""), chain);\n}\n```\n\nThis WriteHDChain() function is used each time a new address is generated:\n\n```\n    // update the chain model in the database\n    if (!CWalletDB(strWalletFile).Wri",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234438453,234438453,
pstratem,2016-07-22T02:40:18Z,"@dooglus indeed you're right... I'm not sure that is any better\n\ncertainly the old hd seed needs to be saved, possibly just with a prefix to make it not conflict or be used.\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234440209,234440209,
jonasschnelli,2016-07-22T08:26:48Z,"@pstratem: CWalletDB and BDB is a key value storage as far as I know. Writing the same key at later stage should replace the current value. It may be possible to have the old K/V still stored in the database, though, CWalletDB/BDB needs to make sure the later write operation will result in the laster read/mem-map operation during load wallet.\n\nBut I agree we need to keep track of the older/repla",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234484456,234484456,
jonasschnelli,2016-07-22T09:33:32Z,"Pushed a commit that...\n1) ...factors out the creation of a new HD Master key (will be called now during init creation of the wallet as well as during encryption of the wallet)\n2) ...stores a `CKeyMetadata` record together with a HD master key where we set a `hdkeypath=""m""` for later identifying this key as hd master key\n\nhttps://github.com/bitcoin/bitcoin/pull/8206/files would make use of thi",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234499343,234499343,
jonasschnelli,2016-07-22T18:45:16Z,Fixed @instagibbs nits.\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234624346,234624346,
pstratem,2016-07-23T03:19:35Z,@jonasschnelli needs to be one commit\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234696080,234696080,
laanwj,2016-07-25T11:57:21Z,Is this only aimed at 0.13 on purpose?\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234933624,234933624,
jonasschnelli,2016-07-25T13:19:24Z,"No. I should have opened this PR against master. I'll open a PR against master as soon as this one is ""final"" (maybe it cleanly applies to master).\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-234950494,234950494,
laanwj,2016-07-27T13:25:07Z,"~~Tested ACK 77c912d~~\nSorry, wrong issue - will test this one later\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-235583575,235583575,
instagibbs,2016-07-27T13:28:29Z,utACK https://github.com/bitcoin/bitcoin/commit/77c912d21c8cd153f4503c65225a5a46990cc85a\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-235584574,235584574,
jonasschnelli,2016-07-27T14:03:19Z,Rebased (against 0.13).\n,https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-235594731,235594731,
laanwj,2016-07-28T10:05:16Z,"code-review ACK de45c06, going to test\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-235853800,235853800,
laanwj,2016-07-28T10:35:40Z,"I did this:\n\n``` bash\n$ rm ~/.bitcoin/regtest/wallet.dat\n$ src/bitcoind -regtest -rpcport=1234 -daemon -usehd=1\nBitcoin server starting\n$ src/bitcoin-cli  -regtest -rpcport=1234 dumpwallet ""/tmp/dump_pre""\n$ src/bitcoin-cli  -regtest -rpcport=1234 encryptwallet ""pass""\nwallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to m",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-235859975,235859975,
MarcoFalke,2016-07-31T13:53:34Z,"Removed ""needs backport""\n",https://github.com/bitcoin/bitcoin/pull/8389#issuecomment-236431258,236431258,
luke-jr,2016-07-21T19:22:31Z,Maybe the code should just check if HD is being used?\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71770084,71770084,src/wallet/rpcwallet.cpp
luke-jr,2016-07-21T19:22:55Z,??????????\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71770160,71770160,src/wallet/wallet.cpp
jonasschnelli,2016-07-21T19:23:12Z,I have though about that but I think it's not worth adding another check here.\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71770207,71770207,src/wallet/rpcwallet.cpp
jonasschnelli,2016-07-21T19:25:14Z,"It will report that the encryption did fail, restarting bitcoin-core will result in using the old seed with a valid wallet. Not sure if this is ideal.\n",https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71770564,71770564,src/wallet/wallet.cpp
MarcoFalke,2016-07-21T19:27:06Z,Nit: please_use_lowercase_and_underscore\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71770828,71770828,qa/rpc-tests/keypool.py
jonasschnelli,2016-07-21T19:32:18Z,Arg. No. This was for testing. Will remove it.\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71771625,71771625,src/wallet/wallet.cpp
dooglus,2016-07-21T21:03:20Z,SetHDMasterKey() can only return true. When it fails it throws an exception. Do we need to catch that exception?\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71786662,71786662,src/wallet/wallet.cpp
MarcoFalke,2016-07-22T07:43:56Z,"Agree that it is confusing to have `bool SomeFunction()`, where the return value indicates if something bad happens but at the same time this is unused and exceptions are thrown. This should be made consistent.\n",https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71838724,71838724,src/wallet/wallet.cpp
jonasschnelli,2016-07-22T08:24:14Z,"I think this solution is fine for the moment. The return value of `SetHDMasterKey()` is for future extensions and I think its useful even if its not possible to get a `false` returned with the current implementation.\n\nThe exception will already be caught though the RPC/Server logic (`EncryptWallet()` will only be called in the RPC context where we ""handle"" exceptions).\n",https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71843455,71843455,src/wallet/wallet.cpp
instagibbs,2016-07-22T17:45:28Z,"nit: argument is never used anywhere, but I could see this being useful in future\n",https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71917366,71917366,src/wallet/wallet.h
instagibbs,2016-07-22T17:50:25Z,refers*\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71918092,71918092,src/wallet/wallet.cpp
instagibbs,2016-07-22T18:02:15Z,"I think this is ok, but someone more knowledgeable should make sure that returning now before re-locking doesn't have a negative side-effect vs previous behavior.\n",https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71919917,71919917,src/wallet/wallet.cpp
jonasschnelli,2016-07-22T18:44:59Z,I think this error detection case is extremely unlikely and probably on the same level then an exception during `NewKeyPool()`.\nI don't see a better way of handling this case.\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r71926740,71926740,src/wallet/wallet.cpp
laanwj,2016-07-26T09:55:10Z,"I don't think that's worth it either, just for the message\n",https://github.com/bitcoin/bitcoin/pull/8389#discussion_r72219875,72219875,src/wallet/rpcwallet.cpp
dooglus,2016-07-31T14:06:37Z,Unused variable.\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r72904738,72904738,src/wallet/wallet.cpp
MarcoFalke,2016-07-31T14:15:11Z,Nit: Wrong name\n,https://github.com/bitcoin/bitcoin/pull/8389#discussion_r72904858,72904858,src/wallet/wallet.cpp
