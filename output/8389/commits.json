[
  {
    "sha": "f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTQyYzExYWM2MzRkZjQ4N2NjNGJjNjVhNWYxYzlhM2UzNTYzZGQ5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-21T19:19:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-27T13:56:57Z"
      },
      "message": "[0.13] Create a new HD seed after encrypting the wallet",
      "tree": {
        "sha": "40561d6272632e4b8ff22583c48cfe5b2bece953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40561d6272632e4b8ff22583c48cfe5b2bece953"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXmL2pAAoJECnUvLZBb1PsSDgQAIg4gTQqNbSuAazigIsI2ps+\nJgqMCVYXExzpSZc3Vrd/718BQMWyh7NfOrOYXkDxyrzc2bOzGxKYT7GrkhYkklFc\nS9bc03UoMlyp2fvEbCjf2yjrdDrP0UsippxTXJvmVsW934QQ20Ly9dbV+r8U1Sg2\n8LmqJpxKdbex+IQeTpjlU8/hGcfeUAAKUK+T04XD8EBCYTW7aiV83kAQB7IfAQtd\nb5Lp1WOrUF3ZL4o2bBWsoO3FxP7mOqsG6C6sa271SALO1tidSrCXCzWZ3CVSFLdk\nkhsF/p+kFNS33wrvGOKWIkC/9HGxb1F680qcMtdKURMcbroFG0VdxzOiGjWBoF2t\nY56+qm96h+bQqcXC+n+ax4P0oo1mi7c42IAwKRZGCH1MeK44LYt+9o86CckI6miJ\naF4suxyX5i2RkdHI1v1OmedZNA1JtWHEnRlbx5N2OIKGxevaia1p5WL3hrpnmRHc\n3T4nRhXNc/eoi+M+lptSAMg1J5+GebLurZe6lDjIs1k19ESyua2UVYl1DXUT6nvF\nWT83JMrItVXvvO0JFBp/aEwT6M7YYIl+Wz+RTIs/v1IpiGCyeXdJbd47wG37JRS1\nITybF83cvE+0KDY7ikt3rRiJW8GzfaEHcVwnBlohnFFzRPjhdLJyAAH9ZMvphsgl\ni427Yg6sFPTFzwiXNkqg\n=VH6/\n-----END PGP SIGNATURE-----",
        "payload": "tree 40561d6272632e4b8ff22583c48cfe5b2bece953\nparent 18b8ee1cd1b2c95faac53e49b9023200679f2bb1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469128742 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469627817 +0200\n\n[0.13] Create a new HD seed after encrypting the wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18b8ee1cd1b2c95faac53e49b9023200679f2bb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18b8ee1cd1b2c95faac53e49b9023200679f2bb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18b8ee1cd1b2c95faac53e49b9023200679f2bb1"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ad11fafd326055562080dc67e6137d9cc008e2c0",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
        "patch": "@@ -135,6 +135,8 @@ Existing wallets will still use traditional key generation.\n Backups of HD wallets, regardless of when they have been created, can\n therefore be used to re-generate all possible private keys, even the\n ones which haven't already been generated during the time of the backup.\n+**Attention:** Encrypting the wallet will create a new seed which requires\n+a new backup!\n \n HD key generation for new wallets can be disabled by `-usehd=0`. Keep in\n mind that this flag only has affect on newly created wallets."
      },
      {
        "sha": "735b91ee9f0f9a340717a323cf89ef24577dbf38",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
        "patch": "@@ -12,13 +12,23 @@ class KeyPoolTest(BitcoinTestFramework):\n \n     def run_test(self):\n         nodes = self.nodes\n+        addr_before_encrypting = nodes[0].getnewaddress()\n+        addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n+        wallet_info_old = nodes[0].getwalletinfo()\n+        assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['masterkeyid'])\n+        \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n         # Restart node 0\n         nodes[0] = start_node(0, self.options.tmpdir)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n+        addr_data = nodes[0].validateaddress(addr)\n+        wallet_info = nodes[0].getwalletinfo()\n+        assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['masterkeyid'])\n+        assert(addr_data['hdmasterkeyid'] == wallet_info['masterkeyid'])\n+        \n         try:\n             addr = nodes[0].getnewaddress()\n             raise AssertionError('Keypool should be exhausted after one address')"
      },
      {
        "sha": "a90807e5141b7ad87c3c399972bb21071237da19",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
        "patch": "@@ -2081,7 +2081,7 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n     // slack space in .dat files; that is bad if the old data is\n     // unencrypted private keys. So:\n     StartShutdown();\n-    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.\";\n+    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n UniValue lockunspent(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "a1d9c4a598a8a7a22514d27e3d661da4fb213387",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
        "patch": "@@ -626,6 +626,15 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         Lock();\n         Unlock(strWalletPassphrase);\n+\n+        // if we are using HD, replace the HD master key with a new one\n+        if (!hdChain.masterKeyID.IsNull()) {\n+            CKey key;\n+            key.MakeNewKey(true);\n+            if (!SetHDMasterKey(key))\n+                return false;\n+        }\n+\n         NewKeyPool();\n         Lock();\n "
      }
    ]
  },
  {
    "sha": "de45c065f0648c4c41b57cb492420ceeed29dd11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTQ1YzA2NWYwNjQ4YzRjNDFiNTdjYjQ5MjQyMGNlZWVkMjlkZDEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-22T09:03:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-27T14:02:41Z"
      },
      "message": "[Wallet] Add CKeyMetadata record for HDMasterKey(s), factor out HD key generation",
      "tree": {
        "sha": "ce1f43fe8bba2d118ea3b3ac00b69bb5dadcf58b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce1f43fe8bba2d118ea3b3ac00b69bb5dadcf58b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de45c065f0648c4c41b57cb492420ceeed29dd11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXmL8LAAoJECnUvLZBb1Ps2fQP/30nQF3L0MbRc0Yd8BNsU3mK\n56jU16/t9OIVyrvrYnVmGkrq/tLVypclFOfHB6JZDFfTB9tXvcIGMLpOPL/3kCAo\nSnG8iu5RHeZwKIGmPsYlpsfAVo6Nw8mydZd/HsQGGOg2sGcm61cfBxhRR8Wt91Xa\nnrrvhiC135qSNByzPxvXUkmxhzPtSc4q3389f37G6u0H13Jzu4RzD7baL2pJtlfi\n/jRpDz/+PAXTCoxmWJxDeUtKsHLUqDr78PKVm7eFpMD9VvfW+kWoDU4POvnknuhk\neNR3OrXjuOAjNdemeR+/WN+AoMyGg60HR38t4OCpOkLYksA8m7SEAMg0HO6QcvN9\nVVA0isFPpsb4IyaAQ8dz3fK0ZJ4tCPVkYO6RwxjoDPYlpznGtucoZIhVIo+uMXD+\nm0Jtaf4pYzDF5sLrMgXapYqgMwEk4zs4RDr5Kqv8AGLHnacdSk4/7PnAvwWqdoYv\ni8ciGLS/4b1iK5WXfX6NG2DedyCnFjiVUKuT+oR0BGQD57RnzBd6J06qj0pJCCXy\nFLyYb802a/a0uJznSDprYAPwHVIKtYxUosw7Fymq0MsueDajxDTGBcediM3Vaxof\n9+ZtBOvvq9XVltGHr/X0+6IKfbI09eqC46kE/XHpxZ8UTnP8+GF87R19heREjgdQ\nyO2FNefMRPehWdzQae/X\n=/xvv\n-----END PGP SIGNATURE-----",
        "payload": "tree ce1f43fe8bba2d118ea3b3ac00b69bb5dadcf58b\nparent f142c11ac634df487cc4bc65a5f1c9a3e3563dd9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469178210 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469628161 +0200\n\n[Wallet] Add CKeyMetadata record for HDMasterKey(s), factor out HD key generation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de45c065f0648c4c41b57cb492420ceeed29dd11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de45c065f0648c4c41b57cb492420ceeed29dd11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de45c065f0648c4c41b57cb492420ceeed29dd11/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f142c11ac634df487cc4bc65a5f1c9a3e3563dd9"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 43,
      "deletions": 17
    },
    "files": [
      {
        "sha": "fa3947656809c26466fe065f553842317cdecd1c",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de45c065f0648c4c41b57cb492420ceeed29dd11/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de45c065f0648c4c41b57cb492420ceeed29dd11/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=de45c065f0648c4c41b57cb492420ceeed29dd11",
        "patch": "@@ -15,7 +15,7 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['masterkeyid'])\n+        assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n@@ -26,8 +26,8 @@ def run_test(self):\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['masterkeyid'])\n-        assert(addr_data['hdmasterkeyid'] == wallet_info['masterkeyid'])\n+        assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n+        assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n         \n         try:\n             addr = nodes[0].getnewaddress()"
      },
      {
        "sha": "e5ee5063a5d31f39f1095f6595e0acfe7c78240d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 13,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de45c065f0648c4c41b57cb492420ceeed29dd11/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de45c065f0648c4c41b57cb492420ceeed29dd11/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=de45c065f0648c4c41b57cb492420ceeed29dd11",
        "patch": "@@ -627,11 +627,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD master key with a new one\n+        // if we are using HD, replace the HD master key (seed) with a new one\n         if (!hdChain.masterKeyID.IsNull()) {\n             CKey key;\n-            key.MakeNewKey(true);\n-            if (!SetHDMasterKey(key))\n+            CPubKey masterPubKey = GenerateNewHDMasterKey();\n+            if (!SetHDMasterKey(masterPubKey))\n                 return false;\n         }\n \n@@ -1175,20 +1175,43 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n-bool CWallet::SetHDMasterKey(const CKey& key)\n+CPubKey CWallet::GenerateNewHDMasterKey()\n+{\n+    CKey key;\n+    key.MakeNewKey(true);\n+\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // calculate the pubkey\n+    CPubKey pubkey = key.GetPubKey();\n+    assert(key.VerifyPubKey(pubkey));\n+\n+    // set the hd keypath to \"m\" -> Master, refers the masterkeyid to itself\n+    metadata.hdKeypath     = \"m\";\n+    metadata.hdMasterKeyID = pubkey.GetID();\n+\n+    {\n+        LOCK(cs_wallet);\n+\n+        // mem store the metadata\n+        mapKeyMetadata[pubkey.GetID()] = metadata;\n+\n+        // write the key&metadata to the database\n+        if (!AddKeyPubKey(key, pubkey))\n+            throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n+    }\n+\n+    return pubkey;\n+}\n+\n+bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n {\n     LOCK(cs_wallet);\n \n     // ensure this wallet.dat can only be opened by clients supporting HD\n     SetMinVersion(FEATURE_HD);\n \n-    // store the key as normal \"key\"/\"ckey\" object\n-    // in the database\n-    // key metadata is not required\n-    CPubKey pubkey = key.GetPubKey();\n-    if (!AddKeyPubKey(key, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n-\n     // store the keyid (hash160) together with\n     // the child index counter in the database\n     // as a hdchain object\n@@ -3308,8 +3331,8 @@ bool CWallet::InitLoadWallet()\n         if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && walletInstance->hdChain.masterKeyID.IsNull()) {\n             // generate a new master key\n             CKey key;\n-            key.MakeNewKey(true);\n-            if (!walletInstance->SetHDMasterKey(key))\n+            CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n+            if (!walletInstance->SetHDMasterKey(masterPubKey))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n         }\n         CPubKey newDefaultKey;"
      },
      {
        "sha": "0c95fdf4b04d86b453cc6c1777ba7217dc14f725",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de45c065f0648c4c41b57cb492420ceeed29dd11/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de45c065f0648c4c41b57cb492420ceeed29dd11/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=de45c065f0648c4c41b57cb492420ceeed29dd11",
        "patch": "@@ -901,8 +901,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool SetHDChain(const CHDChain& chain, bool memonly);\n     const CHDChain& GetHDChain() { return hdChain; }\n \n+    /* Generates a new HD master key (will not be activated) */\n+    CPubKey GenerateNewHDMasterKey();\n+    \n     /* Set the current HD master key (will reset the chain child index counters) */\n-    bool SetHDMasterKey(const CKey& key);\n+    bool SetHDMasterKey(const CPubKey& key);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  }
]