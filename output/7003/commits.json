[
  {
    "sha": "b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGMwNmVmNDA5NzkyZGQ5YTZkMTRkNDZiNTA3ODdmYTdhNmZiMzNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-13T10:49:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-13T11:02:39Z"
      },
      "message": "doc: Add non-style-related development guidelines\n\nI've collected these over time, mostly adding notes after\ntroubleshooting obscure bugs. As I hope to get the community more\ninvolved in the whole process, I think it is useful to add to the\ndeveloper-notes.",
      "tree": {
        "sha": "99dbde4d8604a98c4893b6036628af05af6e099c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99dbde4d8604a98c4893b6036628af05af6e099c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ac70609345a249a74fad61b70f93e8a19245011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac70609345a249a74fad61b70f93e8a19245011",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ac70609345a249a74fad61b70f93e8a19245011"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 169,
      "deletions": 0
    },
    "files": [
      {
        "sha": "01eea931ad945781b8a10e36e82d9cde66ad55eb",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c06ef409792dd9a6d14d46b50787fa7a6fb33d/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=b8c06ef409792dd9a6d14d46b50787fa7a6fb33d",
        "patch": "@@ -204,3 +204,172 @@ If a set of tools is used by the build system or scripts the repository (for\n example, lcov) it is perfectly acceptable to add its files to `.gitignore`\n and commit them.\n \n+Development guidelines\n+============================\n+\n+A few non-style-related recommendations for developers, as well as points to\n+pay attention to for reviewers of Bitcoin Core code.\n+\n+General Bitcoin Core\n+----------------------\n+\n+- New features should be exposed on RPC first, then can be made available in the GUI\n+\n+  - *Rationale*: RPC allows for better automatic testing. The test suite for\n+    the GUI is very limited\n+\n+- Make sure pulls pass Travis CI before merging\n+\n+  - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n+     on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n+     confusion and mayhem\n+ \n+  - *Explanation*: If the test suite is to be updated for a change, this has to\n+    be done first \n+\n+Wallet\n+-------\n+\n+- Make sure that that no crashes happen with run-time option `-disablewallet`.\n+\n+  - *Rationale*: In RPC code that conditionally use the wallet (such as\n+    `validateaddress`) it is easy to forget that global pointer `pwalletMain`\n+    can be NULL. See `qa/rpc-tests/disablewallet.py` for functional tests\n+    exercising the API with `-disablewallet`\n+\n+- Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set\n+\n+  - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB\n+\n+General C++\n+-------------\n+\n+- Assertions should not have side-effects\n+\n+  - *Rationale*: Even though the source code is set to to refuse to compile\n+    with assertions disabled, having side-effects in assertions is unexpected and\n+    makes the code harder to understand\n+\n+- If you use the .h, you must link the .cpp\n+\n+  - *Rationale*: Include files are the interface for the implementation file. Including one but\n+      not linking the other is confusing. Please avoid that. Moving functions from\n+      the `.h` to the `.cpp` should not result in build errors\n+\n+- Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n+  `scoped_pointer` for allocations in a function.\n+\n+  - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n+\n+C++ data structures\n+--------------------\n+\n+- Never use the std::map [] syntax when reading from a map, but instead use .find()\n+\n+  - *Rationale*: [] does an insert (of the default element) if the item doesn't\n+    exist in the map yet. This has resulted in memory leaks in the past, as well as\n+    race conditions (expecting read-read behavior). Using [] is fine for *writing* to a map\n+\n+- Do not compare an iterator from one data structure with an iterator of\n+  another data structure (even if of the same type)\n+\n+  - *Rationale*: Behavior is undefined. In C++ parlor this means \"may reformat\n+    the universe\", in practice this has resulted in at least one hard-to-debug crash bug\n+\n+- Watch out for vector out-of-bounds exceptions. `&vch[0]` is illegal for an\n+  empty vector, `&vch[vch.size()]` is always illegal. Use `begin_ptr(vch)` and\n+  `end_ptr(vch)` to get the begin and end pointer instead (defined in\n+  `serialize.h`)\n+\n+- Vector bounds checking is only enabled in debug mode. Do not rely on it\n+\n+- Make sure that constructors initialize all fields. If this is skipped for a\n+  good reason (i.e., optimization on the critical path), add an explicit\n+  comment about this\n+\n+  - *Rationale*: Ensure determinism by avoiding accidental use of uninitialized\n+    values. Also, static analyzers balk about this.\n+\n+- Use explicitly signed or unsigned `char`s, or even better `uint8_t` and\n+  `int8_t`. Do not use bare `char` unless it is to pass to a third-party API.\n+  This type can be signed or unsigned depending on the architecture, which can\n+  lead to interoperability problems or dangerous conditions such as\n+  out-of-bounds array accesses\n+\n+- Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior\n+\n+  - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n+  that are not language lawyers\n+\n+Strings and formatting\n+------------------------\n+\n+- Be careful of LogPrint versus LogPrintf. LogPrint takes a 'category' argument, LogPrintf does not.\n+\n+  - *Rationale*: Confusion of these can result in runtime exceptions due to\n+    formatting mismatch, and it is easy to get wrong because of subtly similar naming\n+\n+- Use std::string, avoid C string manipulation functions\n+\n+  - *Rationale*: C++ string handling is marginally safer, less scope for\n+    buffer overflows and surprises with \\0 characters. Also some C string manipulations\n+    tend to act differently depending on platform, or even the user locale\n+\n+- Use ParseInt32, ParseInt64, ParseDouble from `utilstrencodings.h` for number parsing\n+\n+  - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n+\n+- For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers\n+\n+  - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion\n+\n+Threads and synchronization\n+----------------------------\n+\n+- Build and run tests with `-DDEBUG_LOCKORDER` to verify that no potential\n+  deadlocks are introduced. As of 0.12, this is defined by default when\n+  configuring with `--enable-debug`\n+\n+- When using `LOCK`/`TRY_LOCK` be aware that the lock exists in the context of\n+  the current scope, so surround the statement and the code that needs the lock\n+  with braces\n+\n+  OK:\n+\n+```c++\n+{\n+    TRY_LOCK(cs_vNodes, lockNodes);\n+    ...\n+}\n+```\n+\n+  Wrong:\n+\n+```c++\n+TRY_LOCK(cs_vNodes, lockNodes);\n+{\n+    ...\n+}\n+```\n+\n+Source code organization\n+--------------------------\n+\n+- Implementation code should go into the `.cpp` file and not the `.h`, unless necessary due to template usage or\n+  when performance due to inlining is critical\n+\n+  - *Rationale*: Shorter and simpler header files are easier to read, and reduce compile time\n+\n+- Don't import anything into the global namespace (`using namespace ...`). Use\n+  fully specified types such as `std::string`.\n+\n+  - *Rationale*: Avoids symbol conflicts\n+\n+GUI\n+-----\n+\n+- Do not display or manipulate dialogs in model code (classes `*Model`)\n+\n+  - *Rationale*: Model classes pass through events and data from the core, they\n+    should not interact with the user. That's where View classes come in. The converse also\n+    holds: try to not directly access core data structures from Views."
      }
    ]
  }
]