[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487238866",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#issuecomment-487238866",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15869",
    "id": 487238866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzIzODg2Ng==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-27T00:33:39Z",
    "updated_at": "2019-04-27T00:33:39Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Going to go line-by-line in the next few days.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487238866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487474625",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#issuecomment-487474625",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15869",
    "id": 487474625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzQ3NDYyNQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-29T07:21:05Z",
    "updated_at": "2019-04-29T07:21:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for doing this.\r\nutACK 151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2.\r\nI haven't verified the sha256 check hash.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487474625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487475593",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#issuecomment-487475593",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15869",
    "id": 487475593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzQ3NTU5Mw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-29T07:25:12Z",
    "updated_at": "2019-04-29T07:25:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nVery nice! Regression testing is our best friend!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487475593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488016045",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#issuecomment-488016045",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15869",
    "id": 488016045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODAxNjA0NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-30T16:14:12Z",
    "updated_at": "2019-04-30T16:14:12Z",
    "author_association": "MEMBER",
    "body": "Going to merge this, I think our style-nits can be fixed up later or not at all",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488016045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279431119",
    "pull_request_review_id": 231764897,
    "id": 279431119,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTQzMTExOQ==",
    "diff_hunk": "@@ -575,6 +578,232 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }\n \n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentially.\n+//\n+// The test covers:\n+//\n+// - Combining different setting actions. Possible actions are: configuring a\n+//   setting, negating a setting (adding \"-no\" prefix), and configuring/negating\n+//   settings in a network section (adding \"main.\" or \"test.\" prefixes).\n+//\n+// - Combining settings from command line arguments and a config file.\n+//\n+// - Combining SoftSet and ForceSet calls.\n+//\n+// - Testing \"main\" and \"test\" network values to make sure settings from network\n+//   sections are applied and to check for mainnet-specific behaviors like\n+//   inheriting settings from the default section.\n+//\n+// - Testing network-specific settings like \"-wallet\", that may be ignored\n+//   outside a network section, and non-network specific settings like \"-server\"\n+//   that aren't sensitive to the network.\n+//\n+struct SettingsMergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { SET = 0, NEGATE, SECTION_SET, SECTION_NEGATE, END };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ForEachActionList([&](const ActionList& arg_actions) {\n+            ForEachActionList([&](const ActionList& conf_actions) {\n+                for (bool soft_set : {false, true}) {\n+                    for (bool force_set : {false, true}) {\n+                        for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                            for (const std::string& network : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                                for (bool net_specific : {false, true}) {\n+                                    fn(arg_actions, conf_actions, soft_set, force_set, section, network, net_specific);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+        });\n+    }\n+\n+    //! Enumerate interesting combinations of actions.\n+    template <typename Fn>\n+    void ForEachActionList(Fn&& fn)\n+    {\n+        ActionList actions = {SET};",
    "path": "src/test/util_tests.cpp",
    "position": 69,
    "original_position": 69,
    "commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "original_commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd prefer if this didn't set the first element to `SET` and the others to `0`. Could do the following and add a comment that 0==SET? Also, on first sight this might look a bit like the list only has one element.\r\n\r\n```suggestion\r\n        ActionList actions = {};\r\n```",
    "created_at": "2019-04-29T16:06:38Z",
    "updated_at": "2019-04-29T16:39:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279431119",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279431119"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279431119"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279431119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 636,
    "original_line": 636,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279551834",
    "pull_request_review_id": 231918152,
    "id": 279551834,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTU1MTgzNA==",
    "diff_hunk": "@@ -575,6 +578,232 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }\n \n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentially.\n+//\n+// The test covers:\n+//\n+// - Combining different setting actions. Possible actions are: configuring a\n+//   setting, negating a setting (adding \"-no\" prefix), and configuring/negating\n+//   settings in a network section (adding \"main.\" or \"test.\" prefixes).\n+//\n+// - Combining settings from command line arguments and a config file.\n+//\n+// - Combining SoftSet and ForceSet calls.\n+//\n+// - Testing \"main\" and \"test\" network values to make sure settings from network\n+//   sections are applied and to check for mainnet-specific behaviors like\n+//   inheriting settings from the default section.\n+//\n+// - Testing network-specific settings like \"-wallet\", that may be ignored\n+//   outside a network section, and non-network specific settings like \"-server\"\n+//   that aren't sensitive to the network.\n+//\n+struct SettingsMergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { SET = 0, NEGATE, SECTION_SET, SECTION_NEGATE, END };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ForEachActionList([&](const ActionList& arg_actions) {\n+            ForEachActionList([&](const ActionList& conf_actions) {\n+                for (bool soft_set : {false, true}) {\n+                    for (bool force_set : {false, true}) {\n+                        for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                            for (const std::string& network : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                                for (bool net_specific : {false, true}) {\n+                                    fn(arg_actions, conf_actions, soft_set, force_set, section, network, net_specific);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+        });\n+    }\n+\n+    //! Enumerate interesting combinations of actions.\n+    template <typename Fn>\n+    void ForEachActionList(Fn&& fn)\n+    {\n+        ActionList actions = {SET};\n+        for (bool done = false; !done;) {\n+            int prev_action = -1;\n+            bool skip_actions = false;\n+            for (Action action : actions) {\n+                if ((prev_action == END && action != END) || (prev_action != END && action == prev_action)) {\n+                    // To cut down list of enumerated settings, skip enumerating\n+                    // settings with ignored actions after an END, and settings that\n+                    // repeat the same action twice in a row.\n+                    skip_actions = true;\n+                    break;\n+                }\n+                prev_action = action;\n+            }\n+            if (!skip_actions) fn(actions);\n+            done = true;\n+            for (Action& action : actions) {\n+                action = Action(action < END ? action + 1 : 0);\n+                if (action) {\n+                    done = false;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Translate actions into a list of <key>=<value> setting strings.\n+    std::vector<std::string> GetValues(const ActionList& actions,\n+        const std::string& section,\n+        const std::string& name,\n+        const std::string& value_prefix)\n+    {\n+        std::vector<std::string> values;\n+        int suffix = 0;\n+        for (Action action : actions) {\n+            if (action == END) break;\n+            std::string prefix;\n+            if (action == SECTION_SET || action == SECTION_NEGATE) prefix = section + \".\";\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    values.push_back(prefix + name + \"=\" + value_prefix + std::to_string(++suffix));\n+                }\n+            }\n+            if (action == NEGATE || action == SECTION_NEGATE) {\n+                values.push_back(prefix + \"no\" + name + \"=1\");\n+            }\n+        }\n+        return values;\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see below).\n+BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");",
    "path": "src/test/util_tests.cpp",
    "position": 130,
    "original_position": 130,
    "commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "original_commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`BOOST_REQUIRE` instead of throwing?",
    "created_at": "2019-04-29T21:44:44Z",
    "updated_at": "2019-04-29T21:49:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279551834",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279551834"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279551834"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279551834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 697,
    "original_line": 697,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279551968",
    "pull_request_review_id": 231918152,
    "id": 279551968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTU1MTk2OA==",
    "diff_hunk": "@@ -575,6 +578,232 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }\n \n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentially.\n+//\n+// The test covers:\n+//\n+// - Combining different setting actions. Possible actions are: configuring a\n+//   setting, negating a setting (adding \"-no\" prefix), and configuring/negating\n+//   settings in a network section (adding \"main.\" or \"test.\" prefixes).\n+//\n+// - Combining settings from command line arguments and a config file.\n+//\n+// - Combining SoftSet and ForceSet calls.\n+//\n+// - Testing \"main\" and \"test\" network values to make sure settings from network\n+//   sections are applied and to check for mainnet-specific behaviors like\n+//   inheriting settings from the default section.\n+//\n+// - Testing network-specific settings like \"-wallet\", that may be ignored\n+//   outside a network section, and non-network specific settings like \"-server\"\n+//   that aren't sensitive to the network.\n+//\n+struct SettingsMergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { SET = 0, NEGATE, SECTION_SET, SECTION_NEGATE, END };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ForEachActionList([&](const ActionList& arg_actions) {\n+            ForEachActionList([&](const ActionList& conf_actions) {\n+                for (bool soft_set : {false, true}) {\n+                    for (bool force_set : {false, true}) {\n+                        for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                            for (const std::string& network : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                                for (bool net_specific : {false, true}) {\n+                                    fn(arg_actions, conf_actions, soft_set, force_set, section, network, net_specific);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+        });\n+    }\n+\n+    //! Enumerate interesting combinations of actions.\n+    template <typename Fn>\n+    void ForEachActionList(Fn&& fn)\n+    {\n+        ActionList actions = {SET};\n+        for (bool done = false; !done;) {\n+            int prev_action = -1;\n+            bool skip_actions = false;\n+            for (Action action : actions) {\n+                if ((prev_action == END && action != END) || (prev_action != END && action == prev_action)) {\n+                    // To cut down list of enumerated settings, skip enumerating\n+                    // settings with ignored actions after an END, and settings that\n+                    // repeat the same action twice in a row.\n+                    skip_actions = true;\n+                    break;\n+                }\n+                prev_action = action;\n+            }\n+            if (!skip_actions) fn(actions);\n+            done = true;\n+            for (Action& action : actions) {\n+                action = Action(action < END ? action + 1 : 0);\n+                if (action) {\n+                    done = false;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    //! Translate actions into a list of <key>=<value> setting strings.\n+    std::vector<std::string> GetValues(const ActionList& actions,\n+        const std::string& section,\n+        const std::string& name,\n+        const std::string& value_prefix)\n+    {\n+        std::vector<std::string> values;\n+        int suffix = 0;\n+        for (Action action : actions) {\n+            if (action == END) break;\n+            std::string prefix;\n+            if (action == SECTION_SET || action == SECTION_NEGATE) prefix = section + \".\";\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    values.push_back(prefix + name + \"=\" + value_prefix + std::to_string(++suffix));\n+                }\n+            }\n+            if (action == NEGATE || action == SECTION_NEGATE) {\n+                values.push_back(prefix + \"no\" + name + \"=1\");\n+            }\n+        }\n+        return values;\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see below).\n+BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;",
    "path": "src/test/util_tests.cpp",
    "position": 127,
    "original_position": 127,
    "commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "original_commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, `FILE* out_file{nullptr};`",
    "created_at": "2019-04-29T21:45:07Z",
    "updated_at": "2019-04-29T21:49:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279551968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279551968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279551968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279551968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 694,
    "original_line": 694,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279552832",
    "pull_request_review_id": 231918152,
    "id": 279552832,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3OTU1MjgzMg==",
    "diff_hunk": "@@ -575,6 +578,232 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }\n \n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentially.\n+//\n+// The test covers:\n+//\n+// - Combining different setting actions. Possible actions are: configuring a\n+//   setting, negating a setting (adding \"-no\" prefix), and configuring/negating\n+//   settings in a network section (adding \"main.\" or \"test.\" prefixes).\n+//\n+// - Combining settings from command line arguments and a config file.\n+//\n+// - Combining SoftSet and ForceSet calls.\n+//\n+// - Testing \"main\" and \"test\" network values to make sure settings from network\n+//   sections are applied and to check for mainnet-specific behaviors like\n+//   inheriting settings from the default section.\n+//\n+// - Testing network-specific settings like \"-wallet\", that may be ignored\n+//   outside a network section, and non-network specific settings like \"-server\"\n+//   that aren't sensitive to the network.\n+//\n+struct SettingsMergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { SET = 0, NEGATE, SECTION_SET, SECTION_NEGATE, END };",
    "path": "src/test/util_tests.cpp",
    "position": 41,
    "original_position": 41,
    "commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "original_commit_id": "151f3e9cf1bbcf30a4fc7749682e66b4a73ddfc2",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why `= 0` since it's already the default?",
    "created_at": "2019-04-29T21:48:09Z",
    "updated_at": "2019-04-29T21:49:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279552832",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279552832"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15869#discussion_r279552832"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15869"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/279552832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 608,
    "original_line": 608,
    "side": "RIGHT"
  }
]