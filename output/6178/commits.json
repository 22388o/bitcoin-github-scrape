[
  {
    "sha": "978d000c6201951b4611f7374c72de9988516c3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzhkMDAwYzYyMDE5NTFiNDYxMWY3Mzc0YzcyZGU5OTg4NTE2YzNj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-23T02:07:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-23T05:41:34Z"
      },
      "message": "Refactor EvalScript into a CScriptExecution class, so single-stepping can be done",
      "tree": {
        "sha": "e56400660eb8ebd97b09e32a3561faac572e05db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e56400660eb8ebd97b09e32a3561faac572e05db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/978d000c6201951b4611f7374c72de9988516c3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978d000c6201951b4611f7374c72de9988516c3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/978d000c6201951b4611f7374c72de9988516c3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978d000c6201951b4611f7374c72de9988516c3c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7708fcde3635ccfb29af12abfbc72a2c76045d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7708fcde3635ccfb29af12abfbc72a2c76045d2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7708fcde3635ccfb29af12abfbc72a2c76045d2c"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 57,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1f9be1f257c7dbd748f5ba32a2b6a848ea4e26eb",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 10,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/978d000c6201951b4611f7374c72de9988516c3c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/978d000c6201951b4611f7374c72de9988516c3c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=978d000c6201951b4611f7374c72de9988516c3c",
        "patch": "@@ -235,7 +235,20 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+CScriptExecution::CScriptExecution(std::vector<valtype>& stackIn, const CScript& scriptIn, unsigned int flagsIn, const BaseSignatureChecker& checkerIn, ScriptError* serrorIn)\n+: stack(stackIn), script(scriptIn), flags(flagsIn), checker(checkerIn), serror(serrorIn), pc(script.begin()), pbegincodehash(pc), vfExec(), altstack(), nOpCount(0), fEof(false)\n+{\n+}\n+\n+bool CScriptExecution::Start()\n+{\n+    set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n+    if (script.size() > 10000)\n+        return set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\n+    return true;\n+}\n+\n+bool CScriptExecution::Step()\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -245,22 +258,15 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n     static const valtype vchZero(0);\n     static const valtype vchTrue(1, 1);\n \n-    CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n-    CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n-    vector<bool> vfExec;\n-    vector<valtype> altstack;\n-    set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n-    if (script.size() > 10000)\n-        return set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\n-    int nOpCount = 0;\n     bool fRequireMinimal = (flags & SCRIPT_VERIFY_MINIMALDATA) != 0;\n \n+    fEof = (pc >= pend);\n     try\n     {\n-        while (pc < pend)\n+        if (!fEof)\n         {\n             bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n \n@@ -921,6 +927,8 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n             // Size limits\n             if (stack.size() + altstack.size() > 1000)\n                 return set_error(serror, SCRIPT_ERR_STACK_SIZE);\n+\n+            return true;\n         }\n     }\n     catch (...)\n@@ -934,6 +942,20 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n     return set_success(serror);\n }\n \n+bool EvalScript(std::vector<valtype>& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    CScriptExecution sexec(stack, script, flags, checker, serror);\n+\n+    if (!sexec.Start())\n+        return false;\n+\n+    while (!sexec.fEof)\n+        if (!sexec.Step())\n+            return false;\n+\n+    return true;\n+}\n+\n namespace {\n \n /**"
      },
      {
        "sha": "3c5a1a0c5ac3895a25cf6518dc052b5974b09ac6",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/978d000c6201951b4611f7374c72de9988516c3c/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/978d000c6201951b4611f7374c72de9988516c3c/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=978d000c6201951b4611f7374c72de9988516c3c",
        "patch": "@@ -114,6 +114,31 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n };\n \n+class CScriptExecution {\n+public:\n+    typedef std::vector<unsigned char> valtype;\n+\n+    std::vector<valtype>& stack;\n+    const CScript& script;\n+    unsigned int flags;\n+    const BaseSignatureChecker& checker;\n+    ScriptError* serror;\n+\n+    CScript::const_iterator pc;\n+    CScript::const_iterator pbegincodehash;\n+\n+    std::vector<bool> vfExec;\n+    std::vector<valtype> altstack;\n+    int nOpCount;\n+\n+    CScriptExecution(std::vector<valtype>& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+\n+    bool fEof;\n+\n+    bool Start();\n+    bool Step();\n+};\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n "
      }
    ]
  },
  {
    "sha": "70d431f3fa1163c0208d9c563815f9e9d900aecb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGQ0MzFmM2ZhMTE2M2MwMjA4ZDljNTYzODE1ZjllOWQ5MDBhZWNi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-23T02:54:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-23T05:45:50Z"
      },
      "message": "libbitcoinconsensus: Internally abstract out bitcoinconsensus_parse_txTo from bitcoinconsensus_verify_script so it can be shared",
      "tree": {
        "sha": "20bc076052103b2cebe84980fd9aa038899a989f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20bc076052103b2cebe84980fd9aa038899a989f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70d431f3fa1163c0208d9c563815f9e9d900aecb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d431f3fa1163c0208d9c563815f9e9d900aecb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70d431f3fa1163c0208d9c563815f9e9d900aecb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d431f3fa1163c0208d9c563815f9e9d900aecb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "978d000c6201951b4611f7374c72de9988516c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978d000c6201951b4611f7374c72de9988516c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/978d000c6201951b4611f7374c72de9988516c3c"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 48,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0be9a60edb4bd8d7f9220e91424157da345cf2d6",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 9,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70d431f3fa1163c0208d9c563815f9e9d900aecb/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70d431f3fa1163c0208d9c563815f9e9d900aecb/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=70d431f3fa1163c0208d9c563815f9e9d900aecb",
        "patch": "@@ -60,27 +60,65 @@ inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)\n     return 0;\n }\n \n-} // anon namespace\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n-                                    const unsigned char *txTo        , unsigned int txToLen,\n-                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+class bitcoinconsensus_txTo_sigchecker {\n+public:\n+    CTransaction *tx;\n+    BaseSignatureChecker *checker;\n+\n+    bitcoinconsensus_txTo_sigchecker() : tx(NULL), checker(NULL) { }\n+\n+    ~bitcoinconsensus_txTo_sigchecker() {\n+        delete tx;\n+        delete checker;\n+    };\n+};\n+\n+bool bitcoinconsensus_parse_txTo(bitcoinconsensus_txTo_sigchecker& o, const unsigned char *txTo, unsigned int txToLen, unsigned int nIn, bitcoinconsensus_error* err)\n {\n+    CTransaction *ptx = new CTransaction();\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n-        CTransaction tx;\n-        stream >> tx;\n+        CTransaction& tx = *ptx;\n+        try {\n+            TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+            stream >> tx;\n+        } catch (const std::exception&) {\n+            delete ptx;\n+            return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n+        }\n+\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n         if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n+        o.checker = new TransactionSignatureChecker(&tx, nIn);\n+        o.tx = ptx;\n+    } catch (...) {\n+        delete ptx;\n+        throw;\n+    }\n+\n+    return true;\n+}\n+\n+} // anon namespace\n+\n+int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+                                    const unsigned char *txTo        , unsigned int txToLen,\n+                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_txTo_sigchecker o;\n+        if (!bitcoinconsensus_parse_txTo(o, txTo, txToLen, nIn, err))\n+            return false;\n+\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        return VerifyScript(o.tx->vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, *o.checker, NULL);\n     } catch (const std::exception&) {\n-        return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n     }\n }\n "
      },
      {
        "sha": "12a6e89827f2a00de785568e1f94275354c737fa",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70d431f3fa1163c0208d9c563815f9e9d900aecb/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70d431f3fa1163c0208d9c563815f9e9d900aecb/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=70d431f3fa1163c0208d9c563815f9e9d900aecb",
        "patch": "@@ -39,6 +39,7 @@ typedef enum bitcoinconsensus_error_t\n     bitcoinconsensus_ERR_TX_INDEX,\n     bitcoinconsensus_ERR_TX_SIZE_MISMATCH,\n     bitcoinconsensus_ERR_TX_DESERIALIZE,\n+    bitcoinconsensus_ERR_UNKNOWN,\n } bitcoinconsensus_error;\n \n /** Script verification flags */"
      }
    ]
  },
  {
    "sha": "4b759fb610e6666da5ab35d43e4ecb6283dbadba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yjc1OWZiNjEwZTY2NjZkYTVhYjM1ZDQzZTRlY2I2MjgzZGJhZGJh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-23T04:29:56Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-03T05:36:45Z"
      },
      "message": "libbitcoinconsensus: Several C bindings to use CScriptExecution",
      "tree": {
        "sha": "cb4ed73bbf189e76c9029a74a7b83d816d459a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb4ed73bbf189e76c9029a74a7b83d816d459a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b759fb610e6666da5ab35d43e4ecb6283dbadba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b759fb610e6666da5ab35d43e4ecb6283dbadba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b759fb610e6666da5ab35d43e4ecb6283dbadba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b759fb610e6666da5ab35d43e4ecb6283dbadba/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70d431f3fa1163c0208d9c563815f9e9d900aecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d431f3fa1163c0208d9c563815f9e9d900aecb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70d431f3fa1163c0208d9c563815f9e9d900aecb"
      }
    ],
    "stats": {
      "total": 280,
      "additions": 280,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8303ed48448275dde9532da5091d204b46ff5611",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 220,
        "deletions": 0,
        "changes": 220,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b759fb610e6666da5ab35d43e4ecb6283dbadba/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b759fb610e6666da5ab35d43e4ecb6283dbadba/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=4b759fb610e6666da5ab35d43e4ecb6283dbadba",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"script/interpreter.h\"\n+#include \"script/script_error.h\"\n #include \"version.h\"\n \n namespace {\n@@ -102,8 +103,227 @@ bool bitcoinconsensus_parse_txTo(bitcoinconsensus_txTo_sigchecker& o, const unsi\n     return true;\n }\n \n+typedef std::vector<unsigned char> valtype;\n+typedef std::vector<valtype> bitcoinconsensus_stack_t;\n+\n+class bitcoinconsensus_script_execution_data {\n+public:\n+    CScriptExecution *sexec;\n+    bitcoinconsensus_stack_t stack;\n+    CScript script;\n+    ScriptError serror;\n+    bitcoinconsensus_txTo_sigchecker tsc;\n+\n+    bitcoinconsensus_script_execution_data() : sexec(NULL) { }\n+\n+    ~bitcoinconsensus_script_execution_data() {\n+        delete sexec;\n+    };\n+\n+    bool parse_stackPos(bitcoinconsensus_stack_t*& stackp, bitcoinconsensus_script_execution_stack stackid, int& stackPos, bool allowEnd)\n+    {\n+        switch (stackid)\n+        {\n+            case bitcoinconsensus_SEXEC_STACK:\n+                stackp = &stack;\n+                break;\n+            case bitcoinconsensus_SEXEC_ALTSTACK:\n+                if (!sexec)\n+                    return false;\n+                stackp = &sexec->altstack;\n+                break;\n+            default:\n+                return false;\n+        }\n+\n+        if (stackPos < 0)\n+        {\n+            stackPos = stackp->size() + stackPos + 1;\n+            if (stackPos < 0)\n+                return false;\n+        }\n+        if ((unsigned int)stackPos + (allowEnd ? 0 : 1) > stackp->size())\n+            return false;\n+\n+        return true;\n+    }\n+\n+    void Terminate() {\n+        delete sexec;\n+        sexec = NULL;\n+    };\n+};\n+\n+\n } // anon namespace\n \n+bitcoinconsensus_script_execution_t *bitcoinconsensus_script_execution(const unsigned char *script, unsigned int scriptLen, const unsigned char *txTo, unsigned int txToLen, unsigned int nIn, bitcoinconsensus_error* err)\n+{\n+    bitcoinconsensus_script_execution_data *o = NULL;\n+    try {\n+        o = new bitcoinconsensus_script_execution_data();\n+\n+        {\n+            std::vector<unsigned char> vchScript;\n+            vchScript.assign(script, &script[scriptLen]);\n+            o->script = CScript(vchScript);\n+        }\n+\n+        if (txTo) {\n+            if (!bitcoinconsensus_parse_txTo(o->tsc, txTo, txToLen, nIn, err))\n+                return NULL;\n+        } else {\n+            o->tsc.checker = new BaseSignatureChecker();\n+        }\n+\n+        return (bitcoinconsensus_script_execution_t *)o;\n+    } catch (...) {\n+        delete o;\n+        set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+        return NULL;\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_stack_insert(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_script_execution_stack stackid, int stackPos, const void *datap, size_t dataLen, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        const unsigned char *data = (const unsigned char *)datap;\n+        bitcoinconsensus_stack_t *stack;\n+\n+        if (!o->parse_stackPos(stack, stackid, stackPos, true))\n+            return set_error(err, bitcoinconsensus_ERR_BAD_INDEX);\n+\n+        valtype vchData;\n+        vchData.assign(data, &data[dataLen]);\n+\n+        stack->insert(stack->begin() + stackPos, vchData);\n+\n+        return 1;\n+    } catch (...) {\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_stack_delete(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_script_execution_stack stackid, int stackPos, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        bitcoinconsensus_stack_t *stack;\n+\n+        if (!o->parse_stackPos(stack, stackid, stackPos, false))\n+            return set_error(err, bitcoinconsensus_ERR_BAD_INDEX);\n+\n+        stack->erase(stack->begin() + stackPos);\n+\n+        return 1;\n+    } catch (...) {\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_stack_get(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_script_execution_stack stackid, int stackPos, const void **datap, size_t *dataLen, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        bitcoinconsensus_stack_t *stack;\n+\n+        if (!o->parse_stackPos(stack, stackid, stackPos, false))\n+            return set_error(err, bitcoinconsensus_ERR_BAD_INDEX);\n+\n+        valtype& vchStackElem = *(stack->begin() + stackPos);\n+\n+        *datap = vchStackElem.data();\n+        *dataLen = vchStackElem.size();\n+\n+        return 1;\n+    } catch (...) {\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_start(bitcoinconsensus_script_execution_t *po, unsigned int flags, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+\n+        if (o->sexec)\n+            return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+\n+        o->sexec = new CScriptExecution(o->stack, o->script, flags, *o->tsc.checker, &o->serror);\n+        if (!o->sexec->Start())\n+        {\n+            o->Terminate();\n+            return set_error(err, bitcoinconsensus_ERR_SCRIPT_EXECUTION);\n+        }\n+\n+        return 1;\n+    } catch (...) {\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_step(bitcoinconsensus_script_execution_t *po, int *fEof, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+\n+        if (!o->sexec->Step())\n+            return set_error(err, bitcoinconsensus_ERR_SCRIPT_EXECUTION);\n+\n+        *fEof = o->sexec->fEof;\n+        return 1;\n+    } catch (...) {\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_terminate(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        o->Terminate();\n+        return 1;\n+    } catch (...) {\n+        return set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_get_pc(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        std::vector<unsigned char>::const_iterator cbegin = o->script.begin();\n+        return std::distance(cbegin, o->sexec->pc);\n+    } catch (...) {\n+        set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+        return -1;\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_get_codehash_pos(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        std::vector<unsigned char>::const_iterator cbegin = o->script.begin();\n+        return std::distance(cbegin, o->sexec->pbegincodehash);\n+    } catch (...) {\n+        set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+        return -1;\n+    }\n+}\n+\n+int bitcoinconsensus_script_execution_get_sigop_count(bitcoinconsensus_script_execution_t *po, bitcoinconsensus_error* err)\n+{\n+    try {\n+        bitcoinconsensus_script_execution_data *o = (bitcoinconsensus_script_execution_data *)po;\n+        return o->sexec->nOpCount;\n+    } catch (...) {\n+        set_error(err, bitcoinconsensus_ERR_UNKNOWN);\n+        return -1;\n+    }\n+}\n+\n int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)"
      },
      {
        "sha": "84fcc537eeb0736499d0ec3b5896cf169d8d59f9",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b759fb610e6666da5ab35d43e4ecb6283dbadba/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b759fb610e6666da5ab35d43e4ecb6283dbadba/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=4b759fb610e6666da5ab35d43e4ecb6283dbadba",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_BITCOINCONSENSUS_H\n #define BITCOIN_BITCOINCONSENSUS_H\n \n+#include <stddef.h>\n+\n #if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n   #if defined(_WIN32)\n@@ -40,6 +42,8 @@ typedef enum bitcoinconsensus_error_t\n     bitcoinconsensus_ERR_TX_SIZE_MISMATCH,\n     bitcoinconsensus_ERR_TX_DESERIALIZE,\n     bitcoinconsensus_ERR_UNKNOWN,\n+    bitcoinconsensus_ERR_BAD_INDEX,\n+    bitcoinconsensus_ERR_SCRIPT_EXECUTION,\n } bitcoinconsensus_error;\n \n /** Script verification flags */\n@@ -50,6 +54,62 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n };\n \n+typedef enum bitcoinconsensus_script_execution_stack\n+{\n+    bitcoinconsensus_SEXEC_STACK,\n+    bitcoinconsensus_SEXEC_ALTSTACK,\n+} bitcoinconsensus_script_execution_stack;\n+\n+typedef struct bitcoinconsensus_script_execution_t_ bitcoinconsensus_script_execution_t;\n+\n+/// Returns an opaque pointer representing a context for execution of the given script for a given transaction.\n+/// If txTo is NULL, all operations that access the transaction will fail.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL bitcoinconsensus_script_execution_t *bitcoinconsensus_script_execution(const unsigned char *script, unsigned int scriptLen, const unsigned char *txTo, unsigned int txToLen, unsigned int nIn, bitcoinconsensus_error*);\n+\n+/// Inserts a blob of data at a given position on one of the stacks.\n+/// To access the altstack, the execution context must already be started.\n+/// A negative stackPos will insert at the end of the stack.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_stack_insert(bitcoinconsensus_script_execution_t *, bitcoinconsensus_script_execution_stack, int stackPos, const void *data, size_t dataLen, bitcoinconsensus_error*);\n+\n+/// Deletes the element at a given position of one of the stacks.\n+/// A negative stackPos will insert at the end of the stack.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_stack_delete(bitcoinconsensus_script_execution_t *, bitcoinconsensus_script_execution_stack, int stackPos, bitcoinconsensus_error*);\n+\n+/// Accesses the element at a given position of one of the stacks.\n+/// A negative stackPos will insert at the end of the stack.\n+/// When successful (indicated by a non-zero return value), data will receive a pointer to the stack element, and dataLen will be set to its size.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_stack_get(bitcoinconsensus_script_execution_t *, bitcoinconsensus_script_execution_stack, int stackPos, const void **data, size_t *dataLen, bitcoinconsensus_error*);\n+\n+/// Starts execution of the script.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_start(bitcoinconsensus_script_execution_t *, unsigned int flags, bitcoinconsensus_error*);\n+\n+/// Executes a single instruction of the script.\n+/// When successful, fEof will be assigned to false if there is more to do, or true when the script has completed.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_step(bitcoinconsensus_script_execution_t *, int *fEof, bitcoinconsensus_error*);\n+\n+/// Immediately terminates the execution.\n+/// Unless bitcoinconsensus_script_execution_start returned true, this will crash your program.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_terminate(bitcoinconsensus_script_execution_t *, bitcoinconsensus_error*);\n+\n+/// Returns the current execution offset in the script.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_get_pc(bitcoinconsensus_script_execution_t *, bitcoinconsensus_error*);\n+\n+/// Returns the position in the script following the last OP_CODESEPARATOR executed, or zero if none have executed.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_get_codehash_pos(bitcoinconsensus_script_execution_t *, bitcoinconsensus_error*);\n+\n+/// Returns the number of \"sigops\" executed thus far.\n+/// If not NULL, err will contain an error/success code for the operation\n+EXPORT_SYMBOL int bitcoinconsensus_script_execution_get_sigop_count(bitcoinconsensus_script_execution_t *, bitcoinconsensus_error*);\n+\n /// Returns 1 if the input nIn of the serialized transaction pointed to by\n /// txTo correctly spends the scriptPubKey pointed to by scriptPubKey under\n /// the additional constraints specified by flags."
      }
    ]
  }
]