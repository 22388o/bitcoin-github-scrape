jtimon,2015-05-23T06:03:17Z,"ut ACK. Very clean commits, kudos.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104850498,104850498,
petertodd,2015-05-23T23:22:10Z,"Do we have any specific users for this change yet? I proposed earlier that we just add a very simple callback option to EvalScript() to optionally execute a function at each step in a way guaranteed to not be able to change the EvalScript() loop state unless desired.\n\nGiven how limited the scripting system is, I just don't see there being much demand for a full-on, fully consensus accurate, debu",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104954520,104954520,
luke-jr,2015-05-23T23:28:56Z,"Scripts get ""too complex"" fast...\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104954862,104954862,
petertodd,2015-05-23T23:51:29Z,"Well again, do we have a concrete use-case/example?\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104955693,104955693,
luke-jr,2015-05-24T00:20:32Z,"The obvious use case is a debugger, as already mentioned.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104960641,104960641,
petertodd,2015-05-24T05:39:40Z,"I mean, an example of a script where you'd actually need a debugger vs. just getting an execution transcript. Remember that script execution is deterministic, and _must_ execute quickly, so you can always implement an apparent debugger by just replaying the script from the start and stopping at the right point.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104982323,104982323,
jtimon,2015-05-24T06:06:42Z,"I think the debugger can also be interesting for testing simple scripts. For example, one could write some unittests to make sure an individual operand/instruction affects the stack in expected ways.\nI think an example of the debugger being used automatically for testing purposes should be enough to justify this.\nIt also makes libconsensus more interesting. The consensus risks of non-trivially c",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104983332,104983332,
jtimon,2015-05-24T06:12:55Z,This-cannot-possibly-be-wrong ACK https://github.com/luke-jr/bitcoin/commit/978d000c6201951b4611f7374c72de9988516c3c\nut ACK https://github.com/luke-jr/bitcoin/commit/beabd6350e49c3660f45d3d5c85633f2cd21e26a\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-104983428,104983428,
petertodd,2015-05-24T21:34:44Z,"@jtimon Well, remember my simpler proposal of a callback works just fine for the unittest case - what I want to get some time to implement - as you only need an execution trace rather than the ability to dynamically modify state. Basically, at each step the callback fires and you check it against an expected execution log and/or append to one.\n\nBut anyway, I agree that I can't see how the first ",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-105063546,105063546,
petertodd,2015-05-24T21:38:15Z,"Oh, and @luke-jr if you could add a few lines of comments to the CScriptExecution explaining more about the rational and design that'd be good for future maintenance, esp. ones describing what each state variable does.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-105063931,105063931,
laanwj,2015-06-06T09:26:33Z,"Seems to risky to me to change the consensus code for this. Don't get me wrong, there are scenarios in which single-stepping is useful - but never in consensus usage, so it would be better to do it in an external utility class which just 'emulates' consensus.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109555538,109555538,
jtimon,2015-06-06T19:13:20Z,"As said before, maybe the scope should be reduced to the first commit at first to make it harder to complain about ""risks"", because that change is really simple.\nI would be fine with an external utility class as long as it remains useful for unittests and it doesn't reimplement consensus, but I'm not really sure about what @laanwj has in mind here.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109638384,109638384,
petertodd,2015-06-06T19:17:02Z,"@jtimon @laanwj Like I said above, a callback function can be used with an external method to simulate single-stepping with sufficient performance for debugging; unittests just need execution transcripts, not single-stepping.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109638521,109638521,
jtimon,2015-06-06T19:28:47Z,"Well, It would also be nice if the external class can be used as a debugger, even if that's not strictly necessary for unittests.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109639505,109639505,
luke-jr,2015-06-06T19:37:31Z,"@laanwj A debugger that isn't using consensus code is just as bad/dangerous as an alternate implementation. @petertodd 's approach is somewhat less debugger-friendly, but probably covers all practical use cases.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109642165,109642165,
sipa,2015-06-06T19:53:22Z,"@luke-jr You can always compare the final output of the debug executed with\na consensus execution.\n\nIf non-trivial changes are needed for a particular use case, I think it's\nbetter to use a reimplementation than to risk affecting consensus code.\nThis goes against traditional software design principles, but given the\nhigh risk, I think that is a reasonable exception. This is a very abstract\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109643687,109643687,
jgarzik,2015-06-07T02:40:49Z,+1 @laanwj \n\nToo much risk for too little (and +speculative) value.\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-109677261,109677261,
sipa,2015-06-14T13:57:39Z,What is the use case for exposing this to libbitcoinconsensus?\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-111828279,111828279,
luke-jr,2015-06-14T15:47:31Z,@sipa I would like to write a GUI Script IDE/debugger.\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-111842335,111842335,
sipa,2015-06-16T13:57:33Z,I'm not sure we should overload libbitcoinconsensus with such functionality. Its purpose is to implement consensus-critical verification.\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-112441816,112441816,
luke-jr,2015-06-16T21:37:22Z,"@sipa I'm not sure what you're saying there. A debugger's correct execution of Scripts is fairly consensus-critical. Perhaps not when it's in the debugger, but it needs to have consensus-critical behaviour to the debugger when put on the network.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-112576232,112576232,
jtimon,2015-06-18T17:04:13Z,"@luke-jr I think he means you could expose the debugger functions within bitcoin core but not expose it in the libconsensus API.\nLet's imagine a future where libconsensus is a separated repo like libsecp256k1. Then if you want to use the debugger you need to use libconsensus as a sub-tree of your repository (like bitcoin core would do) or duplicate the code, but you cannot access the debugger fro",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-113222325,113222325,
luke-jr,2015-06-18T19:31:54Z,"@jtimon subtrees are bad practice and should never\* be used for shared code, _especially_ in the debugger scenario. The only reason we ""need"" then in Core is because the library upstreams do not guarantee consensus compatibility.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-113266549,113266549,
jtimon,2015-06-18T19:42:22Z,"We're very far away from having core using libconsensus only through its API if we even want that.\nAnyway, to be clear, I was just trying to explain what I thought @sipa meant, that doesn't mean I am against exposing the debugger calls in libconsensus myself. I think that's within it's purpose of ""implement consensus-critical verification"", it's just step-by-step consensus verification.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-113268867,113268867,
laanwj,2015-08-21T08:36:12Z,"Closing as too risky. Please let's not burden the consensus code with auxiliary concerns such as debugging. This belongs, IMO, in other tooling (which could eg. simulate the consensus code).\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-133331780,133331780,
Kefkius,2015-09-03T10:31:53Z,"FWIW, [Hashmal](https://github.com/Kefkius/hashmal) is a use-case for this. It's a development tool as well as an educational one. Essentially a transaction script IDE (coincidentally the very thing @luke-jr had intended to make).\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137403954,137403954,
laanwj,2015-09-03T10:49:02Z,"It's certainly a valid use-case for single-stepping. My point is, why not implement it in the IDE instead of relying on bitcoin core's consensus code to be adapted?\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137406513,137406513,
Kefkius,2015-09-03T12:58:16Z,"@laanwj IMO there's no definitive right-or-wrong answer here, though I am in favor in merging the PR. My logic is that it would just be easier (i.e. less error-prone) for any client code to step through scripts with this, and ensure that any script debuggers using this behave in the same manner.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137431383,137431383,
luke-jr,2015-09-03T14:10:22Z,@laanwj Because it's important for debuggers to be consensus-correct?\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137461727,137461727,
laanwj,2015-09-03T14:53:55Z,"If you copy this code into your IDE, it will be consensus-correct, right?\n(if not, it contains a bug that _changes_ the consensus, and we'd certainly not want to merge it either...)\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137475461,137475461,
luke-jr,2015-09-03T15:48:58Z,Necessity of doing so defeats the point of having a libbitcoinconsensus in the first place...\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137491090,137491090,
jtimon,2015-09-03T16:00:29Z,"I agree that libconsensus becomes more useful with this. Yes, we risk changing consensus behaviour but the ""risky"" commit is very easy to review and we can always reduce the risks further with more testing.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137494972,137494972,
btcdrak,2015-09-03T16:12:34Z,There dont appear to be any unit tests. Are there any specific unit tests that could be written to help prove consensus is met. I'm thinking some specific tests added before this PR so after this PR they dont break. This PR itself probably needs some tests also.\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137498930,137498930,
jtimon,2015-09-03T16:17:46Z,Im seriously intrigued about what people think that could go wrong with https://github.com/luke-jr/bitcoin/commit/978d000c6201951b4611f7374c72de9988516c3c\nWould it help to reduce the scope of this PR to that single commit?\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137500142,137500142,
sipa,2015-09-03T16:21:26Z,"You can't prove consensus is met, except through static analysis techniques\nwhich are not applicable here.\n\nAlso, consensus is not necessary for the observed execution steps, only for\nits (boolean) outcome.\n\nI've been thinking about making a copy of the consensus code and its\ndependencies (CScript for example) inside the consensus directory, allowing\nfor stripped, simple, and non-changing ",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137501894,137501894,
petertodd,2015-09-03T17:46:08Z,@laanwj +1 beer @changetip\n\nClever!\n,https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137525460,137525460,
changetip,2015-09-03T17:47:34Z,"Hi @laanwj, I've delivered a tip worth 1 beer (15,369 bits/$3.50) from @petertodd to your ChangeTip pocket.\n\n**[Learn about ChangeTip](https://www.changetip.com/tip-online/github)**\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137525805,137525805,
jtimon,2015-09-03T18:12:16Z,"@sipa consensus doesn't need to be able to observe step, just like it doesn't need a BaseSignatureChecker (and still we made that ""risky"" refactor). But it would be good for libconsensus to expose the stepping and would also facilitate the work for writing some tests, don't you think?\n\nIs it really worth it to duplicate the consensus code just to avoid the ""risks"" in https://github.com/luke-jr/b",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137531805,137531805,
sipa,2015-09-03T18:42:55Z,"@jtimon I think stepping would be useful for a ""libbitcoinscript"", but not\nfor consensus. I think consensus code should be focussed on one thing only:\nexact reproducibility of validity checking.\n\nAnd yes, I think that duplication is useful. Right now, it is nonobvious\nwhat parts of the script code are consensus critical, which means we have\nto assume all of it is, making changes like signatu",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137538843,137538843,
jtimon,2015-09-03T19:10:37Z,"> I think consensus code should be focussed on one thing only: exact reproducibility of validity checking.\n\nWhy did we add `BaseSignatureChecker` then ?\n\n> Right now, it is nonobvious\n> what parts of the script code are consensus critical, which means we have\n> to assume all of it is\n\nThis can be trivially solved by moving the consensus critical files to the consensus folder (which we will",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137544959,137544959,
laanwj,2015-09-03T19:39:07Z,"@petrodd Thanks!\n\n@sipa @jtimon \n\n> I think stepping would be useful for a ""libbitcoinscript"", but not for consensus. I think consensus code should be focussed on one thing only: exact reproducibility of validity checking.\n\nExactly. This is one area we certainly don't want scope creep in. Consensus should only be involved with validation. Making changes to it for anything else is too risky. ",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137553377,137553377,
sipa,2015-09-03T19:44:03Z,"If Bitcoin Core is using a simplified consensus-only copy of the code, I\ndon't we'd want external code to use the more complicated and potentially\nwrong code instead. The purpose of libbitcoinconsensus is to avoid needing\nreimplementation in order to write reasonably-sure consensus-compliant code.\n\nWhy did we add abstracted signature checking? I think it was a very useful\nthing to do, but I'",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137554747,137554747,
jtimon,2015-09-03T20:21:00Z,"> Exactly. This is one area we certainly don't want scope creep in. Consensus should only be involved with validation.\n\nThe steps are part of the consensus validation, otherwise this wouldn't be helpful for writing tests about consensus validation. It's just that it's not strictly necessary to separate or expose them, but it's clearly not comparable to other examples like signing.\n\n> Making ch",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137563035,137563035,
lontivero,2015-09-04T00:28:26Z,"As it is currently, the consensus library is very easy to use and I was able to include it in NBitcoin in just a few minutes. This is because .NET provides a mechanism for invoking unmanaged functions (C++ functions) that just works.  However, there is no easy way to use it after this PR because it is implemented as a method. \n\nsee: \n[using a class defined in a c++ dll in c# code](https://stack",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137608205,137608205,
luke-jr,2015-09-04T00:30:24Z,"Huh? This adds only standard C APIs to libbitcoinconsensus, which is the most common standard for such things, and also was already the only APIs exported by the library.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137608931,137608931,
lontivero,2015-09-04T00:46:19Z,"@luke-jr I'm sorry, you're right. I didn't review it carefully, just gave it a glance.\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137612419,137612419,
jtimon,2015-09-04T08:05:02Z,"Fwiw, a class is not really required: it could be a parameter struct to the all the methods (which would become functions). Maybe not using the class makes ghe supposedly risky commit look even less risky?\n",https://github.com/bitcoin/bitcoin/pull/6178#issuecomment-137674186,137674186,
