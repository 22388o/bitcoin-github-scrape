[
  {
    "sha": "cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmQzNDVhNzVjMmJlMjZlMTdmY2U0YzY1YzBjMWNhMTlhM2ViOWUw",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-01-13T22:19:28Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-28T08:04:18Z"
      },
      "message": "test: test OP_CSV empty stack fail in feature_csv_activation.py\n\nWith BIP112 activated, the operation OP_CHECKSEQUENCEVERIFY (former OP_NOP3)\nleads to script interpreter termination with an error if one of the following\nconditions is true:\n    -> stack is empty\n    -> top item on stack is negative (< 0)\n    -> top item on stack has disable flag unset and at least one of\n       four other conditions is true (contains the core CSV logic)\n\nThis commits adds the missing empty stack failure test to the functional test\nby prepending a valid scriptSig with just OP_CHECKSEQUENCEVERIFY. If BIP112 is\ninactive, the operator just behaves as a NOP (for both tx versions 1 and 2) and\nthe transaction remains valid -- if it is active, the tx is invalid due to an\nempty stack (for both tx versions 1 and 2, as well).",
      "tree": {
        "sha": "31d64bbc9d695876d47740601f15d55f2828ccb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31d64bbc9d695876d47740601f15d55f2828ccb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eae48ec84c4deacfe92139d07ee80e51136cb766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae48ec84c4deacfe92139d07ee80e51136cb766",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eae48ec84c4deacfe92139d07ee80e51136cb766"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 25,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5f3da43865ed72da68d95321e5f0644030ce89ab",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 25,
        "deletions": 10,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
        "patch": "@@ -35,6 +35,7 @@\n bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112tx_special - test negative argument to OP_CSV\n+bip112tx_emptystack - test empty stack (= no argument) OP_CSV\n \"\"\"\n from decimal import Decimal\n from itertools import product\n@@ -95,6 +96,13 @@ def create_bip112special(node, input, txversion, address):\n     signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n     return signtx\n \n+def create_bip112emptystack(node, input, txversion, address):\n+    tx = create_transaction(node, input, address, amount=Decimal(\"49.98\"))\n+    tx.nVersion = txversion\n+    signtx = sign_transaction(node, tx)\n+    signtx.vin[0].scriptSig = CScript([OP_CHECKSEQUENCEVERIFY] + list(CScript(signtx.vin[0].scriptSig)))\n+    return signtx\n+\n def send_generic_input_tx(node, coinbases, address):\n     return node.sendrawtransaction(ToHex(sign_transaction(node, create_transaction(node, node.getblock(coinbases.pop())['tx'][0], address, amount=Decimal(\"49.99\")))))\n \n@@ -179,15 +187,15 @@ def run_test(self):\n         self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n         long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n         self.nodes[0].setmocktime(long_past_time - 100)  # enough so that the generated blocks will still all be before long_past_time\n-        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2 * 32 + 1)  # 82 blocks generated for inputs\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2 * 32 + 2)  # 83 blocks generated for inputs\n         self.nodes[0].setmocktime(0)  # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n-        self.tipheight = 82  # height of the next block to build\n+        self.tipheight = 83  # height of the next block to build\n         self.last_block_time = long_past_time\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         # Activation height is hardcoded\n-        test_blocks = self.generate_blocks(345)\n+        test_blocks = self.generate_blocks(344)\n         self.send_blocks(test_blocks)\n         assert not softfork_active(self.nodes[0], 'csv')\n \n@@ -218,6 +226,8 @@ def run_test(self):\n \n         # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112specialinput = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n+        # 1 special input with (empty stack) OP_CSV (actually will be prepended to spending scriptSig)\n+        bip112emptystackinput = send_generic_input_tx(self.nodes[0],self.coinbase_blocks, self.nodeaddress)\n \n         # 1 normal input\n         bip113input = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n@@ -228,7 +238,7 @@ def run_test(self):\n         self.tip = int(inputblockhash, 16)\n         self.tipheight += 1\n         self.last_block_time += 600\n-        assert_equal(len(self.nodes[0].getblock(inputblockhash, True)[\"tx\"]), 82 + 1)\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash, True)[\"tx\"]), 83 + 1)\n \n         # 2 more version 4 blocks\n         test_blocks = self.generate_blocks(2)\n@@ -267,18 +277,22 @@ def run_test(self):\n         # -1 OP_CSV OP_DROP input\n         bip112tx_special_v1 = create_bip112special(self.nodes[0], bip112specialinput, 1, self.nodeaddress)\n         bip112tx_special_v2 = create_bip112special(self.nodes[0], bip112specialinput, 2, self.nodeaddress)\n+        # (empty stack) OP_CSV input\n+        bip112tx_emptystack_v1 = create_bip112emptystack(self.nodes[0], bip112emptystackinput, 1, self.nodeaddress)\n+        bip112tx_emptystack_v2 = create_bip112emptystack(self.nodes[0], bip112emptystackinput, 2, self.nodeaddress)\n \n         self.log.info(\"TESTING\")\n \n         self.log.info(\"Pre-Soft Fork Tests. All txs should pass.\")\n         self.log.info(\"Test version 1 txs\")\n \n         success_txs = []\n-        # add BIP113 tx and -1 CSV tx\n+        # BIP113 tx, -1 CSV tx and empty stack CSV tx should succeed\n         bip113tx_v1.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n         bip113signed1 = sign_transaction(self.nodes[0], bip113tx_v1)\n         success_txs.append(bip113signed1)\n         success_txs.append(bip112tx_special_v1)\n+        success_txs.append(bip112tx_emptystack_v1)\n         # add BIP 68 txs\n         success_txs.extend(all_rlt_txs(bip68txs_v1))\n         # add BIP 112 with seq=10 txs\n@@ -293,11 +307,12 @@ def run_test(self):\n         self.log.info(\"Test version 2 txs\")\n \n         success_txs = []\n-        # add BIP113 tx and -1 CSV tx\n+        # BIP113 tx, -1 CSV tx and empty stack CSV tx should succeed\n         bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n         bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         success_txs.append(bip113signed2)\n         success_txs.append(bip112tx_special_v2)\n+        success_txs.append(bip112tx_emptystack_v2)\n         # add BIP 68 txs\n         success_txs.extend(all_rlt_txs(bip68txs_v2))\n         # add BIP 112 with seq=10 txs\n@@ -385,8 +400,9 @@ def run_test(self):\n         self.log.info(\"BIP 112 tests\")\n         self.log.info(\"Test version 1 txs\")\n \n-        # -1 OP_CSV tx should fail\n+        # -1 OP_CSV tx and (empty stack) OP_CSV tx should fail\n         self.send_blocks([self.create_test_block([bip112tx_special_v1])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_emptystack_v1])], success=False)\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n \n         success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v1 if tx['sdf']]\n@@ -404,8 +420,9 @@ def run_test(self):\n \n         self.log.info(\"Test version 2 txs\")\n \n-        # -1 OP_CSV tx should fail\n+        # -1 OP_CSV tx and (empty stack) OP_CSV tx should fail\n         self.send_blocks([self.create_test_block([bip112tx_special_v2])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_emptystack_v2])], success=False)\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n         success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if tx['sdf']]\n@@ -449,7 +466,5 @@ def run_test(self):\n         self.send_blocks([self.create_test_block(time_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-        # TODO: Test empty stack fails\n-\n if __name__ == '__main__':\n     BIP68_112_113Test().main()"
      }
    ]
  },
  {
    "sha": "09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWY3MDZhYjhlNDdkZGZkZmE0MTQxOGYyZTdjYjZkODc2NjExNDdh",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-01-14T16:24:37Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-28T08:04:59Z"
      },
      "message": "test: check for OP_CSV empty stack fail reject reason in feature_csv_activation.py",
      "tree": {
        "sha": "ff66a9ebe63c9d00e3b9a168b66d17fa48acfbd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff66a9ebe63c9d00e3b9a168b66d17fa48acfbd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09f706ab8e47ddfdfa41418f2e7cb6d87661147a/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbd345a75c2be26e17fce4c65c0c1ca19a3eb9e0"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a55cd58bf0172018f9e6edb2b97825ce41dfaacc",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09f706ab8e47ddfdfa41418f2e7cb6d87661147a/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09f706ab8e47ddfdfa41418f2e7cb6d87661147a/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
        "patch": "@@ -150,6 +150,7 @@ def set_test_params(self):\n             '-whitelist=noban@127.0.0.1',\n             '-blockversion=4',\n             '-addresstype=legacy',\n+            '-par=1',  # Use only one script thread to get the exact reject reason for testing\n         ]]\n         self.supports_cli = False\n \n@@ -175,11 +176,11 @@ def create_test_block(self, txs):\n         block.solve()\n         return block\n \n-    def send_blocks(self, blocks, success=True):\n+    def send_blocks(self, blocks, success=True, reject_reason=None):\n         \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n \n         Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n-        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success)\n+        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_reason=reject_reason)\n \n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PDataStore())\n@@ -402,7 +403,8 @@ def run_test(self):\n \n         # -1 OP_CSV tx and (empty stack) OP_CSV tx should fail\n         self.send_blocks([self.create_test_block([bip112tx_special_v1])], success=False)\n-        self.send_blocks([self.create_test_block([bip112tx_emptystack_v1])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_emptystack_v1])], success=False,\n+                         reject_reason='non-mandatory-script-verify-flag (Operation not valid with the current stack size)')\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n \n         success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v1 if tx['sdf']]\n@@ -422,7 +424,8 @@ def run_test(self):\n \n         # -1 OP_CSV tx and (empty stack) OP_CSV tx should fail\n         self.send_blocks([self.create_test_block([bip112tx_special_v2])], success=False)\n-        self.send_blocks([self.create_test_block([bip112tx_emptystack_v2])], success=False)\n+        self.send_blocks([self.create_test_block([bip112tx_emptystack_v2])], success=False,\n+                         reject_reason='non-mandatory-script-verify-flag (Operation not valid with the current stack size)')\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n         success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if tx['sdf']]"
      }
    ]
  },
  {
    "sha": "5ffaf883b93fb8d3d841c36e808b90d61d39d492",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmZhZjg4M2I5M2ZiOGQzZDg0MWMzNmU4MDhiOTBkNjFkMzlkNDky",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-01-14T18:20:17Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-28T08:04:59Z"
      },
      "message": "test: eliminiated magic numbers in feature_csv_activation.py",
      "tree": {
        "sha": "ce96cad876d162419947d34ed2ac07a17d6aeced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce96cad876d162419947d34ed2ac07a17d6aeced"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ffaf883b93fb8d3d841c36e808b90d61d39d492",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffaf883b93fb8d3d841c36e808b90d61d39d492",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ffaf883b93fb8d3d841c36e808b90d61d39d492",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffaf883b93fb8d3d841c36e808b90d61d39d492/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09f706ab8e47ddfdfa41418f2e7cb6d87661147a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09f706ab8e47ddfdfa41418f2e7cb6d87661147a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3c923f9f1dcec03e1c7155ac41c5df7790599593",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ffaf883b93fb8d3d841c36e808b90d61d39d492/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ffaf883b93fb8d3d841c36e808b90d61d39d492/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=5ffaf883b93fb8d3d841c36e808b90d61d39d492",
        "patch": "@@ -57,6 +57,8 @@\n     softfork_active,\n )\n \n+TESTING_TX_COUNT = 83  # Number of testing transactions: 1 BIP113 tx, 16 BIP68 txs, 66 BIP112 txs (see comments above)\n+COINBASE_BLOCK_COUNT = TESTING_TX_COUNT  # Number of coinbase blocks we need to generate as inputs for our txs\n BASE_RELATIVE_LOCKTIME = 10\n CSV_ACTIVATION_HEIGHT = 432\n SEQ_DISABLE_FLAG = 1 << 31\n@@ -188,15 +190,16 @@ def run_test(self):\n         self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n         long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n         self.nodes[0].setmocktime(long_past_time - 100)  # enough so that the generated blocks will still all be before long_past_time\n-        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2 * 32 + 2)  # 83 blocks generated for inputs\n+        self.coinbase_blocks = self.nodes[0].generate(COINBASE_BLOCK_COUNT)  # blocks generated for inputs\n         self.nodes[0].setmocktime(0)  # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n-        self.tipheight = 83  # height of the next block to build\n+        self.tipheight = COINBASE_BLOCK_COUNT  # height of the next block to build\n         self.last_block_time = long_past_time\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         # Activation height is hardcoded\n-        test_blocks = self.generate_blocks(344)\n+        # We advance to block height five below BIP112 activation for the following tests\n+        test_blocks = self.generate_blocks(CSV_ACTIVATION_HEIGHT-5 - COINBASE_BLOCK_COUNT)\n         self.send_blocks(test_blocks)\n         assert not softfork_active(self.nodes[0], 'csv')\n \n@@ -239,7 +242,7 @@ def run_test(self):\n         self.tip = int(inputblockhash, 16)\n         self.tipheight += 1\n         self.last_block_time += 600\n-        assert_equal(len(self.nodes[0].getblock(inputblockhash, True)[\"tx\"]), 83 + 1)\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash, True)[\"tx\"]), TESTING_TX_COUNT + 1)\n \n         # 2 more version 4 blocks\n         test_blocks = self.generate_blocks(2)"
      }
    ]
  }
]