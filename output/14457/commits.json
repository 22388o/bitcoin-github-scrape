[
  {
    "sha": "59e387705c7e55ec40400301346354fa2d0c613f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWUzODc3MDVjN2U1NWVjNDA0MDAzMDEzNDYzNTRmYTJkMGM2MTNm",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-08T08:56:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-11-27T22:53:53Z"
      },
      "message": "test: add invalid tx templates for use in functional tests\n\nAdd templates for easily constructing different kinds of invalid\ntransactions and use them in feature_block and p2p_invalid_tx.",
      "tree": {
        "sha": "612d1ebcc06d97f54f5cc8e3b609f8812a1670ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/612d1ebcc06d97f54f5cc8e3b609f8812a1670ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59e387705c7e55ec40400301346354fa2d0c613f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e387705c7e55ec40400301346354fa2d0c613f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59e387705c7e55ec40400301346354fa2d0c613f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e387705c7e55ec40400301346354fa2d0c613f/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4eaaa6ac53606a1533b56050af77961d8c27dc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4eaaa6ac53606a1533b56050af77961d8c27dc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4eaaa6ac53606a1533b56050af77961d8c27dc7"
      }
    ],
    "stats": {
      "total": 274,
      "additions": 254,
      "deletions": 20
    },
    "files": [
      {
        "sha": "02deae92f330169bc7994b3d90ff50715f8bfa1e",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "added",
        "additions": 180,
        "deletions": 0,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=59e387705c7e55ec40400301346354fa2d0c613f",
        "patch": "@@ -0,0 +1,180 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Templates for constructing various sorts of invalid transactions.\n+\n+These templates (or an iterator over all of them) can be reused in different\n+contexts to test using a number of invalid transaction types.\n+\n+Hopefully this makes it easier to get coverage of a full variety of tx\n+validation checks through different interfaces (AcceptBlock, AcceptToMemPool,\n+etc.) without repeating ourselves.\n+\n+Invalid tx cases not covered here can be found by running:\n+\n+    $ diff \\\n+      <(grep -IREho \"bad-txns[a-zA-Z-]+\" src | sort -u) \\\n+      <(grep -IEho \"bad-txns[a-zA-Z-]+\" test/functional/data/invalid_txs.py | sort -u)\n+\n+\"\"\"\n+import abc\n+\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint\n+from test_framework import script as sc\n+from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS\n+\n+basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])\n+\n+\n+class BadTxTemplate:\n+    \"\"\"Allows simple construction of a certain kind of invalid tx. Base class to be subclassed.\"\"\"\n+    __metaclass__ = abc.ABCMeta\n+\n+    # The expected error code given by bitcoind upon submission of the tx.\n+    reject_reason = \"\"\n+\n+    # Only specified if it differs from mempool acceptance error.\n+    block_reject_reason = \"\"\n+\n+    # Do we expect to be disconnected after submitting this tx?\n+    expect_disconnect = False\n+\n+    # Is this tx considered valid when included in a block, but not for acceptance into\n+    # the mempool (i.e. does it violate policy but not consensus)?\n+    valid_in_block = False\n+\n+    def __init__(self, *, spend_tx=None, spend_block=None):\n+        self.spend_tx = spend_block.vtx[0] if spend_block else spend_tx\n+        self.spend_avail = sum(o.nValue for o in self.spend_tx.vout)\n+        self.valid_txin = CTxIn(COutPoint(self.spend_tx.sha256, 0), b\"\", 0xffffffff)\n+\n+    @abc.abstractmethod\n+    def get_tx(self, *args, **kwargs):\n+        \"\"\"Return a CTransaction that is invalid per the subclass.\"\"\"\n+        pass\n+\n+\n+class OutputMissing(BadTxTemplate):\n+    reject_reason = \"bad-txns-vout-empty\"\n+    expect_disconnect = False\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vin.append(self.valid_txin)\n+        tx.calc_sha256()\n+        return tx\n+\n+\n+class InputMissing(BadTxTemplate):\n+    reject_reason = \"bad-txns-vin-empty\"\n+    expect_disconnect = False\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vout.append(CTxOut(0, sc.CScript([sc.OP_TRUE] * 100)))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n+class SizeTooSmall(BadTxTemplate):\n+    reject_reason = \"tx-size-small\"\n+    expect_disconnect = False\n+    valid_in_block = True\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vin.append(self.valid_txin)\n+        tx.vout.append(CTxOut(0, sc.CScript([sc.OP_TRUE])))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n+class BadInputOutpointIndex(BadTxTemplate):\n+    # Won't be rejected - nonexistent outpoint index is treated as an orphan since the coins\n+    # database can't distinguish between spent outpoints and outpoints which never existed.\n+    reject_reason = None\n+    expect_disconnect = False\n+\n+    def get_tx(self):\n+        num_indices = len(self.spend_tx.vin)\n+        bad_idx = num_indices + 100\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.spend_tx.sha256, bad_idx), b\"\", 0xffffffff))\n+        tx.vout.append(CTxOut(0, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n+class DuplicateInput(BadTxTemplate):\n+    reject_reason = 'bad-txns-inputs-duplicate'\n+    expect_disconnect = True\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vin.append(self.valid_txin)\n+        tx.vin.append(self.valid_txin)\n+        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n+class NonexistentInput(BadTxTemplate):\n+    reject_reason = None  # Added as an orphan tx.\n+    expect_disconnect = False\n+\n+    def get_tx(self):\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.spend_tx.sha256 + 1, 0), b\"\", 0xffffffff))\n+        tx.vin.append(self.valid_txin)\n+        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+\n+class SpendTooMuch(BadTxTemplate):\n+    reject_reason = 'bad-txns-in-belowout'\n+    expect_disconnect = True\n+\n+    def get_tx(self):\n+        return create_tx_with_script(\n+            self.spend_tx, 0, script_pub_key=basic_p2sh, amount=(self.spend_avail + 1))\n+\n+\n+class SpendNegative(BadTxTemplate):\n+    reject_reason = 'bad-txns-vout-negative'\n+    expect_disconnect = True\n+\n+    def get_tx(self):\n+        return create_tx_with_script(self.spend_tx, 0, amount=-1)\n+\n+\n+class InvalidOPIFConstruction(BadTxTemplate):\n+    reject_reason = \"mandatory-script-verify-flag-failed (Invalid OP_IF construction)\"\n+    expect_disconnect = True\n+    valid_in_block = True\n+\n+    def get_tx(self):\n+        return create_tx_with_script(\n+            self.spend_tx, 0, script_sig=b'\\x64' * 35,\n+            amount=(self.spend_avail // 2))\n+\n+\n+class TooManySigops(BadTxTemplate):\n+    reject_reason = \"bad-txns-too-many-sigops\"\n+    block_reject_reason = \"bad-blk-sigops, out-of-bounds SigOpCount\"\n+    expect_disconnect = False\n+\n+    def get_tx(self):\n+        lotsa_checksigs = sc.CScript([sc.OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n+        return create_tx_with_script(\n+            self.spend_tx, 0,\n+            script_pub_key=lotsa_checksigs,\n+            amount=1)\n+\n+\n+def iter_all_templates():\n+    \"\"\"Iterate through all bad transaction template types.\"\"\"\n+    return BadTxTemplate.__subclasses__()"
      },
      {
        "sha": "d90698eca767bf586fdb326cb8dd838afc1817f6",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 54,
        "deletions": 12,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=59e387705c7e55ec40400301346354fa2d0c613f",
        "patch": "@@ -7,7 +7,13 @@\n import struct\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script, get_legacy_sigopcount_block\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+    create_tx_with_script,\n+    get_legacy_sigopcount_block,\n+    MAX_BLOCK_SIGOPS,\n+)\n from test_framework.key import CECKey\n from test_framework.messages import (\n     CBlock,\n@@ -45,8 +51,7 @@\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n-\n-MAX_BLOCK_SIGOPS = 20000\n+from data import invalid_txs\n \n #  Use this class for tests that require behavior other than normal \"mininode\" behavior.\n #  For now, it is used to serialize a bloated varint (b64).\n@@ -95,16 +100,21 @@ def run_test(self):\n         self.save_spendable_output()\n         self.sync_blocks([b0])\n \n+        # These constants chosen specifically to trigger an immature coinbase spend\n+        # at a certain time below.\n+        NUM_BUFFER_BLOCKS_TO_GENERATE = 99\n+        NUM_OUTPUTS_TO_COLLECT = 33\n+\n         # Allow the block to mature\n         blocks = []\n-        for i in range(99):\n-            blocks.append(self.next_block(5000 + i))\n+        for i in range(NUM_BUFFER_BLOCKS_TO_GENERATE):\n+            blocks.append(self.next_block(\"maturitybuffer.{}\".format(i)))\n             self.save_spendable_output()\n         self.sync_blocks(blocks)\n \n         # collect spendable outputs now to avoid cluttering the code later on\n         out = []\n-        for i in range(33):\n+        for i in range(NUM_OUTPUTS_TO_COLLECT):\n             out.append(self.get_spendable_output())\n \n         # Start by building a couple of blocks on top (which output is spent is\n@@ -116,7 +126,39 @@ def run_test(self):\n         b2 = self.next_block(2, spend=out[1])\n         self.save_spendable_output()\n \n-        self.sync_blocks([b1, b2])\n+        self.sync_blocks([b1, b2], timeout=4)\n+\n+        # Select a txn with an output eligible for spending. This won't actually be spent,\n+        # since we're testing submission of a series of blocks with invalid txns.\n+        attempt_spend_tx = out[2]\n+\n+        # Submit blocks for rejection, each of which contains a single transaction\n+        # (aside from coinbase) which should be considered invalid.\n+        for TxTemplate in invalid_txs.iter_all_templates():\n+            template = TxTemplate(spend_tx=attempt_spend_tx)\n+\n+            # Something about the serialization code for missing inputs creates\n+            # a different hash in the test client than on bitcoind, resulting\n+            # in a mismatching merkle root during block validation.\n+            # Skip until we figure out what's going on.\n+            if TxTemplate == invalid_txs.InputMissing:\n+                continue\n+            if template.valid_in_block:\n+                continue\n+\n+            self.log.info(\"Reject block with invalid tx: %s\", TxTemplate.__name__)\n+            blockname = \"for_invalid.%s\" % TxTemplate.__name__\n+            badblock = self.next_block(blockname)\n+            badtx = template.get_tx()\n+            self.sign_tx(badtx, attempt_spend_tx)\n+            badtx.rehash()\n+            badblock = self.update_block(blockname, [badtx])\n+            self.sync_blocks(\n+                [badblock], success=False,\n+                reject_reason=(template.block_reject_reason or template.reject_reason),\n+                reconnect=True, timeout=2)\n+\n+            self.move_tip(2)\n \n         # Fork like this:\n         #\n@@ -1288,7 +1330,7 @@ def update_block(self, block_number, new_transactions):\n         self.blocks[block_number] = block\n         return block\n \n-    def bootstrap_p2p(self):\n+    def bootstrap_p2p(self, timeout=10):\n         \"\"\"Add a P2P connection to the node.\n \n         Helper to connect and wait for version handshake.\"\"\"\n@@ -1299,15 +1341,15 @@ def bootstrap_p2p(self):\n         # an INV for the next block and receive two getheaders - one for the\n         # IBD and one for the INV. We'd respond to both and could get\n         # unexpectedly disconnected if the DoS score for that error is 50.\n-        self.nodes[0].p2p.wait_for_getheaders(timeout=5)\n+        self.nodes[0].p2p.wait_for_getheaders(timeout=timeout)\n \n-    def reconnect_p2p(self):\n+    def reconnect_p2p(self, timeout=60):\n         \"\"\"Tear down and bootstrap the P2P connection to the node.\n \n         The node gets disconnected several times in this test. This helper\n         method reconnects the p2p and restarts the network thread.\"\"\"\n         self.nodes[0].disconnect_p2ps()\n-        self.bootstrap_p2p()\n+        self.bootstrap_p2p(timeout=timeout)\n \n     def sync_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, timeout=60):\n         \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n@@ -1316,7 +1358,7 @@ def sync_blocks(self, blocks, success=True, reject_reason=None, force_send=False\n         self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_reason=reject_reason, force_send=force_send, timeout=timeout, expect_disconnect=reconnect)\n \n         if reconnect:\n-            self.reconnect_p2p()\n+            self.reconnect_p2p(timeout=timeout)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "1b18dd3e58265a63978c44293a5bd2e6a89bb518",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=59e387705c7e55ec40400301346354fa2d0c613f",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test node responses to invalid transactions.\n \n In this test we connect to one node over p2p, and test tx requests.\"\"\"\n-from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n+from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import (\n     COIN,\n     COutPoint,\n@@ -19,6 +19,7 @@\n     assert_equal,\n     wait_until,\n )\n+from data import invalid_txs\n \n \n class InvalidTxRequestTest(BitcoinTestFramework):\n@@ -63,12 +64,21 @@ def run_test(self):\n         self.log.info(\"Mature the block.\")\n         self.nodes[0].generatetoaddress(100, self.nodes[0].get_deterministic_priv_key().address)\n \n-        # b'\\x64' is OP_NOTIF\n-        # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        # and we get disconnected immediately\n-        self.log.info('Test a transaction that is rejected')\n-        tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=b'\\x64' * 35, amount=50 * COIN - 12000)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        # Iterate through a list of known invalid transaction types, ensuring each is\n+        # rejected. Some are consensus invalid and some just violate policy.\n+        for BadTxTemplate in invalid_txs.iter_all_templates():\n+            self.log.info(\"Testing invalid transaction: %s\", BadTxTemplate.__name__)\n+            template = BadTxTemplate(spend_block=block1)\n+            tx = template.get_tx()\n+            node.p2p.send_txs_and_test(\n+                [tx], node, success=False,\n+                expect_disconnect=template.expect_disconnect,\n+                reject_reason=template.reject_reason,\n+            )\n+\n+            if template.expect_disconnect:\n+                self.log.info(\"Reconnecting to peer\")\n+                self.reconnect_p2p()\n \n         # Make two p2p connections to provide the node with orphans\n         # * p2ps[0] will send valid orphan txs (one with low fee)"
      },
      {
        "sha": "7679ea53989396d6dfa79f9929d02cad49c7b622",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e387705c7e55ec40400301346354fa2d0c613f/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=59e387705c7e55ec40400301346354fa2d0c613f",
        "patch": "@@ -41,6 +41,8 @@\n from .util import assert_equal\n from io import BytesIO\n \n+MAX_BLOCK_SIGOPS = 20000\n+\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n "
      },
      {
        "sha": "f0fcd31922a0cf97106fc36fed3a2ca1036284c2",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e387705c7e55ec40400301346354fa2d0c613f/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e387705c7e55ec40400301346354fa2d0c613f/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=59e387705c7e55ec40400301346354fa2d0c613f",
        "patch": "@@ -16,4 +16,4 @@ fi\n vulture \\\n     --min-confidence 60 \\\n     --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey\" \\\n-    $(git ls-files -- \"*.py\" \":(exclude)contrib/\")\n+    $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")"
      }
    ]
  }
]