[
  {
    "sha": "ebf313393085183c1e2ff8ec85ba4070625128df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmYzMTMzOTMwODUxODNjMWUyZmY4ZWM4NWJhNDA3MDYyNTEyOGRm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-18T19:49:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Add keypoolcritical\n\nAdd a -keypoolcritical option. If an HD wallet's keypool drops below\nthis size and can't be topped up (since the wallet is encrypted), stop\nthe node.",
      "tree": {
        "sha": "75413ee3af161ea4c95c10be6ed598d648202e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75413ee3af161ea4c95c10be6ed598d648202e36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebf313393085183c1e2ff8ec85ba4070625128df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf313393085183c1e2ff8ec85ba4070625128df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf313393085183c1e2ff8ec85ba4070625128df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf313393085183c1e2ff8ec85ba4070625128df/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 39,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d1c2f34cae1d3d12be52e562bcac50ffa0597b7e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf313393085183c1e2ff8ec85ba4070625128df/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf313393085183c1e2ff8ec85ba4070625128df/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ebf313393085183c1e2ff8ec85ba4070625128df",
        "patch": "@@ -1644,6 +1644,10 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n \n         fScanningWallet = false;\n     }\n+\n+    // Check that we haven't dropped below the keypool_critical threshold.\n+    ShutdownIfKeypoolCritical();\n+\n     return ret;\n }\n \n@@ -3641,6 +3645,25 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::ShutdownIfKeypoolCritical() {\n+    LOCK(cs_wallet);\n+    unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+    if (IsHDEnabled() && !HasUnusedKeys(keypool_critical)) {\n+        // if the remaining keypool size is below the gap limit, shutdown\n+        LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n+                  __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n+        const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrypted. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n+                                      \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n+                                      \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n+                                      \"You can manually top-up your wallet keypool as follows:\\n\"\n+                                      \" - restart bitcoin with -keypoolcritical set to 0 (to prevent bitcoind from shutting down again)\\n\"\n+                                      \" - unlock the wallet using walletpassphrase (to top up the keypool)\\n\"\n+                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+        uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n+        StartShutdown();\n+    }\n+}\n+\n void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n {\n     AssertLockHeld(cs_wallet);\n@@ -3921,6 +3944,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n \n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+        strUsage += HelpMessageOpt(\"-keypoolcritical\", strprintf(_(\"If the keypool drops below this number of keys and we are unable to generate new keys, shutdown (default: %u)\"), DEFAULT_KEYPOOL_CRITICAL));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n         strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n     }\n@@ -4041,6 +4065,16 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Make sure we have enough keys in our keypool if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+        unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n+        if (keypool_size < keypool_critical) {\n+            LogPrintf(\"Parameter Interaction: keypool critical size (%d) must be smaller than keypool size (%d)\\n\", keypool_critical, keypool_size);\n+            ForceSetArg(\"-keypool\", std::to_string(keypool_critical));\n+        }\n+\n+    }\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n "
      },
      {
        "sha": "0a9e26fe18346a83faf9a566a8e4a3817d5a70ad",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf313393085183c1e2ff8ec85ba4070625128df/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf313393085183c1e2ff8ec85ba4070625128df/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ebf313393085183c1e2ff8ec85ba4070625128df",
        "patch": "@@ -41,6 +41,8 @@ extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+//! Shut down if the keypool falls below this size\n+static const unsigned int DEFAULT_KEYPOOL_CRITICAL = 500;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default\n@@ -979,6 +981,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+    void ShutdownIfKeypoolCritical();\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n      */"
      },
      {
        "sha": "aa7845153e31989fe1915a4544286d414c55cbf2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf313393085183c1e2ff8ec85ba4070625128df/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf313393085183c1e2ff8ec85ba4070625128df/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=ebf313393085183c1e2ff8ec85ba4070625128df",
        "patch": "@@ -216,7 +216,7 @@ def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, b\n         datadir = os.path.join(dirname, \"node\" + str(i))\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n+        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-keypoolcritical=0\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n         if extra_args is not None:\n             args.extend(extra_args)\n         self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n@@ -386,7 +386,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-keypoolcritical=0\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.bitcoind_processes[i] = subprocess.Popen(args)"
      }
    ]
  },
  {
    "sha": "02d69ae43d30e32297198f2a3c0a84e132299520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ2OWFlNDNkMzBlMzIyOTcxOThmMmEzYzBhODRlMTMyMjk5NTIw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-21T13:58:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Add keypoolmin\n\nIf an HD wallet's keypool falls below keypoolmin, don't update its best\nblock until the keypool has been topped up.",
      "tree": {
        "sha": "0ba0980b40644e8bc57a1908340eb2821e7c489c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ba0980b40644e8bc57a1908340eb2821e7c489c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d69ae43d30e32297198f2a3c0a84e132299520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d69ae43d30e32297198f2a3c0a84e132299520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d69ae43d30e32297198f2a3c0a84e132299520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d69ae43d30e32297198f2a3c0a84e132299520/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebf313393085183c1e2ff8ec85ba4070625128df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf313393085183c1e2ff8ec85ba4070625128df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf313393085183c1e2ff8ec85ba4070625128df"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "103598870aedd6a9b1927c0c986073e1fc67f4af",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d69ae43d30e32297198f2a3c0a84e132299520/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d69ae43d30e32297198f2a3c0a84e132299520/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=02d69ae43d30e32297198f2a3c0a84e132299520",
        "patch": "@@ -417,6 +417,12 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n+    LOCK(cs_wallet); //nWalletMaxVersion\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && !HasUnusedKeys(keypool_min)) {\n+        // If the keypool has dropped below -keypoolmin, then don't update the bestblock height. We can rescan later once the wallet is unlocked.\n+        return;\n+    }\n     CWalletDB walletdb(*dbw);\n     walletdb.WriteBestBlock(loc);\n }\n@@ -3945,6 +3951,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n         strUsage += HelpMessageOpt(\"-keypoolcritical\", strprintf(_(\"If the keypool drops below this number of keys and we are unable to generate new keys, shutdown (default: %u)\"), DEFAULT_KEYPOOL_CRITICAL));\n+        strUsage += HelpMessageOpt(\"-keypoolmin\", strprintf(_(\"If the keypool drops below this number of keys and we are unable to generate new keys, don't advance the wallet's best block (default: %u)\"), DEFAULT_KEYPOOL_MIN));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n         strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n     }"
      },
      {
        "sha": "ac47b1dffa8d955d578e498cd7a8b0677187aed3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d69ae43d30e32297198f2a3c0a84e132299520/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d69ae43d30e32297198f2a3c0a84e132299520/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=02d69ae43d30e32297198f2a3c0a84e132299520",
        "patch": "@@ -40,7 +40,13 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n+//! Default size for the keypool. Always try to top up the keypool to have this\n+//  many keys. For an HD split wallet, have this many keys in each of the\n+//  internal/external chains\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+//! Don't update wallet's best block if keypool falls below this size (to avoid\n+//  not detecting transactions)\n+static const unsigned int DEFAULT_KEYPOOL_MIN = 500;\n //! Shut down if the keypool falls below this size\n static const unsigned int DEFAULT_KEYPOOL_CRITICAL = 500;\n //! -paytxfee default"
      }
    ]
  },
  {
    "sha": "60c74c3a4a4cb69cf3a92a9d37476f735071703b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGM3NGMzYTRhNGNiNjljZjNhOTJhOWQzNzQ3NmY3MzUwNzE3MDNi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-04T17:14:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Add m_update_best_block\n\nm_update_best_block is set to false the first time we try to\nSetBestChain and the keypool has falled below keypool_min. After that we\nwon't try to update the wallet's best block until we've rescanned from\nthat point with the keypool above keypool_min.",
      "tree": {
        "sha": "887e9bd53acaf418925accd9ef7e7ca423b483c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/887e9bd53acaf418925accd9ef7e7ca423b483c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60c74c3a4a4cb69cf3a92a9d37476f735071703b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60c74c3a4a4cb69cf3a92a9d37476f735071703b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60c74c3a4a4cb69cf3a92a9d37476f735071703b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60c74c3a4a4cb69cf3a92a9d37476f735071703b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d69ae43d30e32297198f2a3c0a84e132299520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d69ae43d30e32297198f2a3c0a84e132299520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d69ae43d30e32297198f2a3c0a84e132299520"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf59da3cbc0cd6f55f0c60fd3211d14457107e8f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c74c3a4a4cb69cf3a92a9d37476f735071703b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c74c3a4a4cb69cf3a92a9d37476f735071703b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=60c74c3a4a4cb69cf3a92a9d37476f735071703b",
        "patch": "@@ -419,8 +419,14 @@ void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n     LOCK(cs_wallet); //nWalletMaxVersion\n     unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n-    if (IsHDEnabled() && !HasUnusedKeys(keypool_min)) {\n+    if (IsHDEnabled() && (!m_update_best_block || !HasUnusedKeys(keypool_min))) {\n         // If the keypool has dropped below -keypoolmin, then don't update the bestblock height. We can rescan later once the wallet is unlocked.\n+\n+        if (m_update_best_block) {\n+            LogPrintf(\"Keypool has fallen below keypool_min (%s). Wallet will no longer watch for new transactions and best block height will not be advanced.\\n\", keypool_min);\n+            LogPrintf(\"Unlock wallet, top up keypool and rescan to resume watching for new transactions.\\n\");\n+            m_update_best_block = false;\n+        }\n         return;\n     }\n     CWalletDB walletdb(*dbw);\n@@ -1651,6 +1657,23 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n         fScanningWallet = false;\n     }\n \n+    // Update m_update_best_block if we've scanned from before the previous best block and keypool level is still above Keypool_min\n+    CWalletDB walletdb(*dbw);\n+    CBlockLocator loc;\n+    walletdb.ReadBestBlock(loc);\n+    CBlockIndex* pindexBestBlock = FindForkInGlobalIndex(chainActive, loc);\n+    if (IsHDEnabled() && pindexStart && pindexStart->nHeight <= pindexBestBlock->nHeight) {\n+        m_update_best_block = HasUnusedKeys(GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN));\n+    }\n+\n+    // If the keypool has dropped below -keypoolmin, then stop updating the bestblock height. We can rescan later once the wallet is unlocked.\n+    unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n+    if (IsHDEnabled() && !HasUnusedKeys(keypool_min) && m_update_best_block) {\n+        LogPrintf(\"Keypool has fallen below keypool_min (%s). Wallet will no longer watch for new transactions and best block height will not be advanced.\\n\", keypool_min);\n+        LogPrintf(\"Unlock wallet, top up keypool and rescan to resume watching for new transactions.\\n\");\n+        m_update_best_block = false;\n+    }\n+\n     // Check that we haven't dropped below the keypool_critical threshold.\n     ShutdownIfKeypoolCritical();\n \n@@ -4082,6 +4105,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n \n     }\n+\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n "
      },
      {
        "sha": "7f00632c2d76c068b0b25831ff5f4879de61bae0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c74c3a4a4cb69cf3a92a9d37476f735071703b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c74c3a4a4cb69cf3a92a9d37476f735071703b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=60c74c3a4a4cb69cf3a92a9d37476f735071703b",
        "patch": "@@ -665,6 +665,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static std::atomic<bool> fFlushScheduled;\n     std::atomic<bool> fAbortRescan;\n     std::atomic<bool> fScanningWallet;\n+    bool m_update_best_block;\n \n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n@@ -800,6 +801,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nRelockTime = 0;\n         fAbortRescan = false;\n         fScanningWallet = false;\n+        m_update_best_block = true;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;"
      }
    ]
  },
  {
    "sha": "72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmYwYmZmNGZiZDM1YjRkMmY0OWQxOWE2ZmI1YjgyOTlhMzBhOGFh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-27T06:40:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Add bypasskeypoolcritical\n\nbypasskeypoolcritical is a hidden command line option that allows the\nuser to restart bitcoin with an encrypted wallet below the\nkeypool_critical threshold. Bitcoind won't shut down, but it also won't\nadvance the wallet best block until the keypool is topped up.",
      "tree": {
        "sha": "b16cbc12bde47ee6e3acc26b783eb644093693fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b16cbc12bde47ee6e3acc26b783eb644093693fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60c74c3a4a4cb69cf3a92a9d37476f735071703b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60c74c3a4a4cb69cf3a92a9d37476f735071703b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60c74c3a4a4cb69cf3a92a9d37476f735071703b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a102a483a14812d0d23df34f4339f91109866534",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
        "patch": "@@ -419,7 +419,8 @@ void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n     LOCK(cs_wallet); //nWalletMaxVersion\n     unsigned int keypool_min = GetArg(\"-keypoolmin\", DEFAULT_KEYPOOL_MIN);\n-    if (IsHDEnabled() && (!m_update_best_block || !HasUnusedKeys(keypool_min))) {\n+    if (GetBoolArg(\"-bypasskeypoolcritical\", false) || \n+        (IsHDEnabled() && (!m_update_best_block || !HasUnusedKeys(keypool_min)))) {\n         // If the keypool has dropped below -keypoolmin, then don't update the bestblock height. We can rescan later once the wallet is unlocked.\n \n         if (m_update_best_block) {\n@@ -3677,17 +3678,21 @@ void CReserveKey::ReturnKey()\n void CWallet::ShutdownIfKeypoolCritical() {\n     LOCK(cs_wallet);\n     unsigned int keypool_critical = GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL);\n-    if (IsHDEnabled() && !HasUnusedKeys(keypool_critical)) {\n+    if (!GetBoolArg(\"-bypasskeypoolcritical\", false) &&\n+        IsHDEnabled() &&\n+        !HasUnusedKeys(keypool_critical)) {\n         // if the remaining keypool size is below the gap limit, shutdown\n         LogPrintf(\"%s: Number of keys in keypool is below critical minimum. Shutting down. internal keypool: %d, external keypool: %d, keypool minimum: %d\\n\",\n                   __func__, setInternalKeyPool.size(), setExternalKeyPool.size(), keypool_critical);\n         const std::string error_msg = \"Number of keys in keypool is below critical minimum and the wallet is encrypted. Bitcoin will now shutdown to avoid loss of funds.\\n\"\n                                       \"This is probably because you are restoring an old backup wallet file which has not been topped up with the most recently \"\n                                       \"derived keys, and so you would not detect transactions involving those keys.\\n\"\n                                       \"You can manually top-up your wallet keypool as follows:\\n\"\n-                                      \" - restart bitcoin with -keypoolcritical set to 0 (to prevent bitcoind from shutting down again)\\n\"\n+                                      \" - restart bitcoin with -bypasskeypoolcritical (to prevent bitcoind from shutting down again)\\n\"\n                                       \" - unlock the wallet using walletpassphrase (to top up the keypool)\\n\"\n-                                      \" - restart with -rescan. This will redownload the blockchain if you are running a pruned node.\";\n+                                      \" - restart without -bypasskeypoolcritical.\\n\"\n+                                      \"NOTE: if you have a pruned node that prunes blocks your wallet hasn't scanned yet when restarting with -bypasskeypoolcritical \"\n+                                      \"then you may need to do a complete reindex. Consider raising the prune limit temporarily for both restarts to avoid this.\";\n         uiInterface.ThreadSafeMessageBox(error_msg, \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n     }\n@@ -3971,6 +3976,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     {\n         strUsage += HelpMessageGroup(_(\"Wallet debugging/testing options:\"));\n \n+        strUsage += HelpMessageOpt(\"-bypasskeypoolcritical\", _(\"Bypass keypool critical limit. Don't shutdown the node if keypool drops below keypoolcritical limit (but don't advance BestBlock)\"));\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n         strUsage += HelpMessageOpt(\"-keypoolcritical\", strprintf(_(\"If the keypool drops below this number of keys and we are unable to generate new keys, shutdown (default: %u)\"), DEFAULT_KEYPOOL_CRITICAL));"
      }
    ]
  },
  {
    "sha": "40ce25c812a06c431452c8e423c690e529ffc43b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGNlMjVjODEyYTA2YzQzMTQ1MmM4ZTQyM2M2OTBlNTI5ZmZjNDNi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-04T19:54:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Add fail_on_critical to GetKeyFromPool()\n\nAdds a bool parameter to GetKeyFromPool(), which will cause the function\nto return failure if taking a key from the keypool would result in\nhitting the keypool_critical threshold.",
      "tree": {
        "sha": "fa83266ff7a4fb0cf0f318f33bf096fe563839b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa83266ff7a4fb0cf0f318f33bf096fe563839b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40ce25c812a06c431452c8e423c690e529ffc43b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40ce25c812a06c431452c8e423c690e529ffc43b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40ce25c812a06c431452c8e423c690e529ffc43b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40ce25c812a06c431452c8e423c690e529ffc43b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72f0bff4fbd35b4d2f49d19a6fb5b8299a30a8aa"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9d8cd107e23df1b7afa9bdf1e4b008e5e8b3931c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40ce25c812a06c431452c8e423c690e529ffc43b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40ce25c812a06c431452c8e423c690e529ffc43b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=40ce25c812a06c431452c8e423c690e529ffc43b",
        "patch": "@@ -3444,11 +3444,21 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n     LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n-bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n+bool CWallet::GetKeyFromPool(CPubKey& result, bool internal, bool fail_on_critical)\n {\n     CKeyPool keypool;\n     {\n         LOCK(cs_wallet);\n+\n+        // First, try to top up the keypool (this is a no-op if wallet is encrypted and locked)\n+        TopUpKeyPool();\n+        if (fail_on_critical && IsHDEnabled() &&\n+            !HasUnusedKeys(GetArg(\"-keypoolcritical\", DEFAULT_KEYPOOL_CRITICAL) + 1)) {\n+            // If getting a key from the pool would result in us dropping to\n+            // the keypool_critical threshold, fail\n+            return false;\n+        }\n+\n         int64_t nIndex = 0;\n         ReserveKeyFromKeyPool(nIndex, keypool, internal);\n         if (nIndex == -1)"
      },
      {
        "sha": "796003c28445bf122b9a67585d650f3368155a90",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40ce25c812a06c431452c8e423c690e529ffc43b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40ce25c812a06c431452c8e423c690e529ffc43b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=40ce25c812a06c431452c8e423c690e529ffc43b",
        "patch": "@@ -987,7 +987,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n-    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false, bool fail_on_critical = false);\n     int64_t GetOldestKeyPoolTime();\n     void ShutdownIfKeypoolCritical();\n     /**"
      }
    ]
  },
  {
    "sha": "1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTkxNmVkYjhlOGM2YmNjNWU4YTcxYjFjMjgxOWZhOWRiNTM5ZDNl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-03T19:55:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Don't allow getnewaddress to drop keypool to critical.\n\nIf getting a new address would cause the keypool to drop below the\nkeypool_critical threshold, fail the RPC and prompt the user to unlock\nthe wallet so the keypool can be topped up.",
      "tree": {
        "sha": "bdfe5a8cc0d3d8ad527f77ae9322afd88725ae4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdfe5a8cc0d3d8ad527f77ae9322afd88725ae4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40ce25c812a06c431452c8e423c690e529ffc43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40ce25c812a06c431452c8e423c690e529ffc43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40ce25c812a06c431452c8e423c690e529ffc43b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "90d826c32f663251f9673365c6122030f72f5dc8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
        "patch": "@@ -161,8 +161,8 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwallet->GetKeyFromPool(newKey)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    if (!pwallet->GetKeyFromPool(newKey, false, true)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool is at critical level or has run out, please call keypoolrefill first\");\n     }\n     CKeyID keyID = newKey.GetID();\n "
      },
      {
        "sha": "6b3642660ffd819074b4e4896e91fa1697c1f952",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
        "patch": "@@ -27,7 +27,7 @@ def run_test(self):\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_jsonrpc(-12, \"Keypool is at critical level or has run out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n@@ -57,7 +57,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         assert(len(addr) == 6)\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_jsonrpc(-12, \"Keypool is at critical level or has run out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n         nodes[0].walletpassphrase('test', 1)"
      }
    ]
  },
  {
    "sha": "e29ea7eac8742c5fb6aed1ca898701985a37c233",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjllYTdlYWM4NzQyYzVmYjZhZWQxY2E4OTg3MDE5ODVhMzdjMjMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-03T19:56:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] Don't let keypool drop below critical\n\nIn almost all cases, a call to GetKeyFromPool() should fail if getting a\nnew key would result in the keypool dropping below critical.",
      "tree": {
        "sha": "d156bb4f1a9b2e71194c57e1ba465277d0e0e3fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d156bb4f1a9b2e71194c57e1ba465277d0e0e3fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e29ea7eac8742c5fb6aed1ca898701985a37c233",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e29ea7eac8742c5fb6aed1ca898701985a37c233",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e29ea7eac8742c5fb6aed1ca898701985a37c233",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e29ea7eac8742c5fb6aed1ca898701985a37c233/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a916edb8e8c6bcc5e8a71b1c2819fa9db539d3e"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 9,
      "deletions": 21
    },
    "files": [
      {
        "sha": "6e9ffbc9e89a597278cb871a2f211caa189ba1a9",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e29ea7eac8742c5fb6aed1ca898701985a37c233/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e29ea7eac8742c5fb6aed1ca898701985a37c233/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=e29ea7eac8742c5fb6aed1ca898701985a37c233",
        "patch": "@@ -369,17 +369,14 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     {\n         // Generate a new address to associate with given label\n         CPubKey newKey;\n-        if(!wallet->GetKeyFromPool(newKey))\n-        {\n+        if (!wallet->GetKeyFromPool(newKey, false, true)) {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n-            if(!ctx.isValid())\n-            {\n+            if(!ctx.isValid()) {\n                 // Unlock wallet failed or was cancelled\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!wallet->GetKeyFromPool(newKey))\n-            {\n+            if (!wallet->GetKeyFromPool(newKey, false, true)) {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();\n             }"
      },
      {
        "sha": "e226b712d6584c866bbc10a6486b2e938c1f3211",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e29ea7eac8742c5fb6aed1ca898701985a37c233/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e29ea7eac8742c5fb6aed1ca898701985a37c233/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=e29ea7eac8742c5fb6aed1ca898701985a37c233",
        "patch": "@@ -648,7 +648,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         CPubKey newKey;\n-        if (wallet->GetKeyFromPool(newKey)) {\n+        if (wallet->GetKeyFromPool(newKey, false, true)) {\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n "
      },
      {
        "sha": "a5a6bb69fd5ba6196d4958a37cbceb3550f8d23d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e29ea7eac8742c5fb6aed1ca898701985a37c233/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e29ea7eac8742c5fb6aed1ca898701985a37c233/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e29ea7eac8742c5fb6aed1ca898701985a37c233",
        "patch": "@@ -885,8 +885,9 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n \n     // Generate a new key\n     if (bForceNew) {\n-        if (!GetKeyFromPool(account.vchPubKey, false))\n+        if (!GetKeyFromPool(account.vchPubKey, false, true)) {\n             return false;\n+        }\n \n         SetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n         walletdb.WriteAccount(strAccount, account);"
      },
      {
        "sha": "c10b9ef121f9ee23ad783ac5b1f01a9557d8d9c6",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e29ea7eac8742c5fb6aed1ca898701985a37c233/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e29ea7eac8742c5fb6aed1ca898701985a37c233/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=e29ea7eac8742c5fb6aed1ca898701985a37c233",
        "patch": "@@ -44,19 +44,10 @@ def run_test(self):\n         nodes[0].getrawchangeaddress()\n         nodes[0].getrawchangeaddress()\n         nodes[0].getrawchangeaddress()\n-        addr = set()\n         # the next one should fail\n         assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n-        # drain the external keys\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        assert(len(addr) == 6)\n-        # the next one should fail\n+        # getting an external key should also fail now\n         assert_raises_jsonrpc(-12, \"Keypool is at critical level or has run out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n@@ -68,9 +59,8 @@ def run_test(self):\n         assert_equal(nodes[0].getwalletinfo()[\"unlocked_until\"], 0)\n \n         # drain them by mining\n-        nodes[0].generate(1)\n-        nodes[0].generate(1)\n-        nodes[0].generate(1)\n+        for _ in range(6):\n+            nodes[0].generate(1)\n         assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].generate, 1)\n \n         nodes[0].walletpassphrase('test', 100)"
      }
    ]
  },
  {
    "sha": "3140a973c35a4b72a30c57eab47154c0e118e6f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTQwYTk3M2MzNWE0YjcyYTMwYzU3ZWFiNDcxNTRjMGUxMThlNmYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-10T17:51:11Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T15:37:05Z"
      },
      "message": "[wallet] [tests] Add keypool critical functional test\n\nThis updates the keypool-topup.py test script to test the keypool\ncritical functionality (ie the node shuts down if the keypool drops\nbelow the keypool_critical threshold and the wallet can't topup its\nkeypool)",
      "tree": {
        "sha": "03e36afa6345de3a3bf759fbf590173b6fe5626e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03e36afa6345de3a3bf759fbf590173b6fe5626e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3140a973c35a4b72a30c57eab47154c0e118e6f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3140a973c35a4b72a30c57eab47154c0e118e6f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3140a973c35a4b72a30c57eab47154c0e118e6f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3140a973c35a4b72a30c57eab47154c0e118e6f1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e29ea7eac8742c5fb6aed1ca898701985a37c233",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e29ea7eac8742c5fb6aed1ca898701985a37c233",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e29ea7eac8742c5fb6aed1ca898701985a37c233"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 50,
      "deletions": 13
    },
    "files": [
      {
        "sha": "90e68b15104ffd8ea33d2cc4b5069720fb0d29b5",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 50,
        "deletions": 13,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3140a973c35a4b72a30c57eab47154c0e118e6f1/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3140a973c35a4b72a30c57eab47154c0e118e6f1/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=3140a973c35a4b72a30c57eab47154c0e118e6f1",
        "patch": "@@ -6,15 +6,23 @@\n \n Two nodes. Node1 is under test. Node0 is providing transactions and generating blocks.\n \n+Repeat test twice, once with encrypted wallet and once with unencrypted wallet:\n+\n - Start node1, shutdown and backup wallet.\n - Generate 110 keys (enough to drain the keypool). Store key 90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n - Stop node1, clear the datadir, move wallet file back into the datadir and restart node1.\n-- connect node1 to node0. Verify that they sync and node1 receives its funds.\"\"\"\n+- if wallet is unencrypted:\n+    - connect node1 to node0. Verify that they sync and node1 receives its funds.\n+- else wallet is encrypted:\n+    - connect node1 to node0. Verify that node1 shuts down to avoid loss of funds.\n+\"\"\"\n+import os\n import shutil\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n from test_framework.util import (\n     assert_equal,\n+    assert_raises_jsonrpc,\n     connect_nodes_bi,\n     sync_blocks,\n )\n@@ -24,23 +32,41 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20', '-keypoolcritical=20']]\n \n     def run_test(self):\n         self.tmpdir = self.options.tmpdir\n         self.nodes[0].generate(101)\n \n+        self.log.info(\"Test keypool restore (encrypted wallet)\")\n+        self._test_restore(encrypted=True)\n+\n+        self.log.info(\"Test keypool restore (unencrypted wallet)\")\n+        self._test_restore(encrypted=False)\n+\n+    def _test_restore(self, encrypted):\n+\n         self.log.info(\"Make backup of wallet\")\n \n-        self.stop_node(1)\n+        if encrypted:\n+            self.nodes[1].encryptwallet('test')\n+            self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        else:\n+            self.stop_node(1)\n \n         shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n         self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         self.log.info(\"Generate keys for wallet\")\n \n-        for _ in range(90):\n+        for _ in range(80):\n+            self.nodes[1].getnewaddress()\n+        if encrypted:\n+            # Keypool can't top up because the wallet is encrypted\n+            assert_raises_jsonrpc(-12, \"Keypool is at critical level or has run out, please call keypoolrefill first\", self.nodes[1].getnewaddress)\n+            self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(10):\n             addr_oldpool = self.nodes[1].getnewaddress()\n         for _ in range(20):\n             addr_extpool = self.nodes[1].getnewaddress()\n@@ -59,17 +85,28 @@ def run_test(self):\n \n         shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n \n-        self.log.info(\"Verify keypool is restored and balance is correct\")\n+        if encrypted:\n+            self.log.info(\"Encrypted wallet - verify node shuts down to avoid loss of funds\")\n \n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        self.sync_all()\n+            self.assert_start_raises_init_error(1, self.tmpdir, self.extra_args[1], expected_msg=\"Number of keys in keypool is below critical minimum and the wallet is encrypted. Bitcoin will now shutdown to avoid loss of funds.\")\n+\n+            shutil.rmtree(self.tmpdir + \"/node1/regtest/chainstate\")\n+            shutil.rmtree(self.tmpdir + \"/node1/regtest/blocks\")\n+            os.remove(self.tmpdir + \"/node1/regtest/wallet.dat\")\n+            self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+\n+        else:\n+            self.log.info(\"Unencrypted wallet - verify keypool is restored and balance is correct\")\n+\n+            self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+            connect_nodes_bi(self.nodes, 0, 1)\n+            self.sync_all()\n \n-        assert_equal(self.nodes[1].getbalance(), 15)\n-        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+            assert_equal(self.nodes[1].getbalance(), 15)\n+            assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n-        # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/111'\")\n+            # Check that we have marked all keys up to the used keypool key as used\n+            assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/111'\")\n \n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      }
    ]
  }
]