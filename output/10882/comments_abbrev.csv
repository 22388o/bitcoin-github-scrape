instagibbs,2017-07-19T20:03:42Z,There really needs to be some sort of recourse presented to the user upon shutdown.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316500515,316500515,
jnewbery,2017-07-20T15:18:01Z,"Thanks for the review @ryanofsky . I've addressed all of your concerns except the `GetAllReserveKeys()` refactor which can be done later.\n\nAll the changes are in separate fixup commits which can be squashed later.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316736430,316736430,
jnewbery,2017-07-20T15:18:53Z,Test is fixed. It required #10703 since the test involves node1 emitting warnings to stderr.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316736706,316736706,
jnewbery,2017-07-20T17:21:10Z,Squashed down to 4 commits. Will address @instagibbs and @ryanofsky feedback next.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316772655,316772655,
gmaxwell,2017-07-20T18:21:50Z,"Can we make this also suppress the relock while scanning ... so that it's viable to just unlock and have it stay unlocked until its done-ish?\n\nWhat will this do if, without any rescan, I exhaust all the keys in the wallet... will it falsely trigger?",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316788732,316788732,
jnewbery,2017-07-20T20:03:38Z,I've implemented @ryanofsky's suggestion for simplifying `MarkReserveKeysAsUsed()` and improved the error message if the node shuts down.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316814458,316814458,
instagibbs,2017-07-20T20:05:03Z,"light tACK\n\nCan confirm the new directions upon failure to topup using Crypted lead to recovery of proper index position.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-316814806,316814806,
jnewbery,2017-07-21T14:09:34Z,"Added two commits:\n\n1. rename current option `keypoolcritical` - if the keypool falls below this, then shutdown the node\n2. add option `keypoolmin` - if the keypool falls below this, don't update the wallet's best block.\n\nIf people think that's conceptually the right approach, then I'll squash down into sensible commits.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317011192,317011192,
jnewbery,2017-07-21T17:13:58Z,"@ryanofsky I've addressed all of your comments. Let me know if you're happy with the last three commits and I'll squash them down for the benefit of other reviewers,",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317059222,317059222,
jnewbery,2017-07-21T18:25:06Z,"All comments should now be addressed and changes squashed down into 6 commits:\n\n- *Allow tests to pass when stderr is non-empty* is #10703 \n- *MOVEONLY move CAffectedKeysVisitor* is a code move\n- *Add ReserveKey struct and return it from GetAllReserveKeys()* is a slight refactor of existing code\n- *Add keypoolcritical* adds the node shutdown functionality\n- *Add keypoolmin* adds the do",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317076902,317076902,
jnewbery,2017-07-24T16:44:09Z,"Locking issue has been resolved. This should now pass Travis.\n\nI've added a new commit *don't hold cs_LastBlockFile while calling setBestChain*\n",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317482045,317482045,
ryanofsky,2017-07-25T19:42:04Z,"@jnewbery, can you explain the reason for dependency on #10703? It does seem useful to have travis continue checking for unexpected error messages (see https://botbot.me/freenode/bitcoin-core-dev/msg/89036779/)",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317849947,317849947,
MarcoFalke,2017-07-25T21:04:06Z,"After discussion on irc:\n\nWould it be possible to pipe the stderr into a SpooledTempFile instead? This way one can check that the error string matches.\nThe issue with the current approach is that it is active for all tests, even though none of the other tests needs it. This might hide serious bugs by accident.\n\nOne nit: Please remove the execute bit from util.py",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317871742,317871742,
jnewbery,2017-07-26T07:09:14Z,"Reworked with stderr capture/checking done within the test.\n\nAlso addressed @MarcoFalke's nit and rebased.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-317968153,317968153,
TheBlueMatt,2017-07-26T19:15:45Z,"As it is this looks to me to be a major performance regression due to calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe. #10238 is a relatively simple patch to avoid the massive disk churn, but would need rebase. Alternatively, it would be an equivalently simple change to just keep the reserved keys map created in GetAllReserveKeys in memory, and probably even remove more lines ",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318154266,318154266,
ryanofsky,2017-07-26T20:10:20Z,"> As it is this looks to me to be a major performance regression due to calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe. #10238 is a relatively simple patch to avoid the massive disk churn, but would need rebase. Alternatively, it would be an equivalently simple change to just keep the reserved keys map created in GetAllReserveKeys in memory, and probably even remove more line",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318168079,318168079,
TheBlueMatt,2017-07-26T20:58:15Z,"I did https://github.com/TheBlueMatt/bitcoin/commits/2017-07-keypool-topup-no-perf-regression to fix the performance regression, it looks fine to me (note minor changes in ""[wallet] Add keypoolcritical"" which is a bit slower - now must read keypool before erasing, but it shouldn't be nearly as bad and #10238 should fix it) and is really pretty simple.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318180585,318180585,
ryanofsky,2017-07-26T21:06:05Z,"> We instead changed the check for updating SetBestBlock to recognize the condition of the first restart and continue to not update the best block in the wallet. This could detect a separate command line argument such as -bypasskeypoolcritical which is used in that check and the shutdown check.\n\nMaybe we could avoid the need for a -bypasskeypoolcritical command line option with a CWallet ""bool",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318182682,318182682,
sipa,2017-07-27T00:41:58Z,"> As it is this looks to me to be a major performance regression due to calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe. #10238 is a relatively simple patch to avoid the massive disk churn, but would need rebase.\n\nOuch, I wasn't aware that `GetAllReserveKeys` read all the keys from disk. #10283 looks like the right solution, and shouldn't be hard to rebase?",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318223556,318223556,
TheBlueMatt,2017-07-27T00:46:31Z,"I don't believe #10238 fixes the issue directly (doesn't provide the bidirectional mapping, I was incorrect), but is also a nice cleanup.\n\nOn July 26, 2017 8:42:03 PM EDT, Pieter Wuille <notifications@github.com> wrote:\n>> As it is this looks to me to be a major performance regression due to\n>calling GetAllReserveKeys in every matching AddToWalletIfInvolvingMe.\n>#10238 is a relatively simple ",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318224220,318224220,
jnewbery,2017-07-27T06:42:17Z,"Thanks @TheBlueMatt . I've force pushed your branch here.\n\n@morcos - I've added your suggested `bypasskeypoolcritical` option. Can you take a look at the *[wallet] add bypasskeypoolcritical* commit and see if it captures what you were suggesting accurately?\n\n@ryanofsky - I think your solution would involve storing a new key in the wallet DB, since at the moment the only way to rescan is to",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318273491,318273491,
ryanofsky,2017-07-27T10:20:39Z,"> @ryanofskyÂ - I think your solution would involve storing a new key in the wallet DB, since at the moment the only way to rescan is to restart the node. Am I understanding correctly?\n\nNo, you don't need to add anything new to the database, best block is all you need (because bitcoin automatically rescans from best block on startup, and you can initialize `m_update_best_block` based on keypool",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318322124,318322124,
jnewbery,2017-07-28T07:56:33Z,"@TheBlueMatt - I don't fully understand the implications of `m_pool_key_to_id` and returning a const references to the internal cache in `GetAllReserveKeys()`. For example, Cory has suggested that this might not be thread-safe, but perhaps that's ok in wallet code?\n\nReviewers who have previously ACKed this PR - please be aware of the additional commits.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318587360,318587360,
morcos,2017-07-28T09:53:16Z,"@jnewbery I just kind of assumed it was protected by cs_wallet, but we should verify.  \n\nNo my concern still exists.  It returns a const reference but then you immediately copy it to your local variable.  Also in that same code path you call TopUpKeyPool so now there will be more reserved keys but the next time you lookup you are still looking up in your stale copy",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318611517,318611517,
TheBlueMatt,2017-07-30T13:57:10Z,"@jnewbery heh, yea, I just generally always assume everything in wallet takes LOCK2(cs_main, cs_wallet). The GetAllReserveKeys call in rpcdump as well as AddToWalletIfInvolvingMe both take/require cs_wallet, so it looks fine to me?",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318903438,318903438,
jnewbery,2017-07-31T00:08:15Z,"@morcos - please look at commit *fixup: don't make local copy of m_pool_key_to_id*. I think that addresses your point above.\n\n@TheBlueMatt - yes, all access to `m_pool_key_to_id` is protected by cs_wallet. The only place that isn't explicit is in `LoadKeyPool()`. I've added an `AssertLockHeld()` in *fixup: explicitly check lock is held in LoadKeyPool*.\n\nI'll squash both commits if you're h",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318939872,318939872,
morcos,2017-07-31T15:10:59Z,"@jnewbery looks good i think!\n",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319097067,319097067,
jnewbery,2017-08-02T17:02:19Z,@TheBlueMatt I've pushed a fixup commit that addresses your two comments. If you're happy I'll squash.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319734913,319734913,
jnewbery,2017-08-02T19:07:51Z,@TheBlueMatt commits squashed. Ready for final review.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319768388,319768388,
morcos,2017-08-02T19:29:28Z,"~utACK 7cca786~ \n~utACK 9858566~ \n~utACK 7cca786  (don't ask)~\nutACK 85079e6",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319773883,319773883,
jnewbery,2017-08-02T19:29:35Z,Unrebased at @morcos's request. Presquahed branch is here: https://github.com/jnewbery/bitcoin/releases/tag/pr10882.4,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319773920,319773920,
jnewbery,2017-08-02T21:34:31Z,rebased on master. Don't ask,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319805583,319805583,
TheBlueMatt,2017-08-02T23:19:30Z,utACK 85079e6ab3e7d0596c010df22256ccb3c2a9be03 (minus the test bits),https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319824957,319824957,
instagibbs,2017-08-03T01:09:39Z,utACK https://github.com/bitcoin/bitcoin/commit/85079e6ab3e7d0596c010df22256ccb3c2a9be03,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319840013,319840013,
gmaxwell,2017-08-03T07:35:46Z,"I'm still not clear on what prevent a forced shutdown under this pattern: start a new node, sync,  encrypt wallet,  run getnewaddress 501 times, get a payment.    Where is it distinguishing the keypool going under critical while behind vs while current?",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319892566,319892566,
jnewbery,2017-08-03T10:02:31Z,@gmaxwell - currently `getnewaddress` will fail if the keypool has run out. How about we change it so that it fails if it hits the `keypool_critical` limit?,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-319925919,319925919,
gmaxwell,2017-08-03T19:03:14Z,@jnewbery That seems reasonable to me!,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320061048,320061048,
jnewbery,2017-08-03T19:59:16Z,"I've added three new commits:\n\n1. *add HasUnusedKeys() helper* is just a refactor\n2. *return error from getnewaddress if keypool drops to critical* prevents `getnewaddress` from returning a new address if the keypool drops to critical\n3. *add checks for keypool critical* does the same for the other places that `GetKeyFromPool()` is called\n\nI'm not sure if we want (3). It can be omitted",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320074173,320074173,
ryanofsky,2017-08-03T20:39:25Z,"> I'm not sure if we want (3). It can be omitted if not required.\n\nSeems good to me to disallow GetKeyFromPool() generally like this is doing. `getrawchangeaddress` RPC is another thing to consider disabling.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320083591,320083591,
jnewbery,2017-08-04T21:07:59Z,"Pushed a new branch, which I think should address all of @ryanofsky's review comments.\n\nOld branch here for comparison: https://github.com/jnewbery/bitcoin/releases/tag/pr10882.5",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320353581,320353581,
laanwj,2017-08-05T11:52:46Z,"Various issues with Travis have appeared after the last push.\n(I've tried restarting the build and it didn't change anything)",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320439510,320439510,
ryanofsky,2017-08-05T12:05:34Z,"I think this should just be rolled back and merged as [`85079e6`](https://github.com/bitcoin/bitcoin/commits/85079e6ab3e7d0596c010df22256ccb3c2a9be03), which got a bunch of ACKs, and was straightforward, and did the job. The improvements that have been made since then are nice, but fairly minor, and backwards compatible, so they could be done in a separate PR.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320440032,320440032,
laanwj,2017-08-07T06:53:37Z,"@ryanofsky Agree. In any case, we'll need to do *something* here today if this is still to make 0.15.0rc1.\n",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320583637,320583637,
jonasschnelli,2017-08-07T06:54:56Z,"Agree with @ryanofsky.\nutACK the older https://github.com/bitcoin/bitcoin/commit/85079e6ab3e7d0596c010df22256ccb3c2a9be03",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320583861,320583861,
jnewbery,2017-08-07T13:17:21Z,"ok, reverted to https://github.com/bitcoin/bitcoin/commit/85079e6ab3e7d0596c010df22256ccb3c2a9be03\n\nOther branch is here: https://github.com/jnewbery/bitcoin/releases/tag/pr10882.6 . In that branch I fixed one problem with travis (I accidentally removed the `bypasscritical` help text in the rebase). Other problem was `import-rescan.py` failing, which I wasn't able to fix.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320660453,320660453,
ryanofsky,2017-08-07T15:12:08Z,Seems like this can be merged now.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320691438,320691438,
ryanofsky,2017-08-08T15:28:27Z,"From discussion in IRC, this isn't going to be merged as is because it will caused bad upgrade experience (immediately shutting down) for older locked HD wallets with less than 500 keys. John is implementing a solution ""remove [ShutdownIfKeypoolCritical call] from CreateWalletFromFile(), and only call it from AddToWalletIfInvolvingMe() if that function was called by SyncTransaction() (and not by S",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320991831,320991831,
ryanofsky,2017-08-09T13:42:25Z,"This appears to still be in flux\n\nFrom https://botbot.me/freenode/bitcoin-core-dev/msg/89571365/\n> \<jnewbery> I've pushed a branch which I think covers gmaxwell's requested logic:\n> \- don't shutdown the node on startup if keypool is < keypool_critical\n> \- don't shutdown the node if wallet is current\n> \- DO shutdown the node if rescanning and keypool drops below keypool_critical\n",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-321258814,321258814,
jnewbery,2017-08-10T14:19:29Z,"re-ordered commits. The only difference with the new branch is renaming keypool-restore.py to keypool-topup.py, and calling `TopUpKeyPool()` on wallet load for all wallets (not just HD wallets). Old branch is here: https://github.com/jnewbery/bitcoin/releases/tag/pr10882.7",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-321565231,321565231,
jnewbery,2017-08-10T14:27:49Z,As requested by @gmaxwell I've pulled out the basic keypool mark-used/topup functionality into #11022. This PR is a superset of that and also contains the keypool_min/keypool_critical functionality to stop the node/prevent best block from advancing if the keypool drops below a threshold.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-321567840,321567840,
ryanofsky,2017-08-10T16:30:55Z,"Note to reviewers, this is now based on #11022, so changes in commits before ""Addkeypoolmin"" and ""Add keypoolcritical"" can be discussed there.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-321604228,321604228,
MarcoFalke,2017-08-10T19:12:51Z,Cleared the 0.15.0 milestone for now. Let's focus on #11022 first.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-321646238,321646238,
jnewbery,2017-08-14T15:50:35Z,"rebased on master and updated PR notes. Shouldn't be merged without further work to make sure this is safe.\n\n@gmaxwell - could you comment here on the edge cases here (for future reference).",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-322228472,322228472,
jnewbery,2017-08-29T18:26:29Z,"Closing for now. There were several edge-cases discovered that meant that this approach needs a bit more careful consideration. @gmaxwell is going to add some notes to this PR so if we do pick this later, we don't need to rediscover the edge-cases.",https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-325752621,325752621,
droark,2017-12-09T10:04:59Z,@jnewbery - Just happened to come across this PR while going through some commits. Did you ever get the edge case notes?,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-350442502,350442502,
jnewbery,2017-12-09T15:35:42Z,I'm not sure if Greg collected them together. You can probably find them if you scrape through the IRC logs.,https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-350478770,350478770,
ryanofsky,2017-07-19T18:43:31Z,keypoolemin seems misspelled,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128332983,128332983,test/functional/keypool-restore.py
ryanofsky,2017-07-19T20:52:12Z,"On test failure happening this line, I think the reason is that encryptwallet generates an entirely new HD master key, so `addr_enc_oldpool` and `addr_enc_extpool` come from a new HD master key which is not part of ""hd.bak""\n\nRestoring ""hd.enc.bak"" instead of ""hd.bak"" makes this check pass: https://github.com/ryanofsky/bitcoin/commit/93349ad5d915ee152a1a84920f18cbe0cab8b036",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128363814,128363814,test/functional/keypool-restore.py
ryanofsky,2017-07-19T21:10:17Z,Call seems unnecessary since keypool variable isn't used.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128368066,128368066,src/wallet/wallet.cpp
ryanofsky,2017-07-19T21:24:22Z,"FWIW, suggested more detailed wording for the warning message here: https://github.com/bitcoin/bitcoin/pull/10240#discussion_r115049299",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128371350,128371350,src/wallet/wallet.cpp
ryanofsky,2017-07-19T21:27:38Z,"Suggested more detailed wording for of this warning, too: https://github.com/bitcoin/bitcoin/pull/10240#discussion_r115052129",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128372070,128372070,src/wallet/wallet.cpp
ryanofsky,2017-07-19T21:37:20Z,"I don't see any drawbacks to dropping `DEFAULT_KEYPOOL_MIN` condition here and just treating  keypool_min like a normal value the user can control. Keeping this condition might make sense if the `&&` were `||` (to make warning more paranoid), but currently it seems senseless.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128374259,128374259,src/wallet/wallet.cpp
jnewbery,2017-07-19T21:41:24Z,"Thank you for this insight! Yes - that's what was causing the test to fail.\n\nI've made some progress with the test. I've pushed what I've got so far, and hope to finish it off tomorrow morning.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375131,128375131,test/functional/keypool-restore.py
ryanofsky,2017-07-19T21:41:42Z,"Static is a little unusual here, maybe drop it to avoid adding symbols to the binary.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128375201,128375201,src/wallet/wallet.cpp
ryanofsky,2017-07-19T21:52:13Z,"I'm not 100% clear on this, but if this is an hd wallet, but not an hd-split wallet should we only be checking setExternalKeyPool here because setInternalKeyPool will be empty? See\nhttps://github.com/bitcoin/bitcoin/blob/9e8d6a3fb43a2433ef46aaf95511650e3888f730/src/wallet/wallet.cpp#L3202",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128377560,128377560,src/wallet/wallet.cpp
ryanofsky,2017-07-19T22:05:31Z,"It seems like this code would more efficient and maybe simpler if instead of making a set of CKeyID's here, we made a map from CKeyID -> (keypool_index, is_internal) and passed it into MarkReserveKeysAsUsed, so the first two loops in that function could be removed.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128380261,128380261,src/wallet/wallet.cpp
ryanofsky,2017-07-19T22:12:46Z,@sipa's comment about only topping up hd key pools would seem to apply here and maybe to CheckKeypoolMinSize: https://github.com/bitcoin/bitcoin/pull/10240#pullrequestreview-49644483,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128381474,128381474,src/wallet/wallet.cpp
ryanofsky,2017-07-19T22:18:51Z,Maybe use `index` instead of `id` here and other places to distinguish from pool indices from key ids.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128382731,128382731,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:15:05Z,"Yes, you're right that this would be much more efficient. However, `GetAllReserveKeys()` is also called elsewhere, which would also need to be modified to accept a map, so I'd prefer not to change it as part of this PR.\n\nThis can be fixed in a follow-up PR unless you think the performance in `MarkReserveKeysAsUsed()` is unacceptable.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545110,128545110,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:15:19Z,I think you're right. Fixed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545184,128545184,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:15:24Z,yup,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545209,128545209,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:15:29Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545225,128545225,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:15:37Z,removed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545266,128545266,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:16:24Z,Yes. Applies here. I don't think I need to change `CheckKeypoolMinSize()` though. The node should only be shutdown for HD wallets.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545478,128545478,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:16:42Z,Updated. Let me know what you think of the new text.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545561,128545561,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:16:49Z,yes - fixed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545597,128545597,src/wallet/wallet.cpp
jnewbery,2017-07-20T15:16:53Z,Updated. Let me know what you think of the new text.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128545616,128545616,src/wallet/wallet.cpp
ryanofsky,2017-07-20T15:45:27Z,"Maybe declare closer to while loop, also maybe write `it = setKeyPool->begin()`",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128554064,128554064,src/wallet/wallet.cpp
ryanofsky,2017-07-20T15:49:33Z,Maybe move TopUpKeyPool & CheckKeypoolMinSize out of MarkReserveKeysAsUsed (to the one caller) so MarkReserveKeysAsUsed only does what the name suggests.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128555192,128555192,src/wallet/wallet.cpp
ryanofsky,2017-07-20T16:02:24Z,If keypool size was provided nothing actually happens here so the log message seems misleading. Maybe change SoftSetArg to ForceSetArg or only log this if SoftSetArg returns true.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128558860,128558860,src/wallet/wallet.cpp
ryanofsky,2017-07-20T16:03:09Z,"Maybe explicitly warn about shutdowns, too",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128559055,128559055,src/wallet/wallet.cpp
instagibbs,2017-07-20T16:18:27Z,We need to hold the wallet lock here or we fail the assertion at wallet/wallet.cpp:830 in  `CanSupportFeature`.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128562939,128562939,src/wallet/wallet.cpp
ryanofsky,2017-07-20T16:48:44Z,Maybe split this up into test_restore(encrypted=False/True) or test_encrypted_restore/test_unencrypted_restore calls to make the test less repetitive and simpler to understand.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128570097,128570097,test/functional/keypool-restore.py
jnewbery,2017-07-20T17:25:21Z,is it ok to lock in `CheckKeypoolMinSize()` instead?,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128579380,128579380,src/wallet/wallet.cpp
instagibbs,2017-07-20T17:28:30Z,"I think so. You'd be calling for the lock twice in the other path, but that's ok right?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128580545,128580545,src/wallet/wallet.cpp
jnewbery,2017-07-20T17:50:23Z,"yes, I don't think there's a problem doing that.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128585827,128585827,src/wallet/wallet.cpp
jnewbery,2017-07-20T17:56:28Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587367,128587367,src/wallet/wallet.cpp
jnewbery,2017-07-20T17:56:32Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587381,128587381,src/wallet/wallet.cpp
jnewbery,2017-07-20T17:56:36Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587399,128587399,src/wallet/wallet.cpp
jnewbery,2017-07-20T17:56:40Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587410,128587410,src/wallet/wallet.cpp
jnewbery,2017-07-20T17:56:44Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128587430,128587430,test/functional/keypool-restore.py
instagibbs,2017-07-20T19:35:23Z,Method name should reflect the fact it will shut down upon failure.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128611234,128611234,src/wallet/wallet.cpp
jnewbery,2017-07-20T20:02:34Z,suggested name?,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128616867,128616867,src/wallet/wallet.cpp
instagibbs,2017-07-20T20:07:24Z,"The new error message doesn't quite work here, but it's also quite unlikely to happen, so maybe moot.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128617859,128617859,src/wallet/wallet.cpp
instagibbs,2017-07-20T20:12:06Z,"Just noting in case I'm underestimating the likelihood/cost: unlikely but this could be painful if they're using more than 1500 keys, as this might trigger multiple times causing them to re-download the chain multiple times.\n\nThis will go away with proper long-term fix.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128618933,128618933,src/wallet/wallet.cpp
ryanofsky,2017-07-20T20:24:43Z,"~~~This seems safe, but practically speaking shouldn't a manual rescan be unnecessary in most cases, because if the node shuts down when the keypool size is low, restarting should automatically rescan from `ReadBestBlock`.~~~ _EDIT: Never mind, too many race conditions to think about here. Not sure what a good solution is._\n\nRelatedly, maybe this PR should explicitly avoid calling `WriteBestBl",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128621759,128621759,src/wallet/wallet.cpp
gmaxwell,2017-07-21T07:17:04Z,"> Relatedly, maybe this PR should explicitly avoid calling WriteBestBlock when the keypool size is too low, \n\nACK. Very much so.  If not for having no mechanism for telling you that your wallet has fallen behind, this would more or less eliminate the need for shutdown.  though it's weird that you'd lower the minimum to bypass the shutdown and inadvertently update the height. ",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128698347,128698347,src/wallet/wallet.cpp
ryanofsky,2017-07-21T09:02:04Z,"Maybe there should be two flags:\n\n`-keypoolmin` as the threshold for calling `WriteBestBlock`\n`-keypoolcriticalmin` or `-keypoolshutdownmin` as the threshold for shutting down\n\nBoth flags could be set to 500. This still wouldn't provide a safe recovery path that avoids a complete rescan (we would need make walletpassphrase top up and rescan from bestblock after unlocking), but something ",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128715891,128715891,src/wallet/wallet.cpp
jnewbery,2017-07-21T13:27:43Z,sorry - I don't understand this comment. Can you explain what you mean by the new error message not quite working?,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128760962,128760962,src/wallet/wallet.cpp
jnewbery,2017-07-21T13:28:42Z,What's special about 1500?,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761167,128761167,src/wallet/wallet.cpp
instagibbs,2017-07-21T13:29:42Z,"Ok my math is off, I think 1000, I just meant the 2nd time this could occur.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761402,128761402,src/wallet/wallet.cpp
instagibbs,2017-07-21T13:30:35Z,"mistaken, ignore",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128761617,128761617,src/wallet/wallet.cpp
ryanofsky,2017-07-21T14:52:12Z,"Do you think there would be drawbacks to dropping the IsHDEnabled check here? Seems like that would be the safer thing to do.\n\nMight also be good to have a helper method to avoid duplicating logic here and in the shutdown code. e.g.:\n\n```\nbool CWallet::HasUnusedKeys(int min_keys) const\n{\n    return setExternalKeyPool.size() >= min_keys && (setInternalKeyPool.size() >= min_keys || !Ca",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128781584,128781584,src/wallet/wallet.cpp
ryanofsky,2017-07-21T14:57:56Z,"I would maybe define a little struct here to make code calling this more readable.\n\n```\nstruct ReserveKey { int64_t index; bool internal; };\nstd::map<CKeyID, ReserveKey> GetAllReserveKeys() const;\n```\n\nReturning the map this way would also let callers loop over it easily or use `auto`.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128783168,128783168,src/wallet/wallet.h
ryanofsky,2017-07-21T15:12:43Z,"Could s/CheckKeypoolMinSize/CheckKeypoolCriticalSize\n\nThere was also an old comment about renaming this. https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128611234. Could go with something like `MaybeShutdownForLaggingWallet`",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128787014,128787014,src/wallet/wallet.cpp
ryanofsky,2017-07-21T15:16:32Z,Need to add `-keypoolmin` I think too.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128787959,128787959,src/wallet/wallet.cpp
jnewbery,2017-07-21T16:36:12Z,"As discussed, if the user is trying to restore from an old non-HD wallet and they drop below keypoolmin/keypoolcritical, there's very little they can do (since topup will generate new random keys). I'll leave this in for now, but if you think we definitely should shutdown or stop advancing best block for non-HD wallets, let me know.\n\nUnless you strongly feel that I should add the helper method",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128805995,128805995,src/wallet/wallet.cpp
jnewbery,2017-07-21T16:36:33Z,Good point. Changed name to `ShutdownIfKeypoolCritical()`,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128806084,128806084,src/wallet/wallet.cpp
jnewbery,2017-07-21T16:36:39Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128806111,128806111,src/wallet/wallet.cpp
jnewbery,2017-07-21T17:13:18Z,done,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128813288,128813288,src/wallet/wallet.h
ryanofsky,2017-07-21T17:17:48Z,"Could drop clear, map will already be empty",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128814204,128814204,src/wallet/wallet.cpp
jnewbery,2017-07-21T17:38:41Z,dropped,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r128818686,128818686,src/wallet/wallet.cpp
ryanofsky,2017-07-25T19:09:27Z,"In commit ""[wallet] Add keypoolcritical""\n\nMaybe add & if this isn't an intentional optimization, it's a little more conventional in c++ to pass structs by reference instead of value to avoid potentially slow copies.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129397840,129397840,src/wallet/wallet.cpp
ryanofsky,2017-07-25T19:10:42Z,"In commit ""[wallet] Add keypoolcritical""\n\nCould make PR a little smaller by moving these changes to previous commit.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129398147,129398147,src/wallet/wallet.cpp
sipa,2017-07-26T06:38:24Z,Nit: space after `for`,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129491219,129491219,src/wallet/wallet.cpp
laanwj,2017-07-26T08:45:04Z,"""encrytped""",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129513787,129513787,test/functional/keypool-restore.py
jnewbery,2017-07-26T09:14:52Z,fixed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129520520,129520520,test/functional/keypool-restore.py
jnewbery,2017-07-26T09:15:11Z,fixed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129520586,129520586,src/wallet/wallet.cpp
morcos,2017-07-26T20:24:34Z,could you rename this to be something that isn't so easily confused with `CReserveKey`,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129686224,129686224,src/wallet/wallet.h
jnewbery,2017-07-27T04:46:59Z,any suggestions? Is `ReserveKeyIndex` better? `ReserveKeyIndexChain`?,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129752910,129752910,src/wallet/wallet.h
morcos,2017-07-27T16:13:47Z,"Access the member directly to avoid a copy?\n\nAlso this will avoid running out of the keypool inside of one scriptPubKey :)\n",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129887557,129887557,src/wallet/wallet.cpp
morcos,2017-07-27T16:31:46Z,"Maybe:  ""- restart without -bypasskeypoolcritical."" followed by:\n""NOTE: if you have a pruned node that prunes blocks your wallet hasn't scanned yet when restarting with -bypasskeypoolcritical then you may need to do a complete reindex.  Consider raising the prune limit temporarily for both restarts to avoid this."" ",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r129892032,129892032,src/wallet/wallet.cpp
jnewbery,2017-07-28T07:44:16Z,"I believe Matt's commit 64dc2dddf52a48c9cef158951f46395683a26595 resolves your concern about copying. `GetAllReserveKeys()` returns a const reference \n\nI don't understand your comment about running out of the keypool. Is it still an issue?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130030865,130030865,src/wallet/wallet.cpp
jnewbery,2017-07-28T07:52:39Z,"Yes, makes sense. Changed",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130032097,130032097,src/wallet/wallet.cpp
morcos,2017-07-28T09:54:06Z,No my concern still exists. It returns a const reference but then you immediately copy it to your local variable. Also in that same code path you call TopUpKeyPool so now there will be more reserved keys but the next time you lookup you are still looking up in your stale copy,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130054057,130054057,src/wallet/wallet.cpp
TheBlueMatt,2017-08-01T18:02:55Z,"Wait, why is this safe? I'm both highly skeptical that throwing here doesn't blow up all kinds of potential callers and that this is neccessary. Better to just call StartShutdown() and then avoid writing wallet best block.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130682453,130682453,src/wallet/wallet.cpp
TheBlueMatt,2017-08-01T18:08:54Z,"I think this needs to be more than a warning, no? There is no check in ShutdownIfKeypoolCritical to only exit if we failed to top up (ie if we hit this warning, the first time we see ShutdownIfKeypoolCritical we will exit, no?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130684101,130684101,src/wallet/wallet.cpp
TheBlueMatt,2017-08-01T18:12:09Z,"The doc is wrong (we do advance the best block), but I prefer the doc version, so maybe just remove the check in SetBestChain.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130684893,130684893,src/wallet/wallet.cpp
morcos,2017-08-01T18:52:14Z,huh? @TheBlueMatt ,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130695850,130695850,src/wallet/wallet.cpp
morcos,2017-08-01T19:08:36Z,"agreed, or we need the parameter interaction to increase keypool to keypool_critical? or something?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130699971,130699971,src/wallet/wallet.cpp
TheBlueMatt,2017-08-01T19:10:05Z,"Oh, guess the doc is right, but just super confusing (double negative-ish, but not really).Maybe ""but *still* don't advance""?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130700359,130700359,src/wallet/wallet.cpp
TheBlueMatt,2017-08-01T19:11:28Z,"Yea, think I'd vote for a paramter interaction.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130700700,130700700,src/wallet/wallet.cpp
jnewbery,2017-08-02T15:59:20Z,"If we hit this warning, then the wallet is not encrypted, and `TopUpKeyPool()` should succeed.\n\nIf the wallet is encrypted we'll hit the branch above and we force set keypool to keypool_critical.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130919208,130919208,src/wallet/wallet.cpp
jnewbery,2017-08-02T16:20:04Z,"oh, I see. Yes, I'll change the parameter interaction to set keypool to keypool_critical for all wallets.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r130924652,130924652,src/wallet/wallet.cpp
instagibbs,2017-08-03T01:01:52Z,"nit: current logic is ""larger or equal to""",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131033130,131033130,src/wallet/wallet.cpp
ryanofsky,2017-08-03T18:54:32Z,"In commit ""[wallet] [tests] Add keypool restore functional test""\n\nIt would be nice to have tests for non-hd wallet behavior too, since it's easy to forget about non-hd case when changing this code and accidentally break something. I think this could be as simple as adding a boolean `hd` argument to `_test_restore`, and calling it with true and false. If it's more complicated I would maybe add ",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131230479,131230479,test/functional/keypool-restore.py
ryanofsky,2017-08-03T19:18:08Z,"In commit ""Cache keyid -> keypool id mappings""\n\nWould be better to call this `m_pool_key_to_index` instead of `m_pool_key_to_id` because we already have key ids (which are hashes, not ordinals), and we are already using index/nIndex to refer to the ordinals in other places.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131235744,131235744,src/wallet/wallet.h
ryanofsky,2017-08-03T19:26:23Z,"In commit ""[wallet] Add keypoolcritical""\n\nMaybe add (to prevent bitcoin from shutting down again)",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131237580,131237580,src/wallet/wallet.cpp
ryanofsky,2017-08-03T19:28:52Z,"In commit ""[wallet] Add keypoolcritical""\n\nMaybe add (to refill the keypool)",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131238125,131238125,src/wallet/wallet.cpp
ryanofsky,2017-08-03T19:36:17Z,"Thread https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131033130\n\nThis particular line seems correct, but I guess the printf below should be updated.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131239677,131239677,src/wallet/wallet.cpp
ryanofsky,2017-08-03T20:02:36Z,"In commit ""[wallet] Add keypoolmin""\n\nAs alluded to in https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318182682 and https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-318322124, this check is not as safe as it appears, because if keypool gets drained below the minimum, then is refilled later after unlocking, there might be missing transactions which will not get rescanned in",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131245392,131245392,src/wallet/wallet.cpp
ryanofsky,2017-08-03T20:19:09Z,"In commit ""[wallet] add checks for keypool critical""\n\nIt seems like a less repetitive (and safer?) approach would be to make GetKeyFromPool return false when number of keys is below critical, and maybe have an override if needed.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131248886,131248886,src/qt/addresstablemodel.cpp
ryanofsky,2017-08-03T20:23:14Z,"In commit ""[wallet] return error from getnewaddress if keypool drops to critical""\n\nShould keypool size be checked before calling GetKeyFromPool instead of after, to avoid getting a key and throwing it away?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131249863,131249863,src/wallet/rpcwallet.cpp
ryanofsky,2017-08-03T20:30:02Z,"In commit ""[wallet] return error from getnewaddress if keypool drops to critical""\n\nMaybe compare against -keypoolmin instead of -keypoolcritical to be more conservative, and because otherwise this change will have no effect (because the node will be shut down) unless `-bypasskeypoolcritical` happens to be in use. Also I think it's good just for sake of simplicity if `-bypasskeypoolcritical` an",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131251478,131251478,src/wallet/rpcwallet.cpp
jnewbery,2017-08-04T15:10:05Z,agree - changed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131412777,131412777,src/wallet/wallet.h
jnewbery,2017-08-04T15:12:41Z,yes - fixed,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131413371,131413371,src/wallet/wallet.cpp
jnewbery,2017-08-04T15:15:24Z,added,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131414160,131414160,src/wallet/wallet.cpp
jnewbery,2017-08-04T15:15:27Z,added,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131414171,131414171,src/wallet/wallet.cpp
jnewbery,2017-08-04T17:31:26Z,"Ah, your allusion was a bit subtle for me. I thought your original comment was ""this is an alternative way to do it"" rather than ""the current way is unsafe. You should do this instead""\n\nCan you take a look at https://github.com/jnewbery/bitcoin/commit/145a06521bd458e214cd9c8d163c9a1ebbd63189 . Is that what you had in mind?\n\nWith that change, I think we can remove `bypasskeypoolcritical` an",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131443625,131443625,src/wallet/wallet.cpp
ryanofsky,2017-08-04T19:03:32Z,"Thread https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131245392\n\nPosted a question in https://github.com/jnewbery/bitcoin/commit/145a06521bd458e214cd9c8d163c9a1ebbd63189, but I think this seems basically right. Few things\n\n- I don't think this change necessarily needs to be part of this PR if it will delay the merge. Could be done as a followup.\n- It seems like it would be a l",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131463645,131463645,src/wallet/wallet.cpp
jnewbery,2017-08-04T21:08:33Z,"ok, done",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131486855,131486855,src/qt/addresstablemodel.cpp
jnewbery,2017-08-04T21:10:35Z,"I originally wasn't doing this because `GetKeyFromPool()` calls into `ReserveKeyFromKeyPool()` which tops up the keypool. I didn't want to fail `GetKeyFromPool()` when the wallet is unlocked and able to top up the keypool.\n\nI've now added a `TopUpKeyPool()` call in `GetKeyFromPool()`, so we try to top up before checking that the keypool hasn't fallen to the critical level.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131487192,131487192,src/wallet/rpcwallet.cpp
jnewbery,2017-08-04T21:11:22Z,"Changed the check to `HasUnusedKeys(GetArg(""-keypoolcritical"", DEFAULT_KEYPOOL_CRITICAL) + 1)`, which will prevent us from dropping to the keypool_critical threshold.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131487322,131487322,src/wallet/rpcwallet.cpp
jnewbery,2017-08-04T21:35:42Z,Done (in fact I've added the change to  `m_update_best_block` false in `AddToWalletIfInvolvingMe()` and `SetBestChain()`),https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131491393,131491393,src/wallet/wallet.cpp
jnewbery,2017-08-04T21:35:57Z,I think this can be added later.,https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131491441,131491441,test/functional/keypool-restore.py
ryanofsky,2017-08-10T18:39:54Z,"In commit ""[wallet] Add keypoolcritical""\n\nI'm confused by this. It seems like this is the only call to ShutdownIfKeypoolCritical() in the whole PR, and it's in the rescan function, so the node will no longer shut down if the wallet is locked and the keypool gradually drains, unless the user manually triggers a rescan or restarts the node? If this is behavior that's intended, it should be docum",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132535000,132535000,src/wallet/wallet.cpp
jnewbery,2017-08-10T18:56:31Z,"Yes, that's the current implementation:\n\n`07:58 < gmaxwell> jnewbery: Can we distinguish the case where we are current vs rescanning? If so, then we just shouldn't perform the shutdown when we're current.`\n\n(https://botbot.me/freenode/bitcoin-core-dev/2017-08-08/?msg=89552785&page=2)\n\nWe'll need to discuss this in the meeting today. There doesn't seem to be agreement about what this PR",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132539018,132539018,src/wallet/wallet.cpp
ryanofsky,2017-08-10T19:09:14Z,"In commit ""[wallet] Don't allow getnewaddress to drop keypool to critical.""\n\nDo you want to make the same change to getrawchangeaddress? (as mentioned https://github.com/bitcoin/bitcoin/pull/10882#issuecomment-320083591)",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132541882,132541882,src/wallet/rpcwallet.cpp
ryanofsky,2017-08-10T19:13:34Z,"Thread https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132535000\n\nThat's fine, but it seems that current -keypoolcritical help description is pretty misleading. It would be good to update it, as well as the PR description.",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132542802,132542802,src/wallet/wallet.cpp
ryanofsky,2017-08-10T19:20:20Z,"Thread https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131033130\n\nI don't see a change, should log print just be changed to ""smaller or equal to""?",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132544374,132544374,src/wallet/wallet.cpp
ryanofsky,2017-08-10T19:33:38Z,"In commit ""[wallet] Add m_update_best_block""\n\nAs mentioned https://github.com/bitcoin/bitcoin/pull/10882#discussion_r131463645, I think the transition from true -> false m_update_best_block should just happen after the topup in AddToWalletIfInvolvingMe. So this logic, and the logic in SetBestChain could be removed. SetBestChain would only read m_update_best_block, not write to it or interact w",https://github.com/bitcoin/bitcoin/pull/10882#discussion_r132547311,132547311,src/wallet/wallet.cpp
