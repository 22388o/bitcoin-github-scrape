jtimon,2015-04-23T00:55:32Z,Closing until #5696 is resolved\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-95378132,95378132,
laanwj,2015-04-30T14:07:39Z,Are you sure `GetBlockProof` is not part of consensus? e.g. it's used in `AddToBlockIndex` to determine the total amount of work on a chain. \nIt's the only function left in `pow.h` which is kind of unfortunate.\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-97808760,97808760,
jtimon,2015-04-30T16:17:14Z,"The highest level function I'm contemplating would be VerifyBlock and that's not necessary for it. It's certainly not necessary for VerifyHeader. That's used to chose the longest chain, so it's seems more part of the index than validation rules. Maybe in the future we can expose that too somehow, but one step at a tine...\n",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-97863866,97863866,
laanwj,2015-05-01T12:50:39Z,"But `nChainWork` (computed using `GetBlockProof`) is used in e.g. `ActivateBestChain(Step)`, which choose the best chain.\n@theuni what's your opinion here?\n",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-98126680,98126680,
sipa,2015-05-01T12:53:14Z,"Depends on whether we define consensus as (conceptually) a black box that just says whether a particular chain is valid or not, or whether we include the mechanism for determining which of possible valid chains as well.\n\nI don't really have an opinion here, apart from that I think separating these two concerns in the code makes sense - whether we expose that in libconsensus or not.\n",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-98127473,98127473,
laanwj,2015-05-01T12:59:51Z,Ok fair enough. But I do think this destroys the purpose of `pow.cpp`/`pow.h`. The goal was to have the proof-of-work functions in one place. Now _one function_ is left in that file...\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-98128237,98128237,
jtimon,2015-05-02T07:43:10Z,"well yes, my plan was to destroy pow and move the remaining function to chain.o, but zince there's more stuff being created there...\n",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-98326514,98326514,
ghost,2015-05-10T18:18:11Z,"Built and ran tests ACK\n\nedit: happy to do more, but I wasn't sure where to begin testing this, aside from writing my own tests\n",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-100676440,100676440,
jtimon,2015-05-15T14:13:28Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-102410185,102410185,
jtimon,2015-05-27T14:29:55Z,Rebased with one less dependency (2 commits less).\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-105931811,105931811,
jtimon,2015-06-02T11:18:07Z,"Rebased again. \nOnly 2 PR dependencies to go, ping  #5975 and #6061.\n",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-107918403,107918403,
jtimon,2015-06-04T19:21:50Z,Needed rebase\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-109018573,109018573,
jtimon,2015-06-10T16:19:33Z,Rebased. All PR dependencies merged or replaced with equivalent commits.\nNow this is purely move only.\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-110820049,110820049,
jtimon,2015-06-12T09:17:31Z,Squashed the 2 moveonly commits.\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-111425965,111425965,
theuni,2015-06-17T23:20:00Z,Confirmed move-only with the exception of\n\n``` diff\n-    set<COutPoint> vInOutPoints;\n+    std::set<COutPoint> vInOutPoints;\n```\n\nwhich is obviously fine.\n\nI didn't bother checking includes and function prototypes though.\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-112978324,112978324,
jtimon,2015-07-06T22:52:11Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-119021766,119021766,
jtimon,2015-07-12T11:16:55Z,"I'm having second thoughts about txverify.cpp + blockverify.cpp vs policy.cpp.\nIf we don't care about exposing verifyTx or verifyHeader before verifyBlock is ready, then we can just have policy.cpp and we can move more things at the same time (CheckBlock, ContextualCheckBlock and GetBlockSubsidy, for example).\n\nDo we care about being able to expose VerifyTx without being prepared to also expose",https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-120708121,120708121,
jtimon,2015-07-15T23:56:31Z,Closing for now.\n,https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-121778783,121778783,
