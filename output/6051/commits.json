[
  {
    "sha": "a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDVlODI1M2Y1ZThhYWNhZjdjOGNhZDU5NmIyYzkwYzdjYzZhZmI0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-24T14:18:43Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T02:46:50Z"
      },
      "message": "MOVEONLY: Move some consensus functions to consensus/consensus.h\n\nFunctions definitions are moved to 2 independent files:\n\nTo consensus/txverify.cpp:\n\nfrom main.cpp:\n-CheckTransaction\n-Consensus::CheckTxInputs\n-GetLegacySigOpCount\n-GetP2SHSigOpCount\n-IsFinalTx\n\nTo consensus/blockverify.cpp\n\nfrom main.cpp:\n-CheckBlockHeader\n-ContextualCheckBlockHeader\n-IsSuperMajority\n\nfrom pow.cpp:\n-CalculateNextWorkRequired\n-CheckProofOfWork\n-GetNextWorkRequired",
      "tree": {
        "sha": "985d8860cc147e21507eeda21963c5a127597710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/985d8860cc147e21507eeda21963c5a127597710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "086cb336cd8ac0b2a7ad9ff0544c014569c7db38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086cb336cd8ac0b2a7ad9ff0544c014569c7db38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/086cb336cd8ac0b2a7ad9ff0544c014569c7db38"
      }
    ],
    "stats": {
      "total": 745,
      "additions": 404,
      "deletions": 341
    },
    "files": [
      {
        "sha": "0bb6875eda93238f31f822fb4aaf7e6a996794c3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -169,6 +169,8 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/blockverify.cpp \\\n+  consensus/txverify.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "7305ee2faa2bd4bcc0a66743a2f148d68d6bc08a",
        "filename": "src/consensus/blockverify.cpp",
        "status": "added",
        "additions": 159,
        "deletions": 0,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"arith_uint256.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"consensus/params.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/block.h\"\n+#include \"timedata.h\"\n+#include \"tinyformat.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+{\n+    unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n+\n+    // Genesis block\n+    if (pindexLast == NULL)\n+        return nProofOfWorkLimit;\n+\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n+    {\n+        if (params.fPowAllowMinDifficultyBlocks)\n+        {\n+            // Special difficulty rule for testnet:\n+            // If the new block's timestamp is more than 2* 10 minutes\n+            // then allow mining of a min-difficulty block.\n+            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n+                return nProofOfWorkLimit;\n+            else\n+            {\n+                // Return the last non-special-min-difficulty-rules-block\n+                const CBlockIndex* pindex = pindexLast;\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = pindex->pprev;\n+                return pindex->nBits;\n+            }\n+        }\n+        return pindexLast->nBits;\n+    }\n+\n+    // Go back by what we want to be 14 days worth of blocks\n+    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n+    assert(nHeightFirst >= 0);\n+    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n+    assert(pindexFirst);\n+\n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n+}\n+\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+{\n+    // Limit adjustment step\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n+    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n+\n+    // Retarget\n+    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n+    arith_uint256 bnNew;\n+    arith_uint256 bnOld;\n+    bnNew.SetCompact(pindexLast->nBits);\n+    bnOld = bnNew;\n+    bnNew *= nActualTimespan;\n+    bnNew /= params.nPowTargetTimespan;\n+\n+    if (bnNew > bnPowLimit)\n+        bnNew = bnPowLimit;\n+\n+    /// debug print\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n+\n+    return bnNew.GetCompact();\n+}\n+\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n+{\n+    bool fNegative;\n+    bool fOverflow;\n+    arith_uint256 bnTarget;\n+\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+\n+    // Check range\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n+\n+    // Check proof of work matches claimed amount\n+    if (UintToArith256(hash) > bnTarget)\n+        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n+\n+    return true;\n+}\n+\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+{\n+    // Check proof of work matches claimed amount\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n+        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n+                         REJECT_INVALID, \"high-hash\");\n+\n+    // Check timestamp\n+    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n+                             REJECT_INVALID, \"time-too-new\");\n+\n+    return true;\n+}\n+\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    // Check proof of work\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n+                         REJECT_INVALID, \"bad-diffbits\");\n+\n+    // Check timestamp against prev\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n+                             REJECT_INVALID, \"time-too-old\");\n+\n+    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n+    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n+    return true;\n+}"
      },
      {
        "sha": "4635d6e1cdd5df66f78ca03085b9324bd27880dc",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -6,11 +6,90 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdint.h>\n+\n+class CBlockHeader;\n+class CBlockIndex;\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+class uint256;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/** Transaction validation functions */\n+\n+/**\n+ * Context-independent CTransaction validity checks\n+ */\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n+\n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+class Params;\n+\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+\n+} // namespace Consensus\n+\n+/** Block header validation functions */\n+\n+/**\n+ * Context-independent CBlockHeader validity checks\n+ */\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n+/**\n+ * Context-dependent CBlockHeader validity checks\n+ */\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n+/** Transaction validation utility functions */\n+\n+/**\n+ * Check if transaction is final and can be included in a block with the\n+ * specified height and time. Consensus critical.\n+ */\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n+/**\n+ * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+ * @return number of sigops this transaction's outputs will produce when spent\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+/**\n+ * Count ECDSA signature operations in pay-to-script-hash inputs.\n+ * \n+ * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n+ * @return maximum number of sigops required to validate this transaction's inputs\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+/** Block header validation utility functions */\n+\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "8cccea88bf3496ef3f52d3033950c594278673a4",
        "filename": "src/consensus/txverify.cpp",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/consensus/txverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/consensus/txverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/txverify.cpp?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"coins.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/sigcache.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"version.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if (tx.nLockTime == 0)\n+        return true;\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        if (!txin.IsFinal())\n+            return false;\n+    return true;\n+}\n+\n+unsigned int GetLegacySigOpCount(const CTransaction& tx)\n+{\n+    unsigned int nSigOps = 0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        nSigOps += txin.scriptSig.GetSigOpCount(false);\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n+    }\n+    return nSigOps;\n+}\n+\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n+                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n+                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n+                         REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        if (txout.nValue < 0)\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n+                             REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (txout.nValue > MAX_MONEY)\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n+                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n+                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs\n+    std::set<COutPoint> vInOutPoints;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        if (vInOutPoints.count(txin.prevout))\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n+                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(txin.prevout);\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n+                             REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            if (txin.prevout.IsNull())\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n+                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+\n+    return true;\n+}\n+\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+{\n+        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+        // for an attacker to attempt to split the network.\n+        if (!inputs.HaveInputs(tx))\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+            assert(coins);\n+\n+            // If prev is coinbase, check that it's matured\n+            if (coins->IsCoinBase()) {\n+                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                    return state.Invalid(\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+            }\n+\n+            // Check for negative or overflow input values\n+            nValueIn += coins->vout[prevout.n].nValue;\n+            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n+                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+\n+        }\n+\n+        if (nValueIn < tx.GetValueOut())\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n+                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n+                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+\n+        // Tally transaction fees\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n+        if (nTxFee < 0)\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n+                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+        nFees += nTxFee;\n+        if (!MoneyRange(nFees))\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n+                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    return true;\n+}"
      },
      {
        "sha": "a38d6ff2e4afe1ef298598a0de317147de9911c5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -79,11 +79,6 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -607,117 +602,12 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if (tx.nLockTime == 0)\n-        return true;\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n-            return false;\n-    return true;\n-}\n-\n bool CheckFinalTx(const CTransaction &tx)\n {\n     AssertLockHeld(cs_main);\n     return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n-unsigned int GetLegacySigOpCount(const CTransaction& tx)\n-{\n-    unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n-    }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n-    }\n-    return nSigOps;\n-}\n-\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-\n-    return true;\n-}\n-\n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n@@ -1269,56 +1159,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n-{\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n-            assert(coins);\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase()) {\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n-            }\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coins->vout[prevout.n].nValue;\n-            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-\n-        }\n-\n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n-    return true;\n-}\n-}// namespace Consensus\n-\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n@@ -2527,21 +2367,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n-{\n-    // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n-        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n-                         REJECT_INVALID, \"high-hash\");\n-\n-    // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n-                             REJECT_INVALID, \"time-too-new\");\n-\n-    return true;\n-}\n-\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n@@ -2616,32 +2441,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n-{\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n-                         REJECT_INVALID, \"bad-diffbits\");\n-\n-    // Check timestamp against prev\n-    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n-                             REJECT_INVALID, \"time-too-old\");\n-\n-    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-\n-    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-\n-    return true;\n-}\n-\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n@@ -2772,19 +2571,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n {\n     // Preliminary checks"
      },
      {
        "sha": "d25f8ed3987c46ac62af06d415faf0961edbd10b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -262,23 +262,6 @@ struct CDiskTxPos : public CDiskBlockPos\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n-/** \n- * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n- * @return number of sigops this transaction's outputs will produce when spent\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetLegacySigOpCount(const CTransaction& tx);\n-\n-/**\n- * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n- * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n- * @return maximum number of sigops required to validate this transaction's inputs\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n@@ -290,15 +273,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n-/**\n- * Check if transaction is final and can be included in a block with the\n- * specified height and time. Consensus critical.\n- */\n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n-\n /**\n  * Check if transaction will be final in the next block to be created.\n  *\n@@ -359,11 +333,9 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */"
      },
      {
        "sha": "563a4b4b6b1aae6fa23ea062ad5312091aec7cdc",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 92,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -7,98 +7,6 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-\n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n-{\n-    unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n-\n-    // Genesis block\n-    if (pindexLast == NULL)\n-        return nProofOfWorkLimit;\n-\n-    // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n-    {\n-        if (params.fPowAllowMinDifficultyBlocks)\n-        {\n-            // Special difficulty rule for testnet:\n-            // If the new block's timestamp is more than 2* 10 minutes\n-            // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n-                return nProofOfWorkLimit;\n-            else\n-            {\n-                // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n-                return pindex->nBits;\n-            }\n-        }\n-        return pindexLast->nBits;\n-    }\n-\n-    // Go back by what we want to be 14 days worth of blocks\n-    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n-    assert(nHeightFirst >= 0);\n-    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n-    assert(pindexFirst);\n-\n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n-}\n-\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n-{\n-    // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n-    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n-    if (nActualTimespan < params.nPowTargetTimespan/4)\n-        nActualTimespan = params.nPowTargetTimespan/4;\n-    if (nActualTimespan > params.nPowTargetTimespan*4)\n-        nActualTimespan = params.nPowTargetTimespan*4;\n-\n-    // Retarget\n-    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n-    arith_uint256 bnNew;\n-    arith_uint256 bnOld;\n-    bnNew.SetCompact(pindexLast->nBits);\n-    bnOld = bnNew;\n-    bnNew *= nActualTimespan;\n-    bnNew /= params.nPowTargetTimespan;\n-\n-    if (bnNew > bnPowLimit)\n-        bnNew = bnPowLimit;\n-\n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n-\n-    return bnNew.GetCompact();\n-}\n-\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n-{\n-    bool fNegative;\n-    bool fOverflow;\n-    arith_uint256 bnTarget;\n-\n-    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\n-    // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return error(\"CheckProofOfWork(): nBits below minimum work\");\n-\n-    // Check proof of work matches claimed amount\n-    if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n-\n-    return true;\n-}\n \n arith_uint256 GetBlockProof(const CBlockIndex& block)\n {"
      },
      {
        "sha": "9f84b947a7ca426cb9f888eaab70270b121342d7",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=a45e8253f5e8aacaf7c8cad596b2c90c7cc6afb4",
        "patch": "@@ -6,20 +6,14 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/params.h\"\n \n #include <stdint.h>\n \n-class CBlockHeader;\n class CBlockIndex;\n-class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n-\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n /** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */"
      }
    ]
  }
]