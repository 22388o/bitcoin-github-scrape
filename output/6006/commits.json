[
  {
    "sha": "f6465cb200124447000d16bc8bbe47a2a8476306",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjQ2NWNiMjAwMTI0NDQ3MDAwZDE2YmM4YmJlNDdhMmE4NDc2MzA2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-12T12:44:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-06T07:08:10Z"
      },
      "message": "[RPC] add possibility to extend the JSONRPC URI schemas",
      "tree": {
        "sha": "09d6db5cf68b2f8fcfe921be255b896bcfc703b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09d6db5cf68b2f8fcfe921be255b896bcfc703b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6465cb200124447000d16bc8bbe47a2a8476306",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6465cb200124447000d16bc8bbe47a2a8476306",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6465cb200124447000d16bc8bbe47a2a8476306",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6465cb200124447000d16bc8bbe47a2a8476306/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91389e51c78ae3565b037e31dd5382b52bd75136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91389e51c78ae3565b037e31dd5382b52bd75136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91389e51c78ae3565b037e31dd5382b52bd75136"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 64,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b42303db4d978e108ba9418974decc049e19cadf",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 13,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6465cb200124447000d16bc8bbe47a2a8476306/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6465cb200124447000d16bc8bbe47a2a8476306/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f6465cb200124447000d16bc8bbe47a2a8476306",
        "patch": "@@ -41,6 +41,8 @@ static bool fRPCRunning = false;\n static bool fRPCInWarmup = true;\n static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n+static CCriticalSection cs_vExtURI;\n+static std::vector<std::string> vExtURI;\n \n //! These are created by StartRPCThreads, destroyed in StopRPCThreads\n static boost::asio::io_service* rpc_io_service = NULL;\n@@ -53,12 +55,18 @@ static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n static struct CRPCSignals\n {\n+    boost::signals2::signal<void (const std::string& strMethod, const UniValue& params, UniValue& result, bool& accept)> ExtCmdExecute; //!< Allow listeners to append result to a extended uri schema call\n     boost::signals2::signal<void ()> Started;\n     boost::signals2::signal<void ()> Stopped;\n     boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n     boost::signals2::signal<void (const CRPCCommand&)> PostCommand;\n } g_rpcSignals;\n \n+void RPCServer::OnExtendedCommandExecute(boost::function<void (const std::string& strMethod, const UniValue& params, UniValue& result, bool& accept)> slot)\n+{\n+    g_rpcSignals.ExtCmdExecute.connect(slot);\n+}\n+\n void RPCServer::OnStarted(boost::function<void ()> slot)\n {\n     g_rpcSignals.Started.connect(slot);\n@@ -825,6 +833,12 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n     deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n }\n \n+void AddJSONRPCURISchema(const std::string& uri)\n+{\n+    LOCK(cs_vExtURI);\n+    vExtURI.push_back(uri);\n+}\n+\n class JSONRequest\n {\n public:\n@@ -900,7 +914,8 @@ static string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n-static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n+static bool HTTPReq_JSONRPC(const std::string &sURI,\n+                            AcceptedConnection *conn,\n                             string& strRequest,\n                             map<string, string>& mapHeaders,\n                             bool fRun)\n@@ -940,21 +955,46 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         }\n \n         string strReply;\n+        size_t nVExtURISize = 0;\n+        {\n+            LOCK(cs_vExtURI);\n+            nVExtURISize = vExtURI.size();\n+        }\n \n-        // singleton request\n-        if (valRequest.isObject()) {\n-            jreq.parse(valRequest);\n+        if(sURI == \"/\" || nVExtURISize == 0)\n+        {\n+            // singleton request\n+            if (valRequest.isObject())\n+            {\n+                jreq.parse(valRequest);\n \n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+                UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n \n-            // Send reply\n-            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n+                // Send reply\n+                strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n+\n+            // array of requests\n+            } else if (valRequest.isArray())\n+                strReply = JSONRPCExecBatch(valRequest.get_array());\n+            else\n+                throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n-        // array of requests\n-        } else if (valRequest.isArray())\n-            strReply = JSONRPCExecBatch(valRequest.get_array());\n+        }\n         else\n-            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n+        {\n+            UniValue result;\n+            jreq.parse(valRequest);\n+\n+            // allow connected listeners to add response to the call\n+            // batch execution can be implemented within the listening code part\n+            bool accept = false;\n+            g_rpcSignals.ExtCmdExecute(jreq.strMethod, jreq.params, result, accept);\n+            if (!accept)\n+                throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n+\n+            // build JSON reply\n+            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n+        }\n \n         conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, strReply.size()) << strReply << std::flush;\n     }\n@@ -992,8 +1032,13 @@ void ServiceConnection(AcceptedConnection *conn)\n             fRun = false;\n \n         // Process via JSON-RPC API\n-        if (strURI == \"/\") {\n-            if (!HTTPReq_JSONRPC(conn, strRequest, mapHeaders, fRun))\n+        bool extURIFound = false;\n+        {\n+            LOCK(cs_vExtURI);\n+            extURIFound = (std::find(vExtURI.begin(), vExtURI.end(), strURI) != vExtURI.end());\n+        }\n+        if (strURI == \"/\" || extURIFound) {\n+            if (!HTTPReq_JSONRPC(strURI, conn, strRequest, mapHeaders, fRun))\n                 break;\n \n         // Process via HTTP REST API"
      },
      {
        "sha": "03a85070d61ff26c27221b95863956d32ef6d8ec",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6465cb200124447000d16bc8bbe47a2a8476306/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6465cb200124447000d16bc8bbe47a2a8476306/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=f6465cb200124447000d16bc8bbe47a2a8476306",
        "patch": "@@ -27,6 +27,7 @@ namespace RPCServer\n     void OnStopped(boost::function<void ()> slot);\n     void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n     void OnPostCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnExtendedCommandExecute(boost::function<void (const std::string& strMethod, const UniValue& params, UniValue& result, bool& accept)> slot);\n }\n \n class CBlockIndex;\n@@ -87,6 +88,11 @@ void RPCTypeCheckObj(const UniValue& o,\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n+/**\n+ * Adds a JSONRPC entry point for using it over the OnExtendedCommandExecute signaling\n+ */\n+void AddJSONRPCURISchema(const std::string& uri);\n+\n //! Convert boost::asio address to CNetAddr\n extern CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address);\n "
      }
    ]
  }
]