[
  {
    "sha": "0ab8ba1ac65b70f044a5e323b13d098cef33695a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWI4YmExYWM2NWI3MGYwNDRhNWUzMjNiMTNkMDk4Y2VmMzM2OTVh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T07:49:38Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-03T02:36:35Z"
      },
      "message": "rpc: fix RPC help requirements for getblocktemplate\n\nFirst argument is optional, and defaults to {mode:template}.",
      "tree": {
        "sha": "f9bbd13bd886985deed1bea82b6e91a4515af236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9bbd13bd886985deed1bea82b6e91a4515af236"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ab8ba1ac65b70f044a5e323b13d098cef33695a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0cFLMACgkQV692LbM1\nMyLNZA//XGCHzc05fC48hGcbx9kYYSu6OH5uQOcDL3OHuXl2uDxMN/GTL1jFPaW9\nSC9SJmJ/8dK7L3vlusszb5U962KZdxF4P7vappUYumwYCUGZ63zS5JUL5D88tPOt\nP/2uqq40ouBUsZGUaLBI5QKw24GdeIkOqAwShfsUGuHrj+AGbknzwJeuTpTWXphM\nwjgbf1UgCRKULFL+4kU32wNCkT87wW99GBr4+8DItuE1zH9cy2HCPW9KjWnLFxYL\nsuGDQHQOF0Kc+LylsaA+Gv4cxn/vRaI/BF0QuHmajaMgU9fTpRRRdNTFWpeDTIFK\n6S9ujmKGDc+rfUWZy89cMHU9V7pbXcBhy97mnxrFvCVDIAagy5tJzB/8MhUs5nhM\n4rs5wKHIXm1KKnZdHTwu9nL0nzF0gWriBZtoRhPQN6f8mDIaT6K3tAuXPcBspWKy\nr0qp99qjc6LmEf42ysW3O61od5yagAV1usGY2kUUeouKCc5FMkdD8r10SU5+h2fn\nTorea3MGs6wMTmfaCkk3nit4vekZpAYWGG9KRstR760M+nz9h5QBRu/Gi/i3Fb2d\n44qULvjXcC5jHke9M63of02ZvGcImXpTebEuBfxqNmChLvwyD60aZAZHd/jLupza\nHmgcjB/y8vhSpFQIBjTGP7Uxb22w6DkRq4WlPAwaMCoBBeHnPT8=\n=G3kX\n-----END PGP SIGNATURE-----",
        "payload": "tree f9bbd13bd886985deed1bea82b6e91a4515af236\nparent e06067387e758e86f82b126867338faeb6220de7\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560930578 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1562121395 +0900\n\nrpc: fix RPC help requirements for getblocktemplate\n\nFirst argument is optional, and defaults to {mode:template}.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab8ba1ac65b70f044a5e323b13d098cef33695a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ab8ba1ac65b70f044a5e323b13d098cef33695a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab8ba1ac65b70f044a5e323b13d098cef33695a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e06067387e758e86f82b126867338faeb6220de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06067387e758e86f82b126867338faeb6220de7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e06067387e758e86f82b126867338faeb6220de7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b3b567a31e8e6780745b5d481325ee0518cbe9ac",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ab8ba1ac65b70f044a5e323b13d098cef33695a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ab8ba1ac65b70f044a5e323b13d098cef33695a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0ab8ba1ac65b70f044a5e323b13d098cef33695a",
        "patch": "@@ -302,7 +302,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"A json object in the following spec\",\n                         {\n                             {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n                             {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\","
      }
    ]
  },
  {
    "sha": "5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzVlMzJiYmUzZGZhNzkwZGQ4YmI0MjFmYmQ2MzAxYWUxMGIwOWY1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T17:39:38Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-05T02:22:02Z"
      },
      "message": "rpc: migrate JSONRPCRequest functionality into request.cpp",
      "tree": {
        "sha": "8dcdcbeae96f2a7fb03b36bfa50d269b6bc68749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dcdcbeae96f2a7fb03b36bfa50d269b6bc68749"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0etEoACgkQV692LbM1\nMyJMpA/+NceHXxkaeyU8/aXK2IOK0JQjbzvNA8YIXLm9pHWQxSG//umDgkjEQUo+\nm7++WgRhaTLFMWRoSkllMNA6/2RrlgtalhOTdZOpM11h8G09oMxETEtyTU0YbKOG\nT85MjGXWOm/AIGwl3ai8KExgCbDdQjf038Fdxn6lYOaMG8f4eXkNx7LxiiPvZg1I\nmzsTW9Q7BsuqG+0vEHAh5sg+ZCf3QXAOe9CalFy7cMOXChrMxMLSbEnsLlr9DPT4\n6Tu5Eh0gFVl5Ifh48uD0+AYCaPbup2VXjrL0shndkGj57VYLLQnOH+YSZMDltTB6\nBUvWXj7OGTDz8GjCkVS7nm5lYnSpNDdJ9udR2DgCgxv/y396nHd/l8t7+0RXXXKd\nEQXDlAFbHy3V3DFXFy/dFNwxxuD5EiMGn9lxSEyot3kSo65A/CeF92eBA6EKI4Pk\nRhUgfhqzM4i3qNJsi+I13hKTqVsyRFG6UPLS++EJxDjWNfjStsw1+jIlahIptca7\nEDQ5QmaJI3RXd6zd91SQcZ3CNnwflsuDF65cb6g+ZjnXIasKCbh1oGtT6AlylmIE\nz1eSbIJrae+hu9pB9tnbQWDHxfSNxXXgUYYdfnbngk0AD1046gNS9QxlJ3lCCwuW\nH9SFNjZgbnfpqPJcteAwMVld5TycGvX3mYXBl+farQwoVt+OydQ=\n=uo5A\n-----END PGP SIGNATURE-----",
        "payload": "tree 8dcdcbeae96f2a7fb03b36bfa50d269b6bc68749\nparent 0ab8ba1ac65b70f044a5e323b13d098cef33695a\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560965978 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1562293322 +0900\n\nrpc: migrate JSONRPCRequest functionality into request.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ab8ba1ac65b70f044a5e323b13d098cef33695a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ab8ba1ac65b70f044a5e323b13d098cef33695a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ab8ba1ac65b70f044a5e323b13d098cef33695a"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 89,
      "deletions": 79
    },
    "files": [
      {
        "sha": "e4c542fa255fb8bb3620d0a11a10ef8bbdaa4ae0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -175,9 +175,10 @@ BITCOIN_CORE_H = \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n   rpc/protocol.h \\\n-  rpc/server.h \\\n   rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n+  rpc/request.h \\\n+  rpc/server.h \\\n   rpc/util.h \\\n   scheduler.h \\\n   script/descriptor.h \\\n@@ -481,7 +482,7 @@ libbitcoin_util_a_SOURCES = \\\n   interfaces/handler.cpp \\\n   logging.cpp \\\n   random.cpp \\\n-  rpc/protocol.cpp \\\n+  rpc/request.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\"
      },
      {
        "sha": "d3419520a74998ea5aeb480656f4f3dd31f41714",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -12,6 +12,7 @@\n #include <fs.h>\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n+#include <rpc/request.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n "
      },
      {
        "sha": "eba7aae50f77a1a9db56e7a4ca25416230b1bab2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -12,6 +12,7 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <rpc/blockchain.h>\n+#include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <streams.h>\n #include <sync.h>"
      },
      {
        "sha": "ef6537e4ec26830b3e72209e25722e06d9204233",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -6,15 +6,6 @@\n #ifndef BITCOIN_RPC_PROTOCOL_H\n #define BITCOIN_RPC_PROTOCOL_H\n \n-#include <fs.h>\n-\n-#include <list>\n-#include <map>\n-#include <stdint.h>\n-#include <string>\n-\n-#include <univalue.h>\n-\n //! HTTP status codes\n enum HTTPStatusCode\n {\n@@ -92,18 +83,4 @@ enum RPCErrorCode\n     RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  //!< Server is in safe mode, and command is not allowed in safe mode\n };\n \n-UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n-UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n-std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n-UniValue JSONRPCError(int code, const std::string& message);\n-\n-/** Generate a new RPC authentication cookie and write it to disk */\n-bool GenerateAuthCookie(std::string *cookie_out);\n-/** Read the RPC authentication cookie from disk */\n-bool GetAuthCookie(std::string *cookie_out);\n-/** Delete RPC authentication cookie from disk */\n-void DeleteAuthCookie();\n-/** Parse JSON-RPC batch reply into a vector */\n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n-\n #endif // BITCOIN_RPC_PROTOCOL_H"
      },
      {
        "sha": "69ed7ffcbb1d35096f8252bccd23e5c2f3ab8bbd",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -11,7 +11,7 @@\n #include <keystore.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n-#include <rpc/protocol.h>\n+#include <rpc/request.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <univalue.h>"
      },
      {
        "sha": "56cac6661ecf4fbc2800846d59190406ae66ba53",
        "filename": "src/rpc/request.cpp",
        "status": "renamed",
        "additions": 38,
        "deletions": 4,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -1,15 +1,16 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <rpc/protocol.h>\n+#include <rpc/request.h>\n+\n+#include <fs.h>\n \n #include <random.h>\n-#include <tinyformat.h>\n+#include <rpc/protocol.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n-#include <util/time.h>\n \n /**\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n@@ -148,3 +149,36 @@ std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n     }\n     return batch;\n }\n+\n+void JSONRPCRequest::parse(const UniValue& valRequest)\n+{\n+    // Parse request\n+    if (!valRequest.isObject())\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n+    const UniValue& request = valRequest.get_obj();\n+\n+    // Parse id now so errors from here on will have the id\n+    id = find_value(request, \"id\");\n+\n+    // Parse method\n+    UniValue valMethod = find_value(request, \"method\");\n+    if (valMethod.isNull())\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n+    if (!valMethod.isStr())\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n+    strMethod = valMethod.get_str();\n+    if (fLogIPs)\n+        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s peeraddr=%s\\n\", SanitizeString(strMethod),\n+            this->authUser, this->peerAddr);\n+    else\n+        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s\\n\", SanitizeString(strMethod), this->authUser);\n+\n+    // Parse params\n+    UniValue valParams = find_value(request, \"params\");\n+    if (valParams.isArray() || valParams.isObject())\n+        params = valParams;\n+    else if (valParams.isNull())\n+        params = UniValue(UniValue::VARR);\n+    else\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n+}",
        "previous_filename": "src/rpc/protocol.cpp"
      },
      {
        "sha": "99eb4f9354abb8e7736cb7718c99e32f12b1e6a3",
        "filename": "src/rpc/request.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_REQUEST_H\n+#define BITCOIN_RPC_REQUEST_H\n+\n+#include <string>\n+\n+#include <univalue.h>\n+\n+UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n+UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n+std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n+UniValue JSONRPCError(int code, const std::string& message);\n+\n+/** Generate a new RPC authentication cookie and write it to disk */\n+bool GenerateAuthCookie(std::string *cookie_out);\n+/** Read the RPC authentication cookie from disk */\n+bool GetAuthCookie(std::string *cookie_out);\n+/** Delete RPC authentication cookie from disk */\n+void DeleteAuthCookie();\n+/** Parse JSON-RPC batch reply into a vector */\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n+\n+class JSONRPCRequest\n+{\n+public:\n+    UniValue id;\n+    std::string strMethod;\n+    UniValue params;\n+    bool fHelp;\n+    std::string URI;\n+    std::string authUser;\n+    std::string peerAddr;\n+\n+    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n+    void parse(const UniValue& valRequest);\n+};\n+\n+#endif // BITCOIN_RPC_REQUEST_H"
      },
      {
        "sha": "8b7b517473f9c321dcc927ff4281d81ce1f565f4",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -329,39 +329,6 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void JSONRPCRequest::parse(const UniValue& valRequest)\n-{\n-    // Parse request\n-    if (!valRequest.isObject())\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n-    const UniValue& request = valRequest.get_obj();\n-\n-    // Parse id now so errors from here on will have the id\n-    id = find_value(request, \"id\");\n-\n-    // Parse method\n-    UniValue valMethod = find_value(request, \"method\");\n-    if (valMethod.isNull())\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n-    if (!valMethod.isStr())\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n-    strMethod = valMethod.get_str();\n-    if (fLogIPs)\n-        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s peeraddr=%s\\n\", SanitizeString(strMethod),\n-            this->authUser, this->peerAddr);\n-    else\n-        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s\\n\", SanitizeString(strMethod), this->authUser);\n-\n-    // Parse params\n-    UniValue valParams = find_value(request, \"params\");\n-    if (valParams.isArray() || valParams.isObject())\n-        params = valParams;\n-    else if (valParams.isNull())\n-        params = UniValue(UniValue::VARR);\n-    else\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n-}\n-\n bool IsDeprecatedRPCEnabled(const std::string& method)\n {\n     const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");"
      },
      {
        "sha": "b060db5bf92f8f18ed2d3dade279705b53fbb9d6",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -7,13 +7,14 @@\n #define BITCOIN_RPC_SERVER_H\n \n #include <amount.h>\n-#include <rpc/protocol.h>\n+#include <rpc/request.h>\n #include <uint256.h>\n \n #include <list>\n #include <map>\n #include <stdint.h>\n #include <string>\n+#include <functional>\n \n #include <univalue.h>\n \n@@ -27,21 +28,6 @@ namespace RPCServer\n     void OnStopped(std::function<void ()> slot);\n }\n \n-class JSONRPCRequest\n-{\n-public:\n-    UniValue id;\n-    std::string strMethod;\n-    UniValue params;\n-    bool fHelp;\n-    std::string URI;\n-    std::string authUser;\n-    std::string peerAddr;\n-\n-    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n-    void parse(const UniValue& valRequest);\n-};\n-\n /** Query whether RPC is running */\n bool IsRPCRunning();\n "
      },
      {
        "sha": "29bd629fea5320c4b5565bf2d3dc72670f5bf33a",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "patch": "@@ -9,6 +9,7 @@\n #include <outputtype.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n+#include <rpc/request.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/standard.h>"
      }
    ]
  },
  {
    "sha": "c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2E5ZmMyMzRmM2NlNDAwY2U3OGI5YjQzNGQyZDIxMGIyNjQ2YzUw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T17:39:52Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-08T00:53:52Z"
      },
      "message": "Make the RPCHelpMan aware of JSONRPCRequest and add Check() helper",
      "tree": {
        "sha": "9f9f489e483824d141074f8e811fc2fdef5049d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f9f489e483824d141074f8e811fc2fdef5049d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0ilCAACgkQV692LbM1\nMyIqjBAAkjgsT1CpICNxibyGinEZLI//9CPFfDG2jft7Vxuh1dAdXk4phbtP8CKu\nZoVEB0Ewu3ogWJLTL0PntZZ7VZVjGAcs9P0NvZnnAI25WsGpMRj1zF11nOnATycJ\nu0rV7Pg7T3NBv4rB15rktE6IzZ4byL+DI5Fb+9g9xztN3klOSmBQJ7IC+kHqWWhH\nVn8fGKRtGBHjUqujTnkdC1+us7zBQQLPOzKH+ZR2tTa1aKQU9lHPPBdmS2EZ3do2\nr7LGOwV1O2yR4ixyYWTxbbdI4i+AqoNpquwvmdFGSNVHo1jWe+r+VAGkpH7woZ1y\nutNzEfys7jgjTxr7pU5+cV+ssVSsmAikzl0BNgos1Mm9VbKbdeNe1uEwM2dZe+yc\nyuEKtziGCVkIIa4cAWIyHmR4kDhGPAgbjxPVi5rgLTm5l24noysU4wakWRo25LZ7\niBKKx/rOS2nQS6zSrNLDJ9iJtvKQVUb07lelae1igGL+CQgJoTRLBLXKCicGdJ+G\nsslr1R5HCDrFYbL6uQoVN6Er3TzPaTb+Lb2L9jXo9EgEex11PxICe3TITF+9j+xg\ngO3TuazWpZv3b4/qy4as7jTK+Mj18WDSfxkU7dot+t5x1oUJypHmGiKu+QO3OZAw\n/EYjQNLQEWvnbaGf0+uKaqr7YvGqcs2ldp+hzrnpJxzbbqAwRcQ=\n=VLdJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f9f489e483824d141074f8e811fc2fdef5049d8\nparent 5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560965992 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1562547232 +0900\n\nMake the RPCHelpMan aware of JSONRPCRequest and add Check() helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7a9fc234f3ce400ce78b9b434d2d210b2646c50/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c5e32bbe3dfa790dd8bb421fbd6301ae10b09f5"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "07c4c4e3ab0962d5ebffd2fca92ef32859caa7ba",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7a9fc234f3ce400ce78b9b434d2d210b2646c50/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7a9fc234f3ce400ce78b9b434d2d210b2646c50/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
        "patch": "@@ -243,6 +243,15 @@ class RPCHelpMan\n     std::string ToString() const;\n     /** If the supplied number of args is neither too small nor too high */\n     bool IsValidNumArgs(size_t num_args) const;\n+    /**\n+     * Check if the given request is valid according to this command or if\n+     * the user is asking for help information, and throw help when appropriate.\n+     */\n+    inline void Check(const JSONRPCRequest& request) const {\n+        if (request.fHelp || !IsValidNumArgs(request.params.size())) {\n+            throw std::runtime_error(ToString());\n+        }\n+    }\n \n private:\n     const std::string m_name;"
      }
    ]
  },
  {
    "sha": "b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmZiNjE3YWFhYWQ1ZjljZGQ3ZjJhZDI4MjViMjUzY2E3OTIwNTVk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-19T04:59:11Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-08T00:53:52Z"
      },
      "message": "rpc: switch to using RPCHelpMan.Check()",
      "tree": {
        "sha": "f4de15cab1cb053a1afaa03ba215bafe423d68a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4de15cab1cb053a1afaa03ba215bafe423d68a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl0ilCAACgkQV692LbM1\nMyKYCQ//fEPson0j+q/3wm0mJ2vl2PIn+xAjIC/8A7kMRzTw9UhecO15PSXzTzCe\nthyxRyZdHOSxs8sTIfyP+SbGNEdz1samsnKk6BrrI/GP3YDx8c10IZ1l4YKpfmNZ\n4Dmt+GuI33rKuRGtJAQS8/dcITrV34F9d+OK18WrZgByf2PX0y8j05OK2D4zP+xP\nQcjULb9l6fK36j1NXS3p7OD477xHbkd0TV46GLHnRSoT3XlT9c3UiZtuJDpwtkM1\nxr7OJn7n95rmwPFcfux7kM2RH+BksWN/yxpApW+xjhHdOl+tzYw34zA1rIXT/4wb\nhJVaVArB1oVlgokQXyXdDgaL6cqzexTuTOQ6Mo7CjLwwzRJNjbAjQGC972fKIKHd\nrYLxHE6zLWdhpP96W1JFUmB7DqqKfTZdrOHevj1SD+KKVmNh/ZFB+RXNih+jsRBx\nRNdvSubmqVe5ktoEgPsmwCiPMrl/pyD6BLZeLY+3cxBRaMkAt5wlAaUSIg7JcZPo\n3SpoRUxDpl1nKgsLl5cDQizO5ry5zFy06HwCHHY5AJDG/CJNh0Etm2wzQ2qQrz2z\nGcqa6ZFdaQWkeYxgPvu8Ja27lSxfGnWjO+QWJEqNf4V1m7nxsLdcgebyOFD9qKJa\nqHgw7F2pxnBLlZSEA9lRXHVDmc1BcRPBDpZgD5oDr8ZJ7vDuG7M=\n=HkJ5\n-----END PGP SIGNATURE-----",
        "payload": "tree f4de15cab1cb053a1afaa03ba215bafe423d68a7\nparent c7a9fc234f3ce400ce78b9b434d2d210b2646c50\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1560920351 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1562547232 +0900\n\nrpc: switch to using RPCHelpMan.Check()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7a9fc234f3ce400ce78b9b434d2d210b2646c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7a9fc234f3ce400ce78b9b434d2d210b2646c50"
      }
    ],
    "stats": {
      "total": 652,
      "additions": 154,
      "deletions": 498
    },
    "files": [
      {
        "sha": "b8fc02cf0cbb82aebda912b0249de46b4f8776c0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 100,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -166,8 +166,6 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n \n static UniValue getblockcount(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockcount\",\n                 \"\\nReturns the number of blocks in the longest blockchain.\\n\",\n                 {},\n@@ -178,16 +176,14 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockcount\", \"\")\n             + HelpExampleRpc(\"getblockcount\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return ::ChainActive().Height();\n }\n \n static UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getbestblockhash\",\n                 \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\",\n                 {},\n@@ -198,7 +194,7 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return ::ChainActive().Tip()->GetBlockHash().GetHex();\n@@ -216,8 +212,6 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n \n static UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"waitfornewblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n@@ -234,7 +228,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitfornewblock\", \"1000\")\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     int timeout = 0;\n     if (!request.params[0].isNull())\n         timeout = request.params[0].get_int();\n@@ -257,8 +251,6 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n \n static UniValue waitforblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"waitforblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n@@ -276,7 +268,7 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n             + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     int timeout = 0;\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n@@ -302,8 +294,6 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n \n static UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"waitforblockheight\",\n                 \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n                 \"of the current tip.\\n\"\n@@ -322,7 +312,7 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n             + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     int timeout = 0;\n \n     int height = request.params[0].get_int();\n@@ -347,8 +337,6 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n \n static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n                 \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\",\n                 {},\n@@ -357,16 +345,14 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n                     HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n+\n     SyncWithValidationInterfaceQueue();\n     return NullUniValue;\n }\n \n static UniValue getdifficulty(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getdifficulty\",\n                 \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\",\n                 {},\n@@ -377,7 +363,7 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getdifficulty\", \"\")\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return GetDifficulty(::ChainActive().Tip());\n@@ -504,8 +490,6 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n \n static UniValue getrawmempool(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getrawmempool\",\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n@@ -528,7 +512,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getrawmempool\", \"true\")\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     bool fVerbose = false;\n     if (!request.params[0].isNull())\n@@ -539,8 +523,6 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n@@ -566,8 +548,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     bool fVerbose = false;\n     if (!request.params[1].isNull())\n@@ -609,8 +590,6 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n static UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n@@ -636,8 +615,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     bool fVerbose = false;\n     if (!request.params[1].isNull())\n@@ -679,8 +657,6 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n static UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n@@ -695,8 +671,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n@@ -715,8 +690,6 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n static UniValue getblockhash(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n@@ -729,7 +702,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockhash\", \"1000\")\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -743,8 +716,6 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n \n static UniValue getblockheader(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockheader\",\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n@@ -780,7 +751,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"hash\"));\n \n@@ -846,7 +817,7 @@ static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n \n static UniValue getblock(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"getblock\",\n+    RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n@@ -898,11 +869,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n@@ -1013,8 +980,6 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n \n static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n                     {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n@@ -1027,7 +992,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if (!fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n@@ -1071,8 +1036,6 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n \n static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n@@ -1093,7 +1056,7 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"gettxoutsetinfo\", \"\")\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     UniValue ret(UniValue::VOBJ);\n \n@@ -1116,8 +1079,6 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n UniValue gettxout(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n@@ -1151,7 +1112,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1197,8 +1158,6 @@ static UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n@@ -1212,7 +1171,7 @@ static UniValue verifychain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1297,8 +1256,6 @@ static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockchaininfo\",\n                 \"Returns an object containing various state info regarding blockchain processing.\\n\",\n                 {},\n@@ -1350,7 +1307,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockchaininfo\", \"\")\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1417,8 +1374,6 @@ struct CompareBlocksByHeight\n \n static UniValue getchaintips(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getchaintips\",\n                 \"Return information about all known tips in the block tree,\"\n                 \" including the main chain as well as orphaned branches.\\n\",\n@@ -1449,7 +1404,7 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getchaintips\", \"\")\n             + HelpExampleRpc(\"getchaintips\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1540,8 +1495,6 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n \n static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n                 {},\n@@ -1560,15 +1513,13 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     return MempoolInfoToJSON(::mempool);\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"preciousblock\",\n                 \"\\nTreats a block as if it were received before others with the same work.\\n\"\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n@@ -1581,7 +1532,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n@@ -1606,8 +1557,6 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n \n static UniValue invalidateblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n@@ -1618,7 +1567,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n@@ -1646,8 +1595,6 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n \n static UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"reconsiderblock\",\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n@@ -1659,7 +1606,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n@@ -1685,8 +1632,6 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n \n static UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n@@ -1708,7 +1653,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getchaintxstats\", \"\")\n             + HelpExampleRpc(\"getchaintxstats\", \"2016\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n@@ -1818,7 +1763,7 @@ static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t)\n \n static UniValue getblockstats(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"getblockstats\",\n+    RPCHelpMan{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n                 \"It won't work for some heights with pruning.\\n\",\n                 {\n@@ -1873,10 +1818,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n             + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n                 },\n-    };\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -2077,8 +2019,6 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n \n static UniValue savemempool(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"savemempool\",\n                 \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\",\n                 {},\n@@ -2087,8 +2027,7 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                     HelpExampleCli(\"savemempool\", \"\")\n             + HelpExampleRpc(\"savemempool\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     if (!::mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n@@ -2163,8 +2102,6 @@ class CoinsViewScanReserver\n \n UniValue scantxoutset(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"scantxoutset\",\n                 \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n                 \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n@@ -2213,8 +2150,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"]\\n\"\n                 },\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});\n \n@@ -2301,8 +2237,6 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n \n static UniValue getblockfilter(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockfilter\",\n                 \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n                 {\n@@ -2318,9 +2252,7 @@ static UniValue getblockfilter(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" \\\"basic\\\"\")\n                 }\n-            }.ToString()\n-        );\n-    }\n+            }.Check(request);\n \n     uint256 block_hash = ParseHashV(request.params[0], \"blockhash\");\n     std::string filtertype_name = \"basic\";"
      },
      {
        "sha": "89892ef141d12d13d12e80640a54f95f0de03401",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 30,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -78,8 +78,6 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n \n static UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnetworkhashps\",\n                 \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n@@ -95,7 +93,7 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnetworkhashps\", \"\")\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n@@ -145,8 +143,6 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n \n static UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n@@ -163,7 +159,7 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             + \"If you are running the bitcoin core wallet, you can get a new address to send the newly generated bitcoin to with:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n@@ -183,8 +179,6 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n \n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmininginfo\",\n                 \"\\nReturns a json object containing mining-related information.\",\n                 {},\n@@ -204,8 +198,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -225,8 +218,6 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n@@ -245,7 +236,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -291,8 +282,6 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n \n static UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblocktemplate\",\n                 \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n                 \"It returns data needed to construct a block to work on.\\n\"\n@@ -367,7 +356,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n             + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -697,8 +686,6 @@ class submitblock_StateCatcher : public CValidationInterface\n static UniValue submitblock(const JSONRPCRequest& request)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"submitblock\",\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n@@ -711,8 +698,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n     CBlock& block = *blockptr;\n@@ -762,8 +748,6 @@ static UniValue submitblock(const JSONRPCRequest& request)\n \n static UniValue submitheader(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"submitheader\",\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n@@ -777,8 +761,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                     HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n                     HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     CBlockHeader h;\n     if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n@@ -802,8 +785,6 @@ static UniValue submitheader(const JSONRPCRequest& request)\n \n static UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"estimatesmartfee\",\n                 \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n                 \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n@@ -836,7 +817,7 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"estimatesmartfee\", \"6\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n@@ -867,8 +848,6 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n static UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"estimaterawfee\",\n                 \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n                 \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n@@ -909,7 +888,7 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);"
      },
      {
        "sha": "55d756a8265d4c35f372d02ebe38ef99a1be33c3",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 36,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -25,8 +25,6 @@\n \n static UniValue validateaddress(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"validateaddress\",\n                 \"\\nReturn information about the given bitcoin address.\\n\",\n                 {\n@@ -47,7 +45,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n@@ -70,9 +68,6 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n \n static UniValue createmultisig(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-    {\n-        std::string msg =\n             RPCHelpMan{\"createmultisig\",\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n                 \"It returns a json object with the address and redeemScript.\\n\",\n@@ -96,9 +91,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n                 },\n-            }.ToString();\n-        throw std::runtime_error(msg);\n-    }\n+            }.Check(request);\n \n     int required = request.params[0].get_int();\n \n@@ -135,8 +128,6 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n \n UniValue getdescriptorinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getdescriptorinfo\",\n             {\"\\nAnalyses a descriptor.\\n\"},\n             {\n@@ -153,9 +144,7 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n             RPCExamples{\n                 \"Analyse a descriptor\\n\" +\n                 HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n-            }}.ToString()\n-        );\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -175,8 +164,6 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n \n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n             \"Examples of output descriptors are:\\n\"\n@@ -197,9 +184,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n                 HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\\\" \\\"[0,2]\\\"\")\n-            }}.ToString()\n-        );\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType()}); // Range argument is checked later\n     const std::string desc_str = request.params[0].get_str();\n@@ -254,8 +239,6 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n \n static UniValue verifymessage(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n@@ -276,7 +259,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -313,8 +296,6 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n \n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n@@ -332,7 +313,7 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n@@ -355,8 +336,6 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n \n static UniValue setmocktime(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n@@ -365,8 +344,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     if (!Params().MineBlocksOnDemand())\n         throw std::runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n@@ -421,8 +399,6 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n     /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n      */\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n@@ -451,7 +427,7 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmemoryinfo\", \"\")\n             + HelpExampleRpc(\"getmemoryinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n@@ -489,8 +465,6 @@ static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n \n UniValue logging(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"logging\",\n             \"Gets and sets the logging configuration.\\n\"\n             \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n@@ -522,8 +496,7 @@ UniValue logging(const JSONRPCRequest& request)\n                     HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], [\\\"libevent\\\"]\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     uint32_t original_log_categories = LogInstance().GetCategoryMask();\n     if (request.params[0].isArray()) {"
      },
      {
        "sha": "16b59e3d58121f6483a99817207d69809c2416e8",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 36,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -26,8 +26,6 @@\n \n static UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getconnectioncount\",\n                 \"\\nReturns the number of connections to other nodes.\\n\",\n                 {},\n@@ -38,7 +36,7 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getconnectioncount\", \"\")\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -48,8 +46,6 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n \n static UniValue ping(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"ping\",\n                 \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n                 \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n@@ -60,7 +56,7 @@ static UniValue ping(const JSONRPCRequest& request)\n                     HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -74,8 +70,6 @@ static UniValue ping(const JSONRPCRequest& request)\n \n static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getpeerinfo\",\n                 \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n                 {},\n@@ -131,7 +125,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getpeerinfo\", \"\")\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -258,8 +252,6 @@ static UniValue addnode(const JSONRPCRequest& request)\n \n static UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"disconnectnode\",\n                 \"\\nImmediately disconnects from the specified peer node.\\n\"\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n@@ -275,7 +267,7 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -304,8 +296,6 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n \n static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getaddednodeinfo\",\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n@@ -331,7 +321,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n             + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -374,8 +364,6 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n static UniValue getnettotals(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnettotals\",\n                 \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n                 \"and current time.\\n\",\n@@ -400,7 +388,7 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnettotals\", \"\")\n             + HelpExampleRpc(\"getnettotals\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -443,8 +431,6 @@ static UniValue GetNetworksInfo()\n \n static UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnetworkinfo\",\n                 \"Returns an object containing various state info regarding P2P networking.\\n\",\n                 {},\n@@ -485,7 +471,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnetworkinfo\", \"\")\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n@@ -602,8 +588,6 @@ static UniValue setban(const JSONRPCRequest& request)\n \n static UniValue listbanned(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listbanned\",\n                 \"\\nList all banned IPs/Subnets.\\n\",\n                 {},\n@@ -612,7 +596,7 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n@@ -639,8 +623,6 @@ static UniValue listbanned(const JSONRPCRequest& request)\n \n static UniValue clearbanned(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"clearbanned\",\n                 \"\\nClear all banned IPs.\\n\",\n                 {},\n@@ -649,7 +631,7 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n                     HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     if (!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -661,18 +643,14 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n \n static UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n                     {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n-    }\n+            }.Check(request);\n \n     if (!g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -685,8 +663,6 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n \n static UniValue getnodeaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n@@ -707,8 +683,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnodeaddresses\", \"8\")\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n     if (!g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }"
      },
      {
        "sha": "43ceff8de19e8149904dd5bfff5df6ce59656923",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 78,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -71,7 +71,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n \n static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\n+    RPCHelpMan{\n                 \"getrawtransaction\",\n                 \"\\nReturn the raw transaction data.\\n\"\n \n@@ -149,11 +149,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -217,8 +213,6 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n \n static UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettxoutproof\",\n                 \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n                 \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n@@ -237,8 +231,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n                 },\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     std::set<uint256> setTxids;\n     uint256 oneTxid;\n@@ -313,8 +306,6 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n \n static UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"verifytxoutproof\",\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n@@ -325,8 +316,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n                 },\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n@@ -358,8 +348,6 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n \n static UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"createrawtransaction\",\n                 \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n                 \"Outputs can be addresses or data.\\n\"\n@@ -408,8 +396,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n@@ -426,7 +413,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n \n static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"decoderawtransaction\",\n+    RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n@@ -483,11 +470,7 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n@@ -518,7 +501,7 @@ static std::string GetAllOutputTypes()\n \n static UniValue decodescript(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"decodescript\",\n+    RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n@@ -549,11 +532,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -610,8 +589,6 @@ static UniValue decodescript(const JSONRPCRequest& request)\n \n static UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"combinerawtransaction\",\n                 \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n@@ -629,7 +606,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"combinerawtransaction\", \"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n \n     UniValue txs = request.params[0].get_array();\n@@ -694,8 +671,6 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n \n static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"signrawtransactionwithkey\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second argument is an array of base58-encoded private\\n\"\n@@ -752,7 +727,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                     HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\" \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\", \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n \n@@ -784,7 +759,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n \n static UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"sendrawtransaction\",\n+    RPCHelpMan{\"sendrawtransaction\",\n                 \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n@@ -806,11 +781,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VSTR,\n@@ -848,7 +819,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"testmempoolaccept\",\n+    RPCHelpMan{\"testmempoolaccept\",\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n                 \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n@@ -881,11 +852,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n@@ -964,8 +931,6 @@ static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)\n \n UniValue decodepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n@@ -1062,7 +1027,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -1239,8 +1204,6 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n \n UniValue combinepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"combinepsbt\",\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n@@ -1257,7 +1220,7 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"combinepsbt\", \"[\\\"mybase64_1\\\", \\\"mybase64_2\\\", \\\"mybase64_3\\\"]\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n@@ -1289,8 +1252,6 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n \n UniValue finalizepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"finalizepsbt\",\n                 \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n                 \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n@@ -1312,7 +1273,7 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL}, true);\n \n@@ -1348,8 +1309,6 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n \n UniValue createpsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"createpsbt\",\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n@@ -1392,7 +1351,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n \n     RPCTypeCheck(request.params, {\n@@ -1424,7 +1383,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n \n UniValue converttopsbt(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"converttopsbt\",\n+    RPCHelpMan{\"converttopsbt\",\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n@@ -1448,11 +1407,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"\\nConvert the transaction to a PSBT\\n\"\n                             + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);\n \n@@ -1495,8 +1450,6 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n \n UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"utxoupdatepsbt\",\n             \"\\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.\\n\",\n             {\n@@ -1514,8 +1467,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n-            }}.ToString());\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR}, true);\n \n@@ -1585,8 +1537,6 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n \n UniValue joinpsbts(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"joinpsbts\",\n             \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n             \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n@@ -1601,8 +1551,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n-            }}.ToString());\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n@@ -1659,8 +1608,6 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n \n UniValue analyzepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"analyzepsbt\",\n             \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n             {\n@@ -1694,8 +1641,7 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n-            }}.ToString());\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n "
      },
      {
        "sha": "f6db74b6ed60234265cd5a7e09c5227896210010",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -178,8 +178,6 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n \n static UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"uptime\",\n                 \"\\nReturns the total uptime of the server.\\n\",\n                             {},\n@@ -190,15 +188,13 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n                     HelpExampleCli(\"uptime\", \"\")\n                 + HelpExampleRpc(\"uptime\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(jsonRequest);\n \n     return GetTime() - GetStartupTime();\n }\n \n static UniValue getrpcinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getrpcinfo\",\n                 \"\\nReturns details of the RPC server.\\n\",\n                 {},\n@@ -216,9 +212,7 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"getrpcinfo\", \"\")\n                 + HelpExampleRpc(\"getrpcinfo\", \"\")},\n-            }.ToString()\n-        );\n-    }\n+            }.Check(request);\n \n     LOCK(g_rpc_server_info.mutex);\n     UniValue active_commands(UniValue::VARR);"
      },
      {
        "sha": "7e973194d941210fd1bcd84b19ecddcbfbd3b4a4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 32,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -109,8 +109,6 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"importprivkey\",\n                 \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one private key.\\n\"\n@@ -135,7 +133,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n@@ -217,8 +215,6 @@ UniValue abortrescan(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"abortrescan\",\n                 \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -232,7 +228,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"abortrescan\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if (!pwallet->IsScanning() || pwallet->IsAbortingRescan()) return false;\n     pwallet->AbortRescan();\n@@ -283,8 +279,6 @@ UniValue importaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"importaddress\",\n                 \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n@@ -309,7 +303,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n \n     std::string strLabel;\n@@ -376,8 +370,6 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n@@ -386,8 +378,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     CMutableTransaction tx;\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n@@ -443,8 +434,6 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n@@ -456,7 +445,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -485,8 +474,6 @@ UniValue importpubkey(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"importpubkey\",\n                 \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one public key.\\n\"\n@@ -507,7 +494,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n \n     std::string strLabel;\n@@ -570,8 +557,6 @@ UniValue importwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -587,7 +572,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             \"\\nImport using the json rpc call\\n\"\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if (pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n@@ -735,8 +720,6 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"dumpprivkey\",\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n@@ -751,7 +734,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\")\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -783,8 +766,6 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"dumpwallet\",\n                 \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n                 \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n@@ -802,7 +783,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -1322,8 +1303,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         return NullUniValue;\n     }\n \n-    if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"importmulti\",\n                 \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\\n\"\n                 \"If an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\\n\"\n@@ -1384,8 +1363,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                           \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n                     HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\")\n                 },\n-            }.ToString()\n-        );\n+            }.Check(mainRequest);\n \n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});"
      },
      {
        "sha": "3be814bf772f7283e24a8343c950390af4ad8ecb",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 174,
        "changes": 230,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -159,8 +159,6 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnewaddress\",\n                 \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n                 \"If 'label' is specified, it is added to the address book \\n\"\n@@ -176,7 +174,7 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnewaddress\", \"\")\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -222,8 +220,6 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getrawchangeaddress\",\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n@@ -237,7 +233,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getrawchangeaddress\", \"\")\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -279,8 +275,6 @@ static UniValue setlabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n@@ -292,7 +286,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n                     HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -362,8 +356,6 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 9)\n-        throw std::runtime_error(\n             RPCHelpMan{\"sendtoaddress\",\n                 \"\\nSend an amount to a given address.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n@@ -395,7 +387,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -460,8 +452,6 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listaddressgroupings\",\n                 \"\\nLists groups of addresses which have had their common ownership\\n\"\n                 \"made public by common use as inputs or as the resulting change\\n\"\n@@ -484,7 +474,7 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listaddressgroupings\", \"\")\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -523,8 +513,6 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"signmessage\",\n                 \"\\nSign a message with the private key of an address\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n@@ -545,7 +533,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -591,8 +579,6 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n@@ -612,7 +598,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", 6\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -663,8 +649,6 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n@@ -684,7 +668,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -733,8 +717,6 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getbalance\",\n                 \"\\nReturns the total available balance.\\n\"\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n@@ -756,7 +738,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -796,14 +778,12 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getunconfirmedbalance\",\n                 \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n                 {},\n                 RPCResults{},\n                 RPCExamples{\"\"},\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -825,7 +805,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    const RPCHelpMan help{\"sendmany\",\n+    RPCHelpMan{\"sendmany\",\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n@@ -866,11 +846,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -974,8 +950,6 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n-        std::string msg =\n             RPCHelpMan{\"addmultisigaddress\",\n                 \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n@@ -1004,9 +978,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n                 },\n-            }.ToString();\n-        throw std::runtime_error(msg);\n-    }\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -1211,8 +1183,6 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n@@ -1243,7 +1213,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1264,8 +1234,6 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n@@ -1289,7 +1257,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listreceivedbylabel\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbylabel\", \"6, true, true\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1404,8 +1372,6 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listtransactions\",\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n@@ -1457,7 +1423,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1538,8 +1504,6 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listsinceblock\",\n                 \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n@@ -1592,7 +1556,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1683,8 +1647,6 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n@@ -1732,7 +1694,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" true\")\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1785,8 +1747,6 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"abandontransaction\",\n                 \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n                 \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n@@ -1801,8 +1761,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1833,8 +1792,6 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n@@ -1845,7 +1802,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1872,8 +1829,6 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"keypoolrefill\",\n                 \"\\nFills the keypool.\"+\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n@@ -1885,7 +1840,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                     HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n@@ -1922,8 +1877,6 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"walletpassphrase\",\n                 \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n                 \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n@@ -1943,8 +1896,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2009,8 +1961,6 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n@@ -2022,8 +1972,7 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n                     HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2063,8 +2012,6 @@ static UniValue walletlock(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"walletlock\",\n                 \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n                 \"After calling this method, you will need to call walletpassphrase again\\n\"\n@@ -2081,8 +2028,7 @@ static UniValue walletlock(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletlock\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2107,8 +2053,6 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"encryptwallet\",\n                 \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n                 \"After this, any calls that interact with private keys such as sending or signing \\n\"\n@@ -2131,8 +2075,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2171,8 +2114,6 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"lockunspent\",\n                 \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n                 \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n@@ -2209,7 +2150,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -2300,8 +2241,6 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listlockunspent\",\n                 \"\\nReturns list of temporarily unspendable outputs.\\n\"\n                 \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n@@ -2327,7 +2266,7 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2357,8 +2296,6 @@ static UniValue settxfee(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n@@ -2371,8 +2308,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n                     HelpExampleCli(\"settxfee\", \"0.00001\")\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2399,7 +2335,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n     }\n     CWallet& wallet = *rpc_wallet;\n \n-    const RPCHelpMan help{\n+    RPCHelpMan{\n         \"getbalances\",\n         \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n         {},\n@@ -2420,11 +2356,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         RPCExamples{\n             HelpExampleCli(\"getbalances\", \"\") +\n             HelpExampleRpc(\"getbalances\", \"\")},\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -2469,7 +2401,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    const RPCHelpMan help{\"getwalletinfo\",\n+    RPCHelpMan{\"getwalletinfo\",\n                 \"Returns an object containing various wallet state info.\\n\",\n                 {},\n                 RPCResult{\n@@ -2499,11 +2431,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getwalletinfo\", \"\")\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -2550,8 +2478,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n static UniValue listwalletdir(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"listwalletdir\",\n                 \"Returns a list of wallets in the wallet directory.\\n\",\n                 {},\n@@ -2569,8 +2495,7 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listwalletdir\", \"\")\n             + HelpExampleRpc(\"listwalletdir\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     UniValue wallets(UniValue::VARR);\n     for (const auto& path : ListWalletDir()) {\n@@ -2586,8 +2511,6 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n \n static UniValue listwallets(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listwallets\",\n                 \"Returns a list of currently loaded wallets.\\n\"\n                 \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\",\n@@ -2602,7 +2525,7 @@ static UniValue listwallets(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listwallets\", \"\")\n             + HelpExampleRpc(\"listwallets\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     UniValue obj(UniValue::VARR);\n \n@@ -2621,8 +2544,6 @@ static UniValue listwallets(const JSONRPCRequest& request)\n \n static UniValue loadwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n@@ -2640,7 +2561,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n             + HelpExampleRpc(\"loadwallet\", \"\\\"test.dat\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     WalletLocation location(request.params[0].get_str());\n \n@@ -2674,12 +2595,10 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        std::string flags = \"\";\n-        for (auto& it : WALLET_FLAG_MAP)\n-            if (it.second & MUTABLE_WALLET_FLAGS)\n-                flags += (flags == \"\" ? \"\" : \", \") + it.first;\n-        throw std::runtime_error(\n+            std::string flags = \"\";\n+            for (auto& it : WALLET_FLAG_MAP)\n+                if (it.second & MUTABLE_WALLET_FLAGS)\n+                    flags += (flags == \"\" ? \"\" : \", \") + it.first;\n             RPCHelpMan{\"setwalletflag\",\n                 \"\\nChange the state of the given wallet flag for a wallet.\\n\",\n                 {\n@@ -2697,8 +2616,7 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n                     HelpExampleCli(\"setwalletflag\", \"avoid_reuse\")\n                   + HelpExampleRpc(\"setwalletflag\", \"\\\"avoid_reuse\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     std::string flag_str = request.params[0].get_str();\n     bool value = request.params[1].isNull() || request.params[1].get_bool();\n@@ -2737,7 +2655,7 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\n+    RPCHelpMan{\n         \"createwallet\",\n         \"\\nCreates and loads a new wallet.\\n\",\n         {\n@@ -2757,11 +2675,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n             + HelpExampleRpc(\"createwallet\", \"\\\"testwallet\\\"\")\n         },\n-    };\n+    }.Check(request);\n \n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n     std::string error;\n     std::string warning;\n \n@@ -2841,8 +2756,6 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n static UniValue unloadwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"unloadwallet\",\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n@@ -2854,8 +2767,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n             + HelpExampleRpc(\"unloadwallet\", \"wallet_name\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     std::string wallet_name;\n     if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n@@ -2892,7 +2804,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    const RPCHelpMan help{\n+    RPCHelpMan{\n                 \"listunspent\",\n                 \"\\nReturns array of unspent transaction outputs\\n\"\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n@@ -2946,11 +2858,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n                 },\n-            };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+            }.Check(request);\n \n     int nMinDepth = 1;\n     if (!request.params[0].isNull()) {\n@@ -3219,7 +3127,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    const RPCHelpMan help{\"fundrawtransaction\",\n+    RPCHelpMan{\"fundrawtransaction\",\n                 \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                 \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n                 \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n@@ -3283,11 +3191,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"\\nSend the transaction\\n\"\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n \n@@ -3320,8 +3224,6 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"signrawtransactionwithwallet\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n@@ -3371,7 +3273,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n \n@@ -3404,8 +3306,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"bumpfee\",\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n@@ -3453,8 +3353,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n                     HelpExampleCli(\"bumpfee\", \"<txid>\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n@@ -3567,8 +3466,6 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -3586,8 +3483,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n             + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     WalletRescanReserver reserver(pwallet);\n     if (!reserver.reserve()) {\n@@ -3774,8 +3670,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n                 \"to be in the wallet.\\n\",\n@@ -3824,8 +3718,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -3902,8 +3795,6 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n@@ -3920,7 +3811,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n             + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -3961,8 +3852,6 @@ static UniValue listlabels(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n@@ -3984,7 +3873,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlabels\", \"receive\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -4018,8 +3907,6 @@ UniValue sethdseed(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"sethdseed\",\n                 \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n                 \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n@@ -4040,8 +3927,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n             + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     if (pwallet->chain().isInitialBlockDownload()) {\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n@@ -4097,8 +3983,6 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"walletprocesspsbt\",\n                 \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n                 \"that we can sign for.\" +\n@@ -4125,7 +4009,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n \n@@ -4166,8 +4050,6 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n-        throw std::runtime_error(\n             RPCHelpMan{\"walletcreatefundedpsbt\",\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n@@ -4239,7 +4121,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"\\nCreate a transaction with no inputs\\n\"\n                             + HelpExampleCli(\"walletcreatefundedpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                                 },\n-                            }.ToString());\n+                            }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,"
      },
      {
        "sha": "cf97b7eccee6cbabc5d45ebea6d0be6ad0e4fdba",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb617aaaad5f9cdd7f2ad2825b253ca792055d/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=b6fb617aaaad5f9cdd7f2ad2825b253ca792055d",
        "patch": "@@ -15,8 +15,6 @@ namespace {\n \n UniValue getzmqnotifications(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getzmqnotifications\",\n                 \"\\nReturns information about the active ZeroMQ notifications.\\n\",\n                 {},\n@@ -34,8 +32,7 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getzmqnotifications\", \"\")\n             + HelpExampleRpc(\"getzmqnotifications\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     UniValue result(UniValue::VARR);\n     if (g_zmq_notification_interface != nullptr) {"
      }
    ]
  }
]