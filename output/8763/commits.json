[
  {
    "sha": "58afbb2868902669b17d8084afe55d3615bf9f6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGFmYmIyODY4OTAyNjY5YjE3ZDgwODRhZmU1NWQzNjE1YmY5ZjZk",
    "commit": {
      "author": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2016-09-20T04:49:57Z"
      },
      "committer": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2016-09-20T04:49:57Z"
      },
      "message": "Optionally sweep funds from private key.\n\nDeclared wallet rpc function \"sweepkey\" in src/wallet/rpcwallet.cpp\n\nAdded \"sweepkey\" rpc function, can be used to sweep a wallet's private key's\noutputs to a new key.\n\nIn rpc wallet function \"importprivkey\", added 2 optional parameters\nbool sweep & destination bitcoin address for sweep transaction.\n(Optionally sweep funds on private key import)\n\nAdded SweepPrivKey function to src/wallet/rpcdump.cpp to help \"sweepkey\"\nand \"importprivkey\"",
      "tree": {
        "sha": "94359163933373659e7967cd27c7c2836c616f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94359163933373659e7967cd27c7c2836c616f46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58afbb2868902669b17d8084afe55d3615bf9f6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4MXjAAoJEJHwhYy7m2V07iMP/2XyGeY+SGkWYg90LY2/IKoo\n+Un+hPpoQllLNQR06G9xmyzeJJ8HBD7XmwhXW1WL+AMcT6h6Ik05vvQvPGwVWi7Q\nw7pYLYa9nMywGSCruJMRzwlDTOQksie7rkUkI1hUTZDt1f/DYqkFOr1eOi95wY34\ncDXTNeY3+d9Kg9h/hlh0dc/SKsflt/H9yJnegzdnQ3H7LWM6gq9VwMkf4eLQ+2x0\nMx0lT6t7XGDSa2RKVE0gYD++/N021mw0IthoUvQERXc5tXswmez2cBz0fA/KvyCr\nOpySTCHhSxQ4NgcUD6ABlZ+DeiXIf2g37OpYXGEA5ufNuEypT6mG/HgnvwEOUEQ2\n3i+HlSiQU089F9ziMVN6/sjgbFLGV3Z1OVi73iLiOhv1/MuPHtNA1uofR+MMrdS7\ngoRhQRcSNrdP/ZzPmZbxevq3pw+kM+q/M+f9tZLNTtJ2Jq9ngY1CrcYXaKExzGwr\nrGvAVJnXgmZN/A8KslQJK6DPxLyxUM9acx31RFnIDuBJCfAN219HtJy349M0KkL/\nDEAGcW+fzs3XHHnWDCQYgjj8ACOFg6dmPiPk35e/aV5v8HePo65c0h3LKy8oLzux\nLkO0+P4k7GWqLPZsC+vITcyvF8GJMqoobdMMuy66M9Aqe3JVR3smp3bvjpvmlAvd\nqO2M97sefn/mVgyO8n5J\n=pEVn\n-----END PGP SIGNATURE-----",
        "payload": "tree 94359163933373659e7967cd27c7c2836c616f46\nparent 1e5799c52535a3fc20e885916f1e7ed33ecc7f46\nauthor CryptAxe <cryptaxe@gmail.com> 1474346997 -0700\ncommitter CryptAxe <cryptaxe@gmail.com> 1474346997 -0700\n\nOptionally sweep funds from private key.\n\nDeclared wallet rpc function \"sweepkey\" in src/wallet/rpcwallet.cpp\n\nAdded \"sweepkey\" rpc function, can be used to sweep a wallet's private key's\noutputs to a new key.\n\nIn rpc wallet function \"importprivkey\", added 2 optional parameters\nbool sweep & destination bitcoin address for sweep transaction.\n(Optionally sweep funds on private key import)\n\nAdded SweepPrivKey function to src/wallet/rpcdump.cpp to help \"sweepkey\"\nand \"importprivkey\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58afbb2868902669b17d8084afe55d3615bf9f6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58afbb2868902669b17d8084afe55d3615bf9f6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58afbb2868902669b17d8084afe55d3615bf9f6d/comments",
    "author": {
      "login": "CryptAxe",
      "id": 8107318,
      "node_id": "MDQ6VXNlcjgxMDczMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptAxe",
      "html_url": "https://github.com/CryptAxe",
      "followers_url": "https://api.github.com/users/CryptAxe/followers",
      "following_url": "https://api.github.com/users/CryptAxe/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptAxe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
      "repos_url": "https://api.github.com/users/CryptAxe/repos",
      "events_url": "https://api.github.com/users/CryptAxe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CryptAxe",
      "id": 8107318,
      "node_id": "MDQ6VXNlcjgxMDczMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptAxe",
      "html_url": "https://github.com/CryptAxe",
      "followers_url": "https://api.github.com/users/CryptAxe/followers",
      "following_url": "https://api.github.com/users/CryptAxe/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptAxe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
      "repos_url": "https://api.github.com/users/CryptAxe/repos",
      "events_url": "https://api.github.com/users/CryptAxe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5799c52535a3fc20e885916f1e7ed33ecc7f46"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 174,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f10ba4a01211d6bd503534a3eeaf13daa2dc8935",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 172,
        "deletions": 3,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58afbb2868902669b17d8084afe55d3615bf9f6d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58afbb2868902669b17d8084afe55d3615bf9f6d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=58afbb2868902669b17d8084afe55d3615bf9f6d",
        "patch": "@@ -7,11 +7,14 @@\n #include \"rpc/server.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n+#include \"script/sign.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n+#include \"consensus/validation.h\"\n #include \"wallet.h\"\n #include \"merkleblock.h\"\n #include \"core_io.h\"\n@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strSecret = params[0].get_str();\n+    string strAddress = params[1].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    if (!vchSecret.SetString(strSecret))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    if (!SweepPrivKey(vchSecret, address))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"SweepPrivKey failed!\");\n+\n+    return NullUniValue;\n+}\n+\n UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. sweepkey             (boolean, optional, default=false) Sweep imported key for improved security\\n\"\n+            \"5. \\\"bitcoinaddress\\\"   (bitcoinaddress, optional) Destination address for sweep tx\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump a private key\\n\"\n@@ -95,11 +245,12 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n             \"\\nImport using a label and without rescan\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"testing\\\" false\") +\n+            \"\\nImport and sweep key\\n\"\n+            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"toSweep\\\" true true \\\"destAddress\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n         );\n \n-\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     EnsureWalletIsUnlocked();\n@@ -147,6 +298,24 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n         }\n+\n+        // Whether to perform key sweep after import\n+        bool fSweep = false;\n+        if (params.size() > 3)\n+            fSweep = params[3].getBool();\n+\n+        if (fSweep) {\n+            if (!(params.size() > 4))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Must provide destination address to sweep key!\");\n+\n+            CBitcoinAddress address(params[4].get_str());\n+            if (!address.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid destination Bitcoin address!\");\n+            }\n+\n+            // Sweep the imported key\n+            SweepPrivKey(vchSecret, address);\n+        }\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "73f7fb0893d8ff29ba78da5f9f5469bff4636ae8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58afbb2868902669b17d8084afe55d3615bf9f6d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58afbb2868902669b17d8084afe55d3615bf9f6d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=58afbb2868902669b17d8084afe55d3615bf9f6d",
        "patch": "@@ -2569,6 +2569,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n }\n \n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n+extern UniValue sweepkey(const UniValue& params, bool fHelp);\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n extern UniValue importpubkey(const UniValue& params, bool fHelp);\n@@ -2600,6 +2601,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"gettransaction\",           &gettransaction,           false },\n     { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false },\n     { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false },\n+    { \"wallet\",             \"sweepkey\",                 &sweepkey,                 false },\n     { \"wallet\",             \"importprivkey\",            &importprivkey,            true  },\n     { \"wallet\",             \"importwallet\",             &importwallet,             true  },\n     { \"wallet\",             \"importaddress\",            &importaddress,            true  },"
      }
    ]
  }
]