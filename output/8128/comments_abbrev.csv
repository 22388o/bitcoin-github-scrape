sipa,2016-06-01T16:24:49Z,Concept ACK. I'll review for move and correctness later.\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-223047566,223047566,
jonasschnelli,2016-06-01T19:01:01Z,Concept ACK.\n\nnits: \n- [Copyright in new file](https://github.com/bitcoin/bitcoin/pull/8128/files#diff-b64569708508232923e5fe3059396334R2)\n- [Indent](https://github.com/bitcoin/bitcoin/pull/8128/files#diff-4881310bed00446083e365942f29d5ecR206)\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-223092039,223092039,
dcousens,2016-06-02T03:08:16Z,concept ACK (utACK only up to 1394611 for now)\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-223184252,223184252,
theuni,2016-06-25T14:40:19Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-228546859,228546859,
sipa,2016-07-21T12:53:54Z,utACK 584dcdc2cfac757130b060879aba1b25cff5cedd with a tiny nit.\nVerified d374dc01f8e388101a039dcd642d566b9296d5da to be move-only.\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-234244286,234244286,
theuni,2016-07-27T21:11:09Z,@sipa Thanks for the review. I added a separate commit for the nit rather than clobbering the verified move-only commit hashes. I'm happy to squash for merge.\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-235722274,235722274,
sipa,2016-07-30T00:24:26Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-236324871,236324871,
sipa,2016-07-30T21:15:41Z,@theuni Trivial rebase: https://github.com/sipa/bitcoin/commits/pr8128.\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-236390371,236390371,
theuni,2016-07-31T18:02:34Z,"Rebased and squashed the nit while I was at it.\n\n@sipa: I rebased on the same commit as you, so the diff should be null.\n",https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-236446257,236446257,
paveljanik,2016-07-31T20:20:43Z,utACK https://github.com/bitcoin/bitcoin/pull/8128/commits/21ba407a7369a0229b8a8554dee0da63a64e6639\n\nThis also helped reducing shadow warnings from the `net*` codes (e.g. for `randomize_credentials`: from 309 occurrences in the build log to 42 only).\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-236454209,236454209,
sipa,2016-08-05T19:09:43Z,utACK 8945384bca00f74ba85c98a52925c254c49025a5\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-237937335,237937335,
sipa,2016-08-10T17:45:18Z,@theuni Can you address @paveljanik's comments above?\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-238945750,238945750,
theuni,2016-08-11T02:00:12Z,"Whoops, missed @paveljanik's batch.\n@paveljanik Logic for the cstr's only was that they're going to be used as pointers for the lookup anyway. That kinda breaks down though since we end up using strings for pre-processing. I can add a string version as well if you'd like.\n\nWill fix up the nits.\n",https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239055918,239055918,
paveljanik,2016-08-11T11:45:40Z,"@theuni I think it can simplify a lot of code... But I'll leave the decision on you, of course.\n",https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239138622,239138622,
theuni,2016-08-12T18:20:29Z,"@paveljanik Looking at the others, I'd rather not add a string method here. The most logical (imo) choices are:\n1. Use char* and std::string for Lookup*. Lots of duplication for functionality that just ends up acting on c strings anyway.\n2. Use std::string (by value) everywhere. Dangerous when passing in null pointers.\n3. Use char* everywhere. Means using c_str() to call in from std::string, bu",https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239522023,239522023,
paveljanik,2016-08-12T18:35:05Z,"@theuni: OK, agreed.\n\nutACK https://github.com/bitcoin/bitcoin/pull/8128/commits/9e9d644f5178da8b5743ea3ddc3b779a2c8d1cd4\n",https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239525745,239525745,
laanwj,2016-08-13T15:12:52Z,"Agree with the decision to use `char*` here. C string manipulation, because of the inherent buffer overflow risks, should not be used in any new code, but there is no need to refactor this right now in old code, or new code closely modeled after the old code. And these strings are not manipulated anyhow, but directly passed through to libevent/the OS, so nothing would be won by making them `std::s",https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239625600,239625600,
laanwj,2016-08-15T11:26:17Z,utACK https://github.com/bitcoin/bitcoin/pull/8128/commits/9e9d644f5178da8b5743ea3ddc3b779a2c8d1cd4\n,https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239781306,239781306,
sipa,2016-07-21T12:43:13Z,symtex? syntax?\n,https://github.com/bitcoin/bitcoin/pull/8128#discussion_r71697679,71697679,src/netbase.cpp
paveljanik,2016-07-31T19:02:33Z,nit: Please move `netaddress.h` one line up to match the alphabet and the `cpp` files order below.\n,https://github.com/bitcoin/bitcoin/pull/8128#discussion_r72909010,72909010,src/Makefile.am
paveljanik,2016-07-31T19:04:24Z,nit: align comments.\n,https://github.com/bitcoin/bitcoin/pull/8128#discussion_r72909032,72909032,src/httpserver.cpp
paveljanik,2016-07-31T19:07:59Z,Hmm. Why `char *` instead of `std::string` in prototypes and c_str() everywhere?\n\nEdit: probably to keep the old/already used semantics?\n,https://github.com/bitcoin/bitcoin/pull/8128#discussion_r72909070,72909070,src/httpserver.cpp
laanwj,2016-08-01T06:58:55Z,"You ignore the return value of `Lookup*` almost everywhere. Is this on purpose?\nI think the old behavior was to return a service with `!IsValid()` when the lookup fails. But if that is still the case we could just as well have the API be:\n\n```\npeer = LookupNumeric(address, port);\n```\n\nThen check for IsValid afterward.\n",https://github.com/bitcoin/bitcoin/pull/8128#discussion_r72931075,72931075,src/httpserver.cpp
laanwj,2016-08-01T07:00:16Z,Don't use side-effects of assertions\n,https://github.com/bitcoin/bitcoin/pull/8128#discussion_r72931178,72931178,src/torcontrol.cpp
theuni,2016-08-01T16:18:42Z,"Yes, this is inconsistent. The return value was intended to be a shortcut to avoid having to check for IsValid afterwards, but most places end up forwarding the result elsewhere even if invalid.\n\nI'll just remove the return.\n",https://github.com/bitcoin/bitcoin/pull/8128#discussion_r73007062,73007062,src/httpserver.cpp
theuni,2016-08-01T16:19:50Z,"Thanks, will remove. This should just be covered by tests.\n",https://github.com/bitcoin/bitcoin/pull/8128#discussion_r73007243,73007243,src/torcontrol.cpp
