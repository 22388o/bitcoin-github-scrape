[
  {
    "sha": "82b7dc373afff277d3083d09e68c6b69778f312f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmI3ZGMzNzNhZmZmMjc3ZDMwODNkMDllNjhjNmI2OTc3OGYzMTJm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-23T14:58:42Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-26T10:36:38Z"
      },
      "message": "[wallet] Add GetLegacyBalance method to simplify getbalance RPC\n\nThis adds a simpler new implementation of getbalance logic along with asserts\nto confirm it behaves identically to the old logic. The old logic is removed in\nthe next commit.",
      "tree": {
        "sha": "0359a2ebea49e644a60ef76f2e65c37bb6da3a28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0359a2ebea49e644a60ef76f2e65c37bb6da3a28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82b7dc373afff277d3083d09e68c6b69778f312f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82b7dc373afff277d3083d09e68c6b69778f312f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82b7dc373afff277d3083d09e68c6b69778f312f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82b7dc373afff277d3083d09e68c6b69778f312f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd9ec0ef1ea73209ba9e491e4b7847c895ca7a2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd9ec0ef1ea73209ba9e491e4b7847c895ca7a2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd9ec0ef1ea73209ba9e491e4b7847c895ca7a2f"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "98efb8bf6d0bdc29a43da29f20daa379a3b0f8bf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82b7dc373afff277d3083d09e68c6b69778f312f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82b7dc373afff277d3083d09e68c6b69778f312f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=82b7dc373afff277d3083d09e68c6b69778f312f",
        "patch": "@@ -729,6 +729,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n     if (request.params.size() == 0)\n         return  ValueFromAmount(pwallet->GetBalance());\n \n+    const std::string* account = request.params[0].get_str() != \"*\" ? &request.params[0].get_str() : nullptr;\n+\n     int nMinDepth = 1;\n     if (request.params.size() > 1)\n         nMinDepth = request.params[1].get_int();\n@@ -737,6 +739,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n         if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n+    CAmount legacyBalance = pwallet->GetLegacyBalance(filter, nMinDepth, account);\n+\n     if (request.params[0].get_str() == \"*\") {\n         // Calculate total balance in a very different way from GetBalance().\n         // The biggest difference is that GetBalance() sums up all unspent\n@@ -764,13 +768,15 @@ UniValue getbalance(const JSONRPCRequest& request)\n                 nBalance -= s.amount;\n             nBalance -= allFee;\n         }\n+        assert(nBalance == legacyBalance);\n         return  ValueFromAmount(nBalance);\n     }\n \n     std::string strAccount = AccountFromValue(request.params[0]);\n \n     CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, filter);\n \n+    assert(nBalance == legacyBalance);\n     return ValueFromAmount(nBalance);\n }\n \n@@ -902,6 +908,8 @@ UniValue sendfrom(const JSONRPCRequest& request)\n \n     // Check funds\n     CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount legacyBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n+    assert(nBalance == legacyBalance);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -1011,6 +1019,8 @@ UniValue sendmany(const JSONRPCRequest& request)\n \n     // Check funds\n     CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount legacyBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n+    assert(nBalance == legacyBalance);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n "
      },
      {
        "sha": "cd94eefb20a231b8bdaf74f1de5a2ef9780e5109",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82b7dc373afff277d3083d09e68c6b69778f312f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82b7dc373afff277d3083d09e68c6b69778f312f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=82b7dc373afff277d3083d09e68c6b69778f312f",
        "patch": "@@ -1975,6 +1975,49 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n+// Calculate total balance in a different way from GetBalance. The biggest\n+// difference is that GetBalance sums up all unspent TxOuts paying to the\n+// wallet, while this sums up both spent and unspent TxOuts paying to the\n+// wallet, and then subtracts the values of TxIns spending from the wallet. This\n+// also has fewer restrictions on which unconfirmed transactions are considered\n+// trusted.\n+CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth, const std::string* account) const\n+{\n+    LOCK2(cs_main, cs_wallet);\n+\n+    CAmount balance = 0;\n+    for (const auto& entry : mapWallet) {\n+        const CWalletTx& wtx = entry.second;\n+        const int depth = wtx.GetDepthInMainChain();\n+        if (depth < 0 || !CheckFinalTx(*wtx.tx) || wtx.GetBlocksToMaturity() > 0) {\n+            continue;\n+        }\n+\n+        // Loop through tx outputs and add incoming payments. For outgoing txs,\n+        // treat change outputs specially, as part of the amount debited.\n+        CAmount debit = wtx.GetDebit(filter);\n+        const bool outgoing = debit > 0;\n+        for (const CTxOut& out : wtx.tx->vout) {\n+            if (outgoing && IsChange(out)) {\n+                debit -= out.nValue;\n+            } else if (IsMine(out) & filter && depth >= minDepth && (!account || *account == GetAccountName(out.scriptPubKey))) {\n+                balance += out.nValue;\n+            }\n+        }\n+\n+        // For outgoing txs, subtract amount debited.\n+        if (outgoing && (!account || *account == wtx.strFromAccount)) {\n+            balance -= debit;\n+        }\n+    }\n+\n+    if (account) {\n+        balance += CWalletDB(*dbw).GetAccountCreditDebit(*account);\n+    }\n+\n+    return balance;\n+}\n+\n void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n {\n     vCoins.clear();\n@@ -2911,6 +2954,21 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     return CWalletDB(*dbw).EraseName(CBitcoinAddress(address).ToString());\n }\n \n+const std::string& CWallet::GetAccountName(const CScript& scriptPubKey) const\n+{\n+    CTxDestination address;\n+    if (ExtractDestination(scriptPubKey, address) && !scriptPubKey.IsUnspendable()) {\n+        auto mi = mapAddressBook.find(address);\n+        if (mi != mapAddressBook.end()) {\n+            return mi->second.name;\n+        }\n+    }\n+    // A scriptPubKey that doesn't have an entry in the address book is\n+    // associated with the default account (\"\").\n+    const static std::string DEFAULT_ACCOUNT_NAME;\n+    return DEFAULT_ACCOUNT_NAME;\n+}\n+\n bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n {\n     if (!CWalletDB(*dbw).WriteDefaultKey(vchPubKey))"
      },
      {
        "sha": "342715b4781a2eba4d989c59be9d77200f0cc4e0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82b7dc373afff277d3083d09e68c6b69778f312f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82b7dc373afff277d3083d09e68c6b69778f312f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=82b7dc373afff277d3083d09e68c6b69778f312f",
        "patch": "@@ -918,6 +918,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n+    CAmount GetLegacyBalance(const isminefilter& filter, int minDepth, const std::string* account) const;\n \n     /**\n      * Insert additional inputs into the transaction by\n@@ -1004,6 +1005,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n+    const std::string& GetAccountName(const CScript& scriptPubKey) const;\n+\n     void Inventory(const uint256 &hash) override\n     {\n         {"
      }
    ]
  },
  {
    "sha": "02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ5ZjUwZDVmM2M5NmZlODg4YzIzMGQ1OWM1YWZkYWI0YzdjNmEz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-23T16:04:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-26T10:36:38Z"
      },
      "message": "[wallet] Remove unneeded legacy getbalance code",
      "tree": {
        "sha": "0b8e431e67d4ce3f406dc348f07202c3064e3d23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b8e431e67d4ce3f406dc348f07202c3064e3d23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82b7dc373afff277d3083d09e68c6b69778f312f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82b7dc373afff277d3083d09e68c6b69778f312f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82b7dc373afff277d3083d09e68c6b69778f312f"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 3,
      "deletions": 116
    },
    "files": [
      {
        "sha": "d1e7485d04224c0d4debbefaaf932e02aa2d0f02",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 45,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
        "patch": "@@ -739,45 +739,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n         if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n-    CAmount legacyBalance = pwallet->GetLegacyBalance(filter, nMinDepth, account);\n-\n-    if (request.params[0].get_str() == \"*\") {\n-        // Calculate total balance in a very different way from GetBalance().\n-        // The biggest difference is that GetBalance() sums up all unspent\n-        // TxOuts paying to the wallet, while this sums up both spent and\n-        // unspent TxOuts paying to the wallet, and then subtracts the values of\n-        // TxIns spending from the wallet. This also has fewer restrictions on\n-        // which unconfirmed transactions are considered trusted.\n-        CAmount nBalance = 0;\n-        for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n-            const CWalletTx& wtx = pairWtx.second;\n-            if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n-                continue;\n-\n-            CAmount allFee;\n-            std::string strSentAccount;\n-            std::list<COutputEntry> listReceived;\n-            std::list<COutputEntry> listSent;\n-            wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n-            if (wtx.GetDepthInMainChain() >= nMinDepth)\n-            {\n-                BOOST_FOREACH(const COutputEntry& r, listReceived)\n-                    nBalance += r.amount;\n-            }\n-            BOOST_FOREACH(const COutputEntry& s, listSent)\n-                nBalance -= s.amount;\n-            nBalance -= allFee;\n-        }\n-        assert(nBalance == legacyBalance);\n-        return  ValueFromAmount(nBalance);\n-    }\n-\n-    std::string strAccount = AccountFromValue(request.params[0]);\n-\n-    CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, filter);\n-\n-    assert(nBalance == legacyBalance);\n-    return ValueFromAmount(nBalance);\n+    return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));\n }\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n@@ -907,9 +869,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     EnsureWalletIsUnlocked(pwallet);\n \n     // Check funds\n-    CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n-    CAmount legacyBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n-    assert(nBalance == legacyBalance);\n+    CAmount nBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -1018,9 +978,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     EnsureWalletIsUnlocked(pwallet);\n \n     // Check funds\n-    CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n-    CAmount legacyBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n-    assert(nBalance == legacyBalance);\n+    CAmount nBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n "
      },
      {
        "sha": "03659f50b2930739b8bac86750626b9d7c3ac725",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
        "patch": "@@ -1457,41 +1457,6 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n }\n \n-void CWalletTx::GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n-                                  CAmount& nSent, CAmount& nFee, const isminefilter& filter) const\n-{\n-    nReceived = nSent = nFee = 0;\n-\n-    CAmount allFee;\n-    std::string strSentAccount;\n-    std::list<COutputEntry> listReceived;\n-    std::list<COutputEntry> listSent;\n-    GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n-\n-    if (strAccount == strSentAccount)\n-    {\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n-            nSent += s.amount;\n-        nFee = allFee;\n-    }\n-    {\n-        LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const COutputEntry& r, listReceived)\n-        {\n-            if (pwallet->mapAddressBook.count(r.destination))\n-            {\n-                std::map<CTxDestination, CAddressBookData>::const_iterator mi = pwallet->mapAddressBook.find(r.destination);\n-                if (mi != pwallet->mapAddressBook.end() && (*mi).second.name == strAccount)\n-                    nReceived += r.amount;\n-            }\n-            else if (strAccount.empty())\n-            {\n-                nReceived += r.amount;\n-            }\n-        }\n-    }\n-}\n-\n /**\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n@@ -3315,37 +3280,6 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n     return ret;\n }\n \n-CAmount CWallet::GetAccountBalance(const std::string& strAccount, int nMinDepth, const isminefilter& filter)\n-{\n-    CWalletDB walletdb(*dbw);\n-    return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n-}\n-\n-CAmount CWallet::GetAccountBalance(CWalletDB& walletdb, const std::string& strAccount, int nMinDepth, const isminefilter& filter)\n-{\n-    CAmount nBalance = 0;\n-\n-    // Tally wallet transactions\n-    for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n-        if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n-            continue;\n-\n-        CAmount nReceived, nSent, nFee;\n-        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee, filter);\n-\n-        if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n-            nBalance += nReceived;\n-        nBalance -= nSent + nFee;\n-    }\n-\n-    // Tally internal accounting entries\n-    nBalance += walletdb.GetAccountCreditDebit(strAccount);\n-\n-    return nBalance;\n-}\n-\n std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAccount) const\n {\n     LOCK(cs_wallet);"
      },
      {
        "sha": "6710c39ce29cbb001346395132e0b341860a7318",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=02d9f50d5f3c96fe888c230d59c5afdab4c7c6a3",
        "patch": "@@ -451,9 +451,6 @@ class CWalletTx : public CMerkleTx\n     void GetAmounts(std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n-                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n-\n     bool IsFromMe(const isminefilter& filter) const\n     {\n         return (GetDebit(filter) > 0);\n@@ -973,8 +970,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, CAmount> GetAddressBalances();\n \n-    CAmount GetAccountBalance(const std::string& strAccount, int nMinDepth, const isminefilter& filter);\n-    CAmount GetAccountBalance(CWalletDB& walletdb, const std::string& strAccount, int nMinDepth, const isminefilter& filter);\n     std::set<CTxDestination> GetAccountAddresses(const std::string& strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;"
      }
    ]
  }
]