[
  {
    "sha": "69850957c238b2954c2dd0c941ef111334cf54e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTg1MDk1N2MyMzhiMjk1NGMyZGQwYzk0MWVmMTExMzM0Y2Y1NGUx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-01-24T15:34:02Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-03-11T03:12:57Z"
      },
      "message": "Support for Tonal Bitcoin units (\u1d47TBC, \u02e2TBC, and TBC)\n\nOnly available on dropdowns when a Tonal-compatible font is installed",
      "tree": {
        "sha": "287664a0305aa6356d66279ec9f6afc90c208e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287664a0305aa6356d66279ec9f6afc90c208e44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69850957c238b2954c2dd0c941ef111334cf54e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69850957c238b2954c2dd0c941ef111334cf54e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69850957c238b2954c2dd0c941ef111334cf54e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69850957c238b2954c2dd0c941ef111334cf54e1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4585d828b490f826cf863353d1cdf41ec4cb0724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4585d828b490f826cf863353d1cdf41ec4cb0724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4585d828b490f826cf863353d1cdf41ec4cb0724"
      }
    ],
    "stats": {
      "total": 272,
      "additions": 247,
      "deletions": 25
    },
    "files": [
      {
        "sha": "5845d3abfab52904e0acc2bc4993f99e6f56b172",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -101,6 +101,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/aboutdialog.h \\\n     src/qt/editaddressdialog.h \\\n     src/qt/bitcoinaddressvalidator.h \\\n+    src/qt/tonalutils.h \\\n     src/base58.h \\\n     src/bignum.h \\\n     src/checkpoints.h \\\n@@ -205,7 +206,8 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/askpassphrasedialog.cpp \\\n     src/protocol.cpp \\\n     src/qt/notificator.cpp \\\n-    src/qt/qtipcserver.cpp\n+    src/qt/qtipcserver.cpp \\\n+    src/qt/tonalutils.cpp\n \n RESOURCES += \\\n     src/qt/bitcoin.qrc"
      },
      {
        "sha": "7085320ec10304b7d01ded4ee81203fe4bc8bb7f",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 7,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -14,15 +14,53 @@\n #include <QApplication>\n #include <qmath.h>\n \n+#include \"tonalutils.h\"\n+\n+BitcoinAmountSpinBox::BitcoinAmountSpinBox(QWidget *parent)\n+ : QDoubleSpinBox(parent), currentUnit(-1)\n+{\n+}\n+\n+QValidator::State BitcoinAmountSpinBox::validate(QString&text, int&pos) const\n+{\n+    switch (currentNumsys) {\n+    default:\n+    case BitcoinUnits::BTC:\n+        return QDoubleSpinBox::validate(text, pos);\n+    case BitcoinUnits::TBC:\n+        return TonalUtils::validate(text, pos);\n+    }\n+}\n+\n+QString BitcoinAmountSpinBox::textFromValue(double value) const\n+{\n+    return BitcoinUnits::format(currentUnit, value);\n+}\n+\n+double BitcoinAmountSpinBox::valueFromText(const QString&text) const\n+{\n+    qint64 val;\n+    BitcoinUnits::parse(currentUnit, text, &val);\n+    return val;\n+}\n+\n+void BitcoinAmountSpinBox::setUnit(int unit)\n+{\n+    currentUnit = unit;\n+    currentNumsys = BitcoinUnits::numsys(unit);\n+}\n+\n+\n BitcoinAmountField::BitcoinAmountField(QWidget *parent):\n         QWidget(parent), amount(0), currentUnit(-1)\n {\n-    amount = new QDoubleSpinBox(this);\n+    amount = new BitcoinAmountSpinBox(this);\n     amount->setLocale(QLocale::c());\n     amount->setDecimals(8);\n     amount->installEventFilter(this);\n     amount->setMaximumWidth(170);\n     amount->setSingleStep(0.001);\n+    amount->setMaximum(21e14);\n \n     QHBoxLayout *layout = new QHBoxLayout(this);\n     layout->addWidget(amount);\n@@ -50,7 +88,7 @@ void BitcoinAmountField::setText(const QString &text)\n     if (text.isEmpty())\n         amount->clear();\n     else\n-        amount->setValue(text.toDouble());\n+        amount->setValue(amount->valueFromText(text));\n }\n \n void BitcoinAmountField::clear()\n@@ -128,7 +166,7 @@ qint64 BitcoinAmountField::value(bool *valid_out) const\n \n void BitcoinAmountField::setValue(qint64 value)\n {\n-    setText(BitcoinUnits::format(currentUnit, value));\n+    amount->setValue(value);\n }\n \n void BitcoinAmountField::unitChanged(int idx)\n@@ -143,12 +181,9 @@ void BitcoinAmountField::unitChanged(int idx)\n     bool valid = false;\n     qint64 currentValue = value(&valid);\n \n+    amount->setUnit(newUnit);\n     currentUnit = newUnit;\n \n-    // Set max length after retrieving the value, to prevent truncation\n-    amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n-    amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n-\n     if(valid)\n     {\n         // If value was valid, re-place it in the widget with the new unit"
      },
      {
        "sha": "24e67d2aa3ab4cdd90ea1365c076731e683acbaf",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -1,13 +1,30 @@\n #ifndef BITCOINFIELD_H\n #define BITCOINFIELD_H\n \n+#include <QDoubleSpinBox>\n #include <QWidget>\n \n QT_BEGIN_NAMESPACE\n-class QDoubleSpinBox;\n class QValueComboBox;\n QT_END_NAMESPACE\n \n+class BitcoinAmountSpinBox : public QDoubleSpinBox\n+{\n+    Q_OBJECT\n+public:\n+    BitcoinAmountSpinBox(QWidget *parent = 0);\n+\n+    virtual QValidator::State validate(QString&text, int&pos) const;\n+    virtual QString textFromValue(double) const;\n+    virtual double valueFromText(const QString&) const;\n+\n+    void setUnit(int unit);\n+\n+private:\n+    int currentUnit;\n+    int currentNumsys;\n+};\n+\n /** Widget for entering bitcoin amounts.\n   */\n class BitcoinAmountField: public QWidget\n@@ -44,7 +61,7 @@ class BitcoinAmountField: public QWidget\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n-    QDoubleSpinBox *amount;\n+    BitcoinAmountSpinBox *amount;\n     QValueComboBox *unit;\n     int currentUnit;\n "
      },
      {
        "sha": "e149f6477909d8253ba028c2c90449e7330f50cc",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 13,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -2,6 +2,8 @@\n \n #include <QStringList>\n \n+#include \"tonalutils.h\"\n+\n BitcoinUnits::BitcoinUnits(QObject *parent):\n         QAbstractListModel(parent),\n         unitlist(availableUnits())\n@@ -10,10 +12,19 @@ BitcoinUnits::BitcoinUnits(QObject *parent):\n \n QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()\n {\n-    QList<BitcoinUnits::Unit> unitlist;\n-    unitlist.append(BTC);\n-    unitlist.append(mBTC);\n-    unitlist.append(uBTC);\n+    static QList<BitcoinUnits::Unit> unitlist;\n+    if (unitlist.empty())\n+    {\n+        unitlist.append(BTC);\n+        unitlist.append(mBTC);\n+        unitlist.append(uBTC);\n+        if (TonalUtils::Supported())\n+        {\n+            unitlist.append(bTBC);\n+            unitlist.append(sTBC);\n+            unitlist.append(TBC);\n+        }\n+    }\n     return unitlist;\n }\n \n@@ -24,6 +35,9 @@ bool BitcoinUnits::valid(int unit)\n     case BTC:\n     case mBTC:\n     case uBTC:\n+    case bTBC:\n+    case sTBC:\n+    case TBC:\n         return true;\n     default:\n         return false;\n@@ -37,6 +51,9 @@ QString BitcoinUnits::name(int unit)\n     case BTC: return QString(\"BTC\");\n     case mBTC: return QString(\"mBTC\");\n     case uBTC: return QString::fromUtf8(\"\u03bcBTC\");\n+    case bTBC: return QString::fromUtf8(\"\u1d47TBC\");\n+    case sTBC: return QString::fromUtf8(\"\u02e2TBC\");\n+    case TBC: return QString(\"TBC\");\n     default: return QString(\"???\");\n     }\n }\n@@ -45,9 +62,12 @@ QString BitcoinUnits::description(int unit)\n {\n     switch(unit)\n     {\n-    case BTC: return QString(\"Bitcoins\");\n+    case BTC: return QString(\"Bitcoins (decimal)\");\n     case mBTC: return QString(\"Milli-Bitcoins (1 / 1,000)\");\n     case uBTC: return QString(\"Micro-Bitcoins (1 / 1,000,000)\");\n+    case bTBC: return QString(\"Bong-Bitcoins (1,0000 tonal)\");\n+    case sTBC: return QString(\"San-Bitcoins (100 tonal)\");\n+    case TBC: return QString(\"Bitcoins (tonal)\");\n     default: return QString(\"???\");\n     }\n }\n@@ -59,6 +79,9 @@ qint64 BitcoinUnits::factor(int unit)\n     case BTC:  return 100000000;\n     case mBTC: return 100000;\n     case uBTC: return 100;\n+    case bTBC: return 0x100000000;\n+    case sTBC: return 0x1000000;\n+    case TBC:  return 0x10000;\n     default:   return 100000000;\n     }\n }\n@@ -70,6 +93,9 @@ int BitcoinUnits::amountDigits(int unit)\n     case BTC: return 8; // 21,000,000 (# digits, without commas)\n     case mBTC: return 11; // 21,000,000,000\n     case uBTC: return 14; // 21,000,000,000,000\n+    case bTBC: return 6; // 49,\ue9d9\ue9db63\n+    case sTBC: return 8; // 49\ue9d9\ue9db,6384\n+    case TBC: return 10; // 49,\ue9d9\ue9db63,8448\n     default: return 0;\n     }\n }\n@@ -81,10 +107,52 @@ int BitcoinUnits::decimals(int unit)\n     case BTC: return 8;\n     case mBTC: return 5;\n     case uBTC: return 2;\n+    case bTBC: return 8;\n+    case sTBC: return 6;\n+    case TBC: return 4;\n     default: return 0;\n     }\n }\n \n+int BitcoinUnits::minPlaces(int unit)\n+{\n+    switch(unit)\n+    {\n+    case bTBC:\n+    case sTBC:\n+    case TBC:\n+        return -1;\n+    default:\n+        return 2;\n+    }\n+}\n+\n+int BitcoinUnits::radix(int unit)\n+{\n+    switch(unit)\n+    {\n+    case bTBC:\n+    case sTBC:\n+    case TBC:\n+        return 0x10;\n+    default:\n+        return 10;\n+    }\n+}\n+\n+int BitcoinUnits::numsys(int unit)\n+{\n+    switch(unit)\n+    {\n+    case bTBC:\n+    case sTBC:\n+    case TBC:\n+        return TBC;\n+    default:\n+        return BTC;\n+    }\n+}\n+\n QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n@@ -96,20 +164,27 @@ QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n     qint64 n_abs = (n > 0 ? n : -n);\n     qint64 quotient = n_abs / coin;\n     qint64 remainder = n_abs % coin;\n-    QString quotient_str = QString::number(quotient);\n-    QString remainder_str = QString::number(remainder).rightJustified(num_decimals, '0');\n+    int uradix = radix(unit);\n+    QString s = QString::number(quotient, uradix) + \".\" + QString::number(remainder, uradix).rightJustified(num_decimals, '0');\n \n     // Right-trim excess 0's after the decimal point\n     int nTrim = 0;\n-    for (int i = remainder_str.size()-1; i>=2 && (remainder_str.at(i) == '0'); --i)\n+    int nTrimStop = s.size() - (decimals(unit) - minPlaces(unit));\n+    for (int i = s.size()-1; i>=nTrimStop && (s.at(i) == '0'); --i)\n+        ++nTrim;\n+    if (s.at(nTrimStop) == '.' && nTrimStop + nTrim + 1 == s.size())\n         ++nTrim;\n-    remainder_str.chop(nTrim);\n+    s.chop(nTrim);\n+\n+    int unumsys = numsys(unit);\n+    if (unumsys == TBC)\n+        TonalUtils::ConvertFromHex(s);\n \n     if (n < 0)\n-        quotient_str.insert(0, '-');\n+        s.insert(0, '-');\n     else if (fPlus && n > 0)\n-        quotient_str.insert(0, '+');\n-    return quotient_str + QString(\".\") + remainder_str;\n+        s.insert(0, '+');\n+    return s;\n }\n \n QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign)\n@@ -142,11 +217,22 @@ bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n     bool ok = false;\n     QString str = whole + decimals.leftJustified(num_decimals, '0');\n \n+    int unumsys = numsys(unit);\n+    if (unumsys == TBC)\n+    {\n+        if (str.size() > 15)\n+            return false; // Longer numbers may exceed 63 bits\n+        TonalUtils::ConvertToHex(str);\n+    }\n+    else\n+    {\n     if(str.size() > 18)\n     {\n         return false; // Longer numbers will exceed 63 bits\n     }\n-    qint64 retvalue = str.toLongLong(&ok);\n+    }\n+\n+    qint64 retvalue = str.toLongLong(&ok, radix(unit));\n     if(val_out)\n     {\n         *val_out = retvalue;"
      },
      {
        "sha": "11f93ab79acf0f70a13d43430b43912af0453eba",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -19,7 +19,10 @@ class BitcoinUnits: public QAbstractListModel\n     {\n         BTC,\n         mBTC,\n-        uBTC\n+        uBTC,\n+        bTBC,\n+        sTBC,\n+        TBC,\n     };\n \n     //! @name Static API\n@@ -38,8 +41,14 @@ class BitcoinUnits: public QAbstractListModel\n     static qint64 factor(int unit);\n     //! Number of amount digits (to represent max number of coins)\n     static int amountDigits(int unit);\n-    //! Number of decimals left\n+    //! Number of fractional places\n     static int decimals(int unit);\n+    //! Minimum number of fractional places to show\n+    static int minPlaces(int unit);\n+    //! Radix\n+    static int radix(int unit);\n+    //! Number system\n+    static int numsys(int unit);\n     //! Format as string\n     static QString format(int unit, qint64 amount, bool plussign=false);\n     //! Format as string (with unit)"
      },
      {
        "sha": "969eaec8c7255e3472d289298b7290fd6eb0c86d",
        "filename": "src/qt/tonalutils.cpp",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/tonalutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/tonalutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/tonalutils.cpp?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -0,0 +1,52 @@\n+#include <QFont>\n+#include <QFontMetrics>\n+#include <QRegExp>\n+#include <QRegExpValidator>\n+#include <QString>\n+\n+#include \"tonalutils.h\"\n+\n+bool TonalUtils::Supported()\n+{\n+    QFontMetrics fm = QFontMetrics(QFont());\n+    return fm.inFont(0xe9d9);\n+}\n+\n+static QRegExpValidator tv(QRegExp(\"-?(?:[\\\\d\\\\xe9d9-\\\\xe9df]+\\\\.?|[\\\\d\\\\xe9d9-\\\\xe9df]*\\\\.[\\\\d\\\\xe9d9-\\\\xe9df]*)\"), NULL);\n+\n+QValidator::State TonalUtils::validate(QString&input, int&pos)\n+{\n+    return tv.validate(input, pos);\n+}\n+\n+void TonalUtils::ConvertFromHex(QString&str)\n+{\n+    for (int i = 0; i < str.size(); ++i)\n+    {\n+        ushort c = str[i].unicode();\n+        if (c == '9')\n+            str[i] = 0xe9d9;\n+        else\n+        if (c >= 'A' && c <= 'F')\n+            str[i] = c + 0xe999;\n+        else\n+        if (c >= 'a' && c <= 'f')\n+            str[i] = c + 0xe979;\n+    }\n+}\n+\n+void TonalUtils::ConvertToHex(QString&str)\n+{\n+    for (int i = 0; i < str.size(); ++i)\n+    {\n+        ushort c = str[i].unicode();\n+        if (c == 0xe9d9)\n+            str[i] = '9';\n+        else\n+        if (c == '9')\n+            str[i] = 'a';\n+        else\n+        if (c >= 0xe9da && c <= 0xe9df)\n+            str[i] = c - 0xe999;\n+    }\n+}"
      },
      {
        "sha": "426a3125b21aafd0c3128db06ffc398ffaa661d9",
        "filename": "src/qt/tonalutils.h",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/tonalutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69850957c238b2954c2dd0c941ef111334cf54e1/src/qt/tonalutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/tonalutils.h?ref=69850957c238b2954c2dd0c941ef111334cf54e1",
        "patch": "@@ -0,0 +1,21 @@\n+#ifndef TONALUTILS_H\n+#define TONALUTILS_H\n+\n+#include <QValidator>\n+\n+QT_BEGIN_NAMESPACE\n+class QString;\n+QT_END_NAMESPACE\n+\n+class TonalUtils\n+{\n+public:\n+    static bool Supported();\n+\n+    static QValidator::State validate(QString&input, int&pos);\n+\n+    static void ConvertFromHex(QString&);\n+    static void ConvertToHex(QString&);\n+};\n+\n+#endif"
      }
    ]
  }
]