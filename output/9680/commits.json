[
  {
    "sha": "a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTI4YmRjOWUxNWRlYzVjZDlhZWQxZTQ5MjJjOTM4ZWRmMzFlYjlh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-02T20:30:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-08T02:12:47Z"
      },
      "message": "[wallet] Construct CWalletTx objects in CommitTransaction\n\nConstruct CWalletTx objects in CWallet::CommitTransaction, instead of having\ncallers do it. This ensures CWalletTx objects are constructed in a uniform way\nand all fields are set.\n\nThis also makes it possible to avoid confusing and wasteful CWalletTx copies in\nhttps://github.com/bitcoin/bitcoin/pull/9381\n\nThere is no change in behavior.",
      "tree": {
        "sha": "de47f034c0d08e96d53b0190d34ba48cceeccaf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de47f034c0d08e96d53b0190d34ba48cceeccaf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 68,
      "deletions": 74
    },
    "files": [
      {
        "sha": "39ef20c8356e67fedb3ae5b591d823fbcb7bdc01",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -275,9 +275,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         int nChangePosRet = -1;\n         std::string strFailReason;\n \n-        CWalletTx *newTx = transaction.getTransaction();\n+        CTransactionRef& newTx = transaction.getTransaction();\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n+        bool fCreated = wallet->CreateTransaction(vecSend, newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && fCreated)\n             transaction.reassignAmounts(nChangePosRet);\n@@ -309,8 +309,8 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        CWalletTx *newTx = transaction.getTransaction();\n \n+        std::vector<std::pair<std::string, std::string>> vOrderForm;\n         for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n@@ -321,22 +321,22 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 }\n \n                 // Store PaymentRequests in wtx.vOrderForm in wallet.\n-                std::string key(\"PaymentRequest\");\n                 std::string value;\n                 rcp.paymentRequest.SerializeToString(&value);\n-                newTx->vOrderForm.push_back(make_pair(key, value));\n+                vOrderForm.emplace_back(\"PaymentRequest\", std::move(value));\n             }\n             else if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-                newTx->vOrderForm.push_back(make_pair(\"Message\", rcp.message.toStdString()));\n+                vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n         }\n \n+        CTransactionRef& newTx = transaction.getTransaction();\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n         CValidationState state;\n-        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get(), state))\n+        if (!wallet->CommitTransaction(newTx, {} /* mapValue */, std::move(vOrderForm), {} /* fromAccount */, *keyChange, g_connman.get(), state))\n             return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(state.GetRejectReason()));\n \n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << *newTx->tx;\n+        ssTx << newTx;\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }\n "
      },
      {
        "sha": "4df8a5687eb57f2d15c7d26c9ed66d04a4314944",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -12,27 +12,21 @@ WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &\n     walletTransaction(0),\n     fee(0)\n {\n-    walletTransaction = new CWalletTx();\n-}\n-\n-WalletModelTransaction::~WalletModelTransaction()\n-{\n-    delete walletTransaction;\n }\n \n QList<SendCoinsRecipient> WalletModelTransaction::getRecipients() const\n {\n     return recipients;\n }\n \n-CWalletTx *WalletModelTransaction::getTransaction() const\n+CTransactionRef& WalletModelTransaction::getTransaction()\n {\n     return walletTransaction;\n }\n \n unsigned int WalletModelTransaction::getTransactionSize()\n {\n-    return (!walletTransaction ? 0 : ::GetVirtualTransactionSize(*walletTransaction->tx));\n+    return (!walletTransaction ? 0 : ::GetVirtualTransactionSize(*walletTransaction));\n }\n \n CAmount WalletModelTransaction::getTransactionFee() const\n@@ -62,7 +56,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n                 if (out.amount() <= 0) continue;\n                 if (i == nChangePosRet)\n                     i++;\n-                subtotal += walletTransaction->tx->vout[i].nValue;\n+                subtotal += walletTransaction->vout[i].nValue;\n                 i++;\n             }\n             rcp.amount = subtotal;\n@@ -71,7 +65,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n         {\n             if (i == nChangePosRet)\n                 i++;\n-            rcp.amount = walletTransaction->tx->vout[i].nValue;\n+            rcp.amount = walletTransaction->vout[i].nValue;\n             i++;\n         }\n     }"
      },
      {
        "sha": "931e960d183c19d999f66d7c4cb35216ad18405e",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -20,11 +20,10 @@ class WalletModelTransaction\n {\n public:\n     explicit WalletModelTransaction(const QList<SendCoinsRecipient> &recipients);\n-    ~WalletModelTransaction();\n \n     QList<SendCoinsRecipient> getRecipients() const;\n \n-    CWalletTx *getTransaction() const;\n+    CTransactionRef& getTransaction();\n     unsigned int getTransactionSize();\n \n     void setTransactionFee(const CAmount& newFee);\n@@ -39,7 +38,7 @@ class WalletModelTransaction\n \n private:\n     QList<SendCoinsRecipient> recipients;\n-    CWalletTx *walletTransaction;\n+    CTransactionRef walletTransaction;\n     std::unique_ptr<CReserveKey> keyChange;\n     CAmount fee;\n };"
      },
      {
        "sha": "0c6d782e381fce5396398b0b555e3ba7476d2ec6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -262,31 +262,28 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n         return result;\n     }\n \n-    CWalletTx wtxBumped(wallet, MakeTransactionRef(std::move(mtx)));\n     // commit/broadcast the tx\n+    CTransactionRef tx = MakeTransactionRef(std::move(mtx));\n+    mapValue_t mapValue = oldWtx.mapValue;\n+    mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n+\n     CReserveKey reservekey(wallet);\n-    wtxBumped.mapValue = oldWtx.mapValue;\n-    wtxBumped.mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n-    wtxBumped.vOrderForm = oldWtx.vOrderForm;\n-    wtxBumped.strFromAccount = oldWtx.strFromAccount;\n-    wtxBumped.fTimeReceivedIsTxTime = true;\n-    wtxBumped.fFromMe = true;\n     CValidationState state;\n-    if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, oldWtx.strFromAccount, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;\n     }\n \n-    bumped_txid = wtxBumped.GetHash();\n+    bumped_txid = tx->GetHash();\n     if (state.IsInvalid()) {\n         // This can happen if the mempool rejected the transaction.  Report\n         // what happened in the \"errors\" response.\n         errors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n     }\n \n     // mark the original tx as bumped\n-    if (!wallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n+    if (!wallet->MarkReplaced(oldWtx.GetHash(), bumped_txid)) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction"
      },
      {
        "sha": "8810b90e13c3a54d0a32c6e679a7c469440b0340",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 22,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -404,7 +404,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, const CCoinControl& coin_control)\n+static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue, std::string fromAccount)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -430,16 +430,18 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n-    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n+    CTransactionRef tx;\n+    if (!pwallet->CreateTransaction(vecSend, tx, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, std::move(fromAccount), reservekey, g_connman.get(), state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n+    return tx;\n }\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -498,11 +500,11 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n \n     // Wallet comments\n-    CWalletTx wtx;\n+    mapValue_t mapValue;\n     if (!request.params[2].isNull() && !request.params[2].get_str().empty())\n-        wtx.mapValue[\"comment\"] = request.params[2].get_str();\n+        mapValue[\"comment\"] = request.params[2].get_str();\n     if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n-        wtx.mapValue[\"to\"]      = request.params[3].get_str();\n+        mapValue[\"to\"] = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n     if (!request.params[4].isNull()) {\n@@ -527,9 +529,8 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, wtx, coin_control);\n-\n-    return wtx.GetHash().GetHex();\n+    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue), {} /* fromAccount */);\n+    return tx->GetHash().GetHex();\n }\n \n UniValue listaddressgroupings(const JSONRPCRequest& request)\n@@ -995,12 +996,11 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (!request.params[3].isNull())\n         nMinDepth = request.params[3].get_int();\n \n-    CWalletTx wtx;\n-    wtx.strFromAccount = strAccount;\n+    mapValue_t mapValue;\n     if (!request.params[4].isNull() && !request.params[4].get_str().empty())\n-        wtx.mapValue[\"comment\"] = request.params[4].get_str();\n+        mapValue[\"comment\"] = request.params[4].get_str();\n     if (!request.params[5].isNull() && !request.params[5].get_str().empty())\n-        wtx.mapValue[\"to\"]      = request.params[5].get_str();\n+        mapValue[\"to\"] = request.params[5].get_str();\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -1010,9 +1010,8 @@ UniValue sendfrom(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     CCoinControl no_coin_control; // This is a deprecated API\n-    SendMoney(pwallet, dest, nAmount, false, wtx, no_coin_control);\n-\n-    return wtx.GetHash().GetHex();\n+    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, false, no_coin_control, std::move(mapValue), std::move(strAccount));\n+    return tx->GetHash().GetHex();\n }\n \n \n@@ -1083,10 +1082,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         nMinDepth = request.params[2].get_int();\n \n-    CWalletTx wtx;\n-    wtx.strFromAccount = strAccount;\n+    mapValue_t mapValue;\n     if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n-        wtx.mapValue[\"comment\"] = request.params[3].get_str();\n+        mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n     if (!request.params[4].isNull())\n@@ -1152,16 +1150,17 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n+    CTransactionRef tx;\n+    bool fCreated = pwallet->CreateTransaction(vecSend, tx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, std::move(strAccount), keyChange, g_connman.get(), state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n \n-    return wtx.GetHash().GetHex();\n+    return tx->GetHash().GetHex();\n }\n \n UniValue addmultisigaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "37b54284412ade1802fff04a776a446044042843",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -624,23 +624,23 @@ class ListCoinsTestingSetup : public TestChain100Setup\n \n     CWalletTx& AddTx(CRecipient recipient)\n     {\n-        CWalletTx wtx;\n+        CTransactionRef tx;\n         CReserveKey reservekey(wallet.get());\n         CAmount fee;\n         int changePos = -1;\n         std::string error;\n         CCoinControl dummy;\n-        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n+        BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, {}, reservekey, nullptr, state));\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);\n-            blocktx = CMutableTransaction(*wallet->mapWallet.at(wtx.GetHash()).tx);\n+            blocktx = CMutableTransaction(*wallet->mapWallet.at(tx->GetHash()).tx);\n         }\n         CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n         LOCK(wallet->cs_wallet);\n-        auto it = wallet->mapWallet.find(wtx.GetHash());\n+        auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n         it->second.SetMerkleBranch(chainActive.Tip(), 1);\n         return it->second;"
      },
      {
        "sha": "8e47b21d6c1f8a9ebedfe6278ba9c1c44f3465dc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -2631,13 +2631,13 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     LOCK2(cs_main, cs_wallet);\n \n     CReserveKey reservekey(this);\n-    CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n+    CTransactionRef tx_new;\n+    if (!CreateTransaction(vecSend, tx_new, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n \n     if (nChangePosInOut != -1) {\n-        tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n+        tx.vout.insert(tx.vout.begin() + nChangePosInOut, tx_new->vout[nChangePosInOut]);\n         // We don't have the normal Create/Commit cycle, and don't want to risk\n         // reusing change, so just remove the key from the keypool here.\n         reservekey.KeepKey();\n@@ -2646,11 +2646,11 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     // Copy output sizes from new transaction; they may have had the fee\n     // subtracted from them.\n     for (unsigned int idx = 0; idx < tx.vout.size(); idx++) {\n-        tx.vout[idx].nValue = wtx.tx->vout[idx].nValue;\n+        tx.vout[idx].nValue = tx_new->vout[idx].nValue;\n     }\n \n     // Add new txins while keeping original txin scriptSig/order.\n-    for (const CTxIn& txin : wtx.tx->vin) {\n+    for (const CTxIn& txin : tx_new->vin) {\n         if (!coinControl.IsSelected(txin.prevout)) {\n             tx.vin.push_back(txin);\n \n@@ -2691,7 +2691,7 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n     return g_address_type;\n }\n \n-bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n+bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n@@ -2715,8 +2715,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         return false;\n     }\n \n-    wtxNew.fTimeReceivedIsTxTime = true;\n-    wtxNew.BindWallet(this);\n     CMutableTransaction txNew;\n \n     // Discourage fee sniping.\n@@ -2804,7 +2802,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 nChangePosInOut = nChangePosRequest;\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n-                wtxNew.fFromMe = true;\n                 bool fFirst = true;\n \n                 CAmount nValueToSelect = nValue;\n@@ -3019,11 +3016,11 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             }\n         }\n \n-        // Embed the constructed transaction data in wtxNew.\n-        wtxNew.SetTx(MakeTransactionRef(std::move(txNew)));\n+        // Return the constructed transaction data.\n+        tx = MakeTransactionRef(std::move(txNew));\n \n         // Limit size\n-        if (GetTransactionWeight(*wtxNew.tx) >= MAX_STANDARD_TX_WEIGHT)\n+        if (GetTransactionWeight(*tx) >= MAX_STANDARD_TX_WEIGHT)\n         {\n             strFailReason = _(\"Transaction too large\");\n             return false;\n@@ -3033,7 +3030,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         LockPoints lp;\n-        CTxMemPoolEntry entry(wtxNew.tx, 0, 0, 0, false, 0, lp);\n+        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries setAncestors;\n         size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n         size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n@@ -3060,10 +3057,18 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n+bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, std::string fromAccount, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n+\n+        CWalletTx wtxNew(this, std::move(tx));\n+        wtxNew.mapValue = std::move(mapValue);\n+        wtxNew.vOrderForm = std::move(orderForm);\n+        wtxNew.strFromAccount = std::move(fromAccount);\n+        wtxNew.fTimeReceivedIsTxTime = true;\n+        wtxNew.fFromMe = true;\n+\n         LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n         {\n             // Take key pair from key pool so it won't be used again"
      },
      {
        "sha": "cdb0def2e818c2accbd69383c7b9d99fc3b3b35b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "patch": "@@ -974,9 +974,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n+    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, std::string fromAccount, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);"
      }
    ]
  },
  {
    "sha": "b4bc32a451720167000f59dd73ab07990f9c6b92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGJjMzJhNDUxNzIwMTY3MDAwZjU5ZGQ3M2FiMDc5OTBmOWM2Yjky",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-19T21:08:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-08T02:12:47Z"
      },
      "message": "[wallet] Get rid of CWalletTx default constructor\n\nNo change in behavior in the normal case. But buggy mapWallet lookups with\ninvalid txids will now throw exceptions instead of inserting dummy entries into\nthe map, and potentially causing segfaults and other failures.\n\nThis also makes it a compiler error to use the mapWallet[hash] syntax which\ncould create dummy entries.",
      "tree": {
        "sha": "59dc966defd394bf338bd0d5e0546e97230692db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59dc966defd394bf338bd0d5e0546e97230692db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4bc32a451720167000f59dd73ab07990f9c6b92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4bc32a451720167000f59dd73ab07990f9c6b92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4bc32a451720167000f59dd73ab07990f9c6b92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4bc32a451720167000f59dd73ab07990f9c6b92/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a128bdc9e15dec5cd9aed1e4922c938edf31eb9a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 12,
      "deletions": 17
    },
    "files": [
      {
        "sha": "aae328d81fc76c3c8d55ba7e2879f118d1295e47",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=b4bc32a451720167000f59dd73ab07990f9c6b92",
        "patch": "@@ -29,7 +29,7 @@ GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n     std::vector<CWalletTx*> vpwtx;\n-    CWalletTx wtx;\n+    CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n     CAccountingEntry ae;\n     std::map<CAmount, CAccountingEntry> results;\n \n@@ -44,7 +44,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     wtx.mapValue[\"comment\"] = \"z\";\n     m_wallet.AddToWallet(wtx);\n-    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n+    vpwtx.push_back(&m_wallet.mapWallet.at(wtx.GetHash()));\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     m_wallet.AddToWallet(wtx);\n-    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n+    vpwtx.push_back(&m_wallet.mapWallet.at(wtx.GetHash()));\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     m_wallet.AddToWallet(wtx);\n-    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n+    vpwtx.push_back(&m_wallet.mapWallet.at(wtx.GetHash()));\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n "
      },
      {
        "sha": "5ab2f5717077a198e76d87bdbae22a78fe26cd5c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b4bc32a451720167000f59dd73ab07990f9c6b92",
        "patch": "@@ -531,7 +531,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n     int nMinOrderPos = std::numeric_limits<int>::max();\n     const CWalletTx* copyFrom = nullptr;\n     for (TxSpends::iterator it = range.first; it != range.second; ++it) {\n-        const CWalletTx* wtx = &mapWallet[it->second];\n+        const CWalletTx* wtx = &mapWallet.at(it->second);\n         if (wtx->nOrderPos < nMinOrderPos) {\n             nMinOrderPos = wtx->nOrderPos;;\n             copyFrom = wtx;\n@@ -544,7 +544,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n     for (TxSpends::iterator it = range.first; it != range.second; ++it)\n     {\n         const uint256& hash = it->second;\n-        CWalletTx* copyTo = &mapWallet[hash];\n+        CWalletTx* copyTo = &mapWallet.at(hash);\n         if (copyFrom == copyTo) continue;\n         assert(copyFrom && \"Oldest wallet transaction in range assumed to have been found.\");\n         if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n@@ -3081,7 +3081,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n             // Notify that old coins are spent\n             for (const CTxIn& txin : wtxNew.tx->vin)\n             {\n-                CWalletTx &coin = mapWallet[txin.prevout.hash];\n+                CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n                 coin.BindWallet(this);\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n@@ -3092,7 +3092,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n \n         // Get the inserted-CWalletTx from mapWallet so that the\n         // fInMempool flag is cached properly\n-        CWalletTx& wtx = mapWallet[wtxNew.GetHash()];\n+        CWalletTx& wtx = mapWallet.at(wtxNew.GetHash());\n \n         if (fBroadcastTransactions)\n         {\n@@ -3548,7 +3548,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n                     continue;\n-                if(!ExtractDestination(mapWallet[txin.prevout.hash].tx->vout[txin.prevout.n].scriptPubKey, address))\n+                if(!ExtractDestination(mapWallet.at(txin.prevout.hash).tx->vout[txin.prevout.n].scriptPubKey, address))\n                     continue;\n                 grouping.insert(address);\n                 any_mine = true;"
      },
      {
        "sha": "f68d40f09afa0789eae2814c0a31651193c6c73f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b4bc32a451720167000f59dd73ab07990f9c6b92",
        "patch": "@@ -348,11 +348,6 @@ class CWalletTx : public CMerkleTx\n     mutable CAmount nAvailableWatchCreditCached;\n     mutable CAmount nChangeCached;\n \n-    CWalletTx()\n-    {\n-        Init(nullptr);\n-    }\n-\n     CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n     {\n         Init(pwalletIn);"
      },
      {
        "sha": "7f5f3b84b20683857aa7aa56a2a7e5bf77ece127",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4bc32a451720167000f59dd73ab07990f9c6b92/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b4bc32a451720167000f59dd73ab07990f9c6b92",
        "patch": "@@ -265,7 +265,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             uint256 hash;\n             ssKey >> hash;\n-            CWalletTx wtx;\n+            CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n             ssValue >> wtx;\n             CValidationState state;\n             if (!(CheckTransaction(*wtx.tx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n@@ -603,7 +603,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         pwallet->UpdateTimeFirstKey(1);\n \n     for (uint256 hash : wss.vWalletUpgrade)\n-        WriteTx(pwallet->mapWallet[hash]);\n+        WriteTx(pwallet->mapWallet.at(hash));\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n     if (wss.fIsEncrypted && (wss.nFileVersion == 40000 || wss.nFileVersion == 50000))\n@@ -664,7 +664,7 @@ DBErrors CWalletDB::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWal\n                 uint256 hash;\n                 ssKey >> hash;\n \n-                CWalletTx wtx;\n+                CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n                 ssValue >> wtx;\n \n                 vTxHash.push_back(hash);"
      }
    ]
  }
]