laanwj,2017-08-18T07:16:20Z,"> Get rid of CWalletTx default constructor does what is described and eliminates the possibility of empty transaction entries being inadvertently created by mapWallet[hash] accesses.\n\nGreat! I've always been wary of this projects' gratuitous use of `[]` for retrieval, as we don't want to accidentally create empty objects and because it generates more code. The second is true even when it's shi",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-323278892,323278892,
jonasschnelli,2017-09-22T05:19:45Z,"Nice!\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-331352667,331352667,
jamesob,2018-03-06T19:39:04Z,"ACK https://github.com/bitcoin/bitcoin/commit/7bae52b4f5d7893a951c38af032a09b12c4ccebf\n\nCloned this branch, compiled, and ran `bitcoin-qt`.",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-370902260,370902260,
ryanofsky,2018-03-06T19:50:17Z,"Updated commit message 7bae52b4f5d7893a951c38af032a09b12c4ccebf -> a5a2e7eddeaa3c2323da83f1b40b1c382718cc3a ([pr/makewtx.21](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.21) -> [pr/makewtx.22](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.22)), no other changes.",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-370905749,370905749,
jamesob,2018-03-06T19:56:43Z,ACK https://github.com/bitcoin/bitcoin/commit/a5a2e7eddeaa3c2323da83f1b40b1c382718cc3a,https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-370907825,370907825,
ryanofsky,2018-03-07T13:26:39Z,"Rebased a5a2e7eddeaa3c2323da83f1b40b1c382718cc3a -> da94a51fa50766d4bb528a16fee2b6e7a1fb2146 ([pr/makewtx.22](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.22) -> [pr/makewtx.23](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.23)) due to conflict with #12421 causing travis build failures.\nRebased da94a51fa50766d4bb528a16fee2b6e7a1fb2146 -> 8fcd24ece6720d09a22758d6addafcf353905",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-371137589,371137589,
MarcoFalke,2018-03-08T15:20:13Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-371518731,371518731,
ryanofsky,2018-03-12T22:11:12Z,"> Needs rebase\n\nRebased 8fcd24ece6720d09a22758d6addafcf3539057a2 -> 2c08d0b47843de4aab10e21db7a417791e34be2e ([pr/makewtx.24](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.24) -> [pr/makewtx.25](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.25)) for #12607.",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-372479853,372479853,
ryanofsky,2018-03-13T20:13:56Z,"Added 1 commits 2c08d0b47843de4aab10e21db7a417791e34be2e -> d0b85362d3f620cf397b00992fddc48a5fc4ee79 ([pr/makewtx.25](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.25) -> [pr/makewtx.26](https://github.com/ryanofsky/bitcoin/commits/pr/makewtx.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/makewtx.25...pr/makewtx.26)) implementing suggestion from https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-372802876,372802876,
sipa,2018-03-14T01:32:21Z,utACK b4bc32a451720167000f59dd73ab07990f9c6b92,https://github.com/bitcoin/bitcoin/pull/9680#issuecomment-372874687,372874687,
promag,2017-08-12T22:44:22Z,Isn't this condition taking advantage of the dummy `CWalletTx`? If so replace `.at()` with `.find()` and test the iterator.,https://github.com/bitcoin/bitcoin/pull/9680#discussion_r132828446,132828446,src/qt/walletmodel.cpp
promag,2017-08-12T22:45:15Z,Another lookup? With the above suggestion it can be avoided.,https://github.com/bitcoin/bitcoin/pull/9680#discussion_r132828461,132828461,src/qt/walletmodel.cpp
promag,2017-08-12T22:48:55Z,"Replace with `.find(txid)` above (before `.count()`) and test if exists, also avoids 2nd lookup.",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r132828536,132828536,src/wallet/feebumper.cpp
ryanofsky,2017-08-14T18:27:19Z,"> Isn't this condition taking advantage of the dummy CWalletTx? If so replace .at() with .find() and test the iterator.\n\nDummy constructor isn't called here because of the count check above.",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r133024921,133024921,src/qt/walletmodel.cpp
ryanofsky,2017-08-14T18:30:10Z,"> Another lookup? With the above suggestion it can be avoided.\n\nIt looks like this is done in your PR #11039. I'll review that PR, so this PR can be limited to replacing [] lookups with at() lookups.",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r133025684,133025684,src/qt/walletmodel.cpp
ryanofsky,2017-08-14T18:31:05Z,"> Replace with .find(txid) above (before .count()) and test if exists, also avoids 2nd lookup.\n\nAlso seems to be taken care of in #11039.",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r133025891,133025891,src/wallet/feebumper.cpp
sipa,2017-09-21T00:39:22Z,"Given that the argument `txNew` seems to be only used to store the resulting output in, wouldn't it be more convenient to make it the return type rather than an argument?",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r140126396,140126396,src/wallet/rpcwallet.cpp
sipa,2017-11-22T00:11:37Z,"I think the extra dereference isn't needed here; serializing a `std::shared_ptr<X>` should work, if `X` is serializable.",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r152437945,152437945,src/qt/walletmodel.cpp
ryanofsky,2017-12-01T22:13:10Z,Done in d070a69e9734b83e2defc29aa97bf4dab8953151,https://github.com/bitcoin/bitcoin/pull/9680#discussion_r154461468,154461468,src/qt/walletmodel.cpp
ryanofsky,2017-12-01T22:15:04Z,"> Given that the argument txNew seems to be only used to store the resulting output in, wouldn't it be more convenient to make it the return type rather than an argument?\n\nForgot to respond to this comment, but this was a good idea, and I implemented it in a previous update to the PR: a0a4d8205498c38e53fb85e25cf6428ead1e93e1 -> f16d28cc4cbab3b1c8d05d9e327676afafefdbdf ([pr/makewtx.11](https://",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r154461804,154461804,src/wallet/rpcwallet.cpp
jamesob,2018-03-06T18:48:37Z,"The commit message seems to suggest `.at()` will cause compile-time errors for non-existent keys, but from what I understand `at()` will throw runtime `out_of_range` exceptions. This change in behavior seems okay, but I don't have great context here -- are we alright with these lines now being liable to throw runtime exceptions?",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r172620374,172620374,src/wallet/test/accounting_tests.cpp
ryanofsky,2018-03-06T19:24:29Z,"Oops, commit message is mistaken, it should say ""runtime exceptions"" not ""compile errors"". But the change is intentional because it should be preferable to throw exceptions if invalid txids are looked up instead of creating empty map entries with null CTransactionRef pointers that might later get dereferenced.",https://github.com/bitcoin/bitcoin/pull/9680#discussion_r172631034,172631034,src/wallet/test/accounting_tests.cpp
