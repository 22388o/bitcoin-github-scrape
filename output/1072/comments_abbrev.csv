jgarzik,2012-04-09T22:41:07Z,"I will leave ACK/NAK to others, but I will note...   this Boost feature is occasionally used as an example of C++ abuse.  It is ""cute"" to build pathnames using the ""/"" operator, but such usage is decidedly non-standard for the ""/"" operator and therefore confusing to the uninitiated reading the code.\n",https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5035522,5035522,
sipa,2012-04-09T22:53:13Z,"I wouldn't mind using a longer function name, or operator to accomplish the same. The point is that this operator constrcuts paths in a platform-independent way.\n\nThe closest alternative is extracting the path as a string, use platform-dependent code to select the correct separator, add the extra path component, and check for various issues such as double slashes, ""."" and "".."", appending a final",https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5035685,5035685,
laanwj,2012-04-10T06:43:59Z,"I agree with @jgarzik on that this is ""cute c++ abuse"" by boost. Then again, the standard library << and >> for stream operators?!? is not much better.  And just like those, `/` has no standard use for strings.\n\nThis is an upstream issue way outside the scope of bitcoin. We cannot decide the interfaces of the upstream libraries we use. It's a good idea to just use the functionality IMO as it pro",https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5040021,5040021,
Diapolo,2012-04-10T07:17:28Z,"I like your changes and prefer to get them merged to master before my https://github.com/bitcoin/bitcoin/pull/1066 gets in, as I will likely have to rebase and rework some parts, but the other way around it would be nonsense :)!\n\nSo definately ACK!\n",https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5040364,5040364,
laanwj,2012-04-10T11:02:05Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5043357,5043357,
Diapolo,2012-04-10T17:47:20Z,"This needs to get in, before #1066, more ACKs please ^^.\n",https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5051765,5051765,
sipa,2012-04-10T18:00:53Z,The helper functions to convert boost::filesystem::path to const char\* risked returning something pointing to a destroyed temporary on windows. I've replaced them now with slightly uglier macros that should be safe...\n,https://github.com/bitcoin/bitcoin/pull/1072#issuecomment-5052106,5052106,
gavinandresen,2012-04-11T00:22:57Z,"I really don't like #defines like this in an included-by-everything file like util.h.\n\nIt is reasonably likely at some point somebody will write or use a class with a dir_str() method and will spend a long time trying to figure out they're getting weird compiler errors.\n\nCan we just use .string()/.string.c_str(), and live with ""ugly"" paths if you're running on Windows and not using BOOST_FILES",https://github.com/bitcoin/bitcoin/pull/1072#discussion_r668657,668657,src/util.h
sipa,2012-04-11T00:31:05Z,"Does that work? It seemed to me that filesystem v2's path::string() could return a string of wchar_t, so its .c_str() would not create a const char*.\n",https://github.com/bitcoin/bitcoin/pull/1072#discussion_r668678,668678,src/util.h
sipa,2012-04-11T00:40:11Z,"By the way: yes, it's ugly - I'd prefer to either get rid of v2 altogether (but that would break support with boost <1.44, which is apparently still used in some places), or get rid of the conversions to C strings entirely. But that's probably not for anytime soon, as even boost's own lockfile implementation requires a const char\* argument.\n",https://github.com/bitcoin/bitcoin/pull/1072#discussion_r668693,668693,src/util.h
sipa,2012-04-11T01:24:14Z,"As the windows gitian builds use 1.47, I guess we can safely ignore the case of pre-v3 boost fs on windows. Updated to use .string().c_str() everywhere.\n",https://github.com/bitcoin/bitcoin/pull/1072#discussion_r668803,668803,src/util.h
gavinandresen,2012-04-11T01:36:26Z,Yay!  ACK\n,https://github.com/bitcoin/bitcoin/pull/1072#discussion_r668823,668823,src/util.h
