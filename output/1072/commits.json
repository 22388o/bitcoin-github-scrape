[
  {
    "sha": "ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTEyYzNkNjBjNGJiN2IyNWUwNjcwOWU5MjM0NGQyZDhiMmM1ODFl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-09T21:50:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-11T20:30:23Z"
      },
      "message": "Use filesystem::path instead of manual string tinkering\n\nWhere possible, use boost::filesystem::path instead of std::string or\nchar* for filenames. This avoids a lot of manual string tinkering, in\nfavor of path::operator/.\n\nGetDataDir is also reworked significantly, it now only keeps two cached\ndirectory names (the network-specific data dir, and the root data dir),\nwhich are decided through a parameter instead of pre-initialized global\nvariables.\n\nFinally, remove the \"upgrade from 0.1.5\" case where a debug.log in the\ncurrent directory has to be removed.",
      "tree": {
        "sha": "1928de3b16dfd343ce00c0f79b2fb2dd70a914ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1928de3b16dfd343ce00c0f79b2fb2dd70a914ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcaa5f1c0410b7c09405cc1d8515b4d973d13d1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcaa5f1c0410b7c09405cc1d8515b4d973d13d1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcaa5f1c0410b7c09405cc1d8515b4d973d13d1f"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 95,
      "deletions": 131
    },
    "files": [
      {
        "sha": "2525c2d5db08b684ae8cd11f6c02492fda7b032d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
        "patch": "@@ -2364,7 +2364,7 @@ void ThreadRPCServer2(void* parg)\n               \"(you do not need to remember this password)\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"),\n                 strWhatAmI.c_str(),\n-                GetConfigFile().c_str(),\n+                GetConfigFile().string().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n             _(\"Error\"), wxOK | wxMODAL);\n         QueueShutdown();\n@@ -2399,12 +2399,12 @@ void ThreadRPCServer2(void* parg)\n \n         filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n         if (!pathCertFile.is_complete()) pathCertFile = filesystem::path(GetDataDir()) / pathCertFile;\n-        if (filesystem::exists(pathCertFile)) context.use_certificate_chain_file(pathCertFile.string().c_str());\n+        if (filesystem::exists(pathCertFile)) context.use_certificate_chain_file(pathCertFile.string());\n         else printf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", pathCertFile.string().c_str());\n \n         filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n         if (!pathPKFile.is_complete()) pathPKFile = filesystem::path(GetDataDir()) / pathPKFile;\n-        if (filesystem::exists(pathPKFile)) context.use_private_key_file(pathPKFile.string().c_str(), ssl::context::pem);\n+        if (filesystem::exists(pathPKFile)) context.use_private_key_file(pathPKFile.string(), ssl::context::pem);\n         else printf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string().c_str());\n \n         string strCiphers = GetArg(\"-rpcsslciphers\", \"TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\");\n@@ -2544,7 +2544,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n         throw runtime_error(strprintf(\n             _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                GetConfigFile().c_str()));\n+                GetConfigFile().string().c_str()));\n \n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\");"
      },
      {
        "sha": "839c0807cce49a807a12d4e8e1fad47b628b9234",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
        "patch": "@@ -43,7 +43,7 @@ static void EnvShutdown()\n     {\n         printf(\"EnvShutdown exception: %s (%d)\\n\", e.what(), e.get_errno());\n     }\n-    DbEnv(0).remove(GetDataDir().c_str(), 0);\n+    DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n }\n \n class CDBInit\n@@ -60,7 +60,7 @@ class CDBInit\n instance_of_cdbinit;\n \n \n-CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)\n+CDB::CDB(const char *pszFile, const char* pszMode) : pdb(NULL)\n {\n     int ret;\n     if (pszFile == NULL)\n@@ -78,10 +78,10 @@ CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)\n         {\n             if (fShutdown)\n                 return;\n-            string strDataDir = GetDataDir();\n-            filesystem::path pathLogDir(strDataDir + \"/database\");\n+            filesystem::path pathDataDir = GetDataDir();\n+            filesystem::path pathLogDir = pathDataDir / \"database\";\n             filesystem::create_directory(pathLogDir);\n-            filesystem::path pathErrorFile(strDataDir + \"/db.log\");\n+            filesystem::path pathErrorFile = pathDataDir / \"db.log\";\n             printf(\"dbenv.open LogDir=%s ErrorFile=%s\\n\", pathLogDir.string().c_str(), pathErrorFile.string().c_str());\n \n             int nDbCache = GetArg(\"-dbcache\", 25);\n@@ -94,7 +94,7 @@ CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)\n             dbenv.set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n             dbenv.set_flags(DB_AUTO_COMMIT, 1);\n             dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-            ret = dbenv.open(strDataDir.c_str(),\n+            ret = dbenv.open(pathDataDir.string().c_str(),\n                              DB_CREATE     |\n                              DB_INIT_LOCK  |\n                              DB_INIT_LOG   |\n@@ -1087,13 +1087,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n         return DB_NEED_REWRITE;\n \n     if (nFileVersion < CLIENT_VERSION) // Update\n-    {\n-        // Get rid of old debug.log file in current directory\n-        if (nFileVersion <= 105 && !pszSetDataDir[0])\n-            unlink(\"debug.log\");\n-\n         WriteVersion(CLIENT_VERSION);\n-    }\n \n     return DB_LOAD_OK;\n }\n@@ -1176,10 +1170,10 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n                 mapFileUseCount.erase(wallet.strWalletFile);\n \n                 // Copy wallet.dat\n-                filesystem::path pathSrc(GetDataDir() + \"/\" + wallet.strWalletFile);\n+                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n                 filesystem::path pathDest(strDest);\n                 if (filesystem::is_directory(pathDest))\n-                    pathDest = pathDest / wallet.strWalletFile;\n+                    pathDest /= wallet.strWalletFile;\n \n                 try {\n #if BOOST_VERSION >= 104000"
      },
      {
        "sha": "2be0027a5b9eeff48c8da1e198d19a9385ff55df",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
        "patch": "@@ -307,11 +307,11 @@ bool AppInit2(int argc, char* argv[])\n     }\n #endif\n \n-    if (!fDebug && !pszSetDataDir[0])\n+    if (!fDebug)\n         ShrinkDebugFile();\n     printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     printf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion().c_str(), CLIENT_DATE.c_str());\n-    printf(\"Default data directory %s\\n\", GetDefaultDataDir().c_str());\n+    printf(\"Default data directory %s\\n\", GetDefaultDataDir().string().c_str());\n \n     if (GetBoolArg(\"-loadblockindextest\"))\n     {\n@@ -322,13 +322,13 @@ bool AppInit2(int argc, char* argv[])\n     }\n \n     // Make sure only a single bitcoin process is using the data directory.\n-    string strLockFile = GetDataDir() + \"/.lock\";\n-    FILE* file = fopen(strLockFile.c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n+    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n+    FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n-    static boost::interprocess::file_lock lock(strLockFile.c_str());\n+    static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n     if (!lock.try_lock())\n     {\n-        ThreadSafeMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str()), _(\"Bitcoin\"), wxOK|wxMODAL);\n+        ThreadSafeMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().string().c_str()), _(\"Bitcoin\"), wxOK|wxMODAL);\n         return false;\n     }\n \n@@ -584,20 +584,20 @@ bool AppInit2(int argc, char* argv[])\n }\n \n #ifdef WIN32\n-string StartupShortcutPath()\n+boost::filesystem::path StartupShortcutPath()\n {\n-    return MyGetSpecialFolderPath(CSIDL_STARTUP, true) + \"\\\\Bitcoin.lnk\";\n+    return MyGetSpecialFolderPath(CSIDL_STARTUP, true) / \"Bitcoin.lnk\";\n }\n \n bool GetStartOnSystemStartup()\n {\n-    return filesystem::exists(StartupShortcutPath().c_str());\n+    return filesystem::exists(StartupShortcutPath());\n }\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     // If the shortcut exists already, remove it for updating\n-    remove(StartupShortcutPath().c_str());\n+    boost::filesystem::remove(StartupShortcutPath());\n \n     if (fAutoStart)\n     {\n@@ -633,7 +633,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             {\n                 WCHAR pwsz[MAX_PATH];\n                 // Ensure that the string is ANSI.\n-                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().c_str(), -1, pwsz, MAX_PATH);\n+                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().string().c_str(), -1, pwsz, MAX_PATH);\n                 // Save the link by calling IPersistFile::Save.\n                 hres = ppf->Save(pwsz, TRUE);\n                 ppf->Release();\n@@ -659,15 +659,15 @@ boost::filesystem::path GetAutostartDir()\n     namespace fs = boost::filesystem;\n \n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n-    if (pszConfigHome) return fs::path(pszConfigHome) / fs::path(\"autostart\");\n+    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");\n-    if (pszHome) return fs::path(pszHome) / fs::path(\".config/autostart\");\n+    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n     return fs::path();\n }\n \n boost::filesystem::path GetAutostartFilePath()\n {\n-    return GetAutostartDir() / boost::filesystem::path(\"bitcoin.desktop\");\n+    return GetAutostartDir() / \"bitcoin.desktop\";\n }\n \n bool GetStartOnSystemStartup()\n@@ -692,13 +692,7 @@ bool GetStartOnSystemStartup()\n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     if (!fAutoStart)\n-    {\n-#if defined(BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION >= 3\n-        unlink(GetAutostartFilePath().string().c_str());\n-#else\n-        unlink(GetAutostartFilePath().native_file_string().c_str());\n-#endif\n-    }\n+        boost::filesystem::remove(GetAutostartFilePath());\n     else\n     {\n         char pszExePath[MAX_PATH+1];"
      },
      {
        "sha": "b9c9db7a6242fc4f059886388c0b2fa0006fbc15",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
        "patch": "@@ -1822,7 +1822,7 @@ FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszM\n {\n     if (nFile == -1)\n         return NULL;\n-    FILE* file = fopen(strprintf(\"%s/blk%04d.dat\", GetDataDir().c_str(), nFile).c_str(), pszMode);\n+    FILE* file = fopen((GetDataDir() / strprintf(\"blk%04d.dat\", nFile)).string().c_str(), pszMode);\n     if (!file)\n         return NULL;\n     if (nBlockPos != 0 && !strchr(pszMode, 'a') && !strchr(pszMode, 'w'))"
      },
      {
        "sha": "91f1810ea6cd91e5e3c6142a40a0854b3815dad1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 83,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
        "patch": "@@ -22,7 +22,6 @@ map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n bool fPrintToConsole = false;\n bool fPrintToDebugger = false;\n-char pszSetDataDir[MAX_PATH] = \"\";\n bool fRequestShutdown = false;\n bool fShutdown = false;\n bool fDaemon = false;\n@@ -165,10 +164,8 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n \n         if (!fileout)\n         {\n-            char pszFile[MAX_PATH+100];\n-            GetDataDir(pszFile);\n-            strlcat(pszFile, \"/debug.log\", sizeof(pszFile));\n-            fileout = fopen(pszFile, \"a\");\n+            boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+            fileout = fopen(pathDebug.string().c_str(), \"a\");\n             if (fileout) setbuf(fileout, NULL); // unbuffered\n         }\n         if (fileout)\n@@ -768,101 +765,94 @@ void PrintExceptionContinue(std::exception* pex, const char* pszThread)\n }\n \n #ifdef WIN32\n-string MyGetSpecialFolderPath(int nFolder, bool fCreate)\n+boost::filesystem::path MyGetSpecialFolderPath(int nFolder, bool fCreate)\n {\n+    namespace fs = boost::filesystem;\n+\n     char pszPath[MAX_PATH] = \"\";\n     if(SHGetSpecialFolderPathA(NULL, pszPath, nFolder, fCreate))\n     {\n-        return pszPath;\n+        return fs::path(pszPath);\n     }\n     else if (nFolder == CSIDL_STARTUP)\n     {\n-        return string(getenv(\"USERPROFILE\")) + \"\\\\Start Menu\\\\Programs\\\\Startup\";\n+        return fs::path(getenv(\"USERPROFILE\")) / \"Start Menu\" / \"Programs\" / \"Startup\";\n     }\n     else if (nFolder == CSIDL_APPDATA)\n     {\n-        return getenv(\"APPDATA\");\n+        return fs::path(getenv(\"APPDATA\"));\n     }\n-    return \"\";\n+    return fs::path(\"\");\n }\n #endif\n \n-string GetDefaultDataDir()\n+boost::filesystem::path GetDefaultDataDir()\n {\n+    namespace fs = boost::filesystem;\n+\n     // Windows: C:\\Documents and Settings\\username\\Application Data\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n     // Unix: ~/.bitcoin\n #ifdef WIN32\n     // Windows\n-    return MyGetSpecialFolderPath(CSIDL_APPDATA, true) + \"\\\\Bitcoin\";\n+    return MyGetSpecialFolderPath(CSIDL_APPDATA, true) / \"Bitcoin\";\n #else\n+    fs::path pathRet;\n     char* pszHome = getenv(\"HOME\");\n     if (pszHome == NULL || strlen(pszHome) == 0)\n-        pszHome = (char*)\"/\";\n-    string strHome = pszHome;\n-    if (strHome[strHome.size()-1] != '/')\n-        strHome += '/';\n+        pathRet = fs::path(\"/\");\n+    else\n+        pathRet = fs::path(pszHome);\n #ifdef MAC_OSX\n     // Mac\n-    strHome += \"Library/Application Support/\";\n-    filesystem::create_directory(strHome.c_str());\n-    return strHome + \"Bitcoin\";\n+    pathRet /= \"Library\" / \"Application Support\";\n+    filesystem::create_directory(pathRet);\n+    return pathRet / \"Bitcoin\";\n #else\n     // Unix\n-    return strHome + \".bitcoin\";\n+    return pathRet / \".bitcoin\";\n #endif\n #endif\n }\n \n-void GetDataDir(char* pszDir)\n+const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n {\n-    // pszDir must be at least MAX_PATH length.\n-    int nVariation;\n-    if (pszSetDataDir[0] != 0)\n-    {\n-        strlcpy(pszDir, pszSetDataDir, MAX_PATH);\n-        nVariation = 0;\n-    }\n-    else\n-    {\n-        // This can be called during exceptions by printf, so we cache the\n-        // value so we don't have to do memory allocations after that.\n-        static char pszCachedDir[MAX_PATH];\n-        if (pszCachedDir[0] == 0)\n-            strlcpy(pszCachedDir, GetDefaultDataDir().c_str(), sizeof(pszCachedDir));\n-        strlcpy(pszDir, pszCachedDir, MAX_PATH);\n-        nVariation = 1;\n-    }\n-    if (fTestNet)\n-    {\n-        char* p = pszDir + strlen(pszDir);\n-        if (p > pszDir && p[-1] != '/' && p[-1] != '\\\\')\n-            *p++ = '/';\n-        strcpy(p, \"testnet\");\n-        nVariation += 2;\n-    }\n-    static bool pfMkdir[4];\n-    if (!pfMkdir[nVariation])\n-    {\n-        pfMkdir[nVariation] = true;\n-        boost::filesystem::create_directory(pszDir);\n+    namespace fs = boost::filesystem;\n+\n+    static fs::path pathCached[2];\n+    static CCriticalSection csPathCached;\n+    static bool cachedPath[2] = {false, false};\n+\n+    fs::path &path = pathCached[fNetSpecific];\n+\n+    // This can be called during exceptions by printf, so we cache the\n+    // value so we don't have to do memory allocations after that.\n+    if (cachedPath[fNetSpecific])\n+        return path;\n+\n+    LOCK(csPathCached);\n+\n+    if (mapArgs.count(\"-datadir\")) {\n+        path = mapArgs[\"-datadir\"];\n+    } else {\n+        path = GetDefaultDataDir();\n+        if (fNetSpecific && GetBoolArg(\"-testnet\", false))\n+            path /= \"testnet\";\n     }\n-}\n \n-string GetDataDir()\n-{\n-    char pszDir[MAX_PATH];\n-    GetDataDir(pszDir);\n-    return pszDir;\n+    fs::create_directory(path);\n+\n+    cachedPath[fNetSpecific]=true;\n+    return path;\n }\n \n-string GetConfigFile()\n+boost::filesystem::path GetConfigFile()\n {\n     namespace fs = boost::filesystem;\n \n     fs::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n-    if (!pathConfigFile.is_complete()) pathConfigFile = fs::path(GetDataDir()) / pathConfigFile;\n-    return pathConfigFile.string();\n+    if (!pathConfigFile.is_complete()) pathConfigFile = GetDataDir(false) / pathConfigFile;\n+    return pathConfigFile;\n }\n \n bool ReadConfigFile(map<string, string>& mapSettingsRet,\n@@ -871,27 +861,13 @@ bool ReadConfigFile(map<string, string>& mapSettingsRet,\n     namespace fs = boost::filesystem;\n     namespace pod = boost::program_options::detail;\n \n-    if (mapSettingsRet.count(\"-datadir\"))\n-    {\n-        if (fs::is_directory(fs::system_complete(mapSettingsRet[\"-datadir\"])))\n-        {\n-            fs::path pathDataDir(fs::system_complete(mapSettingsRet[\"-datadir\"]));\n-\n-            strlcpy(pszSetDataDir, pathDataDir.string().c_str(), sizeof(pszSetDataDir));\n-        }\n-        else\n-        {\n-            return false;\n-        }\n-    }\n-\n     fs::ifstream streamConfig(GetConfigFile());\n     if (!streamConfig.good())\n         return true; // No bitcoin.conf file is OK\n \n     set<string> setOptions;\n     setOptions.insert(\"*\");\n-    \n+\n     for (pod::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n     {\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n@@ -907,18 +883,18 @@ bool ReadConfigFile(map<string, string>& mapSettingsRet,\n     return true;\n }\n \n-string GetPidFile()\n+boost::filesystem::path GetPidFile()\n {\n     namespace fs = boost::filesystem;\n \n     fs::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n-    if (!pathPidFile.is_complete()) pathPidFile = fs::path(GetDataDir()) / pathPidFile;\n-    return pathPidFile.string();\n+    if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n+    return pathPidFile;\n }\n \n-void CreatePidFile(string pidFile, pid_t pid)\n+void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n {\n-    FILE* file = fopen(pidFile.c_str(), \"w\");\n+    FILE* file = fopen(path.string().c_str(), \"w\");\n     if (file)\n     {\n         fprintf(file, \"%d\\n\", pid);\n@@ -939,8 +915,8 @@ int GetFilesize(FILE* file)\n void ShrinkDebugFile()\n {\n     // Scroll debug.log if it's getting too big\n-    string strFile = GetDataDir() + \"/debug.log\";\n-    FILE* file = fopen(strFile.c_str(), \"r\");\n+    boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n+    FILE* file = fopen(pathLog.string().c_str(), \"r\");\n     if (file && GetFilesize(file) > 10 * 1000000)\n     {\n         // Restart the file with some of the end\n@@ -949,7 +925,7 @@ void ShrinkDebugFile()\n         int nBytes = fread(pch, 1, sizeof(pch), file);\n         fclose(file);\n \n-        file = fopen(strFile.c_str(), \"w\");\n+        file = fopen(pathLog.string().c_str(), \"w\");\n         if (file)\n         {\n             fwrite(pch, 1, nBytes, file);"
      },
      {
        "sha": "d205260d8e8a0a577e6bbf255b4361c61f475cf8",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee12c3d60c4bb7b25e06709e92344d2d8b2c581e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ee12c3d60c4bb7b25e06709e92344d2d8b2c581e",
        "patch": "@@ -19,6 +19,8 @@ typedef int pid_t; /* define for windows compatiblity */\n #include <string>\n \n #include <boost/thread.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/path.hpp>\n #include <boost/interprocess/sync/interprocess_recursive_mutex.hpp>\n #include <boost/interprocess/sync/scoped_lock.hpp>\n #include <boost/interprocess/sync/interprocess_condition.hpp>\n@@ -111,7 +113,6 @@ extern std::map<std::string, std::vector<std::string> > mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugger;\n-extern char pszSetDataDir[MAX_PATH];\n extern bool fRequestShutdown;\n extern bool fShutdown;\n extern bool fDaemon;\n@@ -153,16 +154,15 @@ void ParseParameters(int argc, const char*const argv[]);\n bool WildcardMatch(const char* psz, const char* mask);\n bool WildcardMatch(const std::string& str, const std::string& mask);\n int GetFilesize(FILE* file);\n-void GetDataDir(char* pszDirRet);\n-std::string GetConfigFile();\n-std::string GetPidFile();\n-void CreatePidFile(std::string pidFile, pid_t pid);\n+boost::filesystem::path GetDefaultDataDir();\n+const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+boost::filesystem::path GetConfigFile();\n+boost::filesystem::path GetPidFile();\n+void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n bool ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef WIN32\n-std::string MyGetSpecialFolderPath(int nFolder, bool fCreate);\n+boost::filesystem::path MyGetSpecialFolderPath(int nFolder, bool fCreate);\n #endif\n-std::string GetDefaultDataDir();\n-std::string GetDataDir();\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n uint64 GetRand(uint64 nMax);"
      }
    ]
  }
]