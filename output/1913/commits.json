[
  {
    "sha": "4e882b79605e15297f7c5411bfd5f3dce4cad6f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTg4MmI3OTYwNWUxNTI5N2Y3YzU0MTFiZmQ1ZjNkY2U0Y2FkNmYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-10-07T12:53:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-10-07T13:10:14Z"
      },
      "message": "Remove I2P support from netbase\n\nI2P apparently needs 256 bits to store a fully routable address. Garlicat\nrequires a centralized lookup service to map the 80-bit addresses to fully\nroutable ones (as far as I understood), so that's not really usable in our\nsituation.\n\nTo support I2P routing and peer exchange for it, another solution is needed.\nThis will most likely imply a network protocol change, and extension of the\n'addr' message.",
      "tree": {
        "sha": "5a977ebe01dd3a3ff0dcff60af4427815af407ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a977ebe01dd3a3ff0dcff60af4427815af407ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e882b79605e15297f7c5411bfd5f3dce4cad6f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e882b79605e15297f7c5411bfd5f3dce4cad6f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e882b79605e15297f7c5411bfd5f3dce4cad6f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e882b79605e15297f7c5411bfd5f3dce4cad6f1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee0b64853699c08602fed81cdefc62d7e8dcdce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee0b64853699c08602fed81cdefc62d7e8dcdce2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee0b64853699c08602fed81cdefc62d7e8dcdce2"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 6,
      "deletions": 41
    },
    "files": [
      {
        "sha": "a69502028ac8ab13852a5833a1b84675564b3d78",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 37,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e882b79605e15297f7c5411bfd5f3dce4cad6f1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e882b79605e15297f7c5411bfd5f3dce4cad6f1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=4e882b79605e15297f7c5411bfd5f3dce4cad6f1",
        "patch": "@@ -29,7 +29,6 @@ enum Network ParseNetwork(std::string net) {\n     if (net == \"ipv4\") return NET_IPV4;\n     if (net == \"ipv6\") return NET_IPV6;\n     if (net == \"tor\")  return NET_TOR;\n-    if (net == \"i2p\")  return NET_I2P;\n     return NET_UNROUTABLE;\n }\n \n@@ -540,7 +539,6 @@ void CNetAddr::SetIP(const CNetAddr& ipIn)\n }\n \n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n-static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};\n \n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n@@ -553,15 +551,6 @@ bool CNetAddr::SetSpecial(const std::string &strName)\n             ip[i + sizeof(pchOnionCat)] = vchAddr[i];\n         return true;\n     }\n-    if (strName.size()>11 && strName.substr(strName.size() - 11, 11) == \".oc.b32.i2p\") {\n-        std::vector<unsigned char> vchAddr = DecodeBase32(strName.substr(0, strName.size() - 11).c_str());\n-        if (vchAddr.size() != 16-sizeof(pchGarliCat))\n-            return false;\n-        memcpy(ip, pchOnionCat, sizeof(pchGarliCat));\n-        for (unsigned int i=0; i<16-sizeof(pchGarliCat); i++)\n-            ip[i + sizeof(pchGarliCat)] = vchAddr[i];\n-        return true;\n-    }\n     return false;\n }\n \n@@ -611,7 +600,7 @@ bool CNetAddr::IsIPv4() const\n \n bool CNetAddr::IsIPv6() const\n {\n-    return (!IsIPv4() && !IsTor() && !IsI2P());\n+    return (!IsIPv4() && !IsTor());\n }\n \n bool CNetAddr::IsRFC1918() const\n@@ -675,11 +664,6 @@ bool CNetAddr::IsTor() const\n     return (memcmp(ip, pchOnionCat, sizeof(pchOnionCat)) == 0);\n }\n \n-bool CNetAddr::IsI2P() const\n-{\n-    return (memcmp(ip, pchGarliCat, sizeof(pchGarliCat)) == 0);\n-}\n-\n bool CNetAddr::IsLocal() const\n {\n     // IPv4 loopback\n@@ -738,7 +722,7 @@ bool CNetAddr::IsValid() const\n \n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || (IsRFC4193() && !IsTor() && !IsI2P()) || IsRFC4843() || IsLocal());\n+    return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsLocal());\n }\n \n enum Network CNetAddr::GetNetwork() const\n@@ -752,18 +736,13 @@ enum Network CNetAddr::GetNetwork() const\n     if (IsTor())\n         return NET_TOR;\n \n-    if (IsI2P())\n-        return NET_I2P;\n-\n     return NET_IPV6;\n }\n \n std::string CNetAddr::ToStringIP() const\n {\n     if (IsTor())\n         return EncodeBase32(&ip[6], 10) + \".onion\";\n-    if (IsI2P())\n-        return EncodeBase32(&ip[6], 10) + \".oc.b32.i2p\";\n     CService serv(*this, 0);\n #ifdef USE_IPV6\n     struct sockaddr_storage sockaddr;\n@@ -871,12 +850,6 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         nStartByte = 6;\n         nBits = 4;\n     }\n-    else if (IsI2P())\n-    {\n-        nClass = NET_I2P;\n-        nStartByte = 6;\n-        nBits = 4;\n-    }\n     // for he.net, use /36 groups\n     else if (GetByte(15) == 0x20 && GetByte(14) == 0x11 && GetByte(13) == 0x04 && GetByte(12) == 0x70)\n         nBits = 36;\n@@ -962,11 +935,6 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         case NET_IPV4:   return REACH_IPV4; // Tor users can connect to IPv4 as well\n         case NET_TOR:    return REACH_PRIVATE;\n         }\n-    case NET_I2P:\n-        switch(ourNet) {\n-        default:         return REACH_DEFAULT;\n-        case NET_I2P:    return REACH_PRIVATE;\n-        }\n     case NET_TEREDO:\n         switch(ourNet) {\n         default:          return REACH_DEFAULT;\n@@ -982,8 +950,7 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         case NET_TEREDO:  return REACH_TEREDO;\n         case NET_IPV6:    return REACH_IPV6_WEAK;\n         case NET_IPV4:    return REACH_IPV4;\n-        case NET_I2P:     return REACH_PRIVATE; // assume connections from unroutable addresses are\n-        case NET_TOR:     return REACH_PRIVATE; // either from Tor/I2P, or don't care about our address\n+        case NET_TOR:     return REACH_PRIVATE; // either from Tor, or don't care about our address\n         }\n     }\n }\n@@ -1140,7 +1107,7 @@ std::string CService::ToStringPort() const\n \n std::string CService::ToStringIPPort() const\n {\n-    if (IsIPv4() || IsTor() || IsI2P()) {\n+    if (IsIPv4() || IsTor()) {\n         return ToStringIP() + \":\" + ToStringPort();\n     } else {\n         return \"[\" + ToStringIP() + \"]:\" + ToStringPort();"
      },
      {
        "sha": "b86ac450492b014bf12ad6274a7d4cdddbc97c99",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e882b79605e15297f7c5411bfd5f3dce4cad6f1/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e882b79605e15297f7c5411bfd5f3dce4cad6f1/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=4e882b79605e15297f7c5411bfd5f3dce4cad6f1",
        "patch": "@@ -23,7 +23,6 @@ enum Network\n     NET_IPV4,\n     NET_IPV6,\n     NET_TOR,\n-    NET_I2P,\n \n     NET_MAX,\n };\n@@ -44,9 +43,9 @@ class CNetAddr\n         explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false);\n         void Init();\n         void SetIP(const CNetAddr& ip);\n-        bool SetSpecial(const std::string &strName); // for Tor and I2P addresses\n+        bool SetSpecial(const std::string &strName); // for Tor addresses\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n-        bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor/I2P)\n+        bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)\n         bool IsRFC3927() const; // IPv4 autoconfig (169.254.0.0/16)\n@@ -58,7 +57,6 @@ class CNetAddr\n         bool IsRFC6052() const; // IPv6 well-known prefix (64:FF9B::/96)\n         bool IsRFC6145() const; // IPv6 IPv4-translated address (::FFFF:0:0:0/96)\n         bool IsTor() const;\n-        bool IsI2P() const;\n         bool IsLocal() const;\n         bool IsRoutable() const;\n         bool IsValid() const;"
      }
    ]
  }
]