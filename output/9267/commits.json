[
  {
    "sha": "3688866880decdbe9c2b551a1b701c752f8013d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjg4ODY2ODgwZGVjZGJlOWMyYjU1MWExYjcwMWM3NTJmODAxM2Qy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-11-29T17:18:44Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-02T15:35:34Z"
      },
      "message": "Disable fee estimates for a confirm target of 1 block\n\nBackport of #9239 without GUI changes and fixing conflicts in tests.",
      "tree": {
        "sha": "388395d3688edf836441aad19f2e77e6e5d04429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/388395d3688edf836441aad19f2e77e6e5d04429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3688866880decdbe9c2b551a1b701c752f8013d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3688866880decdbe9c2b551a1b701c752f8013d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3688866880decdbe9c2b551a1b701c752f8013d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3688866880decdbe9c2b551a1b701c752f8013d2/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29435db6a4b5ddfca3b83d49a03643439d8f254f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29435db6a4b5ddfca3b83d49a03643439d8f254f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29435db6a4b5ddfca3b83d49a03643439d8f254f"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 30,
      "deletions": 9
    },
    "files": [
      {
        "sha": "453b4a57d95dad49c46f912b47f5eb184bba5788",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3688866880decdbe9c2b551a1b701c752f8013d2/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3688866880decdbe9c2b551a1b701c752f8013d2/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3688866880decdbe9c2b551a1b701c752f8013d2",
        "patch": "@@ -495,7 +495,8 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n {\n     // Return failure if trying to analyze a target we're not tracking\n-    if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n         return CFeeRate(0);\n \n     double median = feeStats.EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n@@ -514,6 +515,10 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     if (confTarget <= 0 || (unsigned int)confTarget > feeStats.GetMaxConfirms())\n         return CFeeRate(0);\n \n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget == 1)\n+        confTarget = 2;\n+\n     double median = -1;\n     while (median < 0 && (unsigned int)confTarget <= feeStats.GetMaxConfirms()) {\n         median = feeStats.EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);"
      },
      {
        "sha": "a574709d97c7e6b3ae663da27752420498d2a614",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3688866880decdbe9c2b551a1b701c752f8013d2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3688866880decdbe9c2b551a1b701c752f8013d2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3688866880decdbe9c2b551a1b701c752f8013d2",
        "patch": "@@ -791,6 +791,8 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n             \"\\n\"\n             \"A negative value is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate.\\n\"\n+            \"-1 is always returned for nblocks == 1 as it is impossible to calculate\\n\"\n+            \"a fee that is high enough to get reliably included in the next block.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );"
      },
      {
        "sha": "fa00a1c465f29ac4d8f2b9d160897661de8222f9",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3688866880decdbe9c2b551a1b701c752f8013d2/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3688866880decdbe9c2b551a1b701c752f8013d2/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=3688866880decdbe9c2b551a1b701c752f8013d2",
        "patch": "@@ -105,19 +105,26 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Highest feerate is 10*baseRate and gets in all blocks,\n     // second highest feerate is 9*baseRate and gets in 9/10 blocks = 90%,\n     // third highest feerate is 8*base rate, and gets in 8/10 blocks = 80%,\n-    // so estimateFee(1) should return 10*baseRate.\n+    // so estimateFee(1) would return 10*baseRate but is hardcoded to return failure\n     // Second highest feerate has 100% chance of being included by 2 blocks,\n     // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n         origFeeEst.push_back(mpool.estimateFee(i).GetFeePerK());\n         origPriEst.push_back(mpool.estimatePriority(i));\n         if (i > 1) { // Fee estimates should be monotonically decreasing\n-            BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n+            if (i > 2) {\n+                BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n+            }\n             BOOST_CHECK(origPriEst[i-1] <= origPriEst[i-2]);\n         }\n         int mult = 11-i;\n-        BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n-        BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+        if (i > 1) {\n+            BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n+            BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+        }\n+        else {\n+            BOOST_CHECK(origFeeEst[i-1] == CFeeRate(0).GetFeePerK());\n+        }\n         BOOST_CHECK(origPriEst[i-1] < pow(10,mult) * basepri + deltaPri);\n         BOOST_CHECK(origPriEst[i-1] > pow(10,mult) * basepri - deltaPri);\n     }\n@@ -127,9 +134,12 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     while (blocknum < 250)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n \n+    BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        if (i > 1) {\n+            BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n+            BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        }\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] + deltaPri);\n         BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n@@ -169,8 +179,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n     mpool.removeForBlock(block, 265, dummyConflicted);\n     block.clear();\n+    BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        if (i > 1)\n+            BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) > origPriEst[i-1] - deltaPri);\n     }\n \n@@ -190,8 +202,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n         mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n         block.clear();\n     }\n+    BOOST_CHECK(mpool.estimateFee(1) == CFeeRate(0));\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n+        if (i > 1)\n+            BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n         BOOST_CHECK(mpool.estimatePriority(i) < origPriEst[i-1] - deltaPri);\n     }\n "
      }
    ]
  }
]