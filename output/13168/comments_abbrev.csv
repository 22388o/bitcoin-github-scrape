jamesob,2018-05-04T21:37:22Z,"I figure ""threadutil"" might be a better name going forward because I anticipate as we continue to split stuff out of `util`, this unit might be a good home for things like `TraceThread`. If you or @theuni thinks we should stick with ""threadval"" I'm happy to revert, otherwise I'll split out the rename into a separate commit.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386741763,386741763,
sipa,2018-05-04T21:38:35Z,@jamesob I have no opinion about the name. I'm only complaining about a rename in the middle of a PR in a commit that also introduces other changes.,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386742031,386742031,
theuni,2018-05-04T22:04:55Z,"@jamesob You can just take the threadval files, don't worry about the commit attribution.\n\nAgree with @sipa about the name change, it complicates the review a pretty good bit. Also no preference on naming. I originally named it ""threadval"" with the intention of making it a generic low-level interface for thread_local, but that's not worth the trouble.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386746957,386746957,
jamesob,2018-05-05T20:17:32Z,"@sipa @theuni Thanks for the quick look and comments. I've pushed a reworked version of this branch which\n- rewrites the commit history to be more easily reviewable (I hope),\n- fixes naming conventions,\n- fixes the uninitialized use of `g_key`,\n- ensures each implementation of the thread_local behavior only bumps the internal ID accumulator on the first `SetInternalName` per thread,\n- re",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386832009,386832009,
jamesob,2018-05-06T20:21:51Z,"Pushed a small fix for a mysterious segfault which was happening on 2 x86_64 linux Travis jobs. Core dump and brief writeup in gist below. Build is now passing.\n\n[threadnames2.2 -> threadnames2.3](https://gist.github.com/jamesob/a7b05acc4330317f4cf06f505e575eaa)",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386910323,386910323,
TheBlueMatt,2018-05-06T20:25:27Z,"What platforms still don't have thread_local? Can we just ifdef everything and upgrade our release build OSX SDK and get it in every release platform?\n\nOn May 4, 2018 9:01:28 PM UTC, jamesob <notifications@github.com> wrote:\n>Replaces #13099.\n>\n>The goal here is the same as the previous PR, but this approach uses\n>@theuni's gracefully degrading thread-local caching strategy to avoid\n>(when ",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386910543,386910543,
sipa,2018-05-06T21:35:32Z,General comment: never @mention someone directly in a commit (just attribute them by name). They'll be spammed by every fork on github when those commits are merged by them.,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386917148,386917148,
jamesob,2018-05-07T03:54:13Z,"We need `LogPrint*Continued` to prevent prefixing a line continuation with a thread name. Thanks for the look, will incorporate the feedback tomorrow.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386950733,386950733,
jamesob,2018-05-07T14:08:10Z,"@sipa ah, sorry: I missed your point about the LogPrint macros. I see now that we can just move thread name attachment to reuse the existing `m_started_new_line` stuff, thanks. I've removed the last commit and worked in your other feedback.\n\n[`jamesob/threadnames2.3 -> jamesob/threadnames2.4`](https://gist.github.com/jamesob/2aebc372f6421e6888ff2e5c29ac71b0)",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387076303,387076303,
jamesob,2018-05-07T14:12:37Z,@TheBlueMatt honestly I'm not sure about the thread_local stuff; all I know is that mingw32 wasn't behaving well with its use (as noted [in the comment](https://github.com/bitcoin/bitcoin/pull/13168/files#diff-defae1c29982e5afaf477729b6c7d9b4R13)) - @theuni is the authority there.,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387077686,387077686,
jamesob,2018-05-07T17:05:06Z,"Changed with more feedback from @sipa. \n\n[`jamesob/threadnames2.4` -> `.5`](https://gist.github.com/jamesob/5604eb4586f8eb3401659566e17632f8)",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387133425,387133425,
theuni,2018-05-07T19:46:52Z,"@TheBlueMatt unfortunately it's not the SDK, it's Apple's clang itself that had thread_local patched out until xcode 9.0, released in June 2017. And to make it worse, they held off on supporting it because they ""didn't want to commit to an inefficient abi"". It's that reasoning that makes me believe that a build with an upstream clang may have compatibility issues with end-users' libc/libstdc++. A ",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387181155,387181155,
jamesob,2018-05-08T17:05:37Z,"I've pushed changes removing the unused `thread_local` implementation.\n\n[`jamesob/threadnames2.5 -> .6`](https://gist.github.com/jamesob/7759579c2ece06e9fa7db43652a47600)\n\n",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387472891,387472891,
MarcoFalke,2018-05-17T16:30:58Z,"Needs rebase due to mege of #13236\n",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-389928466,389928466,
jamesob,2018-05-17T18:07:37Z,"@TheBlueMatt and @ryanofsky gave feedback offline that we should only include a (very simple) thread_local implementation for this change, undef `HAVE_THREAD_LOCAL` on problematic platforms (e.g. Apple, Windows), and only include threadnames on supported platforms.  Does anyone disagree with this? If not, I'll implement that sometime in the next few days.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-389957916,389957916,
ryanofsky,2018-05-17T18:19:35Z,"> @TheBlueMatt and @ryanofsky gave feedback offline that we should only include a (very simple) thread_local implementation for this change\n\nI'm happy with either approach. I just wanted to suggest that not logging thread names on platforms that don't support thread_local could be ok and simplify things.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-389961411,389961411,
jamesob,2018-05-21T16:36:34Z,"I've pushed a simplified rework of this branch which removes all non-`thread_local` implementations of the threadutil stuff; we just won't support threadnames if the platform in question doesn't support thread_local. I've also added a flag to disable threadname prefixes (`-logthreadnames`) a la `-logtimestamps`, and have added related release notes.\n\nThis should be ready for review. One outsta",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-390709422,390709422,
skeees,2018-05-24T16:59:46Z,concept ACK (I'm already finding this useful) - a quick note that this breaks combine logs.py (but trivial fix - just need to update the regexp that identifies timestamps),https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-391787374,391787374,
MarcoFalke,2018-05-30T13:58:58Z,"Needs rebase due to merge of #13341\n",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-393172412,393172412,
jamesob,2018-06-05T18:45:33Z,"Thanks for the heads-up, @MarcoFalke. I've rebased and pushed a fix to combine_logs.py (thanks @skeees). This is ready for review-for-merge.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-394818420,394818420,
jamesob,2018-06-14T14:50:27Z,"Thanks very much for the reviews, @skeees @jnewbery @ryanofsky. I've rebased and pushed changes incorporating your good feedback. The changeset has been simplified; instead of the generic thread data struct (which was more or less a vestige from when we were trying to provide threadnames for all platforms, even those not supporting `thread_local`), we're now just using a single thread_local variab",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-397323573,397323573,
jamesob,2018-06-14T14:54:50Z,Looks like I botched the rebase; https://github.com/bitcoin/bitcoin/pull/13168/commits/d930487b3dc398f3ac93c00324fff027a4c61588 shouldn't be in this PR... Fixing.,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-397325155,397325155,
jamesob,2018-06-14T15:24:12Z,Botched rebase fixed.,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-397335382,397335382,
jamesob,2018-06-20T15:41:19Z,"Thanks for the continued review, @ryanofsky. Pushed a few small changes addressing your feedback.\n\n```sh\n $ git diff threadnames2.12..threadnames2.11 | cat\n\ndiff --git a/configure.ac b/configure.ac\nindex 6873326..31c8c66 100644\n--- a/configure.ac\n+++ b/configure.ac\n@@ -771,7 +771,7 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n         AC_MSG_RESULT(no)\n         ;;\n       *darwin*)\",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-398797316,398797316,
jamesob,2018-06-20T16:28:41Z,"Oops -- missed the QT `Rename` calls in the last change. Pushed: \n```sh\n $ git diff threadnames2.12..threadnames2.13 | cat\n\ndiff --git a/src/qt/bitcoin.cpp b/src/qt/bitcoin.cpp\nindex d3f97f7..f13e655 100644\n--- a/src/qt/bitcoin.cpp\n+++ b/src/qt/bitcoin.cpp\n@@ -283,7 +283,7 @@ void BitcoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << "": Running initializa",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-398813037,398813037,
jamesob,2018-06-22T20:44:03Z,"Thanks for the look, @jnewbery. Pushed [`threadnames2.13` -> `threadnames2.14`](https://gist.github.com/jamesob/4b68362c5b47c6ce46ea712ebb9995e2). \n\nIt turns out the txindex thread *is* actually named ([here](https://github.com/bitcoin/bitcoin/blob/master/src/index/base.cpp#L267-L268) - GetName() is passed into TraceThread(), which then calls Rename()):\n\n```\n2018-06-22T20:36:46Z [txindex",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-399576244,399576244,
jnewbery,2018-06-25T14:21:34Z,"Do you know what thread these leveldb logs come from:\n\n```\n2018-06-25T14:20:09Z [init] Bitcoin Core version v0.16.99.0-unk (release build)\n2018-06-25T14:20:09Z [init] InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\n2018-06-25T14:20:09Z [init] Assuming ancestors of block 0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0 h",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-399969344,399969344,
jnewbery,2018-06-25T15:13:56Z,"Tested ACK 18928a194fa351e07eb808eaea01792ceb1d2093, modulo the question above about the leveldb logs.\n\nIf there are any further changes to this PR, I'd suggest squashing commit *threads: explicitly name main threads* into commit *threads: introduce threadutil, refactor thread naming*. ",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-399987545,399987545,
jamesob,2018-06-25T16:24:33Z,@jnewbery Thanks for the follow-up. Turns out that the blank names contained in your logs come from a [compaction](https://github.com/jamesob/bitcoin/blob/18928a194fa351e07eb808eaea01792ceb1d2093/src/leveldb/db/db_impl.cc#L657-L660) thread [started from within the leveldb source tree](https://github.com/jamesob/bitcoin/blob/18928a194fa351e07eb808eaea01792ceb1d2093/src/leveldb/util/env_posix.cc#L62,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-400012141,400012141,
jamesob,2018-07-11T21:07:24Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-404309566,404309566,
jamesob,2018-07-12T14:31:00Z,"Thanks for the look, @sipa. I've incorporated your suggestions and squashed commits as suggested by @jnewbery earlier. \n\nDiff here: [threadnames2.15 -> .16](https://gist.github.com/jamesob/eb392fa435782d3b34cf04de90959ffa)",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-404532679,404532679,
jnewbery,2018-07-23T22:02:13Z,Tested ACK 91aef702c90d53c8f8dd53dfacb5d5f3d0cb2b91,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-407215808,407215808,
jamesob,2018-08-20T21:21:15Z,"I benchmarked this branch (as rebased on top of master) with [bitcoinperf]() and it's worth noting that we see a roughly 1.4% slowdown over master ([details here](https://gist.github.com/jamesob/8115f1d24086580d4dbd54dba4b27047)) during IBD up to height 200,000.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-414467287,414467287,
jamesob,2018-08-24T16:17:04Z,"@ryanofsky thanks for the look. I think given the observed slowdown, maybe disabling by default is the way to go. I don't see any obvious means of improving performance, though I haven't taken to profiling tools.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-415808482,415808482,
DrahtBot,2018-08-31T15:56:34Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-417709189,417709189,
DrahtBot,2018-12-03T16:08:02Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-443765054,443765054,
fanquake,2021-04-07T06:37:37Z,"Removing ""Up for grabs"" given #15849.",https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-814645198,814645198,
sipa,2018-05-04T21:11:33Z,Do we want to use thread local even on mingw (where you had problems earlier?),https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186222792,186222792,src/threadval.cpp
sipa,2018-05-04T21:16:55Z,"(in this function and the next) `g_key` is uninitialized if called before `set_internal_name` is invoked. Perhaps you need to add the `pthread_once` call here as well?\n\nIf not, document that it's illegal to invoke these functions without knowing if `set_internal_name` has been called.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186223904,186223904,src/threadval.cpp
sipa,2018-05-04T21:19:10Z,The `internal_id` has different semantics here than in the thread_local case (here it's only incremented the first time a thread is given a name; in the above case it's incremented every time the name changes). Is that an issue?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186224307,186224307,src/threadval.cpp
theuni,2018-05-04T21:31:41Z,https://github.com/bitcoin/bitcoin/pull/13168/files#diff-defae1c29982e5afaf477729b6c7d9b4R11 :),https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186226655,186226655,src/threadval.cpp
theuni,2018-05-04T21:40:46Z,"Yep, good catch.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186228314,186228314,src/threadval.cpp
theuni,2018-05-04T21:45:35Z,"Yep. The thread_local impl is incorrect. We only want to increment if unset, so thread id's don't bounce around across renames.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186229119,186229119,src/threadval.cpp
theuni,2018-05-04T21:53:44Z,Why the fallback?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186230413,186230413,src/threadutil.cpp
jamesob,2018-05-05T16:40:22Z,"There were lots of `""<unnamed>""` occurrences in the logs and so I figured it made sense to fall back to the process name if we hadn't explicitly named the thread (e.g. `bitcoind`, `bitcoin-qt`). Do you think it makes more sense to just explicitly call `rename` on those main threads?",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266594,186266594,src/threadutil.cpp
jamesob,2018-05-05T16:49:25Z,I can see concerns with `get_internal_name` being a misnomer. Maybe we should introduce a `GetName` that first tries the internal name and then falls back to the process name?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266784,186266784,src/threadutil.cpp
sipa,2018-05-06T21:37:53Z,This can be `SetInternalName(std::move(name))`.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303737,186303737,src/threadutil.cpp
sipa,2018-05-06T21:40:09Z,This increments id every time the name is set (regardless of whether it had a name already).,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303792,186303792,src/threadutil.cpp
sipa,2018-05-06T21:42:13Z,"Can be written as `!pthread_once(&key_once, make_key);`.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303836,186303836,src/threadutil.cpp
sipa,2018-05-06T21:54:01Z,This can be written as `thread_name = std::move(thread_name_)` to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186304251,186304251,src/sync.cpp
jamesob,2018-05-07T03:52:14Z,Doesn't the `static thread_local` attribute prevent that?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186322006,186322006,src/threadutil.cpp
sipa,2018-05-07T04:29:16Z,"Oh, yes indeed. Ignore me\n",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186324579,186324579,src/threadutil.cpp
sipa,2018-05-07T15:31:29Z,I think this line may be unintentional.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186459657,186459657,src/threadutil.cpp
sipa,2018-05-07T15:33:46Z,I don't think you need this variable; using `threadname_buff` will automatically decay to `(char *)`.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186460270,186460270,src/threadutil.cpp
jamesob,2018-05-07T15:42:29Z,I don't think so - see the comment above; sounds like @theuni wants to do more testing with dynamic linking before we use `thread_local` outside the context of debug code.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186462663,186462663,src/threadutil.cpp
sipa,2018-05-07T18:43:14Z,"Unsure if we should have the code in in that case, as it's untestable (it also doesn't compile currently).",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186511474,186511474,src/threadutil.cpp
sipa,2018-05-08T14:09:28Z,This declaration misses a type (when you uncomment the `#undef HAVE_THREAD_LOCAL`).,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186740293,186740293,src/threadutil.cpp
jamesob,2018-05-08T15:06:52Z,More evidence that we should remove this code until we need it. I'll strip it out.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186761614,186761614,src/threadutil.cpp
sipa,2018-05-14T02:21:41Z,"Using `thread_util::Rename(strprintf(""scriptch.%i"", worker_num));` would be simpler.\n\nEDIT: also, `std::to_string` is locale-dependent so should probably be avoided.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r187824667,187824667,src/validation.cpp
skeees,2018-06-06T17:30:02Z,this include necessary?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193494673,193494673,src/util.cpp
skeees,2018-06-06T17:34:43Z,really feels like you should just lift this out into threadutil,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193496034,193496034,src/util.h
skeees,2018-06-06T17:39:50Z,"if you are that concerned about sane behavior for thread_local, does it make more sense to take a whitelist approach?",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193497650,193497650,configure.ac
skeees,2018-06-06T17:45:58Z,"if this is the only setting function thats currently used outside of this translation unit, maybe make Set{Internal,Process}Name static so they arent exposed until theres a reason to have separate internal and internal names?",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193499740,193499740,src/threadutil.h
skeees,2018-06-06T17:46:21Z,I think you can add some consts to the functions declared here,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193499843,193499843,src/threadutil.h
skeees,2018-06-06T18:17:56Z,"it feels weird that i can set it, but then cannot read it back. also this function isn't used anywhere except tests so maybe just remove GetProcessName",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193510566,193510566,src/threadutil.cpp
skeees,2018-06-06T18:19:13Z,thread_id is never used for anything,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193511000,193511000,src/threadutil.cpp
skeees,2018-06-06T18:20:33Z,what happens if you name something longer? truncate? worth amending comment to specify,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193511474,193511474,src/logging.cpp
skeees,2018-06-06T18:22:47Z,"you do a move here but a copy into the function you probably want an rvalue ref and a forward - performance is probably reasonable to worry about here because i think this is called every time a lock is acquired? \nif you make thread_util::GetName() return a const then even better because all of this should get reused",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193512219,193512219,src/sync.cpp
jnewbery,2018-06-06T21:42:28Z,"It seems more natural to me to have the thread name after the timestamp.\n\nThis way round breaks combine_logs without a fix. I imagine other log parsers expect the timestamp at the start of the line as well.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193568494,193568494,src/logging.cpp
jnewbery,2018-06-07T17:33:16Z,"Comment is incorrect. Should be `Get the thread's ...`, or `@return the thread's...`",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193830438,193830438,src/threadutil.h
jnewbery,2018-06-07T17:40:11Z,"The pattern doesn't work for the `[httpworker.n ]` thread logs:\n\n```\n/tmp/user/1000/testb2liucdnnode0 [http         ] 2018-06-07T17:33:43.612724Z Received a POST request for / from 127.0.0.1:34830\n\n[httpworker.2 ] 2018-06-07T17:33:43.612865Z ThreadRPCServer method=getblockcount user=__cookie__ \n node0 [http         ] 2018-06-07T17:33:43.613814Z Received a POST request for / from 127.0.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r193832295,193832295,test/functional/combine_logs.py
jamesob,2018-06-08T19:05:17Z,I think so: `thread_util::Rename` is used on [line 318](https://github.com/jamesob/bitcoin/blob/e6454374033760d93a33619bea1451573718dd3d/src/util.h#L318). ,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r194154011,194154011,src/util.cpp
jamesob,2018-06-08T19:09:58Z,"Only problem is that'd create a circular dep with `logging` and `threadutil` due to use of `LogPrintf` here. I agree that in concept that's where it should live, but it doesn't look trivial to avoid that circular dep.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r194155079,194155079,src/util.h
ryanofsky,2018-06-13T14:03:09Z,"In commit ""disable thread_local on unreliable platforms"" (3e1de02c2500cd82ed4a112aa0198dc601d7947c)\n\n> if you are that concerned about sane behavior for thread_local, does it make more sense to take a whitelist approach?\n\nIMO, blacklisting is an appropriate way to work around bugs in implementations of a standard API like `thread_local`. I think it would be overkill to assume going forward",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195094232,195094232,configure.ac
ryanofsky,2018-06-13T14:17:52Z,"In commit ""disable thread_local on unreliable platforms"" (3e1de02c2500cd82ed4a112aa0198dc601d7947c)\n\nCould you add a comment here with a todo to enable `thread_local` for newer versions of darwin where it is supported? According to \nhttps://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports/29929949#29929949, Apple announced suppo",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195099926,195099926,configure.ac
ryanofsky,2018-06-13T14:49:16Z,"In commit ""threads: introduce threadutil, move RenameProcess, add thread suffixes"" (afce7f5ffce546c4d1aa5111ea02bf9a671cc775)\n\nThis should be called `SetThreadName`, not `SetProcessName` (similarly for GetProcessName) below. The pthread calls obviously affect the thread rather than the process, and from http://man7.org/linux/man-pages/man2/prctl.2.html, the prctl call will ""set the name of the",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195113139,195113139,src/threadutil.cpp
ryanofsky,2018-06-13T14:55:15Z,"In commit ""threads: introduce threadutil, move RenameProcess, add thread suffixes"" (afce7f5ffce546c4d1aa5111ea02bf9a671cc775)\n\nI think the reason for the `bitcoin-` prefix is that it makes it easier to distinguish bitcoin threads from other process threads if you press `H` in top, though I'm sure there are other ways to accomplish this.\n\nMaybe call `SetProcessName` with the `bitcoin-` pref",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195115522,195115522,src/httpserver.cpp
ryanofsky,2018-06-13T15:11:07Z,"In commit ""threads: introduce threadutil, move RenameProcess, add thread suffixes"" (afce7f5ffce546c4d1aa5111ea02bf9a671cc775)\n\nName of this struct seems unusual. I'd probably call it to something like `ThreadName` or `ThreadData`, but I think you should keep whatever name you prefer.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195122528,195122528,src/threadutil.cpp
ryanofsky,2018-06-13T15:16:13Z,"In commit ""threads: introduce threadutil, move RenameProcess, add thread suffixes"" (afce7f5ffce546c4d1aa5111ea02bf9a671cc775)\n\nDoes `constexpr` here actually do anything? I'm suprised the compiler even allows it with the `std::string` struct member.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195124574,195124574,src/threadutil.cpp
ryanofsky,2018-06-13T15:20:09Z,"In commit ""tests: add threadutil tests"" (b1982dd303f8994a9e5a14e2e3b0a3b1fe98da25)\n\n> thread_id is never used for anything`\n\n I would also encourage you to drop thread_id. There are already a bunch of unique identifiers for threads: `gettid()`, `pthread_self()`, `std::this_thread::get_id()`, so I think it'd be good to have clear rationale before adding a new one.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195126209,195126209,src/threadutil.cpp
ryanofsky,2018-06-13T15:24:07Z,"In commit ""threads: introduce threadutil, move RenameProcess, add thread suffixes"" (afce7f5ffce546c4d1aa5111ea02bf9a671cc775)\n\nThis commit is kind of a hodgepodge. Maybe split it into separate commits that just do one thing (move the rename api, change the thread names, add new thread local data).",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195127819,195127819,src/httpserver.cpp
ryanofsky,2018-06-13T15:40:38Z,"In commit ""tests: add threadutil tests"" (b1982dd303f8994a9e5a14e2e3b0a3b1fe98da25)\n\nMaybe note in a comment that this will overwrite and clear the test thread name on platforms that don't support `CAN_READ_PROCESS_NAME`, since this may affect later tests, and display in task managers.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195134421,195134421,src/test/threadutil_tests.cpp
ryanofsky,2018-06-13T15:44:08Z,"In commit ""threads: prefix log messages with thread names"" (d1385ab370b6100bd920ceb817688655b94c650e)\n\nProbably should prefix this with, ""On platforms that support it...""",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195135941,195135941,doc/release-notes-pr13168.md
ryanofsky,2018-06-13T15:44:41Z,"In commit ""threads: prefix log messages with thread names"" (d1385ab370b6100bd920ceb817688655b94c650e)\n\nDocumentation should note that this feature isn't supported on all platforms, causing the thread name column to appear empty.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195136170,195136170,src/init.cpp
ryanofsky,2018-06-13T15:58:48Z,"In commit ""threads: prefix log messages with thread names"" (d1385ab370b6100bd920ceb817688655b94c650e)\n\nChanging the `const std::string &str` declaration to `std::string str` here would avoid an unnecessary string copy in the case where `str` is returned directly (it would be moved from instead of copied, see https://en.cppreference.com/w/cpp/language/return). The same optimization is also appl",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195141701,195141701,src/logging.cpp
ryanofsky,2018-06-13T16:11:28Z,"In commit ""threads: prefix log messages with thread names"" (d1385ab370b6100bd920ceb817688655b94c650e)\n\n> It seems more natural to me to have the thread name after the timestamp.\n\nI'd agree with John. A timestamp seems like an inherent property of any logged event, while a thread name seems more like a piece of debug information might happen to be associated with some events. Also, if you a",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195146016,195146016,src/logging.cpp
ryanofsky,2018-06-13T16:33:17Z,"In commit ""threads: add thread names to deadlock debugging message"" (2b75975636ed943b2a2678edde2a75e15af2c8bf)\n\n> you do a move here but a copy into the function you probably want an rvalue ref and a forward - performance is probably reasonable to worry about here because i think this is called every time a lock is acquired?\nif you make thread_util::GetName() return a const then even better ",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195153663,195153663,src/sync.cpp
ryanofsky,2018-06-13T17:12:41Z,"In commit ""threads: explicitly name main threads"" (56deb18c8bc36de5bb49c7b1db27adfa80ce7169)\n\nThis is giving 2 different threads (the `main()` thread, and the initialization thread spawned in `BitcoinApplication::startThread`) the same name. It might be better to distinguish this thread by calling it `qt-init` or something instead of `bitcoin-qt`.\n\nThis is also kind of an awkward place to ",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195165776,195165776,src/qt/bitcoin.cpp
jamesob,2018-06-14T14:32:52Z,"Added, thanks. ",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195447003,195447003,configure.ac
jamesob,2018-06-14T14:33:02Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195447083,195447083,src/threadutil.cpp
jamesob,2018-06-14T14:33:38Z,"Took your advice; am now prefixing threadname with `""bitcoin-""` for `SetThreadName` calls.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195447322,195447322,src/httpserver.cpp
jamesob,2018-06-14T14:34:02Z,`thread_data_type` has been removed entirely.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195447471,195447471,src/threadutil.cpp
jamesob,2018-06-14T14:34:17Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195447574,195447574,src/init.cpp
jamesob,2018-06-14T14:37:45Z,"Now that we've reversed the order of threadname and log timestamp (threadname follows timestamp), I've only modified `LogTimestampStr` per your suggestion since it's the only function of the two to receive an rvalue as input. `LogThreadnameStr` receives an lvalue from `LogPrintStr` which itself receives an lvalue from `logging.h:LogPrintf`; I may be mistaken here, but the optimization you describe",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195448878,195448878,src/logging.cpp
jamesob,2018-06-14T14:38:01Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195448982,195448982,src/logging.cpp
jamesob,2018-06-14T14:38:24Z,Fixed; thread_data_type has been removed.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195449120,195449120,src/threadutil.cpp
jamesob,2018-06-14T14:40:25Z,"Yep, dropped. The changeset has been substantially simplified to use a single `thread_local std::string g_thread_name` variable instead of a struct.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195449852,195449852,src/threadutil.cpp
jamesob,2018-06-14T14:40:46Z,We're now no longer resizing the internal threadname; thanks.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195449990,195449990,src/logging.cpp
jamesob,2018-06-14T14:41:15Z,Took @ryanofsky's advice and refactored this constructor to use an initialization list.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195450185,195450185,src/sync.cpp
jamesob,2018-06-14T14:41:57Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195450430,195450430,src/threadutil.h
jamesob,2018-06-14T14:44:50Z,"This commit seems tough to split up in a meaningful way. Hopefully the reduced size of the `threadutil` change (now that we aren't doing anything with a generic thread data struct) makes it easier to review, but it'll take a lot of rework to stage the changes out as you suggest. I'm happy to do this if you think it's worthwhile, but wanted to check before doing so to see if the simplifications mak",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195451511,195451511,src/httpserver.cpp
jamesob,2018-06-14T14:45:18Z,Removed this test.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195451697,195451697,src/test/threadutil_tests.cpp
jamesob,2018-06-14T14:45:26Z,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195451742,195451742,doc/release-notes-pr13168.md
jamesob,2018-06-14T14:46:48Z,"Changed the name of this thread to `bitcoin-qt-init`.\n\nAgree with you that this is an awkward spot for naming. Do you think your proposed fix should be done along with this changeset or maybe as a follow-up PR?",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195452268,195452268,src/qt/bitcoin.cpp
jamesob,2018-06-14T16:16:26Z,"Oh no, you're right: I confused this with util.h. Thanks!",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195485403,195485403,src/util.cpp
ryanofsky,2018-06-19T21:12:18Z,"https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195165776\n\n> Do you think your proposed fix should be done along with this changeset or maybe as a follow-up PR?\n\nI might opt to do it in a different PR because QThread is also used in rpcconsole.cpp and bitcoin.cpp, and it might make sense to update those places to set thread names in the same way. But I don't have a real opinion. ",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196580178,196580178,src/qt/bitcoin.cpp
ryanofsky,2018-06-19T21:24:47Z,"In commit ""disable thread_local on unreliable platforms"" (696bdb751055c01c645dc95df486d56a873325de)\n\nLittle spelling mistake",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196583624,196583624,configure.ac
ryanofsky,2018-06-19T21:36:54Z,"In commit ""threads: explicitly name main threads"" (cf82eda8aec147a0d24ade9263f8df0708ff02bb)\n\nSince OS thread names are now prefixed with ""bitcoin-"", I guess these will show up as ""bitcoin-bitcoind"", ""bitcoin-bitcoin-qt-init"", and """"bitcoin-bitcoin-qt"" in top? This seems ok, but a little redundant. You could consider just calling `Rename()` with ""main"" and ""init"" so the OS names would be ""bitc",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196586902,196586902,src/bitcoind.cpp
jamesob,2018-06-20T15:35:11Z,D'oh. Fixed.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196830149,196830149,configure.ac
jamesob,2018-06-20T15:40:10Z,"Done, thanks. Non-internal thread names now look like \n```sh\n $ pstree 12441\n\nbitcoin-init─┬─{bitcoin-addcon}\n             ├─{bitcoin-dnsseed}\n             ├─4*[{bitcoin-httpwor}]\n             ├─{bitcoin-http}\n             ├─{bitcoin-init}\n             ├─{bitcoin-loadblk}\n             ├─{bitcoin-msghand}\n             ├─{bitcoin-net}\n             ├─{bitcoin-opencon}\n      ",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196832011,196832011,src/bitcoind.cpp
jnewbery,2018-06-20T18:21:25Z,Nope. Return type is `void`.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196894591,196894591,src/threadutil.h
jnewbery,2018-06-20T18:22:17Z,the returned `bool` isn't used. Change to `void` (same for other definition of `SetInternalName()` below).,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196894947,196894947,src/threadutil.cpp
jnewbery,2018-06-20T18:25:27Z,"In fact, since the `#else` definition here is doing nothing, I'd just remove these static functions entirely and add the following to `Rename()`:\n\n```\n#if defined(HAVE_THREAD_LOCAL)\n    g_thread_name = name;\n#endif\n```\n    ",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196895959,196895959,src/threadutil.cpp
jnewbery,2018-06-20T19:16:07Z,I don't think you need to change the signature here. Any reason to change from a const reference?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r196911420,196911420,src/logging.cpp
jamesob,2018-06-22T20:17:07Z,"`g_thread_name` doesn't exist as a symbol in non-`thread_local` enabled environments, so basically our choice is one `#if defined(...)` or three inline. I figure one is preferable, but if you feel strongly I'm happy to change.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r197558217,197558217,src/threadutil.cpp
jamesob,2018-06-22T20:19:09Z,See https://github.com/bitcoin/bitcoin/pull/13168#discussion_r195141701,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r197558640,197558640,src/logging.cpp
jnewbery,2018-06-25T15:06:27Z,"No, I don't feel strongly. Both are fine!",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r197831762,197831762,src/threadutil.cpp
sipa,2018-07-11T23:24:54Z,What does logging need util for?,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r201869522,201869522,src/logging.cpp
jamesob,2018-07-12T14:18:36Z,Good catch; this was a relic from previous code.,https://github.com/bitcoin/bitcoin/pull/13168#discussion_r202052054,202052054,src/logging.cpp
jamesob,2018-07-12T14:19:34Z,"Ah thanks, will fix the `httpworker` rename calls as well.",https://github.com/bitcoin/bitcoin/pull/13168#discussion_r202052408,202052408,src/validation.cpp
