[
  {
    "sha": "11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWVlNWVjOThkYTAyYzRlZWU2OWQ3ZTUwODRmYTdmZTE5YzkzZjNi",
    "commit": {
      "author": {
        "name": "Pedro Branco",
        "email": "pedrobrancolcc@gmail.com",
        "date": "2017-03-07T18:17:32Z"
      },
      "committer": {
        "name": "Pedro Branco",
        "email": "pedrobrancolcc@gmail.com",
        "date": "2017-04-05T00:08:21Z"
      },
      "message": "Add query options to listunspent rpc call",
      "tree": {
        "sha": "9c5516eafd50e4f884fd7f11657dfc274dd15e1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c5516eafd50e4f884fd7f11657dfc274dd15e1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/comments",
    "author": {
      "login": "pedrobranco",
      "id": 4319748,
      "node_id": "MDQ6VXNlcjQzMTk3NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4319748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrobranco",
      "html_url": "https://github.com/pedrobranco",
      "followers_url": "https://api.github.com/users/pedrobranco/followers",
      "following_url": "https://api.github.com/users/pedrobranco/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrobranco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrobranco/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrobranco/orgs",
      "repos_url": "https://api.github.com/users/pedrobranco/repos",
      "events_url": "https://api.github.com/users/pedrobranco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrobranco/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pedrobranco",
      "id": 4319748,
      "node_id": "MDQ6VXNlcjQzMTk3NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4319748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrobranco",
      "html_url": "https://github.com/pedrobranco",
      "followers_url": "https://api.github.com/users/pedrobranco/followers",
      "following_url": "https://api.github.com/users/pedrobranco/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrobranco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrobranco/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrobranco/orgs",
      "repos_url": "https://api.github.com/users/pedrobranco/repos",
      "events_url": "https://api.github.com/users/pedrobranco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrobranco/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "080d7c700fc3291560d79fc590e05b8e2bad984f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080d7c700fc3291560d79fc590e05b8e2bad984f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/080d7c700fc3291560d79fc590e05b8e2bad984f"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 81,
      "deletions": 18
    },
    "files": [
      {
        "sha": "adab8a26e5b07267ef56f25d34363da9ed47fa7a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
        "patch": "@@ -77,6 +77,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 0, \"minconf\" },\n     { \"listunspent\", 1, \"maxconf\" },\n     { \"listunspent\", 2, \"addresses\" },\n+    { \"listunspent\", 4, \"query_options\" },\n     { \"getblock\", 1, \"verbose\" },\n     { \"getblockheader\", 1, \"verbose\" },\n     { \"gettransaction\", 1, \"include_watchonly\" },"
      },
      {
        "sha": "cf3f2c1258d86993102130c71895d1b6ba663c8b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 9,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
        "patch": "@@ -2497,22 +2497,29 @@ UniValue listunspent(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n+    if (request.fHelp || request.params.size() > 5)\n         throw std::runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] )\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] [query_options])\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n             \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n-            \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n+            \"3. \\\"addresses\\\"      (string) A json array of bitcoin addresses to filter\\n\"\n             \"    [\\n\"\n-            \"      \\\"address\\\"   (string) bitcoin address\\n\"\n+            \"      \\\"address\\\"     (string) bitcoin address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n             \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n             \"                  See description of \\\"safe\\\" attribute below.\\n\"\n+            \"5. query_options    (json, optional) JSON with query options\\n\"\n+            \"    {\\n\"\n+            \"      \\\"minimumAmount\\\"    (numeric or string, default=0) Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\\n\"\n+            \"      \\\"maximumAmount\\\"    (numeric or string, default=unlimited) Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\\n\"\n+            \"      \\\"maximumCount\\\"     (numeric or string, default=unlimited) Maximum number of UTXOs\\n\"\n+            \"      \\\"minimumSumAmount\\\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    }\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n@@ -2537,6 +2544,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listunspent\", \"\")\n             + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n+            + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n         );\n \n     int nMinDepth = 1;\n@@ -2572,15 +2581,34 @@ UniValue listunspent(const JSONRPCRequest& request)\n         include_unsafe = request.params[3].get_bool();\n     }\n \n+    CAmount nMinimumAmount = 0;\n+    CAmount nMaximumAmount = MAX_MONEY;\n+    CAmount nMinimumSumAmount = MAX_MONEY;\n+    uint64_t nMaximumCount = 0;\n+\n+    if (request.params.size() > 4) {\n+        const UniValue& options = request.params[4].get_obj();\n+\n+        if (options.exists(\"minimumAmount\"))\n+            nMinimumAmount = AmountFromValue(options[\"minimumAmount\"]);\n+\n+        if (options.exists(\"maximumAmount\"))\n+            nMaximumAmount = AmountFromValue(options[\"maximumAmount\"]);\n+\n+        if (options.exists(\"minimumSumAmount\"))\n+            nMinimumSumAmount = AmountFromValue(options[\"minimumSumAmount\"]);\n+\n+        if (options.exists(\"maximumCount\"))\n+            nMaximumCount = options[\"maximumCount\"].get_int64();\n+    }\n+\n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n     assert(pwallet != NULL);\n     LOCK2(cs_main, pwallet->cs_wallet);\n-    pwallet->AvailableCoins(vecOutputs, !include_unsafe, NULL, true);\n-    BOOST_FOREACH(const COutput& out, vecOutputs) {\n-        if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n-            continue;\n \n+    pwallet->AvailableCoins(vecOutputs, !include_unsafe, NULL, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n+    BOOST_FOREACH(const COutput& out, vecOutputs) {\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);\n@@ -3144,7 +3172,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n     { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\"} },\n+    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },"
      },
      {
        "sha": "f40dea60b3277f86a137000682e135c5af82793c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 8,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
        "patch": "@@ -1954,12 +1954,15 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n+void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t &nMaximumCount, const int &nMinDepth, const int &nMaxDepth) const\n {\n     vCoins.clear();\n \n     {\n         LOCK2(cs_main, cs_wallet);\n+\n+        CAmount nTotal = 0;\n+\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const uint256& wtxid = it->first;\n@@ -2017,15 +2020,46 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n                 continue;\n             }\n \n+            if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+                continue;\n+\n             for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n+                if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n+                    continue;\n+\n+                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint((*it).first, i)))\n+                    continue;\n+\n+                if (IsLockedCoin((*it).first, i))\n+                    continue;\n+\n+                if (IsSpent(wtxid, i))\n+                    continue;\n+\n                 isminetype mine = IsMine(pcoin->tx->vout[i]);\n-                if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n-                    !IsLockedCoin((*it).first, i) && (pcoin->tx->vout[i].nValue > 0 || fIncludeZeroValue) &&\n-                    (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected(COutPoint((*it).first, i))))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth,\n-                                                 ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n-                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO),\n-                                                 (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO, safeTx));\n+\n+                if (mine == ISMINE_NO) {\n+                    continue;\n+                }\n+\n+                bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n+                bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n+\n+                vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+\n+                // Checks the sum amount of all UTXO's.\n+                if (nMinimumSumAmount != MAX_MONEY) {\n+                    nTotal += pcoin->tx->vout[i].nValue;\n+\n+                    if (nTotal >= nMinimumSumAmount) {\n+                        return;\n+                    }\n+                }\n+\n+                // Checks the maximum number of UTXO's.\n+                if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                    return;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "c13ab712b54b0c736b1408f406acac166749c230",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=11ee5ec98da02c4eee69d7e5084fa7fe19c93f3b",
        "patch": "@@ -772,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = NULL, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t& nMaximumCount = 0, const int& nMinDepth = 0, const int& nMaxDepth = 9999999) const;\n \n     /**\n      * Shuffle and select coins until nTargetValue is reached while avoiding"
      }
    ]
  }
]