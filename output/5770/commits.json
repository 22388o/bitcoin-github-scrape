[
  {
    "sha": "28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGQ0Y2ZmMGVkMmQ0NDM4ZGE0YmJmMmQ0Y2EwNDY1NzE1NjAzYWY1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-02-08T00:59:58Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-02-08T19:58:59Z"
      },
      "message": "Sanitize command strings before logging them.\n\nNormally bitcoin core does not display any network originated strings without\n sanitizing or hex encoding.  This wasn't done for strcommand in many places.\n\nThis could be used to play havoc with a terminal displaying the logs,\n especially with printtoconsole in use.\n\nThanks to Evil-Knievel for reporting this issue.",
      "tree": {
        "sha": "052974da2c9aba3e088f4e714f66a0962cda6710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/052974da2c9aba3e088f4e714f66a0962cda6710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6140b54bad51e3b063dfb005bfde13aca64eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6140b54bad51e3b063dfb005bfde13aca64eb4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "43e5a2d024edeeede19713ed2c643ad51d0f67ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -3450,7 +3450,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -4285,7 +4285,7 @@ bool ProcessMessages(CNode* pfrom)\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", msg.hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;\n         }\n@@ -4294,7 +4294,7 @@ bool ProcessMessages(CNode* pfrom)\n         CMessageHeader& hdr = msg.hdr;\n         if (!hdr.IsValid())\n         {\n-            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", hdr.GetCommand(), pfrom->id);\n+            LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             continue;\n         }\n         string strCommand = hdr.GetCommand();\n@@ -4310,7 +4310,7 @@ bool ProcessMessages(CNode* pfrom)\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n-               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n+               SanitizeString(strCommand), nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n \n@@ -4327,12 +4327,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", SanitizeString(strCommand), nMessageSize, e.what());\n             }\n             else\n             {\n@@ -4349,7 +4349,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n \n         if (!fRet)\n-            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n+            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", SanitizeString(strCommand), nMessageSize, pfrom->id);\n \n         break;\n     }"
      },
      {
        "sha": "3c3666615e11cdd3a8f5557b16d8a09f4ad36a56",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -1971,7 +1971,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", pszCommand);\n+    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)"
      },
      {
        "sha": "20e9252d7ee8dfb63cba099e265a0782660e33b9",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d4cff0ed2d4438da4bbf2d4ca0465715603af5/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=28d4cff0ed2d4438da4bbf2d4ca0465715603af5",
        "patch": "@@ -849,7 +849,7 @@ void JSONRequest::parse(const Value& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n-        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n+        LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");"
      }
    ]
  }
]