[
  {
    "sha": "28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGJjZjNiN2VmODA0ZjcwODQ5MzhiMjE3MDhiMjljMWY1ZDdjOGY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-29T13:50:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-29T13:50:36Z"
      },
      "message": "Merge pull request #2803 from sipa/tarversion\n\nFix build date for from-tarball builds",
      "tree": {
        "sha": "64a2e100e3d660e9df4fc0bd15d9028408302bad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64a2e100e3d660e9df4fc0bd15d9028408302bad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4f43075d633cfd60cb1f99fc44d7599109eafef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f43075d633cfd60cb1f99fc44d7599109eafef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f43075d633cfd60cb1f99fc44d7599109eafef"
      },
      {
        "sha": "21cc8bdcbea19ca961994ddc19a6f97b4a347fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21cc8bdcbea19ca961994ddc19a6f97b4a347fb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21cc8bdcbea19ca961994ddc19a6f97b4a347fb8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d9d6724a02962a37772c7cfdaf99687ae51f1dfd",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
        "patch": "@@ -36,7 +36,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n // git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n #    define GIT_COMMIT_ID \"$Format:%h$\"\n-#    define GIT_COMMIT_DATE \"$Format:%cD\"\n+#    define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n \n #define BUILD_DESC_FROM_COMMIT(maj,min,rev,build,commit) \\"
      }
    ]
  },
  {
    "sha": "adae78ea9940f4d44382967d1296e7db0b54a4de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGFlNzhlYTk5NDBmNGQ0NDM4Mjk2N2QxMjk2ZTdkYjBiNTRhNGRl",
    "commit": {
      "author": {
        "name": "Vinnie Falco",
        "email": "vinnie.falco@gmail.com",
        "date": "2013-07-01T15:36:32Z"
      },
      "committer": {
        "name": "Vinnie Falco",
        "email": "vinnie.falco@gmail.com",
        "date": "2013-07-01T15:36:32Z"
      },
      "message": "Squashed 'src/leveldb/' changes from aca1ffc..ae6c262\n\nae6c262 Merge branch 'leveldb' into ripple-fork\n28fa222 Looks like a bit more delay is needed to smooth the latency.\na18f3e6 Tidy up JobQueue, add ripple_core module\nab82e57 Release leveldb 1.12\n02c6259 Release leveldb 1.11\n5bbb544 Rate limit compactions with a 25ms pause after each complete file.\n8c29c47 LevelDB issue 178 fix: cannot resize a level 0 compaction set\n18b245c Added GNU/kFreeBSD kernel name (TARGET_OS)\n8be9d12 CondVar::SignalAll was broken, leading to deadlocks on Windows builds. http://code.google.com/p/leveldb/issues/detail?id=149\nc9fc070 Upgrade LevelDB to 1.10.0, mostly for better write stall logging.\n8215b15 Tweak to variable name to support unity build\n\ngit-subtree-dir: src/leveldb\ngit-subtree-split: ae6c2620b2ef3d5c69e63dc0eda865d6a39fa061",
      "tree": {
        "sha": "490da845b95c7aaa5d5ee19cc6e6e3719b1aeef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/490da845b95c7aaa5d5ee19cc6e6e3719b1aeef4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adae78ea9940f4d44382967d1296e7db0b54a4de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adae78ea9940f4d44382967d1296e7db0b54a4de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adae78ea9940f4d44382967d1296e7db0b54a4de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adae78ea9940f4d44382967d1296e7db0b54a4de/comments",
    "author": {
      "login": "vinniefalco",
      "id": 1503976,
      "node_id": "MDQ6VXNlcjE1MDM5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1503976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vinniefalco",
      "html_url": "https://github.com/vinniefalco",
      "followers_url": "https://api.github.com/users/vinniefalco/followers",
      "following_url": "https://api.github.com/users/vinniefalco/following{/other_user}",
      "gists_url": "https://api.github.com/users/vinniefalco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vinniefalco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vinniefalco/subscriptions",
      "organizations_url": "https://api.github.com/users/vinniefalco/orgs",
      "repos_url": "https://api.github.com/users/vinniefalco/repos",
      "events_url": "https://api.github.com/users/vinniefalco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vinniefalco/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vinniefalco",
      "id": 1503976,
      "node_id": "MDQ6VXNlcjE1MDM5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1503976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vinniefalco",
      "html_url": "https://github.com/vinniefalco",
      "followers_url": "https://api.github.com/users/vinniefalco/followers",
      "following_url": "https://api.github.com/users/vinniefalco/following{/other_user}",
      "gists_url": "https://api.github.com/users/vinniefalco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vinniefalco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vinniefalco/subscriptions",
      "organizations_url": "https://api.github.com/users/vinniefalco/orgs",
      "repos_url": "https://api.github.com/users/vinniefalco/repos",
      "events_url": "https://api.github.com/users/vinniefalco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vinniefalco/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c25e98186d0f716451ef000e55646d25e014f573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25e98186d0f716451ef000e55646d25e014f573",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c25e98186d0f716451ef000e55646d25e014f573"
      }
    ],
    "stats": {
      "total": 255,
      "additions": 196,
      "deletions": 59
    },
    "files": [
      {
        "sha": "fc40194ab94f41405bd48d085b9f3fcbe1704234",
        "filename": "AUTHORS",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/AUTHORS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/AUTHORS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/AUTHORS?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -6,3 +6,6 @@ Google Inc.\n # Initial version authors:\n Jeffrey Dean <jeff@google.com>\n Sanjay Ghemawat <sanjay@google.com>\n+\n+# Partial list of contributors:\n+Kevin Regan <kevin.d.regan@gmail.com>"
      },
      {
        "sha": "38b9bf7729bfc71205406567cc4790d8b1c6a49b",
        "filename": "Makefile",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -42,6 +42,7 @@ TESTS = \\\n \tenv_test \\\n \tfilename_test \\\n \tfilter_block_test \\\n+\tissue178_test \\\n \tlog_test \\\n \tmemenv_test \\\n \tskiplist_test \\\n@@ -69,7 +70,7 @@ SHARED = $(SHARED1)\n else\n # Update db.h if you change these.\n SHARED_MAJOR = 1\n-SHARED_MINOR = 9\n+SHARED_MINOR = 12\n SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)\n SHARED2 = $(SHARED1).$(SHARED_MAJOR)\n SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)\n@@ -146,6 +147,9 @@ filename_test: db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)\n filter_block_test: table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n \n+issue178_test: issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS)\n+\t$(CXX) $(LDFLAGS) issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n+\n log_test: db/log_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) db/log_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n "
      },
      {
        "sha": "a3ad057eee5301c1531c24d980281240933955ed",
        "filename": "build_detect_platform",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/build_detect_platform",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/build_detect_platform",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_detect_platform?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -94,6 +94,12 @@ case \"$TARGET_OS\" in\n         PLATFORM_LIBS=\"-lpthread\"\n         PORT_FILE=port/port_posix.cc\n         ;;\n+    GNU/kFreeBSD)\n+        PLATFORM=OS_KFREEBSD\n+        COMMON_FLAGS=\"$MEMCMP_FLAG -D_REENTRANT -DOS_KFREEBSD\"\n+        PLATFORM_LIBS=\"-lpthread\"\n+        PORT_FILE=port/port_posix.cc\n+        ;;\n     NetBSD)\n         PLATFORM=OS_NETBSD\n         COMMON_FLAGS=\"$MEMCMP_FLAG -D_REENTRANT -DOS_NETBSD\""
      },
      {
        "sha": "af02467b3331091c85e689b44ff7f68ba669a180",
        "filename": "db/db_impl.cc",
        "status": "modified",
        "additions": 31,
        "deletions": 10,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/db_impl.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -35,6 +35,8 @@\n \n namespace leveldb {\n \n+const int kNumNonTableCacheFiles = 10;\n+\n // Information kept for every waiting writer\n struct DBImpl::Writer {\n   Status status;\n@@ -92,9 +94,9 @@ Options SanitizeOptions(const std::string& dbname,\n   Options result = src;\n   result.comparator = icmp;\n   result.filter_policy = (src.filter_policy != NULL) ? ipolicy : NULL;\n-  ClipToRange(&result.max_open_files,            20,     50000);\n-  ClipToRange(&result.write_buffer_size,         64<<10, 1<<30);\n-  ClipToRange(&result.block_size,                1<<10,  4<<20);\n+  ClipToRange(&result.max_open_files,    64 + kNumNonTableCacheFiles, 50000);\n+  ClipToRange(&result.write_buffer_size, 64<<10,                      1<<30);\n+  ClipToRange(&result.block_size,        1<<10,                       4<<20);\n   if (result.info_log == NULL) {\n     // Open a log file in the same directory as the db\n     src.env->CreateDir(dbname);  // In case it does not exist\n@@ -130,12 +132,13 @@ DBImpl::DBImpl(const Options& options, const std::string& dbname)\n       log_(NULL),\n       tmp_batch_(new WriteBatch),\n       bg_compaction_scheduled_(false),\n-      manual_compaction_(NULL) {\n+      manual_compaction_(NULL),\n+      consecutive_compaction_errors_(0) {\n   mem_->Ref();\n   has_imm_.Release_Store(NULL);\n \n   // Reserve ten files or so for other uses and give the rest to TableCache.\n-  const int table_cache_size = options.max_open_files - 10;\n+  const int table_cache_size = options.max_open_files - kNumNonTableCacheFiles;\n   table_cache_ = new TableCache(dbname_, &options_, table_cache_size);\n \n   versions_ = new VersionSet(dbname_, &options_, table_cache_,\n@@ -310,16 +313,24 @@ Status DBImpl::Recover(VersionEdit* edit) {\n     if (!s.ok()) {\n       return s;\n     }\n+    std::set<uint64_t> expected;\n+    versions_->AddLiveFiles(&expected);\n     uint64_t number;\n     FileType type;\n     std::vector<uint64_t> logs;\n     for (size_t i = 0; i < filenames.size(); i++) {\n-      if (ParseFileName(filenames[i], &number, &type)\n-          && type == kLogFile\n-          && ((number >= min_log) || (number == prev_log))) {\n+      if (ParseFileName(filenames[i], &number, &type)) {\n+        expected.erase(number);\n+        if (type == kLogFile && ((number >= min_log) || (number == prev_log)))\n         logs.push_back(number);\n       }\n     }\n+    if (!expected.empty()) {\n+      char buf[50];\n+      snprintf(buf, sizeof(buf), \"%d missing files; e.g.\",\n+               static_cast<int>(expected.size()));\n+      return Status::Corruption(buf, TableFileName(dbname_, *(expected.begin())));\n+    }\n \n     // Recover in the order in which the logs were generated\n     std::sort(logs.begin(), logs.end());\n@@ -611,6 +622,7 @@ void DBImpl::BackgroundCall() {\n     Status s = BackgroundCompaction();\n     if (s.ok()) {\n       // Success\n+      consecutive_compaction_errors_ = 0;\n     } else if (shutting_down_.Acquire_Load()) {\n       // Error most likely due to shutdown; do not wait\n     } else {\n@@ -622,7 +634,12 @@ void DBImpl::BackgroundCall() {\n       Log(options_.info_log, \"Waiting after background compaction error: %s\",\n           s.ToString().c_str());\n       mutex_.Unlock();\n-      env_->SleepForMicroseconds(1000000);\n+      ++consecutive_compaction_errors_;\n+      int seconds_to_sleep = 1;\n+      for (int i = 0; i < 3 && i < consecutive_compaction_errors_ - 1; ++i) {\n+        seconds_to_sleep *= 2;\n+      }\n+      env_->SleepForMicroseconds(seconds_to_sleep * 1000000);\n       mutex_.Lock();\n     }\n   }\n@@ -805,6 +822,9 @@ Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,\n           (unsigned long long) output_number,\n           (unsigned long long) current_entries,\n           (unsigned long long) current_bytes);\n+\n+      // rate-limit compaction file creation with a 100ms pause\n+      env_->SleepForMicroseconds(100000);\n     }\n   }\n   return s;\n@@ -1268,10 +1288,11 @@ Status DBImpl::MakeRoomForWrite(bool force) {\n     } else if (imm_ != NULL) {\n       // We have filled up the current memtable, but the previous\n       // one is still being compacted, so we wait.\n+      Log(options_.info_log, \"Current memtable full; waiting...\\n\");\n       bg_cv_.Wait();\n     } else if (versions_->NumLevelFiles(0) >= config::kL0_StopWritesTrigger) {\n       // There are too many level-0 files.\n-      Log(options_.info_log, \"waiting...\\n\");\n+      Log(options_.info_log, \"Too many L0 files; waiting...\\n\");\n       bg_cv_.Wait();\n     } else {\n       // Attempt to switch to a new memtable and trigger compaction of old"
      },
      {
        "sha": "3c8d711ae06de2b41dc6d9a3717808947663c09b",
        "filename": "db/db_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/db/db_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/db/db_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/db_impl.h?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -163,6 +163,7 @@ class DBImpl : public DB {\n \n   // Have we encountered a background error in paranoid mode?\n   Status bg_error_;\n+  int consecutive_compaction_errors_;\n \n   // Per level compaction stats.  stats_[level] stores the stats for\n   // compactions that produced data for the specified \"level\"."
      },
      {
        "sha": "49aae04dbd3bac4b8d057fd490751f71a2d5b294",
        "filename": "db/db_test.cc",
        "status": "modified",
        "additions": 75,
        "deletions": 10,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/db/db_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/db/db_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/db_test.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -33,8 +33,11 @@ class AtomicCounter {\n  public:\n   AtomicCounter() : count_(0) { }\n   void Increment() {\n+    IncrementBy(1);\n+  }\n+  void IncrementBy(int count) {\n     MutexLock l(&mu_);\n-    count_++;\n+    count_ += count;\n   }\n   int Read() {\n     MutexLock l(&mu_);\n@@ -45,6 +48,10 @@ class AtomicCounter {\n     count_ = 0;\n   }\n };\n+\n+void DelayMilliseconds(int millis) {\n+  Env::Default()->SleepForMicroseconds(millis * 1000);\n+}\n }\n \n // Special Env used to delay background operations\n@@ -69,6 +76,7 @@ class SpecialEnv : public EnvWrapper {\n   AtomicCounter random_read_counter_;\n \n   AtomicCounter sleep_counter_;\n+  AtomicCounter sleep_time_counter_;\n \n   explicit SpecialEnv(Env* base) : EnvWrapper(base) {\n     delay_sstable_sync_.Release_Store(NULL);\n@@ -103,7 +111,7 @@ class SpecialEnv : public EnvWrapper {\n       Status Flush() { return base_->Flush(); }\n       Status Sync() {\n         while (env_->delay_sstable_sync_.Acquire_Load() != NULL) {\n-          env_->SleepForMicroseconds(100000);\n+          DelayMilliseconds(100);\n         }\n         return base_->Sync();\n       }\n@@ -174,8 +182,9 @@ class SpecialEnv : public EnvWrapper {\n \n   virtual void SleepForMicroseconds(int micros) {\n     sleep_counter_.Increment();\n-    target()->SleepForMicroseconds(micros);\n+    sleep_time_counter_.IncrementBy(micros);\n   }\n+\n };\n \n class DBTest {\n@@ -461,6 +470,20 @@ class DBTest {\n     }\n     return result;\n   }\n+\n+  bool DeleteAnSSTFile() {\n+    std::vector<std::string> filenames;\n+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));\n+    uint64_t number;\n+    FileType type;\n+    for (size_t i = 0; i < filenames.size(); i++) {\n+      if (ParseFileName(filenames[i], &number, &type) && type == kTableFile) {\n+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n };\n \n TEST(DBTest, Empty) {\n@@ -611,7 +634,7 @@ TEST(DBTest, GetEncountersEmptyLevel) {\n     }\n \n     // Step 4: Wait for compaction to finish\n-    env_->SleepForMicroseconds(1000000);\n+    DelayMilliseconds(1000);\n \n     ASSERT_EQ(NumTableFilesAtLevel(0), 0);\n   } while (ChangeOptions());\n@@ -1295,7 +1318,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_a) {\n   Reopen();\n   Reopen();\n   ASSERT_EQ(\"(a->v)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(a->v)\", Contents());\n }\n \n@@ -1311,7 +1334,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Put(\"\",\"\");\n   Reopen();\n   Put(\"\",\"\");\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   Reopen();\n   Put(\"d\",\"dv\");\n   Reopen();\n@@ -1321,7 +1344,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Delete(\"b\");\n   Reopen();\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n }\n \n@@ -1506,6 +1529,30 @@ TEST(DBTest, NoSpace) {\n   ASSERT_GE(env_->sleep_counter_.Read(), 5);\n }\n \n+TEST(DBTest, ExponentialBackoff) {\n+  Options options = CurrentOptions();\n+  options.env = env_;\n+  Reopen(&options);\n+\n+  ASSERT_OK(Put(\"foo\", \"v1\"));\n+  ASSERT_EQ(\"v1\", Get(\"foo\"));\n+  Compact(\"a\", \"z\");\n+  env_->non_writable_.Release_Store(env_);  // Force errors for new files\n+  env_->sleep_counter_.Reset();\n+  env_->sleep_time_counter_.Reset();\n+  for (int i = 0; i < 5; i++) {\n+    dbfull()->TEST_CompactRange(2, NULL, NULL);\n+  }\n+  env_->non_writable_.Release_Store(NULL);\n+\n+  // Wait for compaction to finish\n+  DelayMilliseconds(1000);\n+\n+  ASSERT_GE(env_->sleep_counter_.Read(), 5);\n+  ASSERT_LT(env_->sleep_counter_.Read(), 10);\n+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);\n+}\n+\n TEST(DBTest, NonWritableFileSystem) {\n   Options options = CurrentOptions();\n   options.write_buffer_size = 1000;\n@@ -1519,7 +1566,7 @@ TEST(DBTest, NonWritableFileSystem) {\n     fprintf(stderr, \"iter %d; errors %d\\n\", i, errors);\n     if (!Put(\"foo\", big).ok()) {\n       errors++;\n-      env_->SleepForMicroseconds(100000);\n+      DelayMilliseconds(100);\n     }\n   }\n   ASSERT_GT(errors, 0);\n@@ -1567,6 +1614,24 @@ TEST(DBTest, ManifestWriteError) {\n   }\n }\n \n+TEST(DBTest, MissingSSTFile) {\n+  ASSERT_OK(Put(\"foo\", \"bar\"));\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  // Dump the memtable to disk.\n+  dbfull()->TEST_CompactMemTable();\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  Close();\n+  ASSERT_TRUE(DeleteAnSSTFile());\n+  Options options = CurrentOptions();\n+  options.paranoid_checks = true;\n+  Status s = TryReopen(&options);\n+  ASSERT_TRUE(!s.ok());\n+  ASSERT_TRUE(s.ToString().find(\"issing\") != std::string::npos)\n+      << s.ToString();\n+}\n+\n TEST(DBTest, FilesDeletedAfterCompaction) {\n   ASSERT_OK(Put(\"foo\", \"v2\"));\n   Compact(\"a\", \"z\");\n@@ -1711,13 +1776,13 @@ TEST(DBTest, MultiThreaded) {\n     }\n \n     // Let them run for a while\n-    env_->SleepForMicroseconds(kTestSeconds * 1000000);\n+    DelayMilliseconds(kTestSeconds * 1000);\n \n     // Stop the threads and wait for them to finish\n     mt.stop.Release_Store(&mt);\n     for (int id = 0; id < kNumThreads; id++) {\n       while (mt.thread_done[id].Acquire_Load() == NULL) {\n-        env_->SleepForMicroseconds(100000);\n+        DelayMilliseconds(100);\n       }\n     }\n   } while (ChangeOptions());"
      },
      {
        "sha": "20a7ca44626050c01b7bde718581c663d38f42a9",
        "filename": "db/dbformat.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/db/dbformat.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/db/dbformat.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/dbformat.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -26,7 +26,7 @@ std::string ParsedInternalKey::DebugString() const {\n            (unsigned long long) sequence,\n            int(type));\n   std::string result = \"'\";\n-  result += user_key.ToString();\n+  result += EscapeString(user_key.ToString());\n   result += buf;\n   return result;\n }"
      },
      {
        "sha": "5a26da4728f6a0934f12d37d84e845ef6a00e8af",
        "filename": "db/filename_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/db/filename_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/db/filename_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/filename_test.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -70,7 +70,7 @@ TEST(FileNameTest, Parse) {\n   for (int i = 0; i < sizeof(errors) / sizeof(errors[0]); i++) {\n     std::string f = errors[i];\n     ASSERT_TRUE(!ParseFileName(f, &number, &type)) << f;\n-  };\n+  }\n }\n \n TEST(FileNameTest, Construction) {"
      },
      {
        "sha": "4fd1ddef21011ffb379019b65ce64464ad8ca54c",
        "filename": "db/version_set.cc",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/db/version_set.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/db/version_set.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/version_set.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -1331,14 +1331,19 @@ Compaction* VersionSet::CompactRange(\n   }\n \n   // Avoid compacting too much in one shot in case the range is large.\n-  const uint64_t limit = MaxFileSizeForLevel(level);\n-  uint64_t total = 0;\n-  for (size_t i = 0; i < inputs.size(); i++) {\n-    uint64_t s = inputs[i]->file_size;\n-    total += s;\n-    if (total >= limit) {\n-      inputs.resize(i + 1);\n-      break;\n+  // But we cannot do this for level-0 since level-0 files can overlap\n+  // and we must not pick one file and drop another older file if the\n+  // two files overlap.\n+  if (level > 0) {\n+    const uint64_t limit = MaxFileSizeForLevel(level);\n+    uint64_t total = 0;\n+    for (size_t i = 0; i < inputs.size(); i++) {\n+      uint64_t s = inputs[i]->file_size;\n+      total += s;\n+      if (total >= limit) {\n+        inputs.resize(i + 1);\n+        break;\n+      }\n     }\n   }\n "
      },
      {
        "sha": "da8b11a8c05b054ef231ba34d88ef51ec1e55eb0",
        "filename": "include/leveldb/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/include/leveldb/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/include/leveldb/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/leveldb/db.h?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -14,7 +14,7 @@ namespace leveldb {\n \n // Update Makefile if you change these\n static const int kMajorVersion = 1;\n-static const int kMinorVersion = 9;\n+static const int kMinorVersion = 12;\n \n struct Options;\n struct ReadOptions;"
      },
      {
        "sha": "1b0f060a19caabfbb5dffe8ef87f1d90536d44f2",
        "filename": "port/port_win.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/port/port_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/port/port_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_win.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -109,12 +109,10 @@ void CondVar::Signal() {\n \n void CondVar::SignalAll() {\n   wait_mtx_.Lock();\n-  for(long i = 0; i < waiting_; ++i) {\n-    ::ReleaseSemaphore(sem1_, 1, NULL);\n-    while(waiting_ > 0) {\n-      --waiting_;\n-      ::WaitForSingleObject(sem2_, INFINITE);\n-    }\n+  ::ReleaseSemaphore(sem1_, waiting_, NULL);\n+  while(waiting_ > 0) {\n+    --waiting_;\n+    ::WaitForSingleObject(sem2_, INFINITE);\n   }\n   wait_mtx_.Unlock();\n }"
      },
      {
        "sha": "79ea9d9ee5fe8af28eb07f48b9534c2979fe842a",
        "filename": "table/block.cc",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/table/block.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/table/block.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/table/block.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -16,7 +16,7 @@\n namespace leveldb {\n \n inline uint32_t Block::NumRestarts() const {\n-  assert(size_ >= 2*sizeof(uint32_t));\n+  assert(size_ >= sizeof(uint32_t));\n   return DecodeFixed32(data_ + size_ - sizeof(uint32_t));\n }\n \n@@ -27,11 +27,12 @@ Block::Block(const BlockContents& contents)\n   if (size_ < sizeof(uint32_t)) {\n     size_ = 0;  // Error marker\n   } else {\n-    restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n-    if (restart_offset_ > size_ - sizeof(uint32_t)) {\n-      // The size is too small for NumRestarts() and therefore\n-      // restart_offset_ wrapped around.\n+    size_t max_restarts_allowed = (size_-sizeof(uint32_t)) / sizeof(uint32_t);\n+    if (NumRestarts() > max_restarts_allowed) {\n+      // The size is too small for NumRestarts()\n       size_ = 0;\n+    } else {\n+      restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n     }\n   }\n }\n@@ -253,7 +254,7 @@ class Block::Iter : public Iterator {\n };\n \n Iterator* Block::NewIterator(const Comparator* cmp) {\n-  if (size_ < 2*sizeof(uint32_t)) {\n+  if (size_ < sizeof(uint32_t)) {\n     return NewErrorIterator(Status::Corruption(\"bad block contents\"));\n   }\n   const uint32_t num_restarts = NumRestarts();"
      },
      {
        "sha": "71c1756e5f440c38c3e712e0359886fe22d6d5a0",
        "filename": "table/table.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/table/table.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/table/table.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/table/table.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -228,7 +228,6 @@ Status Table::InternalGet(const ReadOptions& options, const Slice& k,\n         !filter->KeyMayMatch(handle.offset(), k)) {\n       // Not found\n     } else {\n-      Slice handle = iiter->value();\n       Iterator* block_iter = BlockReader(this, options, iiter->value());\n       block_iter->Seek(k);\n       if (block_iter->Valid()) {"
      },
      {
        "sha": "c723bf84cf5f55fae9b56ab324ebfdc83ba9be52",
        "filename": "table/table_test.cc",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/table/table_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/table/table_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/table/table_test.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -644,6 +644,36 @@ class Harness {\n   Constructor* constructor_;\n };\n \n+// Test empty table/block.\n+TEST(Harness, Empty) {\n+  for (int i = 0; i < kNumTestArgs; i++) {\n+    Init(kTestArgList[i]);\n+    Random rnd(test::RandomSeed() + 1);\n+    Test(&rnd);\n+  }\n+}\n+\n+// Special test for a block with no restart entries.  The C++ leveldb\n+// code never generates such blocks, but the Java version of leveldb\n+// seems to.\n+TEST(Harness, ZeroRestartPointsInBlock) {\n+  char data[sizeof(uint32_t)];\n+  memset(data, 0, sizeof(data));\n+  BlockContents contents;\n+  contents.data = Slice(data, sizeof(data));\n+  contents.cachable = false;\n+  contents.heap_allocated = false;\n+  Block block(contents);\n+  Iterator* iter = block.NewIterator(BytewiseComparator());\n+  iter->SeekToFirst();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->SeekToLast();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->Seek(\"foo\");\n+  ASSERT_TRUE(!iter->Valid());\n+  delete iter;\n+}\n+\n // Test the empty key\n TEST(Harness, SimpleEmptyKey) {\n   for (int i = 0; i < kNumTestArgs; i++) {"
      },
      {
        "sha": "8b197bc02a98e639dc72a58bd7de59603ab77cbc",
        "filename": "util/cache.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/util/cache.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/util/cache.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/cache.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -116,7 +116,6 @@ class HandleTable {\n       LRUHandle* h = list_[i];\n       while (h != NULL) {\n         LRUHandle* next = h->next_hash;\n-        Slice key = h->key();\n         uint32_t hash = h->hash;\n         LRUHandle** ptr = &new_list[hash & (new_length - 1)];\n         h->next_hash = *ptr;\n@@ -160,7 +159,6 @@ class LRUCache {\n   // mutex_ protects the following state.\n   port::Mutex mutex_;\n   size_t usage_;\n-  uint64_t last_id_;\n \n   // Dummy head of LRU list.\n   // lru.prev is newest entry, lru.next is oldest entry.\n@@ -170,8 +168,7 @@ class LRUCache {\n };\n \n LRUCache::LRUCache()\n-    : usage_(0),\n-      last_id_(0) {\n+    : usage_(0) {\n   // Make empty circular linked list\n   lru_.next = &lru_;\n   lru_.prev = &lru_;"
      },
      {
        "sha": "fb5726e33521d01270b481b93d9c5490c6f0b53f",
        "filename": "util/coding_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/util/coding_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/util/coding_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/coding_test.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -109,7 +109,7 @@ TEST(Coding, Varint64) {\n     values.push_back(power);\n     values.push_back(power-1);\n     values.push_back(power+1);\n-  };\n+  }\n \n   std::string s;\n   for (int i = 0; i < values.size(); i++) {"
      },
      {
        "sha": "6cc319242e3b7d77ca62a3619d92112e680d6bf1",
        "filename": "util/comparator.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/util/comparator.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/util/comparator.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/comparator.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -66,15 +66,15 @@ class BytewiseComparatorImpl : public Comparator {\n };\n }  // namespace\n \n-static port::OnceType once = LEVELDB_ONCE_INIT;\n+static port::OnceType once_comparator = LEVELDB_ONCE_INIT;\n static const Comparator* bytewise;\n \n static void InitModule() {\n   bytewise = new BytewiseComparatorImpl;\n }\n \n const Comparator* BytewiseComparator() {\n-  port::InitOnce(&once, InitModule);\n+  port::InitOnce(&once_comparator, InitModule);\n   return bytewise;\n }\n "
      },
      {
        "sha": "6badfdc230f52f235ec7f7523e213dba9d628451",
        "filename": "util/env_posix.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/env_posix.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -386,7 +386,7 @@ class PosixEnv : public Env {\n   PosixEnv();\n   virtual ~PosixEnv() {\n     fprintf(stderr, \"Destroying Env::Default()\\n\");\n-    exit(1);\n+    abort();\n   }\n \n   virtual Status NewSequentialFile(const std::string& fname,\n@@ -467,23 +467,23 @@ class PosixEnv : public Env {\n       result = IOError(fname, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status CreateDir(const std::string& name) {\n     Status result;\n     if (mkdir(name.c_str(), 0755) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status DeleteDir(const std::string& name) {\n     Status result;\n     if (rmdir(name.c_str()) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status GetFileSize(const std::string& fname, uint64_t* size) {\n     Status s;\n@@ -589,7 +589,7 @@ class PosixEnv : public Env {\n   void PthreadCall(const char* label, int result) {\n     if (result != 0) {\n       fprintf(stderr, \"pthread %s: %s\\n\", label, strerror(result));\n-      exit(1);\n+      abort();\n     }\n   }\n "
      },
      {
        "sha": "07cf022060d41ea2139a438886d268a92cb586af",
        "filename": "util/hash.cc",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adae78ea9940f4d44382967d1296e7db0b54a4de/util/hash.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adae78ea9940f4d44382967d1296e7db0b54a4de/util/hash.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/hash.cc?ref=adae78ea9940f4d44382967d1296e7db0b54a4de",
        "patch": "@@ -6,6 +6,13 @@\n #include \"util/coding.h\"\n #include \"util/hash.h\"\n \n+// The FALLTHROUGH_INTENDED macro can be used to annotate implicit fall-through\n+// between switch labels. The real definition should be provided externally.\n+// This one is a fallback version for unsupported compilers.\n+#ifndef FALLTHROUGH_INTENDED\n+#define FALLTHROUGH_INTENDED do { } while (0)\n+#endif\n+\n namespace leveldb {\n \n uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n@@ -28,10 +35,10 @@ uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n   switch (limit - data) {\n     case 3:\n       h += data[2] << 16;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 2:\n       h += data[1] << 8;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 1:\n       h += data[0];\n       h *= m;"
      }
    ]
  },
  {
    "sha": "fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjFkYTYyMzE4ZjVhN2Y2ZTNlYzMxY2RjMDIxNzhhNTQ0NTg3MGU0",
    "commit": {
      "author": {
        "name": "Vinnie Falco",
        "email": "vinnie.falco@gmail.com",
        "date": "2013-07-01T15:36:32Z"
      },
      "committer": {
        "name": "Vinnie Falco",
        "email": "vinnie.falco@gmail.com",
        "date": "2013-07-01T15:36:32Z"
      },
      "message": "Merge commit 'adae78ea9940f4d44382967d1296e7db0b54a4de' into leveldb-squashed",
      "tree": {
        "sha": "4ef6f0b1017c747e84132427666eea4a36d10b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ef6f0b1017c747e84132427666eea4a36d10b0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/comments",
    "author": {
      "login": "vinniefalco",
      "id": 1503976,
      "node_id": "MDQ6VXNlcjE1MDM5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1503976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vinniefalco",
      "html_url": "https://github.com/vinniefalco",
      "followers_url": "https://api.github.com/users/vinniefalco/followers",
      "following_url": "https://api.github.com/users/vinniefalco/following{/other_user}",
      "gists_url": "https://api.github.com/users/vinniefalco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vinniefalco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vinniefalco/subscriptions",
      "organizations_url": "https://api.github.com/users/vinniefalco/orgs",
      "repos_url": "https://api.github.com/users/vinniefalco/repos",
      "events_url": "https://api.github.com/users/vinniefalco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vinniefalco/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vinniefalco",
      "id": 1503976,
      "node_id": "MDQ6VXNlcjE1MDM5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1503976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vinniefalco",
      "html_url": "https://github.com/vinniefalco",
      "followers_url": "https://api.github.com/users/vinniefalco/followers",
      "following_url": "https://api.github.com/users/vinniefalco/following{/other_user}",
      "gists_url": "https://api.github.com/users/vinniefalco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vinniefalco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vinniefalco/subscriptions",
      "organizations_url": "https://api.github.com/users/vinniefalco/orgs",
      "repos_url": "https://api.github.com/users/vinniefalco/repos",
      "events_url": "https://api.github.com/users/vinniefalco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vinniefalco/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28bcf3b7ef804f7084938b21708b29c1f5d7c8f8"
      },
      {
        "sha": "adae78ea9940f4d44382967d1296e7db0b54a4de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adae78ea9940f4d44382967d1296e7db0b54a4de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adae78ea9940f4d44382967d1296e7db0b54a4de"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 190,
      "deletions": 59
    },
    "files": [
      {
        "sha": "fc40194ab94f41405bd48d085b9f3fcbe1704234",
        "filename": "src/leveldb/AUTHORS",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/AUTHORS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/AUTHORS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/AUTHORS?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -6,3 +6,6 @@ Google Inc.\n # Initial version authors:\n Jeffrey Dean <jeff@google.com>\n Sanjay Ghemawat <sanjay@google.com>\n+\n+# Partial list of contributors:\n+Kevin Regan <kevin.d.regan@gmail.com>"
      },
      {
        "sha": "38b9bf7729bfc71205406567cc4790d8b1c6a49b",
        "filename": "src/leveldb/Makefile",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/Makefile?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -42,6 +42,7 @@ TESTS = \\\n \tenv_test \\\n \tfilename_test \\\n \tfilter_block_test \\\n+\tissue178_test \\\n \tlog_test \\\n \tmemenv_test \\\n \tskiplist_test \\\n@@ -69,7 +70,7 @@ SHARED = $(SHARED1)\n else\n # Update db.h if you change these.\n SHARED_MAJOR = 1\n-SHARED_MINOR = 9\n+SHARED_MINOR = 12\n SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)\n SHARED2 = $(SHARED1).$(SHARED_MAJOR)\n SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)\n@@ -146,6 +147,9 @@ filename_test: db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)\n filter_block_test: table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n \n+issue178_test: issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS)\n+\t$(CXX) $(LDFLAGS) issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n+\n log_test: db/log_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) db/log_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n "
      },
      {
        "sha": "af02467b3331091c85e689b44ff7f68ba669a180",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 31,
        "deletions": 10,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -35,6 +35,8 @@\n \n namespace leveldb {\n \n+const int kNumNonTableCacheFiles = 10;\n+\n // Information kept for every waiting writer\n struct DBImpl::Writer {\n   Status status;\n@@ -92,9 +94,9 @@ Options SanitizeOptions(const std::string& dbname,\n   Options result = src;\n   result.comparator = icmp;\n   result.filter_policy = (src.filter_policy != NULL) ? ipolicy : NULL;\n-  ClipToRange(&result.max_open_files,            20,     50000);\n-  ClipToRange(&result.write_buffer_size,         64<<10, 1<<30);\n-  ClipToRange(&result.block_size,                1<<10,  4<<20);\n+  ClipToRange(&result.max_open_files,    64 + kNumNonTableCacheFiles, 50000);\n+  ClipToRange(&result.write_buffer_size, 64<<10,                      1<<30);\n+  ClipToRange(&result.block_size,        1<<10,                       4<<20);\n   if (result.info_log == NULL) {\n     // Open a log file in the same directory as the db\n     src.env->CreateDir(dbname);  // In case it does not exist\n@@ -130,12 +132,13 @@ DBImpl::DBImpl(const Options& options, const std::string& dbname)\n       log_(NULL),\n       tmp_batch_(new WriteBatch),\n       bg_compaction_scheduled_(false),\n-      manual_compaction_(NULL) {\n+      manual_compaction_(NULL),\n+      consecutive_compaction_errors_(0) {\n   mem_->Ref();\n   has_imm_.Release_Store(NULL);\n \n   // Reserve ten files or so for other uses and give the rest to TableCache.\n-  const int table_cache_size = options.max_open_files - 10;\n+  const int table_cache_size = options.max_open_files - kNumNonTableCacheFiles;\n   table_cache_ = new TableCache(dbname_, &options_, table_cache_size);\n \n   versions_ = new VersionSet(dbname_, &options_, table_cache_,\n@@ -310,16 +313,24 @@ Status DBImpl::Recover(VersionEdit* edit) {\n     if (!s.ok()) {\n       return s;\n     }\n+    std::set<uint64_t> expected;\n+    versions_->AddLiveFiles(&expected);\n     uint64_t number;\n     FileType type;\n     std::vector<uint64_t> logs;\n     for (size_t i = 0; i < filenames.size(); i++) {\n-      if (ParseFileName(filenames[i], &number, &type)\n-          && type == kLogFile\n-          && ((number >= min_log) || (number == prev_log))) {\n+      if (ParseFileName(filenames[i], &number, &type)) {\n+        expected.erase(number);\n+        if (type == kLogFile && ((number >= min_log) || (number == prev_log)))\n         logs.push_back(number);\n       }\n     }\n+    if (!expected.empty()) {\n+      char buf[50];\n+      snprintf(buf, sizeof(buf), \"%d missing files; e.g.\",\n+               static_cast<int>(expected.size()));\n+      return Status::Corruption(buf, TableFileName(dbname_, *(expected.begin())));\n+    }\n \n     // Recover in the order in which the logs were generated\n     std::sort(logs.begin(), logs.end());\n@@ -611,6 +622,7 @@ void DBImpl::BackgroundCall() {\n     Status s = BackgroundCompaction();\n     if (s.ok()) {\n       // Success\n+      consecutive_compaction_errors_ = 0;\n     } else if (shutting_down_.Acquire_Load()) {\n       // Error most likely due to shutdown; do not wait\n     } else {\n@@ -622,7 +634,12 @@ void DBImpl::BackgroundCall() {\n       Log(options_.info_log, \"Waiting after background compaction error: %s\",\n           s.ToString().c_str());\n       mutex_.Unlock();\n-      env_->SleepForMicroseconds(1000000);\n+      ++consecutive_compaction_errors_;\n+      int seconds_to_sleep = 1;\n+      for (int i = 0; i < 3 && i < consecutive_compaction_errors_ - 1; ++i) {\n+        seconds_to_sleep *= 2;\n+      }\n+      env_->SleepForMicroseconds(seconds_to_sleep * 1000000);\n       mutex_.Lock();\n     }\n   }\n@@ -805,6 +822,9 @@ Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,\n           (unsigned long long) output_number,\n           (unsigned long long) current_entries,\n           (unsigned long long) current_bytes);\n+\n+      // rate-limit compaction file creation with a 100ms pause\n+      env_->SleepForMicroseconds(100000);\n     }\n   }\n   return s;\n@@ -1268,10 +1288,11 @@ Status DBImpl::MakeRoomForWrite(bool force) {\n     } else if (imm_ != NULL) {\n       // We have filled up the current memtable, but the previous\n       // one is still being compacted, so we wait.\n+      Log(options_.info_log, \"Current memtable full; waiting...\\n\");\n       bg_cv_.Wait();\n     } else if (versions_->NumLevelFiles(0) >= config::kL0_StopWritesTrigger) {\n       // There are too many level-0 files.\n-      Log(options_.info_log, \"waiting...\\n\");\n+      Log(options_.info_log, \"Too many L0 files; waiting...\\n\");\n       bg_cv_.Wait();\n     } else {\n       // Attempt to switch to a new memtable and trigger compaction of old"
      },
      {
        "sha": "3c8d711ae06de2b41dc6d9a3717808947663c09b",
        "filename": "src/leveldb/db/db_impl.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/db_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/db_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.h?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -163,6 +163,7 @@ class DBImpl : public DB {\n \n   // Have we encountered a background error in paranoid mode?\n   Status bg_error_;\n+  int consecutive_compaction_errors_;\n \n   // Per level compaction stats.  stats_[level] stores the stats for\n   // compactions that produced data for the specified \"level\"."
      },
      {
        "sha": "49aae04dbd3bac4b8d057fd490751f71a2d5b294",
        "filename": "src/leveldb/db/db_test.cc",
        "status": "modified",
        "additions": 75,
        "deletions": 10,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/db_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/db_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_test.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -33,8 +33,11 @@ class AtomicCounter {\n  public:\n   AtomicCounter() : count_(0) { }\n   void Increment() {\n+    IncrementBy(1);\n+  }\n+  void IncrementBy(int count) {\n     MutexLock l(&mu_);\n-    count_++;\n+    count_ += count;\n   }\n   int Read() {\n     MutexLock l(&mu_);\n@@ -45,6 +48,10 @@ class AtomicCounter {\n     count_ = 0;\n   }\n };\n+\n+void DelayMilliseconds(int millis) {\n+  Env::Default()->SleepForMicroseconds(millis * 1000);\n+}\n }\n \n // Special Env used to delay background operations\n@@ -69,6 +76,7 @@ class SpecialEnv : public EnvWrapper {\n   AtomicCounter random_read_counter_;\n \n   AtomicCounter sleep_counter_;\n+  AtomicCounter sleep_time_counter_;\n \n   explicit SpecialEnv(Env* base) : EnvWrapper(base) {\n     delay_sstable_sync_.Release_Store(NULL);\n@@ -103,7 +111,7 @@ class SpecialEnv : public EnvWrapper {\n       Status Flush() { return base_->Flush(); }\n       Status Sync() {\n         while (env_->delay_sstable_sync_.Acquire_Load() != NULL) {\n-          env_->SleepForMicroseconds(100000);\n+          DelayMilliseconds(100);\n         }\n         return base_->Sync();\n       }\n@@ -174,8 +182,9 @@ class SpecialEnv : public EnvWrapper {\n \n   virtual void SleepForMicroseconds(int micros) {\n     sleep_counter_.Increment();\n-    target()->SleepForMicroseconds(micros);\n+    sleep_time_counter_.IncrementBy(micros);\n   }\n+\n };\n \n class DBTest {\n@@ -461,6 +470,20 @@ class DBTest {\n     }\n     return result;\n   }\n+\n+  bool DeleteAnSSTFile() {\n+    std::vector<std::string> filenames;\n+    ASSERT_OK(env_->GetChildren(dbname_, &filenames));\n+    uint64_t number;\n+    FileType type;\n+    for (size_t i = 0; i < filenames.size(); i++) {\n+      if (ParseFileName(filenames[i], &number, &type) && type == kTableFile) {\n+        ASSERT_OK(env_->DeleteFile(TableFileName(dbname_, number)));\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n };\n \n TEST(DBTest, Empty) {\n@@ -611,7 +634,7 @@ TEST(DBTest, GetEncountersEmptyLevel) {\n     }\n \n     // Step 4: Wait for compaction to finish\n-    env_->SleepForMicroseconds(1000000);\n+    DelayMilliseconds(1000);\n \n     ASSERT_EQ(NumTableFilesAtLevel(0), 0);\n   } while (ChangeOptions());\n@@ -1295,7 +1318,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_a) {\n   Reopen();\n   Reopen();\n   ASSERT_EQ(\"(a->v)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(a->v)\", Contents());\n }\n \n@@ -1311,7 +1334,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Put(\"\",\"\");\n   Reopen();\n   Put(\"\",\"\");\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   Reopen();\n   Put(\"d\",\"dv\");\n   Reopen();\n@@ -1321,7 +1344,7 @@ TEST(DBTest, L0_CompactionBug_Issue44_b) {\n   Delete(\"b\");\n   Reopen();\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n-  env_->SleepForMicroseconds(1000000);  // Wait for compaction to finish\n+  DelayMilliseconds(1000);  // Wait for compaction to finish\n   ASSERT_EQ(\"(->)(c->cv)\", Contents());\n }\n \n@@ -1506,6 +1529,30 @@ TEST(DBTest, NoSpace) {\n   ASSERT_GE(env_->sleep_counter_.Read(), 5);\n }\n \n+TEST(DBTest, ExponentialBackoff) {\n+  Options options = CurrentOptions();\n+  options.env = env_;\n+  Reopen(&options);\n+\n+  ASSERT_OK(Put(\"foo\", \"v1\"));\n+  ASSERT_EQ(\"v1\", Get(\"foo\"));\n+  Compact(\"a\", \"z\");\n+  env_->non_writable_.Release_Store(env_);  // Force errors for new files\n+  env_->sleep_counter_.Reset();\n+  env_->sleep_time_counter_.Reset();\n+  for (int i = 0; i < 5; i++) {\n+    dbfull()->TEST_CompactRange(2, NULL, NULL);\n+  }\n+  env_->non_writable_.Release_Store(NULL);\n+\n+  // Wait for compaction to finish\n+  DelayMilliseconds(1000);\n+\n+  ASSERT_GE(env_->sleep_counter_.Read(), 5);\n+  ASSERT_LT(env_->sleep_counter_.Read(), 10);\n+  ASSERT_GE(env_->sleep_time_counter_.Read(), 10e6);\n+}\n+\n TEST(DBTest, NonWritableFileSystem) {\n   Options options = CurrentOptions();\n   options.write_buffer_size = 1000;\n@@ -1519,7 +1566,7 @@ TEST(DBTest, NonWritableFileSystem) {\n     fprintf(stderr, \"iter %d; errors %d\\n\", i, errors);\n     if (!Put(\"foo\", big).ok()) {\n       errors++;\n-      env_->SleepForMicroseconds(100000);\n+      DelayMilliseconds(100);\n     }\n   }\n   ASSERT_GT(errors, 0);\n@@ -1567,6 +1614,24 @@ TEST(DBTest, ManifestWriteError) {\n   }\n }\n \n+TEST(DBTest, MissingSSTFile) {\n+  ASSERT_OK(Put(\"foo\", \"bar\"));\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  // Dump the memtable to disk.\n+  dbfull()->TEST_CompactMemTable();\n+  ASSERT_EQ(\"bar\", Get(\"foo\"));\n+\n+  Close();\n+  ASSERT_TRUE(DeleteAnSSTFile());\n+  Options options = CurrentOptions();\n+  options.paranoid_checks = true;\n+  Status s = TryReopen(&options);\n+  ASSERT_TRUE(!s.ok());\n+  ASSERT_TRUE(s.ToString().find(\"issing\") != std::string::npos)\n+      << s.ToString();\n+}\n+\n TEST(DBTest, FilesDeletedAfterCompaction) {\n   ASSERT_OK(Put(\"foo\", \"v2\"));\n   Compact(\"a\", \"z\");\n@@ -1711,13 +1776,13 @@ TEST(DBTest, MultiThreaded) {\n     }\n \n     // Let them run for a while\n-    env_->SleepForMicroseconds(kTestSeconds * 1000000);\n+    DelayMilliseconds(kTestSeconds * 1000);\n \n     // Stop the threads and wait for them to finish\n     mt.stop.Release_Store(&mt);\n     for (int id = 0; id < kNumThreads; id++) {\n       while (mt.thread_done[id].Acquire_Load() == NULL) {\n-        env_->SleepForMicroseconds(100000);\n+        DelayMilliseconds(100);\n       }\n     }\n   } while (ChangeOptions());"
      },
      {
        "sha": "20a7ca44626050c01b7bde718581c663d38f42a9",
        "filename": "src/leveldb/db/dbformat.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/dbformat.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/dbformat.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/dbformat.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -26,7 +26,7 @@ std::string ParsedInternalKey::DebugString() const {\n            (unsigned long long) sequence,\n            int(type));\n   std::string result = \"'\";\n-  result += user_key.ToString();\n+  result += EscapeString(user_key.ToString());\n   result += buf;\n   return result;\n }"
      },
      {
        "sha": "5a26da4728f6a0934f12d37d84e845ef6a00e8af",
        "filename": "src/leveldb/db/filename_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/filename_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/filename_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/filename_test.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -70,7 +70,7 @@ TEST(FileNameTest, Parse) {\n   for (int i = 0; i < sizeof(errors) / sizeof(errors[0]); i++) {\n     std::string f = errors[i];\n     ASSERT_TRUE(!ParseFileName(f, &number, &type)) << f;\n-  };\n+  }\n }\n \n TEST(FileNameTest, Construction) {"
      },
      {
        "sha": "4fd1ddef21011ffb379019b65ce64464ad8ca54c",
        "filename": "src/leveldb/db/version_set.cc",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/version_set.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/db/version_set.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -1331,14 +1331,19 @@ Compaction* VersionSet::CompactRange(\n   }\n \n   // Avoid compacting too much in one shot in case the range is large.\n-  const uint64_t limit = MaxFileSizeForLevel(level);\n-  uint64_t total = 0;\n-  for (size_t i = 0; i < inputs.size(); i++) {\n-    uint64_t s = inputs[i]->file_size;\n-    total += s;\n-    if (total >= limit) {\n-      inputs.resize(i + 1);\n-      break;\n+  // But we cannot do this for level-0 since level-0 files can overlap\n+  // and we must not pick one file and drop another older file if the\n+  // two files overlap.\n+  if (level > 0) {\n+    const uint64_t limit = MaxFileSizeForLevel(level);\n+    uint64_t total = 0;\n+    for (size_t i = 0; i < inputs.size(); i++) {\n+      uint64_t s = inputs[i]->file_size;\n+      total += s;\n+      if (total >= limit) {\n+        inputs.resize(i + 1);\n+        break;\n+      }\n     }\n   }\n "
      },
      {
        "sha": "da8b11a8c05b054ef231ba34d88ef51ec1e55eb0",
        "filename": "src/leveldb/include/leveldb/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/include/leveldb/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/include/leveldb/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/db.h?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -14,7 +14,7 @@ namespace leveldb {\n \n // Update Makefile if you change these\n static const int kMajorVersion = 1;\n-static const int kMinorVersion = 9;\n+static const int kMinorVersion = 12;\n \n struct Options;\n struct ReadOptions;"
      },
      {
        "sha": "1b0f060a19caabfbb5dffe8ef87f1d90536d44f2",
        "filename": "src/leveldb/port/port_win.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/port/port_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/port/port_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_win.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -109,12 +109,10 @@ void CondVar::Signal() {\n \n void CondVar::SignalAll() {\n   wait_mtx_.Lock();\n-  for(long i = 0; i < waiting_; ++i) {\n-    ::ReleaseSemaphore(sem1_, 1, NULL);\n-    while(waiting_ > 0) {\n-      --waiting_;\n-      ::WaitForSingleObject(sem2_, INFINITE);\n-    }\n+  ::ReleaseSemaphore(sem1_, waiting_, NULL);\n+  while(waiting_ > 0) {\n+    --waiting_;\n+    ::WaitForSingleObject(sem2_, INFINITE);\n   }\n   wait_mtx_.Unlock();\n }"
      },
      {
        "sha": "79ea9d9ee5fe8af28eb07f48b9534c2979fe842a",
        "filename": "src/leveldb/table/block.cc",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/table/block.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/table/block.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/block.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -16,7 +16,7 @@\n namespace leveldb {\n \n inline uint32_t Block::NumRestarts() const {\n-  assert(size_ >= 2*sizeof(uint32_t));\n+  assert(size_ >= sizeof(uint32_t));\n   return DecodeFixed32(data_ + size_ - sizeof(uint32_t));\n }\n \n@@ -27,11 +27,12 @@ Block::Block(const BlockContents& contents)\n   if (size_ < sizeof(uint32_t)) {\n     size_ = 0;  // Error marker\n   } else {\n-    restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n-    if (restart_offset_ > size_ - sizeof(uint32_t)) {\n-      // The size is too small for NumRestarts() and therefore\n-      // restart_offset_ wrapped around.\n+    size_t max_restarts_allowed = (size_-sizeof(uint32_t)) / sizeof(uint32_t);\n+    if (NumRestarts() > max_restarts_allowed) {\n+      // The size is too small for NumRestarts()\n       size_ = 0;\n+    } else {\n+      restart_offset_ = size_ - (1 + NumRestarts()) * sizeof(uint32_t);\n     }\n   }\n }\n@@ -253,7 +254,7 @@ class Block::Iter : public Iterator {\n };\n \n Iterator* Block::NewIterator(const Comparator* cmp) {\n-  if (size_ < 2*sizeof(uint32_t)) {\n+  if (size_ < sizeof(uint32_t)) {\n     return NewErrorIterator(Status::Corruption(\"bad block contents\"));\n   }\n   const uint32_t num_restarts = NumRestarts();"
      },
      {
        "sha": "71c1756e5f440c38c3e712e0359886fe22d6d5a0",
        "filename": "src/leveldb/table/table.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/table/table.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/table/table.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -228,7 +228,6 @@ Status Table::InternalGet(const ReadOptions& options, const Slice& k,\n         !filter->KeyMayMatch(handle.offset(), k)) {\n       // Not found\n     } else {\n-      Slice handle = iiter->value();\n       Iterator* block_iter = BlockReader(this, options, iiter->value());\n       block_iter->Seek(k);\n       if (block_iter->Valid()) {"
      },
      {
        "sha": "c723bf84cf5f55fae9b56ab324ebfdc83ba9be52",
        "filename": "src/leveldb/table/table_test.cc",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/table/table_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/table/table_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table_test.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -644,6 +644,36 @@ class Harness {\n   Constructor* constructor_;\n };\n \n+// Test empty table/block.\n+TEST(Harness, Empty) {\n+  for (int i = 0; i < kNumTestArgs; i++) {\n+    Init(kTestArgList[i]);\n+    Random rnd(test::RandomSeed() + 1);\n+    Test(&rnd);\n+  }\n+}\n+\n+// Special test for a block with no restart entries.  The C++ leveldb\n+// code never generates such blocks, but the Java version of leveldb\n+// seems to.\n+TEST(Harness, ZeroRestartPointsInBlock) {\n+  char data[sizeof(uint32_t)];\n+  memset(data, 0, sizeof(data));\n+  BlockContents contents;\n+  contents.data = Slice(data, sizeof(data));\n+  contents.cachable = false;\n+  contents.heap_allocated = false;\n+  Block block(contents);\n+  Iterator* iter = block.NewIterator(BytewiseComparator());\n+  iter->SeekToFirst();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->SeekToLast();\n+  ASSERT_TRUE(!iter->Valid());\n+  iter->Seek(\"foo\");\n+  ASSERT_TRUE(!iter->Valid());\n+  delete iter;\n+}\n+\n // Test the empty key\n TEST(Harness, SimpleEmptyKey) {\n   for (int i = 0; i < kNumTestArgs; i++) {"
      },
      {
        "sha": "8b197bc02a98e639dc72a58bd7de59603ab77cbc",
        "filename": "src/leveldb/util/cache.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/cache.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/cache.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/cache.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -116,7 +116,6 @@ class HandleTable {\n       LRUHandle* h = list_[i];\n       while (h != NULL) {\n         LRUHandle* next = h->next_hash;\n-        Slice key = h->key();\n         uint32_t hash = h->hash;\n         LRUHandle** ptr = &new_list[hash & (new_length - 1)];\n         h->next_hash = *ptr;\n@@ -160,7 +159,6 @@ class LRUCache {\n   // mutex_ protects the following state.\n   port::Mutex mutex_;\n   size_t usage_;\n-  uint64_t last_id_;\n \n   // Dummy head of LRU list.\n   // lru.prev is newest entry, lru.next is oldest entry.\n@@ -170,8 +168,7 @@ class LRUCache {\n };\n \n LRUCache::LRUCache()\n-    : usage_(0),\n-      last_id_(0) {\n+    : usage_(0) {\n   // Make empty circular linked list\n   lru_.next = &lru_;\n   lru_.prev = &lru_;"
      },
      {
        "sha": "fb5726e33521d01270b481b93d9c5490c6f0b53f",
        "filename": "src/leveldb/util/coding_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/coding_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/coding_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/coding_test.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -109,7 +109,7 @@ TEST(Coding, Varint64) {\n     values.push_back(power);\n     values.push_back(power-1);\n     values.push_back(power+1);\n-  };\n+  }\n \n   std::string s;\n   for (int i = 0; i < values.size(); i++) {"
      },
      {
        "sha": "6cc319242e3b7d77ca62a3619d92112e680d6bf1",
        "filename": "src/leveldb/util/comparator.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/comparator.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/comparator.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/comparator.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -66,15 +66,15 @@ class BytewiseComparatorImpl : public Comparator {\n };\n }  // namespace\n \n-static port::OnceType once = LEVELDB_ONCE_INIT;\n+static port::OnceType once_comparator = LEVELDB_ONCE_INIT;\n static const Comparator* bytewise;\n \n static void InitModule() {\n   bytewise = new BytewiseComparatorImpl;\n }\n \n const Comparator* BytewiseComparator() {\n-  port::InitOnce(&once, InitModule);\n+  port::InitOnce(&once_comparator, InitModule);\n   return bytewise;\n }\n "
      },
      {
        "sha": "6badfdc230f52f235ec7f7523e213dba9d628451",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -386,7 +386,7 @@ class PosixEnv : public Env {\n   PosixEnv();\n   virtual ~PosixEnv() {\n     fprintf(stderr, \"Destroying Env::Default()\\n\");\n-    exit(1);\n+    abort();\n   }\n \n   virtual Status NewSequentialFile(const std::string& fname,\n@@ -467,23 +467,23 @@ class PosixEnv : public Env {\n       result = IOError(fname, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status CreateDir(const std::string& name) {\n     Status result;\n     if (mkdir(name.c_str(), 0755) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status DeleteDir(const std::string& name) {\n     Status result;\n     if (rmdir(name.c_str()) != 0) {\n       result = IOError(name, errno);\n     }\n     return result;\n-  };\n+  }\n \n   virtual Status GetFileSize(const std::string& fname, uint64_t* size) {\n     Status s;\n@@ -589,7 +589,7 @@ class PosixEnv : public Env {\n   void PthreadCall(const char* label, int result) {\n     if (result != 0) {\n       fprintf(stderr, \"pthread %s: %s\\n\", label, strerror(result));\n-      exit(1);\n+      abort();\n     }\n   }\n "
      },
      {
        "sha": "07cf022060d41ea2139a438886d268a92cb586af",
        "filename": "src/leveldb/util/hash.cc",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/hash.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb1da62318f5a7f6e3ec31cdc02178a5445870e4/src/leveldb/util/hash.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/hash.cc?ref=fb1da62318f5a7f6e3ec31cdc02178a5445870e4",
        "patch": "@@ -6,6 +6,13 @@\n #include \"util/coding.h\"\n #include \"util/hash.h\"\n \n+// The FALLTHROUGH_INTENDED macro can be used to annotate implicit fall-through\n+// between switch labels. The real definition should be provided externally.\n+// This one is a fallback version for unsupported compilers.\n+#ifndef FALLTHROUGH_INTENDED\n+#define FALLTHROUGH_INTENDED do { } while (0)\n+#endif\n+\n namespace leveldb {\n \n uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n@@ -28,10 +35,10 @@ uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n   switch (limit - data) {\n     case 3:\n       h += data[2] << 16;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 2:\n       h += data[1] << 8;\n-      // fall through\n+      FALLTHROUGH_INTENDED;\n     case 1:\n       h += data[0];\n       h *= m;"
      }
    ]
  }
]