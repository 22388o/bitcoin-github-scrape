petertodd,2017-09-28T19:12:15Z,"A potential problem with supporting `-addressstyle=segwit` w/ Bech32 on day zero is it may confuse people into thinking segwit *needs* the new address format. OTOH, if we don't, it probably makes the P2SH adoption hell more likely.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-332935671,332935671,
flack,2017-09-28T21:08:38Z,maybe it should be renamed to `-addressstyle=bech32`? ,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-332964633,332964633,
meshcollider,2017-09-29T11:57:57Z,Needs rebase after #11167 merge but that'll make it clearer what's new here to review :+1:,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-333107294,333107294,
sipa,2017-09-29T18:36:44Z,Rebased after #11167 merge.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-333205001,333205001,
gmaxwell,2017-10-11T20:02:48Z,"Regarding petertodd's concern, I think something like flack's suggestion would address it.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-335931037,335931037,
Sjors,2017-10-20T12:28:22Z,"The wallet probably needs to be able to generate both `p2sh` and `bech32` addresses, depending on who the user needs to communicate the address to. In fact, the UI might need to display both at the same time. \n\nFor example, I might send an email requesting payment to a `bech32` address, and telling the recipient to use the `p2sh` address only if their wallet doesn't support the new format. A b",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-338192534,338192534,
sipa,2017-10-20T12:30:32Z,@Sjors There is an RPC argument added to address-creating RPCs to override the default.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-338193000,338193000,
Sjors,2017-10-20T12:40:49Z,"@sipa I see, perhaps `-addressstyle` should be `-addressstyledefault` instead to make that more clear?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-338195284,338195284,
MarcoFalke,2017-11-07T22:18:57Z,rebase_me_pls,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-342642285,342642285,
sipa,2017-11-08T00:19:42Z,rebased_it,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-342668198,342668198,
invariant,2017-11-11T16:19:53Z,"What is the reasoning for having `addressstyle` and `changestyle` as separate options; that is, what is the envisaged use case for setting these defaults to different things?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-343675953,343675953,
martin-lizner,2017-11-12T15:55:31Z,"Milestone 0.15.2 was removed, does it mean it goes straight to 0.16 only? Thanks.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-343746694,343746694,
MarcoFalke,2017-11-12T16:42:56Z,"Yes\n\nOn Nov 12, 2017 10:55, ""Martin Lízner"" <notifications@github.com> wrote:\n\n> Milestone 0.15.2 was removed, does it mean it goes straight to 0.16 only?\n> Thanks.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-343746694>,\n> or mute the thread\n> <https://github.com/no",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-343749957,343749957,
martin-lizner,2017-11-12T18:45:21Z,"Does this mean we will have segwit in GUI and bech32 in around May? If that so, would you pls comment on why 0.15.2 milestone was dropped?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-343757936,343757936,
MarcoFalke,2017-11-13T01:27:52Z,"The 0.15.2 milestone would only delay segwit wallet. The current plan is to\nget the segwit wallet out as soon as it is ready with the next major\nrelease.\n\nOn Sun, Nov 12, 2017 at 6:45 PM, Martin Lízner <notifications@github.com>\nwrote:\n\n> Does this mean we will have segwit in GUI and bech32 in around May? If\n> that so, would you pls comment on why 0.15.2 milestone was dropped?\n>\n> —\n> Y",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-343786495,343786495,
sipa,2017-11-16T19:41:11Z,"I've made a writeup about wallet design in the future, and how SegWit support now interacts with it: https://gist.github.com/sipa/125cfa1615946d0c3f3eec2ad7f250a2\n\nThe PR currently only implements solution (I.1) from the document, but I'm happy to reconsider.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-345039809,345039809,
sipa,2017-11-18T03:38:46Z,"@invariant You may wish to use bech32 as change style as soon as possible (for cost) or once it's used sufficiently on the network (for privacy), even if your recipients don't support bech32 yet.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-345415518,345415518,
sipa,2017-11-18T03:59:50Z,Rebased and addressed my review comments.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-345416387,345416387,
sipa,2017-11-18T20:15:45Z,"> I assume the goal of this PR isn't to change the GUI, but merely to make sure the QT doesn't break?\n\nExactly. In particular, we'll want bech32 error detection at some point when entering such addresses, but that's not a priority now.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-345468205,345468205,
sipa,2017-11-19T21:16:26Z,"Addressed some comments, and added solution 3a from my writeup.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-345550244,345550244,
sipa,2017-11-19T21:17:50Z,"@MeshCollider The commits are in the right order, it's just GitHub that shows them by author date rather than dependency ordering.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-345550330,345550330,
promag,2017-11-23T15:30:18Z,Tested ACK d0c76c3.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-346646997,346646997,
theuni,2017-11-28T02:35:29Z,utACK after the current comments are addressed. Nice work :),https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-347394871,347394871,
sipa,2017-12-01T00:41:05Z,"Addressed comments, and made some significant changes to the command line argument handling.\n\nI also added a commit that explicitly adds the P2SH-P2WPKH script for keypool keys that are seen used on the network. This means that downgrading after restoring a backup that needed recovery is supported.\n\nI would very much like to hear opinions about testing this. It's nontrivial as the complica",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-348367131,348367131,
Sjors,2017-12-01T12:27:00Z,"I suggest updating the description of this pull request with a list of all known scenario's that need to be tested. Under each item, note if there any automated tests that cover it.\n\nIs it a safe assumption that testing on testnet is sufficient? Can anyone think of mainnet specific potential bug related to a change like this?\n\nCan we also assume no support for pre-release wallets after v0.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-348482391,348482391,
sipa,2017-12-06T06:04:12Z,"@Sjors Thanks for the UI testing! I can't really explain what you're seeing, but note that sends-to-self always behave somewhat as an edge-case (as they're both from-self and to-self). Have a look at the `address_type.py` test I added, which acts entirely as expected, with 16 combinations of sends/receives between address/change types.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-349544345,349544345,
instagibbs,2017-12-06T15:45:36Z,"@Sjors ""That transaction is not confirmed yet. I would expect this balance to be pending.""\n\nSelf-sent coins(including change) are considered `IsTrusted`, which will account for these as ""Available"" and immediately spendable.\n\nNot sure why it wasn't showing as Available however. Testing here shows it there.\n\nWhat type of p2sh address was it? nested-p2wpkh?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-349679353,349679353,
instagibbs,2017-12-06T15:53:47Z,"I'm getting non-determinstic balance behavior. I have done a couple self-sends of the largest coin, seemed fine.\n\nIf I stop and restart, sometimes it shows in confirmed balance(-cli) or ""Available""(qt), sometimes it doesn't. Repeating this process results in it either existing or not.\n\nI checked my debug.log, the transactions in the mempool are being accepted in either case.\n\nGeneratin",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-349681967,349681967,
Sjors,2017-12-06T15:54:09Z,"@instagibbs the p2sh generated if you launch without any arguments, so P2SH-P2WPKH. Where are `IsTrusted` and ""Available"" determined? At the wallet level, or is QT doing (some of) that?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-349682089,349682089,
instagibbs,2017-12-06T17:06:47Z,"looks like we were chasing our tails, unrelated to this PR https://github.com/bitcoin/bitcoin/pull/11839",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-349707242,349707242,
TheBlueMatt,2017-12-07T23:14:39Z,"Oh, obviously needs some docs that describe how to find lost funds if you downgrade and then upgrade again (rescan from segwit activation height). Though do we want some explicit RPC for this or so that rescans from max(oldest key time, segwit activation height)?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-350123945,350123945,
sipa,2017-12-11T07:26:56Z,"Pushed a change addressing:\n* Several of @TheBlueMatt and @ryanofsky's comments.\n* Rewrote the `validateaddress` changes; behaviour of P2SH and P2WSH is now much more consistent and documented (both will return `embedded` if possible). Also added a `pubkeys` field (as a replacement for the confusing `addresses` field for multisig, which remains supported for P2SH).\n* Renamed several function",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-350642408,350642408,
Sjors,2017-12-11T11:31:17Z,The balance issues I found disappear when I cherry-pick #11839.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-350698571,350698571,
instagibbs,2017-12-12T16:33:42Z,"~~not a request for feature/change, just a note: `addmultisigaddress` creates a legacy p2sh no matter what argument is set. This means `addwitnessaddress` is still required for now at least in the case of witness multisig.~~\n\nNot sure how I got this wrong, it does do `addresstype` default.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351107035,351107035,
instagibbs,2017-12-12T16:54:24Z,">addmultisigaddress 1 '[""bcrt1qk92l37qy9fvz7pmv88w4m0xz4cqlrag4d5fjxrz79av93mwjh7ssgtkemm""]'\n>bcrt1qk92l37qy9fvz7pmv88w4m0xz4cqlrag4d5fjxrz79av93mwjh7ssgtkemm does not refer to a key (code -1)\n\n~~While I understand the reasoning behind not allowing it(moving towards always providing a pubkey), the error is pretty vague and confusing if the internals are not understood.~~ I was attempting to ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351113548,351113548,
instagibbs,2017-12-12T17:00:42Z,light tACK 0934bf61fbaeb1ea2bf4bd4a99c687a60c9fbf04,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351115650,351115650,
sipa,2017-12-12T19:17:10Z,Rebased after merge of #11854.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351161505,351161505,
sipa,2017-12-13T01:55:39Z,"Updated to address some of @ryanofsky's comments: a7661006b82484969506da49ffc695d2a5bea3d2 -> 50038c2cc7d6456a6725e120b0a11537585e2415.\n",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351256637,351256637,
sipa,2017-12-14T01:50:02Z,Added in more comments in response to @ryanofsky's review. 50038c2cc7d6456a6725e120b0a11537585e2415 -> 23bbb033f6551b826ab63cdb57980e483ccecf92.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351583330,351583330,
jnewbery,2017-12-14T22:29:42Z,"@TheBlueMatt asked me to review the integration tests part of this. I got as far as the new address_types test, but I found it really difficult to read because of the nested for loops with unobvious index names. I ended up rewriting it completely here: https://github.com/jnewbery/bitcoin/tree/pr11403.1\n\n@sipa - can you take a look. Feel free to take the commit entirely or pick out bits that yo",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-351855906,351855906,
sipa,2017-12-15T19:45:50Z,"@ryanofsky Thanks a lot for your extensive review and agree with most things on the TODO list, though I prefer not expanding the scope in this PR right now.\n\n@jnewbery Thanks, that looks easier to read indeed. I've squashed it into my commit, and made some more changes.\n\nAll: I noticed that when selecting `-addresstype=p2sh`, `addmultisigaddress` would produce P2SH-multisig addresses rathe",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352095070,352095070,
laanwj,2017-12-16T08:37:24Z,"Fails the windows tests currently on travis:\n```\nRunning A272 test cases...\n\nssertion failed!\n\nProgram: Z:\home\travis\build\bitcoin\bitcoin\build\bitcoin-x86_64-w64-mingw32\src\test\test_bitcoin.exe\nFile: wallet/wallet.cpp, Line 4202\n\nExpression: false\n```\n",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352169821,352169821,
FelixWeis,2017-12-17T15:58:30Z,What's the rationale for not using `bech32` by default for `-changetype`? They are never user-facing so (short term) compatibility isn't an issue and the sender will enjoy full segwit savings for successive spending operations.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352265566,352265566,
Ulmo,2017-12-17T17:50:48Z,"I've never used GIT for specific patches, and pretty new to GIT overall.  How do I get a merge patchball from GIT to apply this change to test it?  I just did ""git pull origin master"", built, and started ""bitcoin-qt -addresstype bech32"", and Console's ""getnewaddress"" gave me ""16ESqniuMJ3eXViX7MiHWSBb2iGN4PcScS"", which is clearly not a Bech32 address.\n\nI did ""make check"" and everything passed.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352272903,352272903,
flack,2017-12-17T18:06:49Z,@Ulmo try https://gist.github.com/piscisaureus/3342247 (or Stackoverflow if it doesn't work),https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352274028,352274028,
hsjoberg,2017-12-17T19:00:58Z,"@Ulmo manually doing\n```\ngit remote add sipa https://github.com/sipa/bitcoin\ngit fetch sipa 201709_segwitwallet2\ngit checkout sipa/201709_segwitwallet2 \n```\n\nShould work too.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352277235,352277235,
laanwj,2017-12-17T19:05:17Z,"Tested ACK e721efb\n\n> Should work too.\n\nAlternatively (assuming remote `origin` is pointed to `bitcoin/bitcoin`):\n```\ngit fetch origin pull/11403/head\ngit checkout FETCH_HEAD\n```",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352277484,352277484,
jonasschnelli,2017-12-17T19:24:25Z,"Tested ACK e721efb2bd3687176c0e93e1c5a9e9e31f76b083\n* Compiled and run on different environments\n* Extensively tested on OSX\n\nGitian build:\nhttps://bitcoin.jonasschnelli.ch/build/422 (failed linux build is unrelated)\n",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352278840,352278840,
hsjoberg,2017-12-17T19:46:59Z,"Tested ACK e721efb.\n\nCompiles and runs fine on Linux x86_64 Debian (Mint).\nAre there any outstanding issues that need help/testing?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352280329,352280329,
TheBlueMatt,2017-12-17T20:35:38Z,bip68-sequence.py is broken on this branch (+ the travis assert failures),https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352283400,352283400,
juscamarena,2017-12-17T21:04:41Z,"@FelixWeis if it's default I'm not sure every service can receive from bech32, looking at coinbase. I'd prefer it, but it I'm wondering how many other services are as broken as coinbase. https://twitter.com/karel_3d/status/939974972163940353\n\nI guess it's on them to fix it and conform to standard behavior anyway. There is also privacy related issues with that.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352285423,352285423,
TheBlueMatt,2017-12-17T21:06:48Z,"@FelixWeis the rationale is to not reveal which output of yours is change by default as it would massively harm privacy by default.\n\n@juscamarena it shouldnt matter for change, for default address types, indeed, it would be premature to use bech32 by default, but for change we can do whatever we want.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352285560,352285560,
hsjoberg,2017-12-17T21:08:41Z,"@juscamarena Old nodes wouldn't be able to trust non-standard transactions, and so they won't show up before they get confirmed. That's why the payment processor part of Coinbase and BitPay had problems.\n\nI think this applies to P2WPKH in P2SH too, but perhaps someone else can confirm that.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352285670,352285670,
sturles,2017-12-17T21:39:04Z,"Testing this now.\n\nMy address generation script, which already converts to P2SH-P2WPKH and P2WPKH (bech32) as alternatives to users, was confused by the new default behaviour.  The P2SH address can't be converted to bech32 using addwitnessaddress.  Not a bug, but new behaviour which may come as a surprise to some.\n\nThe embedded address in P2SH, as reported by validateaddress P2SH-address, ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352287609,352287609,
sipa,2017-12-17T21:49:50Z,"@sturles You can also generate a bech32 address directly by passing the  `addresstype` parameter to `getnewaddress`. Long term, I don't think we'll be maintaining the possibility of coverting one address type to another.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352288367,352288367,
hsjoberg,2017-12-17T22:21:45Z,"Pull request to fix the bip68-sequence.py test open for @sipa's branch.\n(I'm not sure if this the correct routine for adding commits to another persons pull request.)\n\nAlso, this PR let's the user set the address type through the configuration file -- it would be nice if this could be exposed from the Qt GUI as well.\nIf there's any interest, I have code ready for that which could be looked",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352290607,352290607,
Ulmo,2017-12-17T23:45:08Z,"Thanks for the git help.  Using sipa/201709_segwitwallet2, I get the following startup error (latest macOS):\n\n$ bitcoin-qt -addresstype bech32\nPaymentServer::ipcSendCommandLine: Payment request file does not exist:  ""bech32""\n\nAnd I get the following response inside the console:\n\n15:39:47   getnewaddress\n15:39:58  16ESqniuMJ3eXViX7MiHWSBb2iGN4PcScS\n\nI'll poke around and see what",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352295812,352295812,
sipa,2017-12-17T23:51:29Z,@Ulmo You need `-addresstype=bech32` (note the equals sign).,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352296174,352296174,
Ulmo,2017-12-18T00:52:11Z,"Sipa, thanks.  That worked, of course.  This time I used pull/11403/head, and started bitcoin-qt as `bitcoin-qt -addresstype=bech32`, and everything related to bech32 ""seems to work"".  Detail:\n```\ngetnewaddress:  bc1qt0qk2gpdgsh0zyefmy52pwvnd2tk7aafgju6xg\n```\nTrezor beta, Ledger, & Gemini still don't seem to support bech32, giving address errors.\nElectrum 3.0.1 supports it ... let's try ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352300583,352300583,
Sjors,2017-12-18T10:09:03Z,"@FelixWeis @hsjoberg I added a todo to my ever growing list to add a check box in the UI where the user can specifically ask for a  native SegWit `bech32` address. It would be a separate PR. Happy to review if someone else is already doing this.\n\nIn addition, there could be a UI setting that toggles to `bech32` as a default, including change address, and then flipping the meaning of the above ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352381612,352381612,
Sjors,2017-12-18T10:39:07Z,"@Ulmo I don't see ""Unable to decode output address"" for your transaction [92cf...](https://blockchain.info/tx/92cf6424a9648ce30b3cba8edb0a122cc2210168547eb06915d7aa8961cb0440). I've seen it work correctly when I tried a few weeks ago. Maybe it was a glitch?\n\nNote however that you can't click on a bech32 address to see all transactions. As far as I know no block explorer supports that yet; I'm ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352389135,352389135,
hsjoberg,2017-12-18T12:43:20Z,">  I added a todo to my ever growing list to add a check box in the UI where the user can specifically ask for a native SegWit bech32 address. It would be a separate PR. Happy to review if someone else is already doing this.\n\n@Sjors Right, I have code ready for a GUI setting to decide the address type to use. It's directly tied to the `addresstype` parameter and thus it's radio buttons and not",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352415511,352415511,
Sjors,2017-12-18T13:18:51Z,"@hsjoberg ah, [yes it does](https://btc.com/bc1qt0qk2gpdgsh0zyefmy52pwvnd2tk7aafgju6xg).\n\nCan you make a WIP PR that uses this branch as its base? That way it's kept separate yet is easy to review. Once this PR is merged, you switch the base to master.\n\nA radio button for the global GUI setting makes sense to me. I would only use a check box for overriding the setting in the receive screen",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352423026,352423026,
hsjoberg,2017-12-18T14:24:56Z,"@Sjors I'll put it up as soon as I can. \n\n> Having to restart every time\n\nInterestingly enough, with a GUI-setting, it works without restarting if we directly change `g_address_type` global, I'm not sure if this is good practice though.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352439567,352439567,
sipa,2017-12-19T08:26:09Z,"@TheBlueMatt I've addressed several of your comments. However, for a few of them I think you're missing that `AddCScript` does not automatically make a script/output watched. It simply teaches the signing logic how to sign for such a P2SH/P2WSH script if it would appear somewhere. Having it there *may* result in considering something ours (but generally only if we also have the actual keys availab",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-352672871,352672871,
ecdsa,2017-12-21T09:27:17Z,"@sipa sorry to intervene late, but ""All wallet private and public keys can be used for any type of address."" sounds like a terrible idea. Even if you plan to add address-dependent derivation path later, once the harm is done, it will be too late to go back.\n\n`importprivkey` will need to lookup several output scripts per key. This will break compatibility with Electrum, and with various other w",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353301840,353301840,
NLNicoo,2017-12-21T09:55:58Z,"Tiny meta suggestion, I think this PR can use [0.16.0](https://github.com/bitcoin/bitcoin/milestone/30) milestone tag?",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353308700,353308700,
laanwj,2017-12-21T10:34:23Z,"> @sipa is there anything in this PR that could be merged to master separately (and first)?\n\nSame question - is there a way we can help move things forward, reduce this patch stack, by merging some parts? It looks like some smaller UI things are still being discussed while some of the base work was reviewed and found to be OK a long time ago. Blocking the entire thing for so long is not produc",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353317338,353317338,
sipa,2017-12-21T10:45:32Z,"> sorry to intervene late, but ""All wallet private and public keys can be used for any type of address."" sounds like a terrible idea. Even if you plan to add address-dependent derivation path later, once the harm is done, it will be too late to go back.\n\nI agree, it's a terrible situation to be in, but unfortunately the harm is already done. Right now, the IsMine logic effectively works by see",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353319637,353319637,
ajtowns,2017-12-21T18:38:36Z,"Cursory ACK ff295c33d7e26293229a05f4039a13fc747efcc0\n\nI don't see any obvious problems with the code, but that doesn't necessarily mean a lot. Setting p2wpkh-nested-in-p2sh as the default address type makes sense, and setting the change type to be the same likewise makes sense. The strategy outlined in the gist makes sense (despite being complicated and continuing the maintenance burden) and a",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353425210,353425210,
SomberNight,2017-12-21T20:50:22Z,"> Please consider using one address per private key, and a private key export format that includes information about the type of output script used with the key. This will avoid false negatives, and it will free new wallets from being forced to implement deprecated address types.\n\nThe critical part of this, that I would like to emphasize, would be to have the private key export format include ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353454555,353454555,
stevenroose,2017-12-23T10:00:03Z,"What is the argumentation here for using `legacy` instead of `p2pkh`? Legacy is an ambiguous term. At some point in the past, `p2pk`could have been considered legacy while using addresses was the new way. In the future, SegWit/bech32 could be considered legacy over a next generation addressing convention.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353717636,353717636,
sipa,2017-12-23T10:08:24Z,"@stevenroose Good point, it's not perfectly unambiguous. However, ""legacy"" does not mean just P2PKH. For multisig it means P2SH-multisig.\n\nArguably ""p2sh"" is also not perfect, as for multisig it refers to P2SH-P2WSH-multisig.\n\nUnambiguous would be using the names ""no-witness"" (instead of legacy), ""p2sh-witness-v0"" (instead of p2sh), and ""native-witness-v0"" (instead of bech32), but those aren't",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353718008,353718008,
flack,2017-12-23T11:43:17Z,"maybe call it something like `pre-segwit`? Not especially elegant, but it would probably age better than `legacy`",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353721884,353721884,
stevenroose,2017-12-23T12:42:43Z,"The two important factors are where the keys are taken from in the BIP32\nhierarchy and how the address is formatted visibly.\n\np2sh-p2wsh-multisig is indeed a bit more complex than what you want to\naddress in a single parameter..\n\nMaybe legacy is a good name when referring to the ""gen1"" addressing and we\ncan see what gen2 brings.\n\nTl;dr can't directly come up with a better naming idea.\n\n",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353724238,353724238,
ajtowns,2017-12-23T13:07:41Z,"If v1 scripts will introduce new address types, maybe using ""bech32-v0"" and ""p2sh-v0"" now is a good idea? At least ""p2sh-v0"" is suggestive of witness support, unlike plain ""p2sh"" which sounds like a purely legacy mode.\n\nNaming the format after bips could also work: maybe ""bip16"", ""bip141-v0"", ""bip173-v0"" -- except bip16 isn't really accurate, and none of those are very intuitive. ""pre-witness""",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353725343,353725343,
sipa,2017-12-23T17:31:27Z,"@ryanofsky @TheBlueMatt Updated `address_types.py` to also test `getrawchangeaddress`, and the `address_type` parameter to both RPCs.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353738418,353738418,
juscamarena,2017-12-25T00:38:11Z,"Tested ACK 10bd7d6c20028309b45d44d8f50188649a00825e\n \nTested on OSX on bitcoin testnet with an older HD Wallet, the various change addresses and address style changes worked fine.\n\nCurrently testing a linux build irresponsibly live on mainnet on one of my nodes with low volume outgoing transactions and it works great so far. Extensively tested on testnet before doing so.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-353809911,353809911,
achow101,2018-01-02T23:19:43Z,"Regarding what to call the address types, this comment came up elsewhere about the `p2sh` type:\n\n> That's nice but it's ambiguous tho' ; ""P2SH"" doesn't tell you what script is inside (segwit, multisig, etc).\n\nI think that it should be slightly more specific to refer to segwit, something like `p2sh-segwit`. That way users will understand that those addresses are segwit addresses too.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-354901608,354901608,
sipa,2018-01-03T13:57:59Z,"Pushed a significant change: 17a7a7255958237b235c7c4104af7d9dd4482c8e -> 06cdb1dadc93b1fb273db3e74095656a1955e63c (squashed, not rebased):\n* Several comments addressing how it's harmless to have additional `CScript`s in the wallet, following comments by @TheBlueMatt.\n* Split up `AddDestinationForKey` into `GetDestinationForKey` (function) and `LearnRelatedScripts` (wallet method) as requested ",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355017652,355017652,
instagibbs,2018-01-03T15:17:33Z,"address_types.py appears to be failing on this assert for a single build:\n`assert_equal(unconf_balances[to_node], to_send * 10 * (2 + n))`",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355037129,355037129,
instagibbs,2018-01-03T15:54:43Z,"@sipa I remembered I had power to kick travis, and did. All good.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355047095,355047095,
sneurlax,2018-01-06T16:54:12Z,"Built, tested, working here.",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355759677,355759677,
ghost,2018-01-07T17:21:46Z,"Built in a Ubuntu VM for Windows. Tested: *creation of p2sh, *creation of bech32 using '-addresstype=bech32'.\n\nIf you create a new wallet using 0.15.0, it adds 1 address to the Receiving tab on creation:\nhttps://i.imgur.com/u0ibz3a.png\nThat is not the case with this branch (both p2sh and addresstype=bech32):\nhttps://i.imgur.com/H78fGtk.png\nI'm not sure whether this change is intended o",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355837804,355837804,
instagibbs,2018-01-07T17:49:33Z,"I believe this is due to a different change. The removal of the default\nkey.\n\nOn Jan 7, 2018 12:22 PM, ""Lauda"" <notifications@github.com> wrote:\n\n> Built in a Ubuntu VM for Windows. Tested: *creation of p2sh, *creation of\n> bech32 using '-addresstype=bech32'.\n>\n> If you create a new wallet using 0.15.0, it adds 1 address to the\n> Receiving tab on creation:\n> https://i.imgur.com/u0ibz3a.p",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355839541,355839541,
ghost,2018-01-07T18:34:44Z,@instagibbs Tested using the 'legacy' option and you are right. ,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355842479,355842479,
gmaxwell,2018-01-08T02:43:12Z,Tested ACK.,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-355875193,355875193,
promag,2018-01-10T22:46:58Z,"![brace-yourself-the-merge-is-coming](https://user-images.githubusercontent.com/3534524/34799540-18b80bfa-f658-11e7-9523-01a0215911e7.jpg)\n",https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-356763236,356763236,
jonasschnelli,2018-01-11T06:56:21Z,Re-Tested ACK b224a47a1,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-356843474,356843474,
tonyalester,2018-01-11T06:58:18Z,ty,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-356843792,356843792,
luke-jr,2018-01-11T20:08:23Z,Post-merge utACK,https://github.com/bitcoin/bitcoin/pull/11403#issuecomment-357046524,357046524,
promag,2017-09-26T08:52:45Z,"In commit *Expose method to find key for a single-key destination*:\n\nUse `boost::apply_visitor` instead?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r140993847,140993847,src/wallet/wallet.cpp
promag,2017-09-26T08:55:24Z,"In commit *Expose method to find key for a single-key destination*:\n\nRecursive call?\n```cpp\n            return GetKeyForDestination(inner_dest);\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r140994498,140994498,src/wallet/wallet.cpp
promag,2017-09-26T09:00:02Z,"In commit *SegWit wallet support*:\n\nRemove?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r140995719,140995719,src/wallet/wallet.cpp
promag,2017-09-26T11:58:03Z,Add init tests (follow up maybe)?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141033697,141033697,src/wallet/init.cpp
promag,2017-09-26T12:00:16Z,Missing default value?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141034121,141034121,src/wallet/rpcwallet.cpp
promag,2017-09-26T12:01:02Z,Fix index `[0]`.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141034255,141034255,src/wallet/rpcwallet.cpp
promag,2017-09-26T12:02:11Z,Missing test for this error.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141034483,141034483,src/wallet/rpcwallet.cpp
promag,2017-09-26T12:02:28Z,Default value?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141034548,141034548,src/wallet/rpcwallet.cpp
promag,2017-09-26T12:03:46Z,Add init tests (follow up maybe)?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141034833,141034833,src/wallet/init.cpp
promag,2017-09-26T12:04:26Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141034981,141034981,src/wallet/rpcwallet.cpp
promag,2017-09-26T12:07:53Z,"Remove `, True` so that default value is tested.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141035708,141035708,test/functional/segwit.py
sipa,2017-09-26T18:06:20Z,"I tried that, but the result is much longer and harder to get right (see below). It's also the wrong approach I think. A visitor is used when you want to handle all possible types - here we specifically only want to support a specific subset of cases (P2PKH, P2WPKH, P2SH-P2WPKH).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141137104,141137104,src/wallet/wallet.cpp
sipa,2017-09-26T18:07:28Z,"It's not that easy, as it could match a superset (for example P2SH-P2PKH), or even invalid things (P2SH-P2SH-P2WPKH?).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141137409,141137409,src/wallet/wallet.cpp
luke-jr,2017-09-26T20:21:36Z,"These should mention the defaults, which likely means refactoring how the ""default"" string is handled.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141172352,141172352,src/wallet/init.cpp
luke-jr,2017-09-26T20:22:30Z,"Default should probably remain legacy until support for newer styles is complete (eg, `import*` RPC)?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141172562,141172562,src/wallet/wallet.cpp
luke-jr,2017-09-26T20:25:56Z,"Seems like it would be better to change the deprecated `""account""` into a JSON Object `options`.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141173466,141173466,src/wallet/rpcwallet.cpp
promag,2017-09-28T09:56:46Z,"Right.\n\nIsn't boost::get kind of expensive? Avoid 2nd call?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141575484,141575484,src/wallet/wallet.cpp
sipa,2017-09-28T10:23:28Z,I'd rather not. This makes the existing tests far more powerful.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141580941,141580941,src/wallet/wallet.cpp
luke-jr,2017-09-28T19:36:44Z,Tests don't need to (and probably shouldn't) rely on defaults...,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141715642,141715642,src/wallet/wallet.cpp
instagibbs,2017-09-29T16:23:36Z,This field needs to be added anywhere it's used in help text for RPC calls. ,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141910029,141910029,src/rpc/misc.cpp
instagibbs,2017-09-29T16:25:13Z,Remove plurals from description.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141910356,141910356,src/wallet/wallet.h
sipa,2017-09-29T18:47:45Z,"Yes and no.\n\nI think that many tests, which are primarily testing things unrelated to addresses, should use the default address type. They don't strictly rely on them, but it's better if they work with either type, and it's certainly easier to not need to change all of them.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141940333,141940333,src/wallet/wallet.cpp
instagibbs,2017-09-29T20:28:13Z,"pedantic nit, but this only supports v0 of each witness version",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141960988,141960988,src/wallet/wallet.cpp
instagibbs,2017-09-29T20:49:11Z,"startup options strings being different than getnewaddress options is a bit odd to me?\n\n'p2sh_p2wpkh' vs `p2sh` etc",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141964928,141964928,src/wallet/rpcwallet.cpp
instagibbs,2017-09-29T20:51:49Z,"No solution off the top of my head, but it makes sense that this would be set per-wallet. If not, could we name it `g_address_style`?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141965443,141965443,src/wallet/wallet.cpp
instagibbs,2017-09-29T20:55:21Z,changestyle needs a test,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141966093,141966093,src/wallet/init.cpp
instagibbs,2017-09-29T20:56:35Z,argument needs a test,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141966363,141966363,src/wallet/rpcwallet.cpp
instagibbs,2017-09-29T20:59:35Z,change seems way out of place here,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141967056,141967056,src/wallet/rpcwallet.cpp
instagibbs,2017-09-29T21:02:18Z,Same suggestion as address_style,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r141967691,141967691,src/wallet/wallet.cpp
kallewoof,2017-10-12T04:38:39Z,"The help for e.g. `getnewaddress` says `""p2wpkh""` etc. One or the other needs to be changed.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r144192744,144192744,src/wallet/wallet.cpp
kallewoof,2017-10-12T04:49:26Z,"I think you want `""getnewaddress ( \""account\"" \""style\"" )\n""`",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r144193626,144193626,src/wallet/rpcwallet.cpp
luke-jr,2017-10-12T05:56:19Z,"This shouldn't just be tacked on the end. Accounts are deprecated. Just replace ""account"" with an options Object.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r144199735,144199735,src/wallet/rpcwallet.cpp
gmaxwell,2017-10-13T19:13:16Z,That would be API breaking for a lot of parties which is at odds with rapid deployment.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r144636061,144636061,src/wallet/rpcwallet.cpp
theuni,2017-10-17T20:02:36Z,"You could instead inherit the ctors from uint160/uint256 to shortcut the construction from ```WitnessV0KeyHash(uint160(foo)``` to ```WitnessV0KeyHash(foo)```:\n```c++\nusing uint160::uint160;\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145239469,145239469,src/script/standard.h
theuni,2017-10-17T20:08:07Z,"You might want to _copy_ the field to the help text rather than _move_ it, though :p\n\n(Use after move here)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145240904,145240904,src/rpc/misc.cpp
theuni,2017-10-17T20:26:40Z,Why dupe this? Helps with existing tooling?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145245638,145245638,src/rpc/misc.cpp
theuni,2017-10-17T21:02:22Z,"imo, it's clearer (and less redundant) to test the result of the assignment:\n```c++\n    if (const CKeyID* ret = boost::get<CKeyID>(&dest)) {\n        return *ret;\n    }\n```\nEdit: That's also the common paradigm for using [std::weak_ptr::lock()](http://en.cppreference.com/w/cpp/memory/weak_ptr/lock)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145255319,145255319,src/wallet/wallet.cpp
theuni,2017-10-17T21:28:51Z,I'm not sure about the sequencing rules here. I'd feel safer with a temporary CScriptID.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145261446,145261446,src/keystore.cpp
theuni,2017-10-17T22:09:59Z,"Can't this pass in nullptr and move out of CWallet? Unless I'm missing something, it's not actually related.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145270452,145270452,src/wallet/wallet.cpp
theuni,2017-10-17T22:18:10Z,"If IsSolvable moves out of CWallet, I believe these can too.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145271944,145271944,src/wallet/wallet.cpp
theuni,2017-10-17T22:30:54Z,"Seems the caller should be responsible for adding this if it's a WitnessV0ScriptHash? Like the others, this doesn't seem like wallet functionality to me.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145274394,145274394,src/wallet/wallet.cpp
flack,2017-11-10T14:09:25Z,"I'm not  native speaker, but ""What style change to use"" seems like broken English to me. Shouldn't it be something like ""Which style of change addresses to use""?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r150243374,150243374,src/wallet/init.cpp
CydeWeys,2017-11-10T21:05:37Z,"Native English speaker here.  Here's how I'd write these two:\n\n""Receiving address type (...)""\n""Change address type (...)""\n\nLegacy/p2sh/bech32 feel like types to me, not styles.  Though at that point you'd have to change the command line parameters as well.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r150337564,150337564,src/wallet/init.cpp
sipa,2017-11-18T00:41:15Z,Will add those later.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820106,151820106,src/wallet/init.cpp
sipa,2017-11-18T00:41:25Z,Will add those later.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820127,151820127,src/wallet/init.cpp
sipa,2017-11-18T00:41:53Z,Added.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820167,151820167,src/wallet/rpcwallet.cpp
sipa,2017-11-18T00:42:09Z,Will add later.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820189,151820189,src/wallet/rpcwallet.cpp
sipa,2017-11-18T00:42:34Z,Added.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820217,151820217,src/wallet/rpcwallet.cpp
sipa,2017-11-18T00:50:07Z,Fixing.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820849,151820849,src/wallet/rpcwallet.cpp
sipa,2017-11-18T00:50:19Z,Will add.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820865,151820865,src/wallet/rpcwallet.cpp
sipa,2017-11-18T00:50:53Z,"I think it's very cheap - look at the tag, and return the argument with a cast.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820901,151820901,src/wallet/wallet.cpp
sipa,2017-11-18T00:51:04Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820911,151820911,src/wallet/wallet.cpp
sipa,2017-11-18T00:51:11Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820922,151820922,test/functional/segwit.py
sipa,2017-11-18T00:51:24Z,Added explanation of defaults.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820936,151820936,src/wallet/init.cpp
sipa,2017-11-18T00:51:35Z,I think that should be done separately.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151820954,151820954,src/wallet/rpcwallet.cpp
sipa,2017-11-18T01:51:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824376,151824376,src/rpc/misc.cpp
sipa,2017-11-18T01:54:36Z,"Fixed. Standardized on 'legacy', 'p2sh', and 'bech32'. It's not entirely accurate, as P2SH is a scriptPubKey type and not its address encoding, but meh - they're probably the most recognizable names.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824518,151824518,src/wallet/rpcwallet.cpp
sipa,2017-11-18T01:56:28Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824578,151824578,src/wallet/rpcwallet.cpp
sipa,2017-11-18T01:57:05Z,"Fixed as a global now, as we don't really have a way to configure it per wallet. Can be revised if there ever is.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824607,151824607,src/wallet/wallet.cpp
sipa,2017-11-18T01:57:17Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824611,151824611,src/wallet/wallet.cpp
sipa,2017-11-18T01:58:07Z,"I've always considered P2WPKH as specifically referring to v0 20-byte witness programs, and P2WSH as v0 32-byte ones. We'll need to come up with even clumsier names later ;)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824643,151824643,src/wallet/wallet.cpp
sipa,2017-11-18T01:59:08Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824692,151824692,src/wallet/rpcwallet.cpp
sipa,2017-11-18T01:59:25Z,"Fixed, I think it's consistent now.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151824702,151824702,src/wallet/wallet.cpp
sipa,2017-11-18T02:08:17Z,"Cool, done.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151825021,151825021,src/script/standard.h
sipa,2017-11-18T02:27:28Z,"Ugh, thanks for pointing that out.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151825641,151825641,src/keystore.cpp
sipa,2017-11-18T02:28:10Z,"Yes, tests that expect to see a `pubkey` field when calling `validateaddress` on the output of `getnewaddress`.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151825660,151825660,src/rpc/misc.cpp
sipa,2017-11-18T03:31:55Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151827221,151827221,src/wallet/wallet.cpp
sipa,2017-11-18T03:32:16Z,Moved to script/signer.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151827229,151827229,src/wallet/wallet.cpp
sipa,2017-11-18T03:33:07Z,"Done. IsSolvable is moved to script/sign, GetDestinationForKey is moved to keystore.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151827247,151827247,src/wallet/wallet.cpp
sipa,2017-11-18T03:37:07Z,"Yes, it's ugly. I don't immediately see a nicer solution though, except for a callback to pass in, or duplicating part of this function just to find the correct program.\n\nNote that if it weren't for the implicitly-know-about-witness-versions-of-keys logic, an equivalent line would be needed in GetDestinationForKey or its callers.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151827322,151827322,src/wallet/wallet.cpp
sipa,2017-11-18T06:09:18Z,"Changed to address_type and change_type, and edited the comment language.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151830086,151830086,src/wallet/init.cpp
Sjors,2017-11-18T13:10:47Z,"Can you add: ""P2WPKH and P2SH-P2WPKH have the same redeem script.""?\n\nIt took me a while to realize that.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151837409,151837409,src/keystore.cpp
Sjors,2017-11-18T13:40:27Z,"Maybe add for redundancy: ""Does not support P2SH and, because multi-sig could result in multiple CKeyID's.""",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151838154,151838154,src/keystore.cpp
Sjors,2017-11-18T14:03:54Z,Would it make sense to default `-changetype` to `bech32` if `-addresstype` is not specified? Or should we leave that for QT (since anyone using the RPC probably knows what they're doing)?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151838468,151838468,src/wallet/init.cpp
sipa,2017-11-18T20:13:01Z,"That's not technically correct. P2WPKH doesn't have a redeemscript at all. However, our current IsMine logic requires the corresponding P2SH-P2WPKH redeemscript to be present in the wallet in order to accept payment even to P2WPKH outputs.\n\nFeel free to suggest better language here.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151845994,151845994,src/keystore.cpp
sipa,2017-11-18T20:13:40Z,I think that's not acceptable for privacy reasons until bech32 is common on the network.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151846058,151846058,src/wallet/init.cpp
flack,2017-11-18T20:30:49Z,"Apologies if this is slightly off-topic, but I can sort of see this comment ending up in an angry reddit post / powerpoint ",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151846476,151846476,test/functional/segwit.py
Sjors,2017-11-18T21:13:57Z,"Privacy is a good point. In that case, wouldn't it be better to use whichever address format is used for the recipient (unless the parameter is set)?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151847884,151847884,src/wallet/init.cpp
Sjors,2017-11-18T21:14:51Z,Your comment is probably a good start.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151848021,151848021,src/keystore.cpp
meshcollider,2017-11-19T01:21:04Z,"Not related to the change in this PR, but the `""pubkey""` should be optional as well because it isn't returned for `Witness*`",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151852032,151852032,src/rpc/misc.cpp
meshcollider,2017-11-19T01:29:06Z,"Or ""Only supports destinations which map to single public keys, i.e. P2PKH, P2WPKH, P2SH-P2WPKH."" for more generality",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151852127,151852127,src/keystore.cpp
meshcollider,2017-11-19T01:47:34Z,Note compressed keys explicitly because all other comments do? Otherwise it could sound like it includes uncompressed keys. Or merge with the p2pkh and p2pk line above in the same way you did below?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151852351,151852351,test/functional/segwit.py
meshcollider,2017-11-19T01:55:25Z,"This part of the test doesn't use `spendable_anytime`, only `spendable_after_addwitnessaddress`, so this change (and one below) could just be deleted completely I believe (unless there is a benefit for readability)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151852442,151852442,test/functional/segwit.py
sipa,2017-11-19T20:18:06Z,"It is returned for P2WPKH and P2SH-P2WPKH, but not for anything that doesn't have a unique pubkey.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151876395,151876395,src/rpc/misc.cpp
sipa,2017-11-19T21:02:07Z,"Then quote the code around it, which uses the language w.r.t. P2PKH and others. It's obviously about outputs we have the private keys for.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151877915,151877915,test/functional/segwit.py
sipa,2017-11-19T21:08:44Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151878171,151878171,src/keystore.cpp
sipa,2017-11-19T21:08:48Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151878173,151878173,src/keystore.cpp
sipa,2017-11-19T21:09:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151878183,151878183,test/functional/segwit.py
sipa,2017-11-19T21:10:33Z,Better: I've added code for testing spendable_anytime and solvable_anytime in these cases.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r151878233,151878233,test/functional/segwit.py
promag,2017-11-20T16:05:12Z,Remove `.get_str()`?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152033827,152033827,src/rpc/misc.cpp
promag,2017-11-20T16:05:22Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152033877,152033877,src/rpc/misc.cpp
promag,2017-11-20T16:08:34Z,Below you use `auto key = ...`. Keep it consistent?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152034843,152034843,src/rpc/misc.cpp
promag,2017-11-20T16:11:43Z,"Remove else?\n```cpp\n\ng_address_type = ParseOutputType(gArgs.GetArg(""-addresstype"", ""default""));\nif (g_address_type == OUTPUT_TYPE_NONE) {\n    return InitError(strprintf(_(""Unknown address type '%s'""), gArgs.GetArg(""-addresstype"")));\n}\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152035884,152035884,src/wallet/init.cpp
promag,2017-11-20T16:12:52Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152036236,152036236,src/wallet/init.cpp
promag,2017-11-20T16:15:02Z,"Mirror argument name:\n```cpp\nOutputType address_type = g_address_type;\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152036916,152036916,src/wallet/rpcwallet.cpp
promag,2017-11-20T16:17:07Z,"Mirror argument name:\n```cpp\nOutputType address_type = g_change_type;\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152037615,152037615,src/wallet/rpcwallet.cpp
promag,2017-11-21T16:27:16Z,`default: ` should be inside `()`.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r152328510,152328510,src/wallet/init.cpp
instagibbs,2017-11-27T18:14:58Z,"I believe this allows the user to put in ""default"", which then resolves to ""P2SH"" no matter what the actual default g_change_type is set to .",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r153278680,153278680,src/wallet/rpcwallet.cpp
instagibbs,2017-11-27T18:15:11Z,"I believe this allows the user to put in ""default"", which then resolves to ""P2SH"" no matter what the actual default `g_address_type` is set to .",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r153278747,153278747,src/wallet/rpcwallet.cpp
theuni,2017-11-28T01:59:11Z,"There's no indication as to what ""-addresstype"" currently is. How about something like:\n```c++\n""... Default (*g_address_type string*) is set by -addresstype.\n""\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r153376955,153376955,src/wallet/rpcwallet.cpp
sipa,2017-12-01T00:53:14Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r154244232,154244232,src/wallet/rpcwallet.cpp
sipa,2017-12-01T00:54:43Z,"Choosing to use `auto` is a balance between clarity (by being explicit) and brevity/flexibility. I don't think using it here would be an improvement, but I added it on the line below (the iterator type was pretty long...).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r154244448,154244448,src/rpc/misc.cpp
sipa,2017-12-01T00:55:42Z,"I'm using 'output type' as the internal name, 'address type' is just used for the global/cmdline.\n\nPart of the reason for that is that I feel using the term 'address' for change is wrong. Addresses are things intended to be the destination of payments. Change outputs are only created and used internally.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r154244562,154244562,src/wallet/rpcwallet.cpp
Sjors,2017-12-01T11:54:43Z,"`-addresstype`, not `-addressstyle`",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r154329194,154329194,src/wallet/init.cpp
Sjors,2017-12-06T15:22:17Z,Doesn't the test framework already give you plenty of mature coins out of the box? cc @jnewbery ,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155266683,155266683,test/functional/address_types.py
Sjors,2017-12-06T15:31:14Z,"Should `getunconfirmedbalance` be the same as what QT displays as balance under ""Pending""? If so, what could explain that the UI shows different numbers despite these tests passing? ",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155269450,155269450,test/functional/address_types.py
ryanofsky,2017-12-06T18:55:33Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r144199735\n\n> This shouldn't just be tacked on the end. Accounts are deprecated. Just replace ""account"" with an options Object.\n\nIn this particular context, account will just be renamed to label, rather than removed entirely. (At least this is what #11536 does.)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155327731,155327731,src/wallet/rpcwallet.cpp
ryanofsky,2017-12-06T19:23:24Z,"> I'm not sure about the sequencing rules here. I'd feel safer with a temporary CScriptID.\n\nFor the record, there should be no issue here. std::move just does an rvalue reference cast to influence template deduction and function overloading. It doesn't actually actually move anything or do anything else at runtime.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155335251,155335251,src/keystore.cpp
afk11,2017-12-06T19:47:04Z,@Sjors setup_clean_chain was set to True in this test https://github.com/bitcoin/bitcoin/pull/11403/files/e2e9ead25fe0ddb364e35f8eabb5a7f937d3973b#diff-e3da38b280555e81d6b794e1117ed0a8R12,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155341414,155341414,test/functional/address_types.py
Sjors,2017-12-06T20:58:41Z,I see. But why? Doesn't that slow down the tests?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155358997,155358997,test/functional/address_types.py
TheBlueMatt,2017-12-07T15:04:41Z,"nit: mention something about what store is actually used for (redeemScript and pubkeyHash->pubkey lookup), as its otherwise confusing why it exists.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155546121,155546121,src/script/sign.h
TheBlueMatt,2017-12-07T15:45:37Z,This seems like we're gonna forget to update these flags in the future. Any reason to not switch to STANDARD_SCRIPT_VERIFY_FLAGS?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155558132,155558132,src/script/sign.cpp
TheBlueMatt,2017-12-07T18:16:30Z,"It kinda really sucks that we use mapKeyMetadata for metadata for both P2SH scripts and pubkeyhash scripts, with a key of CTxDestination which could contain a WitnessV0ScriptHash or WitnessV0KeyHash. It'd be kinda nice to split it and have a mapWatchScriptsMetadata which uses a CScriptID and a mapKeyMetadata which uses a CKeyID, then we'd get nice type-safety to ensure no one breaks this in the fu",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383,155599383,src/rpc/misc.cpp
TheBlueMatt,2017-12-07T18:17:57Z,"This is wrong - it doesn't contain the full validateaddress output, only a subset thereof. eg ismine, iswatchonly, account, hdkeypath, hdmasterkeyid, etc are all always missing. Of course many of those could optionally be missing anyway, which should be added to existing docs, but this just seems highly misleading.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599720,155599720,src/rpc/misc.cpp
TheBlueMatt,2017-12-07T18:47:50Z,"Oh, also, this needs a test.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155607178,155607178,src/rpc/misc.cpp
TheBlueMatt,2017-12-07T18:48:03Z,This should get a test (and should be easy to do).,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155607235,155607235,src/rpc/misc.cpp
TheBlueMatt,2017-12-07T18:49:14Z,"Errr, dont you need to *do* something with with_witness?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155607557,155607557,test/functional/p2p-fullblocktest.py
TheBlueMatt,2017-12-07T18:54:00Z,Seems weird to keep CBlock default as non-witness when changing transaction default? Maybe @MarcoFalke or @jnewbery have an opinion?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155608817,155608817,test/functional/test_framework/messages.py
ryanofsky,2017-12-07T20:14:49Z,"In commit ""Improve witness destination types and use them more""\n\nCould drop `public:` since this is a struct, or `s/struct/class/` since parent is a class (also for `WitnessV0KeyHash`).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155628707,155628707,src/script/standard.h
TheBlueMatt,2017-12-07T22:47:45Z,"The defaults here are a mess - g_address_type is initialized to a constant (OUTPUT_TYPE_P2SH) and not OUTPUT_TYPE_DEFAULT, which would make sense since we want them tied together by default. I think you should default them both to OUTPUT_TYPE_NONE, cause it'd be an error for WalletParameterInteraction to not get run, and then refer to OUTPUT_TYPE_DEFAULT everywhere as the default value, then not h",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155663435,155663435,src/wallet/init.cpp
TheBlueMatt,2017-12-07T22:50:18Z,Shouldnt this really be g_change_type since its not a script that is expected to be expressed anywhere in address form?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155663886,155663886,src/qt/paymentserver.cpp
TheBlueMatt,2017-12-07T22:58:36Z,"Hmm, can we avoid making this a db write if we already have the script in the wallet explicitly somehow?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155665399,155665399,src/wallet/wallet.cpp
TheBlueMatt,2017-12-07T23:01:06Z,"This enforces redeemScript being no larger than 520 bytes, which is somewhat strange. I *think* its fine cause its all checked for at higher (read: RPC) layers, but its something to note that we dont (yet) support larger P2WSH redeemScripts. To do so we probably need to bump wallet minversion to avoid confusing old versions why we have scripts larger than 520 bytes in the wallet.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155665858,155665858,src/wallet/wallet.cpp
TheBlueMatt,2017-12-07T23:11:05Z,Why not check if it was actually affected in segwit form before doing this? We only otherwise AddCScript if we are getting the segwit version of an address.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155667603,155667603,src/wallet/wallet.cpp
ryanofsky,2017-12-08T16:44:36Z,"In commit ""Improve witness destination types and use them more""\n\nShould this inherit from CKeyID instead of uint160?\n\nAlso, would it make sense as a followup to replace `CKeyID` and `CScriptID` in the destination variant with `NonWitnessKeyHash` and `NonWitnessScriptHash` types for better type checking and more consistency between old and new destinations?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155821355,155821355,src/script/standard.h
ryanofsky,2017-12-08T17:04:25Z,"In commit ""Improve witness destination types and use them more"":\n\nShould probably declare this `explicit` for better type checking (also for `WitnessV0KeyHash`).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155825668,155825668,src/script/standard.h
ryanofsky,2017-12-08T19:12:11Z,"https://github.com/bitcoin/bitcoin/pull/11403/files#r155599383\n\n> It kinda really sucks that we use mapKeyMetadata for metadata for both P2SH scripts and pubkeyhash scripts\n\nI addressed this in #11854. It does conflict with this PR but the changes are easy to reconcile, so there's not much dependency, and no need to change anything here I think.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155852506,155852506,src/rpc/misc.cpp
ryanofsky,2017-12-08T20:01:10Z,"In commit ""Implicitly know about P2WPKH redeemscripts""\n\nSeems like you could use GetScriptForDestination here like you do in CWallet::AddRelatedScripts? Or is there a reason why it is better there but not here?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155863094,155863094,src/keystore.cpp
ryanofsky,2017-12-08T20:25:19Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nSince we know the CPubKey (and are already looking it up in the next line), could this just call the CKeyStore::AddRelatedKeyScripts() method instead of requiring a new CWallet::AddRelatedScripts() method? It would be helpful to have an explanatory comment here whatever the answer is. And maybe the names of the methods could",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155868135,155868135,src/wallet/wallet.cpp
ryanofsky,2017-12-08T20:33:47Z,"In commit ""SegWit wallet support""\n\nSeems like this could be a standalone method rather than a wallet or keystore method. Should probably at least make it static, if not moved out of the wallet entirely.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155869762,155869762,src/wallet/wallet.cpp
ryanofsky,2017-12-08T20:35:04Z,"In commit ""SegWit wallet support""\n\nCould the comment be expanded to say what else this is checking for besides the uncompressed key? The key is available so obviously that could be checked directly. And the code above in GetAllDestinationsForKey is actually just calling IsCompressed(), so it'd be good to say why doing that isn't sufficient here.\n\n",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155870014,155870014,src/wallet/wallet.cpp
ryanofsky,2017-12-08T22:19:45Z,"In commit ""SegWit wallet support""\n\nAs brought up previously https://github.com/bitcoin/bitcoin/pull/11403#discussion_r145274394, this seems really ugly. Having GetDestinationForKey/GetDestinationForScript methods write to the wallet database when all you would expect them to do is get the address of a key or script doesn't seem safe or untuitive.\n\nIt seems like it would be better if the ca",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155889073,155889073,src/wallet/wallet.cpp
sipa,2017-12-11T07:07:13Z,"Good point. Fixed, and added a comment.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995479,155995479,src/qt/paymentserver.cpp
sipa,2017-12-11T07:07:35Z,This is now tested in `address_types.py`.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995543,155995543,src/rpc/misc.cpp
sipa,2017-12-11T07:08:47Z,"Fixed. I've also expanded the `validateaddress` output for P2WSH, simplified the implementation, and added comments.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995687,155995687,src/rpc/misc.cpp
sipa,2017-12-11T07:09:08Z,Let's improve that outside of this PR.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995721,155995721,src/rpc/misc.cpp
sipa,2017-12-11T07:09:25Z,"Fixed, and added a static_assert.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995748,155995748,src/script/sign.cpp
sipa,2017-12-11T07:09:32Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995760,155995760,src/script/sign.h
sipa,2017-12-11T07:09:51Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995794,155995794,src/wallet/wallet.cpp
sipa,2017-12-11T07:10:29Z,"That seems hard, as we don't distinguish scripts that were added explicitly and implicitly.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995875,155995875,src/wallet/wallet.cpp
sipa,2017-12-11T07:10:39Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995887,155995887,src/wallet/wallet.cpp
sipa,2017-12-11T07:10:48Z,"Good point, fixed.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995906,155995906,test/functional/p2p-fullblocktest.py
sipa,2017-12-11T07:11:34Z,"I have no strong opinions, but it was a bit of a pain to make this work. So feel free to suggest a more consistent approach if you find one that works, but I'd rather not try to do this again.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155995997,155995997,test/functional/test_framework/messages.py
sipa,2017-12-11T07:11:48Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996023,155996023,src/keystore.cpp
sipa,2017-12-11T07:12:03Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996051,155996051,src/script/standard.h
sipa,2017-12-11T07:12:10Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996067,155996067,src/script/standard.h
sipa,2017-12-11T07:14:10Z,"I tried making it inherit from CKeyID, but it's not trivial at least, so I'd rather do it separately.\n\nAgreed with replacing CKeyID and CScriptID in the variant. Though perhaps for performance reasons we may want a specialized variant implementation for this (boost::variant needs dynamic allocations) anyway. Let's consider that for later.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996285,155996285,src/script/standard.h
sipa,2017-12-11T07:15:31Z,"I've renamed the CKeyStore::AddRelatedKeyScripts functions to CKeyStore::ImplicitlyLearnRelatedKeyScripts. It's not usable because that function only adds the script in memory. The point of AddRelatedScript is to make them explicit (in wallet.dat), and it will only be called on keys whose related scripts are already implicitly in the keystore.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996437,155996437,src/wallet/wallet.cpp
sipa,2017-12-11T07:16:07Z,"Made it a standalone wallet function. I'm leaving it as part of the wallet, as the choice about what types of addresses to support is largely a wallet one.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996505,155996505,src/wallet/wallet.cpp
sipa,2017-12-11T07:17:02Z,"Checking for an uncompressed key is all it does. It's just a very succint way of doing so, which also happens to be very foolproof for future similar changes.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155996619,155996619,src/wallet/wallet.cpp
sipa,2017-12-11T07:20:38Z,"I agree it's ugly, though I think it is temporary (it's not needing in my future design (see writeup), and it's also unnecessary once we drop support for downgrading to pre-implicit-SegWit wallet software - but that needs some thinking about versioning).\n\nSplitting the choice for what to add and what destination to use up seems very inconvenient, though. The necessity of adding depends on the ",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155997108,155997108,src/wallet/wallet.cpp
Sjors,2017-12-11T11:53:44Z,"Maybe replace the comment with, if I understand correctly: ""We'll use the change type here. In the BIP-70 payment protocol the destination for refunds is communicated as an output script, not an address. Therefore we don't need to care about whether the other side understands a particular address type.""",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156052687,156052687,src/qt/paymentserver.cpp
Sjors,2017-12-11T11:56:28Z,"Do we really want to use the change type? I think refund addresses should be treated the same as any receive address, including what type you use for those,and the level of trust placed on unconfirmed funds on those addresses. The latter is probably not an issue here.\n\nIn a BIP44 address hierarchy I would probably use the receive chain for refunds (not applicable here, but to illustrate my poi",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156053242,156053242,src/qt/paymentserver.cpp
Sjors,2017-12-11T12:12:03Z,"`-addressstyle` should be `-addresstype` (I can't see my previous comment about this anymore, so repeating just in case)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156056229,156056229,src/wallet/init.cpp
Sjors,2017-12-11T12:19:45Z,"""i.e."" -> ""e.g."" seems more future-proof.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156057894,156057894,src/wallet/wallet.cpp
Sjors,2017-12-11T12:25:24Z,"Don't forget to remove this, or use `self.log.debug(...)`.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156058923,156058923,test/functional/address_types.py
Sjors,2017-12-11T12:43:38Z,"On my local machine, this line fails with `AssertionError: not(1745.04950480 == 1695.04950480)` (with and without the #11839 patch). Not sure what could explain an off by 50 BTC error.\n\nIt fails when I run the test individually through `test/functional/address_types.py`. It passes when I run it as part of the full test suite `test/functional/test_runner.py `, but that in turn causes the (unmod",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156062380,156062380,test/functional/address_types.py
Sjors,2017-12-11T13:27:37Z,Off topic: why is this needed?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156071685,156071685,test/functional/address_types.py
sipa,2017-12-11T23:57:19Z,I've reformulated it.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156237039,156237039,src/qt/paymentserver.cpp
sipa,2017-12-11T23:58:12Z,I have elaborated on why.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156237160,156237160,src/qt/paymentserver.cpp
sipa,2017-12-12T00:01:25Z,That's not what I mean. It's not just an example - it's a clarification about why that check is needed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156237694,156237694,src/wallet/wallet.cpp
sipa,2017-12-12T00:01:57Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156237760,156237760,src/wallet/init.cpp
sipa,2017-12-12T00:30:23Z,Otherwise the nodes will think they're in IBD and not sync transactions.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156241848,156241848,test/functional/address_types.py
sipa,2017-12-12T00:30:31Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156241862,156241862,test/functional/address_types.py
sipa,2017-12-12T00:32:54Z,I can't reproduce your problem. Are you sure you're not running against an older `bitcoind`?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156242225,156242225,test/functional/address_types.py
Sjors,2017-12-12T07:54:06Z,"I still got the errors after a `make clean` and `make`. Not sure if there's anything else I can run to make sure tests run from a blank slate. I did notice earlier that if you run two tests in parallel in separate tabs, things get really weird.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156291031,156291031,test/functional/address_types.py
Sjors,2017-12-12T08:01:42Z,TIL `make clean` doesn't erase `test/cache`. That was probably it. I'll let you know if I still get this error.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156292268,156292268,test/functional/address_types.py
Sjors,2017-12-12T08:04:56Z,"So ""i.e."" refers to the reason you need to call `IsSolvable`, not to what `IsSolvable` does? Maybe change the comment to ""Check if the resulting program doesn't use an uncompressed key""?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156292781,156292781,src/wallet/wallet.cpp
Sjors,2017-12-12T13:23:39Z,"That wasn't it. It was #11876 (unrelated to this PR, again...).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156363525,156363525,test/functional/address_types.py
ryanofsky,2017-12-12T18:06:53Z,"In commit ""Abstract out IsSolvable from Witnessifier""\n\ns/does need keys/does not need private keys/?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156448698,156448698,src/script/sign.h
ryanofsky,2017-12-12T18:46:59Z,"In commit ""Extend validateaddress information for P2SH-embedded witness""\n\nThis seems like it is duplicating code in ExtractDestinations. Is there a reason that can't be reused here?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156459433,156459433,src/rpc/misc.cpp
ryanofsky,2017-12-12T18:51:22Z,"In commit ""Extend validateaddress information for P2SH-embedded witness""\n\nList of included fields is confusing. Could comment characterize which type of fields are included and which fields aren't?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156460591,156460591,src/rpc/misc.cpp
ryanofsky,2017-12-12T19:26:52Z,"In commit ""Implicitly know about P2WPKH redeemscripts""\n\nCould you add `assert(mapKeys.count(pubkey.GetID()) || mapWatchKeys.count(pubkey.GetID())`?\n\nThe need to add implicit scripts is confusing enough that I think it would help to document assumptions and potentially catch bugs in the implementation adding them.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156470429,156470429,src/keystore.cpp
ryanofsky,2017-12-12T19:29:47Z,"In commit ""Implicitly know about P2WPKH redeemscripts""\n\nMaybe add a sentence like:\n\n> ""Implicitly"" refers to fact that scripts are derived automatically from existing keys, and are only stored in memory, not written to disk.\n\nIt might also be worth saying why they aren't written to disk. It's not clear if that would be completely useless in any downgrade scenario or if it just doesn't ",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156471223,156471223,src/keystore.cpp
ryanofsky,2017-12-12T19:57:53Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nVariable duplicates `segwit` above.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156478849,156478849,src/wallet/wallet.cpp
ryanofsky,2017-12-12T19:58:29Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nThis is also computed in the if statement. Maybe declare this earlier and reuse it there.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156479008,156479008,src/wallet/wallet.cpp
ryanofsky,2017-12-12T19:59:29Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nCould you add a comment saying what it means if IsSolvable is false? It seems like that should be an error or maybe never happen.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156479293,156479293,src/wallet/wallet.cpp
ryanofsky,2017-12-12T20:12:04Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nCan this `assert(mapKeys.count(keyid))`?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156482622,156482622,src/wallet/wallet.cpp
ryanofsky,2017-12-12T20:28:23Z,"> That seems hard, as we don't distinguish scripts that were added explicitly and implicitly.\n\nIs there a reason not to distinguish scripts that were added explicitly and implicitly? It seems like it would just require storing `{ CScript script; bool ephemeral; }` in mapScripts. Probably better not to do in this PR, but could this be a good idea for a followup?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156486302,156486302,src/wallet/wallet.cpp
ryanofsky,2017-12-12T21:47:58Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nCan this `assert(mapKeys.count(keyid))`?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156505175,156505175,src/wallet/wallet.cpp
ryanofsky,2017-12-12T21:50:40Z,"In commit ""Support downgrading after recovered keypool witness keys""\n\nNo test seems to fail if this is commented out. Since this is only needed for downgrades it'd be good to have some kind of check to know if it stops working.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156505981,156505981,src/wallet/wallet.cpp
ryanofsky,2017-12-12T21:54:19Z,"In commit ""SegWit wallet support""\n\nNo test seems to fail if this is unset. It'd be good to have a check to know if this stops working.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156506863,156506863,src/wallet/wallet.cpp
ryanofsky,2017-12-12T21:59:48Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156057894\n\n> So ""i.e."" refers to the reason you need to call IsSolvable, not to what IsSolvable does? Maybe change the comment to ""Check if the resulting program doesn't use an uncompressed key""?\n\nFunny, even though I originally mistook ""i.e."" for ""e.g."" when reading the same comment in AddDestinationForKey above (https://github.com",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156508186,156508186,src/wallet/wallet.cpp
TheBlueMatt,2017-12-12T22:07:07Z,"I think its worth trying to figure something out. As it is stuff like listaddressesbyaccount (or, in the future, by labels) will suffer a significant performance regression trying to create DB batches per address, add something thats already there, and then close the batch.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156509855,156509855,src/wallet/wallet.cpp
sipa,2017-12-12T23:18:14Z,I don't think those asserts are correct for encrypted wallets.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156524523,156524523,src/keystore.cpp
sipa,2017-12-13T00:07:30Z,"Yes.\n\nThe short term answer is that ExtractDestinations doesn't actually report destination(s) of a script, but reports either (a) the destination a script corresponds to or (b) the destinations corresponding to the P2PKH versions of the public keys involved in a multisig transactions. In this branch, we don't want public-keys-encoded-as-destinations but the actual public keys.\n\nThe longer",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156532471,156532471,src/rpc/misc.cpp
sipa,2017-12-13T00:46:33Z,"No, that wouldn't work for encrypted wallets.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156537997,156537997,src/wallet/wallet.cpp
sipa,2017-12-13T01:43:58Z,Adding with a slight modification.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545566,156545566,src/keystore.cpp
sipa,2017-12-13T01:44:17Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545614,156545614,src/rpc/misc.cpp
sipa,2017-12-13T01:44:24Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545627,156545627,src/script/sign.h
sipa,2017-12-13T01:44:34Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545646,156545646,src/wallet/wallet.cpp
sipa,2017-12-13T01:44:40Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545661,156545661,src/wallet/wallet.cpp
sipa,2017-12-13T01:44:54Z,"I removed the check, and added a comment why it's not needed.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545692,156545692,src/wallet/wallet.cpp
sipa,2017-12-13T01:47:08Z,"Yes, that's inevitable.\n\nWe have two conditions under which we add the script explicitly (when generating a new address, and when noticing an IsMine keypool address on the network). Both of these always already have the script added implicitly, so there is no change in behaviour from the explicit add. It's just there for compatibility with downgrading to earlier software, which we can't test f",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156545989,156545989,src/wallet/wallet.cpp
sipa,2017-12-13T01:47:58Z,"No, that wouldn't work for encrypted wallets (which use mapCryptedKeys).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156546074,156546074,src/wallet/wallet.cpp
sipa,2017-12-13T01:48:15Z,"Likewise, this is untestable because it only affects downgrading.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156546118,156546118,src/wallet/wallet.cpp
ryanofsky,2017-12-13T20:48:26Z,"In commit ""Abstract out IsSolvable from Witnessifier""\n\nWhen would ProduceSignature be expected to succeed but VerifyScript be expected to fail? Asking because I don't know the answer, but also because I think it would be helpful to have a comment here that says whether VerifyScript here changes the logic or is just defensive.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156778208,156778208,src/script/sign.cpp
ryanofsky,2017-12-13T20:51:15Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156459433\n\nThanks, really appreciate the clarification (and TODOs).\n\nBy the same logic, would you also want to deprecate the ""addresses"" field since it is also using addresses to refer to keys that are not destinations?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156778880,156778880,src/rpc/misc.cpp
ryanofsky,2017-12-13T20:54:07Z,"In commit ""Extend validateaddress information for P2SH-embedded witness""\n\nJust FYI, but could pushKV() instead of push_back(Pair()) throughout this function.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156779570,156779570,src/rpc/misc.cpp
ryanofsky,2017-12-13T21:30:28Z,"In commit ""Extend validateaddress information for P2SH-embedded witness""\n\nWhy mirror this one field from the embedded object into the parent object and not others? E.g. would it make sense to mirror the ""pubkeys"" field as well, since it seems to be the equivalent of ""pubkey"" for multisig scripts?\n\nAlso is it worth noting in validateaddress documentation that this will contain pubkey from e",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156790854,156790854,src/rpc/misc.cpp
ryanofsky,2017-12-13T22:33:48Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156470429\n\n> I don't think those asserts are correct for encrypted wallets.\n\nFollowing seems to work (if you also move the two `ImplicitlyLearnRelatedKeyScripts()` calls one line down in `CBasicKeyStore::AddKeyPubKey` and `CCryptoKeyStore::AddCryptedKey`):\n```c++\nassert(HaveKey(pubkey.GetID()) || mapWatchKeys.count(pubkey.GetID(",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156805781,156805781,src/keystore.cpp
ryanofsky,2017-12-13T22:53:37Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156506863\n\n>  It's just there for compatibility with downgrading to earlier software, which we can't test for in the current test framework AFAIK.\n\nI see the difficulty, and maybe this should be saved for a followup, but I could imagine testing this by subclassing `CWallet` in a unit test, overriding `AddCScript`, and ensuring the c",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156809759,156809759,src/wallet/wallet.cpp
ryanofsky,2017-12-13T23:02:44Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156505175\n\n> No, that wouldn't work for encrypted wallets.\n\nI think `assert(HaveKey(keyid))` should work.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156811636,156811636,src/wallet/wallet.cpp
sipa,2017-12-14T01:24:37Z,Added.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832524,156832524,src/keystore.cpp
sipa,2017-12-14T01:24:50Z,Added a comment about that too.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832545,156832545,src/rpc/misc.cpp
sipa,2017-12-14T01:25:07Z,Added. ,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832572,156832572,src/wallet/wallet.cpp
sipa,2017-12-14T01:25:42Z,"Yes, right - you can do a unit test for this; it's only end-to-end testing that's hard.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832642,156832642,src/wallet/wallet.cpp
sipa,2017-12-14T01:26:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832679,156832679,src/rpc/misc.cpp
sipa,2017-12-14T01:28:15Z,"Added a comment, and in the RPC documentation.\n\nThe reason is simply to not silently break backward compatibility with the expected ability to call `validateaddress(getnewaddress())['pubkey']`. That concern doesn't exist for 'pubkeys'.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832977,156832977,src/rpc/misc.cpp
sipa,2017-12-14T01:33:38Z,"It's just defense now, as `ProduceSignature` already calls `VerifyScript` with the exact same arguments. I guess we could get rid of it, but it feels much safer this way.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156833634,156833634,src/script/sign.cpp
ryanofsky,2017-12-14T16:32:41Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156832545\n\nMaybe add a sentence like ""The addresses field is problematic because it confuses keys and destination addresses, using addresses to refer to multisig keys that should not be treated like destinations.""",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156994464,156994464,src/rpc/misc.cpp
ryanofsky,2017-12-14T16:56:59Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r156778208\n\n> It's just defense now\n\nCould you add a comment like ""VerifyScript check is just defensive, and should never fail."" I was pretty confused by this code and thought I might be missing something about the way ProduceSignature worked.\n",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157001582,157001582,src/script/sign.cpp
sipa,2017-12-15T19:43:18Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157284429,157284429,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T20:45:58Z,"nit: the indentation here is wrong, should get an additional two spaces.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157379341,157379341,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T21:02:56Z,technically optional for WitnessUnknown-type addresses.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157379791,157379791,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T21:04:30Z,"s/only if \""isscript\"" is true/only if \""isscript\"" is true and the wallet knows what the redeemScript/. There's a few more of these, I dunno if you want to bother specifying everything that specifically or just focus on #10583.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157379827,157379827,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T22:19:05Z,"(not a regression, but might as well fix): Missing witness_version, witness_program.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157381826,157381826,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T22:19:25Z,"Will conflict with #11545. Seems strange to blindly cast here either way, even though we always did this in ExtractDestinations.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157381833,157381833,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T22:30:28Z,"I would not put this so strongly. The only thing really wrong with referring to public keys by their base58 address is that we want to split wallet out from other subsystems, ie #10583 implies this is the right direction.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157382183,157382183,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T22:34:08Z,"No? This is included if script is anything standard with a key and iswitness is false, not just multisig.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157382293,157382293,src/rpc/misc.cpp
TheBlueMatt,2017-12-17T22:44:50Z,"Need some kind of corresponding erase in RemoveWatchOnly otherwise removal doesn't work properly. Not clear how to fix this but I think blind removal is probably better than not removing at all. Given the issue still pending at https://github.com/bitcoin/bitcoin/pull/11403#discussion_r155665399, I think we're gonna have to have some kind of marker for ""was implicitly added"".",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157382629,157382629,src/keystore.cpp
TheBlueMatt,2017-12-17T23:10:33Z,"Ugh, this sucks. We return a pubkey, so could end up adding for g_address_type and then getting used as g_change_type. Given this function is *only* used by GetAccountAddress in rpcwallet (which turns it into an address anyway), can you refactor a bit to make this return an account *address* instead?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157383354,157383354,src/wallet/wallet.cpp
TheBlueMatt,2017-12-17T23:19:17Z,"This is ever so slightly confusing, maybe skip the FormatOutputType part and just say ""default is whatever is set for -addresstype"".",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157383584,157383584,src/wallet/init.cpp
TheBlueMatt,2017-12-17T23:29:55Z,"This seems much too agressive - I dont think we should be using assert(false) for cases of ""well, the UI is gonna be very confused cause the enum -> string conversion failed"".",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157383933,157383933,src/wallet/wallet.cpp
TheBlueMatt,2017-12-17T23:33:38Z,"I believe this wholly prevents you from getting a segwit address for addmultisigaddress if no all the keys are (at least watch only) in your wallet? Needs a test for this issue, probably.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157384030,157384030,src/wallet/wallet.cpp
TheBlueMatt,2017-12-17T23:39:38Z,"If I'm reading this correctly, if you import with importpubkey you can downgrade and you'll still get the segwit watchonly, but not if you do an importprivkey? This seems strange, but either way the behavior should be documented in the help text of both importprivkey and importpubkey at least until 0.17 (or in release notes).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157384169,157384169,src/wallet/rpcdump.cpp
TheBlueMatt,2017-12-17T23:47:33Z,"This is not sufficient? What if you have two keys in your pool, in order, A and B, then B gets used as a segwit address on the chain first, and then A...you'd only add B to your watch scripts?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157384375,157384375,src/wallet/wallet.cpp
TheBlueMatt,2017-12-17T23:50:42Z,"Hmm, if I'm reading this correctly we technically could get here with an uncompressed keyid. Obviously this isn't the right place to check for that, but we should probably do *something* to handle it better (some big logprints, etc). Also need a test for this case, I'd think (make sure we dont consider it as valid balance, etc).",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157384452,157384452,src/wallet/wallet.cpp
sipa,2017-12-18T04:00:31Z,"In what scenario does a stale CScript result in incorrect watch-only behaviour?\n\nWatch-only is supposed to be distinct from the normal ismine/solvability logic.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157397750,157397750,src/keystore.cpp
sipa,2017-12-18T04:01:20Z,No problem addressing this if #11545 is merged first.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157397808,157397808,src/rpc/misc.cpp
sipa,2017-12-18T04:03:11Z,Will reformulate.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157397910,157397910,src/rpc/misc.cpp
sipa,2017-12-18T04:03:39Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157397935,157397935,src/rpc/misc.cpp
sipa,2017-12-18T04:04:47Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157398022,157398022,src/rpc/misc.cpp
sipa,2017-12-18T04:09:32Z,Will fix. ,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157398308,157398308,src/rpc/misc.cpp
sipa,2017-12-18T04:12:03Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157398462,157398462,src/rpc/misc.cpp
sipa,2017-12-18T04:12:15Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157398480,157398480,src/rpc/misc.cpp
sipa,2017-12-18T04:24:57Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157399192,157399192,src/wallet/init.cpp
sipa,2017-12-18T04:27:47Z,I don't understand.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157399366,157399366,src/wallet/rpcdump.cpp
sipa,2017-12-18T04:42:55Z,Will do.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157400324,157400324,src/wallet/wallet.cpp
sipa,2017-12-18T04:51:38Z,The keystore implicitly knows about all keys' corresponding redeemscripts. This function call is not needed except for downgrading to old software after recovery.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157400897,157400897,src/wallet/wallet.cpp
sipa,2017-12-18T04:52:59Z,"Well it should be impossible that `g_address_type` or `g_change_type` are unset, so if this assert triggers, there is a serious bug.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157401001,157401001,src/wallet/wallet.cpp
sipa,2017-12-18T04:53:28Z,"You just need to know the script.\n\nAgree on adding a test.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157401041,157401041,src/wallet/wallet.cpp
laanwj,2017-12-18T13:15:10Z,nit: `-addresstype=<type>` to make it clear that this option takes a value,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157480601,157480601,src/wallet/init.cpp
sipa,2017-12-19T08:13:46Z,Adding a test to address_types for this.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157686246,157686246,src/wallet/wallet.cpp
sipa,2017-12-19T08:15:14Z,"I believe it's impossible, but it's certainly not trivial to see - I agree. However, if this code would ever run for an uncompressed key, it's *already* too late, as we're already considering the output to be ours.\n\nNote that just having an uncompressed key's corresponding CScript in our CKeyStore is not enough to make us treat P2SH-P2WPKH or P2WPKH scriptPubKeys to it as ours.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157686476,157686476,src/wallet/wallet.cpp
instagibbs,2017-12-27T19:12:49Z,doesn't seem changed?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r158856867,158856867,src/wallet/rpcwallet.cpp
Talkless,2017-12-28T07:37:28Z,"I would suggest to use `type.empty()` instead, no need to call string comparison fn. Generated code is much better.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r158907686,158907686,src/wallet/wallet.cpp
sipa,2017-12-28T11:58:01Z,I fixed it and changed it back in response to a comment by @TheBlueMatt. ,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r158934040,158934040,src/wallet/rpcwallet.cpp
sipa,2017-12-28T12:06:38Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r158934926,158934926,src/wallet/wallet.cpp
promag,2017-12-29T01:29:34Z,"> should never fail\n\nSounds like an assert:\n```cpp\nif (!ProduceSignature(creator, script, sigs)) return false;\nassert(VerifyScript(sigs.scriptSig, script, &sigs.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker()));\nreturn true;\n```",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159017200,159017200,src/script/sign.cpp
promag,2017-12-29T01:33:54Z,"In commit ""[refactor] GetAccountPubKey -> GetAccountDestination""\n\nNit, could also rename `GetAccountAddress` to `GetAccountDestination`? (only 3 calls)",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159017402,159017402,src/wallet/rpcwallet.cpp
promag,2017-12-29T01:54:33Z,"In commit ""Extend validateaddress information for P2SH-embedded witness""\n\nNit, tag this comment as NOTE?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159018376,159018376,src/script/standard.h
promag,2017-12-29T02:17:30Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159019268,159019268,src/rpc/misc.cpp
promag,2017-12-29T02:17:35Z,Missing test.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159019271,159019271,src/rpc/misc.cpp
promag,2017-12-29T02:24:24Z,Same as https://github.com/bitcoin/bitcoin/pull/11403/files#r159020401.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159019545,159019545,src/rpc/misc.cpp
promag,2017-12-29T02:36:19Z,"Should use same format as others?\n```cpp\n            ""2. \""address_type\""   (string, optional, default="" + FormatOutputType(g_address_type) + "") The address type to use...\n```\nNit, drop command line argument hint, IMO.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159019973,159019973,src/wallet/rpcwallet.cpp
promag,2017-12-29T02:39:54Z,"In commit ""SegWit wallet support""\n\nNit, remove 2nd newline.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159020124,159020124,src/wallet/wallet.cpp
promag,2017-12-29T02:46:23Z,Could add `if (include_addresses) a.push_back(...);`,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159020401,159020401,src/rpc/misc.cpp
sipa,2017-12-29T16:34:41Z,"Why? `embedded` should always be reported, it's not obsolete like `addresses`.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159080283,159080283,src/rpc/misc.cpp
sipa,2017-12-29T16:35:21Z,Why?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159080363,159080363,src/rpc/misc.cpp
promag,2017-12-29T16:58:54Z,Because `a` is only used if `include_addresses`? Or am I missing something?,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159082687,159082687,src/rpc/misc.cpp
ryanofsky,2017-12-31T21:34:43Z,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157382629\n\n> Need some kind of corresponding erase in RemoveWatchOnly\n\n@TheBlueMatt can you clarify if you still think this is a bug.\n@sipa it might would be good to have a comment in RemoveWatchOnly saying CScripts are not removed but this should be harmless.\n,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159146912,159146912,src/keystore.cpp
ryanofsky,2017-12-31T21:35:43Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157384169\n\n> If I'm reading this correctly, if you import with importpubkey you can downgrade and you'll still get the segwit watchonly, but not if you do an importprivkey?\n\n@TheBlueMatt can you describe what the documentation should say about this?\n",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159146922,159146922,src/wallet/rpcdump.cpp
ryanofsky,2017-12-31T21:35:51Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r157401001\n\n> it should be impossible that g_address_type or g_change_type are unset, so if this assert triggers, there is a serious bug.\n\nAnother option would be to throw std::logic_error.\n",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159146923,159146923,src/wallet/wallet.cpp
sipa,2018-01-03T12:59:25Z,"Discussed this IRL with @TheBlueMatt. I believe there is no problem here, and I've added comments to clarify that.\n  ",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159419364,159419364,src/keystore.cpp
sipa,2018-01-03T13:00:52Z,I discussed this IRL with @TheBlueMatt; what I believe he meant is that importing private keys does not explicitly add the related scripts for those keys to the wallet (possibly hurting the ability to detect outputs to such keys after downgrade). Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159419578,159419578,src/wallet/rpcdump.cpp
sipa,2018-01-03T13:02:28Z,Discussed this IRL. This was indeed a problem. It's fixed now by moving the call to `MarkReserveKeyAsUsed`.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159419829,159419829,src/wallet/wallet.cpp
sipa,2018-01-03T13:04:29Z,"Thanks, I needed more context to see what you meant. Fixed.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159420109,159420109,src/rpc/misc.cpp
sipa,2018-01-03T13:24:52Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159423796,159423796,src/rpc/misc.cpp
sipa,2018-01-03T13:25:07Z,Fixed (just testing the length/presence).,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159423831,159423831,src/rpc/misc.cpp
sipa,2018-01-03T13:37:10Z,OKAY.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159425986,159425986,src/script/standard.h
sipa,2018-01-03T13:43:15Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159427232,159427232,src/wallet/rpcwallet.cpp
sipa,2018-01-03T13:44:10Z,Done.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159427451,159427451,src/wallet/wallet.cpp
sipa,2018-01-03T13:44:21Z,"Fixed, see elsewhere.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159427508,159427508,src/rpc/misc.cpp
ryanofsky,2018-01-03T15:57:31Z,"In commit ""SegWit wallet support""\n\nSaying this is for ""backwards compatibility"" is a bit vague since that could imply this is needed for new software to load old wallets, but this is really for old software to be able to load new wallets. Maybe change ""earlier wallet versions"" to ""earlier wallet software"" in the next line to clarify.\n\nThe wording in the earlier version of this PR also seem",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159458877,159458877,src/wallet/wallet.h
promag,2018-01-03T16:34:39Z,"> Part of the reason for that is that I feel using the term 'address' for change is wrong\n\nFor that reason rename argument above from `address_type` to `change_type`?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159468527,159468527,src/wallet/rpcwallet.cpp
ryanofsky,2018-01-03T17:11:46Z,"In commit ""SegWit wallet support""\n\nMaybe explain OUTPUT_TYPE_P2SH_SEGWIT default argument in the comment since it seems a little arbitrary. I guess if no OutputType parameter is passed you want to store the p2wpkh script unconditionally.\n  \n  ",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159477330,159477330,src/wallet/wallet.h
jimpo,2018-01-04T03:54:58Z,"If a key receives funds to an alternate address type, should the wallet force a new key?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159577303,159577303,src/wallet/wallet.cpp
sipa,2018-01-05T12:02:41Z,"Perhaps, but is it worth implementing that for accounts (which are deprecated)?",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159862294,159862294,src/wallet/wallet.cpp
ryanofsky,2018-01-05T12:27:52Z,"https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159577303\n\n> Perhaps, but is it worth implementing that for accounts (which are deprecated)?\n\nThis is also used by `getlabeladdress` in #7729. (If #11536 were merged, I think it would clear up some ongoing confusion about accounts and labels). But I think it still probably not worth changing the behavior in this PR, which is already",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159865799,159865799,src/wallet/wallet.cpp
sipa,2018-01-05T16:00:49Z,Rewritten a bit.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159910718,159910718,src/wallet/wallet.h
sipa,2018-01-05T16:01:02Z,Addressed by splitting the function up in two.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159910778,159910778,src/wallet/wallet.h
sipa,2018-01-05T16:01:13Z,Added a TODO.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r159910831,159910831,src/wallet/wallet.cpp
TheBlueMatt,2018-01-08T18:03:26Z,"As discussed on IRC this stuff sucks. If you add a bech32 address to your mapAddressBook it comes back out as 3QJmnh in 0.15 and prior. I'm ok with leaving it after discussion, but needs good documentation.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160212731,160212731,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-01-08T18:48:43Z,Can we please not auto shit like this? It just needlessly makes reading the code impossible to save on typing 4 charachters.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160223175,160223175,src/rpc/misc.cpp
TheBlueMatt,2018-01-08T20:21:03Z,Comment is wrong - we use the AddCScript call to write the redeemscript to disk to support downgrade.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160245838,160245838,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-01-08T23:28:02Z,"Is it safe that we do not do a AddCScript based on a importpubkey? Seems to me that you'd never match the HaveCScript condition if you downgrade so maybe something might break? The final script will still be watched, but it just seems weird to not have the symmetry with importprivkey here.",https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160283543,160283543,src/wallet/rpcdump.cpp
sipa,2018-01-09T23:37:44Z,I believe you're right. Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160555382,160555382,src/wallet/rpcdump.cpp
sipa,2018-01-09T23:37:54Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160555403,160555403,src/wallet/rpcwallet.cpp
sipa,2018-01-09T23:38:55Z,Release notes are for later I think (after importmulti/signmessage/dumpwallet/importwallet have been figured out).,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160555564,160555564,src/wallet/rpcwallet.cpp
stefment,2018-01-11T07:40:53Z,I love you guys.,https://github.com/bitcoin/bitcoin/pull/11403#discussion_r160882192,160882192,src/wallet/rpcwallet.cpp
