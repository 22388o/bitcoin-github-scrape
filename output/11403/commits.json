[
  {
    "sha": "0c8ea6380c9f402ed9777fd015b117ba13125a35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzhlYTYzODBjOWY0MDJlZDk3NzdmZDAxNWIxMTdiYTEzMTI1YTM1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:48:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-03T13:32:00Z"
      },
      "message": "Abstract out IsSolvable from Witnessifier",
      "tree": {
        "sha": "23dc52dd8456f356328dca4de4dc030d19428f43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23dc52dd8456f356328dca4de4dc030d19428f43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c8ea6380c9f402ed9777fd015b117ba13125a35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c8ea6380c9f402ed9777fd015b117ba13125a35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c8ea6380c9f402ed9777fd015b117ba13125a35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c8ea6380c9f402ed9777fd015b117ba13125a35/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22149540f9e74ddff84973d9818ec9a34a533764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22149540f9e74ddff84973d9818ec9a34a533764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22149540f9e74ddff84973d9818ec9a34a533764"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 45,
      "deletions": 30
    },
    "files": [
      {
        "sha": "16a1bc67db5e5487dccd74db59ce141023861837",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=0c8ea6380c9f402ed9777fd015b117ba13125a35",
        "patch": "@@ -49,28 +49,28 @@ static const unsigned int DUST_RELAY_TX_FEE = 3000;\n  * with. However scripts violating these flags may still be present in valid\n  * blocks and we must accept those blocks.\n  */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK |\n-                                                         SCRIPT_VERIFY_MINIMALIF |\n-                                                         SCRIPT_VERIFY_NULLFAIL |\n-                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n-                                                         SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n-                                                         SCRIPT_VERIFY_LOW_S |\n-                                                         SCRIPT_VERIFY_WITNESS |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n-                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n+static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                             SCRIPT_VERIFY_DERSIG |\n+                                                             SCRIPT_VERIFY_STRICTENC |\n+                                                             SCRIPT_VERIFY_MINIMALDATA |\n+                                                             SCRIPT_VERIFY_NULLDUMMY |\n+                                                             SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                             SCRIPT_VERIFY_CLEANSTACK |\n+                                                             SCRIPT_VERIFY_MINIMALIF |\n+                                                             SCRIPT_VERIFY_NULLFAIL |\n+                                                             SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                             SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n+                                                             SCRIPT_VERIFY_LOW_S |\n+                                                             SCRIPT_VERIFY_WITNESS |\n+                                                             SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n+                                                             SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n \n /** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n-                                                           LOCKTIME_MEDIAN_TIME_PAST;\n+static constexpr unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n+                                                               LOCKTIME_MEDIAN_TIME_PAST;\n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFee);\n "
      },
      {
        "sha": "49099bf7b0a4481c81e1cb475d87f8cca6e5d394",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=0c8ea6380c9f402ed9777fd015b117ba13125a35",
        "patch": "@@ -422,3 +422,22 @@ bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const\n     vchSig[6 + 33 + 32] = SIGHASH_ALL;\n     return true;\n }\n+\n+bool IsSolvable(const CKeyStore& store, const CScript& script)\n+{\n+    // This check is to make sure that the script we created can actually be solved for and signed by us\n+    // if we were to have the private keys. This is just to make sure that the script is valid and that,\n+    // if found in a transaction, we would still accept and relay that transaction. In particular,\n+    // it will reject witness outputs that require signing with an uncompressed public key.\n+    DummySignatureCreator creator(&store);\n+    SignatureData sigs;\n+    // Make sure that STANDARD_SCRIPT_VERIFY_FLAGS includes SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, the most\n+    // important property this function is designed to test for.\n+    static_assert(STANDARD_SCRIPT_VERIFY_FLAGS & SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, \"IsSolvable requires standard script flags to include WITNESS_PUBKEYTYPE\");\n+    if (ProduceSignature(creator, script, sigs)) {\n+        // VerifyScript check is just defensive, and should never fail.\n+        assert(VerifyScript(sigs.scriptSig, script, &sigs.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker()));\n+        return true;\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "ef6aa7f311b0d31a360845ef230d29315261676c",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=0c8ea6380c9f402ed9777fd015b117ba13125a35",
        "patch": "@@ -81,4 +81,10 @@ SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn);\n void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data);\n \n+/* Check whether we know how to sign for an output like this, assuming we\n+ * have all private keys. While this function does not need private keys, the passed\n+ * keystore is used to look up public keys and redeemscripts by hash.\n+ * Solvability is unrelated to whether we consider this output to be ours. */\n+bool IsSolvable(const CKeyStore& store, const CScript& script);\n+\n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "760777ca297129c7e0637c7077c7697e6277b0b9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c8ea6380c9f402ed9777fd015b117ba13125a35/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0c8ea6380c9f402ed9777fd015b117ba13125a35",
        "patch": "@@ -1204,12 +1204,7 @@ class Witnessifier : public boost::static_visitor<bool>\n         if (pwallet) {\n             CScript basescript = GetScriptForDestination(keyID);\n             CScript witscript = GetScriptForWitness(basescript);\n-            SignatureData sigs;\n-            // This check is to make sure that the script we created can actually be solved for and signed by us\n-            // if we were to have the private keys. This is just to make sure that the script is valid and that,\n-            // if found in a transaction, we would still accept and relay that transaction.\n-            if (!ProduceSignature(DummySignatureCreator(pwallet), witscript, sigs) ||\n-                !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n+            if (!IsSolvable(*pwallet, witscript)) {\n                 return false;\n             }\n             return ExtractDestination(witscript, result);\n@@ -1228,12 +1223,7 @@ class Witnessifier : public boost::static_visitor<bool>\n                 return true;\n             }\n             CScript witscript = GetScriptForWitness(subscript);\n-            SignatureData sigs;\n-            // This check is to make sure that the script we created can actually be solved for and signed by us\n-            // if we were to have the private keys. This is just to make sure that the script is valid and that,\n-            // if found in a transaction, we would still accept and relay that transaction.\n-            if (!ProduceSignature(DummySignatureCreator(pwallet), witscript, sigs) ||\n-                !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n+            if (!IsSolvable(*pwallet, witscript)) {\n                 return false;\n             }\n             return ExtractDestination(witscript, result);"
      }
    ]
  },
  {
    "sha": "cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmUxOTc0NzBlY2MxZjdiNDg3NzFjNGU3YjY1NGFiMDMwYWY0Yzll",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-18T04:34:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-03T13:42:57Z"
      },
      "message": "[refactor] GetAccount{PubKey,Address} -> GetAccountDestination",
      "tree": {
        "sha": "186ac9f061e40c2b891e154c6bc81bdd74bc4b03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/186ac9f061e40c2b891e154c6bc81bdd74bc4b03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c8ea6380c9f402ed9777fd015b117ba13125a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c8ea6380c9f402ed9777fd015b117ba13125a35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c8ea6380c9f402ed9777fd015b117ba13125a35"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b366992dec2d03ac9075576dd921466e3a29ea9e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
        "patch": "@@ -175,14 +175,14 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n }\n \n \n-CTxDestination GetAccountAddress(CWallet* const pwallet, std::string strAccount, bool bForceNew=false)\n+CTxDestination GetAccountDestination(CWallet* const pwallet, std::string strAccount, bool bForceNew=false)\n {\n-    CPubKey pubKey;\n-    if (!pwallet->GetAccountPubkey(pubKey, strAccount, bForceNew)) {\n+    CTxDestination dest;\n+    if (!pwallet->GetAccountDestination(dest, strAccount, bForceNew)) {\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     }\n \n-    return pubKey.GetID();\n+    return dest;\n }\n \n UniValue getaccountaddress(const JSONRPCRequest& request)\n@@ -214,7 +214,7 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VSTR);\n \n-    ret = EncodeDestination(GetAccountAddress(pwallet, strAccount));\n+    ret = EncodeDestination(GetAccountDestination(pwallet, strAccount));\n     return ret;\n }\n \n@@ -292,8 +292,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n         // Detect when changing the account of an address that is the 'unused current key' of another account:\n         if (pwallet->mapAddressBook.count(dest)) {\n             std::string strOldAccount = pwallet->mapAddressBook[dest].name;\n-            if (dest == GetAccountAddress(pwallet, strOldAccount)) {\n-                GetAccountAddress(pwallet, strOldAccount, true);\n+            if (dest == GetAccountDestination(pwallet, strOldAccount)) {\n+                GetAccountDestination(pwallet, strOldAccount, true);\n             }\n         }\n         pwallet->SetAddressBook(dest, strAccount, \"receive\");"
      },
      {
        "sha": "f73f787259a31dbc24392263598d40b144910ac5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
        "patch": "@@ -821,7 +821,7 @@ bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmoun\n     return true;\n }\n \n-bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew)\n+bool CWallet::GetAccountDestination(CTxDestination &dest, std::string strAccount, bool bForceNew)\n {\n     CWalletDB walletdb(*dbw);\n \n@@ -850,12 +850,13 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n         if (!GetKeyFromPool(account.vchPubKey, false))\n             return false;\n \n-        SetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n+        dest = account.vchPubKey.GetID();\n+        SetAddressBook(dest, strAccount, \"receive\");\n         walletdb.WriteAccount(strAccount, account);\n+    } else {\n+        dest = account.vchPubKey.GetID();\n     }\n \n-    pubKey = account.vchPubKey;\n-\n     return true;\n }\n "
      },
      {
        "sha": "e64ea2534afecd47ba8188630583ce2cf64747e9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbe197470ecc1f7b48771c4e7b654ab030af4c9e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
        "patch": "@@ -923,7 +923,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = nullptr);\n     DBErrors ReorderTransactions();\n     bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\");\n-    bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n+    bool GetAccountDestination(CTxDestination &dest, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);"
      }
    ]
  },
  {
    "sha": "985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODVjNzk1NTJjZWI2YTVmNTgxMmQ0MjFkYzVjODZmYTNiMWNjNDFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:48:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-03T13:43:06Z"
      },
      "message": "Improve witness destination types and use them more",
      "tree": {
        "sha": "682a791059736fe9e74a5314df7536f576e16645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/682a791059736fe9e74a5314df7536f576e16645"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe197470ecc1f7b48771c4e7b654ab030af4c9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbe197470ecc1f7b48771c4e7b654ab030af4c9e"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 19,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0d9f6ae1f9f3b93df5390eff8b7fac3043276632",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
        "patch": "@@ -348,19 +348,14 @@ CScript GetScriptForWitness(const CScript& redeemscript)\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (Solver(redeemscript, typ, vSolutions)) {\n         if (typ == TX_PUBKEY) {\n-            unsigned char h160[20];\n-            CHash160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160);\n-            ret << OP_0 << std::vector<unsigned char>(&h160[0], &h160[20]);\n-            return ret;\n+            return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0].begin(), vSolutions[0].end())));\n         } else if (typ == TX_PUBKEYHASH) {\n-           ret << OP_0 << vSolutions[0];\n-           return ret;\n+            return GetScriptForDestination(WitnessV0KeyHash(vSolutions[0]));\n         }\n     }\n     uint256 hash;\n     CSHA256().Write(&redeemscript[0], redeemscript.size()).Finalize(hash.begin());\n-    ret << OP_0 << ToByteVector(hash);\n-    return ret;\n+    return GetScriptForDestination(WitnessV0ScriptHash(hash));\n }\n \n bool IsValidDestination(const CTxDestination& dest) {"
      },
      {
        "sha": "b1c314fa72c5dd93eae0006f1dc6da8199d7e2f4",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
        "patch": "@@ -73,8 +73,19 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n-struct WitnessV0ScriptHash : public uint256 {};\n-struct WitnessV0KeyHash : public uint160 {};\n+struct WitnessV0ScriptHash : public uint256\n+{\n+    WitnessV0ScriptHash() : uint256() {}\n+    explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}\n+    using uint256::uint256;\n+};\n+\n+struct WitnessV0KeyHash : public uint160\n+{\n+    WitnessV0KeyHash() : uint160() {}\n+    explicit WitnessV0KeyHash(const uint160& hash) : uint160(hash) {}\n+    using uint160::uint160;\n+};\n \n //! CTxDestination subtype to encode any future Witness version\n struct WitnessUnknown\n@@ -164,6 +175,9 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n  * Generate a pay-to-witness script for the given redeem script. If the redeem\n  * script is P2PK or P2PKH, this returns a P2WPKH script, otherwise it returns a\n  * P2WSH script.\n+ *\n+ * TODO: replace calls to GetScriptForWitness with GetScriptForDestination using\n+ * the various witness-specific CTxDestination subtypes.\n  */\n CScript GetScriptForWitness(const CScript& redeemscript);\n "
      }
    ]
  },
  {
    "sha": "30a27dc5b18a3ab82a9768710b24d4e7e9661658",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGEyN2RjNWIxOGEzYWI4MmE5NzY4NzEwYjI0ZDRlN2U5NjYxNjU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:48:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-03T13:43:06Z"
      },
      "message": "Expose method to find key for a single-key destination",
      "tree": {
        "sha": "79f7a63cf8fe7ddc821a529ac7a20e0359184dcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79f7a63cf8fe7ddc821a529ac7a20e0359184dcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30a27dc5b18a3ab82a9768710b24d4e7e9661658",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a27dc5b18a3ab82a9768710b24d4e7e9661658",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30a27dc5b18a3ab82a9768710b24d4e7e9661658",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a27dc5b18a3ab82a9768710b24d4e7e9661658/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/985c79552ceb6a5f5812d421dc5c86fa3b1cc41d"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cbcc6d7ca9a8896034cb3d6b4f3fe0bd110a0033",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a27dc5b18a3ab82a9768710b24d4e7e9661658/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a27dc5b18a3ab82a9768710b24d4e7e9661658/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=30a27dc5b18a3ab82a9768710b24d4e7e9661658",
        "patch": "@@ -136,3 +136,25 @@ bool CBasicKeyStore::HaveWatchOnly() const\n     LOCK(cs_KeyStore);\n     return (!setWatchOnly.empty());\n }\n+\n+CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n+{\n+    // Only supports destinations which map to single public keys, i.e. P2PKH,\n+    // P2WPKH, and P2SH-P2WPKH.\n+    if (auto id = boost::get<CKeyID>(&dest)) {\n+        return *id;\n+    }\n+    if (auto witness_id = boost::get<WitnessV0KeyHash>(&dest)) {\n+        return CKeyID(*witness_id);\n+    }\n+    if (auto script_id = boost::get<CScriptID>(&dest)) {\n+        CScript script;\n+        CTxDestination inner_dest;\n+        if (store.GetCScript(*script_id, script) && ExtractDestination(script, inner_dest)) {\n+            if (auto inner_witness_id = boost::get<WitnessV0KeyHash>(&inner_dest)) {\n+                return CKeyID(*inner_witness_id);\n+            }\n+        }\n+    }\n+    return CKeyID();\n+}"
      },
      {
        "sha": "0f3b5706f21b324a7175933860b5bc604905976c",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a27dc5b18a3ab82a9768710b24d4e7e9661658/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a27dc5b18a3ab82a9768710b24d4e7e9661658/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=30a27dc5b18a3ab82a9768710b24d4e7e9661658",
        "patch": "@@ -78,4 +78,7 @@ class CBasicKeyStore : public CKeyStore\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n \n+/** Return the CKeyID of the key involved in a script (if there is a unique one). */\n+CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest);\n+\n #endif // BITCOIN_KEYSTORE_H"
      }
    ]
  },
  {
    "sha": "3eaa003c888f80207e8ff132f78417ff373ddfa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWFhMDAzYzg4OGY4MDIwN2U4ZmYxMzJmNzg0MTdmZjM3M2RkZmEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:48:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-03T13:43:06Z"
      },
      "message": "Extend validateaddress information for P2SH-embedded witness\n\nThis adds new fields 'pubkeys' and 'embedded' to the RPC's output, and improves the\ndocumentation for previously added 'witness_version' and 'witness_program' fields.",
      "tree": {
        "sha": "f8437dcea4d6de4eafa82891e96309324ea2f124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8437dcea4d6de4eafa82891e96309324ea2f124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eaa003c888f80207e8ff132f78417ff373ddfa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa003c888f80207e8ff132f78417ff373ddfa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaa003c888f80207e8ff132f78417ff373ddfa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa003c888f80207e8ff132f78417ff373ddfa3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30a27dc5b18a3ab82a9768710b24d4e7e9661658",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a27dc5b18a3ab82a9768710b24d4e7e9661658",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30a27dc5b18a3ab82a9768710b24d4e7e9661658"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 66,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f36879f3b188e51a3944387e1a27b0c14e6bc3f2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 24,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa003c888f80207e8ff132f78417ff373ddfa3/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa003c888f80207e8ff132f78417ff373ddfa3/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3eaa003c888f80207e8ff132f78417ff373ddfa3",
        "patch": "@@ -40,6 +40,46 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n \n     explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n \n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj = boost::apply_visitor(*this, embedded);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n@@ -60,19 +100,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         obj.push_back(Pair(\"isscript\", true));\n         obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            std::vector<CTxDestination> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            UniValue a(UniValue::VARR);\n-            for (const CTxDestination& addr : addresses) {\n-                a.push_back(EncodeDestination(addr));\n-            }\n-            obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+            ProcessSubScript(subscript, obj, true);\n         }\n         return obj;\n     }\n@@ -103,7 +131,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n         if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            ProcessSubScript(subscript, obj);\n         }\n         return obj;\n     }\n@@ -131,23 +159,32 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n+            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n+            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n             \"    [\\n\"\n             \"      \\\"address\\\"\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -188,8 +225,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         }\n         if (pwallet) {\n             const CKeyMetadata* meta = nullptr;\n-            if (const CKeyID* key_id = boost::get<CKeyID>(&dest)) {\n-                auto it = pwallet->mapKeyMetadata.find(*key_id);\n+            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+            if (!key_id.IsNull()) {\n+                auto it = pwallet->mapKeyMetadata.find(key_id);\n                 if (it != pwallet->mapKeyMetadata.end()) {\n                     meta = &it->second;\n                 }"
      },
      {
        "sha": "f46d6922597f990244e106f4de39b5e637e314b3",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa003c888f80207e8ff132f78417ff373ddfa3/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa003c888f80207e8ff132f78417ff373ddfa3/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=3eaa003c888f80207e8ff132f78417ff373ddfa3",
        "patch": "@@ -155,6 +155,10 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n  * addressRet is populated with a single value and nRequiredRet is set to 1.\n  * Returns true if successful. Currently does not extract address from\n  * pay-to-witness scripts.\n+ *\n+ * Note: this function confuses destinations (a subset of CScripts that are\n+ * encodable as an address) with key identifiers (of keys involved in a\n+ * CScript), and its use should be phased out.\n  */\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      }
    ]
  },
  {
    "sha": "37c03d3e05713e14458ca2867e442926f165afea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2MwM2QzZTA1NzEzZTE0NDU4Y2EyODY3ZTQ0MjkyNmYxNjVhZmVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:48:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:27:51Z"
      },
      "message": "Support P2WPKH addresses in create/addmultisig",
      "tree": {
        "sha": "edb5f0e059761256a274c4c433c886e7d1c2fac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edb5f0e059761256a274c4c433c886e7d1c2fac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37c03d3e05713e14458ca2867e442926f165afea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c03d3e05713e14458ca2867e442926f165afea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37c03d3e05713e14458ca2867e442926f165afea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c03d3e05713e14458ca2867e442926f165afea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eaa003c888f80207e8ff132f78417ff373ddfa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa003c888f80207e8ff132f78417ff373ddfa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaa003c888f80207e8ff132f78417ff373ddfa3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "826ac9d6bc069f837d137a5539eed1fbbc4f1f7c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c03d3e05713e14458ca2867e442926f165afea/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c03d3e05713e14458ca2867e442926f165afea/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=37c03d3e05713e14458ca2867e442926f165afea",
        "patch": "@@ -280,12 +280,12 @@ CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& pa\n         // Case 1: Bitcoin address and we have full public key:\n         CTxDestination dest = DecodeDestination(ks);\n         if (pwallet && IsValidDestination(dest)) {\n-            const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            if (!keyID) {\n+            CKeyID key = GetKeyForDestination(*pwallet, dest);\n+            if (key.IsNull()) {\n                 throw std::runtime_error(strprintf(\"%s does not refer to a key\", ks));\n             }\n             CPubKey vchPubKey;\n-            if (!pwallet->GetPubKey(*keyID, vchPubKey)) {\n+            if (!pwallet->GetPubKey(key, vchPubKey)) {\n                 throw std::runtime_error(strprintf(\"no full public key for address %s\", ks));\n             }\n             if (!vchPubKey.IsFullyValid())"
      }
    ]
  },
  {
    "sha": "cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjJjMGI2ZjVjZGU1ODRkNzAwNGZmMWI1YjQ3NmVmNTRkZTZiNzRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:48:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:27:55Z"
      },
      "message": "Support P2WPKH and P2SH-P2WPKH in dumpprivkey",
      "tree": {
        "sha": "e5a5cf921cebe98c930547a5c207eb2481526f68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5a5cf921cebe98c930547a5c207eb2481526f68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37c03d3e05713e14458ca2867e442926f165afea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c03d3e05713e14458ca2867e442926f165afea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37c03d3e05713e14458ca2867e442926f165afea"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "81922c5848edfaf603d9e36543d606d6c0fdb858",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
        "patch": "@@ -578,12 +578,12 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!IsValidDestination(dest)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n-    const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-    if (!keyID) {\n+    auto keyid = GetKeyForDestination(*pwallet, dest);\n+    if (keyid.IsNull()) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     }\n     CKey vchSecret;\n-    if (!pwallet->GetKey(*keyID, vchSecret)) {\n+    if (!pwallet->GetKey(keyid, vchSecret)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     }\n     return CBitcoinSecret(vchSecret).ToString();"
      }
    ]
  },
  {
    "sha": "57273f2b302949d4ca3511f703627b5d717be40c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzI3M2YyYjMwMjk0OWQ0Y2EzNTExZjcwMzYyN2I1ZDcxN2JlNDBj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:49:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:27:55Z"
      },
      "message": "[test] Serialize CTransaction with witness by default",
      "tree": {
        "sha": "1802905af456623f59bbe3cef222e9cc67cc6201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1802905af456623f59bbe3cef222e9cc67cc6201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57273f2b302949d4ca3511f703627b5d717be40c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57273f2b302949d4ca3511f703627b5d717be40c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57273f2b302949d4ca3511f703627b5d717be40c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57273f2b302949d4ca3511f703627b5d717be40c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2c0b6f5cde584d7004ff1b5b476ef54de6b74b"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 21,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8d85a4a93470af1e2b1fcff3d377767066799c77",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=57273f2b302949d4ca3511f703627b5d717be40c",
        "patch": "@@ -36,12 +36,15 @@ def initialize(self, base_block):\n         self.vtx = copy.deepcopy(base_block.vtx)\n         self.hashMerkleRoot = self.calc_merkle_root()\n \n-    def serialize(self):\n+    def serialize(self, with_witness=False):\n         r = b\"\"\n         r += super(CBlock, self).serialize()\n         r += struct.pack(\"<BQ\", 255, len(self.vtx))\n         for tx in self.vtx:\n-            r += tx.serialize()\n+            if with_witness:\n+                r += tx.serialize_with_witness()\n+            else:\n+                r += tx.serialize_without_witness()\n         return r\n \n     def normal_serialize(self):"
      },
      {
        "sha": "26de0119cde192b761888037d789f91699d9a394",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=57273f2b302949d4ca3511f703627b5d717be40c",
        "patch": "@@ -25,7 +25,7 @@\n # Calculate the virtual size of a witness block:\n # (base + witness/4)\n def get_virtual_size(witness_block):\n-    base_size = len(witness_block.serialize())\n+    base_size = len(witness_block.serialize(with_witness=False))\n     total_size = len(witness_block.serialize(with_witness=True))\n     # the \"+3\" is so we round up\n     vsize = int((3*base_size + total_size + 3)/4)"
      },
      {
        "sha": "c5c640f8f9ee33d6d372a2a68220bb6505f617a5",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=57273f2b302949d4ca3511f703627b5d717be40c",
        "patch": "@@ -452,10 +452,10 @@ def serialize_with_witness(self):\n         r += struct.pack(\"<I\", self.nLockTime)\n         return r\n \n-    # Regular serialization is without witness -- must explicitly\n-    # call serialize_with_witness to include witness data.\n+    # Regular serialization is with witness -- must explicitly\n+    # call serialize_without_witness to exclude witness data.\n     def serialize(self):\n-        return self.serialize_without_witness()\n+        return self.serialize_with_witness()\n \n     # Recalculate the txid (transaction hash without witness)\n     def rehash(self):\n@@ -471,7 +471,7 @@ def calc_sha256(self, with_witness=False):\n \n         if self.sha256 is None:\n             self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n-        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n+        self.hash = encode(hash256(self.serialize_without_witness())[::-1], 'hex_codec').decode('ascii')\n \n     def is_valid(self):\n         self.calc_sha256()\n@@ -568,7 +568,7 @@ def serialize(self, with_witness=False):\n         if with_witness:\n             r += ser_vector(self.vtx, \"serialize_with_witness\")\n         else:\n-            r += ser_vector(self.vtx)\n+            r += ser_vector(self.vtx, \"serialize_without_witness\")\n         return r\n \n     # Calculate the merkle root given a vector of transaction hashes\n@@ -635,7 +635,7 @@ def deserialize(self, f):\n         self.tx = CTransaction()\n         self.tx.deserialize(f)\n \n-    def serialize(self, with_witness=False):\n+    def serialize(self, with_witness=True):\n         r = b\"\"\n         r += ser_compact_size(self.index)\n         if with_witness:\n@@ -644,6 +644,9 @@ def serialize(self, with_witness=False):\n             r += self.tx.serialize_without_witness()\n         return r\n \n+    def serialize_without_witness(self):\n+        return self.serialize(with_witness=False)\n+\n     def serialize_with_witness(self):\n         return self.serialize(with_witness=True)\n \n@@ -683,7 +686,7 @@ def serialize(self, with_witness=False):\n         if with_witness:\n             r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n         else:\n-            r += ser_vector(self.prefilled_txn)\n+            r += ser_vector(self.prefilled_txn, \"serialize_without_witness\")\n         return r\n \n     def __repr__(self):\n@@ -814,13 +817,13 @@ def deserialize(self, f):\n         self.blockhash = deser_uint256(f)\n         self.transactions = deser_vector(f, CTransaction)\n \n-    def serialize(self, with_witness=False):\n+    def serialize(self, with_witness=True):\n         r = b\"\"\n         r += ser_uint256(self.blockhash)\n         if with_witness:\n             r += ser_vector(self.transactions, \"serialize_with_witness\")\n         else:\n-            r += ser_vector(self.transactions)\n+            r += ser_vector(self.transactions, \"serialize_without_witness\")\n         return r\n \n     def __repr__(self):\n@@ -1020,7 +1023,7 @@ def deserialize(self, f):\n         self.block.deserialize(f)\n \n     def serialize(self):\n-        return self.block.serialize()\n+        return self.block.serialize(with_witness=False)\n \n     def __repr__(self):\n         return \"msg_block(block=%s)\" % (repr(self.block))\n@@ -1291,7 +1294,7 @@ def deserialize(self, f):\n \n     def serialize(self):\n         r = b\"\"\n-        r += self.block_transactions.serialize()\n+        r += self.block_transactions.serialize(with_witness=False)\n         return r\n \n     def __repr__(self):"
      },
      {
        "sha": "79382cc6d5c0e8c8ab4577c1fd39576f9116720a",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57273f2b302949d4ca3511f703627b5d717be40c/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=57273f2b302949d4ca3511f703627b5d717be40c",
        "patch": "@@ -641,7 +641,7 @@ def SignatureHash(script, txTo, inIdx, hashtype):\n         txtmp.vin = []\n         txtmp.vin.append(tmp)\n \n-    s = txtmp.serialize()\n+    s = txtmp.serialize_without_witness()\n     s += struct.pack(b\"<I\", hashtype)\n \n     hash = hash256(s)"
      }
    ]
  },
  {
    "sha": "f37c64e477d679853a4076f2f7888568bb034e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzdjNjRlNDc3ZDY3OTg1M2E0MDc2ZjJmNzg4ODU2OGJiMDM0ZTkw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:49:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:35:27Z"
      },
      "message": "Implicitly know about P2WPKH redeemscripts\n\nMake CKeyStore automatically known about the redeemscripts necessary for P2SH-P2WPKH\n(and due to the extra checks in IsMine, also P2WPKH) spending.",
      "tree": {
        "sha": "c89e9c12f55bf306452d8cd20c45a7a81f9fed6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c89e9c12f55bf306452d8cd20c45a7a81f9fed6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f37c64e477d679853a4076f2f7888568bb034e90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37c64e477d679853a4076f2f7888568bb034e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f37c64e477d679853a4076f2f7888568bb034e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37c64e477d679853a4076f2f7888568bb034e90/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57273f2b302949d4ca3511f703627b5d717be40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57273f2b302949d4ca3511f703627b5d717be40c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57273f2b302949d4ca3511f703627b5d717be40c"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 58,
      "deletions": 25
    },
    "files": [
      {
        "sha": "487784b0bfc5703f6f7cf8a2137dc3fd8ba2d5e8",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 2,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37c64e477d679853a4076f2f7888568bb034e90/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37c64e477d679853a4076f2f7888568bb034e90/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=f37c64e477d679853a4076f2f7888568bb034e90",
        "patch": "@@ -11,6 +11,31 @@ bool CKeyStore::AddKey(const CKey &key) {\n     return AddKeyPubKey(key, key.GetPubKey());\n }\n \n+void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    CKeyID key_id = pubkey.GetID();\n+    // We must actually know about this key already.\n+    assert(HaveKey(key_id) || mapWatchKeys.count(key_id));\n+    // This adds the redeemscripts necessary to detect P2WPKH and P2SH-P2WPKH\n+    // outputs. Technically P2WPKH outputs don't have a redeemscript to be\n+    // spent. However, our current IsMine logic requires the corresponding\n+    // P2SH-P2WPKH redeemscript to be present in the wallet in order to accept\n+    // payment even to P2WPKH outputs.\n+    // Also note that having superfluous scripts in the keystore never hurts.\n+    // They're only used to guide recursion in signing and IsMine logic - if\n+    // a script is present but we can't do anything with it, it has no effect.\n+    // \"Implicitly\" refers to fact that scripts are derived automatically from\n+    // existing keys, and are present in memory, even without being explicitly\n+    // loaded (e.g. from a file).\n+    if (pubkey.IsCompressed()) {\n+        CScript script = GetScriptForDestination(WitnessV0KeyHash(key_id));\n+        // This does not use AddCScript, as it may be overridden.\n+        CScriptID id(script);\n+        mapScripts[id] = std::move(script);\n+    }\n+}\n+\n bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n@@ -31,6 +56,7 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n     mapKeys[pubkey.GetID()] = key;\n+    ImplicitlyLearnRelatedKeyScripts(pubkey);\n     return true;\n }\n \n@@ -110,8 +136,10 @@ bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n     CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey))\n+    if (ExtractPubKey(dest, pubKey)) {\n         mapWatchKeys[pubKey.GetID()] = pubKey;\n+        ImplicitlyLearnRelatedKeyScripts(pubKey);\n+    }\n     return true;\n }\n \n@@ -120,8 +148,11 @@ bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n     CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey))\n+    if (ExtractPubKey(dest, pubKey)) {\n         mapWatchKeys.erase(pubKey.GetID());\n+    }\n+    // Related CScripts are not removed; having superfluous scripts around is\n+    // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n     return true;\n }\n "
      },
      {
        "sha": "b8656424be254810b42de40d4931da844bac5ac5",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37c64e477d679853a4076f2f7888568bb034e90/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37c64e477d679853a4076f2f7888568bb034e90/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=f37c64e477d679853a4076f2f7888568bb034e90",
        "patch": "@@ -59,6 +59,8 @@ class CBasicKeyStore : public CKeyStore\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n+    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey);\n+\n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;"
      },
      {
        "sha": "cd30fbeda7264bf3785b76bf5cc3884b45e248e9",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37c64e477d679853a4076f2f7888568bb034e90/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37c64e477d679853a4076f2f7888568bb034e90/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=f37c64e477d679853a4076f2f7888568bb034e90",
        "patch": "@@ -508,12 +508,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         scriptPubKey.clear();\n         scriptPubKey << OP_0 << ToByteVector(pubkeys[0].GetID());\n \n-        // Keystore has key, but no P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n-\n-        // Keystore has key and P2SH redeemScript\n+        // Keystore implicitly has key and P2SH redeemScript\n         keystore.AddCScript(scriptPubKey);\n         result = IsMine(keystore, scriptPubKey, isInvalid);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);"
      },
      {
        "sha": "72ed5af42dbf8e9d73a44aa39999d0d7bf322234",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37c64e477d679853a4076f2f7888568bb034e90/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37c64e477d679853a4076f2f7888568bb034e90/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f37c64e477d679853a4076f2f7888568bb034e90",
        "patch": "@@ -245,6 +245,7 @@ bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<\n     }\n \n     mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n+    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n "
      },
      {
        "sha": "e4b2b020b75b333197fbbd0606549f62abcec6ab",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37c64e477d679853a4076f2f7888568bb034e90/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37c64e477d679853a4076f2f7888568bb034e90/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f37c64e477d679853a4076f2f7888568bb034e90",
        "patch": "@@ -1307,7 +1307,7 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot convert between witness address types\");\n         }\n     } else {\n-        pwallet->AddCScript(witprogram);\n+        pwallet->AddCScript(witprogram); // Implicit for single-key now, but necessary for multisig and for compatibility with older software\n         pwallet->SetAddressBook(w.result, \"\", \"receive\");\n     }\n "
      },
      {
        "sha": "626572336bafd1a0dcdf4baa8507283e2cbf7ca7",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37c64e477d679853a4076f2f7888568bb034e90/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37c64e477d679853a4076f2f7888568bb034e90/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=f37c64e477d679853a4076f2f7888568bb034e90",
        "patch": "@@ -356,8 +356,10 @@ def run_test(self):\n                 [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n                 # normal P2PKH and P2PK with compressed keys should always be spendable\n                 spendable_anytime.extend([p2pkh, p2pk])\n-                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are spendable after direct importaddress\n-                spendable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+                # P2SH_P2PK, P2SH_P2PKH with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+                # P2WPKH and P2SH_P2WPKH with compressed keys should always be spendable\n+                spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address:\n             v = self.nodes[0].validateaddress(i)\n@@ -373,7 +375,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2pkh, p2pk])\n                 # P2SH_P2PK and P2SH_P2PKH are spendable after direct importaddress\n                 spendable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n-                # witness with uncompressed keys are never seen\n+                # Witness output types with uncompressed keys are never seen\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in compressed_solvable_address:\n@@ -384,10 +386,10 @@ def run_test(self):\n                 solvable_after_importaddress.extend([bare, p2sh, p2wsh, p2sh_p2wsh])\n             else:\n                 [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n-                # normal P2PKH and P2PK with compressed keys should always be seen\n-                solvable_anytime.extend([p2pkh, p2pk])\n-                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are seen after direct importaddress\n-                solvable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+                # normal P2PKH, P2PK, P2WPKH and P2SH_P2WPKH with compressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk, p2wpkh, p2sh_p2wpkh])\n+                # P2SH_P2PK, P2SH_P2PKH with compressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in uncompressed_solvable_address:\n             v = self.nodes[0].validateaddress(i)\n@@ -403,7 +405,7 @@ def run_test(self):\n                 solvable_anytime.extend([p2pkh, p2pk])\n                 # P2SH_P2PK, P2SH_P2PKH with uncompressed keys are seen after direct importaddress\n                 solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n-                # witness with uncompressed keys are never seen\n+                # Witness output types with uncompressed keys are never seen\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         op1 = CScript([OP_1])\n@@ -496,6 +498,8 @@ def run_test(self):\n         spendable_after_addwitnessaddress = []      # These outputs should be seen after importaddress\n         solvable_after_addwitnessaddress=[]         # These outputs should be seen after importaddress but not spendable\n         unseen_anytime = []                         # These outputs should never be seen\n+        solvable_anytime = []                       # These outputs should be solvable after importpubkey\n+        unseen_anytime = []                         # These outputs should never be seen\n \n         uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n         uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n@@ -514,9 +518,8 @@ def run_test(self):\n                 premature_witaddress.append(script_to_p2sh(p2wsh))\n             else:\n                 [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n-                # P2WPKH, P2SH_P2WPKH are spendable after addwitnessaddress\n-                spendable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n-                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+                # P2WPKH, P2SH_P2WPKH are always spendable\n+                spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address + uncompressed_solvable_address:\n             v = self.nodes[0].validateaddress(i)\n@@ -538,10 +541,11 @@ def run_test(self):\n                 premature_witaddress.append(script_to_p2sh(p2wsh))\n             else:\n                 [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n-                # P2SH_P2PK, P2SH_P2PKH with compressed keys are seen after addwitnessaddress\n-                solvable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n-                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+                # P2SH_P2PK, P2SH_P2PKH with compressed keys are always solvable\n+                solvable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n+        self.mine_and_test_listunspent(spendable_anytime, 2)\n+        self.mine_and_test_listunspent(solvable_anytime, 1)\n         self.mine_and_test_listunspent(spendable_after_addwitnessaddress + solvable_after_addwitnessaddress + unseen_anytime, 0)\n \n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n@@ -558,8 +562,8 @@ def run_test(self):\n             witaddress = self.nodes[0].addwitnessaddress(i)\n             assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n \n-        spendable_txid.append(self.mine_and_test_listunspent(spendable_after_addwitnessaddress, 2))\n-        solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_after_addwitnessaddress + spendable_anytime, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress + solvable_anytime, 1))\n         self.mine_and_test_listunspent(unseen_anytime, 0)\n \n         # Check that createrawtransaction/decoderawtransaction with non-v0 Bech32 works"
      }
    ]
  },
  {
    "sha": "940a21932ba769ba5829cba713579db84f96d2f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDBhMjE5MzJiYTc2OWJhNTgyOWNiYTcxMzU3OWRiODRmOTZkMmY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:49:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:35:31Z"
      },
      "message": "SegWit wallet support\n\nThis introduces two command line flags (-addresstype and -changetype) which control\nthe type of addresses/outputs created by the GUI and RPCs. Certain RPCs allow\noverriding these (`getnewaddress` and `getrawchangeaddress`). Supported types\nare \"legacy\" (P2PKH and P2SH-multisig), \"p2sh-segwit\" (P2SH-P2WPKH and P2SH-P2WSH-multisig),\nand \"bech32\" (P2WPKH and P2WSH-multisig).\n\nA few utility functions are added to the wallet to construct different address type\nand to add the necessary entries to the wallet file to be compatible with earlier\nversions (see `CWallet::LearnRelatedScripts`, `GetDestinationForKey`,\n`GetAllDestinationsForKey`, `CWallet::AddAndGetDestinationForScript`).",
      "tree": {
        "sha": "2f1db2f007ef50255baddae3ef712831ad46ab58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f1db2f007ef50255baddae3ef712831ad46ab58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/940a21932ba769ba5829cba713579db84f96d2f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940a21932ba769ba5829cba713579db84f96d2f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/940a21932ba769ba5829cba713579db84f96d2f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940a21932ba769ba5829cba713579db84f96d2f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f37c64e477d679853a4076f2f7888568bb034e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37c64e477d679853a4076f2f7888568bb034e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f37c64e477d679853a4076f2f7888568bb034e90"
      }
    ],
    "stats": {
      "total": 339,
      "additions": 278,
      "deletions": 61
    },
    "files": [
      {
        "sha": "f238c37f635cf777d8650d7c2d75957524dd004c",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -384,7 +384,8 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 return QString();\n             }\n         }\n-        strAddress = EncodeDestination(newKey.GetID());\n+        wallet->LearnRelatedScripts(newKey, g_address_type);\n+        strAddress = EncodeDestination(GetDestinationForKey(newKey, g_address_type));\n     }\n     else\n     {"
      },
      {
        "sha": "48462f9b5facc871e68dbd446d5576c6037317c3",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -636,27 +636,24 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& r\n     // Create a new refund address, or re-use:\n     QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n-    std::set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n-    if (!refundAddresses.empty()) {\n-        CScript s = GetScriptForDestination(*refundAddresses.begin());\n+    CPubKey newKey;\n+    if (wallet->GetKeyFromPool(newKey)) {\n+        // BIP70 requests encode the scriptPubKey directly, so we are not restricted to address\n+        // types supported by the receiver. As a result, we choose the address format we also\n+        // use for change. Despite an actual payment and not change, this is a close match:\n+        // it's the output type we use subject to privacy issues, but not restricted by what\n+        // other software supports.\n+        wallet->LearnRelatedScripts(newKey, g_change_type);\n+        CTxDestination dest = GetDestinationForKey(newKey, g_change_type);\n+        wallet->SetAddressBook(dest, strAccount, \"refund\");\n+\n+        CScript s = GetScriptForDestination(dest);\n         payments::Output* refund_to = payment.add_refund_to();\n         refund_to->set_script(&s[0], s.size());\n-    }\n-    else {\n-        CPubKey newKey;\n-        if (wallet->GetKeyFromPool(newKey)) {\n-            CKeyID keyID = newKey.GetID();\n-            wallet->SetAddressBook(keyID, strAccount, \"refund\");\n-\n-            CScript s = GetScriptForDestination(keyID);\n-            payments::Output* refund_to = payment.add_refund_to();\n-            refund_to->set_script(&s[0], s.size());\n-        }\n-        else {\n-            // This should never happen, because sending coins should have\n-            // just unlocked the wallet and refilled the keypool.\n-            qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n-        }\n+    } else {\n+        // This should never happen, because sending coins should have\n+        // just unlocked the wallet and refilled the keypool.\n+        qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n     }\n \n     int length = payment.ByteSize();"
      },
      {
        "sha": "a270e5de594fc3b3b570c0f7f6591d77247172d9",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -149,6 +149,9 @@ void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, st\n //     src/qt/test/test_bitcoin-qt -platform cocoa    # macOS\n void TestGUI()\n {\n+    g_address_type = OUTPUT_TYPE_P2SH_SEGWIT;\n+    g_change_type = OUTPUT_TYPE_P2SH_SEGWIT;\n+\n     // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\n     TestChain100Setup test;\n     for (int i = 0; i < 5; ++i) {\n@@ -161,7 +164,7 @@ void TestGUI()\n     wallet.LoadWallet(firstRun);\n     {\n         LOCK(wallet.cs_wallet);\n-        wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n+        wallet.SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), g_address_type), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n     {"
      },
      {
        "sha": "8da99f2f7ea488b95687340ce791e310db0ca704",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -16,6 +16,8 @@\n std::string GetWalletHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-addresstype\", strprintf(_(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\"), FormatOutputType(OUTPUT_TYPE_DEFAULT)));\n+    strUsage += HelpMessageOpt(\"-changetype\", _(\"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default is same as -addresstype)\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n@@ -175,6 +177,16 @@ bool WalletParameterInteraction()\n     bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n+    g_address_type = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"));\n+    if (g_address_type == OUTPUT_TYPE_NONE) {\n+        return InitError(strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\")));\n+    }\n+\n+    g_change_type = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), g_address_type);\n+    if (g_change_type == OUTPUT_TYPE_NONE) {\n+        return InitError(strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\")));\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "17d81a5e39ea438bb26bf5764d987f409ffbbe18",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -131,7 +131,11 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     CKeyID vchAddress = pubkey.GetID();\n     {\n         pwallet->MarkDirty();\n-        pwallet->SetAddressBook(vchAddress, strLabel, \"receive\");\n+\n+        // We don't know which corresponding address will be used; label them all\n+        for (const auto& dest : GetAllDestinationsForKey(pubkey)) {\n+            pwallet->SetAddressBook(dest, strLabel, \"receive\");\n+        }\n \n         // Don't throw error in case a key is already there\n         if (pwallet->HaveKey(vchAddress)) {\n@@ -143,6 +147,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!pwallet->AddKeyPubKey(key, pubkey)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n         }\n+        pwallet->LearnAllRelatedScripts(pubkey);\n \n         // whenever a key is imported, we need to scan the whole chain\n         pwallet->UpdateTimeFirstKey(1);\n@@ -433,8 +438,11 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    ImportAddress(pwallet, pubKey.GetID(), strLabel);\n+    for (const auto& dest : GetAllDestinationsForKey(pubKey)) {\n+        ImportAddress(pwallet, dest, strLabel);\n+    }\n     ImportScript(pwallet, GetScriptForRawPubKey(pubKey), strLabel, false);\n+    pwallet->LearnAllRelatedScripts(pubKey);\n \n     if (fRescan)\n     {"
      },
      {
        "sha": "447dd794ae9bf565589741cbd92b493b97ae4f0e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 14,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -136,14 +136,15 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getnewaddress ( \\\"account\\\" )\\n\"\n+            \"getnewaddress ( \\\"account\\\" \\\"address_type\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"2. \\\"address_type\\\"   (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh\\\", and \\\"bech32\\\". Default is set by -addresstype.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -158,6 +159,14 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         strAccount = AccountFromValue(request.params[0]);\n \n+    OutputType output_type = g_address_type;\n+    if (!request.params[1].isNull()) {\n+        output_type = ParseOutputType(request.params[1].get_str(), g_address_type);\n+        if (output_type == OUTPUT_TYPE_NONE) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n+        }\n+    }\n+\n     if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n     }\n@@ -167,11 +176,12 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     if (!pwallet->GetKeyFromPool(newKey)) {\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     }\n-    CKeyID keyID = newKey.GetID();\n+    pwallet->LearnRelatedScripts(newKey, output_type);\n+    CTxDestination dest = GetDestinationForKey(newKey, output_type);\n \n-    pwallet->SetAddressBook(keyID, strAccount, \"receive\");\n+    pwallet->SetAddressBook(dest, strAccount, \"receive\");\n \n-    return EncodeDestination(keyID);\n+    return EncodeDestination(dest);\n }\n \n \n@@ -226,11 +236,13 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getrawchangeaddress\\n\"\n+            \"getrawchangeaddress ( \\\"address_type\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n             \"This is for use with raw transactions, NOT normal use.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address_type\\\"           (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh\\\", and \\\"bech32\\\". Default is set by -changetype.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The address\\n\"\n             \"\\nExamples:\\n\"\n@@ -244,16 +256,25 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n     }\n \n+    OutputType output_type = g_change_type;\n+    if (!request.params[0].isNull()) {\n+        output_type = ParseOutputType(request.params[0].get_str(), g_change_type);\n+        if (output_type == OUTPUT_TYPE_NONE) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+        }\n+    }\n+\n     CReserveKey reservekey(pwallet);\n     CPubKey vchPubKey;\n     if (!reservekey.GetReservedKey(vchPubKey, true))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n     reservekey.KeepKey();\n \n-    CKeyID keyID = vchPubKey.GetID();\n+    pwallet->LearnRelatedScripts(vchPubKey, output_type);\n+    CTxDestination dest = GetDestinationForKey(vchPubKey, output_type);\n \n-    return EncodeDestination(keyID);\n+    return EncodeDestination(dest);\n }\n \n \n@@ -1184,11 +1205,12 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n     // Construct using pay-to-script-hash:\n     CScript inner = _createmultisig_redeemScript(pwallet, request.params);\n-    CScriptID innerID(inner);\n     pwallet->AddCScript(inner);\n \n-    pwallet->SetAddressBook(innerID, strAccount, \"send\");\n-    return EncodeDestination(innerID);\n+    CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, g_address_type);\n+\n+    pwallet->SetAddressBook(dest, strAccount, \"send\");\n+    return EncodeDestination(dest);\n }\n \n class Witnessifier : public boost::static_visitor<bool>\n@@ -3446,8 +3468,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n     { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {} },\n+    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     {\"account\",\"minconf\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     {\"address\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",           &gettransaction,           {\"txid\",\"include_watchonly\"} },"
      },
      {
        "sha": "86f4df6008f7873a40af1b26d7e2a933deaa202d",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -13,6 +13,8 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     bitdb.MakeMock();\n \n     bool fFirstRun;\n+    g_address_type = OUTPUT_TYPE_DEFAULT;\n+    g_change_type = OUTPUT_TYPE_DEFAULT;\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     pwalletMain = MakeUnique<CWallet>(std::move(dbw));\n     pwalletMain->LoadWallet(fFirstRun);"
      },
      {
        "sha": "ff052c75bea861055ddae5cc4ddd86bc08b2a5fe",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 5,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -42,6 +42,8 @@ CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n+OutputType g_address_type = OUTPUT_TYPE_NONE;\n+OutputType g_change_type = OUTPUT_TYPE_NONE;\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n@@ -832,8 +834,8 @@ bool CWallet::GetAccountDestination(CTxDestination &dest, std::string strAccount\n         if (!account.vchPubKey.IsValid())\n             bForceNew = true;\n         else {\n-            // Check if the current key has been used\n-            CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n+            // Check if the current key has been used (TODO: check other addresses with the same key)\n+            CScript scriptPubKey = GetScriptForDestination(GetDestinationForKey(account.vchPubKey, g_address_type));\n             for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n                  it != mapWallet.end() && account.vchPubKey.IsValid();\n                  ++it)\n@@ -850,11 +852,12 @@ bool CWallet::GetAccountDestination(CTxDestination &dest, std::string strAccount\n         if (!GetKeyFromPool(account.vchPubKey, false))\n             return false;\n \n-        dest = account.vchPubKey.GetID();\n+        LearnRelatedScripts(account.vchPubKey, g_address_type);\n+        dest = GetDestinationForKey(account.vchPubKey, g_address_type);\n         SetAddressBook(dest, strAccount, \"receive\");\n         walletdb.WriteAccount(strAccount, account);\n     } else {\n-        dest = account.vchPubKey.GetID();\n+        dest = GetDestinationForKey(account.vchPubKey, g_address_type);\n     }\n \n     return true;\n@@ -2743,7 +2746,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     return false;\n                 }\n \n-                scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+                LearnRelatedScripts(vchPubKey, g_change_type);\n+                scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, g_change_type));\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n             size_t change_prototype_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n@@ -4136,3 +4140,106 @@ bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     fInMempool = ret;\n     return ret;\n }\n+\n+static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n+static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n+static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n+\n+OutputType ParseOutputType(const std::string& type, OutputType default_type)\n+{\n+    if (type.empty()) {\n+        return default_type;\n+    } else if (type == OUTPUT_TYPE_STRING_LEGACY) {\n+        return OUTPUT_TYPE_LEGACY;\n+    } else if (type == OUTPUT_TYPE_STRING_P2SH_SEGWIT) {\n+        return OUTPUT_TYPE_P2SH_SEGWIT;\n+    } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n+        return OUTPUT_TYPE_BECH32;\n+    } else {\n+        return OUTPUT_TYPE_NONE;\n+    }\n+}\n+\n+const std::string& FormatOutputType(OutputType type)\n+{\n+    switch (type) {\n+    case OUTPUT_TYPE_LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n+    case OUTPUT_TYPE_P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n+    case OUTPUT_TYPE_BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    default: assert(false);\n+    }\n+}\n+\n+void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n+{\n+    if (key.IsCompressed() && (type == OUTPUT_TYPE_P2SH_SEGWIT || type == OUTPUT_TYPE_BECH32)) {\n+        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n+        CScript witprog = GetScriptForDestination(witdest);\n+        // Make sure the resulting program is solvable.\n+        assert(IsSolvable(*this, witprog));\n+        AddCScript(witprog);\n+    }\n+}\n+\n+void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n+{\n+    // OUTPUT_TYPE_P2SH_SEGWIT always adds all necessary scripts for all types.\n+    LearnRelatedScripts(key, OUTPUT_TYPE_P2SH_SEGWIT);\n+}\n+\n+CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n+{\n+    switch (type) {\n+    case OUTPUT_TYPE_LEGACY: return key.GetID();\n+    case OUTPUT_TYPE_P2SH_SEGWIT:\n+    case OUTPUT_TYPE_BECH32: {\n+        if (!key.IsCompressed()) return key.GetID();\n+        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n+        CScript witprog = GetScriptForDestination(witdest);\n+        if (type == OUTPUT_TYPE_P2SH_SEGWIT) {\n+            return CScriptID(witprog);\n+        } else {\n+            return witdest;\n+        }\n+    }\n+    default: assert(false);\n+    }\n+}\n+\n+std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n+{\n+    CKeyID keyid = key.GetID();\n+    if (key.IsCompressed()) {\n+        CTxDestination segwit = WitnessV0KeyHash(keyid);\n+        CTxDestination p2sh = CScriptID(GetScriptForDestination(segwit));\n+        return std::vector<CTxDestination>{std::move(keyid), std::move(p2sh), std::move(segwit)};\n+    } else {\n+        return std::vector<CTxDestination>{std::move(keyid)};\n+    }\n+}\n+\n+CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, OutputType type)\n+{\n+    // Note that scripts over 520 bytes are not yet supported.\n+    switch (type) {\n+    case OUTPUT_TYPE_LEGACY:\n+        return CScriptID(script);\n+    case OUTPUT_TYPE_P2SH_SEGWIT:\n+    case OUTPUT_TYPE_BECH32: {\n+        WitnessV0ScriptHash hash;\n+        CSHA256().Write(script.data(), script.size()).Finalize(hash.begin());\n+        CTxDestination witdest = hash;\n+        CScript witprog = GetScriptForDestination(witdest);\n+        // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n+        if (!IsSolvable(*this, witprog)) return CScriptID(script);\n+        // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n+        AddCScript(witprog);\n+        if (type == OUTPUT_TYPE_BECH32) {\n+            return witdest;\n+        } else {\n+            return CScriptID(witprog);\n+        }\n+    }\n+    default: assert(false);\n+    }\n+}"
      },
      {
        "sha": "4088ed198565b9170cd53a7932f4b79c10190a9a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -99,6 +99,19 @@ enum WalletFeature\n     FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n+enum OutputType\n+{\n+    OUTPUT_TYPE_NONE,\n+    OUTPUT_TYPE_LEGACY,\n+    OUTPUT_TYPE_P2SH_SEGWIT,\n+    OUTPUT_TYPE_BECH32,\n+\n+    OUTPUT_TYPE_DEFAULT = OUTPUT_TYPE_P2SH_SEGWIT\n+};\n+\n+extern OutputType g_address_type;\n+extern OutputType g_change_type;\n+\n \n /** A key pool entry */\n class CKeyPool\n@@ -1129,6 +1142,26 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * deadlock\n      */\n     void BlockUntilSyncedToCurrentChain();\n+\n+    /**\n+     * Explicitly make the wallet learn the related scripts for outputs to the\n+     * given key. This is purely to make the wallet file compatible with older\n+     * software, as CBasicKeyStore automatically does this implicitly for all\n+     * keys now.\n+     */\n+    void LearnRelatedScripts(const CPubKey& key, OutputType);\n+\n+    /**\n+     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n+     * be anything).\n+     */\n+    void LearnAllRelatedScripts(const CPubKey& key);\n+\n+    /**\n+     * Get a destination of the requested type (if possible) to the specified script.\n+     * This function will automatically add the necessary scripts to the wallet.\n+     */\n+    CTxDestination AddAndGetDestinationForScript(const CScript& script, OutputType);\n };\n \n /** A key allocated from the key pool. */\n@@ -1218,4 +1251,16 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n+OutputType ParseOutputType(const std::string& str, OutputType default_type = OUTPUT_TYPE_DEFAULT);\n+const std::string& FormatOutputType(OutputType type);\n+\n+/**\n+ * Get a destination of the requested type (if possible) to the specified key.\n+ * The caller must make sure LearnRelatedScripts has been called beforehand.\n+ */\n+CTxDestination GetDestinationForKey(const CPubKey& key, OutputType);\n+\n+/** Get all destinations (potentially) supported by the wallet for the given key. */\n+std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      },
      {
        "sha": "4cecfabc7a6a9e8dbf8373b5b3baa0a57e54d2b0",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -95,7 +95,7 @@ class BIP68_112_113Test(ComparisonTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4']]\n+        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "14603054206d0ee0e88106573e2081af5e4e84c4",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -362,9 +362,10 @@ def test_bip68_not_consensus(self):\n         block.vtx.extend([tx1, tx2, tx3])\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n+        add_witness_commitment(block)\n         block.solve()\n \n-        self.nodes[0].submitblock(ToHex(block))\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n     def activateCSV(self):"
      },
      {
        "sha": "eb76801c591e9607d48dd763cf20ea4a3d920ebd",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -194,7 +194,7 @@ def test_settxfee(rbf_node, dest_address):\n     requested_feerate = Decimal(\"0.00025000\")\n     rbf_node.settxfee(requested_feerate)\n     bumped_tx = rbf_node.bumpfee(rbfid)\n-    actual_feerate = bumped_tx[\"fee\"] * 1000 / rbf_node.getrawtransaction(bumped_tx[\"txid\"], True)[\"size\"]\n+    actual_feerate = bumped_tx[\"fee\"] * 1000 / rbf_node.getrawtransaction(bumped_tx[\"txid\"], True)[\"vsize\"]\n     # Assert that the difference between the requested feerate and the actual\n     # feerate of the bumped transaction is small.\n     assert_greater_than(Decimal(\"0.00001000\"), abs(requested_feerate - actual_feerate))\n@@ -290,6 +290,7 @@ def submit_block_with_tx(node, tx):\n     block.vtx.append(ctx)\n     block.rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n+    blocktools.add_witness_commitment(block)\n     block.solve()\n     node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block"
      },
      {
        "sha": "4306a8e22715f401c45384f63313b7743c8a3045",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -119,7 +119,7 @@ def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):\n-        extra_args = [[] for _ in range(self.num_nodes)]\n+        extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]"
      },
      {
        "sha": "922b829440fe068b79588b49f4bdb524c98e2898",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -9,6 +9,7 @@\n class ImportMultiTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n     def setup_network(self):"
      },
      {
        "sha": "2426ebedbc46ed330056062affc37b9a5edbb77e",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -42,7 +42,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n         # normal segwit activation here (and don't use the default always-on behaviour).\n-        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness', '-vbparams=segwit:0:999999999999']]\n+        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness', '-vbparams=segwit:0:999999999999', '-addresstype=legacy']]\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "1ff8d8a944aefc25c23fcafa47d2601263fe0404",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -20,6 +20,7 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n     def setup_network(self, split=False):\n         super().setup_network()\n@@ -135,7 +136,7 @@ def run_test(self):\n                 break\n \n         bal = self.nodes[0].getbalance()\n-        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex']}]\n+        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n@@ -180,7 +181,7 @@ def run_test(self):\n                 break\n \n         bal = self.nodes[0].getbalance()\n-        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex']}]\n+        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)"
      },
      {
        "sha": "f4b2e4dc53327f5faaa0147d27131d65e43c199d",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -78,9 +78,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\"],\n-                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\"],\n-                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-vbparams=segwit:0:999999999999\"]]\n+        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\"]]\n \n     def setup_network(self):\n         super().setup_network()\n@@ -135,9 +135,9 @@ def run_test(self):\n             self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n             multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n             multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n-            p2sh_addr = self.nodes[i].addwitnessaddress(newaddress, True)\n+            p2sh_addr = self.nodes[i].addwitnessaddress(newaddress)\n             bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n-            p2sh_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, True)\n+            p2sh_ms_addr = self.nodes[i].addwitnessaddress(multiaddress)\n             bip173_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, False)\n             assert_equal(p2sh_addr, key_to_p2sh_p2wpkh(self.pubkey[-1]))\n             assert_equal(bip173_addr, key_to_p2wpkh(self.pubkey[-1]))"
      },
      {
        "sha": "10449a7d6f3b3a41b907378a386ad69564ecad56",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -11,6 +11,7 @@ class SignMessagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-addresstype=legacy\"]]\n \n     def run_test(self):\n         message = 'This is just a test message'"
      },
      {
        "sha": "6b83e862bbf928d4fbb2fdd2570ffa0b12bb1c10",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -86,6 +86,7 @@\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',\n+    'txn_clone.py --segwit',\n     'getchaintips.py',\n     'rest.py',\n     'mempool_spendcoinbase.py',"
      },
      {
        "sha": "20351625d3d8bd1cbfb8afd07f4a6a40be50809c",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -14,6 +14,8 @@ def set_test_params(self):\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")\n+        parser.add_option(\"--segwit\", dest=\"segwit\", default=False, action=\"store_true\",\n+                          help=\"Test behaviour with SegWit txn (which should fail\")\n \n     def setup_network(self):\n         # Start with split network:\n@@ -22,6 +24,11 @@ def setup_network(self):\n         disconnect_nodes(self.nodes[2], 1)\n \n     def run_test(self):\n+        if self.options.segwit:\n+            output_type=\"p2sh-segwit\"\n+        else:\n+            output_type=\"legacy\"\n+\n         # All nodes should start with 1,250 BTC:\n         starting_balance = 1250\n         for i in range(4):\n@@ -31,11 +38,11 @@ def run_test(self):\n         # Assign coins to foo and bar accounts:\n         self.nodes[0].settxfee(.001)\n \n-        node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n+        node0_address_foo = self.nodes[0].getnewaddress(\"foo\", output_type)\n         fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n         fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n \n-        node0_address_bar = self.nodes[0].getnewaddress(\"bar\")\n+        node0_address_bar = self.nodes[0].getnewaddress(\"bar\", output_type)\n         fund_bar_txid = self.nodes[0].sendfrom(\"\", node0_address_bar, 29)\n         fund_bar_tx = self.nodes[0].gettransaction(fund_bar_txid)\n \n@@ -106,6 +113,10 @@ def run_test(self):\n         # Send clone and its parent to miner\n         self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n         txid1_clone = self.nodes[2].sendrawtransaction(tx1_clone[\"hex\"])\n+        if self.options.segwit:\n+            assert_equal(txid1, txid1_clone)\n+            return\n+\n         # ... mine a block...\n         self.nodes[2].generate(1)\n "
      },
      {
        "sha": "f1b7828e5c2cec92a3b3fa4d138f103098bf5e7b",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -58,7 +58,7 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n class WalletDumpTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [[\"-keypool=90\"]]\n+        self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\"]]\n \n     def setup_network(self, split=False):\n         # Use 1 minute timeout because the initial getnewaddress RPC can take"
      },
      {
        "sha": "68264c4c7aa1836743f48bcb5943891de643a223",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940a21932ba769ba5829cba713579db84f96d2f8/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=940a21932ba769ba5829cba713579db84f96d2f8",
        "patch": "@@ -27,6 +27,9 @@ def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size\n         assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n         return curr_balance\n \n+    def get_vsize(self, txn):\n+        return self.nodes[0].decoderawtransaction(txn)['vsize']\n+\n     def run_test(self):\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n@@ -162,7 +165,7 @@ def run_test(self):\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all([self.nodes[0:3]])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n@@ -171,14 +174,14 @@ def run_test(self):\n         self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all([self.nodes[0:3]])\n         node_0_bal += Decimal('10')\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n@@ -187,7 +190,7 @@ def run_test(self):\n         self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth"
      }
    ]
  },
  {
    "sha": "7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWU1NGZkN2M3ZmEzMWUzY2VjMzgyNjUxZGQzNzNmN2VmMmQ3MzI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-01T00:49:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:35:31Z"
      },
      "message": "Support downgrading after recovered keypool witness keys",
      "tree": {
        "sha": "0a8696fe594fa08f1cda05b08d7e9a3d005b7a2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a8696fe594fa08f1cda05b08d7e9a3d005b7a2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "940a21932ba769ba5829cba713579db84f96d2f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940a21932ba769ba5829cba713579db84f96d2f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/940a21932ba769ba5829cba713579db84f96d2f8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e473f402c46026c17b9390abf500d5a6d217f9e1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
        "patch": "@@ -3636,6 +3636,7 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n         if (walletdb.ReadPool(index, keypool)) { //TODO: This should be unnecessary\n             m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         }\n+        LearnAllRelatedScripts(keypool.vchPubKey);\n         walletdb.ErasePool(index);\n         LogPrintf(\"keypool index %d removed\\n\", index);\n         it = setKeyPool->erase(it);"
      }
    ]
  },
  {
    "sha": "b224a47a1a5feac380506abff63fae91d7a93b39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjI0YTQ3YTFhNWZlYWMzODA1MDZhYmZmNjNmYWU5MWQ3YTkzYjM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-12-02T21:03:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-01-09T23:35:31Z"
      },
      "message": "Add address_types test\n\nImprovements and cleanups by John Newbery",
      "tree": {
        "sha": "efbf5261517cc4a8130363344846762c4ba70aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efbf5261517cc4a8130363344846762c4ba70aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b224a47a1a5feac380506abff63fae91d7a93b39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b224a47a1a5feac380506abff63fae91d7a93b39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b224a47a1a5feac380506abff63fae91d7a93b39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b224a47a1a5feac380506abff63fae91d7a93b39/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ee54fd7c7fa31e3cec382651dd373f7ef2d7327"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 200,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb119c04b0d79911c91c7d9c60a6f8e70db4ae1c",
        "filename": "test/functional/address_types.py",
        "status": "added",
        "additions": 199,
        "deletions": 0,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b224a47a1a5feac380506abff63fae91d7a93b39/test/functional/address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b224a47a1a5feac380506abff63fae91d7a93b39/test/functional/address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/address_types.py?ref=b224a47a1a5feac380506abff63fae91d7a93b39",
        "patch": "@@ -0,0 +1,199 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the wallet can send and receive using all combinations of address types.\n+\n+There are 4 nodes-under-test:\n+    - node0 uses legacy addresses\n+    - node1 uses p2sh/segwit addresses\n+    - node2 uses p2sh/segwit addresses and bech32 addresses for change\n+    - node3 uses bech32 addresses\n+\n+node4 exists to generate new blocks.\n+\n+The script is a series of tests, iterating over the 4 nodes. In each iteration\n+of the test, one node sends:\n+    - 10/101th of its balance to itself (using getrawchangeaddress for single key addresses)\n+    - 20/101th to the next node\n+    - 30/101th to the node after that\n+    - 40/101th to the remaining node\n+    - 1/101th remains as fee+change\n+\n+Iterate over each node for single key addresses, and then over each node for\n+multisig addresses. In a second iteration, the same is done, but with explicit address_type\n+parameters passed to getnewaddress and getrawchangeaddress. Node0 and node3 send to p2sh,\n+node 1 sends to bech32, and node2 sends to legacy. As every node sends coins after receiving,\n+this also verifies that spending coins sent to all these address types works.\"\"\"\n+\n+from decimal import Decimal\n+import itertools\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_greater_than, connect_nodes_bi, sync_blocks, sync_mempools\n+\n+class AddressTypeTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 5\n+        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=p2sh-segwit\"], [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"], [\"-addresstype=bech32\"], []]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+        # Fully mesh-connect nodes for faster mempool sync\n+        for i, j in itertools.product(range(self.num_nodes), repeat=2):\n+            if i > j:\n+                connect_nodes_bi(self.nodes, i, j)\n+        self.sync_all()\n+\n+    def get_balances(self, confirmed=True):\n+        \"\"\"Return a list of confirmed or unconfirmed balances.\"\"\"\n+        if confirmed:\n+            return [self.nodes[i].getbalance() for i in range(4)]\n+        else:\n+            return [self.nodes[i].getunconfirmedbalance() for i in range(4)]\n+\n+    def test_address(self, node, address, multisig, typ):\n+        \"\"\"Run sanity checks on an address.\"\"\"\n+        info = self.nodes[node].validateaddress(address)\n+        assert(info['isvalid'])\n+        if not multisig and typ == 'legacy':\n+            # P2PKH\n+            assert(not info['isscript'])\n+            assert(not info['iswitness'])\n+            assert('pubkey' in info)\n+        elif not multisig and typ == 'p2sh-segwit':\n+            # P2SH-P2WPKH\n+            assert(info['isscript'])\n+            assert(not info['iswitness'])\n+            assert_equal(info['script'], 'witness_v0_keyhash')\n+            assert('pubkey' in info)\n+        elif not multisig and typ == 'bech32':\n+            # P2WPKH\n+            assert(not info['isscript'])\n+            assert(info['iswitness'])\n+            assert_equal(info['witness_version'], 0)\n+            assert_equal(len(info['witness_program']), 40)\n+            assert('pubkey' in info)\n+        elif typ == 'legacy':\n+            # P2SH-multisig\n+            assert(info['isscript'])\n+            assert_equal(info['script'], 'multisig')\n+            assert(not info['iswitness'])\n+            assert('pubkeys' in info)\n+        elif typ == 'p2sh-segwit':\n+            # P2SH-P2WSH-multisig\n+            assert(info['isscript'])\n+            assert_equal(info['script'], 'witness_v0_scripthash')\n+            assert(not info['iswitness'])\n+            assert(info['embedded']['isscript'])\n+            assert_equal(info['embedded']['script'], 'multisig')\n+            assert(info['embedded']['iswitness'])\n+            assert_equal(info['embedded']['witness_version'], 0)\n+            assert_equal(len(info['embedded']['witness_program']), 64)\n+            assert('pubkeys' in info['embedded'])\n+        elif typ == 'bech32':\n+            # P2WSH-multisig\n+            assert(info['isscript'])\n+            assert_equal(info['script'], 'multisig')\n+            assert(info['iswitness'])\n+            assert_equal(info['witness_version'], 0)\n+            assert_equal(len(info['witness_program']), 64)\n+            assert('pubkeys' in info)\n+        else:\n+            # Unknown type\n+            assert(False)\n+\n+    def run_test(self):\n+        # Mine 101 blocks on node4 to bring nodes out of IBD and make sure that\n+        # no coinbases are maturing for the nodes-under-test during the test\n+        self.nodes[4].generate(101)\n+        sync_blocks(self.nodes)\n+\n+        uncompressed_1 = \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\"\n+        uncompressed_2 = \"047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77\"\n+        compressed_1 = \"0296b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52\"\n+        compressed_2 = \"037211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073\"\n+\n+        # addmultisigaddress with at least 1 uncompressed key should return a legacy address.\n+        for node in range(4):\n+            self.test_address(node, self.nodes[node].addmultisigaddress(2, [uncompressed_1, uncompressed_2]), True, 'legacy')\n+            self.test_address(node, self.nodes[node].addmultisigaddress(2, [compressed_1, uncompressed_2]), True, 'legacy')\n+            self.test_address(node, self.nodes[node].addmultisigaddress(2, [uncompressed_1, compressed_2]), True, 'legacy')\n+        # addmultisigaddress with all compressed keys should return the appropriate address type (even when the keys are not ours).\n+        self.test_address(0, self.nodes[0].addmultisigaddress(2, [compressed_1, compressed_2]), True, 'legacy')\n+        self.test_address(1, self.nodes[1].addmultisigaddress(2, [compressed_1, compressed_2]), True, 'p2sh-segwit')\n+        self.test_address(2, self.nodes[2].addmultisigaddress(2, [compressed_1, compressed_2]), True, 'p2sh-segwit')\n+        self.test_address(3, self.nodes[3].addmultisigaddress(2, [compressed_1, compressed_2]), True, 'bech32')\n+\n+        for explicit_type, multisig, from_node in itertools.product([False, True], [False, True], range(4)):\n+            address_type = None\n+            if explicit_type and not multisig:\n+                if from_node == 1:\n+                    address_type = 'bech32'\n+                elif from_node == 0 or from_node == 3:\n+                    address_type = 'p2sh-segwit'\n+                else:\n+                    address_type = 'legacy'\n+            self.log.info(\"Sending from node {} ({}) with{} multisig using {}\".format(from_node, self.extra_args[from_node], \"\" if multisig else \"out\", \"default\" if address_type is None else address_type))\n+            old_balances = self.get_balances()\n+            self.log.debug(\"Old balances are {}\".format(old_balances))\n+            to_send = (old_balances[from_node] / 101).quantize(Decimal(\"0.00000001\"))\n+            sends = {}\n+\n+            self.log.debug(\"Prepare sends\")\n+            for n, to_node in enumerate(range(from_node, from_node + 4)):\n+                to_node %= 4\n+                change = False\n+                if not multisig:\n+                    if from_node == to_node:\n+                        # When sending non-multisig to self, use getrawchangeaddress\n+                        address = self.nodes[to_node].getrawchangeaddress(address_type=address_type)\n+                        change = True\n+                    else:\n+                        address = self.nodes[to_node].getnewaddress(address_type=address_type)\n+                else:\n+                    addr1 = self.nodes[to_node].getnewaddress()\n+                    addr2 = self.nodes[to_node].getnewaddress()\n+                    address = self.nodes[to_node].addmultisigaddress(2, [addr1, addr2])\n+\n+                # Do some sanity checking on the created address\n+                if address_type is not None:\n+                    typ = address_type\n+                elif to_node == 0:\n+                    typ = 'legacy'\n+                elif to_node == 1 or (to_node == 2 and not change):\n+                    typ = 'p2sh-segwit'\n+                else:\n+                    typ = 'bech32'\n+                self.test_address(to_node, address, multisig, typ)\n+\n+                # Output entry\n+                sends[address] = to_send * 10 * (1 + n)\n+\n+            self.log.debug(\"Sending: {}\".format(sends))\n+            self.nodes[from_node].sendmany(\"\", sends)\n+            sync_mempools(self.nodes)\n+\n+            unconf_balances = self.get_balances(False)\n+            self.log.debug(\"Check unconfirmed balances: {}\".format(unconf_balances))\n+            assert_equal(unconf_balances[from_node], 0)\n+            for n, to_node in enumerate(range(from_node + 1, from_node + 4)):\n+                to_node %= 4\n+                assert_equal(unconf_balances[to_node], to_send * 10 * (2 + n))\n+\n+            # node4 collects fee and block subsidy to keep accounting simple\n+            self.nodes[4].generate(1)\n+            sync_blocks(self.nodes)\n+\n+            new_balances = self.get_balances()\n+            self.log.debug(\"Check new balances: {}\".format(new_balances))\n+            # We don't know what fee was set, so we can only check bounds on the balance of the sending node\n+            assert_greater_than(new_balances[from_node], to_send * 10)\n+            assert_greater_than(to_send * 11, new_balances[from_node])\n+            for n, to_node in enumerate(range(from_node + 1, from_node + 4)):\n+                to_node %= 4\n+                assert_equal(new_balances[to_node], old_balances[to_node] + to_send * 10 * (2 + n))\n+\n+if __name__ == '__main__':\n+    AddressTypeTest().main()"
      },
      {
        "sha": "bed12fa3247237d84e9030ae1cbf9391ae20f1e4",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b224a47a1a5feac380506abff63fae91d7a93b39/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b224a47a1a5feac380506abff63fae91d7a93b39/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b224a47a1a5feac380506abff63fae91d7a93b39",
        "patch": "@@ -78,6 +78,7 @@\n     'abandonconflict.py',\n     'bip68-112-113-p2p.py',\n     'rawtransactions.py',\n+    'address_types.py',\n     'reindex.py',\n     # vv Tests less than 30s vv\n     'keypool-topup.py',"
      }
    ]
  }
]