[
  {
    "sha": "fa754cb0e54a9d82bc6b19da528166200fd64901",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc1NGNiMGU1NGE5ZDgyYmM2YjE5ZGE1MjgxNjYyMDBmZDY0OTAx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T21:30:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T22:33:24Z"
      },
      "message": "wallet: Remove unused boost thread include\n\nThis was used for the thread_interrupted exception. However, the only\nthread that is interruptible is the checkqueue thread. And that thread\ndoes not run the wallet.",
      "tree": {
        "sha": "d9c31c1ba26de61ea26851f072419e3ddb4cd17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9c31c1ba26de61ea26851f072419e3ddb4cd17e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa754cb0e54a9d82bc6b19da528166200fd64901",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjYywwAliIFmPXqyqtA2e0z/3Es4AVk43APn8u4kfyUnZEPnT2s8vpZLCwBxYv4\n5CsNx1QniE7pBd3JJgo0RPkbrT234cjl6W1OrJjTsNRlDMILl01BwcWCCkOvArai\nPzLzmXK/A8OjflkatHkj1KQeLCgNDpJw9p9Ae83cZ8QAfYz8+nW7o/e1j05HEZpx\nKc8Mt8cUfz2hTssvo55mvF6F4jsIzq4wRGKbSyOZGSc6HGzHUg6VHNI08vYkibGT\nnQJonzF9au+rme/knNX+AhCELT3+LdcHD4yzQ17KCEg+dMbQvOOSs/IB42yK0Kso\nkPY56JgKzYOzlim1BZp63P8XB4wr2QSjv4kbeGqEacUcD/FxkpOdsihU7CvHoWni\nlwXVMdey+AYMXtW6BOB7uXSlS1Oeo8L2n+ZoQ/JmAuNahfV4rvw77W4C4cqqlCV2\nt6DhOulT1HMAjXZ/ndrDHqLGy7dQ+Tqwd0mYV7x4ufqJ0i/1/wRuE9qP32s31JEd\nslICR4MF\n=7VdC\n-----END PGP SIGNATURE-----",
        "payload": "tree d9c31c1ba26de61ea26851f072419e3ddb4cd17e\nparent 2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c\nauthor MarcoFalke <falke.marco@gmail.com> 1584048618 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1584052404 -0400\n\nwallet: Remove unused boost thread include\n\nThis was used for the thread_interrupted exception. However, the only\nthread that is interruptible is the checkqueue thread. And that thread\ndoes not run the wallet.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa754cb0e54a9d82bc6b19da528166200fd64901",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa754cb0e54a9d82bc6b19da528166200fd64901",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa754cb0e54a9d82bc6b19da528166200fd64901/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 2,
      "deletions": 12
    },
    "files": [
      {
        "sha": "adb7b1485e8508f2507e2e0897362b673eb40ba8",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa754cb0e54a9d82bc6b19da528166200fd64901/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa754cb0e54a9d82bc6b19da528166200fd64901/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fa754cb0e54a9d82bc6b19da528166200fd64901",
        "patch": "@@ -17,8 +17,6 @@\n #include <atomic>\n #include <string>\n \n-#include <boost/thread.hpp>\n-\n namespace DBKeys {\n const std::string ACENTRY{\"acentry\"};\n const std::string BESTBLOCK_NOMERKLE{\"bestblock_nomerkle\"};\n@@ -487,11 +485,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 pwallet->WalletLogPrintf(\"%s\\n\", strErr);\n         }\n         pcursor->close();\n-    }\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n-    catch (...) {\n+    } catch (...) {\n         result = DBErrors::CORRUPT;\n     }\n \n@@ -593,11 +587,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n             }\n         }\n         pcursor->close();\n-    }\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n-    catch (...) {\n+    } catch (...) {\n         result = DBErrors::CORRUPT;\n     }\n "
      }
    ]
  },
  {
    "sha": "fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTliZmVmMjM0Y2I5YmIyYTZiZjI1NWQyZjI1Y2ViMGRmMmIzOWVi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T22:22:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T22:44:01Z"
      },
      "message": "scheduler: Switch to std::thread\n\nThe scheduler switched to std::condition_variable in commit\nd0ebd93270758ea97ea956b8821e17a2d001ea94 and it thus no longer\ninterruptible. All call sites can be updated to use std::thread",
      "tree": {
        "sha": "53a6c14c32c84558574a175f5f700f8b5b9ae6e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a6c14c32c84558574a175f5f700f8b5b9ae6e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5UQwAlS+exbYRGGynOxGi7Mhl4QGdhnnbnoah98yt6+foyQLx9wyT3rjmfLar\nQYCqGAUjGo6C43H+P8cDG474AMPQsbyfoJp+nmRZ++595cA7CxEWXYHvd7HVrRju\nqZ4vqB3Zq0NzRGLP+M2dHxCvLfUGWY4kpqgfl4H1SjZ8+ODhCcbo1sZgCXkcU3FU\nk9kWqz4m/Xy/BtlrrrZjBDQ26GSl4TzKCjG6pCyb0gGYPK+TLdWLXHa0p8B3/+PP\nu0LiP9y0R4qWLN3EoAegW+T62juH5RHcdGaukp0/uUrarQmHfHkxsxkV2tOT0l7k\nVskEX8XLRsSp5iru9iTh3MOINChtRNEzvmys28DaJi/OVEnoHST36HAyU8xwy79J\nofOud+Y/UpsFun51yNzSh3EOIE3cVlqEMZp8OguAfIrjrZoCObmdSqdgmpWqkZfY\neHobsF/cxBKZ1cErViO+a9CiOcjLfYeFIf9Ev9KYd9xdPS1JL27jXnPEvb1iOjGE\n2+cS1WQC\n=LVcr\n-----END PGP SIGNATURE-----",
        "payload": "tree 53a6c14c32c84558574a175f5f700f8b5b9ae6e4\nparent fa754cb0e54a9d82bc6b19da528166200fd64901\nauthor MarcoFalke <falke.marco@gmail.com> 1584051727 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1584053041 -0400\n\nscheduler: Switch to std::thread\n\nThe scheduler switched to std::condition_variable in commit\nd0ebd93270758ea97ea956b8821e17a2d001ea94 and it thus no longer\ninterruptible. All call sites can be updated to use std::thread\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa754cb0e54a9d82bc6b19da528166200fd64901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa754cb0e54a9d82bc6b19da528166200fd64901",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa754cb0e54a9d82bc6b19da528166200fd64901"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 18,
      "deletions": 19
    },
    "files": [
      {
        "sha": "afcb79ebb9bb5a93946ac4c73097e3bb8a8434c0",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
        "patch": "@@ -5,11 +5,6 @@\n #ifndef BITCOIN_SCHEDULER_H\n #define BITCOIN_SCHEDULER_H\n \n-//\n-// NOTE:\n-// boost::thread should be ported to std::thread\n-// when we support C++11.\n-//\n #include <condition_variable>\n #include <functional>\n #include <list>\n@@ -26,7 +21,7 @@\n // CScheduler* s = new CScheduler();\n // s->scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n // s->scheduleFromNow(std::bind(Class::func, this, argument), 3);\n-// boost::thread* t = new boost::thread(std::bind(CScheduler::serviceQueue, s));\n+// std::thread* t = new std::thread([&] { s->serviceQueue(); });\n //\n // ... then at program shutdown, make sure to call stop() to clean up the thread(s) running serviceQueue:\n // s->stop();"
      },
      {
        "sha": "918034192afcefa90131681242be79482b05e1e3",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
        "patch": "@@ -6,15 +6,16 @@\n #include <scheduler.h>\n #include <util/time.h>\n \n-#include <boost/thread.hpp>\n+#include <thread>\n+\n #include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(scheduler_tests)\n \n-static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, std::chrono::system_clock::time_point rescheduleTime)\n+static void microTask(CScheduler& s, Mutex& mutex, int& counter, int delta, std::chrono::system_clock::time_point rescheduleTime)\n {\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        LOCK(mutex);\n         counter += delta;\n     }\n     std::chrono::system_clock::time_point noTime = std::chrono::system_clock::time_point::min();\n@@ -38,7 +39,7 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     // counters should sum to the number of initial tasks performed.\n     CScheduler microTasks;\n \n-    boost::mutex counterMutex[10];\n+    Mutex counterMutex[10];\n     int counter[10] = { 0 };\n     FastRandomContext rng{/* fDeterministic */ true};\n     auto zeroToNine = [](FastRandomContext& rc) -> int { return rc.randrange(10); }; // [0, 9]\n@@ -66,16 +67,16 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK(last > now);\n \n     // As soon as these are created they will start running and servicing the queue\n-    boost::thread_group microThreads;\n+    std::vector<std::thread> micro_threads;\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n+        micro_threads.emplace_back([&] { microTasks.serviceQueue(); });\n \n     UninterruptibleSleep(std::chrono::microseconds{600});\n     now = std::chrono::system_clock::now();\n \n     // More threads and more tasks:\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n+        micro_threads.emplace_back([&] { microTasks.serviceQueue(); });\n     for (int i = 0; i < 100; i++) {\n         std::chrono::system_clock::time_point t = now + std::chrono::microseconds(randomMsec(rng));\n         std::chrono::system_clock::time_point tReschedule = now + std::chrono::microseconds(500 + randomMsec(rng));\n@@ -88,7 +89,10 @@ BOOST_AUTO_TEST_CASE(manythreads)\n \n     // Drain the task queue then exit threads\n     microTasks.stop(true);\n-    microThreads.join_all(); // ... wait until all the threads are done\n+    // ... wait until all the threads are done\n+    for (auto& thread : micro_threads) {\n+        thread.join();\n+    }\n \n     int counterSum = 0;\n     for (int i = 0; i < 10; i++) {\n@@ -128,9 +132,9 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // if the queues only permit execution of one task at once then\n     // the extra threads should effectively be doing nothing\n     // if they don't we'll get out of order behaviour\n-    boost::thread_group threads;\n+    std::vector<std::thread> threads;\n     for (int i = 0; i < 5; ++i) {\n-        threads.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n+        threads.emplace_back([&] { scheduler.serviceQueue(); });\n     }\n \n     // these are not atomic, if SinglethreadedSchedulerClient prevents\n@@ -154,7 +158,9 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n \n     // finish up\n     scheduler.stop(true);\n-    threads.join_all();\n+    for (auto& thread : threads) {\n+        thread.join();\n+    }\n \n     BOOST_CHECK_EQUAL(counter1, 100);\n     BOOST_CHECK_EQUAL(counter2, 100);"
      },
      {
        "sha": "24369a48175e1fa46a0c0190a9e2da89f0015e91",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
        "patch": "@@ -72,8 +72,6 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n \n     // txindex job may be scheduled, so stop scheduler before destructing\n     m_node.scheduler->stop();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n \n     // Rest of shutdown sequence and destructors happen in ~TestingSetup()\n }"
      }
    ]
  },
  {
    "sha": "fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTlmMjllMDhlNDg0M2Q0ZDk4ZDJiYmFjZjk2MDJmNWZkMmJjZGI4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T22:00:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T23:45:26Z"
      },
      "message": "init: Remove boost::thread_group",
      "tree": {
        "sha": "f7fccd569638ea4e0d3f71cf7dc1c408ef7d00f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7fccd569638ea4e0d3f71cf7dc1c408ef7d00f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiK9gwAs6ZUbSAzBfziTAbO0nuH3mypocJvN7BGOhWkE9J2Sjs5h8Uv82n15yRi\nvWhynierPwxtX0/i2Lk3/GsuvLlQqIPvnBKf3ml5XNzQ/DmJDYXULRLZgEU7JEIH\n6HWgZQvNCKqHQvcIesDOhxGsjPgq8lAtJdgnbZzOsX5AInMhPxIpq5P0JQeu+XhN\nOrYtlC7isgai9nkc8xKxykbxzSSNRN9g44bfErJcwiw49tsEzJuJ8h+B9iybdKTO\nseqK91qAALc3ayPoBsMj3lDxpYZXF/ztcZNaZe5v2ICW7+IVQZhDIzhGHHR8gZIm\nTUj/sKm7HJLWX1JMCb3p5tQ2h8sD00kjNt0JGxW3PBliw2Yw0e9hy8lPrgYgi3Iv\nA5RehqdFVVSXOptae1VkLkPTYw2jww/nqzkA+ChGKGyxPJD2pv0W0WmOWucFPS0W\nnPPXL+v7RslWm8VbMF/3mZ17IrW+AksQz5TUzcsPPL4muUnr+6UR3Q5otgtzX03m\n6haq/5ol\n=I8mB\n-----END PGP SIGNATURE-----",
        "payload": "tree f7fccd569638ea4e0d3f71cf7dc1c408ef7d00f0\nparent fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb\nauthor MarcoFalke <falke.marco@gmail.com> 1584050402 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1584056726 -0400\n\ninit: Remove boost::thread_group\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9bfef234cb9bb2a6bf255d2f25ceb0df2b39eb"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 23,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b14ee73b2c33bd6be758efc8d000e3142df5fd44",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
        "patch": "@@ -155,8 +155,6 @@ NODISCARD static bool CreatePidFile()\n \n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n-static boost::thread_group threadGroup;\n-\n void Interrupt(NodeContext& node)\n {\n     InterruptHTTPServer();\n@@ -205,10 +203,17 @@ void Shutdown(NodeContext& node)\n     StopTorControl();\n \n     // After everything has been shut down, but before things get flushed, stop the\n-    // CScheduler/checkqueue threadGroup\n+    // CScheduler/checkqueue thread group\n     if (node.scheduler) node.scheduler->stop();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+    if (node.thread_group) {\n+        for (auto& thread : *node.thread_group) {\n+            thread.interrupt();\n+        }\n+        for (auto& thread : *node.thread_group) {\n+            thread.join();\n+        }\n+    }\n+    node.thread_group.reset();\n \n     // After the threads that potentially access these pointers have been stopped,\n     // destruct and reset all to nullptr.\n@@ -1247,6 +1252,9 @@ bool AppInitMain(NodeContext& node)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n+    assert(!node.thread_group);\n+    node.thread_group = MakeUnique<std::vector<boost::thread>>();\n+\n     int script_threads = gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n@@ -1264,7 +1272,7 @@ bool AppInitMain(NodeContext& node)\n     if (script_threads >= 1) {\n         g_parallel_script_checks = true;\n         for (int i = 0; i < script_threads; ++i) {\n-            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+            node.thread_group->emplace_back([i]() { return ThreadScriptCheck(i); });\n         }\n     }\n \n@@ -1273,7 +1281,7 @@ bool AppInitMain(NodeContext& node)\n \n     // Start the lightweight task scheduler thread\n     CScheduler::Function serviceLoop = [&node]{ node.scheduler->serviceQueue(); };\n-    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    node.thread_group->emplace_back([=] { TraceThread(\"scheduler\", serviceLoop); });\n \n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{\n@@ -1757,7 +1765,7 @@ bool AppInitMain(NodeContext& node)\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n+    node.thread_group->emplace_back([=] { ThreadImport(vImportFiles); });\n \n     // Wait for genesis block to be processed\n     {"
      },
      {
        "sha": "60378b7c5704b5fc73f93f921e34614757935d41",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
        "patch": "@@ -10,5 +10,7 @@\n #include <net_processing.h>\n #include <scheduler.h>\n \n+#include <boost/thread.hpp>\n+\n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "c74b9a4f5bcd5edd4f6de72ef5d258d62951419a",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
        "patch": "@@ -17,6 +17,9 @@ namespace interfaces {\n class Chain;\n class ChainClient;\n } // namespace interfaces\n+namespace boost {\n+class thread;\n+}\n \n //! NodeContext struct containing references to chain state and connection\n //! state.\n@@ -36,6 +39,8 @@ struct NodeContext {\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n+    /** The thread group used by the scheduler and checkqueue. */\n+    std::unique_ptr<std::vector<boost::thread>> thread_group;\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      }
    ]
  },
  {
    "sha": "fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTAyY2UwYTM2YTkzNDBjNDdjNmRmZDZmMDE1YTE1NjNhNjE4OGZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T23:02:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T23:48:45Z"
      },
      "message": "test: Remove boost::thread_group",
      "tree": {
        "sha": "45cf14bbf76247be3171512398de7339365c0896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45cf14bbf76247be3171512398de7339365c0896"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh7bQwAp07uskBIuJVIFFmmr5Kk6o6QgFf4uP6rfFMVJ2c8sgvvqlB2/MQeaEAJ\nvDSO6SwayEu3vsKZP91Jd+AUM4xeIQIt8UzH/oZ8z5oiyH0aOTuKFiUluuMMBMWY\niPkm+pKh7togz5BGbuoEGEUpmRCWOhfZUW/0K9sJwNfWcIsXwOeIKQATLuWrvDCk\nZbF88+wvKEugWy+6gEUVjyOPEOodlkWf4DOhXZSVVWrn7QGqt2879CDaKiqlJFBr\napgbC8tbe2B3r9UUZDGiyJ1TwwVlMhnsQ/B9xwUtwJTfeFQxGsuh+BNPnowRo1S5\n+TqSMr9Gs0SkLvVf9AnW3xvEErsu+d3q5dhE01OCqaS28gJifTqvNdC9zKE4A+BP\nd1seh1wZpeoQIyBUT0C6dgGp2Eva6jx/ymxOr/V5BDdpZ6IE0XTe/1TLeYn/wMbE\nM94Owt0MdKGBldFArC7tx63DC+BM4APKNQAMYUfWe8C8taoonnKjYTimhD4S9v40\nwiczU+oi\n=j6GR\n-----END PGP SIGNATURE-----",
        "payload": "tree 45cf14bbf76247be3171512398de7339365c0896\nparent fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8\nauthor MarcoFalke <falke.marco@gmail.com> 1584054151 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1584056925 -0400\n\ntest: Remove boost::thread_group\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9f29e08e4843d4d98d2bbacf9602f5fd2bcdb8"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 92,
      "deletions": 47
    },
    "files": [
      {
        "sha": "69ee8d4e5a773b6212fb51e0f145d3fa5f9a1a89",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -36,9 +36,9 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         void swap(PrevectorJob& x){p.swap(x.p);};\n     };\n     CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n-       tg.create_thread([&]{queue.Thread();});\n+        tg.emplace_back([&] { queue.Thread(); });\n     }\n     while (state.KeepRunning()) {\n         // Make insecure_rand here so that each iteration is identical.\n@@ -55,7 +55,11 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         // it is done explicitly here for clarity\n         control.Wait();\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);"
      },
      {
        "sha": "37dfc6359ec78e5a1ef29f168e3ebec048deb9ef",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 32,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -147,9 +147,9 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n     auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{small_queue->Thread();});\n+        tg.emplace_back([&] { small_queue->Thread(); });\n     }\n     // Make vChecks here to save on malloc (this test can be slow...)\n     std::vector<FakeCheckCheckCompletion> vChecks;\n@@ -167,8 +167,12 @@ static void Correct_Queue_range(std::vector<size_t> range)\n             BOOST_REQUIRE_EQUAL(FakeCheckCheckCompletion::n_calls, i);\n         }\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n }\n \n /** Test that 0 checks is correct\n@@ -212,9 +216,9 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n \n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n+        tg.emplace_back([&] { fail_queue->Thread(); });\n     }\n \n     for (size_t i = 0; i < 1001; ++i) {\n@@ -236,17 +240,21 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n             BOOST_REQUIRE(success);\n         }\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n }\n // Test that a block validation which fails does not interfere with\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n+        tg.emplace_back([&] { fail_queue->Thread(); });\n     }\n \n     for (auto times = 0; times < 10; ++times) {\n@@ -262,8 +270,12 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n             BOOST_REQUIRE(r != end_fails);\n         }\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n }\n \n // Test that unique checks are actually all called individually, rather than\n@@ -272,10 +284,9 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n     auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-\n+        tg.emplace_back([&] { queue->Thread(); });\n     }\n \n     size_t COUNT = 100000;\n@@ -295,8 +306,12 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n     for (size_t i = 0; i < COUNT; ++i)\n         r = r && UniqueCheck::results.count(i) == 1;\n     BOOST_REQUIRE(r);\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n }\n \n \n@@ -308,9 +323,9 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n     auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n+        tg.emplace_back([&] { queue->Thread(); });\n     }\n     for (size_t i = 0; i < 1000; ++i) {\n         size_t total = i;\n@@ -330,19 +345,23 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         }\n         BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n }\n \n // Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n     auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    std::vector<boost::thread> tg;\n     bool fails = false;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n-        tg.create_thread([&]{queue->Thread();});\n+        tg.emplace_back([&] { queue->Thread(); });\n     }\n     std::thread t0([&]() {\n         CCheckQueueControl<FrozenCleanupCheck> control(queue.get());\n@@ -373,8 +392,12 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     FrozenCleanupCheck::cv.notify_one();\n     // Wait for control to finish\n     t0.join();\n-    tg.interrupt_all();\n-    tg.join_all();\n+    for (auto& thread : tg) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : tg) {\n+        thread.join();\n+    }\n     BOOST_REQUIRE(!fails);\n }\n \n@@ -384,11 +407,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n {\n     auto queue = MakeUnique<Standard_Queue>(QUEUE_BATCH_SIZE);\n     {\n-        boost::thread_group tg;\n+        std::vector<boost::thread> tg;\n         std::atomic<int> nThreads {0};\n         std::atomic<int> fails {0};\n         for (size_t i = 0; i < 3; ++i) {\n-            tg.create_thread(\n+            tg.emplace_back(\n                     [&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());\n                     // While sleeping, no other thread should execute to this point\n@@ -397,11 +420,13 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n                     fails += observed  != nThreads;\n                     });\n         }\n-        tg.join_all();\n+        for (auto& thread : tg) {\n+            thread.join();\n+        }\n         BOOST_REQUIRE_EQUAL(fails, 0);\n     }\n     {\n-        boost::thread_group tg;\n+        std::vector<boost::thread> tg;\n         std::mutex m;\n         std::condition_variable cv;\n         bool has_lock{false};\n@@ -410,7 +435,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         bool done_ack{false};\n         {\n             std::unique_lock<std::mutex> l(m);\n-            tg.create_thread([&]{\n+            tg.emplace_back([&] {\n                     CCheckQueueControl<FakeCheck> control(queue.get());\n                     std::unique_lock<std::mutex> ll(m);\n                     has_lock = true;\n@@ -436,8 +461,9 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n             cv.notify_one();\n             BOOST_REQUIRE(!fails);\n         }\n-        tg.join_all();\n+        for (auto& thread : tg) {\n+            thread.join();\n+        }\n     }\n }\n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "f9a781cdc1126d3e29b5790010f70c230638065f",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -9,6 +9,9 @@\n #include <thread>\n #include <deque>\n \n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/shared_mutex.hpp>\n+\n /** Test Suite for CuckooCache\n  *\n  *  1. All tests should have a deterministic result (using insecure rand"
      },
      {
        "sha": "b5d3e01d536600c0326f794a1194bfbd231ff461",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -30,6 +30,7 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/thread.hpp>\n \n #include <univalue.h>\n \n@@ -426,12 +427,12 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n \n     // check all inputs concurrently, with the cache\n     PrecomputedTransactionData txdata(tx);\n-    boost::thread_group threadGroup;\n+    std::vector<boost::thread> thread_group;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n     CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n \n     for (int i=0; i<20; i++)\n-        threadGroup.create_thread(std::bind(&CCheckQueue<CScriptCheck>::Thread, std::ref(scriptcheckqueue)));\n+        thread_group.emplace_back([&] { scriptcheckqueue.Thread(); });\n \n     std::vector<Coin> coins;\n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n@@ -454,8 +455,12 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n     bool controlCheck = control.Wait();\n     assert(controlCheck);\n \n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+    for (auto& thread : thread_group) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : thread_group) {\n+        thread.join();\n+    }\n }\n \n SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)"
      },
      {
        "sha": "f6816e6775b7d15654b9f05ccd8491e32829f659",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -31,6 +31,8 @@\n \n #include <functional>\n \n+#include <boost/thread.hpp>\n+\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n FastRandomContext g_insecure_rand_ctx;\n@@ -105,9 +107,10 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n     m_node.scheduler = MakeUnique<CScheduler>();\n \n+    m_node.thread_group = MakeUnique<std::vector<boost::thread>>();\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n-    threadGroup.create_thread([&]{ m_node.scheduler->serviceQueue(); });\n+    m_node.thread_group->emplace_back([&] { m_node.scheduler->serviceQueue(); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*g_rpc_node->scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n@@ -129,7 +132,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n     for (int i = 0; i < script_check_threads; ++i) {\n-        threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        m_node.thread_group->emplace_back([i]() { return ThreadScriptCheck(i); });\n     }\n     g_parallel_script_checks = true;\n \n@@ -143,8 +146,13 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n TestingSetup::~TestingSetup()\n {\n     if (m_node.scheduler) m_node.scheduler->stop();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+    for (auto& thread : *m_node.thread_group) {\n+        thread.interrupt();\n+    }\n+    for (auto& thread : *m_node.thread_group) {\n+        thread.join();\n+    }\n+    m_node.thread_group.reset();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     g_rpc_node = nullptr;"
      },
      {
        "sha": "71aab630ff0d43842ef3ec25cea5a50985372ee7",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -16,8 +16,6 @@\n \n #include <type_traits>\n \n-#include <boost/thread.hpp>\n-\n /** This is connected to the logger. Can be used to redirect logs to any other log */\n extern const std::function<void(const std::string&)> G_TEST_LOG_FUN;\n \n@@ -84,7 +82,6 @@ struct BasicTestingSetup {\n  */\n struct TestingSetup : public BasicTestingSetup {\n     NodeContext m_node;\n-    boost::thread_group threadGroup;\n \n     explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      },
      {
        "sha": "1103d3e075c32e8cf82f73e79e1b98f70858810b",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa02ce0a36a9340c47c6dfd6f015a1563a6188fb/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=fa02ce0a36a9340c47c6dfd6f015a1563a6188fb",
        "patch": "@@ -69,7 +69,9 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/test/unit_test.hpp\n     boost/thread.hpp\n     boost/thread/condition_variable.hpp\n+    boost/thread/locks.hpp\n     boost/thread/mutex.hpp\n+    boost/thread/shared_mutex.hpp\n     boost/thread/thread.hpp\n     boost/variant.hpp\n     boost/variant/apply_visitor.hpp"
      }
    ]
  }
]