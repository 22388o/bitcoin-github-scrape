[
  {
    "sha": "9fce0629b437441cb09c14055ee810b8ee6b7978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmNlMDYyOWI0Mzc0NDFjYjA5YzE0MDU1ZWU4MTBiOGVlNmI3OTc4",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2016-06-18T17:38:28Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2016-06-18T17:38:28Z"
      },
      "message": "[c++11] Use std::unique_ptr for block creation.\n\nCreateNewBlock returns a pointer for which the caller takes ownership.\nUse std::unique_ptr to make this explicit and simplify handling of these\nobjects in getblocktemplate.",
      "tree": {
        "sha": "d7bfbb98986afba0d89a97d5c9824398d8a1feda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7bfbb98986afba0d89a97d5c9824398d8a1feda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fce0629b437441cb09c14055ee810b8ee6b7978",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fce0629b437441cb09c14055ee810b8ee6b7978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fce0629b437441cb09c14055ee810b8ee6b7978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fce0629b437441cb09c14055ee810b8ee6b7978/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed2cd59e258f756b2eaed7909a60956ade6ef7ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2cd59e258f756b2eaed7909a60956ade6ef7ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed2cd59e258f756b2eaed7909a60956ade6ef7ee"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 15,
      "deletions": 24
    },
    "files": [
      {
        "sha": "d38ccedf554e31f6a22b477508791560271ef79a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fce0629b437441cb09c14055ee810b8ee6b7978/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fce0629b437441cb09c14055ee810b8ee6b7978/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9fce0629b437441cb09c14055ee810b8ee6b7978",
        "patch": "@@ -29,6 +29,7 @@\n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <queue>\n+#include <utility>\n \n using namespace std;\n \n@@ -102,14 +103,14 @@ void BlockAssembler::resetBlock()\n     blockFinished = false;\n }\n \n-CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     resetBlock();\n \n     pblocktemplate.reset(new CBlockTemplate());\n \n     if(!pblocktemplate.get())\n-        return NULL;\n+        return nullptr;\n     pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Add dummy coinbase tx as first transaction\n@@ -164,7 +165,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n \n-    return pblocktemplate.release();\n+    return std::move(pblocktemplate);\n }\n \n bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)"
      },
      {
        "sha": "54c680b5ffd9dbad7ef5a1cfc7c8e242d2bc8cff",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fce0629b437441cb09c14055ee810b8ee6b7978/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fce0629b437441cb09c14055ee810b8ee6b7978/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=9fce0629b437441cb09c14055ee810b8ee6b7978",
        "patch": "@@ -160,7 +160,7 @@ class BlockAssembler\n public:\n     BlockAssembler(const CChainParams& chainparams);\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n \n private:\n     // utility functions"
      },
      {
        "sha": "162f4a0721e3b85f7a10dd4be2d7b2553558b9aa",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fce0629b437441cb09c14055ee810b8ee6b7978/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fce0629b437441cb09c14055ee810b8ee6b7978/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9fce0629b437441cb09c14055ee810b8ee6b7978",
        "patch": "@@ -22,6 +22,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n+#include <memory>\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n@@ -508,24 +509,19 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     // Update block\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n-    static CBlockTemplate* pblocktemplate;\n+    static std::unique_ptr<CBlockTemplate> pblocktemplate;\n     if (pindexPrev != chainActive.Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n-        pindexPrev = NULL;\n+        pindexPrev = nullptr;\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n         CBlockIndex* pindexPrevNew = chainActive.Tip();\n         nStart = GetTime();\n \n         // Create new block\n-        if(pblocktemplate)\n-        {\n-            delete pblocktemplate;\n-            pblocktemplate = NULL;\n-        }\n         CScript scriptDummy = CScript() << OP_TRUE;\n         pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)"
      },
      {
        "sha": "7b087763d09d4d7ec13d3fae1b2a143e2d47f35a",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fce0629b437441cb09c14055ee810b8ee6b7978/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fce0629b437441cb09c14055ee810b8ee6b7978/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=9fce0629b437441cb09c14055ee810b8ee6b7978",
        "patch": "@@ -18,6 +18,8 @@\n \n #include \"test/test_bitcoin.h\"\n \n+#include <memory>\n+\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n@@ -105,7 +107,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     uint256 hashHighFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashHighFeeTx, entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    CBlockTemplate *pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1].GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2].GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3].GetHash() == hashMediumFeeTx);\n@@ -183,7 +185,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    CBlockTemplate *pblocktemplate;\n+    std::unique_ptr<CBlockTemplate> pblocktemplate;\n     CMutableTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n@@ -225,11 +227,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n-    delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -268,7 +268,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     mempool.clear();\n \n     // block size > limit\n@@ -289,7 +288,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool, template creation fails\n@@ -313,7 +311,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     mempool.clear();\n \n     // coinbase in mempool, template creation fails\n@@ -371,7 +368,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         chainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     // Extend to a 210000-long block chain.\n     while (chainActive.Tip()->nHeight < 210000) {\n         CBlockIndex* prev = chainActive.Tip();\n@@ -384,7 +380,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         chainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     // Delete the dummy blocks again.\n     while (chainActive.Tip()->nHeight > nHeight) {\n         CBlockIndex* del = chainActive.Tip();\n@@ -477,7 +472,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // but relative locked txs will if inconsistently added to mempool.\n     // For now these will still generate a valid template until BIP68 soft fork\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n-    delete pblocktemplate;\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n@@ -486,7 +480,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n-    delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);"
      },
      {
        "sha": "98b02a1f6fc073af74c1c47e91af1edc4ea1a5c6",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fce0629b437441cb09c14055ee810b8ee6b7978/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fce0629b437441cb09c14055ee810b8ee6b7978/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=9fce0629b437441cb09c14055ee810b8ee6b7978",
        "patch": "@@ -22,6 +22,8 @@\n \n #include \"test/testutil.h\"\n \n+#include <memory>\n+\n #include <boost/filesystem.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/thread.hpp>\n@@ -98,7 +100,7 @@ CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    CBlockTemplate *pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:\n@@ -115,7 +117,6 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n \n     CBlock result = block;\n-    delete pblocktemplate;\n     return result;\n }\n "
      }
    ]
  }
]