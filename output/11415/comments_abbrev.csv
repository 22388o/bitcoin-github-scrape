achow101,2017-10-02T20:40:19Z,"> I don't love the `only_pubkeys` argument in `_createmultisig_getpubkeys()`. \n\nI don't really either. I was trying to avoid as much code duplication as possible, but I guess that can't really be avoided.\n\n> I'm also not a huge fan of passing the address/keys in as a UniValue reference. Is it possible to change `_createmultisig_getpubkeys()` and `_createmultisig_getaddr_pubkeys()` to both ",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-333658263,333658263,
jnewbery,2017-10-02T20:53:58Z,">  the original behavior could be hidden behind a -deprecatedrpc argument but I'm not sure how useful that is.\n\nThe only reason would be to not break clients that are expecting a string and now receive a JSON object when they upgrade to v0.16. Hiding behind the `-deprecatedrpc` argument give them breathing space to upgrade the client.\n\nI don't know if this would really be a problem for use",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-333661952,333661952,
achow101,2017-10-02T23:11:02Z,The latest commit changes the loop to happen in the RPC call body and changes the two helper functions to take a single pubkey and string instead of vectors and UniValue. I have also put the old `addmultisigaddress` behavior behind `-deprecatedrpc`.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-333691062,333691062,
jonasschnelli,2017-10-04T05:32:54Z,"Concept ACK. API change, added the ""Needs release notes"" tag.",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-334054124,334054124,
achow101,2017-10-13T18:21:39Z,Rebased to fix travis.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-336530573,336530573,
jnewbery,2017-10-13T19:06:20Z,"sorry @achow101 , you'll also need to change https://github.com/bitcoin/bitcoin/pull/11415/files#diff-8f3a598a6e52799596008ae7c19d1333R23 to use `assert_raises_rpc_error()`",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-336541284,336541284,
achow101,2017-10-13T21:29:56Z,"Actually fixed travis this time, I think.",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-336572174,336572174,
jnewbery,2017-10-13T22:18:14Z,Tested ACK ac33d788e2d7dbfdf760f3a620c86eeaf7cff3fd,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-336580705,336580705,
jnewbery,2017-11-08T13:32:44Z,Build fails locally and on Travis. Will review once build is fixed.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-342818226,342818226,
achow101,2017-11-08T16:46:29Z,"> Build fails locally and on Travis. Will review once build is fixed.\n\nEhh.. It works fine for me locally :/ (even after `git clean -fdx`)",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-342878478,342878478,
ryanofsky,2017-11-08T17:26:06Z,"> Ehh.. It works fine for me locally :/ (even after git clean -fdx)\n\nI get the errors from travis locally. Following fix worked for me:\n\n```diff\n--- a/src/rpc/server.cpp\n+++ b/src/rpc/server.cpp\n@@ -11,7 +11,7 @@\n #include ""random.h""\n #include ""sync.h""\n #include ""ui_interface.h""\n-#include ""util.h""\n+#include <util.h>\n #include ""utilstrencodings.h""\n \n #include <univalue",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-342891668,342891668,
achow101,2017-11-08T19:29:40Z,Addressed @ryanofsky's comments and am trying his fix.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-342932192,342932192,
achow101,2017-11-10T18:42:19Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-343553487,343553487,
jnewbery,2017-11-14T21:40:10Z,Latest changes look good. Tested ACK bac7e31a84d47081e4bc441780ec2a25892d3447,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-344408029,344408029,
achow101,2017-11-30T16:48:04Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-348248522,348248522,
jnewbery,2017-12-01T19:53:18Z,"utACK 18eb69cb3987def797c74110c2fc2d27a8d0a767.\n\nI've eyeballed the rebase. Changes are limited to fixing up the #include conflicts.",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-348598292,348598292,
achow101,2017-12-15T19:30:23Z,@laanwj I think this is ready to be merged.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-352091849,352091849,
achow101,2017-12-22T23:08:34Z,Merge please?,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-353688401,353688401,
achow101,2017-12-22T23:16:42Z,"> deprectaed\n\nGrr. fixed.",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-353689089,353689089,
achow101,2017-12-23T02:03:39Z,Had to rebase and fix `wallet-dump.py` to fix the travis failure.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-353700569,353700569,
achow101,2018-01-11T19:13:56Z,Rebased again.,https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-357030958,357030958,
jnewbery,2018-01-23T21:00:10Z,"Sadly this is going to need another substantial rebase if #12213 gets merged.\n\nThis has been rebased 5 times and has received several rounds of review:\n\n- ACK from me (x4)\n- utACK from @ryanofsky (x8)\n- utACK from @TheBlueMatt (x1)\n\n@achow101 and I have asked for merge a couple of times here and in IRC.\n\nMaintainers - is there anything we can do to get this unblocked? Are you w",https://github.com/bitcoin/bitcoin/pull/11415#issuecomment-359928672,359928672,
jnewbery,2017-10-02T20:18:36Z,Can we rename this variable `keys_or_addresses` (and the same in `addmultisigaddress`) so it's clear that these could be keys or addresses.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142243684,142243684,src/rpc/misc.cpp
promag,2017-10-02T23:45:41Z,"Put inside a block?\n```cpp\n    } else {\n#else\n    {\n#endif\n        _createmultisig_hex_to_pubkey(pubkeys.at(i), keys[i].get_str());\n    }\n```",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142283676,142283676,src/rpc/misc.cpp
jnewbery,2017-10-03T20:33:25Z,"This can be made simpler:\n\n```\n    if (IsDeprecatedRPCEnabled(""addmultisigaddress"")) {\n        // Old-style interface: just return the address\n        return EncodeDestination(innerID);\n    }\n\n    // return an object containing the address and redeem script\n    UniValue result(UniValue::VOBJ);\n    result.pushKV(""address"", EncodeDestination(innerID));\n    result.pushKV(""redeem",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142514601,142514601,src/wallet/rpcwallet.cpp
jnewbery,2017-10-03T20:34:44Z,Suggestion: name this variable `keys_or_addresses`,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142514964,142514964,src/wallet/rpcwallet.cpp
jnewbery,2017-10-03T20:42:40Z,"There's an implicit assumption here that if `ENABLE_WALLET` is true then there will necessarily be a wallet available. That may be broken by dynamic wallet load/unload. If we allow the wallet to be unloaded then this rpc will stop working.\n\nThe else statement is also unnecessary (once we reach line 302, then both branches converge to calling `_createmultisig_hex_to_pubkey()`).\n\nHow about:",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142517063,142517063,src/rpc/misc.cpp
jnewbery,2017-10-03T20:42:56Z,I think the else branch is unnecessary here. See comment above.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142517121,142517121,src/rpc/misc.cpp
jnewbery,2017-10-03T20:43:22Z,Can you replace these errors with better JSON errors?,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142517234,142517234,src/rpc/misc.cpp
jnewbery,2017-10-03T20:45:47Z,"Perhaps add a note into the error text here: ""Note that from V0.16, createmultisig no longer accepts addresses. Clients must transition to using addmultisigaddress to create multisig addresses with addresses known to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig""\n\nThis is the error that clients will hit if they're r",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142517851,142517851,src/rpc/misc.cpp
promag,2017-10-04T07:00:41Z,Agree.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142593513,142593513,src/rpc/misc.cpp
promag,2017-10-04T07:02:30Z,Should have tests for these `JSONRPCError`.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142593730,142593730,src/rpc/misc.cpp
achow101,2017-10-05T16:36:03Z,Removed the `else` branch.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991034,142991034,src/rpc/misc.cpp
achow101,2017-10-05T16:36:12Z,Renamed to `keys_or_addrs`,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991074,142991074,src/wallet/rpcwallet.cpp
achow101,2017-10-05T16:36:16Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991090,142991090,src/wallet/rpcwallet.cpp
achow101,2017-10-05T16:36:20Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991112,142991112,src/rpc/misc.cpp
achow101,2017-10-05T16:36:25Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991136,142991136,src/rpc/misc.cpp
achow101,2017-10-05T16:36:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991160,142991160,src/rpc/misc.cpp
achow101,2017-10-05T16:37:10Z,Is that really necessary?,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r142991327,142991327,src/rpc/misc.cpp
promag,2017-10-07T08:09:12Z,"IMO yes, should always test success and failure cases as this is an interface others use.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r143325742,143325742,src/rpc/misc.cpp
promag,2017-10-07T08:18:21Z,"Split in two loops:\n```cpp\n#ifdef ENABLE_WALLET\nCWallet* const pwallet = GetWalletForJSONRPCRequest(request);\nif (IsDeprecatedRPCEnabled(""createmultisig"") && EnsureWalletIsAvailable(pwallet, request.fHelp) && pwallet) {\n    // call _createmultisig_addr_to_pubkey for each key\n}\n#endif // ENABLE_WALLET\n\n// call _createmultisig_hex_to_pubkey for each key\n```",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r143325892,143325892,src/rpc/misc.cpp
achow101,2017-10-12T18:24:40Z,Why?,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144371508,144371508,src/rpc/misc.cpp
achow101,2017-10-12T18:41:52Z,Added a test in `rawtransactions.py`,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144376550,144376550,src/rpc/misc.cpp
ryanofsky,2017-10-13T15:28:06Z,"No need for ENABLE_WALLET macro here.\n\nFollowing would be equivalent:\n\n```c++\nvoid _createmultisig_addr_to_pubkey(class CWallet* const pwallet, CPubKey& pubkey_out, const std::string& addr_in);\n```\n\nextern keyword also doesn't actually do anything, but maybe it is useful to make the declaration stand out more.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144585495,144585495,src/rpc/misc.cpp
ryanofsky,2017-10-13T15:48:31Z,"Guessing it was suggested for efficiency, but I think the code is better the way it is (one loop), since it avoids duplication.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144590639,144590639,src/rpc/misc.cpp
ryanofsky,2017-10-13T15:59:47Z,There is really no reason for this function to live in the wallet. The CWallet* argument could be changed to a CKeyStore argument and this could just be a generic jsonrpc util function without all the weird ifdef and naming and extern declaration stuff.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144593492,144593492,src/wallet/rpcwallet.cpp
achow101,2017-10-13T18:19:55Z,"Sure, that could be done, but is it necessary? Where else would you need to use such a function with a CKeyStore instead of CWallet?",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144624582,144624582,src/wallet/rpcwallet.cpp
achow101,2017-10-13T18:21:29Z,Removed the ifdef here. I'm leaving the `extern` for clarity,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144624927,144624927,src/rpc/misc.cpp
ryanofsky,2017-10-13T18:32:13Z,"Just a suggestion to let you define the two functions together in one place. Please ignore if you don't think this is an improvement, or don't think it is worth the effort.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144627469,144627469,src/wallet/rpcwallet.cpp
jnewbery,2017-10-13T22:03:26Z,"minor nit: Future readers of this test may find it clearer if you add a comment saying that createmultisig can only take keys as inputs, but addmultisigaddress can take a mixture of keys and addrs (as long as the wallet owns those addresses)",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144666019,144666019,test/functional/rawtransactions.py
achow101,2017-10-13T22:14:29Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r144667505,144667505,test/functional/rawtransactions.py
TheBlueMatt,2017-10-17T17:59:37Z,"Dangling "")"" at the end of the err string.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145206971,145206971,src/rpc/misc.cpp
TheBlueMatt,2017-10-17T18:05:47Z,"I find this API super weird - its confusing as-is that we will throw if the hex represents an invalid pubkey but not if the string represents an empty string or something non-hex, expecting two functions which might each optioanlly populate pubkey_out to be called back-to-back. Can you add the IsHex() check in createmultisig/addmultisigaddress itself before the call so that you switch which functi",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145208650,145208650,src/rpc/misc.cpp
TheBlueMatt,2017-10-17T18:11:05Z,"Note that pretty much all EnsureWalletIsAvailable does is a null-check on pwallet, so the && pwallet part is pretty redundant here.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145210159,145210159,src/rpc/misc.cpp
TheBlueMatt,2017-10-17T20:00:58Z,"This error message is somewhat confusing (maybe ""%s is not an address""), but, also, it'd be nice if this also worked for WitnessV0KeyHash as well.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145239090,145239090,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-10-17T20:02:05Z,"I believe we could INTERNAL_ERROR here as wallet should never contain invalid pubkeys (and call the error ""Wallet contains invalid pubkey"" instead).",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145239347,145239347,src/wallet/rpcwallet.cpp
achow101,2017-10-18T23:30:16Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145569444,145569444,src/rpc/misc.cpp
achow101,2017-10-18T23:30:20Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145569455,145569455,src/rpc/misc.cpp
achow101,2017-10-18T23:32:01Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145569725,145569725,src/wallet/rpcwallet.cpp
achow101,2017-10-18T23:32:40Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145569820,145569820,src/rpc/misc.cpp
achow101,2017-10-18T23:58:30Z,I'm not sure what even causes this error to happen.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r145573122,145573122,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-11-07T17:04:21Z,nit: can we get some line breaks here? 400+ char-long line is long....,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149438097,149438097,src/rpc/misc.cpp
TheBlueMatt,2017-11-07T17:55:45Z,"I think you want false for EnsureWalletIsAvailable's second argument (avoidException), which makes EnsureWalletIsAvailable just return true if pwallet is non-null, so you could replace it with that anyway.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149452185,149452185,src/rpc/misc.cpp
TheBlueMatt,2017-11-07T18:02:54Z,"I guess this is now an internal error, given that both _createmultisig_addr_to_pubkey and _createmultisig_hex_to_pubkey throw if !IsFullyValid?",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149454192,149454192,src/rpc/misc.cpp
TheBlueMatt,2017-11-07T18:14:11Z,"I dont think you need to bother deprecating the return value - the old value is still there, just in the address field - I'd say just add this to the release notes and skip this part.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149457301,149457301,src/wallet/rpcwallet.cpp
achow101,2017-11-07T19:00:30Z,That's what I was originally going to do but I think we should be consistent on when and how things are deprecated. So this follows what we have been doing with deprecation of other things.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149470277,149470277,src/wallet/rpcwallet.cpp
achow101,2017-11-07T19:06:53Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149472041,149472041,src/rpc/misc.cpp
achow101,2017-11-07T19:06:58Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149472055,149472055,src/rpc/misc.cpp
achow101,2017-11-07T19:07:38Z,"This check is extraneous now since both `_createmultisig_addr_to_pubkey` and `_createmultisig_hex_to_pubkey` do the same check, so I removed it.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149472257,149472257,src/rpc/misc.cpp
TheBlueMatt,2017-11-07T22:09:16Z,Same as in the non-wallet call - this is superfluous now.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149519160,149519160,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-11-07T22:11:31Z,"nit: for functions which are not put in headers but used expernally, can you put a comment where the function is defined noting that it is duplicated elsewhere so people wishing to change its API are aware.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149519704,149519704,src/rpc/misc.cpp
TheBlueMatt,2017-11-07T22:12:10Z,"nit: really sucks that these are not put in headers - we're not just waiting to remove them in 0.17 when the deprecation goes away, but we're stuck with them. Can we find some place to put them?",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149519883,149519883,src/wallet/rpcwallet.cpp
ryanofsky,2017-11-07T22:52:58Z,"> nit: really sucks that these are not put in headers - we're not just waiting to remove them in 0.17 when the deprecation goes away, but we're stuck with them. Can we find some place to put them?\n\nAgree these are really ugly. I would put them in rpc/util.h and rpc/util.cpp files, where other rpc helper functions like ParseConfirmTarget could live as well. As mentioned above, I would also chan",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149529163,149529163,src/wallet/rpcwallet.cpp
achow101,2017-11-08T04:25:19Z,Renamed to `AddrToPubKey` and the extern declaration was moved to `rpc/util.h`. Also added a comment with where it is defined.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149572410,149572410,src/rpc/misc.cpp
achow101,2017-11-08T04:25:53Z,I created `rpc/util.cpp` and `rpc/util.h` and moved the functions there. I also renamed them to be `HexToPubKey` and `AddrToPubKey`.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149572459,149572459,src/wallet/rpcwallet.cpp
achow101,2017-11-08T04:26:04Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149572471,149572471,src/wallet/rpcwallet.cpp
ryanofsky,2017-11-08T17:51:36Z,"Could define it in rpc/util.cpp, since this function doesn't do anything wallet-specific (just s/CWallet/CKeyStore/)",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149745940,149745940,src/rpc/util.h
ryanofsky,2017-11-08T17:52:35Z,Could return CPubKey instead of using an output parameter. This would simplify both the function and the calling code (could get rid of vector resize).,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149746201,149746201,src/rpc/util.h
ryanofsky,2017-11-08T17:53:39Z,Could return CPubKey instead of using an output parameter.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149746473,149746473,src/rpc/util.h
achow101,2017-11-08T19:29:06Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149772549,149772549,src/rpc/util.h
achow101,2017-11-08T19:29:11Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149772570,149772570,src/rpc/util.h
achow101,2017-11-08T19:29:16Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149772593,149772593,src/rpc/util.h
ryanofsky,2017-11-08T19:36:55Z,Could drop this include and just forward-declare CKeyStore. Might be good to add includes for \<string\> and \<vector\>.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149774636,149774636,src/rpc/util.h
achow101,2017-11-08T19:45:03Z,I tried forward declaring CKeytStore and it didn't work.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149776798,149776798,src/rpc/util.h
ryanofsky,2017-11-08T19:51:17Z,"Following change should work:\n\n```diff\ndiff --git a/src/rpc/util.h b/src/rpc/util.h\nindex f933b3da92..18f38e8cd3 100644\n--- a/src/rpc/util.h\n+++ b/src/rpc/util.h\n@@ -5,8 +5,7 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n-#include ""keystore.h""\n-\n+class CKeyStore;\n class CPubKey;\n class CScript;\n \ndiff --git a/src/rpc/util.cpp b/src/rpc/util.cpp\nin",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149778632,149778632,src/rpc/util.h
achow101,2017-11-08T20:25:27Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r149786947,149786947,src/rpc/util.h
luke-jr,2017-11-10T14:04:23Z,"I don't think we should change return value types based on `deprecatedrpc`... What if someone wants to use two different pieces of software that expects the old vs new interface? (For example, a developer running the current version of their software in production, but wishing to adapt to and use the new API in development of the next version.)",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r150242201,150242201,src/wallet/rpcwallet.cpp
jnewbery,2017-11-10T17:43:37Z,"@luke-jr - what you're describing is API versioning. Bitcoind doesn't currently support that, but I could certainly see it being useful if done in the right way.\n\nFor now, I think the approach of using deprecatedrpc is the best option we have.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r150297107,150297107,src/wallet/rpcwallet.cpp
jnewbery,2017-11-14T20:47:13Z,"Is there a possibility for an address to be misparsed as a hex string? I suppose it's vanishingly unlikely, but can we add an extra check here that the length of the string is 66 or 130 (ie 33 or 65 bytes). Same comment goes for  `addmultisigaddress`.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r150958289,150958289,src/rpc/misc.cpp
jnewbery,2017-11-14T21:10:53Z,"nit: can you add a newline between `%s` and `Note`. At the moment, the error message runs together into one line:\n\n```\nInvalid public key: mmP95gb3sXa9sK4bq8c9KX1RNWnDaz8hbf Note that from v0.16, createmultisig no longer accepts addresses. Clients must transition to using addmultisigaddress to create multisig addresses with addresses known to the wallet before upgrading to v0.17. To use the ",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r150964053,150964053,src/rpc/misc.cpp
achow101,2017-11-14T21:31:20Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r150969487,150969487,src/rpc/misc.cpp
achow101,2017-11-14T21:31:25Z,Done,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r150969498,150969498,src/rpc/misc.cpp
promag,2017-12-23T00:26:20Z,Remove *bitcoin addresses or* ?,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158571492,158571492,src/rpc/misc.cpp
promag,2017-12-23T00:26:45Z,"Nit, use sentence case *(string) The hex-encoded ...*.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158571512,158571512,src/rpc/misc.cpp
promag,2017-12-23T00:30:40Z,"Nit, sort headers.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158571695,158571695,src/rpc/util.cpp
promag,2017-12-23T00:33:18Z,No test for this error?,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158571791,158571791,src/rpc/util.cpp
promag,2017-12-23T00:33:46Z,No test for this error?,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158571817,158571817,src/rpc/util.cpp
achow101,2017-12-23T00:57:12Z,This error is untestable. It requires a corrupted wallet.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158572673,158572673,src/rpc/util.cpp
achow101,2017-12-23T01:01:28Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158572817,158572817,src/rpc/misc.cpp
achow101,2017-12-23T01:01:32Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158572819,158572819,src/rpc/misc.cpp
achow101,2017-12-23T01:01:37Z,Done.,https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158572822,158572822,src/rpc/util.cpp
achow101,2017-12-23T01:03:50Z,"AFAIK, this error is untestable and requires a corrupted wallet.",https://github.com/bitcoin/bitcoin/pull/11415#discussion_r158572894,158572894,src/rpc/util.cpp
