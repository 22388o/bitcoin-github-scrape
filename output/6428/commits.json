[
  {
    "sha": "ffad5aa1f46742b9e845ade8107505e42a18d7ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmFkNWFhMWY0Njc0MmI5ZTg0NWFkZTgxMDc1MDVlNDJhMThkN2Fj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-13T06:50:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-13T06:50:16Z"
      },
      "message": "tests: Remove old sh-based test framework\n\nThis removes the `conflictedbalance.sh` test as well, but that test has\nbeen broken for a long time and isn't part of any scripts.\nWhat it does is, IMO, sufficiently tested by other tests.",
      "tree": {
        "sha": "e75c0e8e7840ba15e1178d3847d0af0d3bbab89c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e75c0e8e7840ba15e1178d3847d0af0d3bbab89c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffad5aa1f46742b9e845ade8107505e42a18d7ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffad5aa1f46742b9e845ade8107505e42a18d7ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffad5aa1f46742b9e845ade8107505e42a18d7ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffad5aa1f46742b9e845ade8107505e42a18d7ac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44fa82d47e5c8e1c511dfdff212f1196425a54f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fa82d47e5c8e1c511dfdff212f1196425a54f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44fa82d47e5c8e1c511dfdff212f1196425a54f8"
      }
    ],
    "stats": {
      "total": 281,
      "additions": 0,
      "deletions": 281
    },
    "files": [
      {
        "sha": "7e4409737437a139b105a0c83e295d1de5a34acb",
        "filename": "qa/rpc-tests/conflictedbalance.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 147,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fa82d47e5c8e1c511dfdff212f1196425a54f8/qa/rpc-tests/conflictedbalance.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fa82d47e5c8e1c511dfdff212f1196425a54f8/qa/rpc-tests/conflictedbalance.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflictedbalance.sh?ref=44fa82d47e5c8e1c511dfdff212f1196425a54f8",
        "patch": "@@ -1,147 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test marking of spent outputs\n-\n-# Create a transaction graph with four transactions,\n-# A/B/C/D\n-# C spends A\n-# D spends B and C\n-\n-# Then simulate C being mutated, to create C'\n-#  that is mined.\n-# A is still (correctly) considered spent.\n-# B should be treated as unspent\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-# Two nodes; one will play the part of merchant, the\n-# other an evil transaction-mutating miner.\n-\n-D1=${D}/node1\n-CreateDataDir $D1 port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1 -debug=mempool\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir $D2 port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2 -debug=mempool\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-# Wait until both nodes are at the same block number\n-function WaitBlocks {\n-    while :\n-    do\n-        sleep 1\n-        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n-        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n-        if (( BLOCKS1 == BLOCKS2 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-# Wait until node has $N peers\n-function WaitPeers {\n-    while :\n-    do\n-        declare -i PEERS=$( $CLI $1 getconnectioncount )\n-        if (( PEERS == \"$2\" ))\n-        then\n-            break\n-        fi\n-        sleep 1\n-    done\n-}\n-\n-echo \"Generating test blockchain...\"\n-\n-# Start with B2 connected to B1:\n-$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n-# 2 block, 50 XBT each == 100 XBT\n-# These will be transactions \"A\" and \"B\"\n-$CLI $B1ARGS generate 2\n-\n-WaitBlocks\n-# 100 blocks, 0 mature == 0 XBT\n-$CLI $B2ARGS generate 100\n-WaitBlocks\n-\n-CheckBalance \"$B1ARGS\" 100\n-CheckBalance \"$B2ARGS\" 0\n-\n-# restart B2 with no connection\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-B1ADDRESS=$( $CLI $B1ARGS getnewaddress )\n-B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n-\n-# Transaction C: send-to-self, spend A\n-TXID_C=$( $CLI $B1ARGS sendtoaddress $B1ADDRESS 50.0)\n-\n-# Transaction D: spends B and C\n-TXID_D=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 100.0)\n-\n-CheckBalance \"$B1ARGS\" 0\n-\n-# Mutate TXID_C and add it to B2's memory pool:\n-RAWTX_C=$( $CLI $B1ARGS getrawtransaction $TXID_C )\n-\n-# ... mutate C to create C'\n-L=${RAWTX_C:82:2}\n-NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n-MUTATEDTX_C=${RAWTX_C:0:82}${NEWLEN}4c${RAWTX_C:84}\n-# ... give mutated tx1 to B2:\n-MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX_C )\n-\n-echo \"TXID_C: \" $TXID_C\n-echo \"Mutated: \" $MUTATEDTXID\n-\n-# Re-connect nodes, and have both nodes mine some blocks:\n-$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n-# Having B2 mine the next block puts the mutated\n-# transaction C in the chain:\n-$CLI $B2ARGS generate 1\n-WaitBlocks\n-\n-# B1 should still be able to spend 100, because D is conflicted\n-# so does not count as a spend of B\n-CheckBalance \"$B1ARGS\" 100\n-\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-echo \"Tests successful, cleaning up\"\n-rm -rf $D\n-exit 0"
      },
      {
        "sha": "2d54cc6ded4233af6ddf89f80d9de9bb24e96a32",
        "filename": "qa/rpc-tests/send.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 31,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fa82d47e5c8e1c511dfdff212f1196425a54f8/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fa82d47e5c8e1c511dfdff212f1196425a54f8/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=44fa82d47e5c8e1c511dfdff212f1196425a54f8",
        "patch": "@@ -1,31 +0,0 @@\n-#!/bin/bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-TIMEOUT=10\n-SIGNAL=HUP\n-PIDFILE=.send.pid\n-if [ $# -eq 0 ]; then\n-  echo -e \"Usage:\\t$0 <cmd>\"\n-  echo -e \"\\tRuns <cmd> and wait ${TIMEOUT} seconds or until SIG${SIGNAL} is received.\"\n-  echo -e \"\\tReturns: 0 if SIG${SIGNAL} is received, 1 otherwise.\"\n-  echo -e \"Or:\\t$0 -STOP\"\n-  echo -e \"\\tsends SIG${SIGNAL} to running send.sh\"\n-  exit 0\n-fi\n-\n-if [ $1 = \"-STOP\" ]; then\n-  if [ -s ${PIDFILE} ]; then\n-      kill -s ${SIGNAL} $(<$PIDFILE 2>/dev/null) 2>/dev/null\n-  fi\n-  exit 0\n-fi\n-\n-trap '[[ ${PID} ]] && kill ${PID}' ${SIGNAL}\n-trap 'rm -f ${PIDFILE}' EXIT\n-echo $$ > ${PIDFILE}\n-\"$@\"\n-sleep ${TIMEOUT} & PID=$!\n-wait ${PID} && exit 1\n-\n-exit 0"
      },
      {
        "sha": "c2b7004308094ce0362fa61ae8f81250753ce20a",
        "filename": "qa/rpc-tests/util.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 103,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fa82d47e5c8e1c511dfdff212f1196425a54f8/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fa82d47e5c8e1c511dfdff212f1196425a54f8/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=44fa82d47e5c8e1c511dfdff212f1196425a54f8",
        "patch": "@@ -1,103 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Functions used by more than one test\n-\n-function echoerr {\n-  echo \"$@\" 1>&2;\n-}\n-\n-# Usage: ExtractKey <key> \"<json_object_string>\"\n-# Warning: this will only work for the very-well-behaved\n-# JSON produced by bitcoind, do NOT use it to try to\n-# parse arbitrary/nested/etc JSON.\n-function ExtractKey {\n-    echo $2 | tr -d ' \"{}\\n' | awk -v RS=',' -F: \"\\$1 ~ /$1/ { print \\$2}\"\n-}\n-\n-function CreateDataDir {\n-  DIR=$1\n-  mkdir -p $DIR\n-  CONF=$DIR/bitcoin.conf\n-  echo \"regtest=1\" >> $CONF\n-  echo \"keypool=2\" >> $CONF\n-  echo \"rpcuser=rt\" >> $CONF\n-  echo \"rpcpassword=rt\" >> $CONF\n-  echo \"rpcwait=1\" >> $CONF\n-  echo \"walletnotify=${SENDANDWAIT} -STOP\" >> $CONF\n-  shift\n-  while (( \"$#\" )); do\n-      echo $1 >> $CONF\n-      shift\n-  done\n-}\n-\n-function AssertEqual {\n-  if (( $( echo \"$1 == $2\" | bc ) == 0 ))\n-  then\n-    echoerr \"AssertEqual: $1 != $2\"\n-    declare -f CleanUp > /dev/null 2>&1\n-    if [[ $? -eq 0 ]] ; then\n-        CleanUp\n-    fi\n-    exit 1\n-  fi\n-}\n-\n-# CheckBalance -datadir=... amount account minconf\n-function CheckBalance {\n-  declare -i EXPECT=\"$2\"\n-  B=$( $CLI $1 getbalance $3 $4 )\n-  if (( $( echo \"$B == $EXPECT\" | bc ) == 0 ))\n-  then\n-    echoerr \"bad balance: $B (expected $2)\"\n-    declare -f CleanUp > /dev/null 2>&1\n-    if [[ $? -eq 0 ]] ; then\n-        CleanUp\n-    fi\n-    exit 1\n-  fi\n-}\n-\n-# Use: Address <datadir> [account]\n-function Address {\n-  $CLI $1 getnewaddress $2\n-}\n-\n-# Send from to amount\n-function Send {\n-  from=$1\n-  to=$2\n-  amount=$3\n-  address=$(Address $to)\n-  txid=$( ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount )\n-}\n-\n-# Use: Unspent <datadir> <n'th-last-unspent> <var>\n-function Unspent {\n-  local r=$( $CLI $1 listunspent | awk -F'[ |:,\"]+' \"\\$2 ~ /$3/ { print \\$3 }\" | tail -n $2 | head -n 1)\n-  echo $r\n-}\n-\n-# Use: CreateTxn1 <datadir> <n'th-last-unspent> <destaddress>\n-# produces hex from signrawtransaction\n-function CreateTxn1 {\n-  TXID=$(Unspent $1 $2 txid)\n-  AMOUNT=$(Unspent $1 $2 amount)\n-  VOUT=$(Unspent $1 $2 vout)\n-  RAWTXN=$( $CLI $1 createrawtransaction \"[{\\\"txid\\\":\\\"$TXID\\\",\\\"vout\\\":$VOUT}]\" \"{\\\"$3\\\":$AMOUNT}\")\n-  ExtractKey hex \"$( $CLI $1 signrawtransaction $RAWTXN )\"\n-}\n-\n-# Use: SendRawTxn <datadir> <hex_txn_data>\n-function SendRawTxn {\n-  ${SENDANDWAIT} $CLI $1 sendrawtransaction $2\n-}\n-\n-# Use: GetBlocks <datadir>\n-# returns number of blocks from getinfo\n-function GetBlocks {\n-    $CLI $1 getblockcount\n-}"
      }
    ]
  }
]