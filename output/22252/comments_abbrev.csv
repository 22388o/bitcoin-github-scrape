DrahtBot,2021-06-15 20:27:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22290 by glozow\n* #22261 by jnewbery\n* #22253 by glozow\n* #21800 by glozow\n\nIf you consider this pull request import",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-861808514,861808514,
ariard,2021-06-16 01:01:05,"Concept NACK. At least for now.\n\nFirstly, package trimming might be handled at the p2p-layer instead of the mempool acceptance one. I believe we have not decided yet on a package-announcement protocol, one of the solution could be something INV(""utxo:feerate"")-based, which would assume the exact feerate package is evaluated by the receiver (or discarded from fetching is inferior to the best kn",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-861930852,861930852,
jnewbery,2021-06-16 10:08:43,Concept ACK. This makes sense for both local package acceptance and for package relay.,https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-862230705,862230705,
ariard,2021-06-16 21:27:07,"@jnewbery \n\nCan you explain in detail why ""it makes sense"" for package acceptance and package relay ? Especially answering to my third point about introducing a new pinning vector, I'm happy to write a functional test if it helps the discussion :)",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-862738509,862738509,
glozow,2021-06-17 10:22:16,"@ariard \n\n> i think this opens a new pinning vector (though not for LN use-case) in the case of the in-mempool same-txid-different-wtxid's feerate is far-lower than the same-txid-different-wtxid inside the package candidate.\n\nThis pinning attack is precisely what this PR aims to [begin to] address - that's why there is a very similar functional test for it in this PR. The only difference i",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863120643,863120643,
jnewbery,2021-06-17 10:32:17,"@ariard if an RPC client or peer sends a package {A,B}, and your mempool already contains {A}, then we shouldn't reject the package. Similarly your mempool already contains {A'} (where txid(A) = txid(A') but wtxid(A) != wtxid(A')), then we also shouldn't reject the package.\n\nIf A' is already in the mempool, then its feerate can't make B and more or less viable for mempool acceptance, since the",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863126609,863126609,
ariard,2021-06-17 18:25:24,"@glozow \n\n> This pinning attack is precisely what this PR aims to [begin to] address - that's why there is a very similar functional test for it in this PR. The only difference is that it's not based on feerates since that is irrelevant at the moment: without package trimming, the entire package would be rejected as a ""conflict"" with the mempool. If/when someone implements replacement of same-",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863465014,863465014,
ariard,2021-06-17 18:34:30,"@jnewbery \n\n>    if A' has sufficent feerate to enter the mempool and {A,B} is later submitted, then A is trimmed, {B} is processed individually, and the feerate of A and A' is irrelevant.\n\nI think the feerate of A/A' is still relevant as you have to consider the whole package feerate for block inclusion (see `addPackageTxs`), and a lower, malicious A feerate is decreasing the odds of incl",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863470775,863470775,
ariard,2021-06-18 23:24:47,"John, while digging recently through the archives of #10823, I saw your engagement standing as an example of patience, listening with the potentially affected Bitcoin users, and the implications for their businesses. Genuinely, I think that was a worthy example of how project contributors should consider policy change when the implications are significant and ecosystem-wise.\n\nI've always been ",https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-864316785,864316785,
