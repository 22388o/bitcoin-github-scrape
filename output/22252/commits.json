[
  {
    "sha": "409f7647b6b10dd6da856f2dbc0b089311c7f937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDlmNzY0N2I2YjEwZGQ2ZGE4NTZmMmRiYzBiMDg5MzExYzdmOTM3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-10T10:14:25Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-10T11:14:08Z"
      },
      "message": "misc doc improvements",
      "tree": {
        "sha": "7eabfbe5e0f0e829b1e55d967482c42f2ecf32bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7eabfbe5e0f0e829b1e55d967482c42f2ecf32bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/409f7647b6b10dd6da856f2dbc0b089311c7f937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409f7647b6b10dd6da856f2dbc0b089311c7f937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/409f7647b6b10dd6da856f2dbc0b089311c7f937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409f7647b6b10dd6da856f2dbc0b089311c7f937/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef8f2966ac8e486f622f9803f24bd4021c6ff9ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8f2966ac8e486f622f9803f24bd4021c6ff9ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8f2966ac8e486f622f9803f24bd4021c6ff9ed"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "22f6b6592d517d5f378af630ef30cd1204ef2adf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409f7647b6b10dd6da856f2dbc0b089311c7f937/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409f7647b6b10dd6da856f2dbc0b089311c7f937/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=409f7647b6b10dd6da856f2dbc0b089311c7f937",
        "patch": "@@ -905,7 +905,7 @@ static RPCHelpMan testmempoolaccept()\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n                         \"Returns results for each transaction in the same order they were passed in.\\n\"\n-                        \"It is possible for transactions to not be fully validated ('allowed' unset) if another transaction failed.\\n\",\n+                        \"Transactions that cannot be fully validated due to failures in other transactions will not contain an 'allowed' result.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {"
      },
      {
        "sha": "a6a10e46397c8445112445a2cb2db33f05a8d52a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409f7647b6b10dd6da856f2dbc0b089311c7f937/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409f7647b6b10dd6da856f2dbc0b089311c7f937/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=409f7647b6b10dd6da856f2dbc0b089311c7f937",
        "patch": "@@ -240,7 +240,8 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n * @param[in]    txns                Group of transactions which may be independent or contain\n *                                   parent-child dependencies. The transactions must not conflict\n *                                   with each other, i.e., must not spend the same inputs. If any\n-*                                   dependencies exist, parents must appear before children.\n+*                                   dependencies exist, parents must appear anywhere in the list\n+*                                   before their children.\n * @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n * If a transaction fails, validation will exit early and some results may be missing.\n */"
      }
    ]
  },
  {
    "sha": "f3504c8615ab2326a58cd67c972c80710d1a72d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzUwNGM4NjE1YWIyMzI2YTU4Y2Q2N2M5NzJjODA3MTBkMWE3MmQ1",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-10T00:20:53Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T15:31:08Z"
      },
      "message": "[mempool] extend CalculateMemPoolAncestors for packages\n\nWhen calculating ancestor/descendant counts for transactions in the\npackage, as a heuristic, count every transaction in the package as an\nancestor and descendant of every other transaction in the package.\n\nThis may overestimate, but will not underestimate, the\nancestor/descendant counts. Most use cases of submitting as a package\ninvolve two transactions in a parent-child relationship, so this\nshortcut still produces an accurate count.",
      "tree": {
        "sha": "f71165808507c500810c3d233dd10b24b6c8a633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f71165808507c500810c3d233dd10b24b6c8a633"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3504c8615ab2326a58cd67c972c80710d1a72d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3504c8615ab2326a58cd67c972c80710d1a72d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3504c8615ab2326a58cd67c972c80710d1a72d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3504c8615ab2326a58cd67c972c80710d1a72d5/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "409f7647b6b10dd6da856f2dbc0b089311c7f937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409f7647b6b10dd6da856f2dbc0b089311c7f937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/409f7647b6b10dd6da856f2dbc0b089311c7f937"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 94,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c1d37795602ae287fbd7bfa42780139ea5c093e8",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3504c8615ab2326a58cd67c972c80710d1a72d5/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3504c8615ab2326a58cd67c972c80710d1a72d5/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=f3504c8615ab2326a58cd67c972c80710d1a72d5",
        "patch": "@@ -199,6 +199,9 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     std::string dummy;\n     BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n+    setAncestorsCalculated.clear();\n+    BOOST_CHECK(pool.CalculateMemPoolAncestors({entry.Fee(2000000LL).FromTx(tx7)}, setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy));\n+    BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n     pool.addUnchecked(entry.FromTx(tx7), setAncestors);\n     BOOST_CHECK_EQUAL(pool.size(), 7U);\n@@ -257,6 +260,9 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     setAncestorsCalculated.clear();\n     BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n+    setAncestorsCalculated.clear();\n+    BOOST_CHECK(pool.CalculateMemPoolAncestors({entry.Fee(200000LL).Time(4).FromTx(tx10)}, setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy));\n+    BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n     pool.addUnchecked(entry.FromTx(tx10), setAncestors);\n "
      },
      {
        "sha": "db4075c527cd1c1c1c46550cc28df6cb7de6f388",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 25,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3504c8615ab2326a58cd67c972c80710d1a72d5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3504c8615ab2326a58cd67c972c80710d1a72d5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f3504c8615ab2326a58cd67c972c80710d1a72d5",
        "patch": "@@ -19,6 +19,7 @@\n #include <validationinterface.h>\n \n #include <cmath>\n+#include <numeric>\n #include <optional>\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);\n+        txiter it = mapTx.iterator_to(entries[0].get());\n+        staged_ancestors = it->GetMemPoolParents();\n     }\n \n-    size_t totalSizeWithAncestors = entry.GetTxSize();\n+    size_t totalSizeWithAncestors = total_virtual_size;\n \n     while (!staged_ancestors.empty()) {\n         const CTxMemPoolEntry& stage = staged_ancestors.begin()->get();\n@@ -187,14 +202,22 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",\n+                                  stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n-            errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);\n+        } else if (stageit->GetCountWithDescendants() + total_count > limitDescendantCount) {\n+            errString = strprintf(\"%stoo many descendants for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",\n+                                  stageit->GetTx().GetHash().ToString(), limitDescendantCount);\n             return false;\n         } else if (totalSizeWithAncestors > limitAncestorSize) {\n-            errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+            errString = strprintf(\"%sexceeds ancestor size limit [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\", limitAncestorSize);\n             return false;\n         }\n \n@@ -206,8 +229,9 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n             if (setAncestors.count(parent_it) == 0) {\n                 staged_ancestors.insert(parent);\n             }\n-            if (staged_ancestors.size() + setAncestors.size() + 1 > limitAncestorCount) {\n-                errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+            if (staged_ancestors.size() + setAncestors.size() + total_count > limitAncestorCount) {\n+                errString = strprintf(\"%stoo many unconfirmed ancestors [limit: %u]\",\n+                                      total_count > 1 ? \"possibly\" : \"\", limitAncestorCount);\n                 return false;\n             }\n         }\n@@ -216,6 +240,17 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors,\n+                                           uint64_t limitAncestorCount, uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount, uint64_t limitDescendantSize,\n+                                           std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> entry_vec{std::cref(entry)};\n+    return CalculateMemPoolAncestors(entry_vec,\n+                                     setAncestors, limitAncestorCount, limitAncestorSize, limitDescendantCount,\n+                                     limitDescendantSize, errString, fSearchForParents);\n+}\n+\n void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n {\n     CTxMemPoolEntry::Parents parents = it->GetMemPoolParents();"
      },
      {
        "sha": "9c152a2d531eac64beee087dcf4a4b99d85f5a56",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3504c8615ab2326a58cd67c972c80710d1a72d5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3504c8615ab2326a58cd67c972c80710d1a72d5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f3504c8615ab2326a58cd67c972c80710d1a72d5",
        "patch": "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.\n+     *                                          They need not be direct ancestors/descendants of\n+     *                                          each other, though they will be treated as such.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.\n+     * @param[in]       limitAncestorCount      Max number of txns including ancestors.\n+     * @param[in]       limitAncestorSize       Max virtual size including ancestors.\n+     * @param[in]       limitDescendantCount    Max number of txns including descendants.\n+     * @param[in]       limitDescendantSize     Max virtual size including descendants.\n+     * @param[out]      errString               Populated with error reason if a limit is hit.\n+     * @param[in]       fSearchForParents       Whether to search for entries' in-mempool parents.\n+     *                                          Must be true if any entries are not already in mempool.\n+     */\n+    bool CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                   setEntries& setAncestors,\n+                                   const uint64_t limitAncestorCount,\n+                                   const uint64_t limitAncestorSize,\n+                                   const uint64_t limitDescendantCount,\n+                                   const uint64_t limitDescendantSize,\n+                                   std::string &errString,\n+                                   const bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n      *  already in it.  */"
      }
    ]
  },
  {
    "sha": "451c79a9c34d207c4bb90e9c015f618b9e6189c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTFjNzlhOWMzNGQyMDdjNGJiOTBlOWMwMTVmNjE4YjllNjE4OWM0",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-27T19:46:42Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T15:50:44Z"
      },
      "message": "[policy] ancestor/descendant limits for packages",
      "tree": {
        "sha": "a5e7c4afe6356667198484058bbc932eb3c876d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5e7c4afe6356667198484058bbc932eb3c876d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/451c79a9c34d207c4bb90e9c015f618b9e6189c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/451c79a9c34d207c4bb90e9c015f618b9e6189c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/451c79a9c34d207c4bb90e9c015f618b9e6189c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/451c79a9c34d207c4bb90e9c015f618b9e6189c4/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3504c8615ab2326a58cd67c972c80710d1a72d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3504c8615ab2326a58cd67c972c80710d1a72d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3504c8615ab2326a58cd67c972c80710d1a72d5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ce51e82cf0d1f0b0afdf04c23b549edac3ce0c48",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451c79a9c34d207c4bb90e9c015f618b9e6189c4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451c79a9c34d207c4bb90e9c015f618b9e6189c4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=451c79a9c34d207c4bb90e9c015f618b9e6189c4",
        "patch": "@@ -1114,6 +1114,34 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits. Limit the scope of package_entries and\n+    // package_ancestors; we shouldn't use them for anything other than calculating limits. When we\n+    // submit the transactions to mempool, We should calculate ancestors for each transaction\n+    // individually before calling Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> package_entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(package_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries package_ancestors;\n+        std::string err_string;\n+        if (!m_pool.CalculateMemPoolAncestors(package_entries,\n+                                              package_ancestors, m_limit_ancestors, m_limit_ancestor_size,\n+                                              m_limit_descendants, m_limit_descendant_size, err_string,\n+                                              /* fSearchForParents */ true)) {\n+            // All transactions must have individually passed mempool ancestor and descendant limits\n+            // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+            // be implementation-dependent, and it's likely to be multiple transactions because we\n+            // evaluated all of them together. Return the same failure for all transactions.\n+            for (auto& ws : workspaces) {\n+                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"exceeds-ancestor-descendant-limits\", err_string);\n+                results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            }\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\");\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     for (Workspace& ws : workspaces) {\n         PrecomputedTransactionData txdata;\n         if (!PolicyScriptChecks(args, ws, txdata)) {"
      }
    ]
  },
  {
    "sha": "ef6004ca88f8033074898687b18dc0b156702dc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjYwMDRjYTg4ZjgwMzMwNzQ4OTg2ODdiMThkYzBiMTU2NzAyZGM2",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-27T19:55:05Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T15:50:44Z"
      },
      "message": "[test] package mempool limits",
      "tree": {
        "sha": "88be486e82b6951940b08544e434a9428c3298af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88be486e82b6951940b08544e434a9428c3298af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef6004ca88f8033074898687b18dc0b156702dc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef6004ca88f8033074898687b18dc0b156702dc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef6004ca88f8033074898687b18dc0b156702dc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef6004ca88f8033074898687b18dc0b156702dc6/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "451c79a9c34d207c4bb90e9c015f618b9e6189c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/451c79a9c34d207c4bb90e9c015f618b9e6189c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/451c79a9c34d207c4bb90e9c015f618b9e6189c4"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 175,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dcd021f5f5cd2ab36d4f49aa40c7dda30a3f036c",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef6004ca88f8033074898687b18dc0b156702dc6/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef6004ca88f8033074898687b18dc0b156702dc6/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=ef6004ca88f8033074898687b18dc0b156702dc6",
        "patch": "@@ -75,6 +75,9 @@ def run_test(self):\n \n         self.test_independent()\n         self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n@@ -187,6 +190,178 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = CTransaction() # M2b\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n     def test_multiple_children(self):\n         node = self.nodes[0]\n "
      }
    ]
  },
  {
    "sha": "1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDljYTI5MzRjNjRhYmJlNmJjMWRjZmZkZTIxZDNkMDNjMWJlY2I5",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T09:18:47Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T13:51:56Z"
      },
      "message": "[validation] distinguish same txid different wtxid in mempool",
      "tree": {
        "sha": "4abb097a5e8b1a3c5634e4a931fe96319521be35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4abb097a5e8b1a3c5634e4a931fe96319521be35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef6004ca88f8033074898687b18dc0b156702dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef6004ca88f8033074898687b18dc0b156702dc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef6004ca88f8033074898687b18dc0b156702dc6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b80dc2b2a8112dbf02a8ac9e4f84540002d3d0f0",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
        "patch": "@@ -50,7 +50,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // So if the output does exist, then this transaction exists in the chain.\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    if (!node.mempool->exists(hashTx)) {\n+    if (!node.mempool->exists(GenTxid(false, tx->GetHash()))) {\n         // Transaction is not already in the mempool.\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP"
      },
      {
        "sha": "80ded431a1004b5f9db19aafa1abe7290b2f56db",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
        "patch": "@@ -611,9 +611,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n-    // is it already in the memory pool?\n-    if (m_pool.exists(hash)) {\n+    if (m_pool.exists(GenTxid(true, tx.GetWitnessHash()))) {\n+        // Exact transaction already exists in the mempool.\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n+    } else if (m_pool.exists(GenTxid(false, tx.GetHash()))) {\n+        // Transaction with the same nonwitness data but different witnes (same txid, different\n+        // wtxid) already exists in the mempool. TODO: allow replacements\n+        return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-same-nonwitness-data-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions"
      }
    ]
  },
  {
    "sha": "c23f72a2390648703c3cb85019ca156df2b28af2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjNmNzJhMjM5MDY0ODcwM2MzY2I4NTAxOWNhMTU2ZGYyYjI4YWYy",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-11T13:49:19Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T13:58:53Z"
      },
      "message": "[test] submit same txid different wtxid as mempool tx\n\nCo-authored-by: Antoine Riard <ariard@student.42.fr>\nCo-authored-by: Antoine Riard <antoine.riard@gmail.com>",
      "tree": {
        "sha": "5268d307ceddf40e5bd02d7441fd71b4f2782b04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5268d307ceddf40e5bd02d7441fd71b4f2782b04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c23f72a2390648703c3cb85019ca156df2b28af2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c23f72a2390648703c3cb85019ca156df2b28af2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c23f72a2390648703c3cb85019ca156df2b28af2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c23f72a2390648703c3cb85019ca156df2b28af2/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9ca2934c64abbe6bc1dcffde21d3d03c1becb9"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25cdbd4818a28104a1a36aae919ffe610d83537b",
        "filename": "test/functional/mempool_wtxid.py",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c23f72a2390648703c3cb85019ca156df2b28af2/test/functional/mempool_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c23f72a2390648703c3cb85019ca156df2b28af2/test/functional/mempool_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_wtxid.py?ref=c23f72a2390648703c3cb85019ca156df2b28af2",
        "patch": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_TRUE,\n+    OP_IF,\n+    OP_HASH160,\n+    OP_EQUAL,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    hash160,\n+)\n+from test_framework.messages import (\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    COutPoint,\n+    sha256,\n+    COIN,\n+    ToHex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-incrementalrelayfee=0\"]]\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool, and 200 blocks')\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(110, self.address)[:-100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+        assert_equal(node.getmempoolinfo()['size'], 0)\n+\n+        txid = self.coins.pop()[\"txid\"]\n+\n+        self.log.info(\"Submit parent with multiple script branches to mempool\")\n+        hashlock = hash160(b'Preimage')\n+        witness_script = CScript([OP_IF, OP_HASH160, hashlock, OP_EQUAL, OP_ELSE, OP_TRUE, OP_ENDIF])\n+        witness_program = sha256(witness_script)\n+        script_pubkey = CScript([OP_0, witness_program])\n+\n+        parent = CTransaction()\n+        parent.vin.append(CTxIn(COutPoint(int(txid, 16), 0), b\"\"))\n+        parent.vout.append(CTxOut(int(9.99998 * COIN), script_pubkey))\n+        parent.rehash()\n+\n+        raw_parent = node.signrawtransactionwithkey(hexstring=parent.serialize().hex(), privkeys=self.privkeys)['hex']\n+        parent_txid = node.sendrawtransaction(hexstring=raw_parent, maxfeerate=0)\n+        node.generate(1)\n+\n+        # Create a new segwit transaction with witness solving first branch\n+        child_witness_script = CScript([OP_TRUE])\n+        child_witness_program = sha256(child_witness_script)\n+        child_script_pubkey = CScript([OP_0, child_witness_program])\n+\n+        child_one = CTransaction()\n+        child_one.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_one.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_one.wit.vtxinwit.append(CTxInWitness())\n+        child_one.wit.vtxinwit[0].scriptWitness.stack = [b'Preimage', b'\\x01', witness_script]\n+        child_one_wtxid = child_one.getwtxid()\n+        child_one_txid = child_one.rehash()\n+\n+        # Create another identical segwit transaction with witness solving second branch\n+        child_two = CTransaction()\n+        child_two.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_two.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_two.wit.vtxinwit.append(CTxInWitness())\n+        child_two.wit.vtxinwit[0].scriptWitness.stack = [b'', witness_script]\n+        child_two_wtxid = child_two.getwtxid()\n+        child_two_txid = child_two.rehash()\n+\n+        assert_equal(child_one_txid, child_two_txid)\n+        assert child_one_wtxid != child_two_wtxid\n+\n+        self.log.info(\"Submit one child to the mempool\")\n+        txid_submitted = node.sendrawtransaction(ToHex(child_one))\n+        assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n+\n+        # testmempoolaccept reports the \"already in mempool\" error\n+        assert_equal(node.testmempoolaccept([ToHex(child_one)]),\n+                     [{\"txid\": child_one_txid, \"wtxid\": child_one_wtxid, \"allowed\": False, \"reject-reason\": \"txn-already-in-mempool\"}])\n+        testres_child_two = node.testmempoolaccept([ToHex(child_two)])[0]\n+        assert_equal(testres_child_two, {\n+            \"txid\": child_two_txid,\n+            \"wtxid\": child_two_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-same-nonwitness-data-in-mempool\"\n+        })\n+\n+        # sendrawtransaction will not throw but quits early when the exact same transaction is already in mempool\n+        node.sendrawtransaction(ToHex(child_one))\n+        # sendrawtransaction will not throw but quits early when a transaction with the same nonwitness data is already in mempool\n+        node.sendrawtransaction(ToHex(child_two))\n+\n+\n+if __name__ == '__main__':\n+    MempoolWtxidTest().main()"
      },
      {
        "sha": "4127e8ea68b4b081dbf53539812662206779a43c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c23f72a2390648703c3cb85019ca156df2b28af2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c23f72a2390648703c3cb85019ca156df2b28af2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c23f72a2390648703c3cb85019ca156df2b28af2",
        "patch": "@@ -277,6 +277,7 @@\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',\n     'mempool_compatibility.py',\n+    'mempool_wtxid.py',\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n     'p2p_ping.py',"
      }
    ]
  },
  {
    "sha": "7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWJiOGZlMzY2MjY5M2U3ODRlNTFjMWFmZTNlMWJiNmZlYTMyZDkw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T10:44:31Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T13:59:11Z"
      },
      "message": "[validation] include vsize in MempoolAcceptResult",
      "tree": {
        "sha": "6b04f78e3c22dc41960a3221e9289afc95f9f871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b04f78e3c22dc41960a3221e9289afc95f9f871"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c23f72a2390648703c3cb85019ca156df2b28af2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c23f72a2390648703c3cb85019ca156df2b28af2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c23f72a2390648703c3cb85019ca156df2b28af2"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a65239e11c0d1f36cffacdb37b927931a37ae71f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
        "patch": "@@ -1076,14 +1076,16 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees,\n+                                            GetVirtualTransactionSize(*ws.m_ptx));\n     }\n \n     if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees,\n+                                        GetVirtualTransactionSize(*ws.m_ptx));\n }\n \n PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n@@ -1158,7 +1160,8 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n             // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees,\n+                                                         GetVirtualTransactionSize(*ws.m_ptx)));\n         }\n     }\n "
      },
      {
        "sha": "31fec430c5949275f130ad81357d134b6ceff0e0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
        "patch": "@@ -181,12 +181,15 @@ struct MempoolAcceptResult {\n     const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n     /** Raw base fees in satoshis. */\n     const std::optional<CAmount> m_base_fees;\n+    /** Size in virtual bytes. */\n+    const std::optional<int64_t> m_vsize;\n     static MempoolAcceptResult Failure(TxValidationState state) {\n         return MempoolAcceptResult(state);\n     }\n \n-    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees) {\n-        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees,\n+                                       int64_t vsize) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees, vsize);\n     }\n \n // Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n@@ -198,9 +201,9 @@ struct MempoolAcceptResult {\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees, int64_t vsize)\n         : m_result_type(ResultType::VALID),\n-        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees), m_vsize{vsize} {}\n };\n \n /**\n@@ -240,8 +243,7 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n * @param[in]    txns                Group of transactions which may be independent or contain\n *                                   parent-child dependencies. The transactions must not conflict\n *                                   with each other, i.e., must not spend the same inputs. If any\n-*                                   dependencies exist, parents must appear anywhere in the list\n-*                                   before their children.\n+*                                   dependencies exist, parents must appear before children.\n * @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n * If a transaction fails, validation will exit early and some results may be missing.\n */"
      }
    ]
  },
  {
    "sha": "7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTg2MTdhYWY5YjU5NWM2ZjVjYTEyN2MxMWEwODIzZDljNTJhOWJj",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T10:44:51Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T13:59:11Z"
      },
      "message": "[rpc] use MempoolAcceptResult vsize in testmempoolaccept\n\nIn the future we might return a result for a same-txid-different-wtxid\ntransaction and should be consistent about which transaction we're\nreferring to.",
      "tree": {
        "sha": "e78ac4504e4864af6fc4393fa314ffae2d07c74e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e78ac4504e4864af6fc4393fa314ffae2d07c74e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebb8fe3662693e784e51c1afe3e1bb6fea32d90"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1a7c251aaba8f7c1f348123316b7438c24db8ebd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
        "patch": "@@ -993,8 +993,7 @@ static RPCHelpMan testmempoolaccept()\n         if (tx_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             const CAmount fee = tx_result.m_base_fees.value();\n             // Check that fee does not exceed maximum fee\n-            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(tx_result.m_vsize.value());\n             if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n                 result_inner.pushKV(\"allowed\", false);\n                 result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n@@ -1003,7 +1002,7 @@ static RPCHelpMan testmempoolaccept()\n                 // Only return the fee and vsize if the transaction would pass ATMP.\n                 // These can be used to calculate the feerate.\n                 result_inner.pushKV(\"allowed\", true);\n-                result_inner.pushKV(\"vsize\", virtual_size);\n+                result_inner.pushKV(\"vsize\", tx_result.m_vsize.value());\n                 UniValue fees(UniValue::VOBJ);\n                 fees.pushKV(\"base\", ValueFromAmount(fee));\n                 result_inner.pushKV(\"fees\", fees);"
      }
    ]
  },
  {
    "sha": "b9942821da6f48ce882910ce7af6a514b021bb90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTk0MjgyMWRhNmY0OGNlODgyOTEwY2U3YWY2YTUxNGIwMjFiYjkw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T14:09:46Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T13:59:11Z"
      },
      "message": "[policy] trim package when tx is already in mempool\n\nPackages are still validated atomically as in, there are only 2\npossibilities: (1) All transactions would be accepted to mempool OR (2)\nThe mempool would not change at all.",
      "tree": {
        "sha": "b1d50db2fe6ae1fdc800af643453cc299b870a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1d50db2fe6ae1fdc800af643453cc299b870a94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9942821da6f48ce882910ce7af6a514b021bb90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9942821da6f48ce882910ce7af6a514b021bb90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9942821da6f48ce882910ce7af6a514b021bb90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9942821da6f48ce882910ce7af6a514b021bb90/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8617aaf9b595c6f5ca127c11a0823d9c52a9bc"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 48,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9673d7cca0369d27ff938c4974e669ed68d03e68",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9942821da6f48ce882910ce7af6a514b021bb90/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9942821da6f48ce882910ce7af6a514b021bb90/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b9942821da6f48ce882910ce7af6a514b021bb90",
        "patch": "@@ -1098,11 +1098,30 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(txns.size());\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n-                   [](const auto& tx) { return Workspace(tx); });\n     std::map<const uint256, const MempoolAcceptResult> results;\n \n     LOCK(m_pool.cs);\n+    // Detect transactions that are already in the mempool (by txid) and \"trim\" them from the\n+    // package. Don't check by wtxid because we don't want to reject this package simply because a\n+    // transaction's witness data is different from the one in the mempool.\n+    for(const auto& tx: txns) {\n+        if (m_pool.exists(GenTxid(true, tx->GetWitnessHash())) || m_pool.exists(GenTxid(false, tx->GetHash()))) {\n+            // Grab information from the mempool entry.\n+            const auto mempool_info = m_pool.info(GenTxid(false, tx->GetHash()));\n+            const auto& mempool_wtxid = mempool_info.tx->GetWitnessHash();\n+            results.emplace(mempool_wtxid, MempoolAcceptResult::MempoolEntry(mempool_info.fee, mempool_info.vsize));\n+\n+            // If we have a same-txid-different-wtxid situation, add a result for the original\n+            // transaction so that the caller knows where to look for the mempool result.\n+            if (mempool_wtxid != tx->GetWitnessHash()) {\n+                TxValidationState state_conflict;\n+                state_conflict.Invalid(TxValidationResult::TX_CONFLICT, \"txn-same-nonwitness-data-in-mempool\");\n+                results.emplace(tx->GetWitnessHash(), MempoolAcceptResult::Failure(state_conflict, mempool_wtxid));\n+            }\n+        } else {\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n@@ -1123,8 +1142,9 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // Apply package mempool ancestor/descendant limits. Limit the scope of package_entries and\n     // package_ancestors; we shouldn't use them for anything other than calculating limits. When we\n     // submit the transactions to mempool, We should calculate ancestors for each transaction\n-    // individually before calling Finalize().\n-    {\n+    // individually before calling Finalize(). Exclude transactions trimmed for having the same txid\n+    // as transaction(s) in the mempool, otherwise we would double-count them.\n+    if (workspaces.size() > 1) {\n         std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> package_entries;\n         std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(package_entries),\n                        [](const auto& ws) { return std::cref(*ws.m_entry); });"
      },
      {
        "sha": "b62b78cb569c453ea4ab85798610780e25ab8fe1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9942821da6f48ce882910ce7af6a514b021bb90/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9942821da6f48ce882910ce7af6a514b021bb90/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b9942821da6f48ce882910ce7af6a514b021bb90",
        "patch": "@@ -172,10 +172,16 @@ struct MempoolAcceptResult {\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n+        MEMPOOL_INFO, //!> Entry already in mempool prior to validation.\n+        WTXID_CONFLICT, //!> Tx with the same txid but different wtxid already exists in mempool.\n     };\n     const ResultType m_result_type;\n     const TxValidationState m_state;\n \n+    /** Witness hash of a conflicting (same txid but different witness) transaction that exists in\n+     * the mempool. */\n+    const std::optional<uint256> m_wtxid_in_mempool;\n+\n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n     const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n@@ -187,11 +193,20 @@ struct MempoolAcceptResult {\n         return MempoolAcceptResult(state);\n     }\n \n+    static MempoolAcceptResult Failure(TxValidationState state, uint256 wtxid) {\n+        Assume(state.GetResult() == TxValidationResult::TX_CONFLICT);\n+        return MempoolAcceptResult(state, wtxid);\n+    }\n+\n     static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees,\n                                        int64_t vsize) {\n         return MempoolAcceptResult(std::move(replaced_txns), fees, vsize);\n     }\n \n+    static MempoolAcceptResult MempoolEntry(CAmount fees, int64_t vsize) {\n+        return MempoolAcceptResult(fees, vsize);\n+    }\n+\n // Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n private:\n     /** Constructor for failure case */\n@@ -204,6 +219,15 @@ struct MempoolAcceptResult {\n     explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees, int64_t vsize)\n         : m_result_type(ResultType::VALID),\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees), m_vsize{vsize} {}\n+\n+    /** Constructor for case where transaction is already in mempool */\n+    explicit MempoolAcceptResult(CAmount fees, int64_t vsize)\n+        : m_result_type{ResultType::MEMPOOL_INFO}, m_base_fees{fees}, m_vsize{vsize} {}\n+\n+    /** Constructor for case where transaction conflicts (same txid different wtxid) with another\n+     * transaction in mempool */\n+    explicit MempoolAcceptResult(TxValidationState state, uint256 wtxid)\n+        : m_result_type{ResultType::WTXID_CONFLICT}, m_wtxid_in_mempool{wtxid} {}\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "06a4d498c49adc7d0fdfcc43038873030a9cd560",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmE0ZDQ5OGM0OWFkYzdkMGZkZmNjNDMwMzg4NzMwMzBhOWNkNTYw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T14:40:59Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T14:33:02Z"
      },
      "message": "[test] package trimming",
      "tree": {
        "sha": "f4d8aa767381b91d92e6b8372579e95715d96e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4d8aa767381b91d92e6b8372579e95715d96e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06a4d498c49adc7d0fdfcc43038873030a9cd560",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a4d498c49adc7d0fdfcc43038873030a9cd560",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06a4d498c49adc7d0fdfcc43038873030a9cd560",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a4d498c49adc7d0fdfcc43038873030a9cd560/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9942821da6f48ce882910ce7af6a514b021bb90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9942821da6f48ce882910ce7af6a514b021bb90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9942821da6f48ce882910ce7af6a514b021bb90"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1f69f74ddf73b879749b836bdfb65657767296f",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06a4d498c49adc7d0fdfcc43038873030a9cd560/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06a4d498c49adc7d0fdfcc43038873030a9cd560/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=06a4d498c49adc7d0fdfcc43038873030a9cd560",
        "patch": "@@ -105,6 +105,19 @@ BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n     BOOST_CHECK_MESSAGE(it_child->second.m_state.IsValid(),\n                         \"Package validation unexpectedly failed: \" << it_child->second.m_state.GetRejectReason());\n \n+    // Submit the parent first. MemPoolAccept should detect that the transaction is already in the\n+    // mempool and trim it from the package.\n+    const auto result_parent = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                  tx_parent, /* bypass_limits */ false);\n+    initialPoolSize += 1;\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n+    BOOST_CHECK(result_parent.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+    const auto result_trimmed = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                  {tx_parent, tx_child}, /* test_accept */ true);\n+    BOOST_CHECK(result_trimmed.m_state.IsValid());\n+    auto it_trimmed_parent = result_trimmed.m_tx_results.find(tx_parent->GetWitnessHash());\n+    BOOST_CHECK(it_trimmed_parent->second.m_result_type == MempoolAcceptResult::ResultType::MEMPOOL_INFO);\n+\n     // Packages can't have more than 25 transactions.\n     Package package_too_many;\n     package_too_many.reserve(MAX_PACKAGE_COUNT + 1);"
      }
    ]
  },
  {
    "sha": "188cab0af2c5ee646f1467bd0a300d361ffd1fed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODhjYWIwYWYyYzVlZTY0NmYxNDY3YmQwYTMwMGQzNjFmZmQxZmVk",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T13:51:18Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T14:33:02Z"
      },
      "message": "[rpc] handle package trimming",
      "tree": {
        "sha": "b14de00e68f0a72ad37d1206cc5064555ce6d073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b14de00e68f0a72ad37d1206cc5064555ce6d073"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/188cab0af2c5ee646f1467bd0a300d361ffd1fed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/188cab0af2c5ee646f1467bd0a300d361ffd1fed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/188cab0af2c5ee646f1467bd0a300d361ffd1fed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/188cab0af2c5ee646f1467bd0a300d361ffd1fed/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06a4d498c49adc7d0fdfcc43038873030a9cd560",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06a4d498c49adc7d0fdfcc43038873030a9cd560",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06a4d498c49adc7d0fdfcc43038873030a9cd560"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e3f42306cd36b6ee6982b41f436a9d08ce86c7ff",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/188cab0af2c5ee646f1467bd0a300d361ffd1fed/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/188cab0af2c5ee646f1467bd0a300d361ffd1fed/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=188cab0af2c5ee646f1467bd0a300d361ffd1fed",
        "patch": "@@ -1007,6 +1007,25 @@ static RPCHelpMan testmempoolaccept()\n                 fees.pushKV(\"base\", ValueFromAmount(fee));\n                 result_inner.pushKV(\"fees\", fees);\n             }\n+        } else if (tx_result.m_result_type == MempoolAcceptResult::ResultType::WTXID_CONFLICT) {\n+            result_inner.pushKV(\"allowed\", false);\n+            // This is the result that would be returned in a single test accept.\n+            result_inner.pushKV(\"reject-reason\", \"txn-same-nonwitness-data-in-mempool\");\n+            // MemPoolAccept found a mempool match and replaced this transaction with a mempool\n+            // transaction that has the same txid. We just need to look it up in the results map.\n+            const auto mempool_entry_wtxid = tx_result.m_wtxid_in_mempool.value();\n+            UniValue result_additional(UniValue::VOBJ);\n+            result_additional.pushKV(\"txid\", tx->GetHash().GetHex());\n+            result_additional.pushKV(\"wtxid\", mempool_entry_wtxid.GetHex());\n+            result_additional.pushKV(\"allowed\", true);\n+            auto it_additional = package_result.m_tx_results.find(mempool_entry_wtxid);\n+            CHECK_NONFATAL(it_additional != package_result.m_tx_results.end());\n+            CHECK_NONFATAL(it_additional->second.m_result_type == MempoolAcceptResult::ResultType::MEMPOOL_INFO);\n+            result_additional.pushKV(\"vsize\", it_additional->second.m_vsize.value());\n+            UniValue fees(UniValue::VOBJ);\n+            fees.pushKV(\"base\", ValueFromAmount(it_additional->second.m_base_fees.value()));\n+            result_additional.pushKV(\"fees\", fees);\n+            rpc_result.push_back(result_additional);\n         } else {\n             result_inner.pushKV(\"allowed\", false);\n             const TxValidationState state = tx_result.m_state;"
      }
    ]
  },
  {
    "sha": "0eb938b4ea9a45946acf1795b4aa0ad7b60c4187",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWI5MzhiNGVhOWE0NTk0NmFjZjE3OTViNGFhMGFkN2I2MGM0MTg3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T10:16:58Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-15T14:33:02Z"
      },
      "message": "[test] pin package using same-txid-different-wtxid tx",
      "tree": {
        "sha": "efc11f0454900ba7b16782602e029a13e7ff0a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efc11f0454900ba7b16782602e029a13e7ff0a58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eb938b4ea9a45946acf1795b4aa0ad7b60c4187",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eb938b4ea9a45946acf1795b4aa0ad7b60c4187",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eb938b4ea9a45946acf1795b4aa0ad7b60c4187",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eb938b4ea9a45946acf1795b4aa0ad7b60c4187/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "188cab0af2c5ee646f1467bd0a300d361ffd1fed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/188cab0af2c5ee646f1467bd0a300d361ffd1fed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/188cab0af2c5ee646f1467bd0a300d361ffd1fed"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a199d8d34fc78d6fdd125015ce204cb3ca616f5",
        "filename": "test/functional/mempool_wtxid.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eb938b4ea9a45946acf1795b4aa0ad7b60c4187/test/functional/mempool_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eb938b4ea9a45946acf1795b4aa0ad7b60c4187/test/functional/mempool_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_wtxid.py?ref=0eb938b4ea9a45946acf1795b4aa0ad7b60c4187",
        "patch": "@@ -6,6 +6,7 @@\n Test mempool acceptance in case of an already known transaction\n with identical non-witness data different witness.\n \"\"\"\n+from decimal import Decimal\n \n from test_framework.script import (\n     CScript,\n@@ -99,6 +100,7 @@ def run_test(self):\n         assert child_one_wtxid != child_two_wtxid\n \n         self.log.info(\"Submit one child to the mempool\")\n+        testres_child_one = node.testmempoolaccept([ToHex(child_one)])[0]\n         txid_submitted = node.sendrawtransaction(ToHex(child_one))\n         assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n \n@@ -118,6 +120,32 @@ def run_test(self):\n         # sendrawtransaction will not throw but quits early when a transaction with the same nonwitness data is already in mempool\n         node.sendrawtransaction(ToHex(child_two))\n \n+        self.log.info(\"Simulate an attack attempting to prevent package from being accepted\")\n+        # This grandchild is valid with either child_one or child_two; it shouldn't matter which one.\n+        grandchild = CTransaction()\n+        grandchild.vin.append(CTxIn(COutPoint(int(child_two_txid, 16), 0), b\"\"))\n+        # Deduct 0.00001 BTC as fee, and use the same scriptPubKey (OP_TRUE script)\n+        grandchild.vout.append(CTxOut(int(9.99995 * COIN), child_script_pubkey))\n+        grandchild.wit.vtxinwit.append(CTxInWitness())\n+        grandchild.wit.vtxinwit[0].scriptWitness.stack = [child_witness_script]\n+        grandchild_txid = grandchild.rehash()\n+        grandchild_wtxid = grandchild.getwtxid()\n+\n+        # Submit the package { child_two, grandchild }. MemPoolAccept should detect that child_two\n+        # \"matches\" (by txid) child_one which is already in the mempool, and trim child_two from the\n+        # package. The RPC result should include this information: the full result for child_one\n+        # from its mempool entry, along with a \"txn-same-nonwitness-data-in-mempool\" for child_two.\n+        testres_full = node.testmempoolaccept([ToHex(child_two), ToHex(grandchild)])\n+        assert_equal(testres_full[0], testres_child_one)\n+        assert_equal(testres_full[1], testres_child_two)\n+        assert_equal(testres_full[2], {\n+                \"txid\": grandchild_txid,\n+                \"wtxid\": grandchild_wtxid,\n+                \"allowed\": True,\n+                \"vsize\": grandchild.get_vsize(),\n+                \"fees\": { \"base\": Decimal(\"0.00001\")}\n+        })\n+\n \n if __name__ == '__main__':\n     MempoolWtxidTest().main()"
      }
    ]
  }
]