[
  {
    "sha": "d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGM0OTk4ZjMxOThlOGQ3ZTM3YTg0MTRiOTg5MWY2Yjc0YjkxNzNi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-24T19:12:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-07T12:32:50Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "024d5ee00a52f539a95158ad92cd6aabbdab9b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/024d5ee00a52f539a95158ad92cd6aabbdab9b58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd83704ec6fa9a6564cd0f489efa65c1ecb095c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd83704ec6fa9a6564cd0f489efa65c1ecb095c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd83704ec6fa9a6564cd0f489efa65c1ecb095c2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3ff16b76646a86546569500357612cb02acdb93d",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
        "patch": "@@ -170,7 +170,7 @@ void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const C\n         }\n     } else {\n         // Ensure block connects to an ancestor of the current best block. This should be the case\n-        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // most of the time, but may not be immediately after the sync thread catches up and sets\n         // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n         // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n         // new chain tip. In this unlikely event, log a warning and let the queue clear.\n@@ -212,7 +212,7 @@ void TxIndex::ChainStateFlushed(const CBlockLocator& locator)\n     }\n \n     // This checks that ChainStateFlushed callbacks are received after BlockConnected. The check may fail\n-    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // immediately after the sync thread catches up and sets m_synced. Consider the case where\n     // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n     // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n     // event, log a warning and let the queue clear."
      },
      {
        "sha": "9ecddd2a118c576b9649c6ee97139ad5591c8468",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
        "patch": "@@ -305,7 +305,7 @@ std::unique_ptr<T> MakeUnique(Args&&... args)\n  * CPU-intensive and non-interactive. See SCHED_BATCH in sched(7) for details.\n  *\n  * @return The return value of sched_setschedule(), or 1 on systems without\n- * sched_setchedule().\n+ * sched_setschedule().\n  */\n int ScheduleBatchPriority(void);\n "
      },
      {
        "sha": "2cb07fb9324408afe3b20b3cfcc4e14ad0ad3202",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
        "patch": "@@ -552,7 +552,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         file.seekg(0, file.beg);\n \n         // Use uiInterface.ShowProgress instead of pwallet.ShowProgress because pwallet.ShowProgress has a cancel button tied to AbortRescan which\n-        // we don't want for this progress bar shoing the import progress. uiInterface.ShowProgress does not have a cancel button.\n+        // we don't want for this progress bar showing the import progress. uiInterface.ShowProgress does not have a cancel button.\n         uiInterface.ShowProgress(_(\"Importing...\"), 0, false); // show progress dialog in GUI\n         while (file.good()) {\n             uiInterface.ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);"
      },
      {
        "sha": "972c7c42079fe55d824033ce8a1e9aaf0b21fe84",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c4998f3198e8d7e37a8414b9891f6b74b9173b/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=d8c4998f3198e8d7e37a8414b9891f6b74b9173b",
        "patch": "@@ -79,7 +79,7 @@ def run_test(self):\n         self.reconnect_p2p(num_connections=2)\n \n         self.log.info('Test orphan transaction handling ... ')\n-        # Create a root transaction that we withold until all dependend transactions\n+        # Create a root transaction that we withhold until all dependend transactions\n         # are sent out and in the orphan cache\n         tx_withhold = CTransaction()\n         tx_withhold.vin.append(CTxIn(outpoint=COutPoint(block1.vtx[0].sha256, 0)))"
      }
    ]
  }
]