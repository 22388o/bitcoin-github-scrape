[
  {
    "sha": "05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWRiOGVjZmRiMWY5ODE1Y2M3YzMzZWEyNmM4ZTM3Mjc3MjUzOWIw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-09T13:20:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-09T13:20:55Z"
      },
      "message": "GetFloatArg utility function",
      "tree": {
        "sha": "8ef510e34be7b5391b2b3044366c542e1a333f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ef510e34be7b5391b2b3044366c542e1a333f99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3d8f14dca6a86fa103d86ef125e95372f860c"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "65b4743ffc039d83179a1b0d9b4aef6f9dbdd723",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
        "patch": "@@ -1,6 +1,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/math/special_functions/fpclassify.hpp>\n \n #include \"util.h\"\n \n@@ -130,6 +131,41 @@ BOOST_AUTO_TEST_CASE(intarg)\n     BOOST_CHECK_EQUAL(GetArg(\"-bar\", 11), 0);\n }\n \n+BOOST_AUTO_TEST_CASE(floatarg)\n+{\n+    ResetArgs(\"\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 11.), 11.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 0.);\n+\n+    ResetArgs(\"-foo -bar\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 11.), 0.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 0.);\n+\n+    ResetArgs(\"-foo=11 -bar=-12\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 11.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), -12.);\n+\n+    ResetArgs(\"-foo=+11.25 -bar=12.125e+1\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 11.25);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 121.25);\n+\n+    ResetArgs(\"-foo=0x10 -bar=0x11p-2\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 16);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 4.25);\n+\n+    ResetArgs(\"-foo=INF -bar=-INFINITY\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), INFINITY);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), -INFINITY);\n+\n+    ResetArgs(\"-foo=NaN -bar=-NAN\");\n+    BOOST_CHECK(isnan(GetFloatArg(\"-foo\", 1.)));\n+    BOOST_CHECK(isnan(GetFloatArg(\"-bar\", 11.)));\n+\n+    ResetArgs(\"-foo=invalid -bar=reallyinvalid\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 1.), 0.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 0.);\n+}\n+\n BOOST_AUTO_TEST_CASE(doubledash)\n {\n     ResetArgs(\"--foo\");"
      },
      {
        "sha": "6dcc25272dc9ab9d3c398038c760dfc668d099ce",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
        "patch": "@@ -539,6 +539,13 @@ bool GetBoolArg(const std::string& strArg, bool fDefault)\n     return fDefault;\n }\n \n+double GetFloatArg(const std::string& strArg, double nDefault)\n+{\n+    if (mapArgs.count(strArg))\n+        return atof(mapArgs[strArg].c_str());\n+    return nDefault;\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))"
      },
      {
        "sha": "8ba050c80db721286c8fa3a24433ddeb83f9efc0",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05db8ecfdb1f9815cc7c33ea26c8e372772539b0/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
        "patch": "@@ -417,6 +417,15 @@ int64 GetArg(const std::string& strArg, int64 nDefault);\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault=false);\n \n+/**\n+ * Return floating-point argument or default value\n+ *\n+ * @param strArg Argument to get (e.g. \"-foo\")\n+ * @param default (e.g. 1.)\n+ * @return command-line argument (0 if invalid number) or default value\n+ */\n+double GetFloatArg(const std::string& strArg, double nDefault);\n+\n /**\n  * Set an argument if it doesn't already have a value\n  *"
      }
    ]
  },
  {
    "sha": "5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmIxYTFmNThjYjUxZmNkNDBhOGMyMzQ3MjM3ZmMzYWI4OGUzMmI3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-06T05:27:08Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T19:39:06Z"
      },
      "message": "Bugfix: %-12I64d is not valid and causes the parameter to be skipped, use %12\"PRI64d\" instead\n\nConflicts:\n\n\tsrc/walletdb.cpp",
      "tree": {
        "sha": "3e596ee0b2ac205aca333173dc159615c7229d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e596ee0b2ac205aca333173dc159615c7229d1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3d8f14dca6a86fa103d86ef125e95372f860c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c3a1c9d1f5542e557b38b68065f4f715c57486f4",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
        "patch": "@@ -961,7 +961,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n \n                 //// debug print\n                 //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-                //printf(\" %12I64d  %s  %s  %s\\n\",\n+                //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n                 //    wtx.vout[0].nValue,\n                 //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n                 //    wtx.hashBlock.ToString().substr(0,20).c_str(),"
      },
      {
        "sha": "4ccd90cf3a54cfa952bd60a1498849d4e9464bc6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
        "patch": "@@ -3130,7 +3130,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                 dPriority += (double)nValueIn * nConf;\n \n                 if (fDebug && GetBoolArg(\"-printpriority\"))\n-                    printf(\"priority     nValueIn=%-12I64d nConf=%-5d dPriority=%-20.1f\\n\", nValueIn, nConf, dPriority);\n+                    printf(\"priority     nValueIn=%-12\"PRI64d\" nConf=%-5d dPriority=%-20.1f\\n\", nValueIn, nConf, dPriority);\n             }\n \n             // Priority is sum(valuein * age) / txsize"
      }
    ]
  },
  {
    "sha": "fddbbe0a617f4b6064b52e33598e9b80c3e10492",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGRiYmUwYTYxN2Y0YjYwNjRiNTJlMzM1OThlOWI4MGMzZTEwNDky",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-09T02:43:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T19:47:32Z"
      },
      "message": "Refactor CreateNewBlock transaction selection algorithm\n\n- Transaction fees for children might help the parent transaction get confirmed\n- Transaction fees can boost the priority of transactions included",
      "tree": {
        "sha": "9ddbf73696784688f9df163333bd4fe7afaee522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ddbf73696784688f9df163333bd4fe7afaee522"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fddbbe0a617f4b6064b52e33598e9b80c3e10492",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddbbe0a617f4b6064b52e33598e9b80c3e10492",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fddbbe0a617f4b6064b52e33598e9b80c3e10492",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddbbe0a617f4b6064b52e33598e9b80c3e10492/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bb1a1f58cb51fcd40a8c2347237fc3ab88e32b7"
      }
    ],
    "stats": {
      "total": 294,
      "additions": 221,
      "deletions": 73
    },
    "files": [
      {
        "sha": "f5cb17c44a2a720a5d215004013b80f477a05fee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 218,
        "deletions": 71,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fddbbe0a617f4b6064b52e33598e9b80c3e10492/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fddbbe0a617f4b6064b52e33598e9b80c3e10492/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fddbbe0a617f4b6064b52e33598e9b80c3e10492",
        "patch": "@@ -3040,26 +3040,144 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n     }\n }\n \n-// Some explaining would be appreciated\n-class COrphan\n+// CTxInfo represents a logical transaction to potentially be included in blocks\n+// It stores extra metadata such as the subjective priority of a transaction at the time of building the block\n+// When there are unconfirmed transactions that depend on other unconfirmed transactions, these \"child\" transactions' CTxInfo object factors in its \"parents\" to its priority and effective size; this way, the \"child\" can cover the \"cost\" of its \"parents\", and the \"parents\" are included into the block as part of the \"child\"\n+\n+class CTxInfo;\n+typedef std::map<uint256, CTxInfo> mapInfo_t;\n+\n+class CTxInfo\n {\n public:\n+    mapInfo_t *pmapInfoById;\n     CTransaction* ptx;\n+    uint256 hash;\n+private:\n     set<uint256> setDependsOn;\n+public:\n+    set<uint256> setDependents;\n     double dPriority;\n+    uint64 nTxFee;\n+    bool fInvalid;\n+    unsigned int nSize;\n+    unsigned int nEffectiveSizeCached;\n \n-    COrphan(CTransaction* ptxIn)\n+    CTxInfo()\n     {\n-        ptx = ptxIn;\n+        pmapInfoById = NULL;\n+        hash = 0;\n+        ptx = NULL;\n         dPriority = 0;\n+        nTxFee = 0;\n+        fInvalid = false;\n+        nSize = 0;\n+        nEffectiveSizeCached = 0;\n     }\n \n     void print() const\n     {\n-        printf(\"COrphan(hash=%s, dPriority=%.1f)\\n\", ptx->GetHash().ToString().substr(0,10).c_str(), dPriority);\n+        printf(\"CTxInfo(hash=%s, dPriority=%.1f, nTxFee=%\"PRI64u\")\\n\", hash.ToString().substr(0,10).c_str(), dPriority, nTxFee);\n         BOOST_FOREACH(uint256 hash, setDependsOn)\n             printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n     }\n+\n+    void addDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.insert(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    void rmDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.erase(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    // effectiveSize and effectivePriority handle inheriting the fInvalid flag as a side effect\n+    unsigned int\n+    effectiveSize()\n+    {\n+        if (fInvalid)\n+            return -1;\n+\n+        if (nEffectiveSizeCached)\n+            return nEffectiveSizeCached;\n+\n+        assert(pmapInfoById);\n+\n+        if (!nSize)\n+            nSize = ::GetSerializeSize(*ptx, SER_NETWORK, PROTOCOL_VERSION);\n+        unsigned int nEffectiveSize = nSize;\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            nEffectiveSize += depinfo.effectiveSize();\n+\n+            if (depinfo.fInvalid)\n+            {\n+                fInvalid = true;\n+                return -1;\n+            }\n+        }\n+        nEffectiveSizeCached = nEffectiveSize;\n+        return nEffectiveSize;\n+    }\n+\n+    double\n+    effectivePriority()\n+    {\n+        // Priority is sum(valuein * age) / txsize\n+        return dPriority / effectiveSize();\n+    }\n+\n+    int\n+    GetLegacySigOpCount()\n+    {\n+        assert(pmapInfoById);\n+\n+        int n = ptx->GetLegacySigOpCount();\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            n += depinfo.GetLegacySigOpCount();\n+        }\n+        return n;\n+    }\n+\n+    bool\n+    DoInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoolTmp, CBlockIndex*pindexPrev, std::vector<CTxInfo*>& vAdded, int& nTxSigOps)\n+    {\n+        CTransaction& tx = *ptx;\n+\n+        if (mapTestPoolTmp.count(hash))\n+            // Already included in block template\n+            return true;\n+\n+        assert(pmapInfoById);\n+\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            if (!depinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n+                return false;\n+        }\n+\n+        MapPrevTx mapInputs;\n+        bool fInvalid;\n+        if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            return false;\n+\n+        nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+\n+        if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n+            return false;\n+\n+        mapTestPoolTmp[hash] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n+        vAdded.push_back(this);\n+\n+        return true;\n+    }\n };\n \n \n@@ -3092,62 +3210,93 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     {\n         CTxDB txdb(\"r\");\n \n+        double nFeeWeight = 1., nDepthWeight = 1.;\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\");\n+\n         // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n-        multimap<double, CTransaction*> mapPriority;\n+        mapInfo_t mapInfoById;\n         for (map<uint256, CTransaction>::iterator mi = mapTransactions.begin(); mi != mapTransactions.end(); ++mi)\n         {\n             CTransaction& tx = (*mi).second;\n             if (tx.IsCoinBase() || !tx.IsFinal())\n                 continue;\n \n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n+            const uint256& hash = tx.GetHash();\n+            CTxInfo& txinfo = mapInfoById[hash];\n+            txinfo.hash = hash;\n+            txinfo.pmapInfoById = &mapInfoById;\n+            txinfo.ptx = &tx;\n+\n+            double& dPriority = txinfo.dPriority;\n+            uint64& nTxFee = txinfo.nTxFee;\n+            uint64 nValueIn;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n                 // Read prev transaction\n                 CTransaction txPrev;\n                 CTxIndex txindex;\n-                if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n+                int64 nValueIn;\n+                int nConf;\n+                if (txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n                 {\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    continue;\n+                    // Input is confirmed\n+                    nConf = txindex.GetDepthInMainChain();\n+                    nValueIn = txPrev.vout[txin.prevout.n].nValue;\n+                    dPriority += (double)nValueIn * nConf;\n                 }\n-                int64 nValueIn = txPrev.vout[txin.prevout.n].nValue;\n-\n-                // Read block header\n-                int nConf = txindex.GetDepthInMainChain();\n-\n-                dPriority += (double)nValueIn * nConf;\n+                else\n+                if (mapTransactions.count(txin.prevout.hash))\n+                {\n+                    // Input is still unconfirmed\n+                    const uint256& hashPrev = txin.prevout.hash;\n+                    nValueIn = mapTransactions[hashPrev].vout[txin.prevout.n].nValue;\n+                    txinfo.addDependsOn(hashPrev);\n+                    mapInfoById[hashPrev].setDependents.insert(hash);\n+                    nConf = 0;\n+                }\n+                else\n+                {\n+                    // We don't know where the input is\n+                    // In this case, it's impossible to include this transaction in a block, so mark it invalid and move on\n+                    txinfo.fInvalid = true;\n+                    printf(\"priority %s invalid input %s\", txinfo.hash.ToString().substr(0,10).c_str(), txin.prevout.hash.ToString().substr(0,10).c_str());\n+                    goto nexttxn;\n+                }\n+                nTxFee += nValueIn;\n \n-                if (fDebug && GetBoolArg(\"-printpriority\"))\n+                if (fPrintPriority)\n                     printf(\"priority     nValueIn=%-12\"PRI64d\" nConf=%-5d dPriority=%-20.1f\\n\", nValueIn, nConf, dPriority);\n             }\n \n-            // Priority is sum(valuein * age) / txsize\n-            dPriority /= ::GetSerializeSize(tx, SER_NETWORK);\n+            nValueIn = nTxFee;\n+            nTxFee -= tx.GetValueOut();\n \n-            if (porphan)\n-                porphan->dPriority = dPriority;\n-            else\n-                mapPriority.insert(make_pair(-dPriority, &(*mi).second));\n+            dPriority *= nDepthWeight;\n \n-            if (fDebug && GetBoolArg(\"-printpriority\"))\n-            {\n-                printf(\"priority %-20.1f %s\\n%s\", dPriority, tx.GetHash().ToString().substr(0,10).c_str(), tx.ToString().c_str());\n-                if (porphan)\n-                    porphan->print();\n-                printf(\"\\n\");\n-            }\n+            // Allow boosting \"age\" with fees\n+            dPriority += (double)nValueIn * (double)nTxFee * nFeeWeight;\n+\n+            if (fPrintPriority)\n+                txinfo.print();\n+nexttxn:    (void)1;\n+        }\n+\n+        // Second pass: consider dependencies\n+        multimap<double, CTxInfo*> mapPriority;\n+        BOOST_FOREACH(mapInfo_t::value_type& i, mapInfoById)\n+        {\n+            CTxInfo& txinfo = i.second;\n+\n+            double dPriority = txinfo.effectivePriority();\n+\n+            // effectivePriority does fInvalid inheritance as a side-effect\n+            if (txinfo.fInvalid)\n+                continue;\n+\n+            mapPriority.insert(make_pair(-dPriority, &txinfo));\n+\n+            if (fPrintPriority)\n+                printf(\"priority insert %s at priority %.1f\\n\", txinfo.hash.ToString().substr(0,10).c_str(), dPriority);\n         }\n \n         // Collect transactions into block\n@@ -3159,63 +3308,61 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         {\n             // Take highest priority transaction off priority queue\n             double dPriority = -(*mapPriority.begin()).first;\n-            CTransaction& tx = *(*mapPriority.begin()).second;\n+            CTxInfo& txinfo = *(*mapPriority.begin()).second;\n+            CTransaction& tx = *txinfo.ptx;\n             mapPriority.erase(mapPriority.begin());\n \n+            if (mapTestPool.count(txinfo.hash))\n+                // Already in the block\n+                continue;\n+\n             // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK);\n+            unsigned int nTxSize = txinfo.effectiveSize();\n             if (nBlockSize + nTxSize >= MAX_BLOCK_SIZE_GEN)\n                 continue;\n \n             // Legacy limits on sigOps:\n-            int nTxSigOps = tx.GetLegacySigOpCount();\n+            int nTxSigOps = txinfo.GetLegacySigOpCount();\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n+            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK, nTxSize);\n \n-            // Connecting shouldn't fail due to dependency on other memory pool transactions\n-            // because we're already processing them in order of dependency\n-            map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n-            MapPrevTx mapInputs;\n-            bool fInvalid;\n-            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            uint64& nTxFees = txinfo.nTxFee;\n+            if (nTxFees < nMinFee)\n                 continue;\n \n-            int64 nTxFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();\n-            if (nTxFees < nMinFee)\n+            map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n+            std::vector<CTxInfo*> vAdded;\n+            if (!txinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n                 continue;\n \n-            nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n-                continue;\n-            mapTestPoolTmp[tx.GetHash()] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n             swap(mapTestPool, mapTestPoolTmp);\n \n             // Added\n-            pblock->vtx.push_back(tx);\n             nBlockSize += nTxSize;\n-            ++nBlockTx;\n+            nBlockTx += vAdded.size();\n             nBlockSigOps += nTxSigOps;\n-            nFees += nTxFees;\n-\n-            // Add transactions that depend on this one to the priority queue\n-            uint256 hash = tx.GetHash();\n-            if (mapDependers.count(hash))\n+            BOOST_FOREACH(CTxInfo* ptxinfo, vAdded)\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n+                pblock->vtx.push_back(*ptxinfo->ptx);\n+                nFees += ptxinfo->nTxFee;\n+\n+                // Add transactions that depend on this one to the priority queue\n+                // again, since they likely have improved their standing alone\n+                BOOST_FOREACH(const uint256& dhash, ptxinfo->setDependents)\n                 {\n-                    if (!porphan->setDependsOn.empty())\n-                    {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                            mapPriority.insert(make_pair(-porphan->dPriority, porphan->ptx));\n-                    }\n+                    CTxInfo& dtxinfo = mapInfoById[dhash];\n+                    dtxinfo.rmDependsOn(ptxinfo->hash);\n+                    if (dtxinfo.fInvalid)\n+                        continue;\n+                    double dPriority = dtxinfo.effectivePriority();\n+                    mapPriority.insert(make_pair(-dPriority, &dtxinfo));\n                 }\n             }\n         }"
      },
      {
        "sha": "957dde3f9051e8657f3112c2156e6f0eea600537",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fddbbe0a617f4b6064b52e33598e9b80c3e10492/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fddbbe0a617f4b6064b52e33598e9b80c3e10492/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fddbbe0a617f4b6064b52e33598e9b80c3e10492",
        "patch": "@@ -544,12 +544,13 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n+    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK, unsigned int nBytes=0) const\n     {\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n         int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n-        unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);\n+        if (!nBytes)\n+            nBytes = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;\n         int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n "
      }
    ]
  },
  {
    "sha": "919e4442a80d4b76003ff51b8418e8085ffbfb04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTllNDQ0MmE4MGQ0Yjc2MDAzZmY1MWI4NDE4ZTgwODVmZmJmYjA0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T19:48:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T19:48:16Z"
      },
      "message": "Merge branch 'getfloatarg' into txn_prio_0.6.0",
      "tree": {
        "sha": "3bc91915b33a4a202aaaa1467d656a6b26fc0921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc91915b33a4a202aaaa1467d656a6b26fc0921"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/919e4442a80d4b76003ff51b8418e8085ffbfb04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/919e4442a80d4b76003ff51b8418e8085ffbfb04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/919e4442a80d4b76003ff51b8418e8085ffbfb04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/919e4442a80d4b76003ff51b8418e8085ffbfb04/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fddbbe0a617f4b6064b52e33598e9b80c3e10492",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddbbe0a617f4b6064b52e33598e9b80c3e10492",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fddbbe0a617f4b6064b52e33598e9b80c3e10492"
      },
      {
        "sha": "05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05db8ecfdb1f9815cc7c33ea26c8e372772539b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05db8ecfdb1f9815cc7c33ea26c8e372772539b0"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "65b4743ffc039d83179a1b0d9b4aef6f9dbdd723",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/919e4442a80d4b76003ff51b8418e8085ffbfb04/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/919e4442a80d4b76003ff51b8418e8085ffbfb04/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=919e4442a80d4b76003ff51b8418e8085ffbfb04",
        "patch": "@@ -1,6 +1,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/math/special_functions/fpclassify.hpp>\n \n #include \"util.h\"\n \n@@ -130,6 +131,41 @@ BOOST_AUTO_TEST_CASE(intarg)\n     BOOST_CHECK_EQUAL(GetArg(\"-bar\", 11), 0);\n }\n \n+BOOST_AUTO_TEST_CASE(floatarg)\n+{\n+    ResetArgs(\"\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 11.), 11.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 0.);\n+\n+    ResetArgs(\"-foo -bar\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 11.), 0.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 0.);\n+\n+    ResetArgs(\"-foo=11 -bar=-12\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 11.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), -12.);\n+\n+    ResetArgs(\"-foo=+11.25 -bar=12.125e+1\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 11.25);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 121.25);\n+\n+    ResetArgs(\"-foo=0x10 -bar=0x11p-2\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 16);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 4.25);\n+\n+    ResetArgs(\"-foo=INF -bar=-INFINITY\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), INFINITY);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), -INFINITY);\n+\n+    ResetArgs(\"-foo=NaN -bar=-NAN\");\n+    BOOST_CHECK(isnan(GetFloatArg(\"-foo\", 1.)));\n+    BOOST_CHECK(isnan(GetFloatArg(\"-bar\", 11.)));\n+\n+    ResetArgs(\"-foo=invalid -bar=reallyinvalid\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 1.), 0.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 0.);\n+}\n+\n BOOST_AUTO_TEST_CASE(doubledash)\n {\n     ResetArgs(\"--foo\");"
      },
      {
        "sha": "6dcc25272dc9ab9d3c398038c760dfc668d099ce",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/919e4442a80d4b76003ff51b8418e8085ffbfb04/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/919e4442a80d4b76003ff51b8418e8085ffbfb04/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=919e4442a80d4b76003ff51b8418e8085ffbfb04",
        "patch": "@@ -539,6 +539,13 @@ bool GetBoolArg(const std::string& strArg, bool fDefault)\n     return fDefault;\n }\n \n+double GetFloatArg(const std::string& strArg, double nDefault)\n+{\n+    if (mapArgs.count(strArg))\n+        return atof(mapArgs[strArg].c_str());\n+    return nDefault;\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))"
      },
      {
        "sha": "8ba050c80db721286c8fa3a24433ddeb83f9efc0",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/919e4442a80d4b76003ff51b8418e8085ffbfb04/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/919e4442a80d4b76003ff51b8418e8085ffbfb04/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=919e4442a80d4b76003ff51b8418e8085ffbfb04",
        "patch": "@@ -417,6 +417,15 @@ int64 GetArg(const std::string& strArg, int64 nDefault);\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault=false);\n \n+/**\n+ * Return floating-point argument or default value\n+ *\n+ * @param strArg Argument to get (e.g. \"-foo\")\n+ * @param default (e.g. 1.)\n+ * @return command-line argument (0 if invalid number) or default value\n+ */\n+double GetFloatArg(const std::string& strArg, double nDefault);\n+\n /**\n  * Set an argument if it doesn't already have a value\n  *"
      }
    ]
  },
  {
    "sha": "02077ee878c4df75b96c28f0f1b601f1e032aac7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjA3N2VlODc4YzRkZjc1Yjk2YzI4ZjBmMWI2MDFmMWUwMzJhYWM3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-09T13:28:54Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T19:48:27Z"
      },
      "message": "Make transaction priority weights user-configurable",
      "tree": {
        "sha": "ef07affe607d1cf0f62f7d1e33894a28d72f9c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef07affe607d1cf0f62f7d1e33894a28d72f9c6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02077ee878c4df75b96c28f0f1b601f1e032aac7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02077ee878c4df75b96c28f0f1b601f1e032aac7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02077ee878c4df75b96c28f0f1b601f1e032aac7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02077ee878c4df75b96c28f0f1b601f1e032aac7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "919e4442a80d4b76003ff51b8418e8085ffbfb04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/919e4442a80d4b76003ff51b8418e8085ffbfb04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/919e4442a80d4b76003ff51b8418e8085ffbfb04"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2a2e03c68f605862f7bf29c7142a71522f095ad9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02077ee878c4df75b96c28f0f1b601f1e032aac7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02077ee878c4df75b96c28f0f1b601f1e032aac7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=02077ee878c4df75b96c28f0f1b601f1e032aac7",
        "patch": "@@ -174,6 +174,8 @@ bool AppInit2(int argc, char* argv[])\n             \"  -pid=<file>      \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\" +\n             \"  -gen             \\t\\t  \" + _(\"Generate coins\") + \"\\n\" +\n             \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\") + \"\\n\" +\n+            \"  -txprioweighfee  \\t  \" + _(\"Weigh fees when calculating transaction priorities for mining (default: 1.0)\") + \"\\n\" +\n+            \"  -txprioweighdepth\\t  \" + _(\"Weigh confirmation depth when calculating transaction priorities for mining (default: 1.0)\") + \"\\n\" +\n             \"  -min             \\t\\t  \" + _(\"Start minimized\") + \"\\n\" +\n             \"  -splash          \\t\\t  \" + _(\"Show splash screen on startup (default: 1)\") + \"\\n\" +\n             \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\") + \"\\n\" +"
      },
      {
        "sha": "b7691a5981755d943ea506bd914029c236068ab1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02077ee878c4df75b96c28f0f1b601f1e032aac7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02077ee878c4df75b96c28f0f1b601f1e032aac7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=02077ee878c4df75b96c28f0f1b601f1e032aac7",
        "patch": "@@ -3210,7 +3210,8 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     {\n         CTxDB txdb(\"r\");\n \n-        double nFeeWeight = 1., nDepthWeight = 1.;\n+        double nFeeWeight = GetFloatArg(\"-txprioweighfee\", 1.);\n+        double nDepthWeight = GetFloatArg(\"-txprioweighdepth\", 1.);\n         bool fPrintPriority = GetBoolArg(\"-printpriority\");\n \n         // Priority order to process transactions"
      }
    ]
  },
  {
    "sha": "e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2U3ZGYxYWUwNzc0MDNhNjVhOWI5YWI2Mjc3MGM3ODQyOGU2ZWIx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T20:01:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-12T20:01:12Z"
      },
      "message": "Merge branch 'txn_prio_0.6.0' into txn_prio\n\nConflicts:\n\tsrc/db.cpp\n\tsrc/init.cpp\n\tsrc/main.cpp\n\tsrc/main.h",
      "tree": {
        "sha": "b428ca844d6df743332ddc703b5a2a4dcac00f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b428ca844d6df743332ddc703b5a2a4dcac00f62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12718ce767accf71652cee34ad2003f95deb6e55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12718ce767accf71652cee34ad2003f95deb6e55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12718ce767accf71652cee34ad2003f95deb6e55"
      },
      {
        "sha": "02077ee878c4df75b96c28f0f1b601f1e032aac7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02077ee878c4df75b96c28f0f1b601f1e032aac7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02077ee878c4df75b96c28f0f1b601f1e032aac7"
      }
    ],
    "stats": {
      "total": 349,
      "additions": 276,
      "deletions": 73
    },
    "files": [
      {
        "sha": "3372924a111a6c7c861f36ca71b4b04b387a8032",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
        "patch": "@@ -202,6 +202,8 @@ std::string HelpMessage()\n         \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\" +\n         \"  -gen                   \" + _(\"Generate coins\") + \"\\n\" +\n         \"  -gen=0                 \" + _(\"Don't generate coins\") + \"\\n\" +\n+        \"  -txprioweighfee        \" + _(\"Weigh fees when calculating transaction priorities for mining (default: 1.0)\") + \"\\n\" +\n+        \"  -txprioweighdepth      \" + _(\"Weigh confirmation depth when calculating transaction priorities for mining (default: 1.0)\") + \"\\n\" +\n         \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +\n         \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n         \"  -dblogsize=<n>         \" + _(\"Set database disk log size in megabytes (default: 100)\") + \"\\n\" +"
      },
      {
        "sha": "2fb95f0fa1753e455ab932d262c7030616f6dfea",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 219,
        "deletions": 71,
        "changes": 290,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
        "patch": "@@ -3247,26 +3247,144 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n     }\n }\n \n-// Some explaining would be appreciated\n-class COrphan\n+// CTxInfo represents a logical transaction to potentially be included in blocks\n+// It stores extra metadata such as the subjective priority of a transaction at the time of building the block\n+// When there are unconfirmed transactions that depend on other unconfirmed transactions, these \"child\" transactions' CTxInfo object factors in its \"parents\" to its priority and effective size; this way, the \"child\" can cover the \"cost\" of its \"parents\", and the \"parents\" are included into the block as part of the \"child\"\n+\n+class CTxInfo;\n+typedef std::map<uint256, CTxInfo> mapInfo_t;\n+\n+class CTxInfo\n {\n public:\n+    mapInfo_t *pmapInfoById;\n     CTransaction* ptx;\n+    uint256 hash;\n+private:\n     set<uint256> setDependsOn;\n+public:\n+    set<uint256> setDependents;\n     double dPriority;\n+    uint64 nTxFee;\n+    bool fInvalid;\n+    unsigned int nSize;\n+    unsigned int nEffectiveSizeCached;\n \n-    COrphan(CTransaction* ptxIn)\n+    CTxInfo()\n     {\n-        ptx = ptxIn;\n+        pmapInfoById = NULL;\n+        hash = 0;\n+        ptx = NULL;\n         dPriority = 0;\n+        nTxFee = 0;\n+        fInvalid = false;\n+        nSize = 0;\n+        nEffectiveSizeCached = 0;\n     }\n \n     void print() const\n     {\n-        printf(\"COrphan(hash=%s, dPriority=%.1f)\\n\", ptx->GetHash().ToString().substr(0,10).c_str(), dPriority);\n+        printf(\"CTxInfo(hash=%s, dPriority=%.1f, nTxFee=%\"PRI64u\")\\n\", hash.ToString().substr(0,10).c_str(), dPriority, nTxFee);\n         BOOST_FOREACH(uint256 hash, setDependsOn)\n             printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n     }\n+\n+    void addDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.insert(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    void rmDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.erase(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    // effectiveSize and effectivePriority handle inheriting the fInvalid flag as a side effect\n+    unsigned int\n+    effectiveSize()\n+    {\n+        if (fInvalid)\n+            return -1;\n+\n+        if (nEffectiveSizeCached)\n+            return nEffectiveSizeCached;\n+\n+        assert(pmapInfoById);\n+\n+        if (!nSize)\n+            nSize = ::GetSerializeSize(*ptx, SER_NETWORK, PROTOCOL_VERSION);\n+        unsigned int nEffectiveSize = nSize;\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            nEffectiveSize += depinfo.effectiveSize();\n+\n+            if (depinfo.fInvalid)\n+            {\n+                fInvalid = true;\n+                return -1;\n+            }\n+        }\n+        nEffectiveSizeCached = nEffectiveSize;\n+        return nEffectiveSize;\n+    }\n+\n+    double\n+    effectivePriority()\n+    {\n+        // Priority is sum(valuein * age) / txsize\n+        return dPriority / effectiveSize();\n+    }\n+\n+    unsigned int\n+    GetLegacySigOpCount()\n+    {\n+        assert(pmapInfoById);\n+\n+        unsigned int n = ptx->GetLegacySigOpCount();\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            n += depinfo.GetLegacySigOpCount();\n+        }\n+        return n;\n+    }\n+\n+    bool\n+    DoInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoolTmp, CBlockIndex*pindexPrev, std::vector<CTxInfo*>& vAdded, unsigned int& nTxSigOps)\n+    {\n+        CTransaction& tx = *ptx;\n+\n+        if (mapTestPoolTmp.count(hash))\n+            // Already included in block template\n+            return true;\n+\n+        assert(pmapInfoById);\n+\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            if (!depinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n+                return false;\n+        }\n+\n+        MapPrevTx mapInputs;\n+        bool fInvalid;\n+        if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            return false;\n+\n+        nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+\n+        if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n+            return false;\n+\n+        mapTestPoolTmp[hash] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n+        vAdded.push_back(this);\n+\n+        return true;\n+    }\n };\n \n \n@@ -3298,62 +3416,94 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         LOCK2(cs_main, mempool.cs);\n         CTxDB txdb(\"r\");\n \n+        double nFeeWeight = GetFloatArg(\"-txprioweighfee\", 1.);\n+        double nDepthWeight = GetFloatArg(\"-txprioweighdepth\", 1.);\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\");\n+\n         // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n-        multimap<double, CTransaction*> mapPriority;\n+        mapInfo_t mapInfoById;\n         for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n         {\n             CTransaction& tx = (*mi).second;\n             if (tx.IsCoinBase() || !tx.IsFinal())\n                 continue;\n \n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n+            const uint256& hash = tx.GetHash();\n+            CTxInfo& txinfo = mapInfoById[hash];\n+            txinfo.hash = hash;\n+            txinfo.pmapInfoById = &mapInfoById;\n+            txinfo.ptx = &tx;\n+\n+            double& dPriority = txinfo.dPriority;\n+            uint64& nTxFee = txinfo.nTxFee;\n+            uint64 nValueIn;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n                 // Read prev transaction\n                 CTransaction txPrev;\n                 CTxIndex txindex;\n-                if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n+                int64 nValueIn;\n+                int nConf;\n+                if (txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n                 {\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    continue;\n+                    // Input is confirmed\n+                    nConf = txindex.GetDepthInMainChain();\n+                    nValueIn = txPrev.vout[txin.prevout.n].nValue;\n+                    dPriority += (double)nValueIn * nConf;\n                 }\n-                int64 nValueIn = txPrev.vout[txin.prevout.n].nValue;\n-\n-                // Read block header\n-                int nConf = txindex.GetDepthInMainChain();\n-\n-                dPriority += (double)nValueIn * nConf;\n+                else\n+                if (mempool.mapTx.count(txin.prevout.hash))\n+                {\n+                    // Input is still unconfirmed\n+                    const uint256& hashPrev = txin.prevout.hash;\n+                    nValueIn = mempool.mapTx[hashPrev].vout[txin.prevout.n].nValue;\n+                    txinfo.addDependsOn(hashPrev);\n+                    mapInfoById[hashPrev].setDependents.insert(hash);\n+                    nConf = 0;\n+                }\n+                else\n+                {\n+                    // We don't know where the input is\n+                    // In this case, it's impossible to include this transaction in a block, so mark it invalid and move on\n+                    txinfo.fInvalid = true;\n+                    printf(\"priority %s invalid input %s\", txinfo.hash.ToString().substr(0,10).c_str(), txin.prevout.hash.ToString().substr(0,10).c_str());\n+                    goto nexttxn;\n+                }\n+                nTxFee += nValueIn;\n \n-                if (fDebug && GetBoolArg(\"-printpriority\"))\n+                if (fPrintPriority)\n                     printf(\"priority     nValueIn=%-12\"PRI64d\" nConf=%-5d dPriority=%-20.1f\\n\", nValueIn, nConf, dPriority);\n             }\n \n-            // Priority is sum(valuein * age) / txsize\n-            dPriority /= ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+            nValueIn = nTxFee;\n+            nTxFee -= tx.GetValueOut();\n \n-            if (porphan)\n-                porphan->dPriority = dPriority;\n-            else\n-                mapPriority.insert(make_pair(-dPriority, &(*mi).second));\n+            dPriority *= nDepthWeight;\n \n-            if (fDebug && GetBoolArg(\"-printpriority\"))\n-            {\n-                printf(\"priority %-20.1f %s\\n%s\", dPriority, tx.GetHash().ToString().substr(0,10).c_str(), tx.ToString().c_str());\n-                if (porphan)\n-                    porphan->print();\n-                printf(\"\\n\");\n-            }\n+            // Allow boosting \"age\" with fees\n+            dPriority += (double)nValueIn * (double)nTxFee * nFeeWeight;\n+\n+            if (fPrintPriority)\n+                txinfo.print();\n+nexttxn:    (void)1;\n+        }\n+\n+        // Second pass: consider dependencies\n+        multimap<double, CTxInfo*> mapPriority;\n+        BOOST_FOREACH(mapInfo_t::value_type& i, mapInfoById)\n+        {\n+            CTxInfo& txinfo = i.second;\n+\n+            double dPriority = txinfo.effectivePriority();\n+\n+            // effectivePriority does fInvalid inheritance as a side-effect\n+            if (txinfo.fInvalid)\n+                continue;\n+\n+            mapPriority.insert(make_pair(-dPriority, &txinfo));\n+\n+            if (fPrintPriority)\n+                printf(\"priority insert %s at priority %.1f\\n\", txinfo.hash.ToString().substr(0,10).c_str(), dPriority);\n         }\n \n         // Collect transactions into block\n@@ -3365,63 +3515,61 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         {\n             // Take highest priority transaction off priority queue\n             double dPriority = -(*mapPriority.begin()).first;\n-            CTransaction& tx = *(*mapPriority.begin()).second;\n+            CTxInfo& txinfo = *(*mapPriority.begin()).second;\n+            CTransaction& tx = *txinfo.ptx;\n             mapPriority.erase(mapPriority.begin());\n \n+            if (mapTestPool.count(txinfo.hash))\n+                // Already in the block\n+                continue;\n+\n             // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+            unsigned int nTxSize = txinfo.effectiveSize();\n             if (nBlockSize + nTxSize >= MAX_BLOCK_SIZE_GEN)\n                 continue;\n \n             // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = tx.GetLegacySigOpCount();\n+            unsigned int nTxSigOps = txinfo.GetLegacySigOpCount();\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n+            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK, nTxSize);\n \n-            // Connecting shouldn't fail due to dependency on other memory pool transactions\n-            // because we're already processing them in order of dependency\n-            map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n-            MapPrevTx mapInputs;\n-            bool fInvalid;\n-            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            uint64& nTxFees = txinfo.nTxFee;\n+            if (nTxFees < nMinFee)\n                 continue;\n \n-            int64 nTxFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();\n-            if (nTxFees < nMinFee)\n+            map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n+            std::vector<CTxInfo*> vAdded;\n+            if (!txinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n                 continue;\n \n-            nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n-                continue;\n-            mapTestPoolTmp[tx.GetHash()] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n             swap(mapTestPool, mapTestPoolTmp);\n \n             // Added\n-            pblock->vtx.push_back(tx);\n             nBlockSize += nTxSize;\n-            ++nBlockTx;\n+            nBlockTx += vAdded.size();\n             nBlockSigOps += nTxSigOps;\n-            nFees += nTxFees;\n-\n-            // Add transactions that depend on this one to the priority queue\n-            uint256 hash = tx.GetHash();\n-            if (mapDependers.count(hash))\n+            BOOST_FOREACH(CTxInfo* ptxinfo, vAdded)\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n+                pblock->vtx.push_back(*ptxinfo->ptx);\n+                nFees += ptxinfo->nTxFee;\n+\n+                // Add transactions that depend on this one to the priority queue\n+                // again, since they likely have improved their standing alone\n+                BOOST_FOREACH(const uint256& dhash, ptxinfo->setDependents)\n                 {\n-                    if (!porphan->setDependsOn.empty())\n-                    {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                            mapPriority.insert(make_pair(-porphan->dPriority, porphan->ptx));\n-                    }\n+                    CTxInfo& dtxinfo = mapInfoById[dhash];\n+                    dtxinfo.rmDependsOn(ptxinfo->hash);\n+                    if (dtxinfo.fInvalid)\n+                        continue;\n+                    double dPriority = dtxinfo.effectivePriority();\n+                    mapPriority.insert(make_pair(-dPriority, &dtxinfo));\n                 }\n             }\n         }"
      },
      {
        "sha": "fadc1a9c61a39b69bf6e3b101e3b11352825ad5c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
        "patch": "@@ -537,12 +537,13 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n+    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK, unsigned int nBytes=0) const\n     {\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n         int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n-        unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+        if (!nBytes)\n+            nBytes = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;\n         int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n "
      },
      {
        "sha": "65b4743ffc039d83179a1b0d9b4aef6f9dbdd723",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
        "patch": "@@ -1,6 +1,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/math/special_functions/fpclassify.hpp>\n \n #include \"util.h\"\n \n@@ -130,6 +131,41 @@ BOOST_AUTO_TEST_CASE(intarg)\n     BOOST_CHECK_EQUAL(GetArg(\"-bar\", 11), 0);\n }\n \n+BOOST_AUTO_TEST_CASE(floatarg)\n+{\n+    ResetArgs(\"\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 11.), 11.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 0.);\n+\n+    ResetArgs(\"-foo -bar\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 11.), 0.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 0.);\n+\n+    ResetArgs(\"-foo=11 -bar=-12\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 11.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), -12.);\n+\n+    ResetArgs(\"-foo=+11.25 -bar=12.125e+1\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 11.25);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 121.25);\n+\n+    ResetArgs(\"-foo=0x10 -bar=0x11p-2\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), 16);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 4.25);\n+\n+    ResetArgs(\"-foo=INF -bar=-INFINITY\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 0.), INFINITY);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), -INFINITY);\n+\n+    ResetArgs(\"-foo=NaN -bar=-NAN\");\n+    BOOST_CHECK(isnan(GetFloatArg(\"-foo\", 1.)));\n+    BOOST_CHECK(isnan(GetFloatArg(\"-bar\", 11.)));\n+\n+    ResetArgs(\"-foo=invalid -bar=reallyinvalid\");\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-foo\", 1.), 0.);\n+    BOOST_CHECK_EQUAL(GetFloatArg(\"-bar\", 11.), 0.);\n+}\n+\n BOOST_AUTO_TEST_CASE(doubledash)\n {\n     ResetArgs(\"--foo\");"
      },
      {
        "sha": "bb1c44e1e5afa56a9b185a054e662de8c3b9316e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
        "patch": "@@ -545,6 +545,13 @@ bool GetBoolArg(const std::string& strArg, bool fDefault)\n     return fDefault;\n }\n \n+double GetFloatArg(const std::string& strArg, double nDefault)\n+{\n+    if (mapArgs.count(strArg))\n+        return atof(mapArgs[strArg].c_str());\n+    return nDefault;\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))"
      },
      {
        "sha": "01067e27c5e6eb501a30a9cbb133bb0e97a16539",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7e7df1ae077403a65a9b9ab62770c78428e6eb1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e7e7df1ae077403a65a9b9ab62770c78428e6eb1",
        "patch": "@@ -335,6 +335,15 @@ int64 GetArg(const std::string& strArg, int64 nDefault);\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault=false);\n \n+/**\n+ * Return floating-point argument or default value\n+ *\n+ * @param strArg Argument to get (e.g. \"-foo\")\n+ * @param default (e.g. 1.)\n+ * @return command-line argument (0 if invalid number) or default value\n+ */\n+double GetFloatArg(const std::string& strArg, double nDefault);\n+\n /**\n  * Set an argument if it doesn't already have a value\n  *"
      }
    ]
  }
]