[
  {
    "sha": "bee88b8c5887e6beb75f26f0db97888a48fa7e7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWU4OGI4YzU4ODdlNmJlYjc1ZjI2ZjBkYjk3ODg4YTQ4ZmE3ZTdj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-04T21:38:30Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-12-11T20:44:21Z"
      },
      "message": "tests: have coins simulation test also use CCoinsViewDB\n\nBefore this change, the coins simulation test uses a base view of type\nCCoinsViewTest, which has no relevance outside of the unittest suite. Might as\nwell reuse this testcase with a more realistic configuration that has\nCCoinsViewDB at the bottom of the view structure.",
      "tree": {
        "sha": "3e4984d0632ac7fc99a13f318868935b715b929d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e4984d0632ac7fc99a13f318868935b715b929d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bee88b8c5887e6beb75f26f0db97888a48fa7e7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bee88b8c5887e6beb75f26f0db97888a48fa7e7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bee88b8c5887e6beb75f26f0db97888a48fa7e7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bee88b8c5887e6beb75f26f0db97888a48fa7e7c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e354db787790b84b0b3f34cc55b65446c71e4fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e354db787790b84b0b3f34cc55b65446c71e4fa2"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c91621e22702a27c215d43f39da356e4606a8d56",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bee88b8c5887e6beb75f26f0db97888a48fa7e7c/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bee88b8c5887e6beb75f26f0db97888a48fa7e7c/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=bee88b8c5887e6beb75f26f0db97888a48fa7e7c",
        "patch": "@@ -8,6 +8,7 @@\n #include <script/standard.h>\n #include <streams.h>\n #include <test/util/setup_common.h>\n+#include <txdb.h>\n #include <uint256.h>\n #include <undo.h>\n #include <util/strencodings.h>\n@@ -109,7 +110,12 @@ static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n //\n // During the process, booleans are kept to make sure that the randomized\n // operation hits all branches.\n-BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n+//\n+// If fake_best_block is true, assign a random uint256 to mock the recording\n+// of best block on flush. This is necessary when using CCoinsViewDB as the base,\n+// otherwise we'll hit an assertion in BatchWrite.\n+//\n+void SimulationTest(CCoinsView* base, bool fake_best_block)\n {\n     // Various coverage trackers.\n     bool removed_all_caches = false;\n@@ -126,9 +132,8 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     std::map<COutPoint, Coin> result;\n \n     // The cache stack.\n-    CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n-    stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n+    stack.push_back(new CCoinsViewCacheTest(base)); // Start with one cache.\n \n     // Use a limited set of random transaction ids, so we do test overwriting entries.\n     std::vector<uint256> txids;\n@@ -211,20 +216,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && InsecureRandBool() == 0) {\n                 unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n+                if (fake_best_block) stack[flushIndex]->SetBestBlock(InsecureRand256());\n                 BOOST_CHECK(stack[flushIndex]->Flush());\n             }\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 //Remove the top cache\n+                if (fake_best_block) stack.back()->SetBestBlock(InsecureRand256());\n                 BOOST_CHECK(stack.back()->Flush());\n                 delete stack.back();\n                 stack.pop_back();\n             }\n             if (stack.size() == 0 || (stack.size() < 4 && InsecureRandBool())) {\n                 //Add a new cache\n-                CCoinsView* tip = &base;\n+                CCoinsView* tip = base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();\n                 } else {\n@@ -256,6 +263,16 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     BOOST_CHECK(uncached_an_entry);\n }\n \n+// Run the above simulation for multiple base types.\n+BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n+{\n+    CCoinsViewTest base;\n+    SimulationTest(&base, false);\n+\n+    CCoinsViewDB db_base{\"test\", /*nCacheSize*/ 1 << 23, /*fMemory*/ true, /*fWipe*/ false};\n+    SimulationTest(&db_base, true);\n+}\n+\n // Store of all necessary tx and undo data for next test\n typedef std::map<COutPoint, std::tuple<CTransaction,CTxUndo,Coin>> UtxoData;\n UtxoData utxoData;"
      }
    ]
  }
]