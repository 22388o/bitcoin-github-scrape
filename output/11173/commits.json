[
  {
    "sha": "47ba2c312a440baff5ebc911e3bb014643f4e9c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2JhMmMzMTJhNDQwYmFmZjVlYmM5MTFlM2JiMDE0NjQzZjRlOWMz",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-08-28T03:44:57Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-09-05T01:07:55Z"
      },
      "message": "Fix currency/fee-rate unit string in the help text\n\n1. The RPC help text should use the constant CURRENCY_UNIT defined in\n  policy/feerate.cpp instead of the literal 'BTC'. In the following\n  2 RPC commands, 'BTC' is written directly in the help text.\n    1) estimatesmartfee\n    2) estimaterawfee\n  And also, for these help strings, the notation\n  'fee-per-kilobyte (in BTC)' is somewhat ambiguous.\n\n  To write more precisely, this commit changes to 'fee rate in BTC/kB'\n  with using the constant CURRENCY_UNIT.\n\n2. Some RPC command use 'satoshis' as the unit. It should be written\n  as 'satoshis' instead of 'Satoshis' in the RPC help text.\n\n  So, this commit fixes this typo in getblocktemplate.\n\n3. The phrase that '... feerate (BTC per KB) ...'  is used to explain\n  the fee rate in the help text of following 2 RPC commands.\n    1) getmempoolinfo\n    2) fundrawtransaction\n  But they are different from other similar help text of the RPCs.\n  And also, 'KB' implies Kibibyte (2^10 byte).\n\n  To unify and to clarify, this commit changes these phrase to\n  '... fee rate in BTC/kB ...'.\n  (BTC references the constant 'CURRENCY_UNIT')",
      "tree": {
        "sha": "c5a51ccfd05faa5812e6c131e0d3912cf448284a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5a51ccfd05faa5812e6c131e0d3912cf448284a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ba2c312a440baff5ebc911e3bb014643f4e9c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba2c312a440baff5ebc911e3bb014643f4e9c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ba2c312a440baff5ebc911e3bb014643f4e9c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ba2c312a440baff5ebc911e3bb014643f4e9c3/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a90e6d2bffc422ddcdb771c53aac0bceb970a2c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90e6d2bffc422ddcdb771c53aac0bceb970a2c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a90e6d2bffc422ddcdb771c53aac0bceb970a2c4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ed079489c42793a3ecfbaecd3713146f10938463",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba2c312a440baff5ebc911e3bb014643f4e9c3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba2c312a440baff5ebc911e3bb014643f4e9c3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=47ba2c312a440baff5ebc911e3bb014643f4e9c3",
        "patch": "@@ -1344,7 +1344,7 @@ UniValue getmempoolinfo(const JSONRPCRequest& request)\n             \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n             \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n             \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum feerate (\" + CURRENCY_UNIT + \" per KB) for tx to be accepted\\n\"\n+            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")"
      },
      {
        "sha": "0a754553c51041a8a8c6867376f496f92214da6b",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba2c312a440baff5ebc911e3bb014643f4e9c3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba2c312a440baff5ebc911e3bb014643f4e9c3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=47ba2c312a440baff5ebc911e3bb014643f4e9c3",
        "patch": "@@ -336,7 +336,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n             \"         ],\\n\"\n-            \"         \\\"fee\\\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n+            \"         \\\"fee\\\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n             \"         \\\"sigops\\\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n             \"         \\\"weight\\\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n             \"         \\\"required\\\" : true|false      (boolean) if provided and true, this transaction must be in the final block\\n\"\n@@ -346,7 +346,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"coinbaseaux\\\" : {                 (json object) data that should be included in the coinbase's scriptSig content\\n\"\n             \"      \\\"flags\\\" : \\\"xx\\\"                  (string) key name is to be ignored, and value included in scriptSig\\n\"\n             \"  },\\n\"\n-            \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\\n\"\n+            \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n             \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n             \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n             \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n@@ -825,7 +825,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n@@ -884,7 +884,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n             \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\""
      },
      {
        "sha": "c4cc02f007af6bcd54a168324d33034ea1ad319a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ba2c312a440baff5ebc911e3bb014643f4e9c3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ba2c312a440baff5ebc911e3bb014643f4e9c3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=47ba2c312a440baff5ebc911e3bb014643f4e9c3",
        "patch": "@@ -2812,7 +2812,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n+                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\""
      }
    ]
  }
]