[
  {
    "sha": "7444149de37a0cce9b28ca92f0af16cac8689873",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDQ0MTQ5ZGUzN2EwY2NlOWIyOGNhOTJmMGFmMTZjYWM4Njg5ODcz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-31T18:47:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T14:29:33Z"
      },
      "message": "Document method for reviewers to verify chainTxData\n\nThis commit adds the final block hash of the window to getchaintxstats\nand documents how reviewers can verify changes to chainTxData.",
      "tree": {
        "sha": "b31c38c2fe9910438dff0ced332f5b2619d1fedf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b31c38c2fe9910438dff0ced332f5b2619d1fedf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7444149de37a0cce9b28ca92f0af16cac8689873",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7444149de37a0cce9b28ca92f0af16cac8689873",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7444149de37a0cce9b28ca92f0af16cac8689873",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7444149de37a0cce9b28ca92f0af16cac8689873/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d203a826725584779a915102b0353a23a4bccb11",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7444149de37a0cce9b28ca92f0af16cac8689873/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7444149de37a0cce9b28ca92f0af16cac8689873/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=7444149de37a0cce9b28ca92f0af16cac8689873",
        "patch": "@@ -24,7 +24,7 @@ Before every major release:\n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n-  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example.\n+  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n * Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders"
      },
      {
        "sha": "4276ad9eebfe50bc031ba4a968711752904998d6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7444149de37a0cce9b28ca92f0af16cac8689873/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7444149de37a0cce9b28ca92f0af16cac8689873/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7444149de37a0cce9b28ca92f0af16cac8689873",
        "patch": "@@ -1526,12 +1526,13 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n-            \"  \\\"txcount\\\": xxxxx,             (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"window_block_count\\\": xxxxx,  (numeric) Size of the window in number of blocks.\\n\"\n-            \"  \\\"window_tx_count\\\": xxxxx,     (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"window_interval\\\": xxxxx,     (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"txrate\\\": x.xx,               (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n+            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n+            \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n+            \"  \\\"window_block_count\\\": xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n+            \"  \\\"window_tx_count\\\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"txrate\\\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getchaintxstats\", \"\")\n@@ -1582,6 +1583,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n     ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n+    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n     ret.push_back(Pair(\"window_block_count\", blockcount));\n     if (blockcount > 0) {\n         ret.push_back(Pair(\"window_tx_count\", nTxDiff));"
      },
      {
        "sha": "7cf2abe6f0e2c3ed5ae305fd5fd9cef6ba8ae278",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7444149de37a0cce9b28ca92f0af16cac8689873/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7444149de37a0cce9b28ca92f0af16cac8689873/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=7444149de37a0cce9b28ca92f0af16cac8689873",
        "patch": "@@ -100,28 +100,34 @@ def _test_getblockchaininfo(self):\n         assert_greater_than(res['size_on_disk'], 0)\n \n     def _test_getchaintxstats(self):\n+        self.log.info(\"Test getchaintxstats\")\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n         # tx rate should be 1 per 10 minutes, or 1/600\n         # we have to round because of binary math\n         assert_equal(round(chaintxstats['txrate'] * 600, 10), Decimal(1))\n \n-        b1 = self.nodes[0].getblock(self.nodes[0].getblockhash(1))\n-        b200 = self.nodes[0].getblock(self.nodes[0].getblockhash(200))\n+        b1_hash = self.nodes[0].getblockhash(1)\n+        b1 = self.nodes[0].getblock(b1_hash)\n+        b200_hash = self.nodes[0].getblockhash(200)\n+        b200 = self.nodes[0].getblock(b200_hash)\n         time_diff = b200['mediantime'] - b1['mediantime']\n \n         chaintxstats = self.nodes[0].getchaintxstats()\n         assert_equal(chaintxstats['time'], b200['time'])\n         assert_equal(chaintxstats['txcount'], 201)\n+        assert_equal(chaintxstats['window_final_block_hash'], b200_hash)\n         assert_equal(chaintxstats['window_block_count'], 199)\n         assert_equal(chaintxstats['window_tx_count'], 199)\n         assert_equal(chaintxstats['window_interval'], time_diff)\n         assert_equal(round(chaintxstats['txrate'] * time_diff, 10), Decimal(199))\n \n-        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1['hash'])\n+        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1_hash)\n         assert_equal(chaintxstats['time'], b1['time'])\n         assert_equal(chaintxstats['txcount'], 2)\n+        assert_equal(chaintxstats['window_final_block_hash'], b1_hash)\n         assert_equal(chaintxstats['window_block_count'], 0)\n         assert('window_tx_count' not in chaintxstats)\n         assert('window_interval' not in chaintxstats)\n@@ -173,8 +179,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_rpc_error(-5, \"Block not found\",\n-                              node.getblockheader, \"nonsense\")\n+        assert_raises_rpc_error(-5, \"Block not found\", node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()\n         secondbesthash = node.getblockhash(199)"
      }
    ]
  }
]