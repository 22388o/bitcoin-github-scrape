[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648538999",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648538999",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 648538999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODUzODk5OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-24T02:08:58Z",
    "updated_at": "2020-06-24T02:08:58Z",
    "author_association": "MEMBER",
    "body": "Ping @theuni.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648538999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648799528",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648799528",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 648799528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODc5OTUyOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-24T12:50:06Z",
    "updated_at": "2020-06-24T12:50:06Z",
    "author_association": "MEMBER",
    "body": "ACK 402980d7d0299769e147688250235339908523c7\r\nIt might aid discoverability to refer to this list of pitfalls in `developer-notes.md`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648799528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648854853",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648854853",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 648854853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODg1NDg1Mw==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-24T14:27:17Z",
    "updated_at": "2020-06-24T14:27:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 402980d7d0299769e147688250235339908523c7",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648854853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648872233",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648872233",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 648872233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0ODg3MjIzMw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-24T14:55:40Z",
    "updated_at": "2020-06-24T14:55:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK modulo adding a reference in `developer-notes.md` to ease discoverability as suggested by @laanwj :)\r\n\r\nPrediction: We'll need a similar life-time issue warning in the developer notes once we get the sharp edges of `std::string_view` to play with :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648872233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649839833",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-649839833",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 649839833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTgzOTgzMw==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T22:01:56Z",
    "updated_at": "2020-06-25T22:01:56Z",
    "author_association": "MEMBER",
    "body": "Related: I've pushed a branch here which adds the lifetimebound annotation: https://github.com/theuni/bitcoin/commits/lifetimebound\r\n\r\nThe changes are actually very simple, but the commit messages are verbose and reflect my (hopefully correct?) understanding of what's going on.\r\n\r\n@sipa Would you like me to PR that separately for discussion? Or (if you actually want them) do you want to pull them into #13062 ?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649839833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649842936",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-649842936",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 649842936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTg0MjkzNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T22:10:02Z",
    "updated_at": "2020-06-25T22:10:02Z",
    "author_association": "MEMBER",
    "body": "@theuni That looks great; I think you should PR it separately (as master stands to benefit from it independent of any other Span-related changes).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649842936/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649874237",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-649874237",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 649874237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTg3NDIzNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T23:56:55Z",
    "updated_at": "2020-06-25T23:56:55Z",
    "author_association": "MEMBER",
    "body": "ACK 402980d7d0299769e147688250235339908523c7",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649874237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650394756",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-650394756",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 650394756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDM5NDc1Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-26T20:50:24Z",
    "updated_at": "2020-06-26T20:50:24Z",
    "author_association": "MEMBER",
    "body": "Addressed all comments, I believe.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650394756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651114979",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-651114979",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
    "id": 651114979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MTExNDk3OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-29T13:18:17Z",
    "updated_at": "2020-06-29T13:18:17Z",
    "author_association": "MEMBER",
    "body": "ACK fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651114979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444961222",
    "pull_request_review_id": 436735896,
    "id": 444961222,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2MTIyMg==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible",
    "path": "src/span.h",
    "position": null,
    "original_position": 31,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/accept as Span/accept a Span/",
    "created_at": "2020-06-24T15:01:19Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r444961222",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444961222"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r444961222"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444961222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445025361",
    "pull_request_review_id": 436819014,
    "id": 445025361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNTM2MQ==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
    "path": "src/span.h",
    "position": 24,
    "original_position": 24,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Turns out clang actually has a newish attribute to detect this!\r\nhttps://reviews.llvm.org/rL338464\r\n\r\nI can confirm that this case is detected with clang-10 and the following change to span.h:\r\n```diff\r\n-    constexpr Span(V&& v) noexcept : m_data(v.data()), m_size(v.size()) {}\r\n+    constexpr Span(V&& v __attribute__((lifetimebound))) noexcept : m_data(v.data()), m_size(v.size()) {}\r\n```\r\nA new warning is given:\r\n```\r\nspantest.cpp:12:24: warning: temporary whose address is used as value of local variable 'sp' will be destroyed at the end of the full-expression [-Wdangling]\r\n    Span<const int> sp(std::vector<int>{1, 2, 3});\r\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 warning generated.\r\n```\r\nIt currently warns about several uses in #13062.\r\nI'm going through them now to see if they're false-positives.",
    "created_at": "2020-06-24T16:36:09Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445025361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445025361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445025361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445025361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 44,
    "original_line": 44,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445029671",
    "pull_request_review_id": 436824565,
    "id": 445029671,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTY3MQ==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the",
    "path": "src/span.h",
    "position": null,
    "original_position": 38,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in cases *where* a function..",
    "created_at": "2020-06-24T16:43:22Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445029671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445029671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445029671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445029671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445032414",
    "pull_request_review_id": 436828024,
    "id": 445032414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjQxNA==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
    "path": "src/span.h",
    "position": 24,
    "original_position": 24,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@theuni Interesting!\r\n\r\nI expect that there is one particular false positive: when you're converting a temporary *Span* to a compatible one. We could introduce a separate constructor for that, which then doesn't get the attribute. On the other hand, perhaps that interferes with useful detection too.",
    "created_at": "2020-06-24T16:47:41Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445032414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445032414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445032414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445032414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 44,
    "original_line": 44,
    "side": "RIGHT",
    "in_reply_to_id": 445025361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445069891",
    "pull_request_review_id": 436876915,
    "id": 445069891,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2OTg5MQ==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
    "path": "src/span.h",
    "position": 24,
    "original_position": 24,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sipa Yes, that seems to be the bulk of them.\r\n\r\n~I can't figure out why this _isn't_ UB (from ParseScript()):~\r\n```c++\r\n    if (Func(\"pkh\", expr)) {\r\n        auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\r\n```\r\n~Remember that ```Func()``` takes a ```std::string```, not a c string. So in the example above, presumably ```expr``` ends up pointing to somewhere inside the temporary string's memory after ```Func()``` returns. As you [pointed out](https://github.com/bitcoin/bitcoin/pull/18468#discussion_r443000807), for string literals that's the lifetime of the program. But in this case, I think we're relying on the fact that std::string's .data() returns that exact pointer. Is that guaranteed to be the case?~\r\n\r\nEdit: Nevermind. Guess I read the body of ```Func()``` too quickly. The modified span is not created from the string param.",
    "created_at": "2020-06-24T17:53:10Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445069891",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445069891"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445069891"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445069891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 44,
    "original_line": 44,
    "side": "RIGHT",
    "in_reply_to_id": 445025361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445105927",
    "pull_request_review_id": 436923155,
    "id": 445105927,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTkyNw==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
    "path": "src/span.h",
    "position": 24,
    "original_position": 24,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> We could introduce a separate constructor for that, which then doesn't get the attribute. On the other hand, perhaps that interferes with useful detection too.\r\n\r\nIndeed giving Span a (default) move ctor causes all current ```lifetimebound``` false-positives to go away, but still warns when intentionally inserting your UB example.",
    "created_at": "2020-06-24T18:58:51Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445105927",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445105927"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445105927"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445105927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 44,
    "original_line": 44,
    "side": "RIGHT",
    "in_reply_to_id": 445025361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445652881",
    "pull_request_review_id": 437619855,
    "id": 445652881,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1Mjg4MQ==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the\n+ *   container, and only about having exactly a range of elements. However\n+ *   it may also be surprising to see automatic conversions in this case.\n+ *\n+ *   When a function accepts a Span with a mutable element type, it will not\n+ *   accept temporaries; only variables or other references. For example:\n+ *\n+ *       void FooMut(Span<int> arg);\n+ *\n+ *       FooMut(std::vector<int>{1, 2, 3}); // Does not compile\n+ *       std::vector<int> baz{1, 2, 3};\n+ *       FooMut(baz); // Works\n+ *\n+ *   This is similar to how functions that take (non-const) lvalue reference",
    "path": "src/span.h",
    "position": null,
    "original_position": 51,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "ysangkok",
      "id": 284023,
      "node_id": "MDQ6VXNlcjI4NDAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ysangkok",
      "html_url": "https://github.com/ysangkok",
      "followers_url": "https://api.github.com/users/ysangkok/followers",
      "following_url": "https://api.github.com/users/ysangkok/following{/other_user}",
      "gists_url": "https://api.github.com/users/ysangkok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
      "organizations_url": "https://api.github.com/users/ysangkok/orgs",
      "repos_url": "https://api.github.com/users/ysangkok/repos",
      "events_url": "https://api.github.com/users/ysangkok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ysangkok/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "reference should be plural or have article",
    "created_at": "2020-06-25T15:39:19Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445652881",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445652881"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445652881"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445652881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446403829",
    "pull_request_review_id": 438587286,
    "id": 446403829,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMzgyOQ==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the\n+ *   container, and only about having exactly a range of elements. However\n+ *   it may also be surprising to see automatic conversions in this case.\n+ *\n+ *   When a function accepts a Span with a mutable element type, it will not\n+ *   accept temporaries; only variables or other references. For example:\n+ *\n+ *       void FooMut(Span<int> arg);\n+ *\n+ *       FooMut(std::vector<int>{1, 2, 3}); // Does not compile\n+ *       std::vector<int> baz{1, 2, 3};\n+ *       FooMut(baz); // Works\n+ *\n+ *   This is similar to how functions that take (non-const) lvalue reference",
    "path": "src/span.h",
    "position": null,
    "original_position": 51,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-06-26T20:50:33Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446403829",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446403829"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446403829"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446403829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 445652881
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404098",
    "pull_request_review_id": 438587650,
    "id": 446404098,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDA5OA==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the",
    "path": "src/span.h",
    "position": null,
    "original_position": 38,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2020-06-26T20:51:13Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404098",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404098"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404098"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 445029671
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404286",
    "pull_request_review_id": 438587908,
    "id": 446404286,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDI4Ng==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
    "path": "src/span.h",
    "position": 24,
    "original_position": 24,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Discussion on this moved to #19387.",
    "created_at": "2020-06-26T20:51:47Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404286",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404286"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404286"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 44,
    "original_line": 44,
    "side": "RIGHT",
    "in_reply_to_id": 445025361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404341",
    "pull_request_review_id": 438587996,
    "id": 446404341,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDM0MQ==",
    "diff_hunk": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible",
    "path": "src/span.h",
    "position": null,
    "original_position": 31,
    "commit_id": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "original_commit_id": "402980d7d0299769e147688250235339908523c7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2020-06-26T20:51:58Z",
    "updated_at": "2020-06-26T20:54:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404341",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404341"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404341"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 444961222
  }
]