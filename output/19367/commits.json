[
  {
    "sha": "3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTAyYTYwNDE4ODU4YTgyODFkZGYyZjljZDU5ZGFhOGYwMWQyZmE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-24T02:04:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-26T20:49:52Z"
      },
      "message": "doc: Document Span pitfalls",
      "tree": {
        "sha": "b656533b5be26018cab98a4a9d26434234c15dbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b656533b5be26018cab98a4a9d26434234c15dbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3502a60418858a8281ddf2f9cd59daa8f01d2fa8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49464004701e5ac256fe1f3e969464012af7c598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49464004701e5ac256fe1f3e969464012af7c598",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49464004701e5ac256fe1f3e969464012af7c598"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 56,
      "deletions": 0
    },
    "files": [
      {
        "sha": "841f1eadf702d8dbde89768f5186f68812935989",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3502a60418858a8281ddf2f9cd59daa8f01d2fa8/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3502a60418858a8281ddf2f9cd59daa8f01d2fa8/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
        "patch": "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept a Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases where a function truly does not care about the\n+ *   container, and only about having exactly a range of elements. However it\n+ *   may also be surprising to see automatic conversions in this case.\n+ *\n+ *   When a function accepts a Span with a mutable element type, it will not\n+ *   accept temporaries; only variables or other references. For example:\n+ *\n+ *       void FooMut(Span<int> arg);\n+ *\n+ *       FooMut(std::vector<int>{1, 2, 3}); // Does not compile\n+ *       std::vector<int> baz{1, 2, 3};\n+ *       FooMut(baz); // Works\n+ *\n+ *   This is similar to how functions that take (non-const) lvalue references\n+ *   as input cannot accept temporaries. This does not work either:\n+ *\n+ *       void FooVec(std::vector<int>& arg);\n+ *       FooVec(std::vector<int>{1, 2, 3}); // Does not compile\n+ *\n+ *   The idea is that if a function accepts a mutable reference, a meaningful\n+ *   result will be present in that variable after the call. Passing a temporary\n+ *   is useless in that context.\n  */\n template<typename C>\n class Span"
      }
    ]
  },
  {
    "sha": "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI1N2UyYjliYzQ1NzdmY2ZjZDlmYmRkYmMzNWQ5NjA0NmM1ZDg4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-26T20:47:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-26T20:53:49Z"
      },
      "message": "doc: Mention Span in developer-notes.md",
      "tree": {
        "sha": "b32cbddbb88ec6fd90092711c629f1eceeb572c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b32cbddbb88ec6fd90092711c629f1eceeb572c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3502a60418858a8281ddf2f9cd59daa8f01d2fa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3502a60418858a8281ddf2f9cd59daa8f01d2fa8"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd3daa3202374e26241275ce1b8bb3d38b065e6a",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
        "patch": "@@ -620,6 +620,19 @@ class A\n   - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n   that are not language lawyers.\n \n+- Use `Span` as function argument when it can operate on any range-like container.\n+\n+  - *Rationale*: Compared to `Foo(const vector<int>&)` this avoids the need for a (potentially expensive)\n+    conversion to vector if the caller happens to have the input stored in another type of container.\n+    However, be aware of the pitfalls documented in [span.h](../src/span.h).\n+\n+```cpp\n+void Foo(Span<const int> data);\n+\n+std::vector<int> vec{1,2,3};\n+Foo(vec);\n+```\n+\n - Prefer `enum class` (scoped enumerations) over `enum` (traditional enumerations) where possible.\n \n   - *Rationale*: Scoped enumerations avoid two potential pitfalls/problems with traditional C++ enumerations: implicit conversions to `int`, and name clashes due to enumerators being exported to the surrounding scope."
      }
    ]
  }
]