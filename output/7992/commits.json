[
  {
    "sha": "84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGMxM2U3NTlkYmIwZGUyODJlMmM4Y2U0M2Q3N2Y0ZDUyZmRhNmQ5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-26T12:34:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-27T09:11:36Z"
      },
      "message": "chain: Add assertion in case of missing records in index db",
      "tree": {
        "sha": "20cf3ccc1e322be101209a435daf801c73330569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20cf3ccc1e322be101209a435daf801c73330569"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c7df7022bcd360e6af00b9458b1a3fd54e1cc9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7df7022bcd360e6af00b9458b1a3fd54e1cc9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7df7022bcd360e6af00b9458b1a3fd54e1cc9a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "77e924e7030436168ac5a19fa8643bd4267b994d",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
        "patch": "@@ -93,6 +93,7 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n             pindexWalk = pindexWalk->pskip;\n             heightWalk = heightSkip;\n         } else {\n+            assert(pindexWalk->pprev);\n             pindexWalk = pindexWalk->pprev;\n             heightWalk--;\n         }"
      }
    ]
  },
  {
    "sha": "6030625631c62b0ffab2ac545c8351fa59dca483",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDMwNjI1NjMxYzYyYjBmZmFiMmFjNTQ1YzgzNTFmYTU5ZGNhNDgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-27T09:07:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-27T09:11:36Z"
      },
      "message": "test: Add more thorough test for dbwrapper iterators\n\nI made a silly mistake in a database wrapper where keys\nwere sorted by char instead of uint8_t. As x86 char is signed\nthe sorting for the block index database was messed up, resulting\nin a segfault due to missing records.\n\nAdd a test to catch:\n- Wrong sorting\n- Seeking errors\n- Iteration result not complete",
      "tree": {
        "sha": "043659400e6561a4540c322ed1699f55aadcdea1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/043659400e6561a4540c322ed1699f55aadcdea1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6030625631c62b0ffab2ac545c8351fa59dca483",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6030625631c62b0ffab2ac545c8351fa59dca483",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6030625631c62b0ffab2ac545c8351fa59dca483",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6030625631c62b0ffab2ac545c8351fa59dca483/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84c13e759dbb0de282e2c8ce43d77f4d52fda6d9"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 35,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8745d1439ca3337b909e5c36fa154d1ebebedb39",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 1,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6030625631c62b0ffab2ac545c8351fa59dca483/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6030625631c62b0ffab2ac545c8351fa59dca483/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=6030625631c62b0ffab2ac545c8351fa59dca483",
        "patch": "@@ -203,5 +203,39 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     BOOST_CHECK(odbw.Read(key, res3));\n     BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n }\n- \n+\n+BOOST_AUTO_TEST_CASE(iterator_ordering)\n+{\n+    path ph = temp_directory_path() / unique_path();\n+    CDBWrapper dbw(ph, (1 << 20), true, false, false);\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n+    boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    for (int c=0; c<2; ++c) {\n+        int seek_start;\n+        if (c == 0)\n+            seek_start = 0x00;\n+        else\n+            seek_start = 0x80;\n+        it->Seek((uint8_t)seek_start);\n+        for (int x=seek_start; x<256; ++x) {\n+            uint8_t key;\n+            uint32_t value;\n+            BOOST_CHECK(it->Valid());\n+            if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n+                break;\n+            BOOST_CHECK(it->GetKey(key));\n+            BOOST_CHECK(it->GetValue(value));\n+            BOOST_CHECK_EQUAL(key, x);\n+            BOOST_CHECK_EQUAL(value, x*x);\n+            it->Next();\n+        }\n+        BOOST_CHECK(!it->Valid());\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "269a4402a8617a539a70b2c332e86f0fe292a7a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjlhNDQwMmE4NjE3YTUzOWE3MGIyYzMzMmU4NmYwZmUyOTJhN2E2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-05-03T00:52:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-05-18T02:44:58Z"
      },
      "message": "Add test for dbwrapper iterators with same-prefix keys.",
      "tree": {
        "sha": "588a8dece93c446e5aa534deebe2bc425bb8b5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/588a8dece93c446e5aa534deebe2bc425bb8b5bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/269a4402a8617a539a70b2c332e86f0fe292a7a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269a4402a8617a539a70b2c332e86f0fe292a7a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/269a4402a8617a539a70b2c332e86f0fe292a7a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269a4402a8617a539a70b2c332e86f0fe292a7a6/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6030625631c62b0ffab2ac545c8351fa59dca483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6030625631c62b0ffab2ac545c8351fa59dca483",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6030625631c62b0ffab2ac545c8351fa59dca483"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 86,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a0bdcf4afbc7022d0f114f92ea7834048592d08e",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269a4402a8617a539a70b2c332e86f0fe292a7a6/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269a4402a8617a539a70b2c332e86f0fe292a7a6/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=269a4402a8617a539a70b2c332e86f0fe292a7a6",
        "patch": "@@ -238,4 +238,90 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     }\n }\n \n+struct StringContentsSerializer {\n+    // Used to make two serialized objects the same while letting them have a different lengths\n+    // This is a terrible idea\n+    string str;\n+    StringContentsSerializer() {}\n+    StringContentsSerializer(const string& inp) : str(inp) {}\n+\n+    StringContentsSerializer& operator+=(const string& s) {\n+        str += s;\n+        return *this;\n+    }\n+    StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (ser_action.ForRead()) {\n+            str.clear();\n+            char c = 0;\n+            while (true) {\n+                try {\n+                    READWRITE(c);\n+                    str.push_back(c);\n+                } catch (const std::ios_base::failure& e) {\n+                    break;\n+                }\n+            }\n+        } else {\n+            for (size_t i = 0; i < str.size(); i++)\n+                READWRITE(str[i]);\n+        }\n+    }\n+};\n+\n+BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n+{\n+    char buf[10];\n+\n+    path ph = temp_directory_path() / unique_path();\n+    CDBWrapper dbw(ph, (1 << 20), true, false, false);\n+    for (int x=0x00; x<10; ++x) {\n+        for (int y = 0; y < 10; y++) {\n+            sprintf(buf, \"%d\", x);\n+            StringContentsSerializer key(buf);\n+            for (int z = 0; z < y; z++)\n+                key += key;\n+            uint32_t value = x*x;\n+            BOOST_CHECK(dbw.Write(key, value));\n+        }\n+    }\n+\n+    boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    for (int c=0; c<2; ++c) {\n+        int seek_start;\n+        if (c == 0)\n+            seek_start = 0;\n+        else\n+            seek_start = 5;\n+        sprintf(buf, \"%d\", seek_start);\n+        StringContentsSerializer seek_key(buf);\n+        it->Seek(seek_key);\n+        for (int x=seek_start; x<10; ++x) {\n+            for (int y = 0; y < 10; y++) {\n+                sprintf(buf, \"%d\", x);\n+                string exp_key(buf);\n+                for (int z = 0; z < y; z++)\n+                    exp_key += exp_key;\n+                StringContentsSerializer key;\n+                uint32_t value;\n+                BOOST_CHECK(it->Valid());\n+                if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n+                    break;\n+                BOOST_CHECK(it->GetKey(key));\n+                BOOST_CHECK(it->GetValue(value));\n+                BOOST_CHECK_EQUAL(key.str, exp_key);\n+                BOOST_CHECK_EQUAL(value, x*x);\n+                it->Next();\n+            }\n+        }\n+        BOOST_CHECK(!it->Valid());\n+    }\n+}\n+\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]