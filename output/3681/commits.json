[
  {
    "sha": "7bc8c2815147b6d205046ea4c437045c51626d79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmM4YzI4MTUxNDdiNmQyMDUwNDZlYTRjNDM3MDQ1YzUxNjI2ZDc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-16T15:34:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-16T17:08:18Z"
      },
      "message": "Add RPC `reissuetransaction`\n\nAdd a new wallet RPC call `reissuetransaction`. Implements #3677.\n\nThe is make it possible to re-issue transactions that got\nstuck because they built on unconfirmed change transactions that were\nmalleated.\n\n- For conflicted transactions:\n  - Iterate over inputs, find variants of parent transactions that made\n    it into the block chain, create a new transaction with updated prevouts\n  - Re-sign transaction\n  - Commit new transaction to wallet and broadcast it to network\n- For normal unconfirmed transactions:\n  - Rebroadcast transaction to network\n- For confirmed transaction:\n  - Do nothing",
      "tree": {
        "sha": "da768f8877fd1fb9acd3f94456696c67efd3387b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da768f8877fd1fb9acd3f94456696c67efd3387b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bc8c2815147b6d205046ea4c437045c51626d79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bc8c2815147b6d205046ea4c437045c51626d79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bc8c2815147b6d205046ea4c437045c51626d79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bc8c2815147b6d205046ea4c437045c51626d79/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8d9058a4d1ce28eefa65aa3339bcc52b3c014e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8d9058a4d1ce28eefa65aa3339bcc52b3c014e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8d9058a4d1ce28eefa65aa3339bcc52b3c014e9"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 115,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0868ad443a027ee4ddb84245c178b477212043c3",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc8c2815147b6d205046ea4c437045c51626d79/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc8c2815147b6d205046ea4c437045c51626d79/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7bc8c2815147b6d205046ea4c437045c51626d79",
        "patch": "@@ -274,7 +274,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         }\n \n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        if(!wallet->CommitTransaction(*newTx, *keyChange))\n+        if(!wallet->CommitTransaction(*newTx, keyChange))\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;"
      },
      {
        "sha": "92746ad29aaebc1cdca434169e06837679bde2e3",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc8c2815147b6d205046ea4c437045c51626d79/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc8c2815147b6d205046ea4c437045c51626d79/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7bc8c2815147b6d205046ea4c437045c51626d79",
        "patch": "@@ -296,6 +296,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"settxfee\",               &settxfee,               false,     false,      true },\n+    { \"reissuetransaction\",     &reissuetransaction,     false,     false,      true },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "b499ce4a3742038d2ff3b4f583a3ae3158e3c1b5",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc8c2815147b6d205046ea4c437045c51626d79/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc8c2815147b6d205046ea4c437045c51626d79/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=7bc8c2815147b6d205046ea4c437045c51626d79",
        "patch": "@@ -163,6 +163,7 @@ extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHel\n extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value reissuetransaction(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "a9309dd06f3e4f1b592e49746f1f2f20d09da5b0",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 1,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc8c2815147b6d205046ea4c437045c51626d79/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc8c2815147b6d205046ea4c437045c51626d79/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=7bc8c2815147b6d205046ea4c437045c51626d79",
        "patch": "@@ -864,7 +864,7 @@ Value sendmany(const Array& params, bool fHelp)\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange))\n+    if (!pwalletMain->CommitTransaction(wtx, &keyChange))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n \n     return wtx.GetHash().GetHex();\n@@ -1890,4 +1890,45 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n+Value reissuetransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"reissuetransaction \\\"txid\\\"\\n\"\n+            \"\\nRe-issue a stuck in-wallet transaction <txid>.\\n\"\n+            \"For conflicted transactions which cannot make it into a block, update its inputs where necessary and re-sign.\\n\"\n+            \"For unconfirmed transactions simply re-broadcast the transaction for the network.\\n\"\n+            \"For confirmed transactions this is a no-op.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n+\n+            \"\\nbExamples\\n\"\n+            + HelpExampleCli(\"reissuetransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+            + HelpExampleRpc(\"reissuetransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+        );\n+\n+    EnsureWalletIsUnlocked();\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n \n+    Object entry;\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+    if(wtx.GetDepthInMainChain() > 0) // If transaction is already confirmed, this is a no-op\n+        return true;\n+\n+    CWalletTx wtxNew;\n+    if(!pwalletMain->ReissueTransaction(wtx, wtxNew))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Could not re-issue transaction; re-issue parent transactions first\");\n+    if(pwalletMain->mapWallet.count(wtx.GetHash()))\n+    {\n+        // If the transaction is unchanged, simply relay it\n+        wtxNew.RelayWalletTransaction();\n+    } else {\n+        // Otherwise, commit it to make sure it is stored in the wallet as well as broadcasted to the network\n+        if(!pwalletMain->CommitTransaction(wtxNew, 0))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to commit re-issued transaction\");\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "eac0213b76223e6ed56a08b12b0349d8771ad272",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 3,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc8c2815147b6d205046ea4c437045c51626d79/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc8c2815147b6d205046ea4c437045c51626d79/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7bc8c2815147b6d205046ea4c437045c51626d79",
        "patch": "@@ -1474,7 +1474,7 @@ bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n }\n \n // Call after CreateTransaction unless you want to abort\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey* reservekey)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n@@ -1486,7 +1486,8 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r\") : NULL;\n \n             // Take key pair from key pool so it won't be used again\n-            reservekey.KeepKey();\n+            if(reservekey)\n+                reservekey->KeepKey();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n@@ -1545,7 +1546,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNe\n         return strError;\n     }\n \n-    if (!CommitTransaction(wtxNew, reservekey))\n+    if (!CommitTransaction(wtxNew, &reservekey))\n         return _(\"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n \n     return \"\";\n@@ -2168,3 +2169,65 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n     }\n     return false;\n }\n+\n+bool CWallet::ReissueTransaction(const CWalletTx& wtxIn, CWalletTx& wtxNew)\n+{\n+    LOCK(cs_wallet);\n+    LogPrint(\"wallet\", \"ReissueTransaction: Reissuing transaction %s\\n\", wtxIn.GetHash().ToString());\n+\n+    wtxNew = wtxIn;\n+    for (unsigned int nIn = 0; nIn < wtxNew.vin.size(); ++nIn)\n+    {\n+        CTxIn& txin =  wtxNew.vin[nIn];\n+        std::map<uint256, CWalletTx>::iterator i = mapWallet.find(txin.prevout.hash);\n+        if(i == mapWallet.end())\n+        {\n+            LogPrint(\"wallet\", \"ReissueTransaction: Unable to find parent transaction %s in wallet\\n\",\n+                    txin.prevout.hash.ToString());\n+            return false;\n+        }\n+        if(!i->second.IsTrusted())\n+        {\n+            LogPrint(\"wallet\", \"ReissueTransaction: Parent transaction %s not trusted, finding alternative\\n\",\n+                    txin.prevout.hash.ToString());\n+            const CWalletTx *newPrevTx = 0;\n+            BOOST_FOREACH(const uint256& althash, GetConflicts(txin.prevout.hash))\n+            {\n+                std::map<uint256, CWalletTx>::iterator j = mapWallet.find(althash);\n+                if(j == mapWallet.end())\n+                {\n+                    LogPrint(\"wallet\", \"ReissueTransaction: Unable to find alternate transaction %s in wallet\\n\",\n+                            althash.ToString());\n+                    return false;\n+                }\n+                if(j->second.IsTrusted())\n+                {\n+                    newPrevTx = &j->second;\n+                    break;\n+                }\n+            }\n+            if(newPrevTx)\n+            {\n+                LogPrint(\"wallet\", \"ReissueTransaction: Found trusted alternative %s for %s. Updating input prevout and resigning.\\n\",\n+                        newPrevTx->GetHash().ToString(), txin.prevout.hash.ToString());\n+                // Update prevout and re-sign\n+                txin.prevout.hash = newPrevTx->GetHash();\n+                txin.scriptSig.clear();\n+                if(!SignSignature(*this, newPrevTx->vout[txin.prevout.n].scriptPubKey, wtxNew, nIn))\n+                {\n+                    LogPrintf(\"ReissueTransaction: Re-signing transaction failed\\n\");\n+                    return false;\n+                }\n+            } else {\n+                LogPrint(\"wallet\", \"ReissueTransaction: No trusted alternative for parent transaction %s found\\n\",\n+                        txin.prevout.hash.ToString());\n+                return false;\n+            }\n+        }\n+    }\n+    LogPrint(\"wallet\", \"ReissueTransaction: New transaction: %s (%s)\\n\",\n+            wtxNew.ToString(), wtxNew.GetHash().ToString());\n+    return true;\n+}\n+\n+"
      },
      {
        "sha": "85eed099b578e72c607688ea808922a7cd2b2fe5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc8c2815147b6d205046ea4c437045c51626d79/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc8c2815147b6d205046ea4c437045c51626d79/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=7bc8c2815147b6d205046ea4c437045c51626d79",
        "patch": "@@ -245,7 +245,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n                            CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n                            CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey* reservekey);\n     std::string SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew);\n     std::string SendMoneyToDestination(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n \n@@ -368,6 +368,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     // Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n+    /// Reissue a wallet transaction.\n+    bool ReissueTransaction(const CWalletTx& wtx, CWalletTx& wtxNew);\n+\n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */"
      }
    ]
  }
]