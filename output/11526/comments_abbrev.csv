laanwj,2017-10-19T12:41:05Z,"Concept ACK, this is much-requested.\n\nHowever IMO to be accepted upstream this needs committed maintenance, not just a one-time drop. Will you maintain this in the future when new files are added? It's bound to break from time to time with build updates (most of us are not able to use this).",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337895039,337895039,
sipa,2017-10-19T12:43:01Z,"Also, is there a way to have Travis do an MSVC build? That could make sure that the configuration doesn't bitrot.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337895472,337895472,
laanwj,2017-10-19T12:49:37Z,"> Also, is there a way to have Travis do an MSVC build? That could make sure that the configuration doesn't bitrot.\n\nMaybe. I disagree that keeping the MSVC build up to date should be required for merging anything; this would require everyone that changes things to keep MSVC up to date, which most are not able to do because they do not run that platform.\n",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337897122,337897122,
jonasschnelli,2017-10-19T18:41:46Z,"I'm not sure if we should include this in the main repository. We had similar discussions in https://github.com/bitcoin/bitcoin/pull/5276 (Xcode project).\nAFAIK, those ""project files"" tend to get outdated very fast. IMO the authors of MSVC and Xcode do not take too much care about backwards compatibility of their file formats...\nAlso, merging this may lead to someone trying to include a CMake ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-337999915,337999915,
meshcollider,2017-10-20T04:44:22Z,"Hmm the whitespace lint checker is going crazy, it might need some modifications because its pretty hard to me to see what its catching here\n\nEdit: there's definitely some tab characters mixed up in there, maybe that's the problem\n\nEdit 2: Nope there's definitely a lot of trailing whitespace too, looks like its working fine, there's just a lot to process. Might want to do a regex find and ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338104765,338104765,
sipsorcery,2017-10-20T05:45:15Z,@MeshCollider I'm tracking down the lint failure. I've already removed all tabs and trimmed all end of line whitespace with sed. Looks like there's a rule somewhere that requires certain types of files to have end of line as the last character. Will keep digging.,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338111615,338111615,
MarcoFalke,2017-10-20T07:07:26Z,"@sipsorcery When saving the file in your editor, choose ""Linux encoding"" instead of ""Windows encoding"" for new lines.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338124136,338124136,
sipsorcery,2017-10-20T07:49:37Z,"No '\r|\t' are in the diff patch now so hopefully lint will be happy.\n\nIf this PR does go through there will be an issue with the lint rules. In my troubleshooting I've discovered Visual Studio will add tab characters into a solution (.sln) file whenever it's opened. It possibly does the same for it's other .vcproj, .vcxproj.user and .vcxproj.filters files as well although it didn't during my ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338132673,338132673,
sipsorcery,2017-10-20T10:00:22Z,"@laanwj \n\n> However IMO to be accepted upstream this needs committed maintenance, not just a one-time drop. Will you maintain this in the future when new files are added? It's bound to break from time to time with build updates (most of us are not able to use this).\n\nYes. \n\nIf the VS build config gets added I will commit to maintaining it for a minimum of 3 years (end of 2020) exceptin",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338163039,338163039,
practicalswift,2017-10-20T13:12:52Z,"@sipsorcery \n\nIs there some tool to generate the `vcxproj`, `vcxproj.filters` and `sln` files programmatically from an easy-to-read text format that allows for easy tracking over time?\n\nThe very verbose XML build files contain a lot of duplication and random artifacts, so the same data should be possible to represent in a much more compact and human friendly way.\n\nThe following files 3",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338202281,338202281,
laanwj,2017-10-20T13:30:37Z,"> Is there some tool to generate the vcxproj, vcxproj.filters and sln files programmatically from an easy-to-read text format that allows for easy tracking over time?\n\n[cmake](https://cmake.org/) can do that. Though I'm not sure about easy-to-read. Well easier to read than XML files, I guess. But I don't think adding an indirection step makes sense unless we'd use cmake as main build system, a",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338207044,338207044,
laanwj,2017-10-20T13:35:47Z,"> Maybe - though it's easier for it to get lost in that case. There are AFAIK already tries at separate repositories with MSVC changes and build system, but they always get stuck at a certain version. Having it in the main repository is more of a incentive to keep it up to date. Probably.\n\nIf we do go that route with a separate repository, we should create an 'official' repository under bitcoi",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338208516,338208516,
practicalswift,2017-10-20T13:44:56Z,@laanwj I'm also thinking in terms of reproducibility. Adding 34 files to the main Bitcoin repo with a lot of redundancy (between files and within each file) that cannot be created from scratch using widely available free tools doesn't feel quite right (almost like having some magic binary blob in the repo!) :-)  I suggest we go with an approach that makes changes to the build process (read diffs),https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338210829,338210829,
laanwj,2017-10-20T13:48:05Z,"> We need an approach that makes changes to the build process (read diffs) easy to reason about.\n\nSure, that would be good, but the primary goal here is to make it easier for windows developers to build. And having to run a bash script isn't contributing to that.\n\nEdit: THough we could have a generation script that is automatically run before releases, so the actual vcproj files would be p",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338211697,338211697,
practicalswift,2017-10-20T13:59:51Z,"@laanwj I thought `bash` was widely available in Windows land these days thanks to the Windows Subsystem for Linux (WSL), but perhaps it is not yet as widely used as I thought :-) ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338214917,338214917,
practicalswift,2017-10-20T14:02:41Z,@laanwj Good point about scripted generation that is automatically run before releases. Seems like a good solution!,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338215707,338215707,
sipsorcery,2017-10-20T21:33:48Z,"Attempting to generate the Visual Studio project files using a custom shell script will be a journey down the rabbit hole. Yes you might get a more succinct representation but maintaining the script would be a much larger burden.\n\nThe only viable approach I know of is to use cmake but even then you'll lose some devs due to the extra steps required. And while cmake is an excellent tool it does ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338327663,338327663,
NicolasDorier,2017-10-21T07:34:52Z,"@sipsorcery this is not needed actually, you can get pretty good result by using file pattern matching in the vxproj, See https://pastebin.com/W4xmuXxy (look the ClCompile and ClInclude)\n\nMy workflow is using this csproj, and I compile through docker (shared volume with the source code).\nThis work quite well.\n\nI advise you to use such system, as it considerably make maintenance easier. (",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338371890,338371890,
sipsorcery,2017-10-21T09:19:15Z,"@NicolasDorier my assumption was that the preference would be to match the VS projects to the existing makefiles but that's probably not a particularly strong reason.\n\nThere are pros and cons to multiple projects compared to a single, or fewer, larger ones. And if you wanted all the .exe applications (bench_bitcoin, bitcoin-cli, bitcoind, bitcoin-tx, test_bitcoin) you'd still need a separate p",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338377771,338377771,
NicolasDorier,2017-10-21T09:25:44Z,"I am neutral on this. I only tried C++ dev with the vcxproj using wildcard.\nWith this you can see instantly any error, pretty good auto completion, and good indexation of symbols \n for fast browsing which is all I ask for. I will try your way, maybe it is better.\n\nBtw, VS2017 support GDB debugging on linux. There might even be a way for us to get the interactive debugging inside VS.  (out ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-338378112,338378112,
theuni,2017-10-24T20:24:21Z,"@laanwj I'm certainly not opposed to a different build-system if something better comes along. I've never liked CMake, but it's been years since I last messed with it, maybe it's improved since then.\n\nThat said, for the time being, a separate repo sounds good to me. It's also a good way to gauge the demand.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339119663,339119663,
ryanofsky,2017-10-24T21:03:05Z,"@sipsorcery, how are you getting Visual Studio to pick up the dependencies? When I checked out this PR, merged #11528, ""vcpkg install""ed all the packages mentioned in the readme, ran ""vcpkg integrate install"", and tried to build the solution in visual studio, I got hundreds of include and link errors. Right clicking individual project properties and manually adding ""C:\users\russ\src\vcpkg\install",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339130274,339130274,
sipsorcery,2017-10-24T21:39:33Z,"@ryanofsky did you restart Visual Studio after running the ""vcpkg integrate install"" and after all the vcpkg packages were installed? The way vcpkg works is to automatically import additional targets to each project when Visual Studio starts up. It should all be seamless, no need for adding libraries or directories.\n\nIf you're still getting missing dependencies and includes then there is defin",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339140865,339140865,
ryanofsky,2017-10-24T22:09:51Z,"> @ryanofsky did you restart Visual Studio after running the ""vcpkg integrate install"" and after all the vcpkg packages were installed? The way vcpkg works is to automatically import additional targets to each project when Visual Studio starts up.\n\nThanks for the explanation! I restarted and now I see `cl /c /I..\..\src /I""C:\Users\russ\src\vcpkg\installed\x64-windows-static\include""`... in th",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339149945,339149945,
NicolasDorier,2017-10-25T02:41:47Z,"@sipsorcery I missed that you said "" relatively easily *built with Visual Studio 2017*"", my solution only allow editing (build still on linux) and is thus not as good as this PR. Will give a try.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339196451,339196451,
sipsorcery,2017-10-25T03:48:37Z,"Just in case there's any confusion, this PR isn't intended as a replacement for any of the existing Bitcoin autoconf/make build mechanisms. Instead it's intended to save other devs who are interested in using Visual Studio, for whatever their own reasons, the time and effort of wrangling the bitcoin source and dependencies. It might not look like it but close to 3-4 weeks of full time work to get ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339206002,339206002,
ryanofsky,2017-10-25T18:22:11Z,"Conditional ACK a38801c5b3bfc72a41ccbd6328c81aa10a0dca51. The project files are working for me, but could use a few changes and fixes:\n\n* I think the project files should be added to main repository, but under a `contrib/build-msvc/` directory instead of the top level `build_msvc/` because they are significant contribution that can save windows developers who want to work with bitcoin a lot of",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339424054,339424054,
sipsorcery,2017-10-25T22:11:19Z,"@ryanofsky thanks for testing out the PR.\n\n- I did originally have the project files in contrib/build-msvc but moved them based on the way precedent in BerkeleyDB. If necessary they can be moved to wherever the consensus decides.\n\n- Thanks for the note on the missing secp256k1 headers. That's a problem with the vcpkg I created for it. I've fixed and submitted the [PR](https://github.com/Mi",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339488525,339488525,
sipsorcery,2017-10-30T20:41:42Z,"@ryanofsky with the latest change the missing auto-generated headers should now be fixed. I'd be interested to know if you can build without tweaks now?\n\nI ended up having to add a new project to replicate the *nix hexdump utility. I spent a day trying to integrate Visual Studio with different permutations of powershell scripts, piping to WSL and various Windows hexdump ports, but all had shor",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-340577720,340577720,
NicolasDorier,2017-10-31T19:41:48Z,"@sipsorcery msbuild supports [inline C# tasks](https://msdn.microsoft.com/en-us/library/dd722601.aspx), might be good alternative to C++ prog.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-340884223,340884223,
sipsorcery,2017-11-01T09:51:40Z,@NicolasDorier an inline task for the hexdump header generation is a much better approach. I've switched the VS config to it.,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341056752,341056752,
carlton355,2017-11-01T14:15:30Z,I was able to build this with no errors by following your steps.  ,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341118265,341118265,
donaloconnor,2017-11-01T20:40:54Z,"@sipsorcery - Thanks for this effort. I was able to successfully build (x64 configuration) with VS 2017 (Community).\n\nAs mentioned earlier, there are an incredible amount of warnings. I might work on a separate PR to fix these.\n\nBTW, is it necessary that we target building with the Windows 10 fall creators upgrade SDK? It would be good if we could drop this requirement back to maybe Win7?",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341235532,341235532,
sipsorcery,2017-11-01T21:11:31Z,"@donaloconnor thx for testing. As far as the target Windows SDK version I believe Visual Studio will revert to its default if what's specified in the project file is not available but I'm not 100% on that. Apart from that it's trivial to retarget to a different Windows SDK, in the Solution Explorer pane right click the Solution->Retarget solution and then select the desired SDK version. That updat",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-341243891,341243891,
NicolasDorier,2017-11-20T06:50:20Z,"Just to note: @sipsorcery made a dockerfile based on windowsservercore internally in our company. It can be eventually used for easily Bitcoin CI on AppVeyor for native Windows builds. (AppVeyor is Travis equivalent for Windows world)\n\nMight be useful (in separate PR?) to share that later.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-345606323,345606323,
laanwj,2017-11-20T08:37:50Z,"> Might be useful (in separate PR?) to share that later.\n\nRegularly running the tests with a completely different compiler/platform would be really nice (but indeed, something for a future PR).",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-345626110,345626110,
MarcoFalke,2017-11-22T19:51:13Z,"Jup, that would be useful. Reminds me of  #8227",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-346456425,346456425,
huhorler,2017-12-13T09:29:28Z,"D:\bitcoin\build_msvc\libbitcoin_qt\libbitcoin_qt.vcxproj(923,5): error MSB3073: command “\bin\moc.exe ""..\..\src\qt\addressbookpage.h"" -o .\GeneratedFiles\moc_addressbookpage.cpp \nHow to build the qt proj.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-351334006,351334006,
sipsorcery,2017-12-13T10:09:53Z,"@huhorler accomplishing a static build of Qt on Windows is a major feat. It took me 4 days. If you can get Qt built then building the two bitcoin Qt dependent apps is relatively straight forward.\n\nIf you do decide to give it a shot here are the config script parameters I used (you'll need to adjust the paths):\n\n`..\configure -prefix F:\deps\qt\5.9.2-static-ssl\vc141-x86\ -platform win32-ms",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-351344876,351344876,
vinniefalco,2017-12-23T18:53:19Z,"I followed the directions and failed to build using Visual Studio Community edition. The error:\n\n```\n1>c:\users\vinnie\src\bitcoin\src\random.h(131): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int\n1>c:\users\vinnie\src\bitcoin\src\random.h(131): error C2146: syntax error: missing ';' before identifier 'NUM_OS_RANDOM_BYTES'\n```\n\nI see no plac",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-353742276,353742276,
sipsorcery,2017-12-24T08:46:48Z,@vinniefalco do you need to pull the master branch to get the latest updates? That constant is defined in random.h.,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-353773051,353773051,
vinniefalco,2017-12-24T13:53:45Z,"I'll try that. Note that the instructions in the pull request indicate to use the *testbuild* branch:\n```\ngit checkout -b testbuild\n```\n",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-353785519,353785519,
NicolasDorier,2018-03-05T15:38:08Z,"`bench_bitcoin.exe` seems to crash, investigating...",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370459086,370459086,
NicolasDorier,2018-03-05T21:07:53Z,@sipsorcery I manage to build on visual studio but somehow command line by using msbuild seems to unable to find vcpkg headers.,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370565943,370565943,
NicolasDorier,2018-03-05T21:32:32Z,"@sipsorcery I made \n\nhttps://github.com/NicolasDorier/bitcoin/commit/b19dcc186a80d076c992a16c4b2731fef46e9f20\n\nIt automatically copy the bitcoin-config as part of the build process.\nIt also make it possible to build on Win10 without retargeting the projects.\n\nThe use of common project file will allow us later to generate the `bitcoin-config.h` (via cmake which has support from VS2017",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370573491,370573491,
NicolasDorier,2018-03-05T22:58:35Z,"So the crashes on `bench_bitcoin` are due to assert statement being stripped by msvc.\n\nSo question is, should we keep \n```\nassert(stream.Rewind(sizeof(block_bench::block413567)));\n```\nand make sure msvc does not remove assert. Or should we make sure that no side-effect stuff is done in assert?",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370598211,370598211,
sipsorcery,2018-03-05T23:27:45Z,"@NicolasDorier common project file to generate bitcoin-config.h is a good idea. Is it worth adding it to this PR?\n\nI get the same crash in bench_bitcoin. I'd also agree with you that it would be better to do the stream.Rewind (and other side effect operations) outside of the assert. I would think the asserts should solely be used to test conditions.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370604676,370604676,
NicolasDorier,2018-03-06T02:16:05Z,"@sipsorcery no need to generate the config to this PR, this can come later, I included the `bitcoin-config.h` in the build process so there is no need to document it + ship the .h in a separate zip file outside of git versioning. (can you cherry pick https://github.com/NicolasDorier/bitcoin/commit/b19dcc186a80d076c992a16c4b2731fef46e9f20 ?)",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370637438,370637438,
NicolasDorier,2018-03-06T12:38:12Z,"Added to https://github.com/NicolasDorier/bitcoin/commits/testbuildnico \n\n* Build without retargetting on Windows 10\n* Remove the manual step of copying the `config-bitcoin.h`\n* Ignore vcxproj.user files (User specific settings for the project in VS)\n* Remove NDEBUG in release for test stuff so assert with side effect do not get stripped\n\n`bench_bitcoin.exe` is now running properly, ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370768408,370768408,
NicolasDorier,2018-03-06T18:17:08Z,"I updated my branch\n\n* Now properly compiling by using MSBuild (the build error via msbuild command line was that for some reason the Plateform property was not set by default to Win32)",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370876610,370876610,
NicolasDorier,2018-03-06T18:38:42Z,So I ran a `bench_bitcoin` between the msvc version and the cross compiled for windows version. It is order of magnitude difference. MSVC version is very very slow for some reason... investigating.,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370883531,370883531,
donaloconnor,2018-03-06T18:44:45Z,"> So I ran a bench_bitcoin between the msvc version and the cross compiled for windows version. It is order of magnitude difference. MSVC version is very very slow for some reason... investigating.\n\nAre you compiling a release build and detached from the debugger when running the tests? (If the debugger is attached, a special (slower) debug heap is used.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370885336,370885336,
NicolasDorier,2018-03-06T18:51:22Z,"Update: My bad I was on a very old commit actually... retrying.\n\n-----------\nYes, but I think the problem is different, the output of bench_bitcoin seems to be based on different version. I am trying to rebase.\n\n",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370887343,370887343,
NicolasDorier,2018-03-06T19:49:30Z,"Benchmark result based on f13d756cdd9445d1478a70c5387df2a444045f6e\n\nUsing MSVC:\n```\n# Benchmark, evals, iterations, total, min, max, median\nBase58CheckEncode, 5, 320000, 9.58107, 5.94158e-06, 6.04325e-06, 6.00087e-06\nBase58Decode, 5, 800000, 6.66596, 1.65218e-06, 1.69618e-06, 1.6645e-06\nBase58Encode, 5, 470000, 8.9089, 3.76216e-06, 3.82214e-06, 3.78687e-06\nBenchLockedPool, 5, 530, ",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-370905518,370905518,
sipsorcery,2018-03-07T03:52:21Z,"@NicolasDorier I've updated my PR to use your two the common and common.init project files. The whole thing now builds correctly on AppVeyor without the need for the manual bitcoin-config.h copy step.\n\nOn my machine Visual Studio states that I don't have the correct SDK version installed (which could be true, I haven't looked into it yet). An my workaround was to put the specific version in co",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371014216,371014216,
NicolasDorier,2018-03-07T13:35:17Z,"@sipsorcery normally this https://github.com/sipsorcery/bitcoin/blob/90ffa797c1e1a02bd450329f15955fdfc360542b/build_msvc/common.init.vcxproj is auto detecting the `WindowsTargetPlatformVersion`. Can you take a look if the registry is right?\n\nWhat about running msbuild in command line? same error?",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371139809,371139809,
NicolasDorier,2018-03-07T13:37:25Z,"@sipsorcery can you keep the commits as in https://github.com/NicolasDorier/bitcoin/commits/testbuildnico ? We can squash later, it is better for review. I see you forgot some of my commits.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371140303,371140303,
sipsorcery,2018-03-08T00:28:29Z,@NicolasDorier updating Visual Studio fixed my platform version problem and msbuild also works fine.,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371334719,371334719,
NicolasDorier,2018-03-08T04:45:34Z,@sipsorcery shit I would have know why you had this problem before updating. :(,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-371377413,371377413,
MarcoFalke,2018-04-11T20:21:07Z,Has anyone had success testing this according to the steps given in the OP?,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380583138,380583138,
ryanofsky,2018-04-11T21:20:24Z,"> Has anyone had success testing this according to the steps given in the OP?\n\nIt's been a while, but this was working for me when I tried it last: https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-339424054",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380599346,380599346,
sipsorcery,2018-04-11T23:01:13Z,"@MarcoFalke this [appveyor job](https://ci.appveyor.com/project/sipsorcery/bitcoin/history) runs the same steps. \n\nThe build breaks roughly once or twice a month when a source file gets deleted, renamed or created. I then fix it when I get a chance (at the time of writing it has been broken for the last 4 days and I've just fixed it now). \n",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380622210,380622210,
MarcoFalke,2018-04-11T23:10:33Z,utACK 5fc0e252bcc2348f158cd5ccd7d332aaffdd4531 beside nits,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380623829,380623829,
MarcoFalke,2018-04-11T23:47:42Z,re-utACK fcc8dcb. Thanks for addressing the nits,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380630165,380630165,
MarcoFalke,2018-04-12T00:23:44Z,@sipsorcery Don't worry about the include guard. See #12956,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380635909,380635909,
sipsorcery,2018-04-12T01:23:47Z,"@MarcoFalke the lint parser still catches that header as it's in the build_msvc directory.\n\n`REGEXP_EXCLUDE_FILES_WITH_PREFIX=""src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)""`\n\nI'll find a way to workaround it.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-380644907,380644907,
ken2812221,2018-08-08T03:06:48Z,"Installing the following boost packages should be enough instead of all boost packages:\n- boost-filesystem\n- boost-signals2\n- boost-interprocess\n- boost-test",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-411269403,411269403,
MarcoFalke,2018-08-08T13:10:02Z,"<!-- 9c8310a72229671d179a091c01b3dc0865e6f29e -->\n\nCould you please squash the commits a bit to get rid of the intermediate merge commit? For example something like this:\n\n```\ngit fetch upstream\ngit merge upstream/master\ngit reset --soft upstream/master\ngit commit -m ""Visual Studio build configuration for Bitcoin Core""\ngit push origin build_msvc -f",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-411399255,411399255,
sipsorcery,2018-08-10T07:20:53Z,"@MarcoFalke sure, done.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-411998468,411998468,
MarcoFalke,2018-08-13T14:00:18Z,ACK ef7beaea6abcaab389ccb486a8f25bc4512b99ed,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-412528035,412528035,
ysangkok,2018-08-20T15:27:01Z,"The commit description is wrong, the secp256k1 PR has been merged into vcpkg in Oct 2017: https://github.com/Microsoft/vcpkg/pull/2005",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-414358231,414358231,
sipsorcery,2018-08-20T17:01:17Z,"@ysangkok not sure which commit message/comment you are referring to but yes I did a PR for libsecp256k1 and vcpkg at around the same time I did this PR. The upshot of it is that all the dependencies for building bitcoin core, sans the Qt projects, can be obtained with vcpkg.",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-414389366,414389366,
ysangkok,2018-08-20T17:07:37Z,I was referring to https://github.com/bitcoin/bitcoin/commit/afa960002086419feeaf3e50a7003855d39c8111 . The issue seems to be that Git doesn't know about markdown so I couldn't see the strike-through...,https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-414391320,414391320,
prayank23,2020-09-29T01:26:44Z,"> Build the Visual Studio solution which, if successful, will result in **all but the Qt dependent libraries/programs** being built.\n\nIs it possible to build bitcoin core with Visual Studio 2019 including bitcoin-qt?\n\nhttps://bitcoin.stackexchange.com/questions/99241/anyone-tried-building-bitcoin-core-with-visual-studio-2019\n\nI even tried `vcpkg install qt5` and `vcpkg install qt5-base",https://github.com/bitcoin/bitcoin/pull/11526#issuecomment-700369653,700369653,
practicalswift,2017-10-19T13:12:46Z,"Nit: `s/,$/./`",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r145694436,145694436,build_msvc/README.md
practicalswift,2017-10-19T13:13:51Z,"Nit: Start with the recommended approach. \n\nNit: `s/,$/./` :-)",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r145694852,145694852,build_msvc/README.md
practicalswift,2017-10-20T13:50:33Z,This can safely be removed? :-),https://github.com/bitcoin/bitcoin/pull/11526#discussion_r145968160,145968160,build_msvc/bitcoind/bitcoind.vcxproj
practicalswift,2017-10-20T13:50:46Z,This can safely be removed? :-),https://github.com/bitcoin/bitcoin/pull/11526#discussion_r145968227,145968227,build_msvc/libbitcoin_server/libbitcoin_server.vcxproj
practicalswift,2017-10-20T13:54:53Z,"Bitcoin is currently at C++11, so please change this instance of ""stdcpp14"" and the other four instances :-)",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r145969223,145969223,build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj
NicolasDorier,2018-03-04T18:11:48Z,"nit: should advise to use Powershell and install everything in one command\n\n```\n.\vcpkg install `\nboost:x86-windows-static `\nlibevent:x86-windows-static `\nopenssl:x86-windows-static `\nzeromq:x86-windows-static `\nberkeleydb:x86-windows-static `\nsecp256k1:x86-windows-static  `\nleveldb:x86-windows-static\n```",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r172058313,172058313,build_msvc/README.md
sipsorcery,2018-03-04T23:27:51Z,"Good idea, modified.",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r172069866,172069866,build_msvc/README.md
MarcoFalke,2018-04-11T23:02:47Z,"The backticks don't display well for me. I think you can prepend some (4) spaces to fix it:\n\n```\n    PS >.\vcpkg install `\n    boost:x64-windows-static `\n    libevent:x64-windows-static `\n    openssl:x64-windows-static `\n    zeromq:x64-windows-static `\n    berkeleydb:x64-windows-static `\n    secp256k1:x64-windows-static `\n    leveldb:x64-windows-static",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r180923035,180923035,build_msvc/README.md
MarcoFalke,2018-04-11T23:05:35Z,"The version above and this year seem to be outdated.\n\nIs it required to have this file checked in? If so, please update. Otherwise remove ;)",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r180923493,180923493,build_msvc/bitcoin-config.h
MarcoFalke,2018-04-11T23:06:10Z,Same here and 9 lines above,https://github.com/bitcoin/bitcoin/pull/11526#discussion_r180923585,180923585,build_msvc/bitcoin-config.h
MarcoFalke,2018-04-11T23:22:38Z,"@sipsorcery Needs to be exactly 4 spaces, I think.",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r180926508,180926508,build_msvc/README.md
MarcoFalke,2018-04-11T23:37:09Z,"You might have to update the linter to avoid spurious warnings:\n\n```diff\ndiff --git a/contrib/devtools/lint-include-guards.sh b/contrib/devtools/lint-include-guards.sh\nindex 6a0dd556bb..d9cf8effee 100755\n--- a/contrib/devtools/lint-include-guards.sh\n+++ b/contrib/devtools/lint-include-guards.sh\n@@ -9,7 +9,7 @@\n HEADER_ID_PREFIX=""BITCOIN_""\n HEADER_ID_SUFFIX=""_H""\n \n-REGEXP_EXCL",https://github.com/bitcoin/bitcoin/pull/11526#discussion_r180928916,180928916,build_msvc/bitcoin-config.h
