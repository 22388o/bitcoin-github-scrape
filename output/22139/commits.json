[
  {
    "sha": "fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmViOGM0M2JjNWJjZTEzMWUxNWViOWUxNjJlYTQ1N2JmZTJiODNl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-05-28T04:03:37Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-27T03:26:14Z"
      },
      "message": "test: add type annotations to util.get_rpc_proxy\n\nRemove proxy.url assignment:\nerror: \"AuthServiceProxy\" has no attribute \"url\"",
      "tree": {
        "sha": "3e7c2a55cf4d4f3df84197f64e5d7f256c8ac53f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e7c2a55cf4d4f3df84197f64e5d7f256c8ac53f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmD/fNYACgkQLuufXMCV\nJsEAYQ/6A1DVZtQD+Yq6Z7JhL1qR0G1xwV8SNIKEUXsFWId4dvtsqHhLGWlQWdj8\nldhNe9ShJJzpuN1Sb1L0UQKzhKJw0rPyzJ8vdRNiY/cFzzEnRc8P9hw6ORQ2oQ96\nsmaftDMvQMTwAJwdj+NzP7xt74LUqg5lcqk5scsyyJ9xNGvDN1RaHu6oTljrDzDD\nAdKD/6qMY5GF2oM6RI7xLFkRT6sVoRzruWpb4a4xf4bu4owILIMqXg+Hg57jmux3\npXU6/U2rIWqlGXHyOqbWIV+GF/KbaZBFbucwEFifAitPnNZqcynehypVCXNpFGb8\najvJuKSMIzAu452Gq80dhgPs4wXVxC7dD6W8WrvJrjC1RPLVpN5SnuGv685IJ/Sx\nUlQlzCWP9lkHeZto9PDvoVnOo52xvaaamFc/risXhbKnU2nruvai76gf7eRJ1NTE\nA0OcoXn7VaOPvt6+eaCfc+StZijsuDXS/BcSy29ajgABWjzPwckJRaZKaOJj1RKt\npODXUw5LIqlpd6dzQ2KDwmtnvHhRBZ+qkFMCY1y2nXyQ9XeyyO5QDWxhwaYIlTl/\nLd1fL8p5Mq+YiE6dFh4uKL3WcG8JdB2JjEdxxooNcZwiHS7jWIDfi8i7QCjyNGDO\nnKsK4n4pnFAUsUzS3z4llJl8WZYNLwtQxtl+NpphDPsjuaAJq1E=\n=umwP\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e7c2a55cf4d4f3df84197f64e5d7f256c8ac53f\nparent 1488f55fa57a1400a57be837b574183f019c7855\nauthor fanquake <fanquake@gmail.com> 1622174617 +0800\ncommitter fanquake <fanquake@gmail.com> 1627356374 +0800\n\ntest: add type annotations to util.get_rpc_proxy\n\nRemove proxy.url assignment:\nerror: \"AuthServiceProxy\" has no attribute \"url\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1488f55fa57a1400a57be837b574183f019c7855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1488f55fa57a1400a57be837b574183f019c7855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1488f55fa57a1400a57be837b574183f019c7855"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 19,
      "deletions": 17
    },
    "files": [
      {
        "sha": "ad8cfe5c9aecd9f98fc82974d43c935612784037",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
        "patch": "@@ -10,6 +10,7 @@\n \n import os\n \n+from .authproxy import AuthServiceProxy\n \n REFERENCE_FILENAME = 'rpc_interface.txt'\n \n@@ -19,24 +20,25 @@ class AuthServiceProxyWrapper():\n     An object that wraps AuthServiceProxy to record specific RPC calls.\n \n     \"\"\"\n-    def __init__(self, auth_service_proxy_instance, coverage_logfile=None):\n+    def __init__(self, auth_service_proxy_instance: AuthServiceProxy, rpc_url: str, coverage_logfile: str=None):\n         \"\"\"\n         Kwargs:\n-            auth_service_proxy_instance (AuthServiceProxy): the instance\n-                being wrapped.\n-            coverage_logfile (str): if specified, write each service_name\n+            auth_service_proxy_instance: the instance being wrapped.\n+            rpc_url: url of the RPC instance being wrapped\n+            coverage_logfile: if specified, write each service_name\n                 out to a file when called.\n \n         \"\"\"\n         self.auth_service_proxy_instance = auth_service_proxy_instance\n+        self.rpc_url = rpc_url\n         self.coverage_logfile = coverage_logfile\n \n     def __getattr__(self, name):\n         return_val = getattr(self.auth_service_proxy_instance, name)\n         if not isinstance(return_val, type(self.auth_service_proxy_instance)):\n             # If proxy getattr returned an unwrapped value, do the same here.\n             return return_val\n-        return AuthServiceProxyWrapper(return_val, self.coverage_logfile)\n+        return AuthServiceProxyWrapper(return_val, self.rpc_url, self.coverage_logfile)\n \n     def __call__(self, *args, **kwargs):\n         \"\"\"\n@@ -57,6 +59,7 @@ def _log_call(self):\n \n     def __truediv__(self, relative_uri):\n         return AuthServiceProxyWrapper(self.auth_service_proxy_instance / relative_uri,\n+                                       self.rpc_url,\n                                        self.coverage_logfile)\n \n     def get_request(self, *args, **kwargs):\n@@ -74,18 +77,18 @@ def get_filename(dirname, n_node):\n         dirname, \"coverage.pid%s.node%s.txt\" % (pid, str(n_node)))\n \n \n-def write_all_rpc_commands(dirname, node):\n+def write_all_rpc_commands(dirname: str, node: AuthServiceProxy) -> bool:\n     \"\"\"\n     Write out a list of all RPC functions available in `bitcoin-cli` for\n     coverage comparison. This will only happen once per coverage\n     directory.\n \n     Args:\n-        dirname (str): temporary test dir\n-        node (AuthServiceProxy): client\n+        dirname: temporary test dir\n+        node: client\n \n     Returns:\n-        bool. if the RPC interface file was written.\n+        if the RPC interface file was written.\n \n     \"\"\"\n     filename = os.path.join(dirname, REFERENCE_FILENAME)"
      },
      {
        "sha": "f9e2cfa2f58a18d9420d55f3f8a5366f79f0379d",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
        "patch": "@@ -258,7 +258,7 @@ def wait_for_rpc_connection(self):\n                     return\n                 self.rpc = rpc\n                 self.rpc_connected = True\n-                self.url = self.rpc.url\n+                self.url = self.rpc.rpc_url\n                 return\n             except JSONRPCException as e:  # Initialization phase\n                 # -28 RPC in warmup"
      },
      {
        "sha": "285a1bf52c76b8005d17b8f422de62c6a3bf759a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fbeb8c43bc5bce131e15eb9e162ea457bfe2b83e",
        "patch": "@@ -286,15 +286,15 @@ class PortSeed:\n     n = None\n \n \n-def get_rpc_proxy(url, node_number, *, timeout=None, coveragedir=None):\n+def get_rpc_proxy(url: str, node_number: int, *, timeout: int=None, coveragedir: str=None) -> coverage.AuthServiceProxyWrapper:\n     \"\"\"\n     Args:\n-        url (str): URL of the RPC server to call\n-        node_number (int): the node number (or id) that this calls to\n+        url: URL of the RPC server to call\n+        node_number: the node number (or id) that this calls to\n \n     Kwargs:\n-        timeout (int): HTTP timeout in seconds\n-        coveragedir (str): Directory\n+        timeout: HTTP timeout in seconds\n+        coveragedir: Directory\n \n     Returns:\n         AuthServiceProxy. convenience object for making RPC calls.\n@@ -305,11 +305,10 @@ def get_rpc_proxy(url, node_number, *, timeout=None, coveragedir=None):\n         proxy_kwargs['timeout'] = int(timeout)\n \n     proxy = AuthServiceProxy(url, **proxy_kwargs)\n-    proxy.url = url  # store URL on proxy for info\n \n     coverage_logfile = coverage.get_filename(coveragedir, node_number) if coveragedir else None\n \n-    return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n+    return coverage.AuthServiceProxyWrapper(proxy, url, coverage_logfile)\n \n \n def p2p_port(n):"
      }
    ]
  }
]