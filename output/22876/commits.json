[
  {
    "sha": "2877ebef6e4a6c7edf44611d34625c0687c9a512",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODc3ZWJlZjZlNGE2YzdlZGY0NDYxMWQzNDYyNWMwNjg3YzlhNTEy",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:29:10Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-02T23:44:08Z"
      },
      "message": "[TESTS] Update Transaction Tests to permit setting a flag as always on and disabling the exhaustive failure test",
      "tree": {
        "sha": "522974c44e305042282ae4221ccb3acd2b9ce78a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/522974c44e305042282ae4221ccb3acd2b9ce78a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2877ebef6e4a6c7edf44611d34625c0687c9a512",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2877ebef6e4a6c7edf44611d34625c0687c9a512",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2877ebef6e4a6c7edf44611d34625c0687c9a512",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2877ebef6e4a6c7edf44611d34625c0687c9a512/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77e77e8544c7df5981da9795cda5f1aaa99f73af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e77e8544c7df5981da9795cda5f1aaa99f73af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77e77e8544c7df5981da9795cda5f1aaa99f73af"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a012a6b44bbfc92d36db91accbbf35f1570aee9d",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2877ebef6e4a6c7edf44611d34625c0687c9a512/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2877ebef6e4a6c7edf44611d34625c0687c9a512/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=2877ebef6e4a6c7edf44611d34625c0687c9a512",
        "patch": "@@ -2,7 +2,7 @@\n [\"The following are deserialized transactions which are valid.\"],\n [\"They are in the form\"],\n [\"[[[prevout hash, prevout index, prevout scriptPubKey, amount?], [input 2], ...],\"],\n-[\"serializedTransaction, excluded verifyFlags]\"],\n+[\"serializedTransaction, excluded verifyFlags, always included verifyFlags?, skip excluded one by one?]\"],\n [\"Objects that are only a single string (like this one) are ignored\"],\n \n [\"The following is 23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63\"],"
      },
      {
        "sha": "dc869e6f74d24b374e13212453315382e066c82d",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2877ebef6e4a6c7edf44611d34625c0687c9a512/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2877ebef6e4a6c7edf44611d34625c0687c9a512/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2877ebef6e4a6c7edf44611d34625c0687c9a512",
        "patch": "@@ -197,11 +197,19 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const size_t size = test.size();\n+            const bool default_args = size == 3;\n+            const bool has_skip_exclude_one = size == 5;\n+            const bool has_extra_flags = size == 4;\n+            const bool size_correct = default_args || has_extra_flags || has_skip_exclude_one;\n+            const bool extra_flags_correct = !has_extra_flags || test[3].isStr();\n+            const bool skip_exclude_one_correct = !has_skip_exclude_one  || test[4].isBool();\n+            if (!size_correct || !test[1].isStr() || !test[2].isStr() || !extra_flags_correct || !skip_exclude_one_correct)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            const bool skip_exclude_one = has_skip_exclude_one? test[4].get_bool() : false;\n \n             std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             std::map<COutPoint, int64_t> mapprevOutValues;\n@@ -242,33 +250,36 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n             PrecomputedTransactionData txdata(tx);\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+            unsigned int extra_verify_flags = has_extra_flags? ParseScriptFlags(test[3].get_str()) : 0;\n \n             // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\n             if (~verify_flags != FillFlags(~verify_flags)) {\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true),\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, extra_verify_flags|~verify_flags, txdata, strTest, /* expect_valid */ true),\n                                 \"Tx unexpectedly failed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\n             for (const auto& [name, flag] : mapFlagNames) {\n                 // Removing individual flags\n-                unsigned int flags = TrimFlags(~(verify_flags | flag));\n+                unsigned int flags = TrimFlags(extra_verify_flags | ~(verify_flags | flag));\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\n                 }\n                 // Removing random combinations of flags\n-                flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n+                flags = TrimFlags(extra_verify_flags | ~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\n                 }\n             }\n \n             // Check that flags are maximal: transaction should fail if any unset flags are set.\n-            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n-                    BOOST_ERROR(\"Too many flags unset: \" << strTest);\n+            if (!skip_exclude_one) {\n+                for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n+                    if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n+                        BOOST_ERROR(\"Too many flags unset: \" << strTest);\n+                    }\n                 }\n             }\n         }"
      }
    ]
  }
]