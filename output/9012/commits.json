[
  {
    "sha": "99f5cf189313c6056b06410dc858363ba6fc2807",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWY1Y2YxODkzMTNjNjA1NmIwNjQxMGRjODU4MzYzYmE2ZmMyODA3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-25T11:30:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-25T11:31:34Z"
      },
      "message": "release-notes: Update from blog draft",
      "tree": {
        "sha": "04cc307283bc7e9c8be7ffcf6c29ee6cbfc7c908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04cc307283bc7e9c8be7ffcf6c29ee6cbfc7c908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99f5cf189313c6056b06410dc858363ba6fc2807",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99f5cf189313c6056b06410dc858363ba6fc2807",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99f5cf189313c6056b06410dc858363ba6fc2807",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99f5cf189313c6056b06410dc858363ba6fc2807/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9a5baddeef3d8721a7c71acf070f92a3d8d43a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a5baddeef3d8721a7c71acf070f92a3d8d43a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a5baddeef3d8721a7c71acf070f92a3d8d43a3"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 98,
      "deletions": 24
    },
    "files": [
      {
        "sha": "0941290c8cdcd95ea26e37024a4019657a9e20bd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 98,
        "deletions": 24,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f5cf189313c6056b06410dc858363ba6fc2807/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f5cf189313c6056b06410dc858363ba6fc2807/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=99f5cf189313c6056b06410dc858363ba6fc2807",
        "patch": "@@ -44,28 +44,102 @@ Segregated witness soft fork\n \n Segregated witness (segwit) is a soft fork that, if activated, will\n allow transaction-producing software to separate (segregate) transaction\n-signatures (witnesses) from the rest of the data in a transaction, and\n-to allow miners to place those witnesses outside of the traditional\n-block structure. This provides two immediate benefits:\n-\n-- **Elimination of malleability:** Segregating the witness allows both\n-  existing software and upgraded software that receives transactions to\n-  calculate the transaction identifier (txid) of segwit-using\n-  transactions without referencing the witness. This solves all known\n-  cases of unwanted third-party transaction malleability, which is a\n-  problem that makes programming Bitcoin wallet software more difficult\n-  and which seriously complicates the design of smart contracts for\n-  Bitcoin.\n-\n-- **Capacity increase:** Moving witness data outside of the traditional\n-  block structure (but still inside a new-style block structure) means\n-  new-style blocks can hold more data than older-style blocks, allowing\n-  a modest increase to the amount of transaction data that can fit in a\n-  block.\n-\n-Segwit also simplifies the ability to add new features to Bitcoin and\n-improves the efficiency of full nodes, which will help provide long-term\n-benefits to Bitcoin users.\n+signatures (witnesses) from the part of the data in a transaction that is\n+covered by the txid. This provides several immediate benefits:\n+\n+- **Elimination of unwanted transaction malleability:** Segregating the witness\n+  allows both existing and upgraded software to calculate the transaction\n+  identifier (txid) of transactions without referencing the witness, which can\n+  sometimes be changed by third-parties (such as miners) or by co-signers in a\n+  multisig spend. This solves all known cases of unwanted transaction\n+  malleability, which is a problem that makes programming Bitcoin wallet\n+  software more difficult and which seriously complicates the design of smart\n+  contracts for Bitcoin.\n+\n+- **Capacity increase:** Segwit transactions contain new fields that are not\n+  part of the data currently used to calculate the size of a block, which\n+  allows a block containing segwit transactions to hold more data than allowed\n+  by the current maximum block size. Estimates based on the transactions\n+  currently found in blocks indicate that if all wallets switch to using\n+  segwit, the network will be able to support about 70% more transactions. The\n+  network will also be able to support more of the advanced-style payments\n+  (such as multisig) than it can support now because of the different weighting\n+  given to different parts of a transaction after segwit activates (see the\n+  following section for details).\n+\n+- **Weighting data based on how it affects node performance:** Some parts of\n+  each Bitcoin block need to be stored by nodes in order to validate future\n+  blocks; other parts of a block can be immediately forgotten (pruned) or used\n+  only for helping other nodes sync their copy of the block chain.  One large\n+  part of the immediately prunable data are transaction signatures (witnesses),\n+  and segwit makes it possible to give a different \"weight\" to segregated\n+  witnesses to correspond with the lower demands they place on node resources.\n+  Specifically, each byte of a segregated witness is given a weight of 1, each\n+  other byte in a block is given a weight of 4, and the maximum allowed weight\n+  of a block is 4 million.  Weighting the data this way better aligns the most\n+  profitable strategy for creating blocks with the long-term costs of block\n+  validation.\n+\n+- **Signature covers value:** A simple improvement in the way signatures are\n+  generated in segwit simplifies the design of secure signature generators\n+  (such as hardware wallets), reduces the amount of data the signature\n+  generator needs to download, and allows the signature generator to operate\n+  more quickly.  This is made possible by having the generator sign the amount\n+  of bitcoins they think they are spending, and by having full nodes refuse to\n+  accept those signatures unless the amount of bitcoins being spent is exactly\n+  the same as was signed.  For non-segwit transactions, wallets instead had to\n+  download the complete previous transactions being spent for every payment\n+  they made, which could be a slow operation on hardware wallets and in other\n+  situations where bandwidth or computation speed was constrained.\n+\n+- **Linear scaling of sighash operations:** In 2015 a block was produced that\n+  required about 25 seconds to validate on modern hardware because of the way\n+  transaction signature hashes are performed.  Other similar blocks, or blocks\n+  that could take even longer to validate, can still be produced today.  The\n+  problem that caused this can't be fixed in a soft fork without unwanted\n+  side-effects, but transactions that opt-in to using segwit will now use a\n+  different signature method that doesn't suffer from this problem and doesn't\n+  have any unwanted side-effects.\n+\n+- **Increased security for multisig:** Bitcoin addresses (both P2PKH addresses\n+  that start with a '1' and P2SH addresses that start with a '3') use a hash\n+  function known as RIPEMD-160.  For P2PKH addresses, this provides about 160\n+  bits of security---which is beyond what cryptographers believe can be broken\n+  today.  But because P2SH is more flexible, only about 80 bits of security is\n+  provided per address. Although 80 bits is very strong security, it is within\n+  the realm of possibility that it can be broken by a powerful adversary.\n+  Segwit allows advanced transactions to use the SHA256 hash function instead,\n+  which provides about 128 bits of security  (that is 281 trillion times as\n+  much security as 80 bits and is equivalent to the maximum bits of security\n+  believed to be provided by Bitcoin's choice of parameters for its Elliptic\n+  Curve Digital Security Algorithm [ECDSA].)\n+\n+- **More efficient almost-full-node security** Satoshi Nakamoto's original\n+  Bitcoin paper describes a method for allowing newly-started full nodes to\n+  skip downloading and validating some data from historic blocks that are\n+  protected by large amounts of proof of work.  Unfortunately, Nakamoto's\n+  method can't guarantee that a newly-started node using this method will\n+  produce an accurate copy of Bitcoin's current ledger (called the UTXO set),\n+  making the node vulnerable to falling out of consensus with other nodes.\n+  Although the problems with Nakamoto's method can't be fixed in a soft fork,\n+  Segwit accomplishes something similar to his original proposal: it makes it\n+  possible for a node to optionally skip downloading some blockchain data\n+  (specifically, the segregated witnesses) while still ensuring that the node\n+  can build an accurate copy of the UTXO set for the block chain with the most\n+  proof of work.  Segwit enables this capability at the consensus layer, but\n+  note that Bitcoin Core does not provide an option to use this capability as\n+  of this 0.13.1 release.\n+\n+- **Script versioning:** Segwit makes it easy for future soft forks to allow\n+  Bitcoin users to individually opt-in to almost any change in the Bitcoin\n+  Script language when those users receive new transactions.  Features\n+  currently being researched by Bitcoin Core contributors that may use this\n+  capability include support for Schnorr signatures, which can improve the\n+  privacy and efficiency of multisig transactions (or transactions with\n+  multiple inputs), and Merklized Abstract Syntax Trees (MAST), which can\n+  improve the privacy and efficiency of scripts with two or more conditions.\n+  Other Bitcoin community members are studying several other improvements\n+  that can be made using script versioning.\n \n Activation for the segwit soft fork is being managed using BIP9\n versionbits.  Segwit's version bit is bit 1, and nodes will begin\n@@ -93,8 +167,8 @@ signaling support for a soft fork.\n Null dummy soft fork\n -------------------\n \n-Combined with the segwit soft fork is a soft fork that turns a\n-long-existing network relay policy into a consensus rule.  The\n+Combined with the segwit soft fork is an additional change that turns a\n+long-existing network relay policy into a consensus rule. The\n `OP_CHECKMULTISIG` and `OP_CHECKMULTISIGVERIFY` opcodes consume an extra\n stack element (\"dummy element\") after signature validation. The dummy\n element is not inspected in any manner, and could be replaced by any"
      }
    ]
  }
]