DrahtBot,2018-11-01T03:03:42Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-434915528,434915528,
gmaxwell,2018-11-03T21:20:10Z,Concept ACK. ,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-435621748,435621748,
sipa,2018-12-13T21:46:54Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-447132357,447132357,
Empact,2019-01-31T18:31:30Z,utACK https://github.com/bitcoin/bitcoin/pull/14626/commits/7257353b93e9f45e67071b0b86a0313e7a70aaaa,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-459454087,459454087,
sipa,2019-02-02T21:59:12Z,@sdaftuar @naumenkogs Feel like reviewing this?,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-460002673,460002673,
sdaftuar,2019-02-04T18:30:00Z,utACK 7257353b93e9f45e67071b0b86a0313e7a70aaaa,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-460358719,460358719,
gmaxwell,2019-02-14T20:57:38Z,ACK,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-463793142,463793142,
MarcoFalke,2019-02-14T21:16:00Z,ACK,https://github.com/bitcoin/bitcoin/pull/14626#issuecomment-463800014,463800014,
laanwj,2018-11-05T15:38:09Z,"the argument to GetRandInt is 'max', isn't this an off-by-one error?",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r230796251,230796251,src/net_processing.cpp
sipa,2018-11-20T00:27:08Z,"No, its argument is named confusingly. The last line of `GetRandInt` is `return (nRand % nMax)`, so it always returns a value *less than* nMax.",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r234831831,234831831,src/net_processing.cpp
promag,2018-11-20T00:42:29Z,Use http://www.cplusplus.com/reference/algorithm/iter_swap/?,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r234834563,234834563,src/net_processing.cpp
promag,2018-11-20T00:44:45Z,Guarded by `g_cs_orphans`?,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r234834988,234834988,src/net_processing.cpp
sipa,2018-11-20T02:32:14Z,How?,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r234851427,234851427,src/net_processing.cpp
sipa,2018-12-13T21:46:44Z,Done.,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r241573032,241573032,src/net_processing.cpp
Empact,2019-01-31T17:14:26Z,`//!<` for in-line doxygen,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r252759165,252759165,src/net_processing.cpp
naumenkogs,2019-02-03T01:49:40Z,"Is there any benefit of having ```COrphanTx``` inside, why not just using a hash? ",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r253284446,253284446,src/net_processing.cpp
naumenkogs,2019-02-03T03:04:55Z,"Right, I guess it's cleaner this way. Feel free to resolve this one.",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r253285787,253285787,src/net_processing.cpp
sipa,2019-02-03T04:59:14Z,It's not storing a COrphanTx inside. It's storing a list of iterators to entries in a map from uint256 to COrphanTx.\n\nSuch iterators are only as large as one pointer. ,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r253287553,253287553,src/net_processing.cpp
MarcoFalke,2019-02-14T21:15:31Z,"style-nit: Looks odd to assign an iterator. (The code is still correct, since `back()` returns a reference, but the naming might be wrong)",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r257014837,257014837,src/net_processing.cpp
hebasto,2020-06-24T15:43:36Z,"@sipa \n\nAs the `mapOrphanTransactions` items are sorted by hash, the first item is random with a negligible bias:\n\n```suggestion\n        EraseOrphanTx(mapOrphanTransactions.begin()->first);\n```\n\nOr did I miss something?",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r444991585,444991585,src/net_processing.cpp
sipa,2020-06-24T16:16:33Z,That would always evict lower txids before higher txids. Not exactly negligible...,https://github.com/bitcoin/bitcoin/pull/14626#discussion_r445013291,445013291,src/net_processing.cpp
hebasto,2020-06-24T16:19:38Z,"Is this applicable\nhttps://crypto.stackexchange.com/questions/12822/are-the-sha-family-hash-outputs-practically-random\n?",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r445015227,445015227,src/net_processing.cpp
hebasto,2020-06-24T16:23:17Z,"> That would always evict lower txids before higher txids. Not exactly negligible...\n\nI do not mean ""random txid"", rather ""random transaction"".",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r445017517,445017517,src/net_processing.cpp
sipa,2020-06-24T16:23:58Z,"No. That would apply if the transactions were secret, but since an attacker may know the transactions, they also know the txids. The hashing applied is not relevant.\n\nIf `mapOrphanTransactions` was say an unordered_map, and was using salted hash for its *internal* hashing (to convert txids to bucket positions) like is used in some places, then this would perhaps not be an issue.",https://github.com/bitcoin/bitcoin/pull/14626#discussion_r445017918,445017918,src/net_processing.cpp
