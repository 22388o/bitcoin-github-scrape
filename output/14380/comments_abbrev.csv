instagibbs,2018-10-03T05:45:42Z,Opening this to see if people think this is the right solution.,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-426518487,426518487,
practicalswift,2018-10-03T07:57:58Z,Very nice find!,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-426545512,426545512,
gmaxwell,2018-10-03T23:45:14Z,"The code wants to know the change signature size so it can figure out if it would have created change that was worthless to spend (because the spending will take more fees than the output is worth). \n\nAssuming the size is smallest plausible signature size would be conservative: it'll overvalue the change, at a risk of keeping change it could have eliminated.  I think doing that would be strict",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-426839366,426839366,
instagibbs,2018-10-03T23:52:43Z,Hm yes I suppose you're right. Not running BnB is admitting defeat even if we actually end up being able to discard a larger value. I'll take a look at constructing something that makes a minimal segwit input weight.,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-426840639,426840639,
DrahtBot,2018-10-04T05:47:35Z,<!--32850dd3fdea838b4049e64f46995ea2-->\n| Coverage  | Change ([pull 14380](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/14380/total.coverage/index.html)) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html))   |\n|-----------|-------------------------|--------------------|\n| Lines     | -0.0083 %            | 87.0471 %,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-426892864,426892864,
practicalswift,2018-10-04T09:42:55Z,"Isn't the problem that `coin_selection_params.change_spend_size` is set to `std::numeric_limits<size_t>::max() ` (`SIZE_MAX`) instead of the intended `-1` since `change_spend_size` is of type `size_t`? \n\n```\n[cling]$ size_t change_spend_size = -1;\n[cling]$ change_spend_size\n(unsigned long) 18446744073709551615\n[cling]$ (size_t)-1\n(unsigned long) 18446744073709551615\n[cling]$ #inclu",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-426953724,426953724,
instagibbs,2018-10-05T03:40:29Z,"@practicalswift yes that's why the assert is finally hit, but it's faulty logic regardless",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-427236948,427236948,
instagibbs,2018-10-05T05:20:26Z,"Pushed a fix in line with @gmaxwell suggestions. It's pretty hardcoded, so I'd rather make this more programmatic, perhaps giving a ""hint"" to the dummy signer of what type it should be?",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-427249454,427249454,
DrahtBot,2018-10-05T10:47:09Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14711](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14711.html) (Remove uses of chainActive and mapBlockInde",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-427322704,427322704,
achow101,2018-10-05T22:42:01Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-427517552,427517552,
instagibbs,2018-10-06T05:23:46Z,Updated the PR to use a function that uses DummySigner flow with an arbitrary valid pubkey as the P2SH-P2WPKH target to estimate the size more programatically.,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-427547609,427547609,
achow101,2018-10-09T00:49:43Z,utACK 198830e06bf4560cfb962e29c73c5b1357d90b37,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-428023776,428023776,
Empact,2018-10-09T02:36:31Z,"~How about a higher-level test exhibiting the original failure/assert condition? Absent that we don't have regression coverage or direct failure exhibition.~\nNever mind! The `test/functional/rpc_psbt.py` change covers this.",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-428040029,428040029,
instagibbs,2018-10-09T02:45:16Z,The functional test could be better explained: We need it to try BnB coin selection with a change output that is a script that it doesn't have knowledge of.,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-428041306,428041306,
meshcollider,2018-10-13T07:45:33Z,Does this fix #14401 ?,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-429519838,429519838,
instagibbs,2018-10-15T12:17:04Z,@MeshCollider yes I believe so,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-429829991,429829991,
instagibbs,2018-10-18T20:50:07Z,updated with @Empact suggestion to move the explicit calculation to unit tests instead.,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-431157870,431157870,
instagibbs,2018-10-22T13:45:21Z,Tried pushing update touching all comments,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-431840106,431840106,
instagibbs,2018-11-12T18:12:54Z,"rebased, just a test conflict",https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-437978195,437978195,
Empact,2018-11-12T20:35:27Z,utACK 0fb2e69,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-438019897,438019897,
sipa,2018-11-14T23:07:45Z,utACK 0fb2e69815bd5146e601a7fd3585f21a1fdd6f5d,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-438853192,438853192,
TheBlueMatt,2018-11-28T20:27:05Z,utACK 0fb2e69815bd5146e601a7fd3585f21a1fdd6f5d,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-442592758,442592758,
gmaxwell,2018-11-29T03:29:55Z,utACK,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-442693685,442693685,
MarcoFalke,2018-11-30T15:53:22Z,@instagibbs Would you mind creating a backport for 0.17 of this?,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-443247197,443247197,
instagibbs,2018-11-30T16:07:40Z,@MarcoFalke done,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-443252093,443252093,
fanquake,2018-11-30T22:27:19Z,Backported in #14851.,https://github.com/bitcoin/bitcoin/pull/14380#issuecomment-443358597,443358597,
practicalswift,2018-10-04T09:29:57Z,`change_spend_size` is `size_t` and thus cannot be `-1` :-),https://github.com/bitcoin/bitcoin/pull/14380#discussion_r222598779,222598779,src/wallet/wallet.cpp
practicalswift,2018-10-05T06:55:49Z,"Make this `constexpr` :-)\n\nOpt-in to internal linkage using `static` or use the unnamed namespace.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r222907749,222907749,src/wallet/wallet.cpp
practicalswift,2018-10-05T06:57:04Z,Add whitespace to improve readability: `return (128 + 16 + 16 + 4 + 88 + 71 + 33 + 3) / 4;`,https://github.com/bitcoin/bitcoin/pull/14380#discussion_r222908040,222908040,src/wallet/wallet.cpp
practicalswift,2018-10-05T06:57:28Z,Make this implicit conversion explicit :-),https://github.com/bitcoin/bitcoin/pull/14380#discussion_r222908122,222908122,src/wallet/wallet.cpp
practicalswift,2018-10-05T06:57:39Z,Same here :-),https://github.com/bitcoin/bitcoin/pull/14380#discussion_r222908151,222908151,src/wallet/wallet.cpp
practicalswift,2018-10-07T09:31:50Z,"We should handle the case of `-1` here too, or if `CalculateNestedKeyhashInputSize` is guaranteed to never return negative values it should return an unsigned type? :-)",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r223206667,223206667,src/wallet/wallet.cpp
instagibbs,2018-10-07T23:58:39Z,Changed the signature to return `size_t` directly since there's no reason these things need to be signed...,https://github.com/bitcoin/bitcoin/pull/14380#discussion_r223233634,223233634,src/wallet/wallet.cpp
practicalswift,2018-10-08T06:04:21Z,Then the cast can be removed? :-),https://github.com/bitcoin/bitcoin/pull/14380#discussion_r223254018,223254018,src/wallet/wallet.cpp
instagibbs,2018-10-08T07:24:49Z,done,https://github.com/bitcoin/bitcoin/pull/14380#discussion_r223266060,223266060,src/wallet/wallet.cpp
meshcollider,2018-10-08T08:35:44Z,nit: typo in comment,https://github.com/bitcoin/bitcoin/pull/14380#discussion_r223284771,223284771,test/functional/rpc_psbt.py
Empact,2018-10-09T02:41:10Z,"nit: If this is exposed here for testing, declaring it `extern` in the test file instead will reduce the internal surface area",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r223546693,223546693,src/wallet/wallet.h
sipa,2018-10-17T07:52:19Z,"Is this function just returning one of two integers that could be precomputed? If so, this seems a bit excessive.\n\nYou could leave the function as a comment to show it was computed.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r225814476,225814476,src/wallet/wallet.cpp
instagibbs,2018-10-17T17:59:33Z,"Longer-term I was hoping to have utility functions for various sorts of standard input types.\n\n> You could leave the function as a comment to show it was computed.\n\nSorry I'm not quite parsing what you mean here.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226035958,226035958,src/wallet/wallet.cpp
Empact,2018-10-18T02:58:41Z,"A related suggestion: you could directly return the expected literal in this method, then move this implementation code to a test which asserts that the production code returns the same value produced by the current implementation here. Would be good then to reference the test here in a comment to explain the literal result. That way the association between complete implementation and literal opti",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226155346,226155346,src/wallet/wallet.cpp
instagibbs,2018-10-18T20:17:52Z,"That's actually quite reasonable, thank you.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226450533,226450533,src/wallet/wallet.cpp
sipa,2018-10-20T02:10:55Z,"This constant isn't used anywhere, is that intentional?",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226813237,226813237,src/wallet/wallet.h
Empact,2018-10-20T02:32:15Z,"Could you elaborate on this rounding in the comment? I found the equality surprising, but then I’m not well-versed in the protocol.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226813724,226813724,src/wallet/test/wallet_tests.cpp
Empact,2018-10-20T02:33:16Z,The declaration could be a better place to provide the explanation.,https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226813737,226813737,src/wallet/test/wallet_tests.cpp
Empact,2018-10-20T02:37:34Z,"As of now, it can be removed as the method is now in the wallet_tests file.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226813816,226813816,src/wallet/wallet.h
Empact,2018-10-20T02:37:51Z,nit: could be static,https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226813832,226813832,src/wallet/test/wallet_tests.cpp
Empact,2018-10-20T02:44:13Z,"As of now ‘_MAX’ is used in wallet_tests... could maybe do without it (given equality), with further commenting.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r226814111,226814111,src/wallet/wallet.h
Empact,2018-11-12T20:34:59Z,"nit: how about `Estimated nested input size in *virtual size*, see CalculateNestedKeyhashInputSize`",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r232802864,232802864,src/wallet/wallet.h
jnewbery,2018-11-28T22:56:25Z,"not fixed. Suggest something like ""Make sure that the wallet can successfully create a funded psbt when it isn't able to sign for the change output"" or similar.",https://github.com/bitcoin/bitcoin/pull/14380#discussion_r237294657,237294657,test/functional/rpc_psbt.py
