[
  {
    "sha": "189fb526f188e90eed24840b826b6c6b97f3e479",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODlmYjUyNmYxODhlOTBlZWQyNDg0MGI4MjZiNmM2Yjk3ZjNlNDc5",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-11-19T20:55:40Z"
      },
      "committer": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-11-20T19:11:44Z"
      },
      "message": "Port of wallet.sh to python (wallet.py).\n\nAlso included are minor edits to util.py to create a clean blockchain and add a parameter to gather_inputs to specify number of confirmations.",
      "tree": {
        "sha": "7502e79afc0f0d4255df729cf0fff132b4a1f92e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7502e79afc0f0d4255df729cf0fff132b4a1f92e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/189fb526f188e90eed24840b826b6c6b97f3e479",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189fb526f188e90eed24840b826b6c6b97f3e479",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/189fb526f188e90eed24840b826b6c6b97f3e479",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189fb526f188e90eed24840b826b6c6b97f3e479/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5d1b1092998bc95313856d535c632ea5a8f9104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d1b1092998bc95313856d535c632ea5a8f9104",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5d1b1092998bc95313856d535c632ea5a8f9104"
      }
    ],
    "stats": {
      "total": 234,
      "additions": 113,
      "deletions": 121
    },
    "files": [
      {
        "sha": "bed7fed8ca5cf6f8ff49a0f6bbaf4d8ea510f53e",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189fb526f188e90eed24840b826b6c6b97f3e479/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189fb526f188e90eed24840b826b6c6b97f3e479/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=189fb526f188e90eed24840b826b6c6b97f3e479",
        "patch": "@@ -57,7 +57,6 @@ def sync_mempools(rpc_connections):\n         if num_match == len(rpc_connections):\n             break\n         time.sleep(1)\n-        \n \n bitcoind_processes = {}\n \n@@ -130,6 +129,15 @@ def initialize_chain(test_dir):\n         shutil.copytree(from_dir, to_dir)\n         initialize_datadir(test_dir, i) # Overwrite port/rpcport in bitcoin.conf\n \n+def initialize_chain_clean(test_dir, num_nodes):\n+    \"\"\"\n+    Create an empty blockchain and num_nodes wallets.\n+    Useful if a test case wants complete control over initialization.\n+    \"\"\"\n+    for i in range(num_nodes):\n+        datadir=initialize_datadir(test_dir, i)\n+\n+\n def _rpchost_to_args(rpchost):\n     '''Convert optional IP:port spec to rpcconnect/rpcport args'''\n     if rpchost is None:\n@@ -221,11 +229,13 @@ def find_output(node, txid, amount):\n             return i\n     raise RuntimeError(\"find_output txid %s : %s not found\"%(txid,str(amount)))\n \n-def gather_inputs(from_node, amount_needed):\n+\n+def gather_inputs(from_node, amount_needed, confirmations_required=1):\n     \"\"\"\n     Return a random set of unspent txouts that are enough to pay amount_needed\n     \"\"\"\n-    utxo = from_node.listunspent(1)\n+    assert(confirmations_required >=0)\n+    utxo = from_node.listunspent(confirmations_required)\n     random.shuffle(utxo)\n     inputs = []\n     total_in = Decimal(\"0.00000000\")"
      },
      {
        "sha": "4271d96be7b77653735c4c3cbc4c753192cd7858",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189fb526f188e90eed24840b826b6c6b97f3e479/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189fb526f188e90eed24840b826b6c6b97f3e479/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=189fb526f188e90eed24840b826b6c6b97f3e479",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Exercise the wallet.  Ported from wallet.sh.  \n+# Does the following:\n+#   a) creates 3 nodes, with an empty chain (no blocks).\n+#   b) node0 mines a block\n+#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n+#   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n+#   e) node0 mines a block, collects the fee on the second transaction\n+#   f) node1 mines 100 blocks, to mature node0's just-mined block\n+#   g) check that node0 has 100-21, node2 has 21\n+#   h) node0 should now have 2 unspent outputs;  send these to node2 via raw tx broadcast by node1\n+#   i) have node1 mine a block\n+#   j) check balances - node0 should have 0, node2 should have 100\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+\n+class WalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+\n+        self.nodes[0].setgenerate(True, 1)\n+\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 101)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        assert_equal(self.nodes[1].getbalance(), 50)\n+        assert_equal(self.nodes[2].getbalance(), 0)\n+\n+        # Send 21 BTC from 0 to 2 using sendtoaddress call.\n+        # Second transaction will be child of first, and will require a fee\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+\n+        # Have node0 mine a block, thus he will collect his own fee. \n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+\n+        # Have node1 generate 100 blocks (so node0 can recover the fee)\n+        self.nodes[1].setgenerate(True, 100)\n+        self.sync_all()\n+\n+        # node0 should end up with 100 btc in block rewards plus fees, but\n+        # minus the 21 plus fees sent to node2\n+        assert_equal(self.nodes[0].getbalance(), 100-21)\n+        assert_equal(self.nodes[2].getbalance(), 21)\n+\n+        # Node0 should have two unspent outputs.\n+        # Create a couple of transactions to send them to node2, submit them through \n+        # node1, and make sure both node0 and node2 pick them up properly: \n+        node0utxos = self.nodes[0].listunspent(1)\n+        assert_equal(len(node0utxos), 2)\n+\n+        # create both transactions\n+        txns_to_send = []\n+        for utxo in node0utxos: \n+            inputs = []\n+            outputs = {}\n+            inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n+            outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"]\n+            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n+\n+        # Have node 1 (miner) send the transactions\n+        self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n+        self.nodes[1].sendrawtransaction(txns_to_send[1][\"hex\"], True)\n+\n+        # Have node1 mine a block to confirm transactions:\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[2].getbalance(), 100)\n+        assert_equal(self.nodes[2].getbalance(\"from1\"), 100-21)\n+\n+\n+if __name__ == '__main__':\n+    WalletTest ().main ()"
      },
      {
        "sha": "c9ad0f2a7872c07688405193d2ad883f614c8bbb",
        "filename": "qa/rpc-tests/wallet.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 118,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5d1b1092998bc95313856d535c632ea5a8f9104/qa/rpc-tests/wallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5d1b1092998bc95313856d535c632ea5a8f9104/qa/rpc-tests/wallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.sh?ref=b5d1b1092998bc95313856d535c632ea5a8f9104",
        "patch": "@@ -1,118 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2013-2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test block generation and basic wallet sending\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-D1=${D}/node1\n-CreateDataDir \"$D1\" port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir \"$D2\" port=11010 rpcport=11011 connect=127.0.0.1:11000\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-D3=${D}/node3\n-CreateDataDir \"$D3\" port=11020 rpcport=11021 connect=127.0.0.1:11000\n-B3ARGS=\"-datadir=$D3\"\n-$BITCOIND $BITCOINDARGS $B3ARGS &\n-B3PID=$!\n-\n-# Wait until all three nodes are at the same block number\n-function WaitBlocks {\n-    while :\n-    do\n-        sleep 1\n-        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n-        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n-        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n-        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-echo \"Generating test blockchain...\"\n-\n-# 1 block, 50 XBT each == 50 XBT\n-$CLI $B1ARGS setgenerate true 1\n-WaitBlocks\n-# 101 blocks, 1 mature == 50 XBT\n-$CLI $B2ARGS setgenerate true 101\n-WaitBlocks\n-\n-CheckBalance \"$B1ARGS\" 50\n-CheckBalance \"$B2ARGS\" 50\n-\n-# Send 21 XBT from 1 to 3. Second\n-# transaction will be child of first, and\n-# will require a fee\n-Send $B1ARGS $B3ARGS 11\n-Send $B1ARGS $B3ARGS 10\n-\n-# Have B1 mine a new block, and mature it\n-# to recover transaction fees\n-$CLI $B1ARGS setgenerate true 1\n-WaitBlocks\n-\n-# Have B2 mine 100 blocks so B1's block is mature:\n-$CLI $B2ARGS setgenerate true 100\n-WaitBlocks\n-\n-# B1 should end up with 100 XBT in block rewards plus fees,\n-# minus the 21 XBT sent to B3:\n-CheckBalance \"$B1ARGS\" \"100-21\"\n-CheckBalance \"$B3ARGS\" \"21\"\n-\n-# B1 should have two unspent outputs; create a couple\n-# of raw transactions to send them to B3, submit them through\n-# B2, and make sure both B1 and B3 pick them up properly:\n-RAW1=$(CreateTxn1 $B1ARGS 1 $(Address $B3ARGS \"from1\" ) )\n-RAW2=$(CreateTxn1 $B1ARGS 2 $(Address $B3ARGS \"from1\" ) )\n-RAWTXID1=$(SendRawTxn \"$B2ARGS\" $RAW1)\n-RAWTXID2=$(SendRawTxn \"$B2ARGS\" $RAW2)\n-\n-# Have B2 mine a block to confirm transactions:\n-$CLI $B2ARGS setgenerate true 1\n-WaitBlocks\n-\n-# Check balances after confirmation\n-CheckBalance \"$B1ARGS\" 0\n-CheckBalance \"$B3ARGS\" 100\n-CheckBalance \"$B3ARGS\" \"100-21\" \"from1\"\n-\n-$CLI $B3ARGS stop > /dev/null 2>&1\n-wait $B3PID\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-echo \"Tests successful, cleaning up\"\n-rm -rf $D\n-exit 0"
      }
    ]
  },
  {
    "sha": "e4ef72449349a011110b23e5e26ce2c083801fb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGVmNzI0NDkzNDlhMDExMTEwYjIzZTVlMjZjZTJjMDgzODAxZmIw",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-11-20T19:27:18Z"
      },
      "committer": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2014-11-20T20:36:34Z"
      },
      "message": "Edited rpc-tests to run python script not shell script.",
      "tree": {
        "sha": "b6385c83cbf344f42ac7b98ad989f03de52fcdb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6385c83cbf344f42ac7b98ad989f03de52fcdb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4ef72449349a011110b23e5e26ce2c083801fb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ef72449349a011110b23e5e26ce2c083801fb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ef72449349a011110b23e5e26ce2c083801fb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ef72449349a011110b23e5e26ce2c083801fb0/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "189fb526f188e90eed24840b826b6c6b97f3e479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189fb526f188e90eed24840b826b6c6b97f3e479",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/189fb526f188e90eed24840b826b6c6b97f3e479"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7da7404ad9298cbff5e9117743004e615ee5918a",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4ef72449349a011110b23e5e26ce2c083801fb0/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4ef72449349a011110b23e5e26ce2c083801fb0/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=e4ef72449349a011110b23e5e26ce2c083801fb0",
        "patch": "@@ -16,7 +16,7 @@ fi\n #Run the tests\n \n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n-  ${BUILDDIR}/qa/rpc-tests/wallet.sh \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/wallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\"\n else"
      }
    ]
  }
]