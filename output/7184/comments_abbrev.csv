NicolasDorier,2015-12-08T03:16:12Z,"wow I like that, the changes are very small to review. I'll add the tests later tonight or tomorrow..\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162746828,162746828,
morcos,2015-12-08T03:25:48Z,"@NicolasDorier oh good, i was mostly holding off on the tests because i wanted to see if people liked this approach.\n\nWhat do you mean about IsFinalTx?  I think the changes to make that aware of MTP are already merged, so it wasn't necessary for me to change it further.\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162747941,162747941,
NicolasDorier,2015-12-08T15:56:01Z,"I am trying another approach before building on yours, which would solve the removeForReorg and CNB problem without changing any code in #6312. (https://github.com/NicolasDorier/bitcoin/compare/b13f47535cc2...0fb1092ed53f now building)\n\nI removed my comment about IsFinalTx, I was surprised not seeing the flag passed to it. But it seems client are held responsible for calculating the right blockt",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162925968,162925968,
morcos,2015-12-08T16:01:29Z,added unit tests\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162927637,162927637,
sdaftuar,2015-12-08T16:05:12Z,"@NicolasDorier One reason I like the approach in this PR is that the sequence-lock check is done separately from the nLockTime check -- locktime can be evaluated for all transactions in a block at the time a block is received (eg in `ContextualCheckBlock`), whereas sequence locks can only be evaluated when all inputs heights' are available (eg during `ConnectBlock`).\n\nFrom a design perspective, ",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162929355,162929355,
NicolasDorier,2015-12-08T16:07:58Z,"Ok, it makes sense. I'm kind of worried though about having the block of CheckLockTime responsible for calculating the blocktime each time, this is code duplication easy to get wrong. (I think that when I fixed it in #6312, there was indeed some parts which could break if the block evaluated was the genesis with MTP enabled)\n\nWhat about having a CCBlockIndex::GetCutoffTime(flag) method ?\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162930532,162930532,
NicolasDorier,2015-12-08T16:23:50Z,"It does not solve the perf problem though, CheckSequenceLock need to be called during reorg. (Did https://github.com/NicolasDorier/bitcoin/compare/9e8c7be9bc94...8670ce84fd01 it takes time for me to compile, I don't have a linux at hand, doing it by pushing/waiting travis) \n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162934900,162934900,
morcos,2015-12-08T20:40:39Z,Here is another version of this that assumes BIP68 includes MTP already: https://github.com/morcos/bitcoin/commit/ba957d5407ecc3d1f320893f47cfc7181a0a0878\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163011742,163011742,
btcdrak,2015-12-08T21:17:59Z,@morcos Since we plan to roll out BIP113 and BIP68 together it really makes sense that BIP68 assumes MTP. I think that is a must and it simplifies things.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163020637,163020637,
jtimon,2015-12-08T21:51:50Z,NACK This wastes a lot of previous review effort by not building on top of #6312.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163029513,163029513,
morcos,2015-12-09T02:51:21Z,"OK I fixed my comment about -1 and switched to the version where BIP 68 is defined to use MTP.\n\nIf it is helpful for anyone to see what this PR looks like as a change from #6312, you can see that here:\nhttps://github.com/maaku/bitcoin/compare/sequencenumbers...morcos:7184onorig6312\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163089533,163089533,
jtimon,2015-12-09T06:19:01Z,"> If it is helpful for anyone to see what this PR looks like as a change from #6312, you can see that here: maaku@sequencenumbers...morcos:7184onorig6312\n\nThank you, it is certainly useful, at least for me.\nWhy not use that branch here directly (like @sdaftuar and @NicolasDorier are doing with their solutions) instead? Later maybe you can squash some of the commits if this replaces #6312 .\nI d",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163122207,163122207,
rustyrussell,2016-01-07T04:45:59Z,"Tested-by: Rusty Russell rusty@rustcorp.com.au (merged with #6564 for testing, with only trivial header conflict fixup).\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-169549595,169549595,
morcos,2016-01-14T22:19:58Z,@sdaftuar's nits and suggestions addressed.\n\nAfter this receives some ACK's I can work on back ports\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-171800192,171800192,
NicolasDorier,2016-01-16T10:11:59Z,I think a new PR with #7187 on top of this one should be open. It makes no sense to review only this PR without #7187.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-172178962,172178962,
jtimon,2016-01-16T10:20:29Z,Agree with @NicolasDorier. If it wasn't  for #7187 there would be no reason to replace #6312 in the first place.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-172179690,172179690,
btcdrak,2016-01-28T17:15:07Z,Test script is available here (requires merge of #6564 with #7184) https://github.com/ajtowns/op_csv-test\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-176288661,176288661,
petertodd,2016-01-31T09:08:52Z,"ACK https://github.com/morcos/bitcoin/commit/e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4, modulo nits fixed in https://github.com/morcos/bitcoin/pull/7\n\nThat said, while I'm happy to see this merged as a mempool-only thing, before we actually soft-fork this in I'd like to see more unit tests; it's notable and worrying that I could change  https://github.com/morcos/bitcoin/blob/e87d06a20e7d1dd9f3000",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177446433,177446433,
NicolasDorier,2016-01-31T09:44:14Z,@petertodd can you review #7187 as well ? Those two PR goes together.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177448418,177448418,
CodeShark,2016-01-31T11:24:03Z,@morcos I just gave this PR a once over - very clean implementation! I'll run a few more tests.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177470898,177470898,
morcos,2016-02-01T21:25:23Z,"@petertodd I addressed your nits, but did it a bit differently than your suggestions.  Let me know if you're ok with this.\n\nIn particular though, it occurs to me that the subtracting 1 to retain nLockTime semantics is an artifact of how this code used to be combined with nLockTime checks.  These semantics are purely internal.  I think it might be cleaner to not subtract 1 and change the comparis",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178201104,178201104,
maaku,2016-02-01T21:33:06Z,"Keeping the existing semantics makes a lot more sense, as silly as they\nare, especially if there is any future refactorings (unknown at this time)\nthat generalize nLockTime and nSequence behavior.\n\nOn Mon, Feb 1, 2016 at 1:26 PM, Alex Morcos notifications@github.com\nwrote:\n\n> @petertodd https://github.com/petertodd I addressed your nits, but did\n> it a bit differently than your suggestions",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178204456,178204456,
josephpoon,2016-02-03T04:24:33Z,Tested ACK using btcdrak's BIP68+OP_CSV combined branch https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv on regtest.\n\nThis pull request is _very_ useful for Lightning Network channels without pre-set expiries. Thanks~~~!\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178998114,178998114,
CodeShark,2016-02-04T07:38:01Z,Tested ACK on regtest\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-179692706,179692706,
petertodd,2016-02-04T19:23:09Z,utACK https://github.com/morcos/bitcoin/commit/ca786956afa9bf344255959447b0386dd142ebd1\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180011242,180011242,
Roasbeef,2016-02-06T04:50:29Z,"LGTM! Err, I mean, Tested ACK :) \n\nTesting methodology: \n- Pulled down @btcdrak's combined  BIP68+OP_CSV branch: https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv. \n- Started a local Bitcoin Core node with the `-regtest` flag activated. \n- I then created an [integration test](https://github.com/LightningNetwork/lnd/commit/05f4d1fa9721f7e8c44844b719294a5f06cc21a9) in a",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180681158,180681158,
btcdrak,2016-02-06T06:10:01Z,@NicolasDorier I think you are confused. The combined branch _is this PR_.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180701101,180701101,
NicolasDorier,2016-02-06T06:40:24Z,"Ok my bad, I tought your branch was #6312  (removed my comment)\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180705706,180705706,
CodeShark,2016-02-06T20:35:14Z,Tested ACK using btcdrak's BIP68+OP_CSV combined branch master...btcdrak:sequenceandcsv on regtest.\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180860007,180860007,
instagibbs,2016-02-06T21:36:43Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180870418,180870418,
NicolasDorier,2016-02-10T11:18:55Z,"Tested ACK, reimplemented  CSV from https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv in NBitcoin and did some tests at transaction level. (https://github.com/MetacoSA/NBitcoin/blob/csv/NBitcoin.Tests/transaction_tests.cs#L862)\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182322430,182322430,
sipa,2016-02-10T13:59:31Z,"A (harmless) red flag: when CalculateSequenceLocks is called from CheckSequenceLocks, its passed CBlockIndex& object is not fully initialized (only pprev and nHeight are set), so calling GetAncestor looked dangerous to me. It seems that GetAncestor deals correctly with this case, however, and will fall back to walking using pprev instead of pskip in that case.\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182387268,182387268,
sipa,2016-02-10T14:10:04Z,"~~utACK~~\n\nEdit: there's a locking bug, where CheckSequenceLocks is executed without mempool lock.\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182390864,182390864,
morcos,2016-02-10T17:14:45Z,"Oops.  Nice catch @sipa.   Fixed the missing lock.  It's sort of a shame not to reuse the CCoinsViewCache just created in ATMP, but we can save that potential improvement for another time.\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182487949,182487949,
btcdrak,2016-02-10T17:16:19Z,> Nice catch @sipa.\n\n@sipa is a rockstar! :guitar: \n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182488367,182488367,
sipa,2016-02-10T18:36:17Z,"test/miner_tests.cpp:82\n\nunknown location(0): fatal error: in ""miner_tests/CreateNewBlock_validity"": signal: SIGABRT (application abort requested)\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182520593,182520593,
sipa,2016-02-10T20:27:40Z,"utACK 4315fe1afce448698732cf1bcffeb070028e4b2b after squashing \n\nOr, utACK tree id 04ef32caaaf2b838295f39cffbdd87468f3657c9\n\n```\n$ git show -s --format=""%T"" 4315fe1afce448698732cf1bcffeb070028e4b2b\n04ef32caaaf2b838295f39cffbdd87468f3657c9\n```\n\nA squash should retain the tree id.\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182569926,182569926,
morcos,2016-02-10T20:42:00Z,"Ok squashed, same code \n\n```\ngit show -s --format=""%T"" da6ad5f684b91975cae3f37495ccbd041499e86b\n04ef32caaaf2b838295f39cffbdd87468f3657c9\n```\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182575321,182575321,
morcos,2016-02-10T21:03:34Z,"sigh..  small rarely occurring bug in the RPC test\n@laanwj when you are ready to merge, i'll squash again, or feel free to just do it yourself\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182581288,182581288,
maaku,2016-02-10T21:32:37Z,"Meta-point, it would be better process to not squash these PRs...\n",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182590384,182590384,
sipa,2016-02-10T21:42:23Z,"@maaku My view is that the commit history of what is merged should optimize for reviewability by someone who has not seen the pull requests. So multiple commits that implement separate parts of a feature, make sense on their own, and result in a working codebase on their own are certainly welcome, but I don't think we should aim for having the exact history of a pull request, and certainly not whe",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182594295,182594295,
laanwj,2016-02-11T09:28:35Z,"> @laanwj when you are ready to merge, i'll squash again, or feel free to just do it yourself\n\nOkay, thanks.\n\n> Meta-point, it would be better process to not squash these PRs...\n\nI don't agree on that. One should try to order commits so that it does not break atomicity, or create intermediate pulls that fail buld/test, as that messes with `git bisect`.\nAlso @sipa makes a good point that com",https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182780162,182780162,
sipa,2016-02-11T19:19:43Z,Mental note: verify how this interacts with the wallet\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-183019020,183019020,
sdaftuar,2016-02-11T20:41:41Z,ACK b043c4b746c8199ce948aa5e8b186e0d1a61ad68\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-183053041,183053041,
laanwj,2016-02-12T16:07:58Z,utACK b043c4b\n,https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-183388908,183388908,
instagibbs,2015-12-08T15:07:32Z,"Like the symmetry, but the name here is now a bit out-dated and possibly misleading since we have two types of finality.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r46963687,46963687,src/main.h
morcos,2015-12-08T15:25:26Z,"Agreed.  I was going for minimal changes to existing consensus code, but if people like I'd be happy to rename that.  Perhaps `LocktimeLock()` and `CheckLocktimeLock()`\n\nI'd also like to take out the way CheckFinalTx is called with default -1 in the wallet code, but I could save that for another pull.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r46966223,46966223,src/main.h
sdaftuar,2015-12-10T14:47:00Z,"The comments here are slightly confusing to me because of missing context.  The above is a consensus rule for all transactions, while the ones below only apply as policy (for now) for `tx.nVersion >= 2` transactions.  I think we should expand on the comments to make this clearer, perhaps with a reference to BIP68?\n\n(Edit: I think this also applies to #6312.)\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47233948,47233948,src/primitives/transaction.h
sdaftuar,2015-12-10T16:25:46Z,I think using `block.nHeight-1` here forces an unnecessary restriction on the caller (ie that `block.nHeight` is being set to 1 more than the current tip height) -- if we change this to be \n\n```\nint64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;\n```\n\nThen we would be able to change the `CheckSequenceLocks` code in the future to allow us to test whether a transaction is ,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47248162,47248162,src/main.cpp
NicolasDorier,2015-12-10T17:05:59Z,"The semantic used by caller is the following : \n_Check SequenceLock assuming the transaction is included in ""block""_\n\nThis is needed. Because _block_ might be an existing old block but also a block on top of tip. (for mempool transactions)\nChanging the semantic of this method would make things less clear.\n\nI introduced this change on https://github.com/maaku/bitcoin/commit/aa83819cac79edc3ab",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47253815,47253815,src/main.cpp
sdaftuar,2015-12-10T17:31:49Z,"@NicolasDorier My point is that we're requiring `nHeight-1` to be a valid blockindex entry, when really all we need to do is rely on `pprev` being a valid block index (modulo checks for the genesis block).\n\nIf we use `pprev` for the time calculation rather than `nHeight`, that would give us the freedom to tweak the value of `nHeight` that we pass in, so that we could test for transactions with h",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47256905,47256905,src/main.cpp
jtimon,2015-12-10T19:41:45Z,"It's not clear to me that this is is going to supersede #6312 . It seems there's at least 2 more people with alternatives. Can we maintain #6312 updated as a common base for the 3 different options?\nAs said, squashes can happe right before merging (you can also reset HEAD^ the squashed commit and redo it with your name if that's the reason why this currently doesn't use the common base [no other ",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47274196,47274196,src/primitives/transaction.h
maaku,2015-12-10T20:57:26Z,"This comment has nothing to do with BIP 68. Setting all nSequence to max into disables nLockTime for all tx versions, today.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47284310,47284310,src/primitives/transaction.h
NicolasDorier,2015-12-11T03:10:43Z,"woops, sorry I misunderstood your point. (I thought you wanted to pass the previous block directly) \nCorrect.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47317944,47317944,src/main.cpp
jtimon,2016-01-16T09:44:59Z,"IsFinalTx is planned to be part of libconsensus,   CheckFinalTx is just a convenience function using globals. I don't  consider CheckFinalTx (nor CheckSequenceLocks) a ""consensus  function"" or ""consensus code"".\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r49929831,49929831,src/main.h
petertodd,2016-01-31T04:23:41Z,"Would you mind adding a comment explaining when block.pprev might be null; if I understand it correctly the only case where that is true is the genesis block, in which case it'd be good to add an assertion that the block height matches that case.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51355184,51355184,src/main.cpp
petertodd,2016-01-31T04:29:23Z,nit: extra space after return\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51355210,51355210,src/main.cpp
morcos,2016-02-01T21:22:12Z,I'm not sure why we think its ever necessary to check sequence locks on a genesis block.\nSo what would you think about assert(block.pprev) and then removing the ternary operator?\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51482569,51482569,src/main.cpp
btcdrak,2016-02-02T05:23:24Z,"@morcos No, this is the reason for the ternary https://github.com/bitcoin/bitcoin/pull/6312#discussion_r44622250\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51525475,51525475,src/main.cpp
morcos,2016-02-02T15:14:09Z,"@btcdrak That was the old code.  The new code calls SequenceLocks from ConnectBlock which doesn't run on the genesis block and doesn't call SequenceLocks on coinbase txs.  If both of those things change, it would get caught by the proposed assert.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51580942,51580942,src/main.cpp
jtimon,2016-02-03T11:18:34Z,"Ack on assert(block.pprev): we should never validate the genesis block anyway  (it's not only correct, it is the first consensus rule!).\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51708235,51708235,src/main.cpp
instagibbs,2016-02-06T20:50:02Z,nit: s/in a block/in a given block/\n\nTook me a few readings to figure out what it was saying.\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52107316,52107316,src/main.h
NicolasDorier,2016-02-09T14:43:11Z,"What if block is genesis ? Why not just using block.GetAncestor(std::max(nCoinHeight-1, 0)) as above ?\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52315415,52315415,src/main.cpp
jtimon,2016-02-09T15:00:44Z,If it's the genesis block we know is valid and we don't need to check it. Hasn't this been discussed in an outdated diff already?\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52318044,52318044,src/main.cpp
morcos,2016-02-09T15:05:40Z,See https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51482569\nand\nhttps://github.com/bitcoin/bitcoin/pull/7184#discussion_r47248162\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52318751,52318751,src/main.cpp
sipa,2016-02-10T14:00:42Z,"Also needs a lock on the mempool, I think.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52459678,52459678,src/main.cpp
sipa,2016-02-10T14:02:56Z,"It's also needed because of internal consistency. If x->pprev->nHeight is X, x->nHeight must be X+1.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52459911,52459911,src/main.cpp
sipa,2016-02-10T14:11:35Z,This should be moved up to be within the above mempool-locked block.\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52460987,52460987,src/main.cpp
morcos,2016-02-10T14:43:37Z,"Yep.  Originally the intention had been to be able to set this to a higher number if we wanted to allow the mempool to contain currently locked transactions.  I discovered that that doesn't work because of the GetAncestor use in CalculateSequenceLocks.  I wrote  up some minor changes to pass the height/time you want to check against directly to EvaluateSequenceLocks, but I think it's not worth mak",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52465414,52465414,src/main.cpp
sipa,2016-02-10T15:06:45Z,"Yeah, not worth changing things for. Just saying that there isn't really any other option.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52468794,52468794,src/main.cpp
morcos,2016-02-10T17:13:10Z,added\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52490080,52490080,src/main.cpp
sdaftuar,2016-02-11T16:25:02Z,"nit: `CBlock::AcceptBlock()` isn't a thing, should say `ConnectBlock` I think.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625392,52625392,src/main.cpp
sdaftuar,2016-02-11T16:25:05Z,"nit: This sentence is somewhat unclear, as `SequenceLocks` isn't invoked here.\n",https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625399,52625399,src/main.cpp
sdaftuar,2016-02-11T16:25:10Z,Need to add a `%s` or drop this `__func__`.\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625415,52625415,src/main.cpp
sdaftuar,2016-02-11T16:25:14Z,This comment is incorrect (`CheckSequenceLocks` doesn't actually call `SequenceLocks`).\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625430,52625430,src/main.h
sdaftuar,2016-02-11T16:25:17Z,s/`LockTime`/`CheckSequenceLocks`/\n,https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625442,52625442,src/policy/policy.h
