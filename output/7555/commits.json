[
  {
    "sha": "42bc423b479374b24abd768668b679823e79a767",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmJjNDIzYjQ3OTM3NGIyNGFiZDc2ODY2OGI2Nzk4MjNlNzlhNzY3",
    "commit": {
      "author": {
        "name": "vl4m3r",
        "email": "vlamer@users.noreply.github.com",
        "date": "2016-01-31T20:36:51Z"
      },
      "committer": {
        "name": "vl4m3r",
        "email": "vlamer@users.noreply.github.com",
        "date": "2016-01-31T20:36:51Z"
      },
      "message": "Update clientversion.cpp\n\nmy name node :D",
      "tree": {
        "sha": "089d11ed00a80eabd106ee815f0d7023f0645864",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/089d11ed00a80eabd106ee815f0d7023f0645864"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42bc423b479374b24abd768668b679823e79a767",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42bc423b479374b24abd768668b679823e79a767",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42bc423b479374b24abd768668b679823e79a767",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42bc423b479374b24abd768668b679823e79a767/comments",
    "author": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f281caac48b964a5ddfdd26f4694463d693ae901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f281caac48b964a5ddfdd26f4694463d693ae901",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f281caac48b964a5ddfdd26f4694463d693ae901"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bde38480f102f1fb7389db3a6ad4320126bda588",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42bc423b479374b24abd768668b679823e79a767/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42bc423b479374b24abd768668b679823e79a767/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=42bc423b479374b24abd768668b679823e79a767",
        "patch": "@@ -13,7 +13,7 @@\n  * for both bitcoind and bitcoin-core, to make it harder for attackers to\n  * target servers or GUI users specifically.\n  */\n-const std::string CLIENT_NAME(\"Satoshi\");\n+const std::string CLIENT_NAME(\"Snoopy\");\n \n /**\n  * Client version number"
      }
    ]
  },
  {
    "sha": "a31c1be5632ebfffec1a654a7e0dccb08be32d44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzFjMWJlNTYzMmViZmZmZWMxYTY1NGE3ZTBkY2NiMDhiZTMyZDQ0",
    "commit": {
      "author": {
        "name": "vl4m3r",
        "email": "vlamer@users.noreply.github.com",
        "date": "2016-01-31T20:36:51Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-01T21:26:03Z"
      },
      "message": "Update clientversion.cpp\n\nmy name node :D",
      "tree": {
        "sha": "7bea1d20f2fb12d963462267e5d0870dd875770e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bea1d20f2fb12d963462267e5d0870dd875770e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a31c1be5632ebfffec1a654a7e0dccb08be32d44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a31c1be5632ebfffec1a654a7e0dccb08be32d44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a31c1be5632ebfffec1a654a7e0dccb08be32d44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a31c1be5632ebfffec1a654a7e0dccb08be32d44/comments",
    "author": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "196ad6913ff57cd39caf0b262267e67c5a143467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/196ad6913ff57cd39caf0b262267e67c5a143467",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/196ad6913ff57cd39caf0b262267e67c5a143467"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bde38480f102f1fb7389db3a6ad4320126bda588",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a31c1be5632ebfffec1a654a7e0dccb08be32d44/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a31c1be5632ebfffec1a654a7e0dccb08be32d44/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=a31c1be5632ebfffec1a654a7e0dccb08be32d44",
        "patch": "@@ -13,7 +13,7 @@\n  * for both bitcoind and bitcoin-core, to make it harder for attackers to\n  * target servers or GUI users specifically.\n  */\n-const std::string CLIENT_NAME(\"Satoshi\");\n+const std::string CLIENT_NAME(\"Snoopy\");\n \n /**\n  * Client version number"
      }
    ]
  },
  {
    "sha": "e3bb29cf9814a86376d4e60c3e754e413a570a2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2JiMjljZjk4MTRhODYzNzZkNGU2MGMzZTc1NGU0MTNhNTcwYTJl",
    "commit": {
      "author": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-01T21:46:54Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-01T21:46:54Z"
      },
      "message": "Merge branch 'master' of github:/vlamer/bitcoin",
      "tree": {
        "sha": "7bea1d20f2fb12d963462267e5d0870dd875770e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bea1d20f2fb12d963462267e5d0870dd875770e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3bb29cf9814a86376d4e60c3e754e413a570a2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3bb29cf9814a86376d4e60c3e754e413a570a2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3bb29cf9814a86376d4e60c3e754e413a570a2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3bb29cf9814a86376d4e60c3e754e413a570a2e/comments",
    "author": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a31c1be5632ebfffec1a654a7e0dccb08be32d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a31c1be5632ebfffec1a654a7e0dccb08be32d44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a31c1be5632ebfffec1a654a7e0dccb08be32d44"
      },
      {
        "sha": "42bc423b479374b24abd768668b679823e79a767",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42bc423b479374b24abd768668b679823e79a767",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42bc423b479374b24abd768668b679823e79a767"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjljZTU1MTRjYmNhMmU1ODBlMWQ1N2YyYzNkYTEzMWIyODM3MWM2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-20T15:46:03Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:25Z"
      },
      "message": "Build: Consensus: Move consensus files from common to its own module/package",
      "tree": {
        "sha": "43e5578a9c817858694763465fe24785f298aa41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43e5578a9c817858694763465fe24785f298aa41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3bb29cf9814a86376d4e60c3e754e413a570a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3bb29cf9814a86376d4e60c3e754e413a570a2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3bb29cf9814a86376d4e60c3e754e413a570a2e"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 38,
      "deletions": 33
    },
    "files": [
      {
        "sha": "a0f841063a060e7d7f859d1fa355f04ea947f276",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 34,
        "deletions": 30,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "patch": "@@ -28,6 +28,7 @@ BITCOIN_INCLUDES += -I$(srcdir)/univalue/include\n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n+LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n@@ -47,6 +48,7 @@ EXTRA_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n+  libbitcoin_consensus.a \\\n   libbitcoin_server.a \\\n   libbitcoin_cli.a\n if ENABLE_WALLET\n@@ -59,9 +61,9 @@ endif\n \n if BUILD_BITCOIN_LIBS\n lib_LTLIBRARIES = libbitcoinconsensus.la\n-LIBBITCOIN_CONSENSUS=libbitcoinconsensus.la\n+LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n else\n-LIBBITCOIN_CONSENSUS=\n+LIBBITCOINCONSENSUS=\n endif\n \n bin_PROGRAMS =\n@@ -81,7 +83,6 @@ endif\n BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n-  amount.h \\\n   arith_uint256.h \\\n   base58.h \\\n   bloom.h \\\n@@ -105,7 +106,6 @@ BITCOIN_CORE_H = \\\n   consensus/validation.h \\\n   core_io.h \\\n   core_memusage.h \\\n-  hash.h \\\n   httprpc.h \\\n   httpserver.h \\\n   init.h \\\n@@ -124,24 +124,17 @@ BITCOIN_CORE_H = \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n-  prevector.h \\\n   primitives/block.h \\\n-  primitives/transaction.h \\\n   protocol.h \\\n-  pubkey.h \\\n   random.h \\\n   reverselock.h \\\n   rpc/client.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   scheduler.h \\\n-  script/interpreter.h \\\n-  script/script.h \\\n-  script/script_error.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  serialize.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -150,19 +143,15 @@ BITCOIN_CORE_H = \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n-  tinyformat.h \\\n   torcontrol.h \\\n   txdb.h \\\n   txmempool.h \\\n   ui_interface.h \\\n-  uint256.h \\\n   undo.h \\\n   util.h \\\n   utilmoneystr.h \\\n-  utilstrencodings.h \\\n   utiltime.h \\\n   validationinterface.h \\\n-  version.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/rpcwallet.h \\\n@@ -262,6 +251,33 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha512.cpp \\\n   crypto/sha512.h\n \n+# consensus: shared between all executables that validate any consensus rules.\n+libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_consensus_a_SOURCES = \\\n+  amount.h \\\n+  hash.cpp \\\n+  hash.h \\\n+  prevector.h \\\n+  primitives/transaction.cpp \\\n+  primitives/transaction.h \\\n+  pubkey.cpp \\\n+  pubkey.h \\\n+  script/bitcoinconsensus.cpp \\\n+  script/interpreter.cpp \\\n+  script/interpreter.h \\\n+  script/script.cpp \\\n+  script/script.h \\\n+  script/script_error.cpp \\\n+  script/script_error.h \\\n+  serialize.h \\\n+  tinyformat.h \\\n+  uint256.cpp \\\n+  uint256.h \\\n+  utilstrencodings.cpp \\\n+  utilstrencodings.h \\\n+  version.h\n+\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -275,18 +291,12 @@ libbitcoin_common_a_SOURCES = \\\n   consensus/merkle.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n-  hash.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n   netbase.cpp \\\n   primitives/block.cpp \\\n-  primitives/transaction.cpp \\\n   protocol.cpp \\\n-  pubkey.cpp \\\n   scheduler.cpp \\\n-  script/interpreter.cpp \\\n-  script/script.cpp \\\n-  script/script_error.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   $(BITCOIN_CORE_H)\n@@ -307,7 +317,6 @@ libbitcoin_util_a_SOURCES = \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n-  uint256.cpp \\\n   util.cpp \\\n   utilmoneystr.cpp \\\n   utilstrencodings.cpp \\\n@@ -343,6 +352,7 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV) \\\n@@ -390,6 +400,7 @@ bitcoin_tx_LDADD = \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBSECP256K1)\n \n@@ -405,14 +416,7 @@ libbitcoinconsensus_la_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n-  hash.cpp \\\n-  primitives/transaction.cpp \\\n-  pubkey.cpp \\\n-  script/bitcoinconsensus.cpp \\\n-  script/interpreter.cpp \\\n-  script/script.cpp \\\n-  uint256.cpp \\\n-  utilstrencodings.cpp\n+  $(libbitcoin_consensus_a_SOURCES)\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp"
      },
      {
        "sha": "d3cecb6b430c4e326cfd4698c69c52195b4e5f9e",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "patch": "@@ -16,6 +16,7 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV) \\"
      },
      {
        "sha": "d75b2c281042d5b342b13d419621f2a69bc83a97",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "patch": "@@ -378,7 +378,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "813a343ffa395ae63456deb5a476ce23ad4c5a76",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "patch": "@@ -33,7 +33,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "b22b8b8b963b353a6a5dc6d7f19d71ce26db29fb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9ce5514cbca2e580e1d57f2c3da131b28371c6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "patch": "@@ -95,7 +95,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "fd405b341afc8d438c721f550d37a410561df70b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDQwNWIzNDFhZmM4ZDQzOGM3MjFmNTUwZDM3YTQxMDU2MWRmNzBi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-24T05:26:15Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:26Z"
      },
      "message": "Build: Libconsensus: Move libconsensus-ready files to the consensus package",
      "tree": {
        "sha": "d24af3004d81b5b24b4e2e5d4176fa8392b4a427",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d24af3004d81b5b24b4e2e5d4176fa8392b4a427"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd405b341afc8d438c721f550d37a410561df70b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd405b341afc8d438c721f550d37a410561df70b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd405b341afc8d438c721f550d37a410561df70b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd405b341afc8d438c721f550d37a410561df70b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9ce5514cbca2e580e1d57f2c3da131b28371c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9ce5514cbca2e580e1d57f2c3da131b28371c6"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "41164ec356243972b84a423ea6ca8933863c7f30",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd405b341afc8d438c721f550d37a410561df70b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd405b341afc8d438c721f550d37a410561df70b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fd405b341afc8d438c721f550d37a410561df70b",
        "patch": "@@ -83,7 +83,6 @@ endif\n BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n-  arith_uint256.h \\\n   base58.h \\\n   bloom.h \\\n   chain.h \\\n@@ -101,9 +100,6 @@ BITCOIN_CORE_H = \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n-  consensus/merkle.h \\\n-  consensus/params.h \\\n-  consensus/validation.h \\\n   core_io.h \\\n   core_memusage.h \\\n   httprpc.h \\\n@@ -124,7 +120,6 @@ BITCOIN_CORE_H = \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n-  primitives/block.h \\\n   protocol.h \\\n   random.h \\\n   reverselock.h \\\n@@ -256,9 +251,17 @@ libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_consensus_a_SOURCES = \\\n   amount.h \\\n+  arith_uint256.cpp \\\n+  arith_uint256.h \\\n+  consensus/merkle.cpp \\\n+  consensus/merkle.h \\\n+  consensus/params.h \\\n+  consensus/validation.h \\\n   hash.cpp \\\n   hash.h \\\n   prevector.h \\\n+  primitives/block.cpp \\\n+  primitives/block.h \\\n   primitives/transaction.cpp \\\n   primitives/transaction.h \\\n   pubkey.cpp \\\n@@ -283,18 +286,15 @@ libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   amount.cpp \\\n-  arith_uint256.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n-  consensus/merkle.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n   netbase.cpp \\\n-  primitives/block.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/sign.cpp \\"
      }
    ]
  },
  {
    "sha": "81bdc15b941a7c78b350816252c8566aaee7ed82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWJkYzE1Yjk0MWE3Yzc4YjM1MDgxNjI1MmM4NTY2YWFlZTdlZDgy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-23T16:34:42Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:26Z"
      },
      "message": "Build: Consensus: Make libbitcoinconsensus_la_SOURCES fully dynamic and dependend on both crypto and consensus packages\n\nSome extra bytes in libconsensus to get all the crypto (except for signing, which is in the common module) below the libconsensus future independent repo (that has libsecp256k1 as a subtree).\nhmac_sha256.o seems to be the only thing libbitcoinconsensus doesn't depend on from crypto, some more bytes for the final libconsensus: I'm not personally worried.",
      "tree": {
        "sha": "f5db532d5a63159a949450a876acc6a115ab3cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5db532d5a63159a949450a876acc6a115ab3cd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81bdc15b941a7c78b350816252c8566aaee7ed82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81bdc15b941a7c78b350816252c8566aaee7ed82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81bdc15b941a7c78b350816252c8566aaee7ed82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81bdc15b941a7c78b350816252c8566aaee7ed82/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd405b341afc8d438c721f550d37a410561df70b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd405b341afc8d438c721f550d37a410561df70b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd405b341afc8d438c721f550d37a410561df70b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "12ef337494e32fc60e552e2ebade1c3fb9ea13d3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81bdc15b941a7c78b350816252c8566aaee7ed82/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81bdc15b941a7c78b350816252c8566aaee7ed82/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=81bdc15b941a7c78b350816252c8566aaee7ed82",
        "patch": "@@ -410,13 +410,7 @@ bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n-libbitcoinconsensus_la_SOURCES = \\\n-  crypto/hmac_sha512.cpp \\\n-  crypto/ripemd160.cpp \\\n-  crypto/sha1.cpp \\\n-  crypto/sha256.cpp \\\n-  crypto/sha512.cpp \\\n-  $(libbitcoin_consensus_a_SOURCES)\n+libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp"
      }
    ]
  },
  {
    "sha": "550414e01b6e97c4140100520ad75c96305815c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTA0MTRlMDFiNmU5N2M0MTQwMTAwNTIwYWQ3NWM5NjMwNTgxNWM1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-29T23:46:49Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:26Z"
      },
      "message": "MOVEONLY: non-consensus: from pow to chain:\n\n- GetBlockProof\n- GetBlockProofEquivalentTime",
      "tree": {
        "sha": "901738bc3fe0ba395510326ec5248d1025ef14e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/901738bc3fe0ba395510326ec5248d1025ef14e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/550414e01b6e97c4140100520ad75c96305815c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550414e01b6e97c4140100520ad75c96305815c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/550414e01b6e97c4140100520ad75c96305815c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550414e01b6e97c4140100520ad75c96305815c5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81bdc15b941a7c78b350816252c8566aaee7ed82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81bdc15b941a7c78b350816252c8566aaee7ed82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81bdc15b941a7c78b350816252c8566aaee7ed82"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 36,
      "deletions": 37
    },
    "files": [
      {
        "sha": "32f6480f849dacc077dedc3be9d30f89276da138",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550414e01b6e97c4140100520ad75c96305815c5/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550414e01b6e97c4140100520ad75c96305815c5/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=550414e01b6e97c4140100520ad75c96305815c5",
        "patch": "@@ -110,3 +110,35 @@ void CBlockIndex::BuildSkip()\n     if (pprev)\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n+\n+arith_uint256 GetBlockProof(const CBlockIndex& block)\n+{\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n+    if (fNegative || fOverflow || bnTarget == 0)\n+        return 0;\n+    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n+    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n+    // or ~bnTarget / (nTarget+1) + 1.\n+    return (~bnTarget / (bnTarget + 1)) + 1;\n+}\n+\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n+{\n+    arith_uint256 r;\n+    int sign = 1;\n+    if (to.nChainWork > from.nChainWork) {\n+        r = to.nChainWork - from.nChainWork;\n+    } else {\n+        r = from.nChainWork - to.nChainWork;\n+        sign = -1;\n+    }\n+    r = r * arith_uint256(params.nPowTargetSpacing) / GetBlockProof(tip);\n+    if (r.bits() > 63) {\n+        return sign * std::numeric_limits<int64_t>::max();\n+    }\n+    return sign * r.GetLow64();\n+}"
      },
      {
        "sha": "9199983565ca724c5d3255f4d573e28165aeb551",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550414e01b6e97c4140100520ad75c96305815c5/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550414e01b6e97c4140100520ad75c96305815c5/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=550414e01b6e97c4140100520ad75c96305815c5",
        "patch": "@@ -282,6 +282,10 @@ class CBlockIndex\n     const CBlockIndex* GetAncestor(int height) const;\n };\n \n+arith_uint256 GetBlockProof(const CBlockIndex& block);\n+/** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n+\n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex\n {"
      },
      {
        "sha": "40c72f9d79565b0675aef9b8676ee0bbddc81f3d",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550414e01b6e97c4140100520ad75c96305815c5/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550414e01b6e97c4140100520ad75c96305815c5/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=550414e01b6e97c4140100520ad75c96305815c5",
        "patch": "@@ -102,35 +102,3 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     return true;\n }\n-\n-arith_uint256 GetBlockProof(const CBlockIndex& block)\n-{\n-    arith_uint256 bnTarget;\n-    bool fNegative;\n-    bool fOverflow;\n-    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n-    if (fNegative || fOverflow || bnTarget == 0)\n-        return 0;\n-    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n-    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n-    // or ~bnTarget / (nTarget+1) + 1.\n-    return (~bnTarget / (bnTarget + 1)) + 1;\n-}\n-\n-int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n-{\n-    arith_uint256 r;\n-    int sign = 1;\n-    if (to.nChainWork > from.nChainWork) {\n-        r = to.nChainWork - from.nChainWork;\n-    } else {\n-        r = from.nChainWork - to.nChainWork;\n-        sign = -1;\n-    }\n-    r = r * arith_uint256(params.nPowTargetSpacing) / GetBlockProof(tip);\n-    if (r.bits() > 63) {\n-        return sign * std::numeric_limits<int64_t>::max();\n-    }\n-    return sign * r.GetLow64();\n-}"
      },
      {
        "sha": "23e9c1c3512dc2933aa5429e1df36cd6d283a0f8",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550414e01b6e97c4140100520ad75c96305815c5/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550414e01b6e97c4140100520ad75c96305815c5/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=550414e01b6e97c4140100520ad75c96305815c5",
        "patch": "@@ -13,16 +13,11 @@\n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n-class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n-arith_uint256 GetBlockProof(const CBlockIndex& block);\n-\n-/** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n-int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n \n #endif // BITCOIN_POW_H"
      }
    ]
  },
  {
    "sha": "015ca0bf940cdda884864a3a7e6baeab0486c9e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTVjYTBiZjk0MGNkZGE4ODQ4NjRhM2E3ZTZiYWVhYjA0ODZjOWU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-23T19:32:36Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:26Z"
      },
      "message": "mempool: Replace maxFeeRate of 10000*minRelayTxFee with maxTxFee",
      "tree": {
        "sha": "f1cddd7cd5e1184da1ac822357e09aa375db462d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1cddd7cd5e1184da1ac822357e09aa375db462d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/015ca0bf940cdda884864a3a7e6baeab0486c9e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/015ca0bf940cdda884864a3a7e6baeab0486c9e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/015ca0bf940cdda884864a3a7e6baeab0486c9e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/015ca0bf940cdda884864a3a7e6baeab0486c9e5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "550414e01b6e97c4140100520ad75c96305815c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550414e01b6e97c4140100520ad75c96305815c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/550414e01b6e97c4140100520ad75c96305815c5"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 19,
      "deletions": 18
    },
    "files": [
      {
        "sha": "b4ae3804040c9cb43955545b58134e751aa4172a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "patch": "@@ -407,8 +407,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n@@ -471,6 +469,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n@@ -988,7 +988,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-fallbackfee\"], nFeePerK))\n             return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), mapArgs[\"-fallbackfee\"]));\n-        if (nFeePerK > nHighTransactionFeeWarning)\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(_(\"-fallbackfee is set very high! This is the transaction fee you may pay when fee estimates are not available.\"));\n         CWallet::fallbackFee = CFeeRate(nFeePerK);\n     }\n@@ -997,7 +997,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n             return InitError(AmountErrMsg(\"paytxfee\", mapArgs[\"-paytxfee\"]));\n-        if (nFeePerK > nHighTransactionFeeWarning)\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n         if (payTxFee < ::minRelayTxFee)\n@@ -1011,7 +1011,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n             return InitError(AmountErrMsg(\"maxtxfee\", mapArgs[\"-maxtxfee\"]));\n-        if (nMaxFee > nHighTransactionMaxFeeWarning)\n+        if (nMaxFee > HIGH_MAX_TX_FEE)\n             InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n         if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)"
      },
      {
        "sha": "4d16b9f9ac7cd377e046ff3d4c83bad9c1cad174",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "patch": "@@ -75,13 +75,11 @@ bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n-/* If the tip is older than this (in seconds), the node is considered to be in initial block download.\n- */\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fPermitReplacement = DEFAULT_PERMIT_REPLACEMENT;\n \n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying, mining and transaction creation) */\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CTxMemPool mempool(::minRelayTxFee);\n \n@@ -1004,10 +1002,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             dFreeCount += nSize;\n         }\n \n-        if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n+        if (fRejectAbsurdFee && nFees > maxTxFee)\n             return state.Invalid(false,\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n-                strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n+                strprintf(\"%d > %d\", nFees, maxTxFee));\n \n         // Calculate in-mempool ancestors, up to a limit.\n         CTxMemPool::setEntries setAncestors;"
      },
      {
        "sha": "7199755a4367795f0faa28061a877ae11b79e289",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "patch": "@@ -48,6 +48,12 @@ static const bool DEFAULT_WHITELISTRELAY = true;\n static const bool DEFAULT_WHITELISTFORCERELAY = true;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n+//! -maxtxfee default\n+static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n+//! Discourage users to set fees higher than this amount (in satoshis) per kB\n+static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;\n+//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n+static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n@@ -140,8 +146,12 @@ extern unsigned int nBytesPerSigOp;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n+/** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n extern CFeeRate minRelayTxFee;\n+/** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n+extern CAmount maxTxFee;\n extern bool fAlerts;\n+/* If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n extern bool fPermitReplacement;\n "
      },
      {
        "sha": "dd9d549f666fafba9e91bb1e9e4afe10424c39e7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "patch": "@@ -37,7 +37,6 @@ using namespace std;\n  * Settings\n  */\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n-CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;"
      },
      {
        "sha": "28d2f8a04f73d96b55c2735ec55f8b44c8a6677a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/015ca0bf940cdda884864a3a7e6baeab0486c9e5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "patch": "@@ -32,22 +32,17 @@\n  * Settings\n  */\n extern CFeeRate payTxFee;\n-extern CAmount maxTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n-//! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n-static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n //! -fallbackfee default\n static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n-//! -maxtxfee default\n-static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n //! minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n //! Default for -spendzeroconfchange\n@@ -56,8 +51,6 @@ static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n-//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n-static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n static const bool DEFAULT_WALLETBROADCAST = true;\n@@ -211,6 +204,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n+    /** Pass this transaction to the mempool. Fails if absolute fee exceeds maxTxFee. */\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }"
      }
    ]
  },
  {
    "sha": "59dafeb7231db3099fcaa01014daff084c266735",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWRhZmViNzIzMWRiMzA5OWZjYWEwMTAxNGRhZmYwODRjMjY2NzM1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-21T12:15:19Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:26Z"
      },
      "message": "Get rid of inaccurate ScriptSigArgsExpected\n\n(cherry picked from commit 52b29dca7670c3f6d2ab918c0fff1d17c4e494ad)",
      "tree": {
        "sha": "b19fc6ebddfd5f1d4245ad71ca8e6a850986ff57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b19fc6ebddfd5f1d4245ad71ca8e6a850986ff57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59dafeb7231db3099fcaa01014daff084c266735",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59dafeb7231db3099fcaa01014daff084c266735",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59dafeb7231db3099fcaa01014daff084c266735",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59dafeb7231db3099fcaa01014daff084c266735/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/015ca0bf940cdda884864a3a7e6baeab0486c9e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/015ca0bf940cdda884864a3a7e6baeab0486c9e5"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 6,
      "deletions": 70
    },
    "files": [
      {
        "sha": "332abc430e1165a00f6e8f15c38e27ad3b6524cf",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 31,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59dafeb7231db3099fcaa01014daff084c266735/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59dafeb7231db3099fcaa01014daff084c266735/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=59dafeb7231db3099fcaa01014daff084c266735",
        "patch": "@@ -132,45 +132,20 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         const CScript& prevScript = prev.scriptPubKey;\n         if (!Solver(prevScript, whichType, vSolutions))\n             return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n-        // and this method isn't called.\n-        std::vector<std::vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n \n         if (whichType == TX_SCRIPTHASH)\n         {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), 0))\n+                return false;\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            std::vector<std::vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n+            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+                return false;\n             }\n         }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n     }\n \n     return true;"
      },
      {
        "sha": "67b6af327ae378fa63acf5143c5a8d25c26c92a4",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59dafeb7231db3099fcaa01014daff084c266735/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59dafeb7231db3099fcaa01014daff084c266735/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=59dafeb7231db3099fcaa01014daff084c266735",
        "patch": "@@ -161,27 +161,6 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n     return false;\n }\n \n-int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)\n-{\n-    switch (t)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-        return -1;\n-    case TX_PUBKEY:\n-        return 1;\n-    case TX_PUBKEYHASH:\n-        return 2;\n-    case TX_MULTISIG:\n-        if (vSolutions.size() < 1 || vSolutions[0].size() < 1)\n-            return -1;\n-        return vSolutions[0][0] + 1;\n-    case TX_SCRIPTHASH:\n-        return 1; // doesn't include args needed by the script\n-    }\n-    return -1;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "64bf010ec199ef4431322bea2f344e66dbc6c679",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59dafeb7231db3099fcaa01014daff084c266735/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59dafeb7231db3099fcaa01014daff084c266735/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=59dafeb7231db3099fcaa01014daff084c266735",
        "patch": "@@ -71,7 +71,6 @@ typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n-int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "28b85e8d290a7c921e15fdbf3e17765d8597d9b7",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59dafeb7231db3099fcaa01014daff084c266735/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59dafeb7231db3099fcaa01014daff084c266735/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=59dafeb7231db3099fcaa01014daff084c266735",
        "patch": "@@ -346,15 +346,6 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n-    // Make sure adding crap to the scriptSigs makes them non-standard:\n-    for (int i = 0; i < 3; i++)\n-    {\n-        CScript t = txTo.vin[i].scriptSig;\n-        txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n-        txTo.vin[i].scriptSig = t;\n-    }\n-\n     CMutableTransaction txToNonStd1;\n     txToNonStd1.vout.resize(1);\n     txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());"
      },
      {
        "sha": "c27f194b551bbb738495bbbdce899db2259c5cf9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59dafeb7231db3099fcaa01014daff084c266735/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59dafeb7231db3099fcaa01014daff084c266735/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=59dafeb7231db3099fcaa01014daff084c266735",
        "patch": "@@ -310,14 +310,6 @@ BOOST_AUTO_TEST_CASE(test_Get)\n \n     BOOST_CHECK(AreInputsStandard(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n-\n-    // Adding extra junk to the scriptSig should make it non-standard:\n-    t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n-\n-    // ... as should not having enough:\n-    t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)"
      }
    ]
  },
  {
    "sha": "49b85152c3f563a8f2af49d60a0ccec05893e7ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWI4NTE1MmMzZjU2M2E4ZjJhZjQ5ZDYwYTBjY2VjMDU4OTNlN2Fi",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-01-28T22:44:14Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:27Z"
      },
      "message": "Do not absolutely protect local peers from eviction.\n\nWith automatic tor HS support in place we should probably not be providing\n absolute protection for local peers, since HS inbound could be used to\n attack pretty easily.  Instead, this counts on the latency metric inside\n AttemptToEvictConnection to privilege actually local peers.\n\n(cherry picked from commit 46dbcd4833115401fecbb052365b4c7725874414)",
      "tree": {
        "sha": "ef81b44cadbd80491580ec49ef4b09f24644d74c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef81b44cadbd80491580ec49ef4b09f24644d74c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49b85152c3f563a8f2af49d60a0ccec05893e7ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b85152c3f563a8f2af49d60a0ccec05893e7ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49b85152c3f563a8f2af49d60a0ccec05893e7ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b85152c3f563a8f2af49d60a0ccec05893e7ab/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59dafeb7231db3099fcaa01014daff084c266735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59dafeb7231db3099fcaa01014daff084c266735",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59dafeb7231db3099fcaa01014daff084c266735"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "84c5644ccc896c2ae633cfd2162451b9863f13ac",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b85152c3f563a8f2af49d60a0ccec05893e7ab/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b85152c3f563a8f2af49d60a0ccec05893e7ab/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=49b85152c3f563a8f2af49d60a0ccec05893e7ab",
        "patch": "@@ -899,8 +899,6 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            if (node->addr.IsLocal())\n-                continue;\n             vEvictionCandidates.push_back(CNodeRef(node));\n         }\n     }"
      }
    ]
  },
  {
    "sha": "88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODYxOGMyYmNlMmUxZGQxOTM2ZTliZjNlZTU5M2ZmYzJjNDUzYTRi",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T03:48:54Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:27Z"
      },
      "message": "Decide eviction group ties based on time.\n\nThis corrects a bug the case of tying group size where the code may\n fail to select the group with the newest member. Since newest time\n is the final selection criteria, failing to break ties on it\n on the step before can undermine the final selection.\n\nTied netgroups are very common.\n\n(cherry picked from commit 8e09f914f8ec66301257358b250e9a61befadd95)",
      "tree": {
        "sha": "5265d8ec4ac4543f9a408e59d45dcc7c63cf558a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5265d8ec4ac4543f9a408e59d45dcc7c63cf558a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49b85152c3f563a8f2af49d60a0ccec05893e7ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b85152c3f563a8f2af49d60a0ccec05893e7ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49b85152c3f563a8f2af49d60a0ccec05893e7ab"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "14e22f6cb3b9bbb4dbc708b0d51e6030f2b5af5e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
        "patch": "@@ -929,30 +929,34 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     if (vEvictionCandidates.empty()) return false;\n \n-    // Identify the network group with the most connections\n+    // Identify the network group with the most connections and youngest member.\n+    // (vEvictionCandidates is already sorted by reverse connect time)\n     std::vector<unsigned char> naMostConnections;\n     unsigned int nMostConnections = 0;\n+    int64_t nMostConnectionsTime = 0;\n     std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n     BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n         mapAddrCounts[node->addr.GetGroup()].push_back(node);\n+        int64_t grouptime = mapAddrCounts[node->addr.GetGroup()][0]->nTimeConnected;\n+        size_t groupsize = mapAddrCounts[node->addr.GetGroup()].size();\n \n-        if (mapAddrCounts[node->addr.GetGroup()].size() > nMostConnections) {\n-            nMostConnections = mapAddrCounts[node->addr.GetGroup()].size();\n+        if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n+            nMostConnections = groupsize;\n+            nMostConnectionsTime = grouptime;\n             naMostConnections = node->addr.GetGroup();\n         }\n     }\n \n     // Reduce to the network group with the most connections\n     vEvictionCandidates = mapAddrCounts[naMostConnections];\n \n-    // Do not disconnect peers if there is only 1 connection from their network group\n+    // Do not disconnect peers if there is only one unprotected connection from their network group.\n     if (vEvictionCandidates.size() <= 1)\n         // unless we prefer the new connection (for whitelisted peers)\n         if (!fPreferNewConnection)\n             return false;\n \n-    // Disconnect the most recent connection from the network group with the most connections\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    // Disconnect from the network group with the most connections\n     vEvictionCandidates[0]->fDisconnect = true;\n \n     return true;"
      }
    ]
  },
  {
    "sha": "cb6fa430f8656e6e33758112542d57ede124b548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjZmYTQzMGY4NjU2ZTZlMzM3NTgxMTI1NDJkNTdlZGUxMjRiNTQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-02-02T12:40:54Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-02T21:33:27Z"
      },
      "message": "[doxygen] Actually display comment",
      "tree": {
        "sha": "2d49569f7773ab3b5d94241e2340cb03373aae17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d49569f7773ab3b5d94241e2340cb03373aae17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb6fa430f8656e6e33758112542d57ede124b548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb6fa430f8656e6e33758112542d57ede124b548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb6fa430f8656e6e33758112542d57ede124b548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb6fa430f8656e6e33758112542d57ede124b548/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88618c2bce2e1dd1936e9bf3ee593ffc2c453a4b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "793737422e12dd245ac144f11225674cba670c1e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb6fa430f8656e6e33758112542d57ede124b548/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb6fa430f8656e6e33758112542d57ede124b548/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cb6fa430f8656e6e33758112542d57ede124b548",
        "patch": "@@ -151,7 +151,7 @@ extern CFeeRate minRelayTxFee;\n /** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n extern CAmount maxTxFee;\n extern bool fAlerts;\n-/* If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n+/** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n extern bool fPermitReplacement;\n "
      }
    ]
  },
  {
    "sha": "7a96babba3392328824137066c4572b62ed6461a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTk2YmFiYmEzMzkyMzI4ODI0MTM3MDY2YzQ1NzJiNjJlZDY0NjFh",
    "commit": {
      "author": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-03T18:46:51Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-03T18:46:51Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "e603453d34845ed6ba360bc2d0d63f8168c46f57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e603453d34845ed6ba360bc2d0d63f8168c46f57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a96babba3392328824137066c4572b62ed6461a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a96babba3392328824137066c4572b62ed6461a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a96babba3392328824137066c4572b62ed6461a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a96babba3392328824137066c4572b62ed6461a/comments",
    "author": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb6fa430f8656e6e33758112542d57ede124b548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb6fa430f8656e6e33758112542d57ede124b548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb6fa430f8656e6e33758112542d57ede124b548"
      },
      {
        "sha": "eb331794a22b86da0a76d6710cb3eb37903a486e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb331794a22b86da0a76d6710cb3eb37903a486e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb331794a22b86da0a76d6710cb3eb37903a486e"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 31,
      "deletions": 23
    },
    "files": [
      {
        "sha": "6b51521997301d126110dc8f447832693a13e736",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7a96babba3392328824137066c4572b62ed6461a",
        "patch": "@@ -47,8 +47,10 @@\n #include <signal.h>\n #endif\n \n+#include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/function.hpp>\n@@ -367,7 +369,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n     strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n-    strUsage += HelpMessageOpt(\"-permitrbf\", strprintf(_(\"Permit transaction replacements in the memory pool (default: %u)\"), DEFAULT_PERMIT_REPLACEMENT));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n@@ -489,6 +490,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Minimum bytes per sigop in transactions we relay and mine (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n+    strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), DEFAULT_BLOCK_MIN_SIZE));\n@@ -1040,7 +1042,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         nLocalServices |= NODE_BLOOM;\n \n     nMaxTipAge = GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n-    fPermitReplacement = GetBoolArg(\"-permitrbf\", DEFAULT_PERMIT_REPLACEMENT);\n+\n+    fEnableReplacement = GetBoolArg(\"-mempoolreplacement\", DEFAULT_ENABLE_REPLACEMENT);\n+    if ((!fEnableReplacement) && mapArgs.count(\"-mempoolreplacement\")) {\n+        // Minimal effort at forwards compatibility\n+        std::string strReplacementModeList = GetArg(\"-mempoolreplacement\", \"\");  // default is impossible\n+        std::vector<std::string> vstrReplacementModes;\n+        boost::split(vstrReplacementModes, strReplacementModeList, boost::is_any_of(\",\"));\n+        fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n+    }\n \n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n "
      },
      {
        "sha": "984523408415bf96789e3bd1c3b156091e0e3799",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7a96babba3392328824137066c4572b62ed6461a",
        "patch": "@@ -76,7 +76,7 @@ size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n-bool fPermitReplacement = DEFAULT_PERMIT_REPLACEMENT;\n+bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -867,7 +867,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                 // unconfirmed ancestors anyway; doing otherwise is hopelessly\n                 // insecure.\n                 bool fReplacementOptOut = true;\n-                if (fPermitReplacement)\n+                if (fEnableReplacement)\n                 {\n                     BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n                     {\n@@ -3169,16 +3169,10 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n \n bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp)\n {\n-    // Preliminary checks\n-    bool checked = CheckBlock(*pblock, state);\n-\n     {\n         LOCK(cs_main);\n         bool fRequested = MarkBlockAsReceived(pblock->GetHash());\n         fRequested |= fForceProcessing;\n-        if (!checked) {\n-            return error(\"%s: CheckBlock FAILED %s\", __func__, FormatStateMessage(state));\n-        }\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;"
      },
      {
        "sha": "f9145a1a79cff13183046a5eec8fd04166d928ec",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7a96babba3392328824137066c4572b62ed6461a",
        "patch": "@@ -115,8 +115,8 @@ static const bool DEFAULT_TXINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n \n static const bool DEFAULT_TESTSAFEMODE = false;\n-/** Default for -permitrbf */\n-static const bool DEFAULT_PERMIT_REPLACEMENT = true;\n+/** Default for -mempoolreplacement */\n+static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n \n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n@@ -153,7 +153,7 @@ extern CAmount maxTxFee;\n extern bool fAlerts;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n-extern bool fPermitReplacement;\n+extern bool fEnableReplacement;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n@@ -407,23 +407,27 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n \n /** Functions for validating blocks and updating the block tree */\n \n-/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n- *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n- *  will be true if no problems were found. Otherwise, the return value will be false in case\n- *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n-\n-/** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n-\n /** Context-independent validity checks */\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n-/** Context-dependent validity checks */\n+/** Context-dependent validity checks.\n+ *  By \"context\", we mean only the previous block headers, but not the UTXO\n+ *  set; UTXO-related validity checks are done in ConnectBlock(). */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n+/** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n+ *  can fail if those validity checks fail (among other reasons). */\n+bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+\n+/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n+ *  will be true if no problems were found. Otherwise, the return value will be false in case\n+ *  of problems. Note that in any case, coins may be modified. */\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n "
      }
    ]
  },
  {
    "sha": "77150a1af93a62cc516eb696e9b751220888cc62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzE1MGExYWY5M2E2MmNjNTE2ZWI2OTZlOWI3NTEyMjA4ODhjYzYy",
    "commit": {
      "author": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-15T15:54:27Z"
      },
      "committer": {
        "name": "vlamer",
        "email": "vl4m3r@zoho.com",
        "date": "2016-02-15T15:54:27Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "7d8d432b253f6427970111efce4a64398689e095",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d8d432b253f6427970111efce4a64398689e095"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77150a1af93a62cc516eb696e9b751220888cc62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77150a1af93a62cc516eb696e9b751220888cc62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77150a1af93a62cc516eb696e9b751220888cc62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77150a1af93a62cc516eb696e9b751220888cc62/comments",
    "author": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlamer",
      "id": 13274147,
      "node_id": "MDQ6VXNlcjEzMjc0MTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13274147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlamer",
      "html_url": "https://github.com/vlamer",
      "followers_url": "https://api.github.com/users/vlamer/followers",
      "following_url": "https://api.github.com/users/vlamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlamer/subscriptions",
      "organizations_url": "https://api.github.com/users/vlamer/orgs",
      "repos_url": "https://api.github.com/users/vlamer/repos",
      "events_url": "https://api.github.com/users/vlamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a96babba3392328824137066c4572b62ed6461a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a96babba3392328824137066c4572b62ed6461a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a96babba3392328824137066c4572b62ed6461a"
      },
      {
        "sha": "bf1e113311fe225c9a3a78f9d0fb5e43974573b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf1e113311fe225c9a3a78f9d0fb5e43974573b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf1e113311fe225c9a3a78f9d0fb5e43974573b7"
      }
    ],
    "stats": {
      "total": 1587,
      "additions": 1262,
      "deletions": 325
    },
    "files": [
      {
        "sha": "34787669db69674acf2c060a3079810ccc820918",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -3,6 +3,12 @@\n #   compiler key (which we don't use anyway). This is worked around for now by\n #   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n #   command. See: https://github.com/travis-ci/travis-ci/issues/4393\n+# - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]\n+#   IPv6 support\n+\n+sudo: required\n+dist: precise\n+group: legacy\n \n os: linux\n language: cpp\n@@ -41,7 +47,7 @@ matrix:\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n   exclude:\n     - compiler: gcc\n install:\n@@ -52,7 +58,7 @@ install:\n before_script:\n     - unset CC; unset CXX\n     - mkdir -p depends/SDKs depends/sdk-sources\n-    - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then wget $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -O depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n+    - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:"
      },
      {
        "sha": "d6cbd7cb1221caa09ae90a4003cf16fc9ea19d4a",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -3,6 +3,7 @@ SUBDIRS = src\n .PHONY: deploy FORCE\n \n GZIP_ENV=\"-9n\"\n+export PYTHONPATH\n \n if BUILD_BITCOIN_LIBS\n pkgconfigdir = $(libdir)/pkgconfig\n@@ -14,12 +15,18 @@ BITCOIN_QT_BIN=$(top_builddir)/src/qt/bitcoin-qt$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/bitcoin-cli$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n+empty :=\n+space := $(empty) $(empty)\n+\n OSX_APP=Bitcoin-Qt.app\n-OSX_DMG=Bitcoin-Core.dmg\n+OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\n+OSX_DMG = $(OSX_VOLNAME).dmg\n+OSX_BACKGROUND_SVG=background.svg\n OSX_BACKGROUND_IMAGE=background.tiff\n+OSX_BACKGROUND_IMAGE_DPIS=36 72\n+OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n-OSX_BASE_LPROJ_DIR=$(top_srcdir)/contrib/macdeploy/Base.lproj/InfoPlist.strings\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_srcdir)/share/qt/Info.plist #not installed\n OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n@@ -34,9 +41,9 @@ WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n   $(top_srcdir)/doc/README_windows.txt\n \n-OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) $(OSX_BASE_LPROJ_DIR) \\\n-  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_IMAGE) \\\n-  $(top_srcdir)/contrib/macdeploy/DS_Store \\\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n+  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n+  $(OSX_DSSTORE_GEN) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n@@ -90,17 +97,20 @@ $(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(BITCOIN_QT_BIN)\n \t$(MKDIR_P) $(@D)\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM)  $< $@\n \n-$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings: $(OSX_BASE_LPROJ_DIR)\n+$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings:\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL_DATA) $< $@\n+\techo '{\tCFBundleDisplayName = \"$(PACKAGE_NAME)\"; CFBundleName = \"$(PACKAGE_NAME)\"; }' > $@\n \n OSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \\\n   $(OSX_APP)/Contents/Resources/bitcoin.icns $(OSX_APP)/Contents/Info.plist \\\n   $(OSX_APP)/Contents/MacOS/Bitcoin-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings\n \n+osx_volname:\n+\techo $(OSX_VOLNAME) >$@\n+\n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\t$(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2\n+\t$(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n \n deploydir: $(OSX_DMG)\n else\n@@ -114,13 +124,17 @@ $(APP_DIST_DIR)/Applications:\n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n $(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n+\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n \n-$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n+dpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n+\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\n+OSX_BACKGROUND_IMAGE_DPIFILES := $(foreach dpi,$(OSX_BACKGROUND_IMAGE_DPIS),dpi$(dpi).$(OSX_BACKGROUND_IMAGE))\n+$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIFILES)\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL) $< $@\n-$(APP_DIST_DIR)/.DS_Store: contrib/macdeploy/DS_Store\n-\t$(INSTALL) $< $@\n+\t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n+\n+$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n+\t$< \"$@\" \"$(OSX_VOLNAME)\"\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n \tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2"
      },
      {
        "sha": "46e36ff5b216c5e42c56c133ca84c52a57d19b50",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -6,4 +6,6 @@ if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n   LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n   export LIBTOOLIZE\n fi\n+which autoreconf >/dev/null || \\\n+  (echo \"configuration failed, please install autoconf first\" && exit 1)\n autoreconf --install --force --warnings=all"
      },
      {
        "sha": "2aa493a6af6b48537cdc2c0601a601a9c03fef1f",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -38,7 +38,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n@@ -60,7 +60,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n     ])\n   done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+      AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      },
      {
        "sha": "5fe12fda9bb8e4ab5b8a3387e7a36099fe67b4db",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -220,7 +220,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n \n \n   dnl enable qt support\n-  AC_MSG_CHECKING(whether to build Bitcoin Core GUI)\n+  AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes"
      },
      {
        "sha": "939dfeaabfce9390f3bdebeaa3f3b5d2ea40e5e3",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 64,
        "deletions": 2,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -6,7 +6,9 @@ define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n define(_COPYRIGHT_YEAR, 2016)\n-AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin])\n+define(_COPYRIGHT_HOLDERS,[The %s developers])\n+define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[Bitcoin Core])\n+AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n AC_CONFIG_SRCDIR([src/main.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n@@ -67,6 +69,8 @@ AC_PATH_PROG(HEXDUMP,hexdump)\n AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n \n+AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n+\n dnl pkg-config check.\n PKG_PROG_PKG_CONFIG\n \n@@ -150,6 +154,12 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_WITH([system-univalue],\n+  [AS_HELP_STRING([--with-system-univalue],\n+  [Build with system UniValue (default is no)])],\n+  [system_univalue=$withval],\n+  [system_univalue=no]\n+)\n AC_ARG_ENABLE([zmq],\n   [AS_HELP_STRING([--disable-zmq],\n   [disable ZMQ notifications])],\n@@ -316,6 +326,9 @@ case $host in\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n            AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n+           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n+           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n+           AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n \n            dnl libtool will try to strip the static lib, which is a problem for\n            dnl cross-builds because strip attempts to call a hard-coded ld,\n@@ -783,6 +796,44 @@ else\n   fi\n fi\n \n+dnl univalue check\n+\n+if test x$system_univalue != xno ; then\n+  found_univalue=no\n+  if test x$use_pkgconfig = xyes; then\n+    : #NOP\n+    m4_ifdef(\n+      [PKG_CHECK_MODULES],\n+      [\n+        PKG_CHECK_MODULES([UNIVALUE],[libunivalue],[found_univalue=yes],[true])\n+      ]\n+    )\n+  else\n+    AC_CHECK_HEADER([univalue.h],[\n+      AC_CHECK_LIB([univalue],  [main],[\n+        UNIVALUE_LIBS=-lunivalue\n+        found_univalue=yes\n+      ],[true])\n+    ],[true])\n+  fi\n+\n+  if test x$found_univalue = xyes ; then\n+    system_univalue=yes\n+  elif test x$system_univalue = xyes ; then\n+    AC_MSG_ERROR([univalue not found])\n+  else\n+    system_univalue=no\n+  fi\n+fi\n+\n+if test x$system_univalue = xno ; then\n+  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n+  UNIVALUE_LIBS='univalue/libunivalue.la'\n+fi\n+AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$system_univalue = xno])\n+AC_SUBST(UNIVALUE_CFLAGS)\n+AC_SUBST(UNIVALUE_LIBS)\n+\n CXXFLAGS_TEMP=\"$CXXFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n@@ -949,12 +1000,19 @@ AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\n AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Version is release])\n+AC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])\n+AC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])\n+define(_COPYRIGHT_HOLDERS_FINAL, patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION]))\n+AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\n AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n+AC_SUBST(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\")\n+AC_SUBST(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\")\n+AC_SUBST(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\")\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n@@ -1000,8 +1058,12 @@ PKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\n unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n+if test x$system_univalue = xno; then\n+  AC_CONFIG_SUBDIRS([src/univalue])\n+fi\n+\n ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery\"\n-AC_CONFIG_SUBDIRS([src/secp256k1 src/univalue])\n+AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT\n "
      },
      {
        "sha": "c4165470af1320e4503119c2da276c55ecb5353f",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -32,6 +32,7 @@ script: |\n   SIGNED=bitcoin-osx-signed.dmg\n \n   tar -xf ${UNSIGNED}\n+  OSX_VOLNAME=\"$(cat osx_volname)\"\n   ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n-  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -apple -o uncompressed.dmg signed-app\n+  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -apple -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "4a4592398b353736310c1512e04b7a5683756409",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -6,20 +6,26 @@ suites:\n architectures:\n - \"amd64\"\n packages: \n+- \"ca-certificates\"\n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n - \"autoconf\"\n+- \"librsvg2-bin\"\n+- \"libtiff-tools\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n - \"bsdmainutils\"\n - \"cmake\"\n+- \"imagemagick\"\n - \"libcap-dev\"\n - \"libz-dev\"\n - \"libbz2-dev\"\n-- \"ca-certificates\"\n - \"python\"\n+- \"python-dev\"\n+- \"python-setuptools\"\n+- \"fonts-tuffy\"\n reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -109,8 +115,11 @@ script: |\n     make ${MAKEOPTS}\n     make install-strip\n \n+    make osx_volname\n     make deploydir\n+    OSX_VOLNAME=\"$(cat osx_volname)\"\n     mkdir -p unsigned-app-${i}\n+    cp osx_volname unsigned-app-${i}/\n     cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}\n     cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}\n     cp ${BASEPREFIX}/${i}/native/bin/dmg ${BASEPREFIX}/${i}/native/bin/genisoimage unsigned-app-${i}\n@@ -122,7 +131,7 @@ script: |\n     popd\n \n     make deploy\n-    ${WRAP_DIR}/dmg dmg Bitcoin-Core.dmg ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n+    ${WRAP_DIR}/dmg dmg \"${OSX_VOLNAME}.dmg\" ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n \n     cd installed\n     find . -name \"lib*.la\" -delete"
      },
      {
        "sha": "b259ea141c00afdddd95c9c78df1b856d5b86f2d",
        "filename": "contrib/macdeploy/Base.lproj/InfoPlist.strings",
        "status": "removed",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/Base.lproj/InfoPlist.strings",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/Base.lproj/InfoPlist.strings",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/Base.lproj/InfoPlist.strings?ref=7a96babba3392328824137066c4572b62ed6461a",
        "patch": "@@ -1 +0,0 @@\n-{\tCFBundleDisplayName = \"Bitcoin Core\"; CFBundleName = \"Bitcoin Core\"; }"
      },
      {
        "sha": "db9d16f1d700f18b64edafa0f8d981a680567b4d",
        "filename": "contrib/macdeploy/DS_Store",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/DS_Store",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/DS_Store",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/DS_Store?ref=7a96babba3392328824137066c4572b62ed6461a"
      },
      {
        "sha": "f88a2ae74bdb33afc2806b6403ea8c0191b096ca",
        "filename": "contrib/macdeploy/background.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.png?ref=7a96babba3392328824137066c4572b62ed6461a"
      },
      {
        "sha": "fdc4f4ca4a07ea4c6082ee1357b6ec7e8db99d72",
        "filename": "contrib/macdeploy/background.psd",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background.psd",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background.psd",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.psd?ref=7a96babba3392328824137066c4572b62ed6461a"
      },
      {
        "sha": "9c330af45142e011e78b4b86874ac4b3457ed457",
        "filename": "contrib/macdeploy/background.svg",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/contrib/macdeploy/background.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/contrib/macdeploy/background.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.svg?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\"\n+ \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n+<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1000pt\" height=\"640pt\" viewBox=\"0 0 1000 640\" preserveAspectRatio=\"xMidYMid meet\">\n+\t<!-- kate: space-indent off;\n+\tCopyright (c) 2015 The Bitcoin Core developers\n+\tDistributed under the MIT software license, see the accompanying\n+\tfile COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\t-->\n+\t<style type=\"text/css\"><![CDATA[\n+\t\ttext {\n+\t\t\tfont-family: \"Tuffy\";\n+\t\t\tfont-size: 86px;\n+\t\t\tfill: gray;\n+\t\t\ttext-anchor: middle;\n+\t\t}\n+\t]]></style>\n+\t<defs>\n+\t\t<linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n+\t\t\t<stop offset=\"0%\" style=\"stop-color:rgb(239,239,239);stop-opacity:1\" />\n+\t\t\t<stop offset=\"33%\" style=\"stop-color:rgb(239,239,239);stop-opacity:1\" />\n+\t\t\t<stop offset=\"80%\" style=\"stop-color:rgb(205,205,205);stop-opacity:1\" />\n+\t\t\t<stop offset=\"100%\" style=\"stop-color:rgb(204,204,204);stop-opacity:1\" />\n+\t\t</linearGradient>\n+\t</defs>\n+\t<rect width=\"1000\" height=\"640\" style=\"fill:url(#gradient);stroke-width:0\" />\n+\t<g transform=\"translate(500,0) scale(0.9, 1)\">\n+\t\t<text x=\"0\" y=\"114\">PACKAGE_NAME</text>\n+\t</g>\n+\t<g transform=\"translate(0.000000,640.000000) scale(0.100000,-0.100000)\"\n+\tfill=\"#000000\" stroke=\"none\">\n+\t\t<path d=\"M4995 3705 c-24 -23 -25 -29 -25 -165 l0 -140 -306 0 -306 0 -29 -29 c-29 -29 -29 -31 -29 -141 0 -110 0 -112 29 -141 l29 -29 306 0 306 0 0 -140 c0 -136 1 -142 25 -165 16 -17 35 -25 57 -25 29 0 72 32 306 226 180 149 274 233 278 250 13 53 -2 70 -278 299 -235 194 -277 225 -306 225 -22 0 -41 -8 -57 -25z\" fixlter=\"url(#glow)\"/>\n+\t</g>\n+</svg>"
      },
      {
        "sha": "4b44ac672e627be82bb9b74dac0016057b11c126",
        "filename": "contrib/macdeploy/background.tiff",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background.tiff",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background.tiff",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.tiff?ref=7a96babba3392328824137066c4572b62ed6461a"
      },
      {
        "sha": "4858183f75c382a9b8d75ae4fb8a74abd830615f",
        "filename": "contrib/macdeploy/background@2x.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background@2x.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/contrib/macdeploy/background@2x.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background@2x.png?ref=7a96babba3392328824137066c4572b62ed6461a"
      },
      {
        "sha": "8481e903a0d12e1791981230e89894577c2d8e09",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -0,0 +1,60 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2013-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import biplist\n+from ds_store import DSStore\n+from mac_alias import Alias\n+import sys\n+\n+output_file = sys.argv[1]\n+package_name_ns = sys.argv[2]\n+\n+ds = DSStore.open(output_file, 'w+')\n+ds['.']['bwsp'] = {\n+    'ShowStatusBar': False,\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n+    'ContainerShowSidebar': False,\n+    'SidebarWidth': 0,\n+    'ShowTabView': False,\n+    'PreviewPaneVisibility': False,\n+    'ShowToolbar': False,\n+    'ShowSidebar': False,\n+    'ShowPathbar': True\n+}\n+\n+icvp = {\n+    'gridOffsetX': 0.0,\n+    'textSize': 12.0,\n+    'viewOptionsVersion': 1,\n+    'backgroundImageAlias': '\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n+    'backgroundColorBlue': 1.0,\n+    'iconSize': 96.0,\n+    'backgroundColorGreen': 1.0,\n+    'arrangeBy': 'none',\n+    'showIconPreview': True,\n+    'gridSpacing': 100.0,\n+    'gridOffsetY': 0.0,\n+    'showItemInfo': False,\n+    'labelOnBottom': True,\n+    'backgroundType': 2,\n+    'backgroundColorRed': 1.0\n+}\n+alias = Alias.from_bytes(icvp['backgroundImageAlias'])\n+alias.volume.name = package_name_ns\n+alias.volume.posix_path = '/Volumes/' + package_name_ns\n+alias.volume.disk_image_alias.target.filename = package_name_ns + '.temp.dmg'\n+alias.volume.disk_image_alias.target.carbon_path = 'Macintosh HD:Users:\\x00bitcoinuser:\\x00Documents:\\x00bitcoin:\\x00bitcoin:\\x00' + package_name_ns + '.temp.dmg'\n+alias.volume.disk_image_alias.target.posix_path = 'Users/bitcoinuser/Documents/bitcoin/bitcoin/' + package_name_ns + '.temp.dmg'\n+alias.target.carbon_path = package_name_ns + ':.background:\\x00background.tiff'\n+icvp['backgroundImageAlias'] = biplist.Data(alias.to_bytes())\n+ds['.']['icvp'] = icvp\n+\n+ds['.']['vSrn'] = ('long', 1)\n+\n+ds['Applications']['Iloc'] = (370, 156)\n+ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n+\n+ds.flush()\n+ds.close()"
      },
      {
        "sha": "7e6270c743e3f00a0571a28847e5d40f882a2887",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -495,6 +495,7 @@ ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fan\n ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's ressources; the language list must be separated with commas, not with whitespace\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n+ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n \n config = ap.parse_args()\n \n@@ -596,6 +597,13 @@ if os.path.exists(\"dist\"):\n \n # ------------------------------------------------\n \n+if len(config.volname) == 1:\n+    volname = config.volname[0]\n+else:\n+    volname = app_bundle_name\n+\n+# ------------------------------------------------\n+\n target = os.path.join(\"dist\", \"Bitcoin-Qt.app\")\n \n if verbose >= 2:\n@@ -757,7 +765,7 @@ if config.dmg is not None:\n     \n     if fancy is None:\n         try:\n-            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=\"Bitcoin-Core\", ov=True)\n+            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=volname, ov=True)\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n     else:\n@@ -772,7 +780,7 @@ if config.dmg is not None:\n         if verbose >= 3:\n             print \"Creating temp image for modification...\"\n         try:\n-            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=\"Bitcoin-Core\", ov=True)\n+            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n         \n@@ -837,7 +845,7 @@ if config.dmg is not None:\n                 items_positions.append(itemscript.substitute(params))\n \n         params = {\n-            \"disk\" : \"Bitcoin-Core\",\n+            \"disk\" : volname,\n             \"window_bounds\" : \"300,300,800,620\",\n             \"icon_size\" : \"96\",\n             \"background_commands\" : \"\","
      },
      {
        "sha": "cedbddc57847e6e69ce251f47f6a57dc7f3e5e13",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -7,7 +7,7 @@ build_darwin_OTOOL: = $(shell xcrun -f otool)\n build_darwin_NM: = $(shell xcrun -f nm)\n build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n build_darwin_SHA256SUM = shasum -a 256\n-build_darwin_DOWNLOAD = curl --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -L -o\n+build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -L -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)"
      },
      {
        "sha": "d6a304e4b4b9d08969c626ad5ed4dc09df73e985",
        "filename": "depends/builders/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/builders/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/builders/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/linux.mk?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -1,2 +1,2 @@\n build_linux_SHA256SUM = sha256sum\n-build_linux_DOWNLOAD = wget --timeout=$(DOWNLOAD_CONNECT_TIMEOUT) --tries=$(DOWNLOAD_RETRIES) -nv -O\n+build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -L -o"
      },
      {
        "sha": "984ddb1e62b01dfc6dad664b75ffa7887e5439d8",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -66,6 +66,7 @@ CXX=\"@CXX@\"\n OBJC=\"${CC}\"\n OBJCXX=\"${CXX}\"\n CCACHE=$prefix/native/bin/ccache\n+PYTHONPATH=$prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then\n   AR=@AR@"
      },
      {
        "sha": "eb8672d556a9cd03b57cb3b6e11d706183345c80",
        "filename": "depends/packages/native_biplist.mk",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -0,0 +1,15 @@\n+package=native_biplist\n+$(package)_version=0.9\n+$(package)_download_path=https://pypi.python.org/packages/source/b/biplist\n+$(package)_file_name=biplist-$($(package)_version).tar.gz\n+$(package)_sha256_hash=b57cadfd26e4754efdf89e9e37de87885f9b5c847b2615688ca04adfaf6ca604\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "8e902af1b6e9af0f5c4cb91cf075365c0815f828",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -0,0 +1,17 @@\n+package=native_ds_store\n+$(package)_version=c80c23706eae\n+$(package)_download_path=https://bitbucket.org/al45tair/ds_store/get\n+$(package)_download_file=$($(package)_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=ce1aa412211610c63d567bbe3e06213006a2d5ba5d76d89399c151b5472cb0da\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_dependencies=native_biplist\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "d117c1c9a3f6884ba37e21f7fef6798cd1e0c62e",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -0,0 +1,16 @@\n+package=native_mac_alias\n+$(package)_version=1.1.0\n+$(package)_download_path=https://bitbucket.org/al45tair/mac_alias/get\n+$(package)_download_file=v$($(package)_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=87ad827e66790028361e43fc754f68ed041a9bdb214cca03c853f079b04fb120\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "59b009b66a27b3cd8083bb1e31f10abfa92b2486",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -15,6 +15,8 @@ wallet_packages=bdb\n \n upnp_packages=miniupnpc\n \n+darwin_native_packages = native_biplist native_ds_store native_mac_alias\n+\n ifneq ($(build_os),darwin)\n-darwin_native_packages=native_cctools native_cdrkit native_libdmg-hfsplus\n+darwin_native_packages += native_cctools native_cdrkit native_libdmg-hfsplus\n endif"
      },
      {
        "sha": "c13efaa145c833e693004a245f7ad1d66d1d293d",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -63,9 +63,8 @@ functionality is broken. Only the compression feature is currently used.\n Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-.DS_Store before creation. The easiest way to create this file is to build a\n-DMG without one, move it to a device running OS X, customize the layout, then\n-grab the .DS_Store file for later use. That is the approach taken here.\n+.DS_Store before creation. This is generated by the script\n+contrib/macdeploy/custom_dsstore.py.\n \n As of OS X Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n requirement in order to satisfy the new Gatekeeper requirements. Because this"
      },
      {
        "sha": "96de098c38dc58b4d8ea46e874d7a9d5b972bad3",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -46,6 +46,7 @@ Optional dependencies:\n  qt          | GUI              | GUI toolkit (only needed when GUI enabled)\n  protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when GUI enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n+ univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n  libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x)\n \n For the versions used in the release, see [release-process.md](release-process.md) under *Fetch and build inputs*."
      },
      {
        "sha": "8fb083d0d46df692384782ee7ebac92dd6411a79",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -3,6 +3,7 @@ Release Process\n \n * Update translations (ping wumpus, Diapolo or tcatm on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex)\n * Update [bips.md](bips.md) to account for changes since the last release.\n+* Update hardcoded [seeds](/contrib/seeds)\n \n * * *\n \n@@ -19,8 +20,10 @@ Check out the source code in the following directory hierarchy.\n \n \tpushd ./bitcoin\n \tcontrib/verifysfbinaries/verify.sh\n+\tconfigure.ac\n \tdoc/README*\n-\tshare/setup.nsi\n+\tdoc/Doxyfile\n+\tcontrib/gitian-descriptors/*.yml\n \tsrc/clientversion.h (change CLIENT_VERSION_IS_RELEASE to true)\n \n \t# tag version in git\n@@ -84,16 +87,21 @@ NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from\n ```\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n-###Build and Sign Bitcoin Core for Linux, Windows, and OS X:\n+###Build and sign Bitcoin Core for Linux, Windows, and OS X:\n \n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n \n   Build output expected:\n \n@@ -115,13 +123,6 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n \t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \n-###Move the outputs to the correct directory\n-\n-\tmv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n-\tmv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n-\tmv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n-\tmv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n-\tmv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n \tpopd\n \n ###Next steps:\n@@ -137,7 +138,6 @@ Commit your signature to gitian.sigs:\n \tpopd\n \n   Wait for Windows/OS X detached signatures:\n-\n \tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n \tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n "
      },
      {
        "sha": "eb920c47eb521e5e42f3cff196c92627015e6dc7",
        "filename": "libbitcoinconsensus.pc.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/libbitcoinconsensus.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/libbitcoinconsensus.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/libbitcoinconsensus.pc.in?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -3,7 +3,7 @@ exec_prefix=@exec_prefix@\n libdir=@libdir@\n includedir=@includedir@\n \n-Name: Bitcoin Core consensus library\n+Name: @PACKAGE_NAME@ consensus library\n Description: Library for the Bitcoin consensus protocol.\n Version: @PACKAGE_VERSION@\n Libs: -L${libdir} -lbitcoinconsensus"
      },
      {
        "sha": "bd61282fa18e49a2530cd2ba89db137f713bee21",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "added",
        "additions": 387,
        "deletions": 0,
        "changes": 387,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -0,0 +1,387 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test BIP68 implementation (mempool only)\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+\n+COIN = 100000000\n+SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n+SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n+SEQUENCE_LOCKTIME_GRANULARITY = 9 # this is a bit-shift\n+SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n+\n+# RPC error for non-BIP68 final transactions\n+NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+\n+class BIP68Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\"]))\n+        self.is_network_split = False\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+\n+    def run_test(self):\n+        # Generate some coins\n+        self.nodes[0].generate(110)\n+\n+        print \"Running test disable flag\"\n+        self.test_disable_flag()\n+\n+        print \"Running test sequence-lock-confirmed-inputs\"\n+        self.test_sequence_lock_confirmed_inputs()\n+\n+        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        self.test_sequence_lock_unconfirmed_inputs()\n+\n+        # This test needs to change when BIP68 becomes consensus\n+        print \"Running test BIP68 not consensus\"\n+        self.test_bip68_not_consensus()\n+\n+        print \"Passed\\n\"\n+\n+    # Test that BIP68 is not in effect if tx version is 1, or if\n+    # the first sequence bit is set.\n+    def test_disable_flag(self):\n+        # Create some unconfirmed inputs\n+        new_addr = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(new_addr, 2) # send 2 BTC\n+\n+        utxos = self.nodes[0].listunspent(0, 0)\n+        assert(len(utxos) > 0)\n+\n+        utxo = utxos[0]\n+\n+        tx1 = CTransaction()\n+        value = satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN\n+\n+        # Check that the disable flag disables relative locktime.\n+        # If sequence locks were used, this would require 1 block for the\n+        # input to mature.\n+        sequence_value = SEQUENCE_LOCKTIME_DISABLE_FLAG | 1\n+        tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n+        tx1.vout = [CTxOut(value, CScript([b'a']))]\n+\n+        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n+        tx1_id = int(tx1_id, 16)\n+\n+        # This transaction will enable sequence-locks, so this transaction should\n+        # fail\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        sequence_value = sequence_value & 0x7fffffff\n+        tx2.vin = [CTxIn(COutPoint(tx1_id, 0), nSequence=sequence_value)]\n+        tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n+        tx2.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Setting the version back down to 1 should disable the sequence lock,\n+        # so this should be accepted.\n+        tx2.nVersion = 1\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+\n+    # Calculate the median time past of a prior block (\"confirmations\" before\n+    # the current tip).\n+    def get_median_time_past(self, confirmations):\n+        block_hash = self.nodes[0].getblockhash(self.nodes[0].getblockcount()-confirmations)\n+        return self.nodes[0].getblockheader(block_hash)[\"mediantime\"]\n+\n+    # Test that sequence locks are respected for transactions spending confirmed inputs.\n+    def test_sequence_lock_confirmed_inputs(self):\n+        # Create lots of confirmed utxos, and use them to generate lots of random\n+        # transactions.\n+        max_outputs = 50\n+        addresses = []\n+        while len(addresses) < max_outputs:\n+            addresses.append(self.nodes[0].getnewaddress())\n+        while len(self.nodes[0].listunspent()) < 200:\n+            import random\n+            random.shuffle(addresses)\n+            num_outputs = random.randint(1, max_outputs)\n+            outputs = {}\n+            for i in xrange(num_outputs):\n+                outputs[addresses[i]] = random.randint(1, 20)*0.01\n+            self.nodes[0].sendmany(\"\", outputs)\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+\n+        # Try creating a lot of random transactions.\n+        # Each time, choose a random number of inputs, and randomly set\n+        # some of those inputs to be sequence locked (and randomly choose\n+        # between height/time locking). Small random chance of making the locks\n+        # all pass.\n+        for i in xrange(400):\n+            # Randomly choose up to 10 inputs\n+            num_inputs = random.randint(1, 10)\n+            random.shuffle(utxos)\n+\n+            # Track whether any sequence locks used should fail\n+            should_pass = True\n+            \n+            # Track whether this transaction was built with sequence locks\n+            using_sequence_locks = False\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            value = 0\n+            for j in xrange(num_inputs):\n+                sequence_value = 0xfffffffe # this disables sequence locks\n+\n+                # 50% chance we enable sequence locks\n+                if random.randint(0,1):\n+                    using_sequence_locks = True\n+\n+                    # 10% of the time, make the input sequence value pass\n+                    input_will_pass = (random.randint(1,10) == 1)\n+                    sequence_value = utxos[j][\"confirmations\"]\n+                    if not input_will_pass:\n+                        sequence_value += 1\n+                        should_pass = False\n+\n+                    # Figure out what the median-time-past was for the confirmed input\n+                    # Note that if an input has N confirmations, we're going back N blocks\n+                    # from the tip so that we're looking up MTP of the block\n+                    # PRIOR to the one the input appears in, as per the BIP68 spec.\n+                    orig_time = self.get_median_time_past(utxos[j][\"confirmations\"])\n+                    cur_time = self.get_median_time_past(0) # MTP of the tip\n+\n+                    # can only timelock this input if it's not too old -- otherwise use height\n+                    can_time_lock = True\n+                    if ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY) >= SEQUENCE_LOCKTIME_MASK:\n+                        can_time_lock = False\n+\n+                    # if time-lockable, then 50% chance we make this a time lock\n+                    if random.randint(0,1) and can_time_lock:\n+                        # Find first time-lock value that fails, or latest one that succeeds\n+                        time_delta = sequence_value << SEQUENCE_LOCKTIME_GRANULARITY\n+                        if input_will_pass and time_delta > cur_time - orig_time:\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)\n+                        elif (not input_will_pass and time_delta <= cur_time - orig_time):\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)+1\n+                        sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+                tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n+                value += utxos[j][\"amount\"]*COIN\n+            # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n+            tx_size = len(ToHex(tx))/2 + 120*num_inputs + 50\n+            tx.vout.append(CTxOut(value-self.relayfee*tx_size*COIN/1000, CScript([b'a'])))\n+            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+\n+            try:\n+                self.nodes[0].sendrawtransaction(rawtx)\n+            except JSONRPCException as exp:\n+                assert(not should_pass and using_sequence_locks)\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+            else:\n+                assert(should_pass or not using_sequence_locks)\n+                # Recalculate utxos if we successfully sent the transaction\n+                utxos = self.nodes[0].listunspent()\n+\n+    # Test that sequence locks on unconfirmed inputs must have nSequence\n+    # height or time of 0 to be accepted.\n+    # Then test that BIP68-invalid transactions are removed from the mempool\n+    # after a reorg.\n+    def test_sequence_lock_unconfirmed_inputs(self):\n+        # Store height so we can easily reset the chain at the end of the test\n+        cur_height = self.nodes[0].getblockcount()\n+\n+        # Create a mempool tx.\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Anyone-can-spend mempool tx.\n+        # Sequence lock of 0 should pass.\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(tx2_raw)\n+\n+        # Create a spend of the 0th output of orig_tx with a sequence lock\n+        # of 1, and test what happens when submitting.\n+        # orig_tx.vout[0] must be an anyone-can-spend output\n+        def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n+            sequence_value = 1\n+            if not use_height_lock:\n+                sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            tx.vin = [CTxIn(COutPoint(orig_tx.sha256, 0), nSequence=sequence_value)]\n+            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee*COIN), CScript([b'a']))]\n+            tx.rehash()\n+\n+            try:\n+                node.sendrawtransaction(ToHex(tx))\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+                assert(orig_tx.hash in node.getrawmempool())\n+            else:\n+                # orig_tx must not be in mempool\n+                assert(orig_tx.hash not in node.getrawmempool())\n+            return tx\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Now mine some blocks, but make sure tx2 doesn't get mined.\n+        # Use prioritisetransaction to lower the effective feerate to 0\n+        self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n+        cur_time = int(time.time())\n+        for i in xrange(10):\n+            self.nodes[0].setmocktime(cur_time + 600)\n+            self.nodes[0].generate(1)\n+            cur_time += 600\n+\n+        assert(tx2.hash in self.nodes[0].getrawmempool())\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Mine tx2, and then try again\n+        self.nodes[0].prioritisetransaction(tx2.hash, 1e15, int(self.relayfee*COIN))\n+\n+        # Advance the time on the node so that we can test timelocks\n+        self.nodes[0].setmocktime(cur_time+600)\n+        self.nodes[0].generate(1)\n+        assert(tx2.hash not in self.nodes[0].getrawmempool())\n+\n+        # Now that tx2 is not in the mempool, a sequence locked spend should\n+        # succeed\n+        tx3 = test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        self.nodes[0].generate(1)\n+        assert(tx3.hash not in self.nodes[0].getrawmempool())\n+\n+        # One more test, this time using height locks\n+        tx4 = test_nonzero_locks(tx3, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx4.hash in self.nodes[0].getrawmempool())\n+\n+        # Now try combining confirmed and unconfirmed inputs\n+        tx5 = test_nonzero_locks(tx4, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx5.hash not in self.nodes[0].getrawmempool())\n+\n+        utxos = self.nodes[0].listunspent()\n+        tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n+        tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n+        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(raw_tx5)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Test mempool-BIP68 consistency after reorg\n+        #\n+        # State of the transactions in the last blocks:\n+        # ... -> [ tx2 ] ->  [ tx3 ]\n+        #         tip-1        tip\n+        # And currently tx4 is in the mempool.\n+        #\n+        # If we invalidate the tip, tx3 should get added to the mempool, causing\n+        # tx4 to be removed (fails sequence-lock).\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        assert(tx4.hash not in self.nodes[0].getrawmempool())\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        # Now mine 2 empty blocks to reorg out the current tip (labeled tip-1 in\n+        # diagram above).\n+        # This would cause tx2 to be added back to the mempool, which in turn causes\n+        # tx3 to be removed.\n+        tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n+        height = self.nodes[0].getblockcount()\n+        for i in xrange(2):\n+            block = create_block(tip, create_coinbase(height), cur_time)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            tip = block.sha256\n+            height += 1\n+            self.nodes[0].submitblock(ToHex(block))\n+            cur_time += 1\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(tx3.hash not in mempool)\n+        assert(tx2.hash in mempool)\n+\n+        # Reset the chain and get rid of the mocktimed-blocks\n+        self.nodes[0].setmocktime(0)\n+        self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n+        self.nodes[0].generate(10)\n+\n+    # Make sure that BIP68 isn't being used to validate blocks.\n+    def test_bip68_not_consensus(self):\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Make an anyone-can-spend transaction\n+        tx2 = CTransaction()\n+        tx2.nVersion = 1\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+\n+        # sign tx2\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        \n+        # Now make an invalid spend of tx2 according to BIP68\n+        sequence_value = 100 # 100 block relative locktime\n+\n+        tx3 = CTransaction()\n+        tx3.nVersion = 2\n+        tx3.vin = [CTxIn(COutPoint(tx2.sha256, 0), nSequence=sequence_value)]\n+        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx3.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx3))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # make a block that violates bip68; ensure that the tip updates\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        block = create_block(tip, create_coinbase(self.nodes[0].getblockcount()+1))\n+        block.nVersion = 3\n+        block.vtx.extend([tx1, tx2, tx3])\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.nodes[0].submitblock(ToHex(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+\n+if __name__ == '__main__':\n+    BIP68Test().main()"
      },
      {
        "sha": "81bb439ceaa75ba0676759902952323033ca586f",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -231,6 +231,14 @@ def ser_int_vector(l):\n         r += struct.pack(\"<i\", i)\n     return r\n \n+# Deserialize from a hex string representation (eg from RPC)\n+def FromHex(obj, hex_string):\n+    obj.deserialize(cStringIO.StringIO(binascii.unhexlify(hex_string)))\n+    return obj\n+\n+# Convert a binary-serializable object to hex (eg for submission via RPC)\n+def ToHex(obj):\n+    return binascii.hexlify(obj.serialize()).decode('utf-8')\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n@@ -536,7 +544,7 @@ def is_valid(self):\n         return True\n \n     def solve(self):\n-        self.calc_sha256()\n+        self.rehash()\n         target = uint256_from_compact(self.nBits)\n         while self.sha256 > target:\n             self.nNonce += 1"
      },
      {
        "sha": "6a34d64cd5323de433a9274e559fb3cb52090e0b",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -17,7 +17,7 @@\n   <string>APPL</string>\n \n   <key>CFBundleGetInfoString</key>\n-  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ The Bitcoin Core developers</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n \n   <key>CFBundleShortVersionString</key>\n   <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@</string>"
      },
      {
        "sha": "2a6e4b930cb2086b2ad7446244894a4fd8575bfc",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -70,6 +70,10 @@ def parse_po(text):\n #endif\n \"\"\")\n f.write('static const char UNUSED *bitcoin_strings[] = {\\n')\n+f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s\"),\\n' % (os.getenv('PACKAGE_NAME'),))\n+f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s\"),\\n' % (os.getenv('COPYRIGHT_HOLDERS'),))\n+if os.getenv('COPYRIGHT_HOLDERS_SUBSTITUTION') != os.getenv('PACKAGE_NAME'):\n+    f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s\"),\\n' % (os.getenv('COPYRIGHT_HOLDERS_SUBSTITUTION'),))\n messages.sort(key=operator.itemgetter(0))\n for (msgid, msgstr) in messages:\n     if msgid != EMPTY:"
      },
      {
        "sha": "e553a5ae882750cd99bc55e512ac0bf9831c7b68",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -6,8 +6,8 @@ SetCompressor /SOLID lzma\n # General Symbol Definitions\n !define REGKEY \"SOFTWARE\\$(^Name)\"\n !define VERSION @CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@\n-!define COMPANY \"Bitcoin Core project\"\n-!define URL https://bitcoincore.org/\n+!define COMPANY \"@PACKAGE_NAME@ project\"\n+!define URL @PACKAGE_URL@\n \n # MUI Symbol Definitions\n !define MUI_ICON \"@abs_top_srcdir@/share/pixmaps/bitcoin.ico\"\n@@ -59,7 +59,7 @@ XPStyle on\n BrandingText \" \"\n ShowInstDetails show\n VIProductVersion ${VERSION}.@CLIENT_VERSION_BUILD@\n-VIAddVersionKey ProductName \"Bitcoin Core\"\n+VIAddVersionKey ProductName \"@PACKAGE_NAME@\"\n VIAddVersionKey ProductVersion \"${VERSION}\"\n VIAddVersionKey CompanyName \"${COMPANY}\"\n VIAddVersionKey CompanyWebsite \"${URL}\""
      },
      {
        "sha": "c4f7188971138164f6f47ab1285c32406ffa40d4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -4,6 +4,15 @@ AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n \n+if EMBEDDED_UNIVALUE\n+LIBUNIVALUE = univalue/libunivalue.la\n+\n+$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+else\n+LIBUNIVALUE = $(UNIVALUE_LIBS)\n+endif\n+\n if EMBEDDED_LEVELDB\n LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/helpers/memenv\n@@ -23,7 +32,7 @@ BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n-BITCOIN_INCLUDES += -I$(srcdir)/univalue/include\n+BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n@@ -34,13 +43,9 @@ LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n-LIBUNIVALUE=univalue/libunivalue.la\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n-  \n-$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n@@ -451,7 +456,8 @@ clean-local:\n \n .rc.o:\n \t@test -f $(WINDRES)\n-\t$(AM_V_GEN) $(WINDRES) -DWINDRES_PREPROC -i $< -o $@\n+\t## FIXME: How to get the appropriate modulename_CPPFLAGS in here?\n+\t$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@\n \n .mm.o:\n \t$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\"
      },
      {
        "sha": "8e7b59b46177d266f842c3b15d59acdd3f65db85",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -14,13 +14,13 @@ bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV) \\\n-  $(LIBSECP256K1)\n+  $(LIBSECP256K1) \\\n+  $(LIBUNIVALUE)\n \n if ENABLE_ZMQ\n bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)"
      },
      {
        "sha": "ca4e1e70d085eb09ab21bbdb036cca1f9f9b107f",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -391,7 +391,7 @@ SECONDARY: $(QT_QM)\n \n qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wallet_a_SOURCES)\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n-\t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) ../share/qt/extract_strings_qt.py $^\n+\t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" ../share/qt/extract_strings_qt.py $^\n \n translate: qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\""
      },
      {
        "sha": "6ef6a69a2c8c0e624ef3899ddf42227ed394e612",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -44,7 +44,6 @@ BITCOIN_TESTS =\\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/bloom_tests.cpp \\\n-  test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n@@ -129,7 +128,9 @@ check-local:\n \t@echo \"Running test/bitcoin-util-test.py...\"\n \t$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n+if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check\n+endif\n \n %.json.h: %.json\n \t@$(MKDIR_P) $(@D)"
      },
      {
        "sha": "58f8f1e8a23f956ced390a835192c214142958be",
        "filename": "src/bitcoin-cli-res.rc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoin-cli-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoin-cli-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli-res.rc?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -17,7 +17,7 @@ BEGIN\n         BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n         BEGIN\n             VALUE \"CompanyName\",        \"Bitcoin\"\n-            VALUE \"FileDescription\",    \"bitcoin-cli (JSON-RPC client for Bitcoin Core)\"\n+            VALUE \"FileDescription\",    \"bitcoin-cli (JSON-RPC client for \" PACKAGE_NAME \")\"\n             VALUE \"FileVersion\",        VER_FILEVERSION_STR\n             VALUE \"InternalName\",       \"bitcoin-cli\"\n             VALUE \"LegalCopyright\",     COPYRIGHT_STR"
      },
      {
        "sha": "34980d9ca19797b690dfca6429cd9dc97e474ca3",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -3,6 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n #include \"rpc/client.h\"\n@@ -69,10 +73,10 @@ static bool AppInitRPC(int argc, char* argv[])\n     //\n     ParseParameters(argc, argv);\n     if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\")) {\n-        std::string strUsage = _(\"Bitcoin Core RPC client version\") + \" \" + FormatFullVersion() + \"\\n\";\n+        std::string strUsage = strprintf(_(\"%s RPC client version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\";\n         if (!mapArgs.count(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n-                  \"  bitcoin-cli [options] <command> [params]  \" + _(\"Send command to Bitcoin Core\") + \"\\n\" +\n+                  \"  bitcoin-cli [options] <command> [params]  \" + strprintf(_(\"Send command to %s\"), _(PACKAGE_NAME)) + \"\\n\" +\n                   \"  bitcoin-cli [options] help                \" + _(\"List commands\") + \"\\n\" +\n                   \"  bitcoin-cli [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n "
      },
      {
        "sha": "95d7a085a0a3d4f7fde4744b544c8065e1d8a4af",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"base58.h\"\n #include \"clientversion.h\"\n #include \"coins.h\"\n@@ -47,7 +51,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n     if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\"))\n     {\n         // First part of help message is specific to this utility\n-        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+        std::string strUsage = strprintf(_(\"%s bitcoin-tx utility version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n             _(\"Usage:\") + \"\\n\" +\n               \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n               \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +"
      },
      {
        "sha": "28bc374acc76e09fd8024684fa9ad54864987c48",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -3,6 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"rpc/server.h\"\n@@ -12,6 +16,7 @@\n #include \"util.h\"\n #include \"httpserver.h\"\n #include \"httprpc.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n@@ -73,16 +78,16 @@ bool AppInit(int argc, char* argv[])\n     // Process help and version before taking care about datadir\n     if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") ||  mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n-        std::string strUsage = _(\"Bitcoin Core Daemon\") + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n+        std::string strUsage = strprintf(_(\"%s Daemon\"), _(PACKAGE_NAME)) + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n \n         if (mapArgs.count(\"-version\"))\n         {\n-            strUsage += LicenseInfo();\n+            strUsage += FormatParagraph(LicenseInfo());\n         }\n         else\n         {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n-                  \"  bitcoind [options]                     \" + _(\"Start Bitcoin Core Daemon\") + \"\\n\";\n+                  \"  bitcoind [options]                     \" + strprintf(_(\"Start %s Daemon\"), _(PACKAGE_NAME)) + \"\\n\";\n \n             strUsage += \"\\n\" + HelpMessage(HMM_BITCOIND);\n         }"
      },
      {
        "sha": "6f255d69c96efff62f1bb686ff458e0a4a0dfe2f",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -38,7 +38,7 @@\n #define DO_STRINGIZE(X) #X\n \n //! Copyright string used in Windows .rc files\n-#define COPYRIGHT_STR \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin Core Developers\"\n+#define COPYRIGHT_STR \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" \" COPYRIGHT_HOLDERS_FINAL\n \n /**\n  * bitcoind-res.rc includes this file, but it cannot cope with real c++ code."
      },
      {
        "sha": "ad9cc26175351eb3db101e92e3924c93fc71dfc0",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -13,8 +13,11 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for LockTime() */\n+/** Flags for nSequence and nLockTime locks */\n enum {\n+    /* Interpret sequence numbers as relative lock-time constraints. */\n+    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n+\n     /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n     LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n };"
      },
      {
        "sha": "a447a3eff8061412b85ed23d168b78250a2c118b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -21,6 +21,9 @@\n #include <boost/algorithm/string.hpp> // boost::trim\n #include <boost/foreach.hpp> //BOOST_FOREACH\n \n+/** WWW-Authenticate to present with 401 Unauthorized response */\n+static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n+\n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n  * re-lock the wellet.\n  */\n@@ -151,6 +154,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n     // Check authorization\n     std::pair<bool, std::string> authHeader = req->GetHeader(\"authorization\");\n     if (!authHeader.first) {\n+        req->WriteHeader(\"WWW-Authenticate\", WWW_AUTH_HEADER_DATA);\n         req->WriteReply(HTTP_UNAUTHORIZED);\n         return false;\n     }\n@@ -163,6 +167,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n            shouldn't have their RPC port exposed. */\n         MilliSleep(250);\n \n+        req->WriteHeader(\"WWW-Authenticate\", WWW_AUTH_HEADER_DATA);\n         req->WriteReply(HTTP_UNAUTHORIZED);\n         return false;\n     }"
      },
      {
        "sha": "95235def59140b85078b074c92b6be17fa75f87c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -33,7 +33,6 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/db.h\"\n@@ -521,13 +520,13 @@ std::string HelpMessage(HelpMessageMode mode)\n std::string LicenseInfo()\n {\n     // todo: remove urls from translations on next change\n-    return FormatParagraph(strprintf(_(\"Copyright (C) 2009-%i The Bitcoin Core Developers\"), COPYRIGHT_YEAR)) + \"\\n\" +\n+    return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\"), 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n            \"\\n\" +\n-           FormatParagraph(_(\"This is experimental software.\")) + \"\\n\" +\n+           _(\"This is experimental software.\") + \"\\n\" +\n            \"\\n\" +\n-           FormatParagraph(_(\"Distributed under the MIT software license, see the accompanying file COPYING or <http://www.opensource.org/licenses/mit-license.php>.\")) + \"\\n\" +\n+           _(\"Distributed under the MIT software license, see the accompanying file COPYING or <http://www.opensource.org/licenses/mit-license.php>.\") + \"\\n\" +\n            \"\\n\" +\n-           FormatParagraph(_(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\")) +\n+           _(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\") +\n            \"\\n\";\n }\n \n@@ -1060,7 +1059,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Sanity check\n     if (!InitSanityCheck())\n-        return InitError(_(\"Initialization sanity check failed. Bitcoin Core is shutting down.\"));\n+        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n \n     std::string strDataDir = GetDataDir().string();\n #ifdef ENABLE_WALLET\n@@ -1076,9 +1075,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     try {\n         static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n         if (!lock.try_lock())\n-            return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.\"), strDataDir));\n+            return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), strDataDir, _(PACKAGE_NAME)));\n     } catch(const boost::interprocess::interprocess_exception& e) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.\") + \" %s.\", strDataDir, e.what()));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\") + \" %s.\", strDataDir, _(PACKAGE_NAME), e.what()));\n     }\n \n #ifndef WIN32\n@@ -1092,8 +1091,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n #if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n-#else\n+#elif defined OPENSSL_VERSION\n     LogPrintf(\"Using OpenSSL version %s\\n\", OpenSSL_version(OPENSSL_VERSION));\n+#elif defined LIBRESSL_VERSION_TEXT\n+    LogPrintf(\"Using %s\\n\", LIBRESSL_VERSION_TEXT);\n #endif\n \n #ifdef ENABLE_WALLET\n@@ -1491,10 +1492,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                              \" or address book entries might be missing or incorrect.\"));\n             }\n             else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n+                strErrors << strprintf(_(\"Error loading wallet.dat: Wallet requires newer version of %s\"), _(PACKAGE_NAME)) << \"\\n\";\n             else if (nLoadWalletRet == DB_NEED_REWRITE)\n             {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n+                strErrors << strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)) << \"\\n\";\n                 LogPrintf(\"%s\", strErrors.str());\n                 return InitError(strErrors.str());\n             }"
      },
      {
        "sha": "6398fdad9acd0814da8b5d78c6eb80da7829fa30",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 165,
        "deletions": 16,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -332,8 +332,10 @@ void FinalizeNode(NodeId nodeid) {\n         AddressCurrentlyConnected(state->address);\n     }\n \n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight)\n+    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n+        nQueuedValidatedHeaders -= entry.fValidatedHeaders;\n         mapBlocksInFlight.erase(entry.hash);\n+    }\n     EraseOrphansFor(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n \n@@ -670,9 +672,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;\n+    }\n     return true;\n }\n \n@@ -708,6 +711,128 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(mempool.cs);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // ConnectBlock(), the height of the block *being*\n+    // evaluated is what is used.\n+    // Thus if we want to know if a transaction can be part of the\n+    // *next* block, we need to use one more than chainActive.Height()\n+    index.nHeight = tip->nHeight + 1;\n+\n+    // pcoinsTip contains the UTXO set for chainActive.Tip()\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    std::vector<int> prevheights;\n+    prevheights.resize(tx.vin.size());\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+        CCoins coins;\n+        if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n+            return error(\"%s: Missing input\", __func__);\n+        }\n+        if (coins.nHeight == MEMPOOL_HEIGHT) {\n+            // Assume all mempool transaction confirm in the next block\n+            prevheights[txinIndex] = tip->nHeight + 1;\n+        } else {\n+            prevheights[txinIndex] = coins.nHeight;\n+        }\n+    }\n+\n+    std::pair<int, int64_t> lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n+    return EvaluateSequenceLocks(index, lockPair);\n+}\n+\n+\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n@@ -812,8 +937,8 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                              bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,\n+bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, bool fLimitFree,\n+                              bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n     const uint256 hash = tx.GetHash();\n@@ -929,6 +1054,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n+\n+        // Only accept BIP68 sequence locked transactions that can be mined in the next\n+        // block; we don't want our mempool filled up with transactions that can't\n+        // be mined yet.\n+        // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n+        // CoinsViewCache instead of create its own\n+        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n@@ -1002,10 +1135,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             dFreeCount += nSize;\n         }\n \n-        if (fRejectAbsurdFee && nFees > maxTxFee)\n+        if (nAbsurdFee && nFees > nAbsurdFee)\n             return state.Invalid(false,\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n-                strprintf(\"%d > %d\", nFees, maxTxFee));\n+                strprintf(\"%d > %d\", nFees, nAbsurdFee));\n \n         // Calculate in-mempool ancestors, up to a limit.\n         CTxMemPool::setEntries setAncestors;\n@@ -1214,16 +1347,16 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         }\n     }\n \n-    SyncWithWallets(tx, NULL);\n+    SyncWithWallets(tx, NULL, NULL);\n \n     return true;\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, fRejectAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -2050,6 +2183,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    std::vector<int> prevheights;\n+    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n@@ -2073,6 +2208,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            // Check that transaction is BIP68 final\n+            // BIP68 lock checks (as opposed to nLockTime checks) must\n+            // be in ConnectBlock because they require the UTXO set\n+            prevheights.resize(tx.vin.size());\n+            for (size_t j = 0; j < tx.vin.size(); j++) {\n+                prevheights[j] = view.AccessCoins(tx.vin[j].prevout.hash)->nHeight;\n+            }\n+\n+            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+                return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n+                                 REJECT_INVALID, \"bad-txns-nonfinal\");\n+            }\n+\n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;\n@@ -2260,7 +2408,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n             return AbortNode(state, \"Failed to write to coin database\");\n         nLastFlush = nNow;\n     }\n-    if ((mode == FLUSH_STATE_ALWAYS || mode == FLUSH_STATE_PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000) {\n+    if (fDoFullFlush || ((mode == FLUSH_STATE_ALWAYS || mode == FLUSH_STATE_PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000)) {\n         // Update best block in wallet (so we can detect restored wallets).\n         GetMainSignals().SetBestChain(chainActive.GetLocator());\n         nLastSetChain = nNow;\n@@ -2291,8 +2439,9 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n-    LogPrintf(\"%s: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%.1fMiB(%utx)\\n\", __func__,\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n+    LogPrintf(\"%s: new best=%s  height=%d bits=%d log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%.1fMiB(%utx)\\n\", __func__,\n+      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), chainActive.Tip()->nBits,\n+      log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n       Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip()), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n \n@@ -2366,7 +2515,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, NULL);\n+        SyncWithWallets(tx, pindexDelete->pprev, NULL);\n     }\n     return true;\n }\n@@ -2425,11 +2574,11 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx, NULL);\n+        SyncWithWallets(tx, pindexNew, NULL);\n     }\n     // ... and about transactions that got confirmed:\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n-        SyncWithWallets(tx, pblock);\n+        SyncWithWallets(tx, pindexNew, pblock);\n     }\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;"
      },
      {
        "sha": "b6f61ca991e502ce6bfde8eeac5317c5076c9469",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -281,7 +281,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n@@ -365,7 +365,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n-/** \n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n+ * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n+ */\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+/**\n+ * Check if transaction will be BIP 68 final in the next block to be created.\n+ *\n+ * Simulates calling SequenceLocks() with data from the tip of the current active chain.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n+ */\n+bool CheckSequenceLocks(const CTransaction &tx, int flags);\n+\n+/**\n  * Closure representing one script verification\n  * Note that this stores references to the spending transaction \n  */"
      },
      {
        "sha": "d9c4c117379c5639ff085687f2a951ec22c3e8f9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -1857,7 +1857,7 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to %s on this computer. Bitcoin Core is probably already running.\"), addrBind.ToString());\n+            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), _(PACKAGE_NAME));\n         else\n             strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n         LogPrintf(\"%s\\n\", strError);\n@@ -1943,8 +1943,10 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         CAddrDB adb;\n         if (adb.Read(addrman))\n             LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman.size(), GetTimeMillis() - nStart);\n-        else\n+        else {\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n+            DumpAddresses();\n+        }\n     }\n \n     uiInterface.InitMessage(_(\"Loading banlist...\"));\n@@ -1959,8 +1961,11 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n         LogPrint(\"net\", \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n             banmap.size(), GetTimeMillis() - nStart);\n-    } else\n+    } else {\n         LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+        CNode::SetBannedSetDirty(true); // force write\n+        DumpBanlist();\n+    }\n \n     fAddressesInitialized = true;\n "
      },
      {
        "sha": "833c9cf07cb0b799d17ef8c507bb72cc119e3cb3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -302,7 +302,7 @@ class CBanEntry\n     {\n         switch (banReason) {\n         case BanReasonNodeMisbehaving:\n-            return \"node misbehabing\";\n+            return \"node misbehaving\";\n         case BanReasonManuallyAdded:\n             return \"manually added\";\n         default:"
      },
      {
        "sha": "aabeebb25de5e0e52b5f7af30ee14f13c0151ec0",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -45,8 +45,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+/** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n+                                                           LOCKTIME_MEDIAN_TIME_PAST;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "058404f357b0b83c8e7d74532d9b185a9d0e3fb1",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -9,7 +9,6 @@\n #include \"chain.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n-#include \"util.h\"\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n@@ -57,7 +56,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n-    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < params.nPowTargetTimespan/4)\n         nActualTimespan = params.nPowTargetTimespan/4;\n     if (nActualTimespan > params.nPowTargetTimespan*4)\n@@ -75,12 +73,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     if (bnNew > bnPowLimit)\n         bnNew = bnPowLimit;\n \n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n-\n     return bnNew.GetCompact();\n }\n \n@@ -94,11 +86,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return error(\"CheckProofOfWork(): nBits below minimum work\");\n+        return false;\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n+        return false;\n \n     return true;\n }"
      },
      {
        "sha": "947f2e6a73bafb3110dc7e482974d0c80d374615",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -37,7 +37,7 @@ std::string CTxIn::ToString() const\n         str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n     else\n         str += strprintf(\", scriptSig=%s\", HexStr(scriptSig).substr(0, 24));\n-    if (nSequence != std::numeric_limits<unsigned int>::max())\n+    if (nSequence != SEQUENCE_FINAL)\n         str += strprintf(\", nSequence=%u\", nSequence);\n     str += \")\";\n     return str;"
      },
      {
        "sha": "07ae39e0b444fff301c85bf00b348ca8b7bb954b",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 30,
        "deletions": 8,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -61,13 +61,40 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+\n+    /* Below flags apply in the context of BIP 68*/\n+    /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n+     * relative lock-time. */\n+    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n+\n+    /* If CTxIn::nSequence encodes a relative lock-time and this flag\n+     * is set, the relative lock-time has units of 512 seconds,\n+     * otherwise it specifies blocks with a granularity of 1. */\n+    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n+\n+    /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n+     * applied to extract that lock-time from the sequence field. */\n+    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n+\n+    /* In order to use the same number of bits to encode roughly the\n+     * same wall-clock duration, and because blocks are naturally\n+     * limited to occur every 600s on average, the minimum granularity\n+     * for time-based relative lock-time is fixed at 512 seconds.\n+     * Converting from CTxIn::nSequence to seconds is performed by\n+     * multiplying by 512 = 2^9, or equivalently shifting up by\n+     * 9 bits. */\n+    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n+\n     CTxIn()\n     {\n-        nSequence = std::numeric_limits<unsigned int>::max();\n+        nSequence = SEQUENCE_FINAL;\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -78,11 +105,6 @@ class CTxIn\n         READWRITE(nSequence);\n     }\n \n-    bool IsFinal() const\n-    {\n-        return (nSequence == std::numeric_limits<uint32_t>::max());\n-    }\n-\n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n         return (a.prevout   == b.prevout &&"
      },
      {
        "sha": "415bffb9914573dc3ca1ab070cb09fcd893f1049",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"askpassphrasedialog.h\"\n #include \"ui_askpassphrasedialog.h\"\n \n@@ -119,9 +123,9 @@ void AskPassphraseDialog::accept()\n                 {\n                     QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n                                          \"<qt>\" +\n-                                         tr(\"Bitcoin Core will close now to finish the encryption process. \"\n+                                         tr(\"%1 will close now to finish the encryption process. \"\n                                          \"Remember that encrypting your wallet cannot fully protect \"\n-                                         \"your bitcoins from being stolen by malware infecting your computer.\") +\n+                                         \"your bitcoins from being stolen by malware infecting your computer.\").arg(tr(PACKAGE_NAME)) +\n                                          \"<br><br><b>\" +\n                                          tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n                                          \"should be replaced with the newly generated, encrypted wallet file. \""
      },
      {
        "sha": "9c21bb24cee289cd3a7deffa380a69200df4ee3a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -580,14 +580,14 @@ int main(int argc, char *argv[])\n     /// - Do not call GetDataDir(true) before this step finishes\n     if (!boost::filesystem::is_directory(GetDataDir(false)))\n     {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"),\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n         return 1;\n     }\n     try {\n         ReadConfigFile(mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"),\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n         return false;\n     }\n@@ -602,7 +602,7 @@ int main(int argc, char *argv[])\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: %1\").arg(e.what()));\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME), QObject::tr(\"Error: %1\").arg(e.what()));\n         return 1;\n     }\n #ifdef ENABLE_WALLET\n@@ -662,7 +662,7 @@ int main(int argc, char *argv[])\n         app.createWindow(networkStyle.data());\n         app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-        WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"Bitcoin Core didn't yet exit safely...\"), (HWND)app.getMainWinId());\n+        WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n         app.exec();\n         app.requestShutdown();"
      },
      {
        "sha": "b00cdfcaf2bdd047f1a338aebd61d988188bbd27",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"bitcoingui.h\"\n \n #include \"bitcoinunits.h\"\n@@ -115,7 +119,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n {\n     GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n \n-    QString windowTitle = tr(\"Bitcoin Core\") + \" - \";\n+    QString windowTitle = tr(PACKAGE_NAME) + \" - \";\n #ifdef ENABLE_WALLET\n     /* if compiled with wallet support, -disablewallet can still disable the wallet */\n     enableWallet = !GetBoolArg(\"-disablewallet\", false);\n@@ -313,14 +317,14 @@ void BitcoinGUI::createActions()\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n-    aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n+    aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About %1\").arg(tr(PACKAGE_NAME)), this);\n+    aboutAction->setStatusTip(tr(\"Show information about %1\").arg(tr(PACKAGE_NAME)));\n     aboutAction->setMenuRole(QAction::AboutRole);\n     aboutQtAction = new QAction(platformStyle->TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n     aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n     optionsAction = new QAction(platformStyle->TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n-    optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin Core\"));\n+    optionsAction->setStatusTip(tr(\"Modify configuration options for %1\").arg(tr(PACKAGE_NAME)));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n     toggleHideAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n@@ -350,7 +354,7 @@ void BitcoinGUI::createActions()\n \n     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n-    showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n+    showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n     connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n@@ -528,7 +532,7 @@ void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n {\n #ifndef Q_OS_MAC\n     trayIcon = new QSystemTrayIcon(this);\n-    QString toolTip = tr(\"Bitcoin Core client\") + \" \" + networkStyle->getTitleAddText();\n+    QString toolTip = tr(\"%1 client\").arg(tr(PACKAGE_NAME)) + \" \" + networkStyle->getTitleAddText();\n     trayIcon->setToolTip(toolTip);\n     trayIcon->setIcon(networkStyle->getTrayAndWindowIcon());\n     trayIcon->show();"
      },
      {
        "sha": "febbaeda1b84d2da7228f0ed3dea184199769306",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -415,7 +415,7 @@\n          <item>\n           <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n            <property name=\"toolTip\">\n-            <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n+            <string>Open the %1 debug log file from the current data directory. This can take a few seconds for large log files.</string>\n            </property>\n            <property name=\"text\">\n             <string>&amp;Open</string>"
      },
      {
        "sha": "b7f941f70b46cda07f7a60cf4e32c3f1dff822b7",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -10,9 +10,6 @@\n     <height>400</height>\n    </rect>\n   </property>\n-  <property name=\"windowTitle\">\n-   <string notr=\"true\">Bitcoin Core - Command-line options</string>\n-  </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n    <property name=\"spacing\">\n     <number>0</number>"
      },
      {
        "sha": "e4ff3da1abadb16bae6b0f50e4a61645875a09dc",
        "filename": "src/qt/forms/intro.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -15,12 +15,12 @@\n   </property>\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n    <item>\n-    <widget class=\"QLabel\" name=\"label_2\">\n+    <widget class=\"QLabel\" name=\"welcomeLabel\">\n      <property name=\"styleSheet\">\n       <string notr=\"true\">QLabel { font-style:italic; }</string>\n      </property>\n      <property name=\"text\">\n-      <string>Welcome to Bitcoin Core.</string>\n+      <string>Welcome to %1.</string>\n      </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n@@ -44,9 +44,9 @@\n     </spacer>\n    </item>\n    <item>\n-    <widget class=\"QLabel\" name=\"label_4\">\n+    <widget class=\"QLabel\" name=\"storageLabel\">\n      <property name=\"text\">\n-      <string>As this is the first time the program is launched, you can choose where Bitcoin Core will store its data.</string>\n+      <string>As this is the first time the program is launched, you can choose where %1 will store its data.</string>\n      </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n@@ -56,7 +56,7 @@\n    <item>\n     <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n      <property name=\"text\">\n-      <string>Bitcoin Core will download and store a copy of the Bitcoin block chain. At least %1GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</string>\n+      <string>%1 will download and store a copy of the Bitcoin block chain. At least %2GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</string>\n      </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>"
      },
      {
        "sha": "c712e6ea017936155bcd69516e6862ec34be01d6",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -30,10 +30,10 @@\n        <item>\n         <widget class=\"QCheckBox\" name=\"bitcoinAtStartup\">\n          <property name=\"toolTip\">\n-          <string>Automatically start Bitcoin Core after logging in to the system.</string>\n+          <string>Automatically start %1 after logging in to the system.</string>\n          </property>\n          <property name=\"text\">\n-          <string>&amp;Start Bitcoin Core on system login</string>\n+          <string>&amp;Start %1 on system login</string>\n          </property>\n         </widget>\n        </item>\n@@ -562,7 +562,7 @@\n          <item>\n           <widget class=\"QValueComboBox\" name=\"lang\">\n            <property name=\"toolTip\">\n-            <string>The user interface language can be set here. This setting will take effect after restarting Bitcoin Core.</string>\n+            <string>The user interface language can be set here. This setting will take effect after restarting %1.</string>\n            </property>\n           </widget>\n          </item>"
      },
      {
        "sha": "6d6af54290fd54a6231aaa6e3c92848d9685ee97",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"intro.h\"\n #include \"ui_intro.h\"\n \n@@ -118,11 +122,13 @@ Intro::Intro(QWidget *parent) :\n     signalled(false)\n {\n     ui->setupUi(this);\n+    ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(tr(PACKAGE_NAME)));\n+    ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n     if (pruneTarget)\n         requiredSpace = CHAIN_STATE_SIZE + std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n-    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(requiredSpace));\n+    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n     startThread();\n }\n \n@@ -191,7 +197,7 @@ void Intro::pickDataDirectory()\n                 TryCreateDirectory(GUIUtil::qstringToBoostPath(dataDir));\n                 break;\n             } catch (const fs::filesystem_error&) {\n-                QMessageBox::critical(0, tr(\"Bitcoin Core\"),\n+                QMessageBox::critical(0, tr(PACKAGE_NAME),\n                     tr(\"Error: Specified data directory \\\"%1\\\" cannot be created.\").arg(dataDir));\n                 /* fall through, back to choosing screen */\n             }"
      },
      {
        "sha": "95a3fa8d21a4d8c005e139bc604f51a5e0290dd2",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -78,6 +78,11 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n     /* Display elements init */\n     QDir translations(\":translations\");\n+\n+    ui->bitcoinAtStartup->setToolTip(ui->bitcoinAtStartup->toolTip().arg(tr(PACKAGE_NAME)));\n+    ui->bitcoinAtStartup->setText(ui->bitcoinAtStartup->text().arg(tr(PACKAGE_NAME)));\n+\n+    ui->lang->setToolTip(ui->lang->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n     Q_FOREACH(const QString &langStr, translations.entryList())\n     {"
      },
      {
        "sha": "19c3d5d97d6568362325748a8b66fd4783502e24",
        "filename": "src/qt/res/bitcoin-qt-res.rc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/res/bitcoin-qt-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/res/bitcoin-qt-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/bitcoin-qt-res.rc?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -19,13 +19,13 @@ BEGIN\n         BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n         BEGIN\n             VALUE \"CompanyName\",        \"Bitcoin\"\n-            VALUE \"FileDescription\",    \"Bitcoin Core (GUI node for Bitcoin)\"\n+            VALUE \"FileDescription\",    PACKAGE_NAME \" (GUI node for Bitcoin)\"\n             VALUE \"FileVersion\",        VER_FILEVERSION_STR\n             VALUE \"InternalName\",       \"bitcoin-qt\"\n             VALUE \"LegalCopyright\",     COPYRIGHT_STR\n             VALUE \"LegalTrademarks1\",   \"Distributed under the MIT software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n             VALUE \"OriginalFilename\",   \"bitcoin-qt.exe\"\n-            VALUE \"ProductName\",        \"Bitcoin Core\"\n+            VALUE \"ProductName\",        PACKAGE_NAME\n             VALUE \"ProductVersion\",     VER_PRODUCTVERSION_STR\n         END\n     END"
      },
      {
        "sha": "c18c405256ef18c056456dce6bcfd9866b18d3ab",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"rpcconsole.h\"\n #include \"ui_debugwindow.h\"\n \n@@ -252,6 +256,8 @@ RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     ui->setupUi(this);\n     GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n \n+    ui->openDebugLogfileButton->setToolTip(ui->openDebugLogfileButton->toolTip().arg(tr(PACKAGE_NAME)));\n+\n     if (platformStyle->getImagesOnButtons()) {\n         ui->openDebugLogfileButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n     }\n@@ -527,7 +533,7 @@ void RPCConsole::clear()\n             ).arg(fixedFontInfo.family(), QString(\"%1pt\").arg(consoleFontSize))\n         );\n \n-    message(CMD_REPLY, (tr(\"Welcome to the Bitcoin Core RPC console.\") + \"<br>\" +\n+    message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and <b>Ctrl-L</b> to clear screen.\") + \"<br>\" +\n                         tr(\"Type <b>help</b> for an overview of available commands.\")), true);\n }"
      },
      {
        "sha": "b46321fa866f13c0cd4f25a8244b96aad2ea019b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"splashscreen.h\"\n \n #include \"networkstyle.h\"\n@@ -38,9 +42,9 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n #endif\n \n     // define text to place\n-    QString titleText       = tr(\"Bitcoin Core\");\n+    QString titleText       = tr(PACKAGE_NAME);\n     QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion()));\n-    QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n+    QString copyrightText   = QString::fromUtf8(CopyrightHolders(strprintf(\"\\xc2\\xA9 %u-%u \", 2009, COPYRIGHT_YEAR)).c_str());\n     QString titleAddText    = networkStyle->getTitleAddText();\n \n     QString font            = QApplication::font().toString();\n@@ -75,10 +79,9 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     // check font size and drawing with\n     pixPaint.setFont(QFont(font, 33*fontFactor));\n     QFontMetrics fm = pixPaint.fontMetrics();\n-    int titleTextWidth  = fm.width(titleText);\n-    if(titleTextWidth > 160) {\n-        // strange font rendering, Arial probably not found\n-        fontFactor = 0.75;\n+    int titleTextWidth = fm.width(titleText);\n+    if (titleTextWidth > 176) {\n+        fontFactor = fontFactor * 176 / titleTextWidth;\n     }\n \n     pixPaint.setFont(QFont(font, 33*fontFactor));\n@@ -98,8 +101,13 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     pixPaint.drawText(pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n \n     // draw copyright stuff\n-    pixPaint.setFont(QFont(font, 10*fontFactor));\n-    pixPaint.drawText(pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n+    {\n+        pixPaint.setFont(QFont(font, 10*fontFactor));\n+        const int x = pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight;\n+        const int y = paddingTop+titleCopyrightVSpace;\n+        QRect copyrightRect(x, y, pixmap.width() - x - paddingRight, pixmap.height() - y);\n+        pixPaint.drawText(copyrightRect, Qt::AlignLeft | Qt::AlignTop | Qt::TextWordWrap, copyrightText);\n+    }\n \n     // draw additional text if special network\n     if(!titleAddText.isEmpty()) {"
      },
      {
        "sha": "947bcdb15ae17ece906659a4c4b9c0d16641718c",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"utilitydialog.h\"\n \n #include \"ui_helpmessagedialog.h\"\n@@ -33,7 +37,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n {\n     ui->setupUi(this);\n \n-    QString version = tr(\"Bitcoin Core\") + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n+    QString version = tr(PACKAGE_NAME) + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n      * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n      */\n@@ -45,7 +49,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n     if (about)\n     {\n-        setWindowTitle(tr(\"About Bitcoin Core\"));\n+        setWindowTitle(tr(\"About %1\").arg(tr(PACKAGE_NAME)));\n \n         /// HTML-format the license message from the core\n         QString licenseInfo = QString::fromStdString(LicenseInfo());\n@@ -55,7 +59,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         uri.setMinimal(true); // use non-greedy matching\n         licenseInfoHTML.replace(uri, \"<a href=\\\"\\\\1\\\">\\\\1</a>\");\n         // Replace newlines with HTML breaks\n-        licenseInfoHTML.replace(\"\\n\\n\", \"<br><br>\");\n+        licenseInfoHTML.replace(\"\\n\", \"<br>\");\n \n         ui->aboutMessage->setTextFormat(Qt::RichText);\n         ui->scrollArea->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);\n@@ -162,7 +166,7 @@ ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):\n {\n     QVBoxLayout *layout = new QVBoxLayout();\n     layout->addWidget(new QLabel(\n-        tr(\"Bitcoin Core is shutting down...\") + \"<br /><br />\" +\n+        tr(\"%1 is shutting down...\").arg(tr(PACKAGE_NAME)) + \"<br /><br />\" +\n         tr(\"Do not shut down the computer until this window disappears.\")));\n     setLayout(layout);\n }"
      },
      {
        "sha": "fec0987a4cab9554a422bb882eb406b8c8441a72",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -68,7 +68,7 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     arith_uint256 workDiff = pb->nChainWork - pb0->nChainWork;\n     int64_t timeDiff = maxTime - minTime;\n \n-    return (int64_t)(workDiff.getdouble() / timeDiff);\n+    return workDiff.getdouble() / timeDiff;\n }\n \n UniValue getnetworkhashps(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "de89fdeb0f144d4c1621fd8d18a7fa0250e6b6aa",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -810,9 +810,9 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n \n-    bool fOverrideFees = false;\n-    if (params.size() > 1)\n-        fOverrideFees = params[1].get_bool();\n+    CAmount nMaxRawTxFee = maxTxFee;\n+    if (params.size() > 1 && params[1].get_bool())\n+        nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;\n     const CCoins* existingCoins = view.AccessCoins(hashTx);\n@@ -822,7 +822,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, !fOverrideFees)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "901f901f01958d3c15096b3807807b213ae95002",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -165,7 +165,10 @@ bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n     std::vector<unsigned char> vchSigCopy(vchSig.begin(), vchSig.begin() + vchSig.size() - 1);\n-    return CPubKey::CheckLowS(vchSigCopy);\n+    if (!CPubKey::CheckLowS(vchSigCopy)) {\n+        return set_error(serror, SCRIPT_ERR_SIG_HIGH_S);\n+    }\n+    return true;\n }\n \n bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n@@ -1147,7 +1150,7 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (txTo->vin[nIn].IsFinal())\n+    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n     return true;"
      },
      {
        "sha": "c945a95adc4040c884044aa81aa7610b6798dc50",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a96babba3392328824137066c4572b62ed6461a/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a96babba3392328824137066c4572b62ed6461a/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=7a96babba3392328824137066c4572b62ed6461a",
        "patch": "@@ -1,66 +0,0 @@\n-// Copyright (c) 2013-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"clientversion.h\"\n-#include \"consensus/validation.h\"\n-#include \"main.h\" // For CheckBlock\n-#include \"primitives/block.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"utiltime.h\"\n-\n-#include <cstdio>\n-\n-#include <boost/filesystem/operations.hpp>\n-#include <boost/filesystem/path.hpp>\n-#include <boost/test/unit_test.hpp>\n-\n-\n-BOOST_FIXTURE_TEST_SUITE(CheckBlock_tests, BasicTestingSetup)\n-\n-bool read_block(const std::string& filename, CBlock& block)\n-{\n-    namespace fs = boost::filesystem;\n-    fs::path testFile = fs::current_path() / \"data\" / filename;\n-#ifdef TEST_DATA_DIR\n-    if (!fs::exists(testFile))\n-    {\n-        testFile = fs::path(BOOST_PP_STRINGIZE(TEST_DATA_DIR)) / filename;\n-    }\n-#endif\n-    FILE* fp = fopen(testFile.string().c_str(), \"rb\");\n-    if (!fp) return false;\n-\n-    fseek(fp, 8, SEEK_SET); // skip msgheader/size\n-\n-    CAutoFile filein(fp, SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull()) return false;\n-\n-    filein >> block;\n-\n-    return true;\n-}\n-\n-BOOST_AUTO_TEST_CASE(May15)\n-{\n-    // Putting a 1MB binary file in the git repository is not a great\n-    // idea, so this test is only run if you manually download\n-    // test/data/Mar12Fork.dat from\n-    // http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/Mar12Fork.dat/download\n-    unsigned int tMay15 = 1368576000;\n-    SetMockTime(tMay15); // Test as if it was right at May 15\n-\n-    CBlock forkingBlock;\n-    if (read_block(\"Mar12Fork.dat\", forkingBlock))\n-    {\n-        CValidationState state;\n-\n-        // After May 15'th, big blocks are OK:\n-        forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n-    }\n-\n-    SetMockTime(0);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "f3297e074de488bf0e7559591f86677f2ddf42b6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 31,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -57,6 +57,20 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n+CBlockIndex CreateBlockIndex(int nHeight)\n+{\n+    CBlockIndex index;\n+    index.nHeight = nHeight;\n+    index.pprev = chainActive.Tip();\n+    return index;\n+}\n+\n+bool TestSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    LOCK(mempool.cs);\n+    return CheckSequenceLocks(tx, flags);\n+}\n+\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n@@ -79,6 +93,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n+    int baseheight = 0;\n     std::vector<CTransaction*>txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n@@ -92,7 +107,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = CTransaction(txCoinbase);\n-        if (txFirst.size() < 2)\n+        if (txFirst.size() == 0)\n+            baseheight = chainActive.Height();\n+        if (txFirst.size() < 4)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n@@ -240,49 +257,96 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n+    // height map\n+    std::vector<int> prevheights;\n \n-    // height locked\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    // relative height locked\n+    tx.nVersion = 2;\n+    tx.vin.resize(1);\n+    prevheights.resize(1);\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n+    tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = 0;\n+    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    prevheights[0] = baseheight + 1;\n+    tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx.nLockTime = chainActive.Tip()->nHeight+1;\n+    tx.nLockTime = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n-\n-    // time locked\n-    tx2.vin.resize(1);\n-    tx2.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx2.vin[0].prevout.n = 0;\n-    tx2.vin[0].scriptSig = CScript() << OP_1;\n-    tx2.vin[0].nSequence = 0;\n-    tx2.vout.resize(1);\n-    tx2.vout[0].nValue = 4900000000LL;\n-    tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n-    hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+\n+    // relative time locked\n+    tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    prevheights[0] = baseheight + 2;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+\n+    // absolute height locked\n+    tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n+    prevheights[0] = baseheight + 3;\n+    tx.nLockTime = chainActive.Tip()->nHeight + 1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+\n+    // absolute time locked\n+    tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n+    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n+    prevheights.resize(1);\n+    prevheights[0] = baseheight + 4;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+\n+    // mempool-dependent transactions (not added)\n+    tx.vin[0].prevout.hash = hash;\n+    prevheights[0] = chainActive.Tip()->nHeight + 1;\n+    tx.nLockTime = 0;\n+    tx.vin[0].nSequence = 0;\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    tx.vin[0].nSequence = 1;\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG;\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n-    // Neither tx should have make it into the template.\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n+    // None of the of the absolute height/time locked tx should have made\n+    // it into the template because we still check IsFinalTx in CreateNewBlock,\n+    // but relative locked txs will if inconsistently added to mempool.\n+    // For now these will still generate a valid template until BIP68 soft fork\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n-\n-    // However if we advance height and time by one, both will.\n+    // However if we advance height by 1 and time by 512, all of them should be mined\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n-\n-    // FIXME: we should *actually* create a new block so the following test\n-    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.\n-    //BOOST_CHECK(CheckFinalTx(tx));\n-    //BOOST_CHECK(CheckFinalTx(tx2));\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      },
      {
        "sha": "f370a4aa2a7970211a056d97921209688fb9f0a8",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -63,7 +63,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     txCredit.vout.resize(1);\n     txCredit.vin[0].prevout.SetNull();\n     txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n-    txCredit.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txCredit.vout[0].scriptPubKey = scriptPubKey;\n     txCredit.vout[0].nValue = 0;\n \n@@ -80,7 +80,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txSpend.vout[0].scriptPubKey = CScript();\n     txSpend.vout[0].nValue = 0;\n "
      },
      {
        "sha": "c29e30792a2a97343a5b0aafb2407bf2e21f5265",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, false);\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, 0);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "01bc2032d0c0829220bcc0ff39898caaa0e6040b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -399,12 +399,27 @@ BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n {\n     BOOST_CHECK_EQUAL(FormatParagraph(\"\", 79, 0), \"\");\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test\", 79, 0), \"test\");\n-    BOOST_CHECK_EQUAL(FormatParagraph(\" test\", 79, 0), \"test\");\n+    BOOST_CHECK_EQUAL(FormatParagraph(\" test\", 79, 0), \" test\");\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 79, 0), \"test test\");\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 4, 0), \"test\\ntest\");\n-    BOOST_CHECK_EQUAL(FormatParagraph(\"testerde test \", 4, 0), \"testerde\\ntest\");\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"testerde test\", 4, 0), \"testerde\\ntest\");\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 4, 4), \"test\\n    test\");\n-    BOOST_CHECK_EQUAL(FormatParagraph(\"This is a very long test string. This is a second sentence in the very long test string.\"), \"This is a very long test string. This is a second sentence in the very long\\ntest string.\");\n+\n+    // Make sure we don't indent a fully-new line following a too-long line ending\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"test test\\nabc\", 4, 4), \"test\\n    test\\nabc\");\n+\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"This_is_a_very_long_test_string_without_any_spaces_so_it_should_just_get_returned_as_is_despite_the_length until it gets here\", 79), \"This_is_a_very_long_test_string_without_any_spaces_so_it_should_just_get_returned_as_is_despite_the_length\\nuntil it gets here\");\n+\n+    // Test wrap length is exact\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 a b c de f g h i j k l m n o p\", 79), \"a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 a b c de\\nf g h i j k l m n o p\");\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"x\\na b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 a b c de f g h i j k l m n o p\", 79), \"x\\na b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 a b c de\\nf g h i j k l m n o p\");\n+    // Indent should be included in length of lines\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"x\\na b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 a b c de f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 a b c d e fg h i j k\", 79, 4), \"x\\na b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 a b c de\\n    f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 a b c d e fg\\n    h i j k\");\n+\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"This is a very long test string. This is a second sentence in the very long test string.\", 79), \"This is a very long test string. This is a second sentence in the very long\\ntest string.\");\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"This is a very long test string.\\nThis is a second sentence in the very long test string. This is a third sentence in the very long test string.\", 79), \"This is a very long test string.\\nThis is a second sentence in the very long test string. This is a third\\nsentence in the very long test string.\");\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"This is a very long test string.\\n\\nThis is a second sentence in the very long test string. This is a third sentence in the very long test string.\", 79), \"This is a very long test string.\\n\\nThis is a second sentence in the very long test string. This is a third\\nsentence in the very long test string.\");\n+    BOOST_CHECK_EQUAL(FormatParagraph(\"Testing that normal newlines do not get indented.\\nLike here.\", 79), \"Testing that normal newlines do not get indented.\\nLike here.\");\n }\n \n BOOST_AUTO_TEST_CASE(test_FormatSubVersion)"
      },
      {
        "sha": "4d2f8d1e3b664f0df9364cbfd8aa3131176d2098",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n #include \"timedata.h\"\n \n #include \"netbase.h\"\n@@ -99,7 +103,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n                 if (!fMatch)\n                 {\n                     fDone = true;\n-                    string strMessage = _(\"Please check that your computer's date and time are correct! If your clock is wrong Bitcoin Core will not work properly.\");\n+                    string strMessage = strprintf(_(\"Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.\"), _(PACKAGE_NAME));\n                     strMiscWarning = strMessage;\n                     uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n                 }"
      },
      {
        "sha": "0b0f32e406ed89fd378e65c8c3b0ed280d608308",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -506,7 +506,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (!CheckFinalTx(tx, flags)) {\n+        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags)) {\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "492697e12fc216c6d5af0412678d6b30a9f6a09c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -836,3 +836,14 @@ int GetNumCores()\n #endif\n }\n \n+std::string CopyrightHolders(const std::string& strPrefix)\n+{\n+    std::string strCopyrightHolders = strPrefix + _(COPYRIGHT_HOLDERS);\n+    if (strCopyrightHolders.find(\"%s\") != strCopyrightHolders.npos) {\n+        strCopyrightHolders = strprintf(strCopyrightHolders, _(COPYRIGHT_HOLDERS_SUBSTITUTION));\n+    }\n+    if (strCopyrightHolders.find(\"Bitcoin Core developers\") == strCopyrightHolders.npos) {\n+        strCopyrightHolders += \"\\n\" + strPrefix + \"The Bitcoin Core developers\";\n+    }\n+    return strCopyrightHolders;\n+}"
      },
      {
        "sha": "9da8fdf87a106762ad58d68801836087e5a6c72c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -247,4 +247,6 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n     }\n }\n \n+std::string CopyrightHolders(const std::string& strPrefix);\n+\n #endif // BITCOIN_UTIL_H"
      },
      {
        "sha": "0f9334cbe37382c41d2eba271a512a126a2b9c90",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 25,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -478,34 +478,40 @@ bool ParseDouble(const std::string& str, double *out)\n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n {\n     std::stringstream out;\n-    size_t col = 0;\n     size_t ptr = 0;\n-    while(ptr < in.size())\n+    size_t indented = 0;\n+    while (ptr < in.size())\n     {\n-        // Find beginning of next word\n-        ptr = in.find_first_not_of(' ', ptr);\n-        if (ptr == std::string::npos)\n-            break;\n-        // Find end of next word\n-        size_t endword = in.find_first_of(' ', ptr);\n-        if (endword == std::string::npos)\n-            endword = in.size();\n-        // Add newline and indentation if this wraps over the allowed width\n-        if (col > 0)\n-        {\n-            if ((col + endword - ptr) > width)\n-            {\n-                out << '\\n';\n-                for(size_t i=0; i<indent; ++i)\n-                    out << ' ';\n-                col = 0;\n-            } else\n-                out << ' ';\n+        size_t lineend = in.find_first_of('\\n', ptr);\n+        if (lineend == std::string::npos) {\n+            lineend = in.size();\n+        }\n+        const size_t linelen = lineend - ptr;\n+        const size_t rem_width = width - indented;\n+        if (linelen <= rem_width) {\n+            out << in.substr(ptr, linelen + 1);\n+            ptr = lineend + 1;\n+            indented = 0;\n+        } else {\n+            size_t finalspace = in.find_last_of(\" \\n\", ptr + rem_width);\n+            if (finalspace == std::string::npos || finalspace < ptr) {\n+                // No place to break; just include the entire word and move on\n+                finalspace = in.find_first_of(\"\\n \", ptr);\n+                if (finalspace == std::string::npos) {\n+                    // End of the string, just add it and break\n+                    out << in.substr(ptr);\n+                    break;\n+                }\n+            }\n+            out << in.substr(ptr, finalspace - ptr) << \"\\n\";\n+            if (in[finalspace] == '\\n') {\n+                indented = 0;\n+            } else if (indent) {\n+                out << std::string(indent, ' ');\n+                indented = indent;\n+            }\n+            ptr = finalspace + 1;\n         }\n-        // Append word\n-        out << in.substr(ptr, endword - ptr);\n-        col += endword - ptr + 1;\n-        ptr = endword;\n     }\n     return out.str();\n }"
      },
      {
        "sha": "8da0c72858d854b003c420a9be5bff12b428ef87",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -14,7 +14,7 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -32,7 +32,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n }\n \n@@ -48,6 +48,6 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n \n-void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pblock);\n+void SyncWithWallets(const CTransaction &tx, const CBlockIndex *pindex, const CBlock *pblock) {\n+    g_signals.SyncTransaction(tx, pindex, pblock);\n }"
      },
      {
        "sha": "01b8e47650dc494e1398ba8eec0b8741672f7731",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -10,6 +10,7 @@\n #include <boost/shared_ptr.hpp>\n \n class CBlock;\n+class CBlockIndex;\n struct CBlockLocator;\n class CBlockIndex;\n class CReserveScript;\n@@ -27,12 +28,12 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n /** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n+void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock = NULL);\n \n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindex) {}\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {}\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, const CBlock *pblock) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -49,7 +50,7 @@ struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *)> UpdatedBlockTip;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, const CBlock *)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "34ad5a46f7f33adbab24061a712c13ba36f490d3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -1245,7 +1245,7 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n+            \"2. includeempty  (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n@@ -1283,7 +1283,7 @@ UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n             \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n+            \"2. includeempty (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\""
      },
      {
        "sha": "65defc30aaecb1e9eb2440c8a977df26b596d3be",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -846,14 +846,19 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    CBlockIndex* pindex;\n-    assert(mapBlockIndex.count(hashBlock));\n-    pindex = mapBlockIndex[hashBlock];\n     int conflictconfirms = 0;\n-    if (chainActive.Contains(pindex)) {\n-        conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n+    if (mapBlockIndex.count(hashBlock)) {\n+        CBlockIndex* pindex = mapBlockIndex[hashBlock];\n+        if (chainActive.Contains(pindex)) {\n+            conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n+        }\n     }\n-    assert(conflictconfirms < 0);\n+    // If number of conflict confirms cannot be determined, this means\n+    // that the block is still unknown or not yet part of the main chain,\n+    // for example when loading the wallet during a reindex. Do nothing in that\n+    // case.\n+    if (conflictconfirms >= 0)\n+        return;\n \n     // Do not flush the wallet here for performance reasons\n     CWalletDB walletdb(strWalletFile, \"r+\", false);\n@@ -896,7 +901,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);\n \n@@ -1251,7 +1256,7 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = *(item.second);\n \n         LOCK(mempool.cs);\n-        wtx.AcceptToMemoryPool(false);\n+        wtx.AcceptToMemoryPool(false, maxTxFee);\n     }\n }\n \n@@ -2268,7 +2273,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(false))\n+            if (!wtxNew.AcceptToMemoryPool(false, maxTxFee))\n             {\n                 // This must not fail. The transaction has already been signed and recorded.\n                 LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n@@ -3025,8 +3030,8 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, CAmount nAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, nAbsurdFee);\n }"
      },
      {
        "sha": "990b27c7ce665336dbe083adb144cb81673d7895",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -204,8 +204,8 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    /** Pass this transaction to the mempool. Fails if absolute fee exceeds maxTxFee. */\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n+    bool AcceptToMemoryPool(bool fLimitFree, const CAmount nAbsurdFee);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -718,7 +718,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n-    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      },
      {
        "sha": "c8adcf8462b73301950bd0ff1878354b636d70d5",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -142,7 +142,7 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction &tx, const CBlock *pblock)\n+void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, const CBlock* pblock)\n {\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {"
      },
      {
        "sha": "7b52e7775bc53ee5e0a1947aee0393ee7e31cd16",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77150a1af93a62cc516eb696e9b751220888cc62/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77150a1af93a62cc516eb696e9b751220888cc62/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=77150a1af93a62cc516eb696e9b751220888cc62",
        "patch": "@@ -24,7 +24,7 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void SyncTransaction(const CTransaction &tx, const CBlock *pblock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     void UpdatedBlockTip(const CBlockIndex *pindex);\n \n private:"
      }
    ]
  }
]