[
  {
    "sha": "ad9e86dca11dce023d827d342e966f3806c39d27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDllODZkY2ExMWRjZTAyM2Q4MjdkMzQyZTk2NmYzODA2YzM5ZDI3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-25T17:13:09Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-26T15:58:19Z"
      },
      "message": "Keep mempool consistent during block-reorgs\n\nThis fixes a subtle bug involving block re-orgs and non-standard transactions.\n\nStart with a block containing a non-standard transaction, and\none or more transactions spending it in the memory pool.\n\nThen re-org away from that block to another chain that does\nnot contain the non-standard transaction.\n\nResult before this fix: the dependent transactions get stuck\nin the mempool without their parent, putting the mempool\nin an inconsistent state.\n\nTested with a new unit test.",
      "tree": {
        "sha": "0d7d145efb3df126bc9efb408c81cd0f09430b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d7d145efb3df126bc9efb408c81cd0f09430b37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad9e86dca11dce023d827d342e966f3806c39d27",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlUULKAACgkQdYgkL74406iiNwCg0Pp8zOipaoLi2SY4c2xt5f1E\nxAwAoI4N/cOO98Q71Mc74dE5gMMhLmbL\n=Vqwz\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d7d145efb3df126bc9efb408c81cd0f09430b37\nparent cbb2cf5522983e4a952cfb25e577b1998a06c769\nauthor Gavin Andresen <gavinandresen@gmail.com> 1427303589 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1427385499 -0400\n\nKeep mempool consistent during block-reorgs\n\nThis fixes a subtle bug involving block re-orgs and non-standard transactions.\n\nStart with a block containing a non-standard transaction, and\none or more transactions spending it in the memory pool.\n\nThen re-org away from that block to another chain that does\nnot contain the non-standard transaction.\n\nResult before this fix: the dependent transactions get stuck\nin the mempool without their parent, putting the mempool\nin an inconsistent state.\n\nTested with a new unit test.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad9e86dca11dce023d827d342e966f3806c39d27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad9e86dca11dce023d827d342e966f3806c39d27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad9e86dca11dce023d827d342e966f3806c39d27/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb2cf5522983e4a952cfb25e577b1998a06c769"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 117,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52ff3f224fb7f9017c358a2a6cb84c00209eb714",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad9e86dca11dce023d827d342e966f3806c39d27/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad9e86dca11dce023d827d342e966f3806c39d27/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ad9e86dca11dce023d827d342e966f3806c39d27",
        "patch": "@@ -50,6 +50,7 @@ BITCOIN_TESTS =\\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n+  test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\"
      },
      {
        "sha": "0996e13c4850c5e088e0790c635e32f82f09d30e",
        "filename": "src/test/mempool_tests.cpp",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad9e86dca11dce023d827d342e966f3806c39d27/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad9e86dca11dce023d827d342e966f3806c39d27/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=ad9e86dca11dce023d827d342e966f3806c39d27",
        "patch": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"txmempool.h\"\n+#include \"util.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <list>\n+\n+BOOST_FIXTURE_TEST_SUITE(mempool_tests, TestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n+{\n+    // Test CTxMemPool::remove functionality\n+\n+    // Parent transaction with three children,\n+    // and three grand-children:\n+    CMutableTransaction txParent;\n+    txParent.vin.resize(1);\n+    txParent.vin[0].scriptSig = CScript() << OP_11;\n+    txParent.vout.resize(3);\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txParent.vout[i].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+        txParent.vout[i].nValue = 33000LL;\n+    }\n+    CMutableTransaction txChild[3];\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txChild[i].vin.resize(1);\n+        txChild[i].vin[0].scriptSig = CScript() << OP_11;\n+        txChild[i].vin[0].prevout.hash = txParent.GetHash();\n+        txChild[i].vin[0].prevout.n = i;\n+        txChild[i].vout.resize(1);\n+        txChild[i].vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+        txChild[i].vout[0].nValue = 11000LL;\n+    }\n+    CMutableTransaction txGrandChild[3];\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txGrandChild[i].vin.resize(1);\n+        txGrandChild[i].vin[0].scriptSig = CScript() << OP_11;\n+        txGrandChild[i].vin[0].prevout.hash = txChild[i].GetHash();\n+        txGrandChild[i].vin[0].prevout.n = 0;\n+        txGrandChild[i].vout.resize(1);\n+        txGrandChild[i].vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n+        txGrandChild[i].vout[0].nValue = 11000LL;\n+    }\n+\n+\n+    CTxMemPool testPool(CFeeRate(0));\n+    std::list<CTransaction> removed;\n+\n+    // Nothing in pool, remove should do nothing:\n+    testPool.remove(txParent, removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 0);\n+\n+    // Just the parent:\n+    testPool.addUnchecked(txParent.GetHash(), CTxMemPoolEntry(txParent, 0, 0, 0.0, 1));\n+    testPool.remove(txParent, removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 1);\n+    removed.clear();\n+    \n+    // Parent, children, grandchildren:\n+    testPool.addUnchecked(txParent.GetHash(), CTxMemPoolEntry(txParent, 0, 0, 0.0, 1));\n+    for (int i = 0; i < 3; i++)\n+    {\n+        testPool.addUnchecked(txChild[i].GetHash(), CTxMemPoolEntry(txChild[i], 0, 0, 0.0, 1));\n+        testPool.addUnchecked(txGrandChild[i].GetHash(), CTxMemPoolEntry(txGrandChild[i], 0, 0, 0.0, 1));\n+    }\n+    // Remove Child[0], GrandChild[0] should be removed:\n+    testPool.remove(txChild[0], removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 2);\n+    removed.clear();\n+    // ... make sure grandchild and child are gone:\n+    testPool.remove(txGrandChild[0], removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 0);\n+    testPool.remove(txChild[0], removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 0);\n+    // Remove parent, all children/grandchildren should go:\n+    testPool.remove(txParent, removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 5);\n+    BOOST_CHECK_EQUAL(testPool.size(), 0);\n+    removed.clear();\n+\n+    // Add children and grandchildren, but NOT the parent (simulate the parent being in a block)\n+    for (int i = 0; i < 3; i++)\n+    {\n+        testPool.addUnchecked(txChild[i].GetHash(), CTxMemPoolEntry(txChild[i], 0, 0, 0.0, 1));\n+        testPool.addUnchecked(txGrandChild[i].GetHash(), CTxMemPoolEntry(txGrandChild[i], 0, 0, 0.0, 1));\n+    }\n+    // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n+    // put into the mempool (maybe because it is non-standard):\n+    testPool.remove(txParent, removed, true);\n+    BOOST_CHECK_EQUAL(removed.size(), 6);\n+    BOOST_CHECK_EQUAL(testPool.size(), 0);\n+    removed.clear();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "85ea3f77b5106439d4263420b7cfa39f5f84c8b4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad9e86dca11dce023d827d342e966f3806c39d27/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad9e86dca11dce023d827d342e966f3806c39d27/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ad9e86dca11dce023d827d342e966f3806c39d27",
        "patch": "@@ -444,6 +444,18 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n         LOCK(cs);\n         std::deque<uint256> txToRemove;\n         txToRemove.push_back(origTx.GetHash());\n+        if (fRecursive && !mapTx.count(origTx.GetHash())) {\n+            // If recursively removing but origTx isn't in the mempool\n+            // be sure to remove any children that are in the pool. This can\n+            // happen during chain re-orgs if origTx isn't re-accepted into\n+            // the mempool for any reason.\n+            for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n+                std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n+                if (it == mapNextTx.end())\n+                    continue;\n+                txToRemove.push_back(it->second.ptx->GetHash());\n+            }\n+        }\n         while (!txToRemove.empty())\n         {\n             uint256 hash = txToRemove.front();"
      }
    ]
  }
]