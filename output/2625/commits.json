[
  {
    "sha": "92f2c1fe0fe2905540b0435188988851145f92be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmYyYzFmZTBmZTI5MDU1NDBiMDQzNTE4ODk4ODg1MTE0NWY5MmJl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-05-07T14:47:00Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-05-07T15:47:33Z"
      },
      "message": "Use boost::asio::deadline_timer for walletpassphrase timeout\n\nNew method in bitcoinrpc:  RunLater, that uses a map of deadline\ntimers to run a function later.\n\nBehavior of walletpassphrase is changed; before, calling\nwalletpassphrase again before the lock timeout passed\nwould result in: Error: Wallet is already unlocked.\n\nYou would have to call lockwallet before walletpassphrase.\n\nNow: the last walletpassphrase with correct password\nwins, and overrides any previous timeout.\n\nFixes issue# 1961 which was caused by spawning too many threads.\n\nTest plan:\n\nStart with encrypted wallet, password 'foo'\nNOTE:\n python -c 'import time; print(\"%d\"%time.time())'\n... will tell you current unix timestamp.\n\nTry:\n\nwalletpassphrase foo 600\ngetinfo\nEXPECT: unlocked_until is about 10 minutes in the future\n\nwalletpassphrase foo 1\nsleep 2\nsendtoaddress mun74Bvba3B1PF2YkrF4NsgcJwHXXh12LF 11\nEXPECT: Error: Please enter the wallet passphrase with walletpassphrase first.\n\nwalletpassphrase foo 600\nwalletpassphrase foo 0\ngetinfo\nEXPECT: wallet is locked (unlocked_until is 0)\n\nwalletpassphrase foo 10\nwalletpassphrase foo 600\ngetinfo\nEXPECT: wallet is unlocked until 10 minutes in future\n\nwalletpassphrase foo 60\nwalletpassphrase bar 600\nEXPECT: Error, incorrect passphrase\ngetinfo\nEXPECT: wallet still scheduled to lock 60 seconds from first (successful) walletpassphrase",
      "tree": {
        "sha": "bd9d7b05aee0bbe4520ddcb08b0a88947c51795d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd9d7b05aee0bbe4520ddcb08b0a88947c51795d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f2c1fe0fe2905540b0435188988851145f92be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f2c1fe0fe2905540b0435188988851145f92be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f2c1fe0fe2905540b0435188988851145f92be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f2c1fe0fe2905540b0435188988851145f92be/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d053d170be718cf0ff902916fb11ffdee46537b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d053d170be718cf0ff902916fb11ffdee46537b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d053d170be718cf0ff902916fb11ffdee46537b"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 43,
      "deletions": 63
    },
    "files": [
      {
        "sha": "a1d76e1812d6adbbd95876d39673e1e332970d13",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f2c1fe0fe2905540b0435188988851145f92be/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f2c1fe0fe2905540b0435188988851145f92be/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=92f2c1fe0fe2905540b0435188988851145f92be",
        "patch": "@@ -11,17 +11,17 @@\n #include \"bitcoinrpc.h\"\n #include \"db.h\"\n \n+#include <boost/algorithm/string.hpp>\n #include <boost/asio.hpp>\n #include <boost/asio/ip/v6_only.hpp>\n+#include <boost/asio/ssl.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n #include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n-#include <boost/algorithm/string.hpp>\n #include <boost/lexical_cast.hpp>\n-#include <boost/asio/ssl.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/shared_ptr.hpp>\n #include <list>\n \n@@ -34,6 +34,7 @@ static std::string strRPCUserColonPass;\n \n // These are created by StartRPCThreads, destroyed in StopRPCThreads\n static asio::io_service* rpc_io_service = NULL;\n+static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n \n@@ -843,13 +844,34 @@ void StopRPCThreads()\n {\n     if (rpc_io_service == NULL) return;\n \n+    deadlineTimers.clear();\n     rpc_io_service->stop();\n     rpc_worker_group->join_all();\n     delete rpc_worker_group; rpc_worker_group = NULL;\n     delete rpc_ssl_context; rpc_ssl_context = NULL;\n     delete rpc_io_service; rpc_io_service = NULL;\n }\n \n+void RPCRunHandler(const boost::system::error_code& err, boost::function<void(void)> func)\n+{\n+    if (!err)\n+        func();\n+}\n+\n+void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64 nSeconds)\n+{\n+    assert(rpc_io_service != NULL);\n+\n+    if (deadlineTimers.count(name) == 0)\n+    {\n+        deadlineTimers.insert(make_pair(name,\n+                                        boost::shared_ptr<deadline_timer>(new deadline_timer(*rpc_io_service))));\n+    }\n+    deadlineTimers[name]->expires_from_now(posix_time::seconds(nSeconds));\n+    deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n+}\n+\n+\n class JSONRequest\n {\n public:"
      },
      {
        "sha": "270c2a009c35ce553452c4df99340af8cd3d2111",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f2c1fe0fe2905540b0435188988851145f92be/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f2c1fe0fe2905540b0435188988851145f92be/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=92f2c1fe0fe2905540b0435188988851145f92be",
        "patch": "@@ -88,6 +88,12 @@ void RPCTypeCheck(const json_spirit::Array& params,\n void RPCTypeCheck(const json_spirit::Object& o,\n                   const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n \n+/*\n+  Run func nSeconds from now. Uses boost deadline timers.\n+  Overrides previous timer <name> (if any).\n+ */\n+void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64 nSeconds);\n+\n typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n \n class CRPCCommand"
      },
      {
        "sha": "f304f702691eee4fff56286253a2e10ed4797076",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 56,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f2c1fe0fe2905540b0435188988851145f92be/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f2c1fe0fe2905540b0435188988851145f92be/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=92f2c1fe0fe2905540b0435188988851145f92be",
        "patch": "@@ -84,7 +84,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n     if (pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime / 1000));\n+        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }\n@@ -1256,56 +1256,11 @@ Value keypoolrefill(const Array& params, bool fHelp)\n }\n \n \n-void ThreadTopUpKeyPool(void* parg)\n+static void LockWallet(CWallet* pWallet)\n {\n-    // Make this thread recognisable as the key-topping-up thread\n-    RenameThread(\"bitcoin-key-top\");\n-\n-    pwalletMain->TopUpKeyPool();\n-}\n-\n-void ThreadCleanWalletPassphrase(void* parg)\n-{\n-    // Make this thread recognisable as the wallet relocking thread\n-    RenameThread(\"bitcoin-lock-wa\");\n-\n-    int64 nMyWakeTime = GetTimeMillis() + *((int64*)parg) * 1000;\n-\n-    ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-    if (nWalletUnlockTime == 0)\n-    {\n-        nWalletUnlockTime = nMyWakeTime;\n-\n-        do\n-        {\n-            if (nWalletUnlockTime==0)\n-                break;\n-            int64 nToSleep = nWalletUnlockTime - GetTimeMillis();\n-            if (nToSleep <= 0)\n-                break;\n-\n-            LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-            MilliSleep(nToSleep);\n-            ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-        } while(1);\n-\n-        if (nWalletUnlockTime)\n-        {\n-            nWalletUnlockTime = 0;\n-            pwalletMain->Lock();\n-        }\n-    }\n-    else\n-    {\n-        if (nWalletUnlockTime < nMyWakeTime)\n-            nWalletUnlockTime = nMyWakeTime;\n-    }\n-\n-    LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-\n-    delete (int64*)parg;\n+    LOCK(cs_nWalletUnlockTime);\n+    nWalletUnlockTime = 0;\n+    pWallet->Lock();\n }\n \n Value walletpassphrase(const Array& params, bool fHelp)\n@@ -1319,9 +1274,6 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    if (!pwalletMain->IsLocked())\n-        throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked.\");\n-\n     // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n@@ -1339,9 +1291,12 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n-    NewThread(ThreadTopUpKeyPool, NULL);\n-    int64* pnSleepTime = new int64(params[1].get_int64());\n-    NewThread(ThreadCleanWalletPassphrase, pnSleepTime);\n+    pwalletMain->TopUpKeyPool();\n+\n+    int64 nSleepTime = params[1].get_int64();\n+    LOCK(cs_nWalletUnlockTime);\n+    nWalletUnlockTime = GetTime() + nSleepTime;\n+    RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n \n     return Value::null;\n }"
      },
      {
        "sha": "eebd8ac18f68b1042a73a4677d8e850d71f8fccb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f2c1fe0fe2905540b0435188988851145f92be/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f2c1fe0fe2905540b0435188988851145f92be/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=92f2c1fe0fe2905540b0435188988851145f92be",
        "patch": "@@ -87,9 +87,6 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n \n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n-    if (!IsLocked())\n-        return false;\n-\n     CCrypter crypter;\n     CKeyingMaterial vMasterKey;\n \n@@ -100,7 +97,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n-                return false;\n+                continue; // try another master key\n             if (CCryptoKeyStore::Unlock(vMasterKey))\n                 return true;\n         }"
      }
    ]
  }
]