[
  {
    "sha": "6e63e366d609312ab984b4439de2d59bb618620b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTYzZTM2NmQ2MDkzMTJhYjk4NGI0NDM5ZGUyZDU5YmI2MTg2MjBi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-01T13:56:38Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-07T22:21:37Z"
      },
      "message": "test: refactor: dedup utility function chain_transaction()",
      "tree": {
        "sha": "e223685f43e642bf58b3345d011848fc9c9a1489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e223685f43e642bf58b3345d011848fc9c9a1489"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e63e366d609312ab984b4439de2d59bb618620b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e63e366d609312ab984b4439de2d59bb618620b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e63e366d609312ab984b4439de2d59bb618620b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e63e366d609312ab984b4439de2d59bb618620b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e638acf6970394f8eb1957366ad2d39512f33b31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e638acf6970394f8eb1957366ad2d39512f33b31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e638acf6970394f8eb1957366ad2d39512f33b31"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 41,
      "deletions": 50
    },
    "files": [
      {
        "sha": "fcd8b061faa13e4246068bfc043189cd167fb240",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 15,
        "deletions": 28,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e63e366d609312ab984b4439de2d59bb618620b/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e63e366d609312ab984b4439de2d59bb618620b/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=6e63e366d609312ab984b4439de2d59bb618620b",
        "patch": "@@ -11,7 +11,11 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    chain_transaction,\n+)\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n@@ -24,23 +28,6 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    # Build a transaction that spends parent_txid:vout\n-    # Return amount sent\n-    def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n-        send_value = satoshi_round((value - fee)/num_outputs)\n-        inputs = []\n-        for (txid, vout) in zip(parent_txids, vouts):\n-            inputs.append({'txid' : txid, 'vout' : vout})\n-        outputs = {}\n-        for _ in range(num_outputs):\n-            outputs[node.getnewaddress()] = send_value\n-        rawtx = node.createrawtransaction(inputs, outputs, 0, True)\n-        signedtx = node.signrawtransactionwithwallet(rawtx)\n-        txid = node.sendrawtransaction(signedtx['hex'])\n-        fulltx = node.getrawtransaction(txid, 1)\n-        assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n-        return (txid, send_value)\n-\n     def run_test(self):\n         # Mine some blocks and have them mature.\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n@@ -53,32 +40,32 @@ def run_test(self):\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n         for _ in range(4):\n-            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n+            (txid, sent_value) = chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n             vout = 0\n             value = sent_value\n             chain.append([txid, value])\n         for _ in range(MAX_ANCESTORS - 4):\n-            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [0], value, fee, 1)\n+            (txid, sent_value) = chain_transaction(self.nodes[0], [txid], [0], value, fee, 1)\n             value = sent_value\n             chain.append([txid, value])\n-        (second_chain, second_chain_value) = self.chain_transaction(self.nodes[0], [utxo[1]['txid']], [utxo[1]['vout']], utxo[1]['amount'], fee, 1)\n+        (second_chain, second_chain_value) = chain_transaction(self.nodes[0], [utxo[1]['txid']], [utxo[1]['vout']], utxo[1]['amount'], fee, 1)\n \n         # Check mempool has MAX_ANCESTORS + 1 transactions in it\n         assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many unconfirmed ancestors [limit: 25]\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many unconfirmed ancestors [limit: 25]\", chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n         # ...even if it chains on from some point in the middle of the chain.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n         # ...even if it chains on to two parent transactions with one in the chain.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n         # ...especially if its > 40k weight\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n         # But not if it chains directly off the first transaction\n-        (replacable_txid, replacable_orig_value) = self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n+        (replacable_txid, replacable_orig_value) = chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n         # and the second chain should work just fine\n-        self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n+        chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n \n         # Make sure we can RBF the chain which used our carve-out rule\n         second_tx_outputs = {self.nodes[0].getrawtransaction(replacable_txid, True)[\"vout\"][0]['scriptPubKey']['address']: replacable_orig_value - (Decimal(1) / Decimal(100))}"
      },
      {
        "sha": "5fc3ec23aeab7809286d47b0f80bdd9f15b104b3",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 8,
        "deletions": 22,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e63e366d609312ab984b4439de2d59bb618620b/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e63e366d609312ab984b4439de2d59bb618620b/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=6e63e366d609312ab984b4439de2d59bb618620b",
        "patch": "@@ -13,6 +13,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n+    chain_transaction,\n     satoshi_round,\n )\n \n@@ -42,21 +43,6 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    # Build a transaction that spends parent_txid:vout\n-    # Return amount sent\n-    def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n-        send_value = satoshi_round((value - fee)/num_outputs)\n-        inputs = [ {'txid' : parent_txid, 'vout' : vout} ]\n-        outputs = {}\n-        for _ in range(num_outputs):\n-            outputs[node.getnewaddress()] = send_value\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-        signedtx = node.signrawtransactionwithwallet(rawtx)\n-        txid = node.sendrawtransaction(signedtx['hex'])\n-        fulltx = node.getrawtransaction(txid, 1)\n-        assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n-        return (txid, send_value)\n-\n     def run_test(self):\n         # Mine some blocks and have them mature.\n         peer_inv_store = self.nodes[0].add_p2p_connection(P2PTxInvStore()) # keep track of invs\n@@ -71,7 +57,7 @@ def run_test(self):\n         chain = []\n         witness_chain = []\n         for _ in range(MAX_ANCESTORS):\n-            (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, 0, value, fee, 1)\n+            (txid, sent_value) = chain_transaction(self.nodes[0], [txid], [0], value, fee, 1)\n             value = sent_value\n             chain.append(txid)\n             # We need the wtxids to check P2P announcements\n@@ -189,7 +175,7 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", chain_transaction, self.nodes[0], [txid], [vout], value, fee, 1)\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -238,7 +224,7 @@ def run_test(self):\n         transaction_package = []\n         tx_children = []\n         # First create one parent tx with 10 children\n-        (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 10)\n+        (txid, sent_value) = chain_transaction(self.nodes[0], [txid], [vout], value, fee, 10)\n         parent_transaction = txid\n         for i in range(10):\n             transaction_package.append({'txid': txid, 'vout': i, 'amount': sent_value})\n@@ -247,7 +233,7 @@ def run_test(self):\n         chain = [] # save sent txs for the purpose of checking node1's mempool later (see below)\n         for _ in range(MAX_DESCENDANTS - 1):\n             utxo = transaction_package.pop(0)\n-            (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+            (txid, sent_value) = chain_transaction(self.nodes[0], [utxo['txid']], [utxo['vout']], utxo['amount'], fee, 10)\n             chain.append(txid)\n             if utxo['txid'] is parent_transaction:\n                 tx_children.append(txid)\n@@ -263,7 +249,7 @@ def run_test(self):\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", chain_transaction, self.nodes[0], [utxo['txid']], [utxo['vout']], utxo['amount'], fee, 10)\n \n         # Check that node1's mempool is as expected, containing:\n         # - txs from previous ancestor test (-> custom ancestor limit)\n@@ -321,13 +307,13 @@ def run_test(self):\n         value = send_value\n \n         # Create tx1\n-        tx1_id, _ = self.chain_transaction(self.nodes[0], tx0_id, 0, value, fee, 1)\n+        tx1_id, _ = chain_transaction(self.nodes[0], [tx0_id], [0], value, fee, 1)\n \n         # Create tx2-7\n         vout = 1\n         txid = tx0_id\n         for _ in range(6):\n-            (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n+            (txid, sent_value) = chain_transaction(self.nodes[0], [txid], [vout], value, fee, 1)\n             vout = 0\n             value = sent_value\n "
      },
      {
        "sha": "4b5d14ebf9ea1df78e007fc198380dc5d046ffda",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e63e366d609312ab984b4439de2d59bb618620b/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e63e366d609312ab984b4439de2d59bb618620b/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=6e63e366d609312ab984b4439de2d59bb618620b",
        "patch": "@@ -481,6 +481,24 @@ def create_confirmed_utxos(fee, node, count):\n     return utxos\n \n \n+# Build a transaction that spends parent_txid:vout\n+# Return amount sent\n+def chain_transaction(node, parent_txids, vouts, value, fee, num_outputs):\n+    send_value = satoshi_round((value - fee)/num_outputs)\n+    inputs = []\n+    for (txid, vout) in zip(parent_txids, vouts):\n+        inputs.append({'txid' : txid, 'vout' : vout})\n+    outputs = {}\n+    for _ in range(num_outputs):\n+        outputs[node.getnewaddress()] = send_value\n+    rawtx = node.createrawtransaction(inputs, outputs, 0, True)\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n+    txid = node.sendrawtransaction(signedtx['hex'])\n+    fulltx = node.getrawtransaction(txid, 1)\n+    assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n+    return (txid, send_value)\n+\n+\n # Create large OP_RETURN txouts that can be appended to a transaction\n # to make it large (helper for constructing large transactions).\n def gen_return_txouts():"
      }
    ]
  },
  {
    "sha": "01eedf3821f2c3ee6bab8733f8549531c844add7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWVlZGYzODIxZjJjM2VlNmJhYjg3MzNmODU0OTUzMWM4NDRhZGQ3",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-05T17:01:00Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-07T22:21:37Z"
      },
      "message": "test: doc: improve doc for chain_transaction() helper\n\nChange to docstring format and describe the functions\npurpose, its parameters and return value in more detail.",
      "tree": {
        "sha": "359b31081f3260113a33740ace336a623793eca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/359b31081f3260113a33740ace336a623793eca4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01eedf3821f2c3ee6bab8733f8549531c844add7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01eedf3821f2c3ee6bab8733f8549531c844add7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01eedf3821f2c3ee6bab8733f8549531c844add7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01eedf3821f2c3ee6bab8733f8549531c844add7/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e63e366d609312ab984b4439de2d59bb618620b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e63e366d609312ab984b4439de2d59bb618620b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e63e366d609312ab984b4439de2d59bb618620b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f354ae0075db088816440cdac5363fe7e9a629dd",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01eedf3821f2c3ee6bab8733f8549531c844add7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01eedf3821f2c3ee6bab8733f8549531c844add7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=01eedf3821f2c3ee6bab8733f8549531c844add7",
        "patch": "@@ -481,9 +481,13 @@ def create_confirmed_utxos(fee, node, count):\n     return utxos\n \n \n-# Build a transaction that spends parent_txid:vout\n-# Return amount sent\n def chain_transaction(node, parent_txids, vouts, value, fee, num_outputs):\n+    \"\"\"Build and send a transaction that spends the given inputs (specified\n+    by lists of parent_txid:vout each), with the desired total value and fee,\n+    equally divided up to the desired number of outputs.\n+\n+    Returns a tuple with the txid and the amount sent per output.\n+    \"\"\"\n     send_value = satoshi_round((value - fee)/num_outputs)\n     inputs = []\n     for (txid, vout) in zip(parent_txids, vouts):"
      }
    ]
  }
]