jonatack,2021-03-02 02:04:51,"Just discovered #8394, will check if it contains anything I've overlooked. ",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-788518295,788518295,
DrahtBot,2021-03-02 10:13:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20457 (util: Make Parse{Int,UInt}{32,64} use locale independent std::from_chars(…) (C++17) instead of locale dependent st",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-788792828,788792828,
practicalswift,2021-03-02 12:40:24,"Strong Concept ACK\n\nThanks for removing this implicit conversion gotcha :)\n\n`uint16_t` should be used consistently for port numbers.\n\nSomewhat related: https://github.com/bitcoin/bitcoin/pull/19415#issuecomment-765811567",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-788879937,788879937,
laanwj,2021-03-03 11:34:16,"I like the idea of using specific types. But if we're going to change this, I think I would feel slightly better defining a `typedef Port` for this. What if we want to support a protocol in the future with 32-bit ports? I do not see this as likely… my intuition is that things are moving to *one-endpoint-per-address* conceptually instead of ports… and yes the port as a concept is typical to current",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-789650071,789650071,
jonatack,2021-03-06 21:36:05,"Thank you @vasild, @practicalswift and @laanwj. Updated per all of your suggestions.",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-792062214,792062214,
practicalswift,2021-03-07 18:22:07,"Not super excited by the introduction of `Port` TBH.\n\nThe problem is probably best illustrated by this UB quiz:\n\nQ. Which of the two cases rely on undefined behaviour?\n\n```c++\n// Snippet 1\nPort p;\nif (p != other_p) {\n}\n```\n\n```c++\n// Snippet 2\nuint16_t p;\nif (p != other_p) {\n}\n```\n\n<details>\n<summary>Click for answer</summary>\n\nBoth snippets rely on un",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-792328350,792328350,
jonatack,2021-03-09 12:59:39,"Thanks for the feedback!\n\nI agree that `Port` is less greppable than `IPPort` (and we do already have a `ToStringIPPort()` method).\n\nNo strong opinion, but here are a few reasons why I tend to agree with @laanwj and took the time to do it:\n\n- ISTM not having a type alias here *is why we're in this situation in the first place* (and since a long time)\n- I'm happy that we have an alias",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-793864535,793864535,
vasild,2021-03-09 14:41:51,"Yeah, those are also valid points :scroll: :thinking: :thought_balloon: ",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-793986310,793986310,
MarcoFalke,2021-03-09 15:07:07,"If a new name is introduce, wouldn't it be better to make it fully type safe?",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-794019850,794019850,
laanwj,2021-03-09 18:06:24,"> Q. Which of the two cases rely on undefined behaviour?\n\nDon't disagree with the point but whyy does C have to turn everything into UB, I hate this, I really do, wish we could use a sane language",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-794246789,794246789,
practicalswift,2021-03-09 22:27:20,"I agree with MarcoFalke: if we are to introduce `Port` consider making it fully type safe in order to avoid the pitfall I described [above](https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-792328350).\n\nPortability is important, but safety is more important (in general) :)\n\nI suggest moving the `Port` commit to a separate PR since that is the only part of this PR that is not ready",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-794540053,794540053,
jonatack,2021-03-11 08:58:30,"Thanks @vasild! Yes, dropped three commits: the logging one, and the two for the type alias that could be a follow-up. No other changes.",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-796579106,796579106,
jonatack,2021-03-15 15:37:02,Rebased following the merge of #19415 -- `git range-diff eceb3f77 cf9952d ae6eb4c`,https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-799518559,799518559,
practicalswift,2021-03-15 16:39:19,cr ACK ae6eb4c8d549526232bcf6197a31de660b74b8af: patch looks correct,https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-799566333,799566333,
jonatack,2021-03-16 14:44:38,Rebased following merge of #21444 -- `git range-diff 01bb3afb ae6eb4c a05736`,https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-800320670,800320670,
jonatack,2021-03-16 18:39:31,"Ah, the fuzz CI is signalling a needed change since the merge of #19415: ""UndefinedBehaviorSanitizer: implicit-signed-integer-truncation test/fuzz/netbase_dns_lookup.cpp:48:45"". Will update.",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-800512883,800512883,
jonatack,2021-03-16 18:57:03,"Thanks @vasild! Updated one line per `git diff a057361 52dd40a` to make a change needed after the merge of #19415.\n```diff\n+++ b/src/test/fuzz/netbase_dns_lookup.cpp\n@@ -18,7 +18,7 @@ FUZZ_TARGET(netbase_dns_lookup)\n     const std::string name = fuzzed_data_provider.ConsumeRandomLengthString(512);\n     const unsigned int max_results = fuzzed_data_provider.ConsumeIntegral<unsigned int>();",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-800523781,800523781,
practicalswift,2021-03-16 20:57:55,cr ACK 52dd40a9febec1f4e70d777821b6764830bdec61: patch looks correct,https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-800599799,800599799,
vasild,2021-03-19 17:18:39,"Looks like `master` (at 05757aa86) has a problem that would be fixed by this PR - my ""private"" CI got this [error](https://cirrus-ci.com/task/4540087020027904?command=ci#L3308):\n\n```\nnetbase.cpp:212:37: runtime error: implicit conversion from type 'int' of value -2147483632 (32-bit, signed) to type 'uint16_t' (aka 'unsigned short') changed the value to 16 (16-bit, unsigned)\n```\n\nwhich ",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-802988670,802988670,
sipa,2021-03-19 17:23:18,"@vasild Conversions to unsigned types are actually well-defined in the lamguage. Our sanitizer runs in sort of an over-eager mode and triggers on that because such conversions are often a sign of bugs. But here I suspect it's intentional, and valid.",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-802991456,802991456,
vasild,2021-03-19 17:28:39,"@sipa, I agree. However, a failing CI is a problem :) it would be fixed either by this PR or an explicit cast like `CService(vIP[i], static_cast<uint16_t>(port))`.",https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-802994568,802994568,
MarcoFalke,2021-03-19 19:46:59,cr ACK 52dd40a9febec1f4e70d777821b6764830bdec61,https://github.com/bitcoin/bitcoin/pull/21328#issuecomment-803075096,803075096,
vasild,2021-03-02 05:44:48,"Usually `0` is used as ""dummy/invalid"" port. Port `1` is reserved for (from `/etc/services`):\n```\ntcpmux            1/tcp    #TCP Port Service Multiplexer\ntcpmux            1/udp    #TCP Port Service Multiplexer\n```",https://github.com/bitcoin/bitcoin/pull/21328#discussion_r585277838,585277838,src/test/netbase_tests.cpp
vasild,2021-03-02 05:52:47,"(github does not let me to comment on line `118`, so commenting on line `111` instead):\n\n```cpp\n118        int32_t n;\n119        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n120            in = in.substr(0, colon);\n121            portOut = n;\n122        }\n```\n\n* Line `121` does not cause a warning?\n* Maybe change `0x10000` to `std::numeric_limits<uint16",https://github.com/bitcoin/bitcoin/pull/21328#discussion_r585280508,585280508,src/util/strencodings.cpp
vasild,2021-03-02 05:59:51,"`GetArg()` returns `uint64_t` and here we would silently narrow it down to `uint16_t`. It is ok since before this PR we would narrow it down to `int` and later narrow the `int` down to `uint16_t`.\n\nIf the user makes a typo and specifies `-rpcport=88332` we will bind on `22796` instead (with and without this PR). Best to print an error and refuse to start, not necessary in this PR.",https://github.com/bitcoin/bitcoin/pull/21328#discussion_r585283042,585283042,src/httpserver.cpp
jonatack,2021-03-06 21:29:49,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/21328#discussion_r588933424,588933424,src/test/netbase_tests.cpp
jonatack,2021-03-06 21:30:40,Good ideas! (no warning seen). Added a `ParseUInt16()` method and updated `SplitHostPort()` to use it.,https://github.com/bitcoin/bitcoin/pull/21328#discussion_r588933485,588933485,src/util/strencodings.cpp
jonatack,2021-03-06 21:30:58,Decided to use named casts at each of these user input entry points. I agree with better user input parsing and errors....this PR has become a bit large but happy to look at it in a follow-up.,https://github.com/bitcoin/bitcoin/pull/21328#discussion_r588933506,588933506,src/httpserver.cpp
jonatack,2021-03-06 22:05:05,We have unit tests for `ParseUInt32()` and `ParseUInt64()` but not for `ParseUInt8()` or `ParseUInt16()`. Can add in a follow-up or here depending on reviewer preference.,https://github.com/bitcoin/bitcoin/pull/21328#discussion_r588936735,588936735,src/util/strencodings.cpp
vasild,2021-03-09 10:53:56,These changes `%i` -> `%u` are not necessary because `LogPrint()` is type safe. The commit `p2p: update port logging to unsigned integers` can be dropped.,https://github.com/bitcoin/bitcoin/pull/21328#discussion_r590216427,590216427,src/httpserver.cpp
jonatack,2021-03-10 22:08:40,done,https://github.com/bitcoin/bitcoin/pull/21328#discussion_r591908124,591908124,src/httpserver.cpp
