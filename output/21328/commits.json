[
  {
    "sha": "6423c8175fad3163c10ffdb49e0df48e4e4931f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDIzYzgxNzVmYWQzMTYzYzEwZmZkYjQ5ZTBkZjQ4ZTRlNDkzMWYx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-01T20:35:28Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-16T18:52:31Z"
      },
      "message": "p2p, refactor: pass and use uint16_t CService::port as uint16_t",
      "tree": {
        "sha": "fe0ad5daa524b4802c6e2d60bcb80043d245d876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe0ad5daa524b4802c6e2d60bcb80043d245d876"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6423c8175fad3163c10ffdb49e0df48e4e4931f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBQ/m8ACgkQT1chs9Dj\nkh2HdA/+Jai4WsHLgGfwEdLcCDBLZWYw554z2oa9Sh365mAAjztESTg4nsfdsSI9\nQkEGcJIOVLhsrdijSg5PJwBj0wtwWr4jLH3MlzkBVNNE00Nn5Lk7DSlkIYnF1SqE\n+ZlKAnVBhliYjEad5CX8MTHXDjvsvZgBshvtL/skRThbN+JQ2nueUrDmMWbSsq90\nAcSG3FSi55SfLQm2RGykla6HGZAzzbXUMjn8In+hqsiFRWN4HyG+q5yRsm877EYX\nCs7xCjILt3E8D6l0aFaOEeO6j1qhFyDHee/HvblsI1STmBsmbTR/Pcvo3gXERm6m\nG7X541pyLykOXc2yJscLKQK/ieIV87iToeC4a63wY6QkIZ6z83SU+uvIwj8d3Qy5\nOmbxwIiuEzb4zJ8WhRIkjAPtptYvtwP0kfFZ/eG0g6JjuKWxP4S9KuwLWpmx+hq7\n8kgOWvcEhL39D6PdeKWb2ML4jvnj8gVtkTzC9NSt7MCIRJoOQFcmdPpclYUcnARz\nn7kce/VC7SXUv6dzJvlckXj7GSG15oyXpx6llEw63ved/h6s0maDdfHctcpqC+hO\nm5RF+nnrvNdGUKahKIIPrzKtxLENHOilCKitOV0W8O17ZHsDQhJx+LHf0qV9GRO6\nZHxsfj0v7PpowkV2k8EVJ/f1N5zJ2ZJ82jES1XKyY4prcn8F9lM=\n=B2JO\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICpcYAWnJQ5KkM+9kVMaaiO1/JsYUe3ap0eR7wk46nCBCP/wEAQXU/dvRoN6\nB/SGYfyhGagI8QRgUP5w8AgGrLtWCKXIVACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQK3FA5gbK/bmC4nE3\nC2a8bQjxBGBQ/nHwCEE7Z/LX7b03AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQvewvOUJOglYNQcrb5Mh7lQjx\nBGBQ8JvwCPvF7LMFdRd9AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BDwgNj5D75HeyY4S3tp3KAsCPEgUayMXsP+X1s2\nMZssWD1qN/ghwlIPQHJ0F12g16F8lH8I8QRgUP5w8AiQHDMs6L7dbACD3+MNLvkM\njiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fe0ad5daa524b4802c6e2d60bcb80043d245d876\nparent 1b6c463e033f861561d1a46ccf7eec069bbac09f\nauthor Jon Atack <jon@atack.com> 1614630928 +0100\ncommitter Jon Atack <jon@atack.com> 1615920751 +0100\n\np2p, refactor: pass and use uint16_t CService::port as uint16_t\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6423c8175fad3163c10ffdb49e0df48e4e4931f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6423c8175fad3163c10ffdb49e0df48e4e4931f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6423c8175fad3163c10ffdb49e0df48e4e4931f1/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b6c463e033f861561d1a46ccf7eec069bbac09f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b6c463e033f861561d1a46ccf7eec069bbac09f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b6c463e033f861561d1a46ccf7eec069bbac09f"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 48,
      "deletions": 47
    },
    "files": [
      {
        "sha": "05e1fcae711e81c78cbb845417c756078cd022e1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -618,9 +618,9 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n     //     1. -rpcport\n     //     2. port in -rpcconnect (ie following : in ipv4 or ]: in ipv6)\n     //     3. default port for chain\n-    int port = BaseParams().RPCPort();\n+    uint16_t port{BaseParams().RPCPort()};\n     SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = gArgs.GetArg(\"-rpcport\", port);\n+    port = static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", port));\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();"
      },
      {
        "sha": "013f075be6571a47ec0800e00907d80079196768",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -84,7 +84,7 @@ class CChainParams\n \n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n-    int GetDefaultPort() const { return nDefaultPort; }\n+    uint16_t GetDefaultPort() const { return nDefaultPort; }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n@@ -121,7 +121,7 @@ class CChainParams\n \n     Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n-    int nDefaultPort;\n+    uint16_t nDefaultPort;\n     uint64_t nPruneAfterHeight;\n     uint64_t m_assumed_blockchain_size;\n     uint64_t m_assumed_chain_state_size;"
      },
      {
        "sha": "e1c8ec4ab97d6bf7a74b80f7108656dc2e37dd33",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -290,8 +290,8 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    int http_port = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n-    std::vector<std::pair<std::string, uint16_t> > endpoints;\n+    uint16_t http_port{static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort()))};\n+    std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n     if (!(gArgs.IsArgSet(\"-rpcallowip\") && gArgs.IsArgSet(\"-rpcbind\"))) { // Default to loopback if not allowing external IPs\n@@ -305,7 +305,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         }\n     } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n         for (const std::string& strRPCBind : gArgs.GetArgs(\"-rpcbind\")) {\n-            int port = http_port;\n+            uint16_t port{http_port};\n             std::string host;\n             SplitHostPort(strRPCBind, port, host);\n             endpoints.push_back(std::make_pair(host, port));"
      },
      {
        "sha": "fdebaeee563c944451b748248cac71b5ca1e6938",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -113,7 +113,7 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return (uint16_t)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return static_cast<uint16_t>(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -394,7 +394,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n     // Resolve\n-    const int default_port = Params().GetDefaultPort();\n+    const uint16_t default_port{Params().GetDefaultPort()};\n     if (pszDest) {\n         std::vector<CService> resolved;\n         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n@@ -462,7 +462,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return nullptr;\n         }\n         std::string host;\n-        int port = default_port;\n+        uint16_t port{default_port};\n         SplitHostPort(std::string(pszDest), port, host);\n         bool proxyConnectionFailed;\n         connected = ConnectThroughProxy(proxy, host, port, *sock, nConnectTimeout,"
      },
      {
        "sha": "259387e522f19e75ca8247ba7154aa95ea7da812",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -229,7 +229,7 @@ extern std::string strSubVersion;\n \n struct LocalServiceInfo {\n     int nScore;\n-    int nPort;\n+    uint16_t nPort;\n };\n \n extern RecursiveMutex cs_mapLocalHost;"
      },
      {
        "sha": "49e455aa84895dd896addbe7eab07ab6d0bff160",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -194,12 +194,12 @@ bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSL\n     return true;\n }\n \n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions, DNSLookupFn dns_lookup_function)\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, uint16_t portDefault, bool fAllowLookup, unsigned int nMaxSolutions, DNSLookupFn dns_lookup_function)\n {\n     if (name.empty() || !ValidAsCString(name)) {\n         return false;\n     }\n-    int port = portDefault;\n+    uint16_t port{portDefault};\n     std::string hostname;\n     SplitHostPort(name, port, hostname);\n \n@@ -213,7 +213,7 @@ bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefau\n     return true;\n }\n \n-bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n+bool Lookup(const std::string& name, CService& addr, uint16_t portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(name)) {\n         return false;\n@@ -226,7 +226,7 @@ bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllo\n     return true;\n }\n \n-CService LookupNumeric(const std::string& name, int portDefault, DNSLookupFn dns_lookup_function)\n+CService LookupNumeric(const std::string& name, uint16_t portDefault, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(name)) {\n         return {};\n@@ -363,7 +363,7 @@ static std::string Socks5ErrorString(uint8_t err)\n     }\n }\n \n-bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& sock)\n+bool Socks5(const std::string& strDest, uint16_t port, const ProxyCredentials* auth, const Sock& sock)\n {\n     IntrRecvError recvr;\n     LogPrint(BCLog::NET, \"SOCKS5 connecting %s\\n\", strDest);\n@@ -665,7 +665,7 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed)\n {\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, sock.Get(), nTimeout, true)) {\n@@ -677,11 +677,11 @@ bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int\n         ProxyCredentials random_auth;\n         static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n-        if (!Socks5(strDest, (uint16_t)port, &random_auth, sock)) {\n+        if (!Socks5(strDest, port, &random_auth, sock)) {\n             return false;\n         }\n     } else {\n-        if (!Socks5(strDest, (uint16_t)port, 0, sock)) {\n+        if (!Socks5(strDest, port, 0, sock)) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "08172b9984fb92bde4f00306d0b679a455d3af88",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -111,15 +111,15 @@ extern DNSLookupFn g_dns_lookup;\n  * @returns Whether or not the specified host string successfully resolved to\n  *          any resulting network addresses.\n  *\n- * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ * @see Lookup(const std::string&, std::vector<CService>&, uint16_t, bool, unsigned int, DNSLookupFn)\n  *      for additional parameter descriptions.\n  */\n bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n \n /**\n  * Resolve a host string to its first corresponding network address.\n  *\n- * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool, DNSLookupFn)\n+ * @see LookupHost(const std::string&, std::vector<CNetAddr>&, uint16_t, bool, DNSLookupFn)\n  *      for additional parameter descriptions.\n  */\n bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n@@ -129,7 +129,7 @@ bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSL\n  *\n  * @param name    The string representing a service. Could be a name or a\n  *                numerical IP address (IPv6 addresses should be in their\n- *                disambiguated bracketed form), optionally followed by a port\n+ *                disambiguated bracketed form), optionally followed by a uint16_t port\n  *                number. (e.g. example.com:8333 or\n  *                [2001:db8:85a3:8d3:1319:8a2e:370:7348]:420)\n  * @param[out] vAddr The resulting services to which the specified service string\n@@ -144,26 +144,26 @@ bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSL\n  * @returns Whether or not the service string successfully resolved to any\n  *          resulting services.\n  */\n-bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, uint16_t portDefault, bool fAllowLookup, unsigned int nMaxSolutions, DNSLookupFn dns_lookup_function = g_dns_lookup);\n \n /**\n  * Resolve a service string to its first corresponding service.\n  *\n- * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ * @see Lookup(const std::string&, std::vector<CService>&, uint16_t, bool, unsigned int, DNSLookupFn)\n  *      for additional parameter descriptions.\n  */\n-bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+bool Lookup(const std::string& name, CService& addr, uint16_t portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n \n /**\n  * Resolve a service string with a numeric IP to its first corresponding\n  * service.\n  *\n  * @returns The resulting CService if the resolution was successful, [::]:0 otherwise.\n  *\n- * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ * @see Lookup(const std::string&, std::vector<CService>&, uint16_t, bool, unsigned int, DNSLookupFn)\n  *      for additional parameter descriptions.\n  */\n-CService LookupNumeric(const std::string& name, int portDefault = 0, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+CService LookupNumeric(const std::string& name, uint16_t portDefault = 0, DNSLookupFn dns_lookup_function = g_dns_lookup);\n \n /**\n  * Parse and resolve a specified subnet string into the appropriate internal\n@@ -219,7 +219,7 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n  *\n  * @returns Whether or not the operation succeeded.\n  */\n-bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n+bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n \n /** Disable or enable blocking-mode for a socket */\n bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n@@ -245,6 +245,6 @@ void InterruptSocks5(bool interrupt);\n  * @see <a href=\"https://www.ietf.org/rfc/rfc1928.txt\">RFC1928: SOCKS Protocol\n  *      Version 5</a>\n  */\n-bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& socket);\n+bool Socks5(const std::string& strDest, uint16_t port, const ProxyCredentials* auth, const Sock& socket);\n \n #endif // BITCOIN_NETBASE_H"
      },
      {
        "sha": "ba35ff3b67e36cac6417cda93c71eb7a88d64e76",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -67,7 +67,7 @@ private Q_SLOTS:\n     void updateDefaultProxyNets();\n \n Q_SIGNALS:\n-    void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, uint16_t nProxyPort);\n \n private:\n     Ui::OptionsDialog *ui;"
      },
      {
        "sha": "d4c1ab4b53202d8ca34e5a0e904c1081b71e8b3c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -914,7 +914,7 @@ static RPCHelpMan addpeeraddress()\n     UniValue obj(UniValue::VOBJ);\n \n     std::string addr_string = request.params[0].get_str();\n-    uint16_t port = request.params[1].get_int();\n+    uint16_t port{static_cast<uint16_t>(request.params[1].get_int())};\n \n     CNetAddr net_addr;\n     if (!LookupHost(addr_string, net_addr, false)) {"
      },
      {
        "sha": "d438537606a935ab57f6c3ad0f301375092ff036",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -100,7 +100,7 @@ static CNetAddr ResolveIP(const std::string& ip)\n     return addr;\n }\n \n-static CService ResolveService(const std::string& ip, const int port = 0)\n+static CService ResolveService(const std::string& ip, uint16_t port = 0)\n {\n     CService serv;\n     BOOST_CHECK_MESSAGE(Lookup(ip, serv, port, false), strprintf(\"failed to resolve: %s:%i\", ip, port));"
      },
      {
        "sha": "cf2fa337443c8e584e5ecd21d3d468773f329d8b",
        "filename": "src/test/fuzz/netbase_dns_lookup.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/fuzz/netbase_dns_lookup.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/fuzz/netbase_dns_lookup.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/netbase_dns_lookup.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -18,7 +18,7 @@ FUZZ_TARGET(netbase_dns_lookup)\n     const std::string name = fuzzed_data_provider.ConsumeRandomLengthString(512);\n     const unsigned int max_results = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n     const bool allow_lookup = fuzzed_data_provider.ConsumeBool();\n-    const int default_port = fuzzed_data_provider.ConsumeIntegral<int>();\n+    const uint16_t default_port = fuzzed_data_provider.ConsumeIntegral<uint16_t>();\n \n     auto fuzzed_dns_lookup_function = [&](const std::string&, bool) {\n         std::vector<CNetAddr> resolved_addresses;"
      },
      {
        "sha": "d7b32ef46f19406b61f857dcd2a75954f2ea35ef",
        "filename": "src/test/fuzz/socks5.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/fuzz/socks5.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/fuzz/socks5.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/socks5.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -38,7 +38,7 @@ FUZZ_TARGET_INIT(socks5, initialize_socks5)\n     // This Socks5(...) fuzzing harness would have caught CVE-2017-18350 within\n     // a few seconds of fuzzing.\n     (void)Socks5(fuzzed_data_provider.ConsumeRandomLengthString(512),\n-                 fuzzed_data_provider.ConsumeIntegral<int>(),\n+                 fuzzed_data_provider.ConsumeIntegral<uint16_t>(),\n                  fuzzed_data_provider.ConsumeBool() ? &proxy_credentials : nullptr,\n                  fuzzed_sock);\n }"
      },
      {
        "sha": "835b59f05cc6541b7b60df8a678e89ca48bb6343",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -82,7 +82,7 @@ FUZZ_TARGET(string)\n #ifndef WIN32\n     (void)ShellEscape(random_string_1);\n #endif // WIN32\n-    int port_out;\n+    uint16_t port_out;\n     std::string host_out;\n     SplitHostPort(random_string_1, port_out, host_out);\n     (void)TimingResistantEqual(random_string_1, random_string_2);"
      },
      {
        "sha": "3af49c46f87a334c84edd7ee2440f857a00a1f41",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -91,7 +91,7 @@ BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(cnode_listen_port)\n {\n     // test default\n-    uint16_t port = GetListenPort();\n+    uint16_t port{GetListenPort()};\n     BOOST_CHECK(port == Params().GetDefaultPort());\n     // test set port\n     uint16_t altPort = 12345;"
      },
      {
        "sha": "545fca1a333594e991a868272c28e7a91cb59f96",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -83,31 +83,31 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n \n }\n \n-bool static TestSplitHost(std::string test, std::string host, int port)\n+bool static TestSplitHost(const std::string& test, const std::string& host, uint16_t port)\n {\n     std::string hostOut;\n-    int portOut = -1;\n+    uint16_t portOut{0};\n     SplitHostPort(test, portOut, hostOut);\n     return hostOut == host && port == portOut;\n }\n \n BOOST_AUTO_TEST_CASE(netbase_splithost)\n {\n-    BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org\", \"www.bitcoincore.org\", -1));\n-    BOOST_CHECK(TestSplitHost(\"[www.bitcoincore.org]\", \"www.bitcoincore.org\", -1));\n+    BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org\", \"www.bitcoincore.org\", 0));\n+    BOOST_CHECK(TestSplitHost(\"[www.bitcoincore.org]\", \"www.bitcoincore.org\", 0));\n     BOOST_CHECK(TestSplitHost(\"www.bitcoincore.org:80\", \"www.bitcoincore.org\", 80));\n     BOOST_CHECK(TestSplitHost(\"[www.bitcoincore.org]:80\", \"www.bitcoincore.org\", 80));\n-    BOOST_CHECK(TestSplitHost(\"127.0.0.1\", \"127.0.0.1\", -1));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1\", \"127.0.0.1\", 0));\n     BOOST_CHECK(TestSplitHost(\"127.0.0.1:8333\", \"127.0.0.1\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]\", \"127.0.0.1\", -1));\n+    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]\", \"127.0.0.1\", 0));\n     BOOST_CHECK(TestSplitHost(\"[127.0.0.1]:8333\", \"127.0.0.1\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\", -1));\n+    BOOST_CHECK(TestSplitHost(\"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\", 0));\n     BOOST_CHECK(TestSplitHost(\"[::ffff:127.0.0.1]:8333\", \"::ffff:127.0.0.1\", 8333));\n     BOOST_CHECK(TestSplitHost(\"[::]:8333\", \"::\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"::8333\", \"::8333\", -1));\n+    BOOST_CHECK(TestSplitHost(\"::8333\", \"::8333\", 0));\n     BOOST_CHECK(TestSplitHost(\":8333\", \"\", 8333));\n     BOOST_CHECK(TestSplitHost(\"[]:8333\", \"\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"\", \"\", -1));\n+    BOOST_CHECK(TestSplitHost(\"\", \"\", 0));\n }\n \n bool static TestParse(std::string src, std::string canon)"
      },
      {
        "sha": "e9d85c4c304f8821001f6201bc85a043f4885d89",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -107,7 +107,8 @@ std::vector<unsigned char> ParseHex(const std::string& str)\n     return ParseHex(str.c_str());\n }\n \n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n+void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n+{\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;"
      },
      {
        "sha": "a450b30ca239befa07f841dfd6cb5ebbdb6da369",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6423c8175fad3163c10ffdb49e0df48e4e4931f1/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "patch": "@@ -65,7 +65,7 @@ std::string EncodeBase32(Span<const unsigned char> input, bool pad = true);\n  */\n std::string EncodeBase32(const std::string& str, bool pad = true);\n \n-void SplitHostPort(std::string in, int& portOut, std::string& hostOut);\n+void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut);\n int64_t atoi64(const std::string& str);\n int atoi(const std::string& str);\n "
      }
    ]
  },
  {
    "sha": "2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODc1YTc2NGY3ZDhiMTUwM2M3YmRiMmYyNjI5NjRmN2EwY2I1ZmMz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-02T21:37:50Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-16T18:52:33Z"
      },
      "message": "util: add ParseUInt16(), use it in SplitHostPort()",
      "tree": {
        "sha": "56880cb31aa5896e256f08b29285e3e774819d65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56880cb31aa5896e256f08b29285e3e774819d65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBQ/nEACgkQT1chs9Dj\nkh3uVA//U6hEyNSMiV+l0jEAdQIDtu3O9W+DGN1J/WuuRI7nIzZYtmjXh8i4Po2x\nI/csNVvKHr2iRDbXOQ4Fj/Yjd0hnYJUqKiBvJoyjFp94AyD/ArsaN0sdtPOnpbJU\ncxz/Cr205LRBRk9gAFDA7tpZR/gLzYyK3j51YV4oyS8V4gL32LCWDur8k94n0Oed\nAhU7qbmGiEsScUB0ou31ou7fQs1f9TWbPygNyzI9LeM5jEkU28eKRGFWuLRQiMhv\nrVH43ErCQYdKpDmGqQoq0PbZ6YgGUtc895/Z506AbIZZqN6zIS9vdaDbVUG/UgUz\n2DBC2KRI33pMSLnSIz91VIQ+XiuDWdg3sRQRhIcKDzmJdh2GWTN7hnzfV5Z10NBw\nwX437ZY1f4L9p+fCsyxjvPEFewBVB0MEEERhP36LeX79e0scfKWjD1/8FsFzgRl7\n7IKRbZt2kVeqlz16E5FFICpRcE+cgY2iA8YpbP8K3WrQ0rEYwp7KVNTQvsqbpopV\nzNxBg5LhpfDN2LQsukJwTG3gNkIcl2QPpBw9y8O4zXudIg+AFlRRXvYEWu2P9TZ0\nZ5ie6xXDhOJ4ZZNHCrSv34djRTdkeNfuw0NNzVvAR2JDtHsY0lFi0i8m2/Qwuudd\nFHwgkKM7kYV01aUIIKkLNhtIc3MNXL702aBzVttvGdtz0ZvXfgc=\n=bTkZ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEGriour8i8DhnMhtV9SbHfv+pQTkH3QFWeId4JYKD8KCP/wEH0K/T5KAZUL\neo5xpaV29ccI8QRgUPCd8Agtm+cosYBzHQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEIHm8ZeXi0Hj/nxZczt9SLII\n8QRgUP5z8Ahf6xoBwLdgYQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEK2kjpUqtCrFCOU7IJWwspQI8QRgUP5y8AiQ+X5YJItT\n5gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDhBuCWijhcf3tccUoCR8m6CPEEYFD+c/AIoDWWI4RrbwIAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 56880cb31aa5896e256f08b29285e3e774819d65\nparent 6423c8175fad3163c10ffdb49e0df48e4e4931f1\nauthor Jon Atack <jon@atack.com> 1614721070 +0100\ncommitter Jon Atack <jon@atack.com> 1615920753 +0100\n\nutil: add ParseUInt16(), use it in SplitHostPort()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6423c8175fad3163c10ffdb49e0df48e4e4931f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6423c8175fad3163c10ffdb49e0df48e4e4931f1"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8ccb71280db0f0ceb93fe55cbe952044a00b8f60",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
        "patch": "@@ -115,8 +115,8 @@ void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n     bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n     bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n     if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n-        int32_t n;\n-        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n+        uint16_t n;\n+        if (ParseUInt16(in.substr(colon + 1), &n)) {\n             in = in.substr(0, colon);\n             portOut = n;\n         }\n@@ -335,6 +335,18 @@ bool ParseUInt8(const std::string& str, uint8_t *out)\n     return true;\n }\n \n+bool ParseUInt16(const std::string& str, uint16_t* out)\n+{\n+    uint32_t u32;\n+    if (!ParseUInt32(str, &u32) || u32 > std::numeric_limits<uint16_t>::max()) {\n+        return false;\n+    }\n+    if (out != nullptr) {\n+        *out = static_cast<uint16_t>(u32);\n+    }\n+    return true;\n+}\n+\n bool ParseUInt32(const std::string& str, uint32_t *out)\n {\n     if (!ParsePrechecks(str))"
      },
      {
        "sha": "26dc0a0ce32600fadb0b7bf9c89afe51ed9f6eea",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
        "patch": "@@ -115,6 +115,13 @@ constexpr inline bool IsSpace(char c) noexcept {\n  */\n [[nodiscard]] bool ParseUInt8(const std::string& str, uint8_t *out);\n \n+/**\n+ * Convert decimal string to unsigned 16-bit integer with strict parse error feedback.\n+ * @returns true if the entire string could be parsed as valid integer,\n+ *   false if the entire string could not be parsed or if overflow or underflow occurred.\n+ */\n+[[nodiscard]] bool ParseUInt16(const std::string& str, uint16_t* out);\n+\n /**\n  * Convert decimal string to unsigned 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,"
      }
    ]
  },
  {
    "sha": "6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjA5YzBmNmI1N2FjMDFhNDczYzU4N2EzZTUxZTlkNDc3ODY2YmIw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-06T20:17:50Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-16T18:52:35Z"
      },
      "message": "util: add missing braces and apply clang format to SplitHostPort()",
      "tree": {
        "sha": "550992182e9565153171c5b971075a4c2d724576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/550992182e9565153171c5b971075a4c2d724576"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBQ/nMACgkQT1chs9Dj\nkh2LAQ//TndKczTgw6DP/cDRTTjCa/gcoG9orOrH8/+jtuC889mXU4KrOy2U8KTF\ncrFJ1JYWEhMwrM1WymhM7hj8fGx6JEt8bkArrxJFWUfbeW6DpvZP6q28NLhFmIwn\nl16GjPUwdZK5vl2U8+b83yw7qZ1mtCiqMK7ndcPYN3OUTBWkvf2Se8hiX+E8kUIO\njUl/WaYKdHRbyF4efQ52RmUdR8Zl8AtHQxgL4kacmiUJdNSXOg14WRVejfQel075\nCA+RTIn6l8lqXEc4ob5eJ1gNIuerISPFnFhQ/0fonWpwuY4SBiY3rgTf46NBWVGo\nkx+gOlzOp8I8mUXBhz7hl9HOOyiP/rwVzy3FiRylB2dhRMTM5emZklAgQoYpMrES\ngEw0hFHjMGssYMfqmSHpGntGZNHMhnYGNUHZw++lB0ZG7HFNvoSs3RS0pX8sMFY3\nVAG8O14m13CWVpwVAjP0Mn6Gwh2r84X0hvUzzh3PRe+ThH3EBjN5LVUVyp+6/Zev\nkhqyKuWB7+6rpVkCcHkMC/F6w46nC/I7Agv0MP94VZmNXSUPkCcgxxYtxrlksipU\nTPojHIYHlP1qzUoKZpktYXFzmN1x9gSYtBFgV+q9kgVhCXXZzssZKwy2FOEV5pRZ\nNV3apzYHGZgeLIU+bT1PO2hHd6PGHVxv7eSZ0kwUiNF0gx8fh/E=\n=Qfiw\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIA8oWlxjRjR2I1khb0PJi8trpB8S33yw5esdYrA8w5kYCP/wEHNDstSUzqVp\nESZMUlTjhWEI8CCjLVutA7ic5Q7Jo8A4y1PCf0+d2mRx9walTd1cYc04qgjxBGBQ\n/nXwCGLdHHm4qvsXAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t//AQmjPV8YN26p+UBjM7XG/lRwjxBGBQ8J/wCLywI7onRL2eAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n//AQ65tRFSgMOnQsdqvoKww3zQjwIMqtXTc+DB24VzoKOlTZJWDrcn8VsVHho3dW\n8jUVzuGICPEEYFD+dfAIvHyggJNJWe4Ag9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0\nYy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEPOnMf8Nz1i9VYnj2EYgUSMI\n8QRgUP508AgFzP/aY9A/8wCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 550992182e9565153171c5b971075a4c2d724576\nparent 2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3\nauthor Jon Atack <jon@atack.com> 1615061870 +0100\ncommitter Jon Atack <jon@atack.com> 1615920755 +0100\n\nutil: add missing braces and apply clang format to SplitHostPort()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f09c0f6b57ac01a473c587a3e51e9d477866bb0/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2875a764f7d8b1503c7bdb2f262964f7a0cb5fc3"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4734de3e0b457a48a195508c48817f14d6db218c",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f09c0f6b57ac01a473c587a3e51e9d477866bb0/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f09c0f6b57ac01a473c587a3e51e9d477866bb0/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
        "patch": "@@ -112,19 +112,20 @@ void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut)\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n-    bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n-    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n-    if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n+    bool fBracketed = fHaveColon && (in[0] == '[' && in[colon - 1] == ']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n+    bool fMultiColon = fHaveColon && (in.find_last_of(':', colon - 1) != in.npos);\n+    if (fHaveColon && (colon == 0 || fBracketed || !fMultiColon)) {\n         uint16_t n;\n         if (ParseUInt16(in.substr(colon + 1), &n)) {\n             in = in.substr(0, colon);\n             portOut = n;\n         }\n     }\n-    if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n-        hostOut = in.substr(1, in.size()-2);\n-    else\n+    if (in.size() > 0 && in[0] == '[' && in[in.size() - 1] == ']') {\n+        hostOut = in.substr(1, in.size() - 2);\n+    } else {\n         hostOut = in;\n+    }\n }\n \n std::string EncodeBase64(Span<const unsigned char> input)"
      }
    ]
  },
  {
    "sha": "52dd40a9febec1f4e70d777821b6764830bdec61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmRkNDBhOWZlYmVjMWY0ZTcwZDc3NzgyMWI2NzY0ODMwYmRlYzYx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-06T19:14:08Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-16T18:52:37Z"
      },
      "message": "test: add missing netaddress include headers",
      "tree": {
        "sha": "142f3b82ca1467b18e050854dbac2fd14b0650a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142f3b82ca1467b18e050854dbac2fd14b0650a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52dd40a9febec1f4e70d777821b6764830bdec61",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBQ/nUACgkQT1chs9Dj\nkh1vFw//Qtr7rIxrFa607eTUpChPc2kgESlF9ee4NzG8muZSchKNOnkWTPlOKUdW\nok6QB/JCl380vXYBlz5BOOQ6qvj+9Q30cZwUE6kuALTp0N6+gWB/mnoEN/J2W1qS\naDYOqDMwch9BGB1K46Uop3sH5NP3XTmwiSN5vaI+j5UCkNIptgEe0M3N62fLBwFg\ncVVhNXL95zLYccNKMVz/g7ov7Ut5iEnA9nV++UAnKL2NOyzDYCqjDB9uJpKyOUzo\nXPZxpCF//7quooj6foLc/rfNY6EvuGKA2jDjYRfHLH+ibBd2GV/ei3i19NG53rwV\n4aZ7TD78wb5JmA+rh2uWttlzbqVRKsi9yZVcUJq1gA23UuohZ7qXZZNnjDHqNawj\n7AdbbT+o8b0fOX0syIY/+vbxqFFDMxEo4nhGsLK3HJO23BXRS0ARxuAT3bf3uT6H\nLjzmHzu1LW67EPL/f4gxnhe0zZRCzoomu4fUSzC25Z9OEROwBC/SKlsO+YKhbIBg\nODacblqrTr/fXA70Z6e2AhP35hZm1x1byvMManiGbgMPJLJvPfeHJ8gEs22k6NaE\nN9LRr1uqo9z3kj77F2MpVYIpIw7AfJ8S++TeXcjDgBabHl+b78tOHwoXXpqlWC7l\nxVFjDBQJ7G1JrOpWYvpYlor2vDsMroH8WM4Nr/a4tbqJEBWsc/0=\n=2sD1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIND050jQEejLEtH6fQdqRXkeuPAzNA62hTh5qkj4o5vICP/wEFy/PJdzavHi\ngMIvEYM5AxgI8QRgUPCh8AiW4NqeJBUmpACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wELPRdLt3D8ZpCXKAsGBHfCgI\n8QRgUP528AjVG8vEW1FAPQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ6yfB8DbnLMUGSoGCxXnjbgjxBGBQ\n/nfwCDPEAR7pgO9sAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BDs9cDZwyxypKfzB+qyHeFGCPEEYFD+d/AIzYsatSgipOEAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 142f3b82ca1467b18e050854dbac2fd14b0650a2\nparent 6f09c0f6b57ac01a473c587a3e51e9d477866bb0\nauthor Jon Atack <jon@atack.com> 1615058048 +0100\ncommitter Jon Atack <jon@atack.com> 1615920757 +0100\n\ntest: add missing netaddress include headers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52dd40a9febec1f4e70d777821b6764830bdec61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52dd40a9febec1f4e70d777821b6764830bdec61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52dd40a9febec1f4e70d777821b6764830bdec61/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f09c0f6b57ac01a473c587a3e51e9d477866bb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f09c0f6b57ac01a473c587a3e51e9d477866bb0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8ca4de3919bb003a3e2075eea7b401b2dbad53fd",
        "filename": "src/test/fuzz/asmap_direct.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/fuzz/asmap_direct.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/fuzz/asmap_direct.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/asmap_direct.cpp?ref=52dd40a9febec1f4e70d777821b6764830bdec61",
        "patch": "@@ -2,8 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <test/fuzz/fuzz.h>\n+#include <netaddress.h>\n #include <util/asmap.h>\n+#include <test/fuzz/fuzz.h>\n \n #include <cstdint>\n #include <optional>"
      },
      {
        "sha": "c3a6eed0896ee244923e810831c4d2a7ed73df3d",
        "filename": "src/test/fuzz/socks5.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/fuzz/socks5.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/fuzz/socks5.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/socks5.cpp?ref=52dd40a9febec1f4e70d777821b6764830bdec61",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <netaddress.h>\n #include <netbase.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "286375f7ae0770a9d8bcb7f72b26b5a0897ef974",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=52dd40a9febec1f4e70d777821b6764830bdec61",
        "patch": "@@ -5,6 +5,7 @@\n #include <blockfilter.h>\n #include <clientversion.h>\n #include <logging.h>\n+#include <netaddress.h>\n #include <netbase.h>\n #include <outputtype.h>\n #include <rpc/client.h>"
      },
      {
        "sha": "ce3d7d610487da75b5394a5278e964123212e4da",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=52dd40a9febec1f4e70d777821b6764830bdec61",
        "patch": "@@ -8,6 +8,7 @@\n #include <clientversion.h>\n #include <cstdint>\n #include <net.h>\n+#include <netaddress.h>\n #include <netbase.h>\n #include <optional.h>\n #include <serialize.h>"
      },
      {
        "sha": "33b56624a8199598bcdf11214464dde329f831ff",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dd40a9febec1f4e70d777821b6764830bdec61/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=52dd40a9febec1f4e70d777821b6764830bdec61",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <net_permissions.h>\n+#include <netaddress.h>\n #include <netbase.h>\n #include <protocol.h>\n #include <serialize.h>"
      }
    ]
  }
]