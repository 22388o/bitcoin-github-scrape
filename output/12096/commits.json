[
  {
    "sha": "f8c1457b96a315bd68aca2b535decddd644e8a9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGMxNDU3Yjk2YTMxNWJkNjhhY2EyYjUzNWRlY2RkZDY0NGU4YTlj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-01-05T09:08:41Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-04-24T03:54:45Z"
      },
      "message": "rpc/wallet/bumpfee: allow specifying output index\n\nCurrently, bumpfee cannot be used to bump a single output transaction. This should be possible, as single output transactions are special in that the exact amount doesn't usually matter (the user is emptying a wallet or using coin control to move UTXOs).",
      "tree": {
        "sha": "7a26a292ba2b95bbfb3eb1467224b871ba529852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a26a292ba2b95bbfb3eb1467224b871ba529852"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c1457b96a315bd68aca2b535decddd644e8a9c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAly/3gUACgkQV692LbM1\nMyI+3Q/8DpwGJuQuOxrFBR9CmkeclhGSEBnn2U7Xia3xJGj4Sp5HBq3ZydwL3x9/\nO18/ONqyW9Ir6Zms7NwM5GbqIc2/6aGQwpxUxxnEqXQQxM0nz8i+2pmvbc0AH15g\nR9r1DCWJwUdE9o7cpWg7JtUw/ey8LOm+60rcQXTz9KXIUsHS3lrWat5DcLaVDGFH\ny4m6yFEYDRty5VX18wBpc/XwQdQo2fnNUHz4bjwghsTKiEyaRU77A6T1cpM+srJS\nLngTLH8wpbtZMo6fv0yrwnlPc1JtEZQ3yv0JJrIgElvxl2fmYIByd3d1wS9TL6bU\nRkJGFpzKejPIbMeMK1tmiF4uhmQ54a3w8Hv4QTdpfwTvGaWW0LVhVTGB2p69Qsag\nZTnlBRruS+3ajkfvEISNArQn0vWzzbCSSdMnRYL2lRdl4ZOXGrKe63havRuCNYDd\nhZ2otjYEcMKLI1O2M4n1IYDUoY8tayiF3s4fxFJr1ZkU1MF0DhLHDbT/owiFXWkz\n0Tb87SGiPR7RuaF8xzOPMU+KA4TIwDwuYca8bbDJu1vCK/RCYSfm8Wef8ktmAsd+\nbKo9kbsZ71sKz+hGQn0aXzZLpcHLjqDORpgqljA6f9nUzV77znqRUN4cyHFU3n89\nv2+EA1pCntKTkvR0tLzIZBLC0PPs8wWDPUibAChV6NJ7enfkl4o=\n=ruWM\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a26a292ba2b95bbfb3eb1467224b871ba529852\nparent 40a720acb8472f6e8afdf8b8d1897f35d58daf1f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1515143321 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1556078085 +0900\n\nrpc/wallet/bumpfee: allow specifying output index\n\nCurrently, bumpfee cannot be used to bump a single output transaction. This should be possible, as single output transactions are special in that the exact amount doesn't usually matter (the user is emptying a wallet or using coin control to move UTXOs).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c1457b96a315bd68aca2b535decddd644e8a9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c1457b96a315bd68aca2b535decddd644e8a9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c1457b96a315bd68aca2b535decddd644e8a9c/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a720acb8472f6e8afdf8b8d1897f35d58daf1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a720acb8472f6e8afdf8b8d1897f35d58daf1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a720acb8472f6e8afdf8b8d1897f35d58daf1f"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 52,
      "deletions": 25
    },
    "files": [
      {
        "sha": "957ffa3ca1388f1534847d19edbad7802ce7c28a",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "patch": "@@ -264,16 +264,17 @@ class WalletImpl : public Wallet\n     bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n         CAmount total_fee,\n+        int32_t reduce_output,\n         std::vector<std::string>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n         if (total_fee > 0) {\n-            return feebumper::CreateTotalBumpTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+            return feebumper::CreateTotalBumpTransaction(m_wallet.get(), txid, coin_control, total_fee, reduce_output, errors, old_fee, new_fee, mtx) ==\n                 feebumper::Result::OK;\n         } else {\n-            return feebumper::CreateRateBumpTransaction(m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) ==\n+            return feebumper::CreateRateBumpTransaction(m_wallet.get(), txid, coin_control, reduce_output, errors, old_fee, new_fee, mtx) ==\n                 feebumper::Result::OK;\n         }\n     }"
      },
      {
        "sha": "ce907ecb542704af07386b9ff0068cdc256a0da9",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "patch": "@@ -152,6 +152,7 @@ class Wallet\n     virtual bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n         CAmount total_fee,\n+        int32_t reduce_output,\n         std::vector<std::string>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,"
      },
      {
        "sha": "c45bba154ec2fb39252f31d01624997e14b838e7",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "patch": "@@ -516,7 +516,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    if (!m_wallet->createBumpTransaction(hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx)) {\n+    if (!m_wallet->createBumpTransaction(hash, coin_control, 0 /* totalFee */, -1 /* reduce_output */, errors, old_fee, new_fee, mtx)) {\n         QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n             (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n          return false;"
      },
      {
        "sha": "38b9b6ce4667e257864b8dfe6521bb1a97c95b0f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 20,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "patch": "@@ -75,8 +75,9 @@ bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n     return res == feebumper::Result::OK;\n }\n \n-Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n-                                  CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control,\n+                        CAmount total_fee, int32_t reduce_output, std::vector<std::string>& errors,\n+                        CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n     new_fee = total_fee;\n \n@@ -89,22 +90,28 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n         return Result::INVALID_ADDRESS_OR_KEY;\n     }\n     const CWalletTx& wtx = it->second;\n+    if (reduce_output < -1 || reduce_output >= int64_t(wtx.tx->vout.size())) {\n+        errors.push_back(strprintf(\"Change output out of bounds [0..%zu]\", wtx.tx->vout.size()-1));\n+        return Result::INVALID_PARAMETER;\n+    }\n \n     Result result = PreconditionChecks(*locked_chain, wallet, wtx, errors);\n     if (result != Result::OK) {\n         return result;\n     }\n \n-    // figure out which output was change\n-    // if there was no change output or multiple change outputs, fail\n-    int nOutput = -1;\n-    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (wallet->IsChange(wtx.tx->vout[i])) {\n-            if (nOutput != -1) {\n-                errors.push_back(\"Transaction has multiple change outputs\");\n-                return Result::WALLET_ERROR;\n+    int nOutput = reduce_output;\n+    if (nOutput == -1) {\n+        // figure out which output was change\n+        // if there was no change output or multiple change outputs, fail\n+        for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+            if (wallet->IsChange(wtx.tx->vout[i])) {\n+                if (nOutput != -1) {\n+                    errors.push_back(\"Transaction has multiple change outputs\");\n+                    return Result::WALLET_ERROR;\n+                }\n+                nOutput = i;\n             }\n-            nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n@@ -146,12 +153,12 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n-     const CAmount max_tx_fee = wallet->chain().maxTxFee();\n-     if (new_fee > max_tx_fee) {\n-         errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                               FormatMoney(new_fee), FormatMoney(max_tx_fee)));\n-         return Result::WALLET_ERROR;\n-     }\n+    const CAmount max_tx_fee = wallet->chain().maxTxFee();\n+    if (new_fee > max_tx_fee) {\n+        errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                            FormatMoney(new_fee), FormatMoney(max_tx_fee)));\n+        return Result::WALLET_ERROR;\n+    }\n \n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n@@ -200,8 +207,8 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n }\n \n \n-Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,\n-                                 CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, int32_t reduce_output,\n+                                std::vector<std::string>& errors, CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n     // We are going to modify coin control later, copy to re-use\n     CCoinControl new_coin_control(coin_control);\n@@ -215,6 +222,10 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n         return Result::INVALID_ADDRESS_OR_KEY;\n     }\n     const CWalletTx& wtx = it->second;\n+    if (reduce_output < -1 || reduce_output >= int64_t(wtx.tx->vout.size())) {\n+        errors.push_back(strprintf(\"Change output out of bounds [0..%zu]\", wtx.tx->vout.size()-1));\n+        return Result::INVALID_PARAMETER;\n+    }\n \n     Result result = PreconditionChecks(*locked_chain, wallet, wtx, errors);\n     if (result != Result::OK) {\n@@ -223,8 +234,9 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n \n     // Fill in recipients(and preserve a single change key if there is one)\n     std::vector<CRecipient> recipients;\n+    const auto* reduce_output_vout = reduce_output > -1 && (size_t)reduce_output < wtx.tx->vout.size() ? &wtx.tx->vout[reduce_output] : nullptr;\n     for (const auto& output : wtx.tx->vout) {\n-        if (!wallet->IsChange(output)) {\n+        if (reduce_output_vout ? output != *reduce_output_vout : !wallet->IsChange(output)) {\n             CRecipient recipient = {output.scriptPubKey, output.nValue, false};\n             recipients.push_back(recipient);\n         } else {"
      },
      {
        "sha": "e78c014c3cbbb2e497cde5243fa0358d37eda493",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "patch": "@@ -33,6 +33,7 @@ Result CreateTotalBumpTransaction(const CWallet* wallet,\n                          const uint256& txid,\n                          const CCoinControl& coin_control,\n                          CAmount total_fee,\n+                         int32_t reduce_output,\n                          std::vector<std::string>& errors,\n                          CAmount& old_fee,\n                          CAmount& new_fee,\n@@ -42,6 +43,7 @@ Result CreateTotalBumpTransaction(const CWallet* wallet,\n Result CreateRateBumpTransaction(CWallet* wallet,\n                          const uint256& txid,\n                          const CCoinControl& coin_control,\n+                         int32_t reduce_output,\n                          std::vector<std::string>& errors,\n                          CAmount& old_fee,\n                          CAmount& new_fee,"
      },
      {
        "sha": "35cd611137eb4435bc961e670616c167838939b1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8c1457b96a315bd68aca2b535decddd644e8a9c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "patch": "@@ -3169,6 +3169,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n                 \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n                 \"If `totalFee` is given, adding inputs is not supported, so there must be a single change output that is big enough or it will fail.\\n\"\n+                \"If an explicit \\\"reduce_output\\\" has been picked, that will be decreased instead.\\n\"\n                 \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n                 \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n                 \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n@@ -3196,6 +3197,8 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             \"         \\\"UNSET\\\"\\n\"\n             \"         \\\"ECONOMICAL\\\"\\n\"\n             \"         \\\"CONSERVATIVE\\\"\"},\n+                            {\"reduce_output\", RPCArg::Type::NUM, /* default */ \"\", \"Increase the fee by reducing the output value of the output at\\n\"\n+            \"                         the given index. NOTE: The recipient of the given output will receive a smaller amount!\"},\n                         },\n                         \"options\"},\n                 },\n@@ -3219,6 +3222,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n     // optional parameters\n     CAmount totalFee = 0;\n+    int32_t reduce_output = -1;\n     CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;\n     if (!request.params[1].isNull()) {\n@@ -3229,6 +3233,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 {\"totalFee\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+                {\"reduce_output\", UniValueType(UniValue::VNUM)},\n             },\n             true, true);\n \n@@ -3251,6 +3256,12 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n             }\n         }\n+        if (options.exists(\"reduce_output\")) {\n+            reduce_output = options[\"reduce_output\"].get_int64();\n+            if (reduce_output < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid reduce_output parameter (cannot be negative)\");\n+            }\n+        }\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -3269,10 +3280,10 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     feebumper::Result res;\n     if (totalFee > 0) {\n         // Targeting total fee bump. Requires a change output of sufficient size.\n-        res = feebumper::CreateTotalBumpTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+        res = feebumper::CreateTotalBumpTransaction(pwallet, hash, coin_control, totalFee, reduce_output, errors, old_fee, new_fee, mtx);\n     } else {\n         // Targeting feerate bump.\n-        res = feebumper::CreateRateBumpTransaction(pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n+        res = feebumper::CreateRateBumpTransaction(pwallet, hash, coin_control, reduce_output, errors, old_fee, new_fee, mtx);\n     }\n     if (res != feebumper::Result::OK) {\n         switch(res) {"
      }
    ]
  },
  {
    "sha": "086313c8b1c8836e5ec1eb9028232b16549a08a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODYzMTNjOGIxYzg4MzZlNWVjMWViOTAyODIzMmIxNjU0OWEwOGE1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-01-05T09:59:19Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-04-24T03:54:45Z"
      },
      "message": "[test] Test single-output transaction bumpfee",
      "tree": {
        "sha": "f7e418ef03cb918937221b5bb46c446cee82db00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7e418ef03cb918937221b5bb46c446cee82db00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/086313c8b1c8836e5ec1eb9028232b16549a08a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAly/3gUACgkQV692LbM1\nMyJRHA/8DgJzqf8Gr7dc5TZnhcHcyBPmrvqP74+f+d5UDp68uhAi7ZX8dDvlMlJ6\nXzaDgy47ICkqzICCrczbPOtQ3SCnRxc6VIEwpaGxzpR8JZr/CNZbjgkPe2FNazxC\nsHxR2bpNElx0jE7/kdRISTfRoG/xKbPTgkg6os9IXdWw9XbL53cQp/ycOUtE7tpL\nqJBMi34Igb2wfcYFkYEpvUSOdYeGqVea2DWDpEMGF88h25Yi31kxsYAstyX6y3ws\nADJg2wUfkLRPswG9fdJCyUXmsHW+uixh8DdtKqn3QWZsPjDnhkELxYvBLttHMPQ9\nBTa9dK7nTU7eGExtfu8X0MPIJm0JRyZHsUhEhJ7XfM2CdW83rvQZKBqjKsLL/Tvo\nKeIBr+rUCQKycvKQbdiBDLMrm8VAsp/y6D4/umMZvE2poxPRG5T1R+mDTANsGihB\n4m9BbiFFHcN7qJjQmeugdn3lPiVRcHroaoUg29vqU7KUepflJdRpG0hgY9n+h7Ss\nlXaRn9junlI59WhwqNQEvvOZVAwbj0fl1HCJEka9F9idSXKHC/v4CUZUDQh99HGT\nUC67PVOu2Ja44MEdtUy93mnCrEwJ2CHgU7CCtb8tzARQT7ux6pOY6f+bfHlbyY2+\nSvnhrZlEeFsg9U4Ye1XcbvUn0ghMdom8NHyw7hUM9100mSjL+SU=\n=3AtX\n-----END PGP SIGNATURE-----",
        "payload": "tree f7e418ef03cb918937221b5bb46c446cee82db00\nparent f8c1457b96a315bd68aca2b535decddd644e8a9c\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1515146359 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1556078085 +0900\n\n[test] Test single-output transaction bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086313c8b1c8836e5ec1eb9028232b16549a08a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/086313c8b1c8836e5ec1eb9028232b16549a08a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086313c8b1c8836e5ec1eb9028232b16549a08a5/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8c1457b96a315bd68aca2b535decddd644e8a9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c1457b96a315bd68aca2b535decddd644e8a9c"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a9b8500ead76a7afadbe4cbedfea8749785ce0d",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/086313c8b1c8836e5ec1eb9028232b16549a08a5/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/086313c8b1c8836e5ec1eb9028232b16549a08a5/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=086313c8b1c8836e5ec1eb9028232b16549a08a5",
        "patch": "@@ -78,6 +78,8 @@ def run_test(self):\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n+        test_single_output_bump(rbf_node, dest_address)\n+        test_explicit_reduce_output(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n         test_change_script_match(rbf_node, dest_address)\n         # These tests wipe out a number of utxos that are expected in other tests\n@@ -336,6 +338,43 @@ def get_change_address(tx):\n     bumped_rate_tx = rbf_node.bumpfee(bumped_total_tx[\"txid\"])\n     assert_equal(change_addresses, get_change_address(bumped_rate_tx['txid']))\n \n+def test_single_output_bump(node, dest_address):\n+    tx_input = dict(\n+        sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == Decimal(\"0.00100000\")))\n+    rawtx = node.createrawtransaction([tx_input], {dest_address: Decimal(\"0.00099000\")})\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n+    txid = node.sendrawtransaction(signedtx[\"hex\"])\n+    bumped_tx = node.bumpfee(txid, {\"reduce_output\": 0})\n+    bumped_txob = node.getrawtransaction(bumped_tx[\"txid\"], True)\n+    # Only one vout\n+    assert_equal(1, len(bumped_txob[\"vout\"]))\n+    # The vout should have decreased in value, which means 0.00099 > value\n+    assert_greater_than(Decimal(\"0.00099000\"), bumped_txob[\"vout\"][0][\"value\"])\n+\n+def test_explicit_reduce_output(node, dest_address):\n+    txid = spend_one_input(node, dest_address)\n+    txidob = node.getrawtransaction(txid, True)\n+    # OOB checks\n+    assert_raises_rpc_error(-8, \"Invalid reduce_output parameter\", node.bumpfee, txid, {\"reduce_output\": -2})\n+    assert_raises_rpc_error(-8, \"Change output out of bounds\", node.bumpfee, txid, {\"reduce_output\": len(txidob[\"vout\"])})\n+    # Type checks\n+    assert_raises_rpc_error(-3, \"Expected type number\", node.bumpfee, txid, {\"reduce_output\": False})\n+    assert_raises_rpc_error(-3, \"Expected type number\", node.bumpfee, txid, {\"reduce_output\": True})\n+    assert_raises_rpc_error(-3, \"Expected type number\", node.bumpfee, txid, {\"reduce_output\": \"HELLO\"})\n+    # Figure out which is which\n+    spendidx = 0 if txidob[\"vout\"][0][\"value\"] == Decimal(\"0.00050000\") else 1\n+    bumped_tx = node.bumpfee(txid, {\"reduce_output\": spendidx})\n+    bumped_txob = node.getrawtransaction(bumped_tx[\"txid\"], True)\n+    assert_greater_than(Decimal(\"0.00050000\"), bumped_txob[\"vout\"][spendidx][\"value\"])\n+    assert_equal(Decimal(\"0.00049000\"), bumped_txob[\"vout\"][1 - spendidx][\"value\"])\n+    txid = spend_one_input(node, dest_address)\n+    txidob = node.getrawtransaction(txid, True)\n+    spendidx = 0 if txidob[\"vout\"][0][\"value\"] == Decimal(\"0.00050000\") else 1\n+    bumped_tx = node.bumpfee(txid, {\"reduce_output\": 1 - spendidx})\n+    bumped_txob = node.getrawtransaction(bumped_tx[\"txid\"], True)\n+    assert_equal(Decimal(\"0.00050000\"), bumped_txob[\"vout\"][spendidx][\"value\"])\n+    assert_greater_than(Decimal(\"0.00049000\"), bumped_txob[\"vout\"][1 - spendidx][\"value\"])\n+\n def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     tx_input = dict(\n         sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == Decimal(\"0.00100000\")))"
      }
    ]
  }
]