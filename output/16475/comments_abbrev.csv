DrahtBot,2019-07-27 22:25:54,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16451](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16451.html) (Remove CMerkleTx by jnewbery)\n* [#16341](h",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515717703,515717703,
jnewbery,2019-07-28 19:14:51,"Concept ACK. This seems like an improvement to code self-documentation.\n\nI think this would be even more helpful if the `DBKeys` namespace had documentation for each of the keys and what they're used for.\n\nWe could go further and change this to an enum, which would ensure that only known keys are read/written, and would allow us to tidy the long sequence of if-else statments in `ReadKeyVal",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515787564,515787564,
MarcoFalke,2019-07-29 13:08:20,"> why not use an enum\n\nThe underlying type on an enum in cpp can only be integer, not `std::string`.\n\nI could switch it to an enum and then add helper methods for `std::string -> enum` and `enum -> std::string`, but I don't see the benefit.\n\n> We could go further and change this to an enum, which would ensure that only known keys are read/written\n\nI don't understand how this would ",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515984039,515984039,
MarcoFalke,2019-07-29 13:11:33,"> and would allow us to tidy the long sequence of if-else statments in ReadKeyValue() into a switch statement.\n\nYou'd still have to do the if-else statements elsewhere, so I don't see the benefit. I know a log(N) map lookup would also work, but I think the computational complexity shouldn't be a concern here.",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515985121,515985121,
laanwj,2019-07-29 13:31:01,"ACK fa6f22bf44c0f741285f27f27ac18e9679802e5e, I'm a big fan of this kind of change as it prevents typos, which can happen with 'magic' strings in the code.",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515992131,515992131,
jnewbery,2019-07-29 13:50:18,"> I don't understand how this would prevent anyone from inlining a string literal (bypassing the enum).\n\nThe idea would be to change `WriteIC` and `EraseIC` to take the enum rather than a string.\n\nChanging this to an enum was a suggested follow-up. This PR is a useful change by itself.",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515999624,515999624,
MarcoFalke,2019-07-29 22:38:44,"Thanks for the plethora of suggestions of follow-up refactorings. To not invalidate the ACKs and to not scope creep this change, which should be minimal, but still an improvement, I will leave them for later.",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-516188836,516188836,
jnewbery,2019-07-30 15:55:39,"post-merge ACK fa6f22bf44c0f741285f27f27ac18e9679802e5e\n\nPotential follow-up PRs:\n\n- comment each of the `DBKeys` where they're defined (https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515787564)\n- change from a namespace of strings to an enum (https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515787564)\n- make a const set of the types that are unused and are keys (",https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-516481510,516481510,
promag,2019-07-28 21:22:50,"fa6f22bf44c0f741285f27f27ac18e9679802e5e\n\nCould go further and just implement `Unserialize`?",https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308018873,308018873,src/wallet/wallet.h
MarcoFalke,2019-07-29 12:36:40,"I kept the changes to a minimum. Happy to add a commit for this, if other think it is useful.",https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308204789,308204789,src/wallet/wallet.h
achow101,2019-07-29 13:58:03,(maybe for a followup) I think it would be better to define a const set of the types that are unused but kept around to avoid triggering unknown record warnings. Then we could change this if to be checking membership in that set.,https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308244486,308244486,src/wallet/walletdb.cpp
achow101,2019-07-29 13:58:41,(maybe for a followup) I think it would be better to define a const set of the types that are keys. Then we could change this function to be returning membership in that set.,https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308244845,308244845,src/wallet/walletdb.cpp
