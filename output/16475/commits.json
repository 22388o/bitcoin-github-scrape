[
  {
    "sha": "fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZkYzdmYTVmZGZkNzZjNmRkNWY3YWU2OTNhMmZiNGUzN2UyNzFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-27T19:50:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-27T20:31:34Z"
      },
      "message": "wallet: Enumerate walletdb keys",
      "tree": {
        "sha": "c3f13c91c4fa1b4223d7fa15977feabe76b04a41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3f13c91c4fa1b4223d7fa15977feabe76b04a41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh5mAwAixAzWZbvwEBeC+NSdlO6fkDG+bCGiopta8Q0u1q/LNFM/u23pEmtYyy5\nAiztpbn3PNhqnZOVlpiNyTr3YRqUZxFBSzqHsh+Hk6W8O8B6Sn2Gf3e1HhV2EapU\nJNqagKiTgNBWwk8xRSHEzubys5xux/hxzlWodysGK2oc7MvBlPIl5fMfCwu4x+pq\nK1kRAbHTqmhyTnnBnd4Dm3kL4NKoFLZ1LqWB0s5xb9mdFEFNeQ2nZ/KlzSdXtrNq\n1YP1wDneHSzXDQzHRMzMSFPA2n3tlEMpbORyFOmGU7H9eBfKiWUUHgejsWctSCk3\naZHwd+BvvFuh5IC6z0B4/QT2iEmim2Uyym99yCDAwP0mtd/Hydw4BhRz5jG5o74V\nhLPzcVCu8PuFTk1m0Cmz2sgHmn43eqdx8dEguSyAd4ffwAZKFKtaoxo+feE+gazJ\nxcYvzSPp4R0D03R01v4Xe06cAHpmO8q3iK1EbbqcKJ5PYjJn2Iyi5WqOZItoeVu0\n/xt/S0la\n=13Of\n-----END PGP SIGNATURE-----",
        "payload": "tree c3f13c91c4fa1b4223d7fa15977feabe76b04a41\nparent febf3a856bcfb8fef2cb4ddcb8d1e0cab8a22580\nauthor MarcoFalke <falke.marco@gmail.com> 1564257036 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1564259494 -0400\n\nwallet: Enumerate walletdb keys\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "febf3a856bcfb8fef2cb4ddcb8d1e0cab8a22580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/febf3a856bcfb8fef2cb4ddcb8d1e0cab8a22580",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/febf3a856bcfb8fef2cb4ddcb8d1e0cab8a22580"
      }
    ],
    "stats": {
      "total": 207,
      "additions": 113,
      "deletions": 94
    },
    "files": [
      {
        "sha": "f5b90d3a9cda1b22ee87ab62aff2456c453febdc",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 94,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
        "patch": "@@ -21,45 +21,70 @@\n \n #include <boost/thread.hpp>\n \n+namespace DBKeys {\n+const std::string ACENTRY{\"acentry\"};\n+const std::string BESTBLOCK_NOMERKLE{\"bestblock_nomerkle\"};\n+const std::string BESTBLOCK{\"bestblock\"};\n+const std::string CRYPTED_KEY{\"ckey\"};\n+const std::string CSCRIPT{\"cscript\"};\n+const std::string DEFAULTKEY{\"defaultkey\"};\n+const std::string DESTDATA{\"destdata\"};\n+const std::string FLAGS{\"flags\"};\n+const std::string HDCHAIN{\"hdchain\"};\n+const std::string KEYMETA{\"keymeta\"};\n+const std::string KEY{\"key\"};\n+const std::string MASTER_KEY{\"mkey\"};\n+const std::string MINVERSION{\"minversion\"};\n+const std::string NAME{\"name\"};\n+const std::string OLD_KEY{\"wkey\"};\n+const std::string ORDERPOSNEXT{\"orderposnext\"};\n+const std::string POOL{\"pool\"};\n+const std::string PURPOSE{\"purpose\"};\n+const std::string TX{\"tx\"};\n+const std::string VERSION{\"version\"};\n+const std::string WATCHMETA{\"watchmeta\"};\n+const std::string WATCHS{\"watchs\"};\n+} // namespace DBKeys\n+\n //\n // WalletBatch\n //\n \n bool WalletBatch::WriteName(const std::string& strAddress, const std::string& strName)\n {\n-    return WriteIC(std::make_pair(std::string(\"name\"), strAddress), strName);\n+    return WriteIC(std::make_pair(DBKeys::NAME, strAddress), strName);\n }\n \n bool WalletBatch::EraseName(const std::string& strAddress)\n {\n     // This should only be used for sending addresses, never for receiving addresses,\n     // receiving addresses must always have an address book entry if they're not change return.\n-    return EraseIC(std::make_pair(std::string(\"name\"), strAddress));\n+    return EraseIC(std::make_pair(DBKeys::NAME, strAddress));\n }\n \n bool WalletBatch::WritePurpose(const std::string& strAddress, const std::string& strPurpose)\n {\n-    return WriteIC(std::make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n+    return WriteIC(std::make_pair(DBKeys::PURPOSE, strAddress), strPurpose);\n }\n \n bool WalletBatch::ErasePurpose(const std::string& strAddress)\n {\n-    return EraseIC(std::make_pair(std::string(\"purpose\"), strAddress));\n+    return EraseIC(std::make_pair(DBKeys::PURPOSE, strAddress));\n }\n \n bool WalletBatch::WriteTx(const CWalletTx& wtx)\n {\n-    return WriteIC(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n+    return WriteIC(std::make_pair(DBKeys::TX, wtx.GetHash()), wtx);\n }\n \n bool WalletBatch::EraseTx(uint256 hash)\n {\n-    return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n+    return EraseIC(std::make_pair(DBKeys::TX, hash));\n }\n \n bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n {\n-    return WriteIC(std::make_pair(std::string(\"keymeta\"), pubkey), meta, overwrite);\n+    return WriteIC(std::make_pair(DBKeys::KEYMETA, pubkey), meta, overwrite);\n }\n \n bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n@@ -74,7 +99,7 @@ bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n     vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n     vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n \n-    return WriteIC(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n+    return WriteIC(std::make_pair(DBKeys::KEY, vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n }\n \n bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n@@ -85,75 +110,75 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n         return false;\n     }\n \n-    if (!WriteIC(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false)) {\n+    if (!WriteIC(std::make_pair(DBKeys::CRYPTED_KEY, vchPubKey), vchCryptedSecret, false)) {\n         return false;\n     }\n-    EraseIC(std::make_pair(std::string(\"key\"), vchPubKey));\n-    EraseIC(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+    EraseIC(std::make_pair(DBKeys::KEY, vchPubKey));\n+    EraseIC(std::make_pair(DBKeys::OLD_KEY, vchPubKey));\n     return true;\n }\n \n bool WalletBatch::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n {\n-    return WriteIC(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+    return WriteIC(std::make_pair(DBKeys::MASTER_KEY, nID), kMasterKey, true);\n }\n \n bool WalletBatch::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    return WriteIC(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+    return WriteIC(std::make_pair(DBKeys::CSCRIPT, hash), redeemScript, false);\n }\n \n bool WalletBatch::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"watchmeta\"), dest), keyMeta)) {\n+    if (!WriteIC(std::make_pair(DBKeys::WATCHMETA, dest), keyMeta)) {\n         return false;\n     }\n-    return WriteIC(std::make_pair(std::string(\"watchs\"), dest), '1');\n+    return WriteIC(std::make_pair(DBKeys::WATCHS, dest), '1');\n }\n \n bool WalletBatch::EraseWatchOnly(const CScript &dest)\n {\n-    if (!EraseIC(std::make_pair(std::string(\"watchmeta\"), dest))) {\n+    if (!EraseIC(std::make_pair(DBKeys::WATCHMETA, dest))) {\n         return false;\n     }\n-    return EraseIC(std::make_pair(std::string(\"watchs\"), dest));\n+    return EraseIC(std::make_pair(DBKeys::WATCHS, dest));\n }\n \n bool WalletBatch::WriteBestBlock(const CBlockLocator& locator)\n {\n-    WriteIC(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n-    return WriteIC(std::string(\"bestblock_nomerkle\"), locator);\n+    WriteIC(DBKeys::BESTBLOCK, CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n+    return WriteIC(DBKeys::BESTBLOCK_NOMERKLE, locator);\n }\n \n bool WalletBatch::ReadBestBlock(CBlockLocator& locator)\n {\n-    if (m_batch.Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n-    return m_batch.Read(std::string(\"bestblock_nomerkle\"), locator);\n+    if (m_batch.Read(DBKeys::BESTBLOCK, locator) && !locator.vHave.empty()) return true;\n+    return m_batch.Read(DBKeys::BESTBLOCK_NOMERKLE, locator);\n }\n \n bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n-    return WriteIC(std::string(\"orderposnext\"), nOrderPosNext);\n+    return WriteIC(DBKeys::ORDERPOSNEXT, nOrderPosNext);\n }\n \n bool WalletBatch::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n-    return m_batch.Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    return m_batch.Read(std::make_pair(DBKeys::POOL, nPool), keypool);\n }\n \n bool WalletBatch::WritePool(int64_t nPool, const CKeyPool& keypool)\n {\n-    return WriteIC(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    return WriteIC(std::make_pair(DBKeys::POOL, nPool), keypool);\n }\n \n bool WalletBatch::ErasePool(int64_t nPool)\n {\n-    return EraseIC(std::make_pair(std::string(\"pool\"), nPool));\n+    return EraseIC(std::make_pair(DBKeys::POOL, nPool));\n }\n \n bool WalletBatch::WriteMinVersion(int nVersion)\n {\n-    return WriteIC(std::string(\"minversion\"), nVersion);\n+    return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n class CWalletScanState {\n@@ -180,20 +205,15 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         // Taking advantage of the fact that pair serialization\n         // is just the two items serialized one after the other\n         ssKey >> strType;\n-        if (strType == \"name\")\n-        {\n+        if (strType == DBKeys::NAME) {\n             std::string strAddress;\n             ssKey >> strAddress;\n             ssValue >> pwallet->mapAddressBook[DecodeDestination(strAddress)].name;\n-        }\n-        else if (strType == \"purpose\")\n-        {\n+        } else if (strType == DBKeys::PURPOSE) {\n             std::string strAddress;\n             ssKey >> strAddress;\n             ssValue >> pwallet->mapAddressBook[DecodeDestination(strAddress)].purpose;\n-        }\n-        else if (strType == \"tx\")\n-        {\n+        } else if (strType == DBKeys::TX) {\n             uint256 hash;\n             ssKey >> hash;\n             CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n@@ -227,19 +247,15 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 wss.fAnyUnordered = true;\n \n             pwallet->LoadToWallet(wtx);\n-        }\n-        else if (strType == \"watchs\")\n-        {\n+        } else if (strType == DBKeys::WATCHS) {\n             wss.nWatchKeys++;\n             CScript script;\n             ssKey >> script;\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-        }\n-        else if (strType == \"key\" || strType == \"wkey\")\n-        {\n+        } else if (strType == DBKeys::KEY || strType == DBKeys::OLD_KEY) {\n             CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n             if (!vchPubKey.IsValid())\n@@ -251,8 +267,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CPrivKey pkey;\n             uint256 hash;\n \n-            if (strType == \"key\")\n-            {\n+            if (strType == DBKeys::KEY) {\n                 wss.nKeys++;\n                 ssValue >> pkey;\n             } else {\n@@ -261,10 +276,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 pkey = wkey.vchPrivKey;\n             }\n \n-            // Old wallets store keys as \"key\" [pubkey] => [privkey]\n+            // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n             // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n             // using EC operations as a checksum.\n-            // Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+            // Newer wallets store keys as DBKeys::KEY [pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n             // remaining backwards-compatible.\n             try\n             {\n@@ -301,9 +316,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n                 return false;\n             }\n-        }\n-        else if (strType == \"mkey\")\n-        {\n+        } else if (strType == DBKeys::MASTER_KEY) {\n             unsigned int nID;\n             ssKey >> nID;\n             CMasterKey kMasterKey;\n@@ -316,9 +329,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             pwallet->mapMasterKeys[nID] = kMasterKey;\n             if (pwallet->nMasterKeyMaxID < nID)\n                 pwallet->nMasterKeyMaxID = nID;\n-        }\n-        else if (strType == \"ckey\")\n-        {\n+        } else if (strType == DBKeys::CRYPTED_KEY) {\n             CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n             if (!vchPubKey.IsValid())\n@@ -336,27 +347,21 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n             wss.fIsEncrypted = true;\n-        }\n-        else if (strType == \"keymeta\")\n-        {\n+        } else if (strType == DBKeys::KEYMETA) {\n             CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n-        }\n-        else if (strType == \"watchmeta\")\n-        {\n+        } else if (strType == DBKeys::WATCHMETA) {\n             CScript script;\n             ssKey >> script;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->LoadScriptMetadata(CScriptID(script), keyMeta);\n-        }\n-        else if (strType == \"defaultkey\")\n-        {\n+        } else if (strType == DBKeys::DEFAULTKEY) {\n             // We don't want or need the default key, but if there is one set,\n             // we want to make sure that it is valid so that we can detect corruption\n             CPubKey vchPubKey;\n@@ -365,18 +370,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: Default Key corrupt\";\n                 return false;\n             }\n-        }\n-        else if (strType == \"pool\")\n-        {\n+        } else if (strType == DBKeys::POOL) {\n             int64_t nIndex;\n             ssKey >> nIndex;\n             CKeyPool keypool;\n             ssValue >> keypool;\n \n             pwallet->LoadKeyPool(nIndex, keypool);\n-        }\n-        else if (strType == \"cscript\")\n-        {\n+        } else if (strType == DBKeys::CSCRIPT) {\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n@@ -386,33 +387,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadCScript failed\";\n                 return false;\n             }\n-        }\n-        else if (strType == \"orderposnext\")\n-        {\n+        } else if (strType == DBKeys::ORDERPOSNEXT) {\n             ssValue >> pwallet->nOrderPosNext;\n-        }\n-        else if (strType == \"destdata\")\n-        {\n+        } else if (strType == DBKeys::DESTDATA) {\n             std::string strAddress, strKey, strValue;\n             ssKey >> strAddress;\n             ssKey >> strKey;\n             ssValue >> strValue;\n             pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        }\n-        else if (strType == \"hdchain\")\n-        {\n+        } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n             pwallet->SetHDChain(chain, true);\n-        } else if (strType == \"flags\") {\n+        } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n             ssValue >> flags;\n             if (!pwallet->SetWalletFlags(flags, true)) {\n                 strErr = \"Error reading wallet database: Unknown non-tolerable wallet flags found\";\n                 return false;\n             }\n-        } else if (strType != \"bestblock\" && strType != \"bestblock_nomerkle\" &&\n-                strType != \"minversion\" && strType != \"acentry\" && strType != \"version\") {\n+        } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n+                   strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY && strType != DBKeys::VERSION) {\n             wss.m_unknown_records++;\n         }\n     } catch (const std::exception& e) {\n@@ -431,8 +426,8 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n bool WalletBatch::IsKeyType(const std::string& strType)\n {\n-    return (strType== \"key\" || strType == \"wkey\" ||\n-            strType == \"mkey\" || strType == \"ckey\");\n+    return (strType == DBKeys::KEY || strType == DBKeys::OLD_KEY ||\n+            strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n }\n \n DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n@@ -444,8 +439,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     LOCK(pwallet->cs_wallet);\n     try {\n         int nMinVersion = 0;\n-        if (m_batch.Read((std::string)\"minversion\", nMinVersion))\n-        {\n+        if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n             if (nMinVersion > FEATURE_LATEST)\n                 return DBErrors::TOO_NEW;\n             pwallet->LoadMinVersion(nMinVersion);\n@@ -479,15 +473,15 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             {\n                 // losing keys is considered a catastrophic error, anything else\n                 // we assume the user can live with:\n-                if (IsKeyType(strType) || strType == \"defaultkey\") {\n+                if (IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\n                     result = DBErrors::CORRUPT;\n-                } else if(strType == \"flags\") {\n+                } else if (strType == DBKeys::FLAGS) {\n                     // reading the wallet flags can only fail if unknown flags are present\n                     result = DBErrors::TOO_NEW;\n                 } else {\n                     // Leave other errors alone, if we try to fix them we might make things worse.\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n-                    if (strType == \"tx\")\n+                    if (strType == DBKeys::TX)\n                         // Rescan if there is a bad transaction record:\n                         gArgs.SoftSetBoolArg(\"-rescan\", true);\n                 }\n@@ -514,7 +508,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n \n     // Last client version to open this wallet, was previously the file version number\n     int last_client = CLIENT_VERSION;\n-    m_batch.Read(std::string(\"version\"), last_client);\n+    m_batch.Read(DBKeys::VERSION, last_client);\n \n     int wallet_version = pwallet->GetVersion();\n     pwallet->WalletLogPrintf(\"Wallet File Version = %d\\n\", wallet_version > 0 ? wallet_version : last_client);\n@@ -534,7 +528,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         return DBErrors::NEED_REWRITE;\n \n     if (last_client < CLIENT_VERSION) // Update\n-        m_batch.Write(std::string(\"version\"), CLIENT_VERSION);\n+        m_batch.Write(DBKeys::VERSION, CLIENT_VERSION);\n \n     if (wss.fAnyUnordered)\n         result = pwallet->ReorderTransactions();\n@@ -556,8 +550,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n \n     try {\n         int nMinVersion = 0;\n-        if (m_batch.Read((std::string)\"minversion\", nMinVersion))\n-        {\n+        if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n             if (nMinVersion > FEATURE_LATEST)\n                 return DBErrors::TOO_NEW;\n         }\n@@ -586,7 +579,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n \n             std::string strType;\n             ssKey >> strType;\n-            if (strType == \"tx\") {\n+            if (strType == DBKeys::TX) {\n                 uint256 hash;\n                 ssKey >> hash;\n \n@@ -721,8 +714,9 @@ bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, C\n         fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue,\n                                dummyWss, strType, strErr);\n     }\n-    if (!IsKeyType(strType) && strType != \"hdchain\")\n+    if (!IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n         return false;\n+    }\n     if (!fReadOK)\n     {\n         LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n@@ -744,23 +738,23 @@ bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::string& w\n \n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n-    return WriteIC(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n+    return WriteIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)), value);\n }\n \n bool WalletBatch::EraseDestData(const std::string &address, const std::string &key)\n {\n-    return EraseIC(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n+    return EraseIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)));\n }\n \n \n bool WalletBatch::WriteHDChain(const CHDChain& chain)\n {\n-    return WriteIC(std::string(\"hdchain\"), chain);\n+    return WriteIC(DBKeys::HDCHAIN, chain);\n }\n \n bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n {\n-    return WriteIC(std::string(\"flags\"), flags);\n+    return WriteIC(DBKeys::FLAGS, flags);\n }\n \n bool WalletBatch::TxnBegin()"
      },
      {
        "sha": "b78bc49f9ef64ae76e80b87dbf76044866ac738b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
        "patch": "@@ -55,6 +55,31 @@ enum class DBErrors\n     NEED_REWRITE\n };\n \n+namespace DBKeys {\n+extern const std::string ACENTRY;\n+extern const std::string BESTBLOCK;\n+extern const std::string BESTBLOCK_NOMERKLE;\n+extern const std::string CRYPTED_KEY;\n+extern const std::string CSCRIPT;\n+extern const std::string DEFAULTKEY;\n+extern const std::string DESTDATA;\n+extern const std::string FLAGS;\n+extern const std::string HDCHAIN;\n+extern const std::string KEY;\n+extern const std::string KEYMETA;\n+extern const std::string MASTER_KEY;\n+extern const std::string MINVERSION;\n+extern const std::string NAME;\n+extern const std::string OLD_KEY;\n+extern const std::string ORDERPOSNEXT;\n+extern const std::string POOL;\n+extern const std::string PURPOSE;\n+extern const std::string TX;\n+extern const std::string VERSION;\n+extern const std::string WATCHMETA;\n+extern const std::string WATCHS;\n+} // namespace DBKeys\n+\n /* simple HD chain data model */\n class CHDChain\n {"
      }
    ]
  },
  {
    "sha": "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZmMjJiZjQ0YzBmNzQxMjg1ZjI3ZjI3YWMxOGU5Njc5ODAyZTVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-27T20:38:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-27T20:32:30Z"
      },
      "message": "wallet: Rename CWalletKey to OldKey",
      "tree": {
        "sha": "d066e4d3aa8e19d9b720685da697dc4cd3f9cbec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d066e4d3aa8e19d9b720685da697dc4cd3f9cbec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi/2AwAmruJSzpgu75zwDxjYOKbWE+Br+DRm1+m86jlua3UJsawDQ0SSz40ZQml\nzS7yn1nBOHyQ80igN75eC1g5WM5ONvLih2NdvX/5tOXq1+SdHxcz2VNZVGj9uaaD\n+BRkvkwN17fnUVuBiYB6ytHezRBEO4bKRaizIfOZfsmbkrTYExpAMMM9IN+VSmoR\nlWjloExkIEgpeq6KFZLf1Hp3WBpbk3O2XLStVMrOBn06BQrvl7bTPMkt6buEmbEV\nOJCzdeP1gX3LiIPBs4VG/+MTZiSXLBiEDxRVslk7l1LjF9PwJRLEE5iq564RrTV3\nd+bZ3J93XV7zqOzMhycOrT2h5cDRenhCI1egUzhr847aN4BO3pg9PP8uEaOeHGX2\nDg3x9ArcmXF0sf2qasWhkZ4hxfyG9svx74s6CBc3Kv+LBAULzuBEk2r6Ir+C0uyj\nmzFgf0GDInWhO9oUvh2I6Ss1ThmL5GcwE6qb75JzI6ASbzDxRiMAnDUxCP1tPDDK\nJKNIbIpZ\n=VY0R\n-----END PGP SIGNATURE-----",
        "payload": "tree d066e4d3aa8e19d9b720685da697dc4cd3f9cbec\nparent fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f\nauthor MarcoFalke <falke.marco@gmail.com> 1564259896 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1564259550 -0400\n\nwallet: Rename CWalletKey to OldKey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6f22bf44c0f741285f27f27ac18e9679802e5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6f22bf44c0f741285f27f27ac18e9679802e5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6f22bf44c0f741285f27f27ac18e9679802e5e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 8,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e8cc49b1fcfd29a13ad437cfe7ea5af6af7a2358",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6f22bf44c0f741285f27f27ac18e9679802e5e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6f22bf44c0f741285f27f27ac18e9679802e5e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa6f22bf44c0f741285f27f27ac18e9679802e5e",
        "patch": "@@ -4626,12 +4626,6 @@ CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n     m_pre_split = false;\n }\n \n-CWalletKey::CWalletKey(int64_t nExpires)\n-{\n-    nTimeCreated = (nExpires ? GetTime() : 0);\n-    nTimeExpires = nExpires;\n-}\n-\n void CMerkleTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)\n {\n     // Update the tx's hashBlock"
      },
      {
        "sha": "243bf9ac3222495c6f5f872c2b78fcbc54cc8635",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6f22bf44c0f741285f27f27ac18e9679802e5e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6f22bf44c0f741285f27f27ac18e9679802e5e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fa6f22bf44c0f741285f27f27ac18e9679802e5e",
        "patch": "@@ -676,23 +676,18 @@ class COutput\n     }\n };\n \n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n+/** Private key that was serialized by an old wallet (only used for deserialization) */\n+struct OldKey {\n     CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    // todo: add something to note what created it (user, getnewaddress, change)\n-    //   maybe should have a map<string, string> property map\n-\n-    explicit CWalletKey(int64_t nExpires=0);\n-\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n+        // no longer used by the wallet, thus dropped after deserialization:\n+        int64_t nTimeCreated;\n+        int64_t nTimeExpires;\n+        std::string strComment;\n+\n         int nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);"
      },
      {
        "sha": "987665c9dacfea1d944d559a4d14af4e3e65ba33",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6f22bf44c0f741285f27f27ac18e9679802e5e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6f22bf44c0f741285f27f27ac18e9679802e5e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fa6f22bf44c0f741285f27f27ac18e9679802e5e",
        "patch": "@@ -271,7 +271,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 wss.nKeys++;\n                 ssValue >> pkey;\n             } else {\n-                CWalletKey wkey;\n+                OldKey wkey;\n                 ssValue >> wkey;\n                 pkey = wkey.vchPrivKey;\n             }"
      }
    ]
  }
]