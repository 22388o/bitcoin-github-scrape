promag,2018-09-21T23:33:54Z,"After https://github.com/bitcoin/bitcoin/pull/11485#issuecomment-423683042 decided to push this.\n\nConsider the following:\n```\n$ find wallets\nwallets\nwallets/wallet.dat\nwallets/db.log\nwallets/x1\nwallets/x1/wallet.dat\nwallets/x1/db.log\nwallets/x1/.walletlock\nwallets/x2\nwallets/x2/wallet.dat\nwallets/x2/db.log\nwallets/x2/.walletlock\nwallets/.walletlock\nwallets/w\nwal",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-423696829,423696829,
DrahtBot,2018-09-22T03:59:02Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #13100 (gui: Add dynamic wallets support by promag)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-423714517,423714517,
promag,2018-09-22T13:11:48Z,"Thanks @ryanofsky, will update accordingly.",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-423743185,423743185,
promag,2018-09-24T17:41:27Z,"@ryanofsky updated to used your suggested code with some minor details fixed. The result is still relative paths to `-walletdir`.\n\n@practicalswift will add test.",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-424061725,424061725,
promag,2018-09-26T23:06:33Z,Squashed and added release notes.,https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-424898567,424898567,
promag,2018-09-27T20:35:11Z,"> the test node could dynamically create a wallet, and then try to find it. That way at least some developer will see that test fail on their machine if they compile with a future BDB version that's somehow different.\n\n@Sjors does the test change looks good to you?\n",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425233400,425233400,
DrahtBot,2018-09-28T05:52:31Z,<!--32850dd3fdea838b4049e64f46995ea2-->\n| Coverage  | Change ([pull 14291](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/14291/total.coverage/index.html)) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html))   |\n|-----------|-------------------------|--------------------|\n| Lines     | -0.0043 %            | 87.0361 %,https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425328769,425328769,
Sjors,2018-09-28T10:55:20Z,"@promag it covers the second part of my suggestion yes:  the wallets are generated by the test framework (using whatever version of BDB is on the dev machine), and then listed.\n\n> Can you add BDB4 and BDB5 wallet payloads to the test suite?\n\nThis isn't explicitly tested, but because some/most Travis machines use bdb4, it's covered regardless. We're not officially supporting BDB>4 wallets, ",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425399728,425399728,
promag,2018-09-28T11:22:20Z,"> modulo wallet.dat being shown as """" (though that can be fixed later).\n\nThat's the name of the default wallet, so it doesn't needs fix. Try:\n```\nbitcoind -regtest &\nbitcoin-cli -regtest unloadwallet """"\n```\n\n> tACK fc40216 for macOS\n\nThanks @Sjors üëç ",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425405356,425405356,
Sjors,2018-09-28T12:01:21Z,"@promag that's weird, but unrelated to this change. When you do `listwallets` it shows up as `wallet.dat`. And can you load it with `loadwallet """"`?",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425413546,425413546,
promag,2018-09-28T12:10:15Z,"@Sjors here I have:\n```\nbitcoind -regtest\nbitcoin-cli -regtest  listwallets\n[\n  """"\n]\n```",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425415570,425415570,
Sjors,2018-09-28T12:34:43Z,"Try adding a second wallet to `bitcoin.conf`, then it shows up as `""wallet.dat""`. But in that case you can unload with `unloadwallet ""wallet.dat""`. In case you don't have wallets in `bitcoin.conf`, there's never a need to load `wallet.dat`, so then it doesn't matter that it's called `""""`.",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-425421371,425421371,
etscrivner,2018-10-07T22:48:03Z,ACK fc40216e1b0a3e0462b4119f6e4380ac368ed828,https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-427693823,427693823,
achow101,2018-10-09T01:02:15Z,utACK fc40216e1b0a3e0462b4119f6e4380ac368ed828,https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-428025595,428025595,
promag,2018-10-17T23:24:11Z,"Thanks, rebased to remove fixup.",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-430823215,430823215,
laanwj,2018-10-18T08:46:19Z,utACK after nits ,https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-430927131,430927131,
ryanofsky,2018-10-18T18:02:34Z,"utACK b791ef12c3605c185432e391e1571853b07a7441. Changes since last review were adding minimum file size check, switching to fs::ifstream, and no longer omitting big-endian btree files. It seems that berkeley supports loading databases with any byte order, with native byte order just being slightly more efficient: https://docs.oracle.com/cd/E17276_01/html/programmer_reference/general_am_conf.html#a",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-431106014,431106014,
meshcollider,2018-10-18T22:21:43Z,re-utACK after squash,https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-431183954,431183954,
meshcollider,2018-10-18T22:38:42Z,"utACK https://github.com/bitcoin/bitcoin/commit/d56a0689354fb814510c6c393f3e07ac9362dc1f\n\nLet's merge üéâ",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-431187542,431187542,
kallewoof,2018-10-22T03:22:13Z,"On Debian Jessie PowerPC (Big endian) system (endianness probably unrelated):\n```\nwallet/walletutil.cpp: In function ‚Äòstd::vector<boost::filesystem::path> ListWalletDir()‚Äô:\nwallet/walletutil.cpp:57:78: error: ‚Äòend‚Äô was not declared in this scope\n     for (auto it = fs::recursive_directory_iterator(wallet_dir); it != end(it); ++it) {\n                                                       ",https://github.com/bitcoin/bitcoin/pull/14291#issuecomment-431733291,431733291,
ken2812221,2018-09-22T07:18:01Z,How about moving these functions to `interfaces/wallet.cpp`. I think they don't belong here.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r219663917,219663917,src/interfaces/node.cpp
ryanofsky,2018-09-22T08:05:22Z,Should cite the source of this information (https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75) to give credit upstream and make this code easier to understand / debug / update in the future.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r219664892,219664892,src/wallet/walletutil.cpp
ryanofsky,2018-09-22T09:44:44Z,"Since this is declared as bytes, the `memcmp` below will only look for little-endian btree files, even on big endian platforms. It seems like it would make more sense to look for little endian files on little-endian platforms, and big endian files on big endian platforms. Changing this to `uint32_t bdb_magic = 0x00053162` and passing `&bdb_magic` to `memcmp` should accomplish this.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r219666816,219666816,src/wallet/walletutil.cpp
ryanofsky,2018-09-22T09:51:55Z,"There are a number of problems with this implementation:\n\n1) Because this opens files recursively, it will return btree paths not in the top directory which CWallet::Verify will reject: https://github.com/bitcoin/bitcoin/blob/920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0/src/wallet/wallet.cpp#L3824-L3829\n2) Because is_regular_file will return true for symlinks pointing to files, this will return ",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r219666958,219666958,src/wallet/walletutil.cpp
ryanofsky,2018-09-22T10:17:10Z,"> How about moving these functions to interfaces/wallet.cpp. I think they don't belong here.\n\nThis is a reasonable place. These methods fit in with the existing `getWallets` and `handleLoadWallet` methods. The `Node` interface is somewhat monolithic and we could consider breaking it up in various ways. But the `Wallet` interface would be the wrong place to add these methods. `Wallet` methods o",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r219667374,219667374,src/interfaces/node.cpp
practicalswift,2018-09-22T13:34:04Z,Nit: Add some trivial test for `ListWalletDir` to make it technically in use.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r219671843,219671843,src/wallet/walletutil.h
promag,2018-09-25T11:02:19Z,"There is `listwaletdir` RPC, which has some tests.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220147402,220147402,src/wallet/walletutil.h
Sjors,2018-09-25T11:56:15Z,Nit: `throwNotWalletBuild()`?,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220161367,220161367,src/dummywallet.cpp
Sjors,2018-09-25T12:01:34Z,I find this function name confusing. How about `listWallets()`? A future version of this function could take a directory argument and the name would still make sense.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220162889,220162889,src/interfaces/node.h
Sjors,2018-09-25T12:12:13Z,"Ditto as above, but unfortunately it's too late to rename `listwallets` to `listloadedwallets`. Overloading `listwallets` doesn't seem like a good idea.\n\nWhat about `lswallets`, `listwalletfiles` or `findwallets`?  ",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220165978,220165978,src/wallet/rpcwallet.cpp
Sjors,2018-09-25T12:17:28Z,Sort alphabetically?,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220167677,220167677,src/interfaces/node.cpp
promag,2018-09-25T13:15:33Z,"I think that's something for the UI to handle. It can sort by other attribute, like last modified, transaction count, balance, etc.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220186712,220186712,src/interfaces/node.cpp
promag,2018-09-25T13:17:12Z,"I like the pairing between `getWalletDir`, `listWalletDir` and `-walletdir`, but I don't have a strong preference. Let's see what others say.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220187294,220187294,src/interfaces/node.h
promag,2018-09-25T13:23:17Z,Agree in not overloading `listwallets`. There are more alternatives in #11485 discussion thread.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220189697,220189697,src/wallet/rpcwallet.cpp
Sjors,2018-09-25T13:34:31Z,"That's fine, as long as the RPC interface does it, that's also a User Interface :-)",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220193984,220193984,src/interfaces/node.cpp
promag,2018-09-25T13:38:37Z,Should we sort `listwallets` result too? ,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220195529,220195529,src/interfaces/node.cpp
Sjors,2018-09-25T14:33:17Z,"That could be a nice improvement. Not necessarily in this PR, but perhaps there could be a common function to render the list of wallets in RPC, to make sure they're consistent.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220218050,220218050,src/interfaces/node.cpp
ryanofsky,2018-09-26T06:28:45Z,"In commit ""wallet: Add ListWalletDir utility"" (90adb2cd6149af1869e624a2060ec8c4a543cf08)\n\nProbably delete this line, it looks leftover from debugging.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220438850,220438850,src/wallet/walletutil.cpp
ryanofsky,2018-09-26T06:40:46Z,"I think I agree with promag. `listWalletDir` describes more specifically what the function does than `listWallets` and it fits in with the other names cited. I don't imagine us adding a gui feature that would call for the gui asking the node to list wallets in a directory other than `-walletdir`, but even if we did and this method gained an optional argument,  `listWalletDir` would still seem like",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220441099,220441099,src/interfaces/node.h
ryanofsky,2018-09-26T07:05:59Z,"In commit ""rpc: Add listwalletdir RPC"" (963eb27e8598e2746966ee4056f177ed332f0279)\n\nI would consider avoiding a mistake we've made previously with other api's (listwallets, listaccounts) where we limited extensibility by returning lists of strings instead of list of json objects. Specifically, I think it'd be better to return\n\n```json\n[ {""wallet"": """"}, {""wallet"": ""foo""}, {""wallet"": ""bar""}",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220446254,220446254,src/wallet/rpcwallet.cpp
ryanofsky,2018-09-26T07:08:28Z,"I don't see a problem with `listwalletdir`. It describes the thing this RPC does, which is to list the contents of the `-walletdir` directory. (I do think it would have been clearer if that directory would have been called `-walletsdir` instead of `-walletdir`, but surprising to me as a native english speaker, other people seemed to think `-walletsdir` was clumsy and not grammatical in #12221).",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220446805,220446805,src/wallet/rpcwallet.cpp
promag,2018-09-26T07:35:00Z,Ops,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220453514,220453514,src/wallet/walletutil.cpp
promag,2018-09-26T08:36:49Z,"Absolutely, my initial response was like:\n```json\n{\n    ""wallets"": [\n        { ""name"": """" }\n    ]\n}\n```\nwhich permits adding, for instance, `walletdir`, `count`, `offset`..",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220471896,220471896,src/wallet/rpcwallet.cpp
promag,2018-09-26T11:22:04Z,@ryanofsky does this looks good to you?,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220522510,220522510,src/wallet/walletutil.cpp
promag,2018-09-26T11:49:19Z,"Should it ignore case? Should have an option to support numeric/date prefixes?\n\nFrom the cli point of view, you can do stuff like `bitcoin-cli -regtest listwalletdir | jq -r '.wallets | map(.name) | join(""\n"")' | sort ...`.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220528757,220528757,src/interfaces/node.cpp
Sjors,2018-09-26T12:39:51Z,"Don't most alphabetical sort functions ignore case (unless it's a tie) and put numbers before letters? I'm a fan of `jq`, but seems overkill for a simple list. It doesn't seem terribly complicated in C++11 even with [UTF-8](https://www.quora.com/How-do-I-sort-an-array-of-strings-in-alphabetical-order-in-C) (1st answer, 3rd example):\n\n```cpp\nstd::wstring a[] = {L""–®–ª–∞"", L""–°–∞—à–∞"", L""–ø–æ"", L""—à–æ—Å—Å–µ",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220543207,220543207,src/interfaces/node.cpp
promag,2018-09-26T23:02:17Z,If you don't mind I prefer to follow up that discussion and possible implementation in both RPC. In this PR I'm just following `listwallets` ordering and for now having the functionality is enough.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r220749366,220749366,src/interfaces/node.cpp
etscrivner,2018-10-07T17:06:50Z,Any concerns about the endianness of `data` as compared to `bdb_magic` here?,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r223220733,223220733,src/wallet/walletutil.cpp
laanwj,2018-10-16T10:38:08Z,"so if i get this right: in the legacy case where walletdir == datadir, this will scan **every** file in the data directory recursively, and check it for BDB version magic?\nthis includes LevelDB database files, block files, debug log files, authcookie files, lock files ‚Ä¶ can see tons of ways in which this can go wrong\nor this is somehow avoided?\n\nif not, I'd strongly suggest it should just ",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225486459,225486459,src/wallet/walletutil.cpp
promag,2018-10-16T10:55:42Z,"No, it only recursively scans directories to try to open `wallet.dat` inside and then check magic bytes.\n\nIt checks magic bytes on all files in the walletdir (datadir in the legacy case) ‚Äî not recursively.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225491304,225491304,src/wallet/walletutil.cpp
ryanofsky,2018-10-16T13:10:10Z,"> Any concerns about the endianness of data as compared to bdb_magic here?\n\nCould add a comment here, but this checks for databases in the native format. On big endian systems, the magic bytes are `00 05 31 62`, and on little endian systems they are `62 31 05 00`.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225531394,225531394,src/wallet/walletutil.cpp
ryanofsky,2018-10-16T13:17:13Z,"It still might be good to prevent this from opening too many files if there happen to be a lot of stray files in the root directory, or a lot of directories in the tree. Maybe add `&& (++count)` before `&& IsBerkeleyBtree` checks, and `if (count > 1000) throw std::runtime_error(""Can't list wallets, too many files in walletdir"")` and the end of the loop as a sanity check.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225534223,225534223,src/wallet/walletutil.cpp
promag,2018-10-16T13:42:40Z,"@ryanofsky an alternative solution is to scan only if walletdir != datadir, WDYT?",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225544502,225544502,src/wallet/walletutil.cpp
ryanofsky,2018-10-16T16:24:39Z,"> @ryanofsky an alternative solution is to scan only if walletdir != datadir, WDYT?\n\nThat seems like a worse solution. It doesn't provide protection if there's a looping directory structure or a lot of junk files in the wallet directory. It's less user friendly if users with old datadirs have to manually move database files around in order for this one rpc method to work. It also seems like it",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225613639,225613639,src/wallet/walletutil.cpp
promag,2018-10-16T16:55:28Z,"> It doesn't provide protection if there's a looping directory structure\n\nFrom the [docs](https://www.boost.org/doc/libs/1_67_0/libs/filesystem/doc/reference.html#Class-recursive_directory_iterator):\n> By default, recursive_directory_iterator does not follow directory symlinks\n\nIIUC considering the above looping would't happen.\n\n",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225624325,225624325,src/wallet/walletutil.cpp
ryanofsky,2018-10-16T17:11:32Z,"> By default, recursive_directory_iterator does not follow directory symlinks\n\nI know, I was thinking about more about FUSE mounts and such. Anyway, if you think it complicates code too much to deal with unexpected filesystem stuff and provide a nice error message, I don't personally think you need to add any error handling here. I was just trying to suggest a way to deal with laanwj's concern",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225629987,225629987,src/wallet/walletutil.cpp
promag,2018-10-16T17:16:21Z,@ryanofsky @laanwj added these 2 checks to avoid opening unnecessary files.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225632683,225632683,src/wallet/walletutil.cpp
ryanofsky,2018-10-16T17:57:51Z,"I'm not sure what purpose these checks serve. Are they supposed to be an optimization? Is the second check supposed to guard against opening lock files? I would suggest adding a comment here or dropping these. \n\nThe first check actually seems like the opposite of an optimization, since file_size/ifstream calls below inherently have to check that the file exists, so it seems like this just chec",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225646785,225646785,src/wallet/walletutil.cpp
promag,2018-10-16T18:19:27Z,The first check `fs::exists(path)` was there to prevent exceptions from the 2nd check `fs::file_size(path)`. Fixed and added comment.,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r225653862,225653862,src/wallet/walletutil.cpp
laanwj,2018-10-18T07:04:26Z,"agree with regard to adding comment; at least I too had no idea that BerkeleyDB files generated on big-endian systems are incompatible!\n\nedit: another theory on IRC is that BerkeleyDB creates the file in native endian but accepts both (does byteswaps if needed)! if this is true, you need to check for both orderings here\n\nhere's Oracle's magic file for id'ing BDB files; https://docs.oracle.",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r226188328,226188328,src/wallet/walletutil.cpp
laanwj,2018-10-18T08:38:18Z,switch to `fs::ifstream` post-#13878,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r226215537,226215537,src/wallet/walletutil.cpp
laanwj,2018-10-18T13:57:31Z,LGTM now,https://github.com/bitcoin/bitcoin/pull/14291#discussion_r226315105,226315105,src/wallet/walletutil.cpp
MarcoFalke,2018-10-20T10:57:40Z,"```\nwallet/walletutil.cpp:71:36: error: ‚Äòrelative‚Äô is not a member of ‚Äòfs‚Äô\n                 paths.emplace_back(fs::relative(it->path(), wallet_dir));\n                                    ^\n```\n\nSee: #14528 (travis: Compile once on xenial)",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r226823679,226823679,src/wallet/walletutil.cpp
promag,2018-10-20T23:32:55Z,"This is wrong, `fs::relative` resolves symlinks but we allow symlinks to be specified as wallet names. I guess `listwalletdir` should list both `w7` and `w7_symlink` but in runtime only one could be loaded (actually it's the same wallet but with different names). @ryanofsky @laanwj should I fix this in #14531 or fix in a separate PR?",https://github.com/bitcoin/bitcoin/pull/14291#discussion_r226843422,226843422,test/functional/wallet_multiwallet.py
