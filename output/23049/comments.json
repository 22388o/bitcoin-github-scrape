[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923099972",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-923099972",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 923099972,
    "node_id": "IC_kwDOABII5843BWNE",
    "user": {
      "login": "Fi3",
      "id": 6207037,
      "node_id": "MDQ6VXNlcjYyMDcwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fi3",
      "html_url": "https://github.com/Fi3",
      "followers_url": "https://api.github.com/users/Fi3/followers",
      "following_url": "https://api.github.com/users/Fi3/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fi3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fi3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
      "organizations_url": "https://api.github.com/users/Fi3/orgs",
      "repos_url": "https://api.github.com/users/Fi3/repos",
      "events_url": "https://api.github.com/users/Fi3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fi3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T16:49:01Z",
    "updated_at": "2021-09-21T15:52:38Z",
    "author_association": "NONE",
    "body": "To build it:\r\n```\r\n./contrib/guix/guix-clean\r\nenv HOSTS='x86_64-linux-gnu' ./contrib/guix/guix-build\r\n```\r\n\r\nTo test it:\r\n```\r\n ./guix-build-34bebad831a9/distsrc-34bebad831a9-x86_64-linux-gnu/src/bitcoind\r\n```\r\n\r\nAn example of how to import `sv2-ffi` in a generic c++ project can be found [here](https://github.com/stratum-mining/stratum/tree/main/examples/interop-cpp-no-cargo)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923099972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923132229",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-923132229",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 923132229,
    "node_id": "IC_kwDOABII5843BeFF",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T17:30:49Z",
    "updated_at": "2021-09-20T17:30:49Z",
    "author_association": "MEMBER",
    "body": "Concept NACK for Rust, until a secure bootstrap without trusted third party binaries is practical.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923132229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923797532",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-923797532",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 923797532,
    "node_id": "IC_kwDOABII5843EAgc",
    "user": {
      "login": "Fi3",
      "id": 6207037,
      "node_id": "MDQ6VXNlcjYyMDcwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fi3",
      "html_url": "https://github.com/Fi3",
      "followers_url": "https://api.github.com/users/Fi3/followers",
      "following_url": "https://api.github.com/users/Fi3/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fi3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fi3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
      "organizations_url": "https://api.github.com/users/Fi3/orgs",
      "repos_url": "https://api.github.com/users/Fi3/repos",
      "events_url": "https://api.github.com/users/Fi3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fi3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T09:23:28Z",
    "updated_at": "2021-09-21T09:23:28Z",
    "author_association": "NONE",
    "body": "> Concept NACK for Rust, until a secure bootstrap without trusted third party binaries is practical.\r\n\r\nIsn't that already achieved with guix?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923797532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925446441",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-925446441",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 925446441,
    "node_id": "IC_kwDOABII5843KTEp",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T01:33:28Z",
    "updated_at": "2021-09-23T01:33:28Z",
    "author_association": "MEMBER",
    "body": "I think this work is interesting, that said it might need more thought on how to interface with Core.\r\n\r\nAFAICT, the proposed PR just link the library in the build system and create a new template encoder in `bitcoind`. Though it doesn't introduce a new thread where the logic would co-run with other Core's current threads (`ThreadSocketHandler`, `ThreadOpenConnection`, ...). I initially followed this approach when I proposed AltNet with #18988. After gathering [feedbacks](https://gnusha.org/bitcoin-core-dev/2020-05-21.log) from other contributors, a separated process sounds a more flexible and safer approach.\r\n\r\nRecently, I've made some progress in this direction by building on top of the [multiprocess](https://github.com/bitcoin/bitcoin/pull/10102) project (see the hacky branch https://github.com/ariard/bitcoin/commits/2021-07-altnet-lightning). Process separation is promising, though going further I'm aiming to have AltNet pluggin modules written in Rust, while interfacing in Core over the  Cap'n Proto newer interfaces. The current bottleneck is re-writing `libmultiprocess` in Rust, see https://github.com/chaincodelabs/libmultiprocess/issues/56 for more information. It's more work than expected though I've a branch half-written doing that, hope to make it public soon(tm).\r\n\r\nI think such modules or the one proposed in the current PR could live beyond the Core repository to avoid burdening the maintenance effort and the concerns about Rust chain of trust, while consuming the stable interfaces to ease deployment across the ecosystem.\r\n\r\nGlad to see progress on the miner infrastructure, that's really needed!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925446441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926009122",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926009122",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926009122,
    "node_id": "IC_kwDOABII5843Mcci",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T17:22:15Z",
    "updated_at": "2021-09-23T17:22:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Strong Concept ACK. At a high level, this is incredibly important work for a few reasons:\r\n * having a good block template producer in Bitcoin Core is critical for moving Bitcoin's mining decentralization forward over the coming years, the importance of which cannot be understated,\r\n * Bitcoin Core having more visibility/control into how and when block templates get produced gives Bitcoin Core a ton more flexibility going forward to do things like pre-construct next-next-block templates in advance and push them out quicker, gives Bitcoin Core a ton more control of when transactions get included in a block by enabling \"push\" support for template updates instead of only being polled, etc,\r\n * the inefficiencies of getblocktemplate have been a real source of pain for pool operators for some time, I'm excited its going away.\r\n\r\nAs for multi-process, I don't think this is a good candidate for multi-process - block template building is incredibly latency-sensitive, plus needs full access to the mempool and block template construction. At most, I'd think we could think of doing the block template construction in Core and then handing the template off to a new process which does the StratumV2 protocol work, but (a) that adds a bunch more latency for no reason, and (b) you'd probably just use the StratumV2 protocol to communicate with that other binary, so why? In general, one reason to consider rust for the protocol side of this is precisely because you *don't* need to worry as much about it being in the same binary - the actual network logic itself isn't going to corrupt memory.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926009122/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926062783",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926062783",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926062783,
    "node_id": "IC_kwDOABII5843Mpi_",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T18:41:16Z",
    "updated_at": "2021-09-23T18:41:16Z",
    "author_association": "MEMBER",
    "body": "Some thoughts.\r\n\r\n* I don't object in general to adding a Rust-based *dependency*, as long as we can treat it as such. I don't personally know Rust, and suspect that many contributors/reviewers aren't as comfortable with Rust, so I think my criterion for this is whether it's something that we can treat as external, existing, known-to-work, code that's maintained separately - like say libevent or LevelDB, and not something that would expect detailed review from this project. Evidence that this same code is used in other contexts/projects would certainly help. The fact that this would be code that's only accessible through a local, optional, interface makes the safety analysis a lot easier.\r\n* I haven't followed the state of affairs with StratumV2. If it's expected that a significant part of the mining ecosystem will end up depending on this protocol, I agree it makes sense to include it in Bitcoin Core, and agree with @TheBlueMatt that direct integration is the lowest-latency solution.\r\n* I believe Guix indeed solves the concern of having bootstrapping the Rust compiler, at least to the same extent that our C++ compilers for release builds are bootstrapped too. Right, @dongcarl?\r\n\r\nSo conditionally on getting some confirmation on my assumptions above, (somewhat hesitant) Concept ACK.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926062783/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926066954",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926066954",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926066954,
    "node_id": "IC_kwDOABII5843MqkK",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T18:48:05Z",
    "updated_at": "2021-09-23T18:48:05Z",
    "author_association": "MEMBER",
    "body": "No, Guix does not solve the bootstrapping problem, because Guix itself has a bootstrapping problem. You can't get Guix going without running *their* trusted blobs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926066954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926071190",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926071190",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926071190,
    "node_id": "IC_kwDOABII5843MrmW",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T18:54:47Z",
    "updated_at": "2021-09-23T18:55:25Z",
    "author_association": "MEMBER",
    "body": "> No, Guix does not solve the bootstrapping problem, because Guix itself has a bootstrapping problem. You can't get Guix going without running their trusted blobs.\r\n\r\nThat's correct (for now), but the situation is not Rust-specific. Our release builds are created with Guix, so the C++ compiler used for releases is subject to the same concerns.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926071190/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926073313",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926073313",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926073313,
    "node_id": "IC_kwDOABII5843MsHh",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T18:58:16Z",
    "updated_at": "2021-09-23T18:58:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> * I believe Guix indeed solves the concern of having bootstrapping the Rust compiler, at least to the same extent that our C++ compilers for release builds are bootstrapped too. Right, @dongcarl?\r\n\r\nYes I think this is _exactly_ right. Building Rust in Guix is not any less bootstrappable than building anything else (C++) in Guix.\r\n\r\n-----\r\n\r\nSome context: Guix gained the ability to compile Rust v1.19 from mrustc v0.8 in 2018 ([blog post](https://guix.gnu.org/en/blog/2018/bootstrapping-rust/)), and this bootstrap method has been actively maintained, and now compiles Rust v1.29 from mrustc v0.9 (newer versions of rust (say v1.n) simply build using the previous version (v1.(n-1)) until it reaches v1.29).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926073313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926100286",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926100286",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926100286,
    "node_id": "IC_kwDOABII5843Mys-",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T19:39:33Z",
    "updated_at": "2021-09-23T19:39:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK on implementing a Stratum v2 Template Provider in Core ignoring language. \r\n\r\nOn the C++/Rust question it is dependent on other contributors being comfortable with it. This was discussed in today's Core dev [meeting](https://gnusha.org/bitcoin-core-dev/2021-09-23.log) and has come up repeatedly in the past e.g. https://github.com/bitcoin/bitcoin/issues/17090. I would guess a C++ PR would be an easier/quicker merge but there may be a Rust approach that can work.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926100286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926146637",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926146637",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926146637,
    "node_id": "IC_kwDOABII5843M-BN",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T20:53:34Z",
    "updated_at": "2021-09-23T20:53:34Z",
    "author_association": "MEMBER",
    "body": ">That's correct (for now), but the situation is not Rust-specific. Our release builds are created with Guix, so the C++ compiler used for releases is subject to the same concerns.\r\n\r\nWe support users building their own, without using Guix's trust-required toolchain.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926146637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926245100",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926245100",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 926245100,
    "node_id": "IC_kwDOABII5843NWDs",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T23:53:23Z",
    "updated_at": "2021-09-23T23:53:23Z",
    "author_association": "MEMBER",
    "body": "> As for multi-process, I don't think this is a good candidate for multi-process - block template building is incredibly latency-sensitive, plus needs full access to the mempool and block template construction.\r\n\r\nAh I see the low-latency requirement, yes effectively IPC/serialization to access the mempool is likely going to be a worrying performance penalty.\r\n\r\nThat said, one advantage splitting nicely the block template/mempool subsystems behind interfaces like it has been done for GUI/wallet/node is the ability offered to the end-user to have either one fully-fledged binary or a collection of process in function what make sense as a deployment. \r\n\r\nOne motivation could be to have fallback mempools connected to your block template construction in case of a malicious partition targeting your main one.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926245100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937896722",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-937896722",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 937896722,
    "node_id": "IC_kwDOABII58435ysS",
    "user": {
      "login": "Fi3",
      "id": 6207037,
      "node_id": "MDQ6VXNlcjYyMDcwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fi3",
      "html_url": "https://github.com/Fi3",
      "followers_url": "https://api.github.com/users/Fi3/followers",
      "following_url": "https://api.github.com/users/Fi3/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fi3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fi3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
      "organizations_url": "https://api.github.com/users/Fi3/orgs",
      "repos_url": "https://api.github.com/users/Fi3/repos",
      "events_url": "https://api.github.com/users/Fi3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fi3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T15:20:33Z",
    "updated_at": "2021-10-07T15:20:33Z",
    "author_association": "NONE",
    "body": "Update build system following @dongcarl suggestions.\r\n\r\nTP is enabled via a config flag: --enable-template-provider\r\nFor now when compile with guix TP is enabled. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937896722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937905516",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-937905516",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 937905516,
    "node_id": "IC_kwDOABII5843501s",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T15:30:12Z",
    "updated_at": "2021-10-07T17:13:05Z",
    "author_association": "MEMBER",
    "body": "Big concept ACK on supporting the use of StratumV2, but slight concept NACK on bundling it with the introduction of Rust, barring some additional context/rationale. It'd be nice to see a compelling reason why Rust should be used for this particular feature other than the standard potpourri of \"Rust is safer/more ergonomic in $X_GENERAL_WAY.\" *Edit:* I do see that this change pulls in a stratum Rust library, so maybe that's why?\r\n\r\nI have a number of questions about how Rust will dovetail with the existing codebase (and this PR might not be the appropriate place to discuss them), but some that come to mind in the context of this change are \r\n- how will use of Rust work with existing locks and lock annotations? \r\n  - E.g., are we going to lose the use of [our deadlock detection tooling](https://github.com/bitcoin/bitcoin/blob/master/src/sync.cpp) within Rust code?\r\n- what's the real cost of maintenance/additional complexity in the build system?\r\n- how much third-party code does this actually entail dragging in? AFAIU, concurrency, e.g., is not a simple thing in Rust and often entails the use of third-party libs like [tokio](https://github.com/tokio-rs/tokio).\r\n\r\nIf Rust is really a critical part of doing this feature, maybe we should look at how to offer the raw data necessary (in a performant way) to construct any number of block template formats outside of Core, by supplying data in a generic format over e.g. Unix sockets.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937905516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938148694",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-938148694",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 938148694,
    "node_id": "IC_kwDOABII58436wNW",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T20:54:54Z",
    "updated_at": "2021-10-16T01:16:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23152](https://github.com/bitcoin/bitcoin/pull/23152) (build: add `--enable-lto` configuration option by fanquake)\n* [#22646](https://github.com/bitcoin/bitcoin/pull/22646) (build: tighter Univalue integration, remove `--with-system-univalue` by fanquake)\n* [#22041](https://github.com/bitcoin/bitcoin/pull/22041) (build: Make --enable-suppress-external-warnings the default by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938148694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938519802",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-938519802",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 938519802,
    "node_id": "IC_kwDOABII58438Kz6",
    "user": {
      "login": "Fi3",
      "id": 6207037,
      "node_id": "MDQ6VXNlcjYyMDcwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fi3",
      "html_url": "https://github.com/Fi3",
      "followers_url": "https://api.github.com/users/Fi3/followers",
      "following_url": "https://api.github.com/users/Fi3/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fi3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fi3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
      "organizations_url": "https://api.github.com/users/Fi3/orgs",
      "repos_url": "https://api.github.com/users/Fi3/repos",
      "events_url": "https://api.github.com/users/Fi3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fi3/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-08T10:09:55Z",
    "updated_at": "2021-10-08T10:09:55Z",
    "author_association": "NONE",
    "body": "> If Rust is really a critical part of doing this feature, maybe we should look at how to offer the raw data necessary (in a performant way) to construct any number of block template formats outside of Core, by supplying data in a generic format over e.g. Unix sockets.\r\n\r\nHi @jamesob:\r\n* why rust: main reason to use rust it to not rewrite an already working set of libraries, the libraries have been written to be used  both in core (for the implementation of the TP) and in rust (for the implementation of the other Sv2 roles) \r\n* how will Rust work with existing locks: do not know I will check\r\n* cost of maintenance/additional complexity in the build system: IMHO is pretty insignificant.\r\n  Support TP in the build system add:\r\n    1. few lines in the config file in order to check if there is the flag `--enable-template-provider` and if the system that will build core has at least rustc 1.51.\r\n    2. An m4 function pulled from the gnu repo ax_compare_version.\r\n    3. A make file that call rustc with the correct flag and build the rust library then add the builded library to LDFLAGS so that is linked with bitocoind (this is the most complex addition to the build system and are only 159 LOC that do a very simple task)\r\n    4. It modify 2 line in the guix build and add rustc 1.51 in the manifest\r\n* how much third-party: the rust code added in order to build the TP in core do not have any external dependency but std.\r\n* doing it externally: this was my original idea but, as stated also in the above post by @TheBlueMatt:\r\n  *block template building is incredibly latency-sensitive, plus needs full access to the mempool and block template construction*",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938519802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945086394",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-945086394",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 945086394,
    "node_id": "IC_kwDOABII5844VN-6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-17T10:15:16Z",
    "updated_at": "2021-10-17T10:15:16Z",
    "author_association": "MEMBER",
    "body": "No objection to rust code. After all it is not different than wallet or qt code, which only a subset of all devs can understand, write and review. I guess the only thing needed here is review(ers).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945086394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947323806",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-947323806",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23049",
    "id": 947323806,
    "node_id": "IC_kwDOABII5844dwOe",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T04:42:15Z",
    "updated_at": "2021-10-20T04:42:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947323806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712351205",
    "pull_request_review_id": 758883359,
    "id": 712351205,
    "node_id": "PRRC_kwDOABII584qdZ3l",
    "diff_hunk": "@@ -0,0 +1,36 @@\n+#! /bin/sh\n+\n+SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\n+\n+rm -rf ${SCRIPT_DIR}/target\n+mkdir ${SCRIPT_DIR}/target\n+mkdir ${SCRIPT_DIR}/target/package\n+\n+cargo package --manifest-path ${SCRIPT_DIR}/sv2-ffi/Cargo.toml --allow-dirty",
    "path": "src/rusty/build-for-guix.sh",
    "position": null,
    "original_position": 9,
    "commit_id": "100eeef6ad273eabf78c1ca921da4bfea3e2bc0b",
    "original_commit_id": "bb059e4be395a34433149c6d1b465a1584c4c285",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think Bitcoin Core build should ever call cargo for rust stuff - we should call rustc directly with the relevant libraries.",
    "created_at": "2021-09-20T16:58:23Z",
    "updated_at": "2021-09-20T16:58:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#discussion_r712351205",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23049",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712351205"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23049#discussion_r712351205"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23049"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712351205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712859234",
    "pull_request_review_id": 759506311,
    "id": 712859234,
    "node_id": "PRRC_kwDOABII584qfV5i",
    "diff_hunk": "@@ -0,0 +1,36 @@\n+#! /bin/sh\n+\n+SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\n+\n+rm -rf ${SCRIPT_DIR}/target\n+mkdir ${SCRIPT_DIR}/target\n+mkdir ${SCRIPT_DIR}/target/package\n+\n+cargo package --manifest-path ${SCRIPT_DIR}/sv2-ffi/Cargo.toml --allow-dirty",
    "path": "src/rusty/build-for-guix.sh",
    "position": null,
    "original_position": 9,
    "commit_id": "100eeef6ad273eabf78c1ca921da4bfea3e2bc0b",
    "original_commit_id": "bb059e4be395a34433149c6d1b465a1584c4c285",
    "user": {
      "login": "Fi3",
      "id": 6207037,
      "node_id": "MDQ6VXNlcjYyMDcwMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6207037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fi3",
      "html_url": "https://github.com/Fi3",
      "followers_url": "https://api.github.com/users/Fi3/followers",
      "following_url": "https://api.github.com/users/Fi3/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fi3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fi3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fi3/subscriptions",
      "organizations_url": "https://api.github.com/users/Fi3/orgs",
      "repos_url": "https://api.github.com/users/Fi3/repos",
      "events_url": "https://api.github.com/users/Fi3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fi3/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm gonna remove the cargo dependency. And subtree all the rust sources. ",
    "created_at": "2021-09-21T09:22:33Z",
    "updated_at": "2021-09-21T09:22:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23049#discussion_r712859234",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23049",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712859234"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/23049#discussion_r712859234"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23049"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/712859234/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 712351205
  }
]