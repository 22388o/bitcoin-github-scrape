Fi3,2021-09-20 16:49:01,"To build it:\n```\n./contrib/guix/guix-clean\nenv HOSTS='x86_64-linux-gnu' ./contrib/guix/guix-build\n```\n\nTo test it:\n```\n ./guix-build-34bebad831a9/distsrc-34bebad831a9-x86_64-linux-gnu/src/bitcoind\n```\n\nAn example of how to import `sv2-ffi` in a generic c++ project can be found [here](https://github.com/stratum-mining/stratum/tree/main/examples/interop-cpp-no-cargo)",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-923099972,923099972,
luke-jr,2021-09-20 17:30:49,"Concept NACK for Rust, until a secure bootstrap without trusted third party binaries is practical.",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-923132229,923132229,
Fi3,2021-09-21 09:23:28,"> Concept NACK for Rust, until a secure bootstrap without trusted third party binaries is practical.\n\nIsn't that already achieved with guix?",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-923797532,923797532,
ariard,2021-09-23 01:33:28,"I think this work is interesting, that said it might need more thought on how to interface with Core.\n\nAFAICT, the proposed PR just link the library in the build system and create a new template encoder in `bitcoind`. Though it doesn't introduce a new thread where the logic would co-run with other Core's current threads (`ThreadSocketHandler`, `ThreadOpenConnection`, ...). I initially followed",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-925446441,925446441,
TheBlueMatt,2021-09-23 17:22:15,"Strong Concept ACK. At a high level, this is incredibly important work for a few reasons:\n * having a good block template producer in Bitcoin Core is critical for moving Bitcoin's mining decentralization forward over the coming years, the importance of which cannot be understated,\n * Bitcoin Core having more visibility/control into how and when block templates get produced gives Bitcoin Core a",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926009122,926009122,
sipa,2021-09-23 18:41:16,"Some thoughts.\n\n* I don't object in general to adding a Rust-based *dependency*, as long as we can treat it as such. I don't personally know Rust, and suspect that many contributors/reviewers aren't as comfortable with Rust, so I think my criterion for this is whether it's something that we can treat as external, existing, known-to-work, code that's maintained separately - like say libevent or",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926062783,926062783,
luke-jr,2021-09-23 18:48:05,"No, Guix does not solve the bootstrapping problem, because Guix itself has a bootstrapping problem. You can't get Guix going without running *their* trusted blobs.",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926066954,926066954,
sipa,2021-09-23 18:54:47,"> No, Guix does not solve the bootstrapping problem, because Guix itself has a bootstrapping problem. You can't get Guix going without running their trusted blobs.\n\nThat's correct (for now), but the situation is not Rust-specific. Our release builds are created with Guix, so the C++ compiler used for releases is subject to the same concerns.",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926071190,926071190,
dongcarl,2021-09-23 18:58:16,"> * I believe Guix indeed solves the concern of having bootstrapping the Rust compiler, at least to the same extent that our C++ compilers for release builds are bootstrapped too. Right, @dongcarl?\n\nYes I think this is _exactly_ right. Building Rust in Guix is not any less bootstrappable than building anything else (C++) in Guix.\n\n-----\n\nSome context: Guix gained the ability to compile",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926073313,926073313,
michaelfolkson,2021-09-23 19:39:33,"Concept ACK on implementing a Stratum v2 Template Provider in Core ignoring language. \n\nOn the C++/Rust question it is dependent on other contributors being comfortable with it. This was discussed in today's Core dev [meeting](https://gnusha.org/bitcoin-core-dev/2021-09-23.log) and has come up repeatedly in the past e.g. https://github.com/bitcoin/bitcoin/issues/17090. I would guess a C++ PR w",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926100286,926100286,
luke-jr,2021-09-23 20:53:34,">That's correct (for now), but the situation is not Rust-specific. Our release builds are created with Guix, so the C++ compiler used for releases is subject to the same concerns.\n\nWe support users building their own, without using Guix's trust-required toolchain.",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926146637,926146637,
ariard,2021-09-23 23:53:23,"> As for multi-process, I don't think this is a good candidate for multi-process - block template building is incredibly latency-sensitive, plus needs full access to the mempool and block template construction.\n\nAh I see the low-latency requirement, yes effectively IPC/serialization to access the mempool is likely going to be a worrying performance penalty.\n\nThat said, one advantage splitt",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-926245100,926245100,
Fi3,2021-10-07 15:20:33,"Update build system following @dongcarl suggestions.\n\nTP is enabled via a config flag: --enable-template-provider\nFor now when compile with guix TP is enabled. ",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-937896722,937896722,
jamesob,2021-10-07 15:30:12,"Big concept ACK on supporting the use of StratumV2, but slight concept NACK on bundling it with the introduction of Rust, barring some additional context/rationale. It'd be nice to see a compelling reason why Rust should be used for this particular feature other than the standard potpourri of ""Rust is safer/more ergonomic in $X_GENERAL_WAY."" *Edit:* I do see that this change pulls in a stratum Rus",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-937905516,937905516,
DrahtBot,2021-10-07 20:54:54,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23152](https://github.com/bitcoin/bitcoin/pull/23152) (build: add `--enable-lto` configuration option by fanquake)\n* [#",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-938148694,938148694,
Fi3,2021-10-08 10:09:55,"> If Rust is really a critical part of doing this feature, maybe we should look at how to offer the raw data necessary (in a performant way) to construct any number of block template formats outside of Core, by supplying data in a generic format over e.g. Unix sockets.\n\nHi @jamesob:\n* why rust: main reason to use rust it to not rewrite an already working set of libraries, the libraries have ",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-938519802,938519802,
MarcoFalke,2021-10-17 10:15:16,"No objection to rust code. After all it is not different than wallet or qt code, which only a subset of all devs can understand, write and review. I guess the only thing needed here is review(ers).",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-945086394,945086394,
DrahtBot,2021-10-20 04:42:15,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/23049#issuecomment-947323806,947323806,
TheBlueMatt,2021-09-20 16:58:23,I don't think Bitcoin Core build should ever call cargo for rust stuff - we should call rustc directly with the relevant libraries.,https://github.com/bitcoin/bitcoin/pull/23049#discussion_r712351205,712351205,src/rusty/build-for-guix.sh
Fi3,2021-09-21 09:22:33,I'm gonna remove the cargo dependency. And subtree all the rust sources. ,https://github.com/bitcoin/bitcoin/pull/23049#discussion_r712859234,712859234,src/rusty/build-for-guix.sh
