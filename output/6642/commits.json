[
  {
    "sha": "0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWM0MmM0OWY3YmZjMWUxNThhODNjNmQ5OGJjNDY1YjA2ODk0ZThh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T13:42:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T13:42:34Z"
      },
      "message": "[init] Min. time between socket creation and AcceptConnection()\n\nIncoming peers can OpenNetworkConnection(), thus PushVersion()\nas soon as the server is done with init step 6. Consequently,\nnTimeOffset can grow arbitrarily large. Executing init step 6\nin the end mitigates this issue.",
      "tree": {
        "sha": "b103c1271127dd4c1163a494a687ff7b4895ff9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b103c1271127dd4c1163a494a687ff7b4895ff9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 223,
      "additions": 112,
      "deletions": 111
    },
    "files": [
      {
        "sha": "baf261cb1d12043ea8217c5d71ca29790b7d8f2f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 111,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
        "patch": "@@ -1010,117 +1010,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n-    // ********************************************************* Step 6: network initialization\n-\n-    RegisterNodeSignals(GetNodeSignals());\n-\n-    // format user agent, check total size\n-    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>());\n-    if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n-            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n-    }\n-\n-    if (mapArgs.count(\"-onlynet\")) {\n-        std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {\n-            enum Network net = ParseNetwork(snet);\n-            if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n-            nets.insert(net);\n-        }\n-        for (int n = 0; n < NET_MAX; n++) {\n-            enum Network net = (enum Network)n;\n-            if (!nets.count(net))\n-                SetLimited(net);\n-        }\n-    }\n-\n-    if (mapArgs.count(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs[\"-whitelist\"]) {\n-            CSubNet subnet(net);\n-            if (!subnet.IsValid())\n-                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            CNode::AddWhitelistedRange(subnet);\n-        }\n-    }\n-\n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n-    // -proxy sets a proxy for all outgoing network traffic\n-    // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n-    std::string proxyArg = GetArg(\"-proxy\", \"\");\n-    if (proxyArg != \"\" && proxyArg != \"0\") {\n-        proxyType addrProxy = proxyType(CService(proxyArg, 9050), proxyRandomize);\n-        if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n-\n-        SetProxy(NET_IPV4, addrProxy);\n-        SetProxy(NET_IPV6, addrProxy);\n-        SetProxy(NET_TOR, addrProxy);\n-        SetNameProxy(addrProxy);\n-        SetReachable(NET_TOR); // by default, -proxy sets onion as reachable, unless -noonion later\n-    }\n-\n-    // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n-    // -noonion (or -onion=0) disables connecting to .onion entirely\n-    // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n-    std::string onionArg = GetArg(\"-onion\", \"\");\n-    if (onionArg != \"\") {\n-        if (onionArg == \"0\") { // Handle -noonion/-onion=0\n-            SetReachable(NET_TOR, false); // set onions as unreachable\n-        } else {\n-            proxyType addrOnion = proxyType(CService(onionArg, 9050), proxyRandomize);\n-            if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));\n-            SetProxy(NET_TOR, addrOnion);\n-            SetReachable(NET_TOR);\n-        }\n-    }\n-\n-    // see Step 2: parameter interactions for more information about these\n-    fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n-    fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", true);\n-\n-    bool fBound = false;\n-    if (fListen) {\n-        if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-bind\"]) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n-                    return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind));\n-                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n-            }\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, 0, false))\n-                    return InitError(strprintf(_(\"Cannot resolve -whitebind address: '%s'\"), strBind));\n-                if (addrBind.GetPort() == 0)\n-                    return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n-            }\n-        }\n-        else {\n-            struct in_addr inaddr_any;\n-            inaddr_any.s_addr = INADDR_ANY;\n-            fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n-            fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n-        }\n-        if (!fBound)\n-            return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n-    }\n-\n-    if (mapArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n-            CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n-            if (!addrLocal.IsValid())\n-                return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr));\n-            AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n-        }\n-    }\n-\n-    BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n-        AddOneShot(strDest);\n \n     // ********************************************************* Step 7: load block chain\n \n@@ -1484,6 +1373,118 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             MilliSleep(10);\n     }\n \n+    // ********************************************************* Step 6: network initialization\n+\n+    RegisterNodeSignals(GetNodeSignals());\n+\n+    // format user agent, check total size\n+    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>());\n+    if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n+        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n+            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n+    }\n+\n+    if (mapArgs.count(\"-onlynet\")) {\n+        std::set<enum Network> nets;\n+        BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {\n+            enum Network net = ParseNetwork(snet);\n+            if (net == NET_UNROUTABLE)\n+                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n+            nets.insert(net);\n+        }\n+        for (int n = 0; n < NET_MAX; n++) {\n+            enum Network net = (enum Network)n;\n+            if (!nets.count(net))\n+                SetLimited(net);\n+        }\n+    }\n+\n+    if (mapArgs.count(\"-whitelist\")) {\n+        BOOST_FOREACH(const std::string& net, mapMultiArgs[\"-whitelist\"]) {\n+            CSubNet subnet(net);\n+            if (!subnet.IsValid())\n+                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            CNode::AddWhitelistedRange(subnet);\n+        }\n+    }\n+\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    // -proxy sets a proxy for all outgoing network traffic\n+    // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n+    std::string proxyArg = GetArg(\"-proxy\", \"\");\n+    if (proxyArg != \"\" && proxyArg != \"0\") {\n+        proxyType addrProxy = proxyType(CService(proxyArg, 9050), proxyRandomize);\n+        if (!addrProxy.IsValid())\n+            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n+\n+        SetProxy(NET_IPV4, addrProxy);\n+        SetProxy(NET_IPV6, addrProxy);\n+        SetProxy(NET_TOR, addrProxy);\n+        SetNameProxy(addrProxy);\n+        SetReachable(NET_TOR); // by default, -proxy sets onion as reachable, unless -noonion later\n+    }\n+\n+    // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n+    // -noonion (or -onion=0) disables connecting to .onion entirely\n+    // An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)\n+    std::string onionArg = GetArg(\"-onion\", \"\");\n+    if (onionArg != \"\") {\n+        if (onionArg == \"0\") { // Handle -noonion/-onion=0\n+            SetReachable(NET_TOR, false); // set onions as unreachable\n+        } else {\n+            proxyType addrOnion = proxyType(CService(onionArg, 9050), proxyRandomize);\n+            if (!addrOnion.IsValid())\n+                return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));\n+            SetProxy(NET_TOR, addrOnion);\n+            SetReachable(NET_TOR);\n+        }\n+    }\n+\n+    // see Step 2: parameter interactions for more information about these\n+    fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n+    fDiscover = GetBoolArg(\"-discover\", true);\n+    fNameLookup = GetBoolArg(\"-dns\", true);\n+\n+    bool fBound = false;\n+    if (fListen) {\n+        if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-bind\"]) {\n+                CService addrBind;\n+                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n+                    return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind));\n+                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n+            }\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n+                CService addrBind;\n+                if (!Lookup(strBind.c_str(), addrBind, 0, false))\n+                    return InitError(strprintf(_(\"Cannot resolve -whitebind address: '%s'\"), strBind));\n+                if (addrBind.GetPort() == 0)\n+                    return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n+            }\n+        }\n+        else {\n+            struct in_addr inaddr_any;\n+            inaddr_any.s_addr = INADDR_ANY;\n+            fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n+            fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+        }\n+        if (!fBound)\n+            return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n+    }\n+\n+    if (mapArgs.count(\"-externalip\")) {\n+        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n+            CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n+            if (!addrLocal.IsValid())\n+                return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr));\n+            AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n+        }\n+    }\n+\n+    BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n+        AddOneShot(strDest);\n+\n     // ********************************************************* Step 11: start node\n \n     if (!CheckDiskSpace())"
      }
    ]
  },
  {
    "sha": "719171cdb689bb6432f67866f88bbb77ba6d170e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTkxNzFjZGI2ODliYjY0MzJmNjc4NjZmODhiYmI3N2JhNmQxNzBl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T13:50:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T13:50:12Z"
      },
      "message": "[trivial] fix comments in init.cpp",
      "tree": {
        "sha": "118d22294176d1ddba9530bcd72dc6f3eb82fa56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/118d22294176d1ddba9530bcd72dc6f3eb82fa56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/719171cdb689bb6432f67866f88bbb77ba6d170e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719171cdb689bb6432f67866f88bbb77ba6d170e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/719171cdb689bb6432f67866f88bbb77ba6d170e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719171cdb689bb6432f67866f88bbb77ba6d170e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ac42c49f7bfc1e158a83c6d98bc465b06894e8a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9035c2751df281d9767a2c4235b4ffa6d4db1cf9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/719171cdb689bb6432f67866f88bbb77ba6d170e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/719171cdb689bb6432f67866f88bbb77ba6d170e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=719171cdb689bb6432f67866f88bbb77ba6d170e",
        "patch": "@@ -1011,7 +1011,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n \n-    // ********************************************************* Step 7: load block chain\n+    // ********************************************************* Step 6: load block chain\n \n     fReindex = GetBoolArg(\"-reindex\", false);\n \n@@ -1182,7 +1182,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.ReadFeeEstimates(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 7: load wallet\n #ifdef ENABLE_WALLET\n     if (fDisableWallet) {\n         pwalletMain = NULL;\n@@ -1336,7 +1336,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif // !ENABLE_WALLET\n \n-    // ********************************************************* Step 9: data directory maintenance\n+    // ********************************************************* Step 8: data directory maintenance\n \n     // if pruning, unset the service bit and perform the initial blockstore prune\n     // after any wallet rescanning has taken place.\n@@ -1349,7 +1349,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    // ********************************************************* Step 10: import blocks\n+    // ********************************************************* Step 9: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n@@ -1373,7 +1373,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             MilliSleep(10);\n     }\n \n-    // ********************************************************* Step 6: network initialization\n+    // ********************************************************* Step 10: network initialization\n \n     RegisterNodeSignals(GetNodeSignals());\n \n@@ -1515,7 +1515,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Generate coins in the background\n     GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n \n-    // ********************************************************* Step 11: finished\n+    // ********************************************************* Step 12: finished\n \n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));"
      }
    ]
  },
  {
    "sha": "e12d0ad066df6be6e148a065a0326e5084e56609",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTJkMGFkMDY2ZGY2YmU2ZTE0OGEwNjVhMDMyNmU1MDg0ZTU2NjA5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T13:53:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T13:53:25Z"
      },
      "message": "[net] Reduce systematic error of time offset measurements\n\nGetTime() can only be larger than the received time; Possibly\nbetween 200-20000 microseconds.",
      "tree": {
        "sha": "2ef8ca457f168f1062433e0a71b49692b32a9f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ef8ca457f168f1062433e0a71b49692b32a9f4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e12d0ad066df6be6e148a065a0326e5084e56609",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12d0ad066df6be6e148a065a0326e5084e56609",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e12d0ad066df6be6e148a065a0326e5084e56609",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e12d0ad066df6be6e148a065a0326e5084e56609/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "719171cdb689bb6432f67866f88bbb77ba6d170e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719171cdb689bb6432f67866f88bbb77ba6d170e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/719171cdb689bb6432f67866f88bbb77ba6d170e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dfa7488ec85ed96257d5fe1f389ff40a839c0c44",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e12d0ad066df6be6e148a065a0326e5084e56609/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e12d0ad066df6be6e148a065a0326e5084e56609/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e12d0ad066df6be6e148a065a0326e5084e56609",
        "patch": "@@ -3974,7 +3974,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n                   remoteAddr);\n \n-        int64_t nTimeOffset = nTime - GetTime();\n+        int64_t nTimeOffset = nTime - nTimeReceived / 1000000;\n         pfrom->nTimeOffset = nTimeOffset;\n         AddTimeData(pfrom->addr, nTimeOffset);\n     }"
      }
    ]
  }
]