[
  {
    "sha": "69f623828c0ebf876473b87c59b0fd91f41c66ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWY2MjM4MjhjMGViZjg3NjQ3M2I4N2M1OWIwZmQ5MWY0MWM2NmFk",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T18:04:07Z"
      },
      "committer": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T19:16:24Z"
      },
      "message": "Consistently use UniValue.pushKV\n\nConsistently use UniValue.pushKV instead of UniValue.push_back(Pair())\n\nReplicable by `find . -name '*.cpp' -print0 | xargs -0 sed -i 's/push_back(Pair(\\(.*\\)));/pushKV(\\1);/g'`",
      "tree": {
        "sha": "5af39edcac9ae24f3cad98cbd3deb4ff6736daee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5af39edcac9ae24f3cad98cbd3deb4ff6736daee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69f623828c0ebf876473b87c59b0fd91f41c66ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69f623828c0ebf876473b87c59b0fd91f41c66ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69f623828c0ebf876473b87c59b0fd91f41c66ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69f623828c0ebf876473b87c59b0fd91f41c66ad/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c9015bca861085f76ca3c045e17d0591aa6c8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c9015bca861085f76ca3c045e17d0591aa6c8b"
      }
    ],
    "stats": {
      "total": 778,
      "additions": 389,
      "deletions": 389
    },
    "files": [
      {
        "sha": "6078682008827271a7d4c1b1a92b09ee549c74aa",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -535,23 +535,23 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n-        objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n         for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n-            utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n-            utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+            utxo.pushKV(\"height\", (int32_t)coin.nHeight);\n+            utxo.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n \n             // include the script in a json output\n             UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-            utxo.push_back(Pair(\"scriptPubKey\", o));\n+            utxo.pushKV(\"scriptPubKey\", o);\n             utxos.push_back(utxo);\n         }\n-        objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n+        objGetUTXOResponse.pushKV(\"utxos\", utxos);\n \n         // return json string\n         std::string strJSON = objGetUTXOResponse.write() + \"\\n\";"
      },
      {
        "sha": "7bbf31d80db7d817986fe24a93fff3131ac54c13",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 112,
        "changes": 224,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -78,47 +78,47 @@ double GetDifficulty(const CBlockIndex* blockindex)\n UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n {\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", blockindex->nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion)));\n-    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n-    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", blockindex->nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n+    result.pushKV(\"merkleroot\", blockindex->hashMerkleRoot.GetHex());\n+    result.pushKV(\"time\", (int64_t)blockindex->nTime);\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)blockindex->nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", blockindex->nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n {\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", block.nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n-    result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n+    result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n+    result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", block.nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n+    result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n     for(const auto& tx : block.vtx)\n     {\n@@ -131,19 +131,19 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         else\n             txs.push_back(tx->GetHash().GetHex());\n     }\n-    result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", block.GetBlockTime()));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"tx\", txs);\n+    result.pushKV(\"time\", block.GetBlockTime());\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n@@ -224,8 +224,8 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -266,8 +266,8 @@ UniValue waitforblock(const JSONRPCRequest& request)\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -308,8 +308,8 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -353,18 +353,18 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n     AssertLockHeld(mempool.cs);\n \n-    info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n-    info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n-    info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n-    info.push_back(Pair(\"time\", e.GetTime()));\n-    info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n-    info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-    info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n-    info.push_back(Pair(\"ancestorcount\", e.GetCountWithAncestors()));\n-    info.push_back(Pair(\"ancestorsize\", e.GetSizeWithAncestors()));\n-    info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n-    info.push_back(Pair(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString()));\n+    info.pushKV(\"size\", (int)e.GetTxSize());\n+    info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n+    info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n+    info.pushKV(\"time\", e.GetTime());\n+    info.pushKV(\"height\", (int)e.GetHeight());\n+    info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n+    info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());\n+    info.pushKV(\"descendantfees\", e.GetModFeesWithDescendants());\n+    info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n+    info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n+    info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n+    info.pushKV(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n@@ -379,7 +379,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n         depends.push_back(dep);\n     }\n \n-    info.push_back(Pair(\"depends\", depends));\n+    info.pushKV(\"depends\", depends);\n }\n \n UniValue mempoolToJSON(bool fVerbose)\n@@ -393,7 +393,7 @@ UniValue mempoolToJSON(bool fVerbose)\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.pushKV(hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -500,7 +500,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -564,7 +564,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -926,14 +926,14 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     CCoinsStats stats;\n     FlushStateToDisk();\n     if (GetUTXOStats(pcoinsdbview, stats)) {\n-        ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n-        ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n-        ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n-        ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n-        ret.push_back(Pair(\"bogosize\", (int64_t)stats.nBogoSize));\n-        ret.push_back(Pair(\"hash_serialized_2\", stats.hashSerialized.GetHex()));\n-        ret.push_back(Pair(\"disk_size\", stats.nDiskSize));\n-        ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n+        ret.pushKV(\"height\", (int64_t)stats.nHeight);\n+        ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n+        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+        ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n+        ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n+        ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n+        ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n@@ -1005,17 +1005,17 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n-    ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+    ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n-        ret.push_back(Pair(\"confirmations\", 0));\n+        ret.pushKV(\"confirmations\", 0);\n     } else {\n-        ret.push_back(Pair(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1)));\n+        ret.pushKV(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1));\n     }\n-    ret.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+    ret.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-    ret.push_back(Pair(\"scriptPubKey\", o));\n-    ret.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+    ret.pushKV(\"scriptPubKey\", o);\n+    ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n }\n@@ -1065,16 +1065,16 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n             activated = pindex->nHeight >= consensusParams.BIP65Height;\n             break;\n     }\n-    rv.push_back(Pair(\"status\", activated));\n+    rv.pushKV(\"status\", activated);\n     return rv;\n }\n \n static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n+    rv.pushKV(\"id\", name);\n+    rv.pushKV(\"version\", version);\n+    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n     return rv;\n }\n \n@@ -1083,29 +1083,29 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     UniValue rv(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n-    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n-    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n-    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n-    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    case THRESHOLD_DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n+    case THRESHOLD_STARTED: rv.pushKV(\"status\", \"started\"); break;\n+    case THRESHOLD_LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n+    case THRESHOLD_ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n+    case THRESHOLD_FAILED: rv.pushKV(\"status\", \"failed\"); break;\n     }\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n-        rv.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n+        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n-    rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n-    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n         BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n-        statsUV.push_back(Pair(\"period\", statsStruct.period));\n-        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n-        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n-        statsUV.push_back(Pair(\"count\", statsStruct.count));\n-        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n-        rv.push_back(Pair(\"statistics\", statsUV));\n+        statsUV.pushKV(\"period\", statsStruct.period);\n+        statsUV.pushKV(\"threshold\", statsStruct.threshold);\n+        statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n+        statsUV.pushKV(\"count\", statsStruct.count);\n+        statsUV.pushKV(\"possible\", statsStruct.possible);\n+        rv.pushKV(\"statistics\", statsUV);\n     }\n     return rv;\n }\n@@ -1116,7 +1116,7 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name,\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.pushKV(name, BIP9SoftForkDesc(consensusParams, id));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1171,15 +1171,15 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n-    obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n-    obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n-    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n-    obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n-    obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n-    obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n-    obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    obj.pushKV(\"chain\",                 Params().NetworkIDString());\n+    obj.pushKV(\"blocks\",                (int)chainActive.Height());\n+    obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+    obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n+    obj.pushKV(\"difficulty\",            (double)GetDifficulty());\n+    obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());\n+    obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip()));\n+    obj.pushKV(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex());\n+    obj.pushKV(\"pruned\",                fPruneMode);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n@@ -1190,16 +1190,16 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     BIP9SoftForkDescPushBack(bip9_softforks, \"csv\", consensusParams, Consensus::DEPLOYMENT_CSV);\n     BIP9SoftForkDescPushBack(bip9_softforks, \"segwit\", consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n-    obj.push_back(Pair(\"softforks\",             softforks));\n-    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n+    obj.pushKV(\"softforks\",             softforks);\n+    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n     if (fPruneMode)\n     {\n         CBlockIndex *block = chainActive.Tip();\n         while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA))\n             block = block->pprev;\n \n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+        obj.pushKV(\"pruneheight\",        block->nHeight);\n     }\n     return obj;\n }\n@@ -1288,11 +1288,11 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"height\", block->nHeight));\n-        obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n+        obj.pushKV(\"height\", block->nHeight);\n+        obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n         const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n-        obj.push_back(Pair(\"branchlen\", branchLen));\n+        obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n         if (chainActive.Contains(block)) {\n@@ -1314,7 +1314,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n             // No clue.\n             status = \"unknown\";\n         }\n-        obj.push_back(Pair(\"status\", status));\n+        obj.pushKV(\"status\", status);\n \n         res.push_back(obj);\n     }\n@@ -1325,12 +1325,12 @@ UniValue getchaintips(const JSONRPCRequest& request)\n UniValue mempoolInfoToJSON()\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    ret.pushKV(\"size\", (int64_t) mempool.size());\n+    ret.pushKV(\"bytes\", (int64_t) mempool.GetTotalTxSize());\n+    ret.pushKV(\"usage\", (int64_t) mempool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n+    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK()));\n \n     return ret;\n }\n@@ -1530,9 +1530,9 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n-    ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n-    ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+    ret.pushKV(\"time\", (int64_t)pindex->nTime);\n+    ret.pushKV(\"txcount\", (int64_t)pindex->nChainTx);\n+    ret.pushKV(\"txrate\", ((double)nTxDiff) / nTimeDiff);\n \n     return ret;\n }"
      },
      {
        "sha": "87e5b90cf19ae435d63fcde825123ff3f97c6226",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -213,14 +213,14 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n-    obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n-    obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n-    obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n+    obj.pushKV(\"blocks\",           (int)chainActive.Height());\n+    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n+    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty());\n+    obj.pushKV(\"errors\",           GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n+    obj.pushKV(\"chain\",            Params().NetworkIDString());\n     return obj;\n }\n \n@@ -552,33 +552,33 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         UniValue entry(UniValue::VOBJ);\n \n-        entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n-        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+        entry.pushKV(\"data\", EncodeHexTx(tx));\n+        entry.pushKV(\"txid\", txHash.GetHex());\n+        entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n \n         UniValue deps(UniValue::VARR);\n         for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n-        entry.push_back(Pair(\"depends\", deps));\n+        entry.pushKV(\"depends\", deps);\n \n         int index_in_template = i - 1;\n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);\n         int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n         if (fPreSegWit) {\n             assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n             nTxSigOps /= WITNESS_SCALE_FACTOR;\n         }\n-        entry.push_back(Pair(\"sigops\", nTxSigOps));\n-        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n+        entry.pushKV(\"sigops\", nTxSigOps);\n+        entry.pushKV(\"weight\", GetTransactionWeight(tx));\n \n         transactions.push_back(entry);\n     }\n \n     UniValue aux(UniValue::VOBJ);\n-    aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+    aux.pushKV(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end()));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n@@ -588,7 +588,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     aMutable.push_back(\"prevblock\");\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"capabilities\", aCaps));\n+    result.pushKV(\"capabilities\", aCaps);\n \n     UniValue aRules(UniValue::VARR);\n     UniValue vbavailable(UniValue::VOBJ);\n@@ -607,7 +607,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             case THRESHOLD_STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n@@ -632,10 +632,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             }\n         }\n     }\n-    result.push_back(Pair(\"version\", pblock->nVersion));\n-    result.push_back(Pair(\"rules\", aRules));\n-    result.push_back(Pair(\"vbavailable\", vbavailable));\n-    result.push_back(Pair(\"vbrequired\", int(0)));\n+    result.pushKV(\"version\", pblock->nVersion);\n+    result.pushKV(\"rules\", aRules);\n+    result.pushKV(\"vbavailable\", vbavailable);\n+    result.pushKV(\"vbrequired\", int(0));\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n@@ -645,15 +645,15 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         aMutable.push_back(\"version/force\");\n     }\n \n-    result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n-    result.push_back(Pair(\"transactions\", transactions));\n-    result.push_back(Pair(\"coinbaseaux\", aux));\n-    result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue));\n-    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-    result.push_back(Pair(\"mutable\", aMutable));\n-    result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+    result.pushKV(\"previousblockhash\", pblock->hashPrevBlock.GetHex());\n+    result.pushKV(\"transactions\", transactions);\n+    result.pushKV(\"coinbaseaux\", aux);\n+    result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n+    result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n+    result.pushKV(\"target\", hashTarget.GetHex());\n+    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    result.pushKV(\"mutable\", aMutable);\n+    result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n@@ -662,17 +662,17 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n-    result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    result.pushKV(\"sigoplimit\", nSigOpLimit);\n+    result.pushKV(\"sizelimit\", nSizeLimit);\n     if (!fPreSegWit) {\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+        result.pushKV(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT);\n     }\n-    result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n-    result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    result.pushKV(\"curtime\", pblock->GetBlockTime());\n+    result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n+    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n-        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n \n     return result;\n@@ -854,12 +854,12 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n-        result.push_back(Pair(\"errors\", errors));\n+        result.pushKV(\"errors\", errors);\n     }\n-    result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n+    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n     return result;\n }\n \n@@ -930,37 +930,37 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n-        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n+        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n+        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n+        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n+        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n+        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n         UniValue failbucket(UniValue::VOBJ);\n-        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n+        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n+        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n+        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n+        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n+        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n         if (feeRate != CFeeRate(0)) {\n-            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"pass\", passbucket);\n             // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n-            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n         } else {\n             // Output only information that is still meaningful in the event of error\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"fail\", failbucket);\n             errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n-            horizon_result.push_back(Pair(\"errors\",errors));\n+            horizon_result.pushKV(\"errors\",errors);\n         }\n-        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n     }\n     return result;\n }"
      },
      {
        "sha": "d853c8dc390c12725eb98fd576675c1a092ca55b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -44,32 +44,32 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n+        obj.pushKV(\"isscript\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n         }\n         return obj;\n     }\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n+        obj.pushKV(\"isscript\", true);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n             int nRequired;\n             ExtractDestinations(subscript, whichType, addresses, nRequired);\n-            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            obj.pushKV(\"script\", GetTxnOutputType(whichType));\n+            obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n             UniValue a(UniValue::VARR);\n             for (const CTxDestination& addr : addresses) {\n                 a.push_back(EncodeDestination(addr));\n             }\n-            obj.push_back(Pair(\"addresses\", a));\n+            obj.pushKV(\"addresses\", a);\n             if (whichType == TX_MULTISIG)\n-                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+                obj.pushKV(\"sigsrequired\", nRequired);\n         }\n         return obj;\n     }\n@@ -124,23 +124,23 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"isvalid\", isValid));\n+    ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n         std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n+        ret.pushKV(\"address\", currentAddress);\n \n         CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n+        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n         if (pwallet) {\n             const auto& meta = pwallet->mapKeyMetadata;\n@@ -150,10 +150,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 it = meta.find(CScriptID(scriptPubKey));\n             }\n             if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                ret.pushKV(\"timestamp\", it->second.nCreateTime);\n                 if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                    ret.pushKV(\"hdkeypath\", it->second.hdKeypath);\n+                    ret.pushKV(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex());\n                 }\n             }\n         }\n@@ -270,8 +270,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     CScriptID innerID(inner);\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"address\", EncodeDestination(innerID)));\n-    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+    result.pushKV(\"address\", EncodeDestination(innerID));\n+    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n \n     return result;\n }\n@@ -405,12 +405,12 @@ static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n-    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n-    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n-    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n-    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n-    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    obj.pushKV(\"used\", uint64_t(stats.used));\n+    obj.pushKV(\"free\", uint64_t(stats.free));\n+    obj.pushKV(\"total\", uint64_t(stats.total));\n+    obj.pushKV(\"locked\", uint64_t(stats.locked));\n+    obj.pushKV(\"chunks_used\", uint64_t(stats.chunks_used));\n+    obj.pushKV(\"chunks_free\", uint64_t(stats.chunks_free));\n     return obj;\n }\n \n@@ -467,7 +467,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+        obj.pushKV(\"locked\", RPCLockedMemoryInfo());\n         return obj;\n     } else if (mode == \"mallocinfo\") {\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "6d7540755a80a4968a563f2aea5d7798870e00a0",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 69,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -130,59 +130,59 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n+        obj.pushKV(\"id\", stats.nodeid);\n+        obj.pushKV(\"addr\", stats.addrName);\n         if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+            obj.pushKV(\"addrlocal\", stats.addrLocal);\n         if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n+        obj.pushKV(\"lastsend\", stats.nLastSend);\n+        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+        obj.pushKV(\"bytessent\", stats.nSendBytes);\n+        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n+        obj.pushKV(\"conntime\", stats.nTimeConnected);\n+        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n         if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+            obj.pushKV(\"pingtime\", stats.dPingTime);\n         if (stats.dMinPing < std::numeric_limits<int64_t>::max()/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n+            obj.pushKV(\"minping\", stats.dMinPing);\n         if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n+            obj.pushKV(\"pingwait\", stats.dPingWait);\n+        obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n         // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+        obj.pushKV(\"subver\", stats.cleanSubVer);\n+        obj.pushKV(\"inbound\", stats.fInbound);\n+        obj.pushKV(\"addnode\", stats.fAddnode);\n+        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n         if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n+            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);\n             for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n-            obj.push_back(Pair(\"inflight\", heights));\n+            obj.pushKV(\"inflight\", heights);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+                sendPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+                recvPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n \n         ret.push_back(obj);\n     }\n@@ -329,16 +329,16 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     for (const AddedNodeInfo& info : vInfo) {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"addednode\", info.strAddedNode));\n-        obj.push_back(Pair(\"connected\", info.fConnected));\n+        obj.pushKV(\"addednode\", info.strAddedNode);\n+        obj.pushKV(\"connected\", info.fConnected);\n         UniValue addresses(UniValue::VARR);\n         if (info.fConnected) {\n             UniValue address(UniValue::VOBJ);\n-            address.push_back(Pair(\"address\", info.resolvedAddress.ToString()));\n-            address.push_back(Pair(\"connected\", info.fInbound ? \"inbound\" : \"outbound\"));\n+            address.pushKV(\"address\", info.resolvedAddress.ToString());\n+            address.pushKV(\"connected\", info.fInbound ? \"inbound\" : \"outbound\");\n             addresses.push_back(address);\n         }\n-        obj.push_back(Pair(\"addresses\", addresses));\n+        obj.pushKV(\"addresses\", addresses);\n         ret.push_back(obj);\n     }\n \n@@ -375,18 +375,18 @@ UniValue getnettotals(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"totalbytesrecv\", g_connman->GetTotalBytesRecv()));\n-    obj.push_back(Pair(\"totalbytessent\", g_connman->GetTotalBytesSent()));\n-    obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+    obj.pushKV(\"totalbytesrecv\", g_connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", g_connman->GetTotalBytesSent());\n+    obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.push_back(Pair(\"timeframe\", g_connman->GetMaxOutboundTimeframe()));\n-    outboundLimit.push_back(Pair(\"target\", g_connman->GetMaxOutboundTarget()));\n-    outboundLimit.push_back(Pair(\"target_reached\", g_connman->OutboundTargetReached(false)));\n-    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true)));\n-    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft()));\n-    outboundLimit.push_back(Pair(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle()));\n-    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n+    outboundLimit.pushKV(\"timeframe\", g_connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", g_connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", g_connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle());\n+    obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n \n@@ -401,11 +401,11 @@ static UniValue GetNetworksInfo()\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n-        obj.push_back(Pair(\"name\", GetNetworkName(network)));\n-        obj.push_back(Pair(\"limited\", IsLimited(network)));\n-        obj.push_back(Pair(\"reachable\", IsReachable(network)));\n-        obj.push_back(Pair(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string()));\n-        obj.push_back(Pair(\"proxy_randomize_credentials\", proxy.randomize_credentials));\n+        obj.pushKV(\"name\", GetNetworkName(network));\n+        obj.pushKV(\"limited\", IsLimited(network));\n+        obj.pushKV(\"reachable\", IsReachable(network));\n+        obj.pushKV(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string());\n+        obj.pushKV(\"proxy_randomize_credentials\", proxy.randomize_credentials);\n         networks.push_back(obj);\n     }\n     return networks;\n@@ -456,34 +456,34 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",    strSubVersion));\n-    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n+    obj.pushKV(\"version\",       CLIENT_VERSION);\n+    obj.pushKV(\"subversion\",    strSubVersion);\n+    obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     if(g_connman)\n-        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n-    obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n-    obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n+        obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n+    obj.pushKV(\"localrelay\",     fRelayTxes);\n+    obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {\n-        obj.push_back(Pair(\"networkactive\", g_connman->GetNetworkActive()));\n-        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n+        obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n-    obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n+    obj.pushKV(\"networks\",      GetNetworksInfo());\n+    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n+    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK()));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n         for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n-            rec.push_back(Pair(\"address\", item.first.ToString()));\n-            rec.push_back(Pair(\"port\", item.second.nPort));\n-            rec.push_back(Pair(\"score\", item.second.nScore));\n+            rec.pushKV(\"address\", item.first.ToString());\n+            rec.pushKV(\"port\", item.second.nPort);\n+            rec.pushKV(\"score\", item.second.nScore);\n             localAddresses.push_back(rec);\n         }\n     }\n-    obj.push_back(Pair(\"localaddresses\", localAddresses));\n-    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"localaddresses\", localAddresses);\n+    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -573,10 +573,10 @@ UniValue listbanned(const JSONRPCRequest& request)\n     {\n         CBanEntry banEntry = (*it).second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", (*it).first.ToString()));\n-        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n-        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n-        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+        rec.pushKV(\"address\", (*it).first.ToString());\n+        rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n+        rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n+        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "a7de37e9cd42e59cdeec047179bb9dc58a4d4ba2",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -27,21 +27,21 @@\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n-    request.push_back(Pair(\"method\", strMethod));\n-    request.push_back(Pair(\"params\", params));\n-    request.push_back(Pair(\"id\", id));\n+    request.pushKV(\"method\", strMethod);\n+    request.pushKV(\"params\", params);\n+    request.pushKV(\"id\", id);\n     return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n-        reply.push_back(Pair(\"result\", NullUniValue));\n+        reply.pushKV(\"result\", NullUniValue);\n     else\n-        reply.push_back(Pair(\"result\", result));\n-    reply.push_back(Pair(\"error\", error));\n-    reply.push_back(Pair(\"id\", id));\n+        reply.pushKV(\"result\", result);\n+    reply.pushKV(\"error\", error);\n+    reply.pushKV(\"id\", id);\n     return reply;\n }\n \n@@ -54,8 +54,8 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message)\n {\n     UniValue error(UniValue::VOBJ);\n-    error.push_back(Pair(\"code\", code));\n-    error.push_back(Pair(\"message\", message));\n+    error.pushKV(\"code\", code);\n+    error.pushKV(\"message\", message);\n     return error;\n }\n "
      },
      {
        "sha": "5d4c078208a1099131286376a4baa7a4f5453d9e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -45,17 +45,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n-        entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n+        entry.pushKV(\"blockhash\", hashBlock.GetHex());\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {\n-                entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n-                entry.push_back(Pair(\"blocktime\", pindex->GetBlockTime()));\n+                entry.pushKV(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight);\n+                entry.pushKV(\"time\", pindex->GetBlockTime());\n+                entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n             else\n-                entry.push_back(Pair(\"confirmations\", 0));\n+                entry.pushKV(\"confirmations\", 0);\n         }\n     }\n }\n@@ -530,7 +530,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n     if (type.isStr() && type.get_str() != \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.push_back(Pair(\"p2sh\", EncodeDestination(CScriptID(script))));\n+        r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n     }\n \n     return r;\n@@ -540,16 +540,16 @@ UniValue decodescript(const JSONRPCRequest& request)\n static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n {\n     UniValue entry(UniValue::VOBJ);\n-    entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n-    entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n+    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n+    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n     UniValue witness(UniValue::VARR);\n     for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n         witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n     }\n-    entry.push_back(Pair(\"witness\", witness));\n-    entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n-    entry.push_back(Pair(\"sequence\", (uint64_t)txin.nSequence));\n-    entry.push_back(Pair(\"error\", strMessage));\n+    entry.pushKV(\"witness\", witness);\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n+    entry.pushKV(\"error\", strMessage);\n     vErrorsRet.push_back(entry);\n }\n \n@@ -879,10 +879,10 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     bool fComplete = vErrors.empty();\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(mtx)));\n-    result.push_back(Pair(\"complete\", fComplete));\n+    result.pushKV(\"hex\", EncodeHexTx(mtx));\n+    result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n-        result.push_back(Pair(\"errors\", vErrors));\n+        result.pushKV(\"errors\", vErrors);\n     }\n \n     return result;"
      },
      {
        "sha": "6129c138cf9b82e4bfe6e7d715363a91c3192841",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -685,7 +685,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.push_back(Pair(\"filename\", filepath.string()));\n+    reply.pushKV(\"filename\", filepath.string());\n \n     return reply;\n }"
      },
      {
        "sha": "def43f4af3f0b6730240ebdac5c8845ef6316e82",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 87,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69f623828c0ebf876473b87c59b0fd91f41c66ad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "patch": "@@ -84,25 +84,25 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n-    entry.push_back(Pair(\"confirmations\", confirms));\n+    entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n-        entry.push_back(Pair(\"generated\", true));\n+        entry.pushKV(\"generated\", true);\n     if (confirms > 0)\n     {\n-        entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n-        entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+        entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n+        entry.pushKV(\"blockindex\", wtx.nIndex);\n+        entry.pushKV(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime());\n     } else {\n-        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n+        entry.pushKV(\"trusted\", wtx.IsTrusted());\n     }\n     uint256 hash = wtx.GetHash();\n-    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    entry.pushKV(\"txid\", hash.GetHex());\n     UniValue conflicts(UniValue::VARR);\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n-    entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n-    entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n+    entry.pushKV(\"walletconflicts\", conflicts);\n+    entry.pushKV(\"time\", wtx.GetTxTime());\n+    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n@@ -114,10 +114,10 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         else if (rbfState == RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125)\n             rbfStatus = \"yes\";\n     }\n-    entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n+    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n     for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n-        entry.push_back(Pair(item.first, item.second));\n+        entry.pushKV(item.first, item.second);\n }\n \n std::string AccountFromValue(const UniValue& value)\n@@ -1344,13 +1344,13 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         {\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"address\",       EncodeDestination(dest)));\n-            obj.push_back(Pair(\"account\",       strAccount));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"account\",       strAccount);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             if (!fByAccounts)\n-                obj.push_back(Pair(\"label\", strAccount));\n+                obj.pushKV(\"label\", strAccount);\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n@@ -1359,7 +1359,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n                     transactions.push_back(_item.GetHex());\n                 }\n             }\n-            obj.push_back(Pair(\"txids\", transactions));\n+            obj.pushKV(\"txids\", transactions);\n             ret.push_back(obj);\n         }\n     }\n@@ -1372,10 +1372,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             int nConf = (*it).second.nConf;\n             UniValue obj(UniValue::VOBJ);\n             if((*it).second.fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       (*it).first));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"account\",       (*it).first);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             ret.push_back(obj);\n         }\n     }\n@@ -1471,7 +1471,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n {\n     if (IsValidDestination(dest)) {\n-        entry.push_back(Pair(\"address\", EncodeDestination(dest)));\n+        entry.pushKV(\"address\", EncodeDestination(dest));\n     }\n }\n \n@@ -1505,20 +1505,20 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.push_back(Pair(\"involvesWatchonly\", true));\n+                entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            entry.push_back(Pair(\"account\", strSentAccount));\n+            entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n-            entry.push_back(Pair(\"category\", \"send\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n             if (pwallet->mapAddressBook.count(s.destination)) {\n-                entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n             }\n-            entry.push_back(Pair(\"vout\", s.vout));\n-            entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n                 WalletTxToJSON(wtx, entry);\n-            entry.push_back(Pair(\"abandoned\", wtx.isAbandoned()));\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n     }\n@@ -1536,28 +1536,28 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             {\n                 UniValue entry(UniValue::VOBJ);\n                 if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n-                    entry.push_back(Pair(\"involvesWatchonly\", true));\n+                    entry.pushKV(\"involvesWatchonly\", true);\n                 }\n-                entry.push_back(Pair(\"account\", account));\n+                entry.pushKV(\"account\", account);\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n                     if (wtx.GetDepthInMainChain() < 1)\n-                        entry.push_back(Pair(\"category\", \"orphan\"));\n+                        entry.pushKV(\"category\", \"orphan\");\n                     else if (wtx.GetBlocksToMaturity() > 0)\n-                        entry.push_back(Pair(\"category\", \"immature\"));\n+                        entry.pushKV(\"category\", \"immature\");\n                     else\n-                        entry.push_back(Pair(\"category\", \"generate\"));\n+                        entry.pushKV(\"category\", \"generate\");\n                 }\n                 else\n                 {\n-                    entry.push_back(Pair(\"category\", \"receive\"));\n+                    entry.pushKV(\"category\", \"receive\");\n                 }\n-                entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n+                entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n                 if (pwallet->mapAddressBook.count(r.destination)) {\n-                    entry.push_back(Pair(\"label\", account));\n+                    entry.pushKV(\"label\", account);\n                 }\n-                entry.push_back(Pair(\"vout\", r.vout));\n+                entry.pushKV(\"vout\", r.vout);\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n                 ret.push_back(entry);\n@@ -1573,12 +1573,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n     if (fAllAccounts || acentry.strAccount == strAccount)\n     {\n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"account\", acentry.strAccount));\n-        entry.push_back(Pair(\"category\", \"move\"));\n-        entry.push_back(Pair(\"time\", acentry.nTime));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n-        entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n-        entry.push_back(Pair(\"comment\", acentry.strComment));\n+        entry.pushKV(\"account\", acentry.strAccount);\n+        entry.pushKV(\"category\", \"move\");\n+        entry.pushKV(\"time\", acentry.nTime);\n+        entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n+        entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n+        entry.pushKV(\"comment\", acentry.strComment);\n         ret.push_back(entry);\n     }\n }\n@@ -1792,7 +1792,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n-        ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n+        ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n }\n@@ -1926,9 +1926,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"transactions\", transactions));\n-    if (include_removed) ret.push_back(Pair(\"removed\", removed));\n-    ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n+    ret.pushKV(\"transactions\", transactions);\n+    if (include_removed) ret.pushKV(\"removed\", removed);\n+    ret.pushKV(\"lastblock\", lastblock.GetHex());\n \n     return ret;\n }\n@@ -2008,18 +2008,18 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n \n-    entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n     if (wtx.IsFromMe(filter))\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n-    entry.push_back(Pair(\"details\", details));\n+    entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(static_cast<CTransaction>(wtx), RPCSerializationFlags());\n-    entry.push_back(Pair(\"hex\", strHex));\n+    entry.pushKV(\"hex\", strHex);\n \n     return entry;\n }\n@@ -2491,8 +2491,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n-        o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n-        o.push_back(Pair(\"vout\", (int)outpt.n));\n+        o.pushKV(\"txid\", outpt.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpt.n);\n         ret.push_back(o);\n     }\n \n@@ -2565,24 +2565,24 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n-    obj.push_back(Pair(\"walletname\", pwallet->GetName()));\n-    obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\", (int64_t)kpExternalSize));\n+    obj.pushKV(\"walletname\", pwallet->GetName());\n+    obj.pushKV(\"walletversion\", pwallet->GetVersion());\n+    obj.pushKV(\"balance\",       ValueFromAmount(pwallet->GetBalance()));\n+    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance()));\n+    obj.pushKV(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance()));\n+    obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n+    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize)));\n+        obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n-        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+        obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+    obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n     return obj;\n }\n \n@@ -2784,31 +2784,31 @@ UniValue listunspent(const JSONRPCRequest& request)\n             continue;\n \n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n-        entry.push_back(Pair(\"vout\", out.i));\n+        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n+        entry.pushKV(\"vout\", out.i);\n \n         if (fValidAddress) {\n-            entry.push_back(Pair(\"address\", EncodeDestination(address)));\n+            entry.pushKV(\"address\", EncodeDestination(address));\n \n             if (pwallet->mapAddressBook.count(address)) {\n-                entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n+                entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n                 }\n             }\n         }\n \n-        entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue)));\n-        entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        entry.push_back(Pair(\"solvable\", out.fSolvable));\n-        entry.push_back(Pair(\"safe\", out.fSafe));\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"confirmations\", out.nDepth);\n+        entry.pushKV(\"spendable\", out.fSpendable);\n+        entry.pushKV(\"solvable\", out.fSolvable);\n+        entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }\n \n@@ -2988,9 +2988,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", changePosition));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nFeeOut)));\n+    result.pushKV(\"hex\", EncodeHexTx(tx));\n+    result.pushKV(\"changepos\", changePosition);\n+    result.pushKV(\"fee\", ValueFromAmount(nFeeOut));\n \n     return result;\n }\n@@ -3124,13 +3124,13 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", feeBump.getBumpedTxId().GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(feeBump.getOldFee())));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(feeBump.getNewFee())));\n+    result.pushKV(\"txid\", feeBump.getBumpedTxId().GetHex());\n+    result.pushKV(\"origfee\", ValueFromAmount(feeBump.getOldFee()));\n+    result.pushKV(\"fee\", ValueFromAmount(feeBump.getNewFee()));\n     UniValue errors(UniValue::VARR);\n     for (const std::string& err: feeBump.getErrors())\n         errors.push_back(err);\n-    result.push_back(Pair(\"errors\", errors));\n+    result.pushKV(\"errors\", errors);\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTc5ZmQyYThhMjAwMmViZGY3YjRlMWE1MDEzOGIyODA1OGFlMjQ5",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T19:05:41Z"
      },
      "committer": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T19:17:21Z"
      },
      "message": "Pushing boolean value to univalue correctly",
      "tree": {
        "sha": "26ed720a147f03bbab427f38e2444a1743410323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26ed720a147f03bbab427f38e2444a1743410323"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69f623828c0ebf876473b87c59b0fd91f41c66ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69f623828c0ebf876473b87c59b0fd91f41c66ad"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4666e26ed8011bd047bf5e04a3c8c115cde6800c",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
        "patch": "@@ -111,6 +111,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      }
    ]
  },
  {
    "sha": "7cf76902488b5c359f92395eb7f80c6f14084bd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Y3NjkwMjQ4OGI1YzM1OWY5MjM5NWViN2Y4MGM2ZjE0MDg0YmQz",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T19:13:24Z"
      },
      "committer": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T19:17:21Z"
      },
      "message": "Removing unused Pair from univalue",
      "tree": {
        "sha": "45a3224483e546d57be199e6dbbf416568e4dcf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45a3224483e546d57be199e6dbbf416568e4dcf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cf76902488b5c359f92395eb7f80c6f14084bd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf76902488b5c359f92395eb7f80c6f14084bd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf76902488b5c359f92395eb7f80c6f14084bd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf76902488b5c359f92395eb7f80c6f14084bd3/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e79fd2a8a2002ebdf7b4e1a50138b28058ae249"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 0,
      "deletions": 68
    },
    "files": [
      {
        "sha": "8833bbfc451f73c2e1fee4b3ef9d8384fd8c3904",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 0,
        "deletions": 68,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf76902488b5c359f92395eb7f80c6f14084bd3/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf76902488b5c359f92395eb7f80c6f14084bd3/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=7cf76902488b5c359f92395eb7f80c6f14084bd3",
        "patch": "@@ -14,7 +14,6 @@\n #include <cassert>\n \n #include <sstream>        // .get_int64()\n-#include <utility>        // std::pair\n \n class UniValue {\n public:\n@@ -157,76 +156,9 @@ class UniValue {\n     const UniValue& get_array() const;\n \n     enum VType type() const { return getType(); }\n-    bool push_back(std::pair<std::string,UniValue> pear) {\n-        return pushKV(pear.first, pear.second);\n-    }\n     friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n };\n \n-//\n-// The following were added for compatibility with json_spirit.\n-// Most duplicate other methods, and should be removed.\n-//\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(cVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(strVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(u64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(i64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(dVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n-{\n-    std::string key(cKey);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n-{\n-    return std::make_pair(key, uVal);\n-}\n-\n enum jtokentype {\n     JTOK_ERR        = -1,\n     JTOK_NONE       = 0,                           // eof"
      }
    ]
  }
]