[
  {
    "sha": "3f9a01995e8d43c492eba8e1a08571705bceaef1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjlhMDE5OTVlOGQ0M2M0OTJlYmE4ZTFhMDg1NzE3MDViY2VhZWYx",
    "commit": {
      "author": {
        "name": "Alon Muroch",
        "email": "alonmuroch@gmail.com",
        "date": "2014-03-25T13:33:44Z"
      },
      "committer": {
        "name": "Alon Muroch",
        "email": "alonmuroch@gmail.com",
        "date": "2014-04-02T07:12:44Z"
      },
      "message": "added list/get received by address/ account tests\n\nfixed some annotations and cleaned a bit\n\nreceived by tests\n\nd",
      "tree": {
        "sha": "1cd02d5eb1aaf685c3b162899b63a539363a8108",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cd02d5eb1aaf685c3b162899b63a539363a8108"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f9a01995e8d43c492eba8e1a08571705bceaef1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f9a01995e8d43c492eba8e1a08571705bceaef1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f9a01995e8d43c492eba8e1a08571705bceaef1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f9a01995e8d43c492eba8e1a08571705bceaef1/comments",
    "author": {
      "login": "alonmuroch",
      "id": 3773981,
      "node_id": "MDQ6VXNlcjM3NzM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3773981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alonmuroch",
      "html_url": "https://github.com/alonmuroch",
      "followers_url": "https://api.github.com/users/alonmuroch/followers",
      "following_url": "https://api.github.com/users/alonmuroch/following{/other_user}",
      "gists_url": "https://api.github.com/users/alonmuroch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alonmuroch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alonmuroch/subscriptions",
      "organizations_url": "https://api.github.com/users/alonmuroch/orgs",
      "repos_url": "https://api.github.com/users/alonmuroch/repos",
      "events_url": "https://api.github.com/users/alonmuroch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alonmuroch/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "alonmuroch",
      "id": 3773981,
      "node_id": "MDQ6VXNlcjM3NzM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3773981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alonmuroch",
      "html_url": "https://github.com/alonmuroch",
      "followers_url": "https://api.github.com/users/alonmuroch/followers",
      "following_url": "https://api.github.com/users/alonmuroch/following{/other_user}",
      "gists_url": "https://api.github.com/users/alonmuroch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alonmuroch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alonmuroch/subscriptions",
      "organizations_url": "https://api.github.com/users/alonmuroch/orgs",
      "repos_url": "https://api.github.com/users/alonmuroch/repos",
      "events_url": "https://api.github.com/users/alonmuroch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alonmuroch/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3f5d4338d0305a398817279e36ef2d0cfd2fd2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f5d4338d0305a398817279e36ef2d0cfd2fd2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f5d4338d0305a398817279e36ef2d0cfd2fd2b"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 225,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7f2d79b3c1b461e8453e9b9f6ad92c0b340fae0b",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "added",
        "additions": 225,
        "deletions": 0,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f9a01995e8d43c492eba8e1a08571705bceaef1/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f9a01995e8d43c492eba8e1a08571705bceaef1/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=3f9a01995e8d43c492eba8e1a08571705bceaef1",
        "patch": "@@ -0,0 +1,225 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Exercise the listtransactions API\n+\n+# Add python-bitcoinrpc to module search path:\n+\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+def get_sub_array_from_array(object_array, to_match):\n+    '''\n+        Finds and returns a sub array from an array of arrays.\n+        to_match should be a unique idetifier of a sub array\n+    '''\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        return item\n+    return []\n+\n+def check_array_result(object_array, to_match, expected, should_not_find = False):\n+    \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        If the should_not_find flag is true, to_match should not be found in object_array\n+        \"\"\"\n+    if should_not_find == True:\n+        expected = { }\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0 and should_not_find != True:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+    if num_matched > 0 and should_not_find == True:\n+        raise AssertionError(\"Objects was matched %s\"%(str(to_match)))\n+\n+def run_test(nodes):\n+    '''\n+        listreceivedbyaddress Test\n+    '''\n+    # Send from node 0 to 1\n+    addr = nodes[1].getnewaddress()\n+    txid = nodes[0].sendtoaddress(addr, 0.1)\n+    sync_mempools(nodes)\n+    \n+    #Check not listed in listreceivedbyaddress because has 0 confirmations\n+    check_array_result(nodes[1].listreceivedbyaddress(),\n+                       {\"address\":addr},\n+                       { },\n+                       True)\n+    #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n+    nodes[1].setgenerate(True, 10)\n+    sync_blocks(nodes)\n+    check_array_result(nodes[1].listreceivedbyaddress(),\n+                       {\"address\":addr},\n+                       {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n+    #With min confidence < 10\n+    check_array_result(nodes[1].listreceivedbyaddress(5),\n+                       {\"address\":addr},\n+                       {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n+    #With min confidence > 10, should not find Tx\n+    check_array_result(nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+\n+    #Empty Tx\n+    addr = nodes[1].getnewaddress()\n+    check_array_result(nodes[1].listreceivedbyaddress(0,True),\n+                       {\"address\":addr},\n+                       {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n+\n+    '''\n+        getreceivedbyaddress Test\n+    '''\n+    # Send from node 0 to 1\n+    addr = nodes[1].getnewaddress()\n+    txid = nodes[0].sendtoaddress(addr, 0.1)\n+    sync_mempools(nodes)\n+\n+    #Check balance is 0 because of 0 confirmations\n+    balance = nodes[1].getreceivedbyaddress(addr)\n+    if balance != Decimal(\"0.0\"):\n+        raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+\n+    #Check balance is 0.1\n+    balance = nodes[1].getreceivedbyaddress(addr,0)\n+    if balance != Decimal(\"0.1\"):\n+        raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+\n+    #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n+    nodes[1].setgenerate(True, 10)\n+    sync_blocks(nodes)\n+    balance = nodes[1].getreceivedbyaddress(addr)\n+    if balance != Decimal(\"0.1\"):\n+        raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+\n+    '''\n+        listreceivedbyaccount + getreceivedbyaccount Test\n+    '''\n+    #set pre-state\n+    addrArr = nodes[1].getnewaddress()\n+    account = nodes[1].getaccount(addrArr)\n+    received_by_account_json = get_sub_array_from_array(nodes[1].listreceivedbyaccount(),{\"account\":account})\n+    if len(received_by_account_json) == 0:\n+        raise AssertionError(\"No accounts found in node\")\n+    balance_by_account = rec_by_accountArr = nodes[1].getreceivedbyaccount(account)\n+\n+    txid = nodes[0].sendtoaddress(addr, 0.1)\n+\n+    # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n+    check_array_result(nodes[1].listreceivedbyaccount(),\n+                   {\"account\":account},\n+                   received_by_account_json)\n+\n+    # getreceivedbyaddress should return same balance because of 0 confirmations\n+    balance = nodes[1].getreceivedbyaccount(account)\n+    if balance != balance_by_account:\n+        raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+\n+    nodes[1].setgenerate(True, 10)\n+    sync_blocks(nodes)\n+    # listreceivedbyaccount should return updated account balance\n+    check_array_result(nodes[1].listreceivedbyaccount(),\n+                       {\"account\":account},\n+                       {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n+\n+    # getreceivedbyaddress should return updates balance\n+    balance = nodes[1].getreceivedbyaccount(account)\n+    if balance != balance_by_account + Decimal(\"0.1\"):\n+        raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+\n+    #Create a new account named \"mynewaccount\" that has a 0 balance\n+    nodes[1].getaccountaddress(\"mynewaccount\")\n+    received_by_account_json = get_sub_array_from_array(nodes[1].listreceivedbyaccount(0,True),{\"account\":\"mynewaccount\"})\n+    if len(received_by_account_json) == 0:\n+        raise AssertionError(\"No accounts found in node\")\n+\n+    # Test includeempty of listreceivedbyaccount\n+    if received_by_account_json[\"amount\"] != Decimal(\"0.0\"):\n+        raise AssertionError(\"Wrong balance returned by listreceivedbyaccount, %0.2f\"%(received_by_account_json[\"amount\"]))\n+\n+    # Test getreceivedbyaccount for 0 amount accounts\n+    balance = nodes[1].getreceivedbyaccount(\"mynewaccount\")\n+    if balance != Decimal(\"0.0\"):\n+        raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+\n+def main():\n+    import optparse\n+\n+    parser = optparse.OptionParser(usage=\"%prog [options]\")\n+    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                      help=\"Root directory for datadirs\")\n+    (options, args) = parser.parse_args()\n+\n+    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+    check_json_precision()\n+\n+    success = False\n+    nodes = []\n+    try:\n+        print(\"Initializing test directory \"+options.tmpdir)\n+        if not os.path.isdir(options.tmpdir):\n+            os.makedirs(options.tmpdir)\n+        initialize_chain(options.tmpdir)\n+\n+        nodes = start_nodes(2, options.tmpdir)\n+        connect_nodes(nodes[1], 0)\n+        sync_blocks(nodes)\n+\n+        run_test(nodes)\n+\n+        success = True\n+\n+    except AssertionError as e:\n+        print(\"Assertion failed: \"+e.message)\n+    except Exception as e:\n+        print(\"Unexpected exception caught during testing: \"+str(e))\n+        traceback.print_tb(sys.exc_info()[2])\n+\n+    if not options.nocleanup:\n+        print(\"Cleaning up\")\n+        stop_nodes(nodes)\n+        wait_bitcoinds()\n+        shutil.rmtree(options.tmpdir)\n+\n+    if success:\n+        print(\"Tests successful\")\n+        sys.exit(0)\n+    else:\n+        print(\"Failed\")\n+        sys.exit(1)\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  }
]