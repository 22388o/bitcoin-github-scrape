[
  {
    "sha": "fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGI0ODE2M2JmYmYzNGY3OWRjNzhmZmFhMmJiZjllMzlhZjk2Njg3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-14T09:18:47Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-07-08T08:31:45Z"
      },
      "message": "[validation] distinguish same txid different wtxid in mempool\n\nChanges behavior.",
      "tree": {
        "sha": "9b4da57d1a09ac5ad00cd24a6fcc952d788b4b35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b4da57d1a09ac5ad00cd24a6fcc952d788b4b35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4129134e844f78a89f8515cf30dad4b6074703c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4129134e844f78a89f8515cf30dad4b6074703c7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c80f015143a4d5d06152fef550c10d9c0575c307",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
        "patch": "@@ -587,9 +587,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n-    // is it already in the memory pool?\n-    if (m_pool.exists(hash)) {\n+    if (m_pool.exists(GenTxid(true, tx.GetWitnessHash()))) {\n+        // Exact transaction already exists in the mempool.\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n+    } else if (m_pool.exists(GenTxid(false, tx.GetHash()))) {\n+        // Transaction with the same non-witness data but different witness (same txid, different\n+        // wtxid) already exists in the mempool.\n+        return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-same-nonwitness-data-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions"
      }
    ]
  },
  {
    "sha": "b7a8cd9963e810264d3b45d0ad15af863965c47a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2E4Y2Q5OTYzZTgxMDI2NGQzYjQ1ZDBhZDE1YWY4NjM5NjVjNDdh",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-11T13:49:19Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-07-08T08:31:45Z"
      },
      "message": "[test] submit same txid different wtxid as mempool tx\n\nCo-authored-by: Antoine Riard <ariard@student.42.fr>\nCo-authored-by: Antoine Riard <antoine.riard@gmail.com>",
      "tree": {
        "sha": "6377feb06e1377549b1f1f4f62c201500b9dcbe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6377feb06e1377549b1f1f4f62c201500b9dcbe8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7a8cd9963e810264d3b45d0ad15af863965c47a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7a8cd9963e810264d3b45d0ad15af863965c47a/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdb48163bfbf34f79dc78ffaa2bbf9e39af96687"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 117,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd1f8997ad301d4fbe5fec204d51d1f1ddb297f2",
        "filename": "test/functional/mempool_accept_wtxid.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/mempool_accept_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/mempool_accept_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept_wtxid.py?ref=b7a8cd9963e810264d3b45d0ad15af863965c47a",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    sha256,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_IF,\n+    OP_TRUE,\n+    hash160,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool and 101 blocks')\n+        # The last 100 coinbase transactions are premature\n+        blockhash = node.generate(101)[0]\n+        txid = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0][\"txid\"]\n+        assert_equal(node.getmempoolinfo()['size'], 0)\n+\n+        self.log.info(\"Submit parent with multiple script branches to mempool\")\n+        hashlock = hash160(b'Preimage')\n+        witness_script = CScript([OP_IF, OP_HASH160, hashlock, OP_EQUAL, OP_ELSE, OP_TRUE, OP_ENDIF])\n+        witness_program = sha256(witness_script)\n+        script_pubkey = CScript([OP_0, witness_program])\n+\n+        parent = CTransaction()\n+        parent.vin.append(CTxIn(COutPoint(int(txid, 16), 0), b\"\"))\n+        parent.vout.append(CTxOut(int(9.99998 * COIN), script_pubkey))\n+        parent.rehash()\n+\n+        privkeys = [node.get_deterministic_priv_key().key]\n+        raw_parent = node.signrawtransactionwithkey(hexstring=parent.serialize().hex(), privkeys=privkeys)['hex']\n+        parent_txid = node.sendrawtransaction(hexstring=raw_parent, maxfeerate=0)\n+        node.generate(1)\n+\n+        # Create a new transaction with witness solving first branch\n+        child_witness_script = CScript([OP_TRUE])\n+        child_witness_program = sha256(child_witness_script)\n+        child_script_pubkey = CScript([OP_0, child_witness_program])\n+\n+        child_one = CTransaction()\n+        child_one.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_one.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_one.wit.vtxinwit.append(CTxInWitness())\n+        child_one.wit.vtxinwit[0].scriptWitness.stack = [b'Preimage', b'\\x01', witness_script]\n+        child_one_wtxid = child_one.getwtxid()\n+        child_one_txid = child_one.rehash()\n+\n+        # Create another identical transaction with witness solving second branch\n+        child_two = CTransaction()\n+        child_two.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_two.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_two.wit.vtxinwit.append(CTxInWitness())\n+        child_two.wit.vtxinwit[0].scriptWitness.stack = [b'', witness_script]\n+        child_two_wtxid = child_two.getwtxid()\n+        child_two_txid = child_two.rehash()\n+\n+        assert_equal(child_one_txid, child_two_txid)\n+        assert child_one_wtxid != child_two_wtxid\n+\n+        self.log.info(\"Submit one child to the mempool\")\n+        txid_submitted = node.sendrawtransaction(child_one.serialize().hex())\n+        assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n+\n+        # testmempoolaccept reports the \"already in mempool\" error\n+        assert_equal(node.testmempoolaccept([child_one.serialize().hex()]), [{\n+            \"txid\": child_one_txid,\n+            \"wtxid\": child_one_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-already-in-mempool\"\n+        }])\n+        testres_child_two = node.testmempoolaccept([child_two.serialize().hex()])[0]\n+        assert_equal(testres_child_two, {\n+            \"txid\": child_two_txid,\n+            \"wtxid\": child_two_wtxid,\n+            \"allowed\": False,\n+            \"reject-reason\": \"txn-same-nonwitness-data-in-mempool\"\n+        })\n+\n+        # sendrawtransaction will not throw but quits early when the exact same transaction is already in mempool\n+        node.sendrawtransaction(child_one.serialize().hex())\n+        # sendrawtransaction will not throw but quits early when a transaction with the same non-witness data is already in mempool\n+        node.sendrawtransaction(child_two.serialize().hex())\n+\n+\n+if __name__ == '__main__':\n+    MempoolWtxidTest().main()"
      },
      {
        "sha": "303742236f4e08f604817efda9bc5b47de6929c5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7a8cd9963e810264d3b45d0ad15af863965c47a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b7a8cd9963e810264d3b45d0ad15af863965c47a",
        "patch": "@@ -279,6 +279,7 @@\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',\n     'mempool_compatibility.py',\n+    'mempool_accept_wtxid.py',\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n     'p2p_ping.py',"
      }
    ]
  }
]