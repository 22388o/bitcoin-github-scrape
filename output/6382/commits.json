[
  {
    "sha": "db11017ef300bacaf900e704198954b2982b5a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjExMDE3ZWYzMDBiYWNhZjkwMGU3MDQxOTg5NTRiMjk4MmI1YTdk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-22T01:50:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T11:47:28Z"
      },
      "message": "Chainparams: Use a regular factory for creating chainparams",
      "tree": {
        "sha": "e48daa50c2710cefe5a7e3b61296c94a382baca6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e48daa50c2710cefe5a7e3b61296c94a382baca6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db11017ef300bacaf900e704198954b2982b5a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db11017ef300bacaf900e704198954b2982b5a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db11017ef300bacaf900e704198954b2982b5a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db11017ef300bacaf900e704198954b2982b5a7d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeedd8a53b2df0ca2bf0429ce37f97cd45b35ba6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeedd8a53b2df0ca2bf0429ce37f97cd45b35ba6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeedd8a53b2df0ca2bf0429ce37f97cd45b35ba6"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 46,
      "deletions": 32
    },
    "files": [
      {
        "sha": "75eeae13d8d65f55ff12f8868be6fba3f1d5d80d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -27,14 +27,15 @@ static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n \n std::string HelpMessageCli()\n {\n+    const boost::scoped_ptr<CBaseChainParams> defaultBaseParams(CBaseChainParams::Factory(CBaseChainParams::MAIN));\n     string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u)\"), defaultBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));"
      },
      {
        "sha": "c8b3a9d6941acb519cc362a9518a6b7c997a8ed1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -13,6 +13,7 @@\n #include <assert.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/scoped_ptr.hpp>\n \n #include \"chainparamsseeds.h\"\n \n@@ -143,7 +144,6 @@ class CMainParams : public CChainParams {\n         };\n     }\n };\n-static CMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -208,7 +208,6 @@ class CTestNetParams : public CChainParams {\n \n     }\n };\n-static CTestNetParams testNetParams;\n \n /**\n  * Regression test\n@@ -265,29 +264,35 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n };\n-static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = 0;\n+static boost::scoped_ptr<CChainParams> globalChainParams;\n+static boost::scoped_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n-    assert(pCurrentParams);\n-    return *pCurrentParams;\n+    assert(globalChainParams.get());\n+    return *globalChainParams;\n }\n \n-CChainParams& Params(const std::string& chain)\n+CChainParams* CChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-            return mainParams;\n+        return new CMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-            return testNetParams;\n+        return new CTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-            return regTestParams;\n+        return new CRegTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+const CChainParams& Params(const std::string& chain)\n+{\n+    globalSwitchingChainParams.reset(CChainParams::Factory(chain));\n+    return *globalSwitchingChainParams;\n+}\n+\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    pCurrentParams = &Params(network);\n+    globalChainParams.reset(CChainParams::Factory(network));\n }"
      },
      {
        "sha": "89035f14cfce76ca2f845347c913501e9281cc00",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -76,6 +76,12 @@ class CChainParams\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+    /**\n+     * Creates and returns a CChainParams* of the chosen chain. The caller has to delete the object.\n+     * @returns a CChainParams* of the chosen chain.\n+     * @throws a std::runtime_error if the chain is not supported.\n+     */\n+    static CChainParams* Factory(const std::string& chain);\n protected:\n     CChainParams() {}\n \n@@ -108,7 +114,7 @@ const CChainParams &Params();\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */\n-CChainParams& Params(const std::string& chain);\n+const CChainParams& Params(const std::string& chain);\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name."
      },
      {
        "sha": "7824e95e61ccbe4850dc27aa7162b12a75a803a2",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -8,7 +8,7 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <assert.h>\n+#include <boost/scoped_ptr.hpp>\n \n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n@@ -35,7 +35,6 @@ class CBaseMainParams : public CBaseChainParams\n         nRPCPort = 8332;\n     }\n };\n-static CBaseMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -49,7 +48,6 @@ class CBaseTestNetParams : public CBaseChainParams\n         strDataDir = \"testnet3\";\n     }\n };\n-static CBaseTestNetParams testNetParams;\n \n /*\n  * Regression test\n@@ -63,31 +61,30 @@ class CBaseRegTestParams : public CBaseChainParams\n         strDataDir = \"regtest\";\n     }\n };\n-static CBaseRegTestParams regTestParams;\n \n-static CBaseChainParams* pCurrentBaseParams = 0;\n+static boost::scoped_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n-    assert(pCurrentBaseParams);\n-    return *pCurrentBaseParams;\n+    assert(globalChainBaseParams.get());\n+    return *globalChainBaseParams;\n }\n \n-CBaseChainParams& BaseParams(const std::string& chain)\n+CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return mainParams;\n+        return new CBaseMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-        return testNetParams;\n+        return new CBaseTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-        return regTestParams;\n+        return new CBaseRegTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)\n {\n-    pCurrentBaseParams = &BaseParams(chain);\n+    globalChainBaseParams.reset(CBaseChainParams::Factory(chain));\n }\n \n std::string ChainNameFromCommandLine()\n@@ -106,5 +103,5 @@ std::string ChainNameFromCommandLine()\n \n bool AreBaseParamsConfigured()\n {\n-    return pCurrentBaseParams != NULL;\n+    return globalChainBaseParams.get();\n }"
      },
      {
        "sha": "17ede44173799bfc5d103f06ebd4d7a283bf6aa8",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -22,7 +22,12 @@ class CBaseChainParams\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n-\n+    /**\n+     * Creates and returns a CBaseChainParams* of the chosen chain. The caller has to delete the object.\n+     * @returns A CBaseChainParams* of the chosen chain.\n+     * @throws a std::runtime_error if the chain is not supported.\n+     */\n+    static CBaseChainParams* Factory(const std::string& chain);\n protected:\n     CBaseChainParams() {}\n \n@@ -42,8 +47,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n  */\n const CBaseChainParams& BaseParams();\n \n-CBaseChainParams& BaseParams(const std::string& chain);\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(const std::string& chain);\n "
      },
      {
        "sha": "cedfa6c1d897d30270ba0758f47a5d06dc031108",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -307,6 +307,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+    const boost::scoped_ptr<CBaseChainParams> defaultBaseParams(CBaseChainParams::Factory(CBaseChainParams::MAIN));\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -491,7 +492,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u)\"), defaultBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n     if (showDebug) {"
      },
      {
        "sha": "94b40f916e661d34c7054c790ad1f32f5fa3406c",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db11017ef300bacaf900e704198954b2982b5a7d/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db11017ef300bacaf900e704198954b2982b5a7d/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=db11017ef300bacaf900e704198954b2982b5a7d",
        "patch": "@@ -21,6 +21,7 @@\n \n #include <boost/filesystem/operations.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n #include <boost/test/unit_test.hpp>\n \n #if 0\n@@ -199,8 +200,8 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n     // Test PartitionCheck\n     CCriticalSection csDummy;\n     CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n-    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    int64_t nPowTargetSpacing = testChainParams->GetConsensus().nPowTargetSpacing;\n \n     // Generate fake blockchain timestamps relative to\n     // an arbitrary time:"
      }
    ]
  },
  {
    "sha": "d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGJiN2E4YTdkNTg3ZmY4YjkxMWY5ZmM3NTJlNTFmOTE1Yzg0MDU4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-28T14:04:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T11:47:55Z"
      },
      "message": "Chainparams: Get rid of CChainParams& Params(std::string)",
      "tree": {
        "sha": "564c79310004aa2f198bdbef51c7d85bdee1fffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/564c79310004aa2f198bdbef51c7d85bdee1fffe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db11017ef300bacaf900e704198954b2982b5a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db11017ef300bacaf900e704198954b2982b5a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db11017ef300bacaf900e704198954b2982b5a7d"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 21,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c0a20e9f6836651833ed1fdcfbef348febc37d2f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -266,7 +266,6 @@ class CRegTestParams : public CChainParams {\n };\n \n static boost::scoped_ptr<CChainParams> globalChainParams;\n-static boost::scoped_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams.get());\n@@ -285,12 +284,6 @@ CChainParams* CChainParams::Factory(const std::string& chain)\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-const CChainParams& Params(const std::string& chain)\n-{\n-    globalSwitchingChainParams.reset(CChainParams::Factory(chain));\n-    return *globalSwitchingChainParams;\n-}\n-\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);"
      },
      {
        "sha": "3046c1027ae78e5d0d2effa41da853bcdc8889d8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -111,11 +111,6 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/**\n- * @returns CChainParams for the given BIP70 chain name.\n- */\n-const CChainParams& Params(const std::string& chain);\n-\n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n  * @throws std::runtime_error when the chain is not supported."
      },
      {
        "sha": "b37666959e519690e9e856a81841fb07fbe6e1f8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -308,6 +308,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n std::string HelpMessage(HelpMessageMode mode)\n {\n     const boost::scoped_ptr<CBaseChainParams> defaultBaseParams(CBaseChainParams::Factory(CBaseChainParams::MAIN));\n+    const boost::scoped_ptr<CChainParams> defaultChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -370,7 +371,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), 1));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", 0));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u)\"), defaultChainParams->GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n@@ -474,7 +475,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n+        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", defaultChainParams->RequireStandard()));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n "
      },
      {
        "sha": "fc3ef2e17212d13bdba8f380024f22e7be35395f",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -221,14 +221,16 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n                 CBitcoinAddress address(r.address.toStdString());\n+                boost::scoped_ptr<CChainParams> tempChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n \n-                if (address.IsValid(Params(CBaseChainParams::MAIN)))\n+                if (address.IsValid(*tempChainParams))\n                 {\n                     SelectParams(CBaseChainParams::MAIN);\n                 }\n-                else if (address.IsValid(Params(CBaseChainParams::TESTNET)))\n-                {\n-                    SelectParams(CBaseChainParams::TESTNET);\n+                else {\n+                    tempChainParams.reset(CChainParams::Factory(CBaseChainParams::TESTNET));\n+                    if (address.IsValid(*tempChainParams))\n+                        SelectParams(CBaseChainParams::TESTNET);\n                 }\n             }\n         }"
      },
      {
        "sha": "685e8d942e59ae05e445d5db5e2496745b754806",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -20,7 +20,8 @@ BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n-    const CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const CCheckpointData& checkpoints = testChainParams->Checkpoints();\n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n }\n "
      },
      {
        "sha": "32938b5ea6aa2bbcbab3bc74bdb072a2b4d034b8",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -120,7 +120,8 @@ BOOST_FIXTURE_TEST_SUITE(Alert_tests, ReadAlerts)\n BOOST_AUTO_TEST_CASE(AlertApplies)\n {\n     SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const std::vector<unsigned char>& alertKey = testChainParams->AlertKey();\n \n     BOOST_FOREACH(const CAlert& alert, alerts)\n     {\n@@ -161,7 +162,8 @@ BOOST_AUTO_TEST_CASE(AlertApplies)\n BOOST_AUTO_TEST_CASE(AlertNotify)\n {\n     SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const std::vector<unsigned char>& alertKey = testChainParams->AlertKey();\n \n     boost::filesystem::path temp = GetTempPath() /\n         boost::filesystem::unique_path(\"alertnotify-%%%%.txt\");"
      },
      {
        "sha": "33d27c4de2adced96cbf894acc19f611cd23284d",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -38,17 +38,18 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    TestBlockSubsidyHalvings(Params(CBaseChainParams::MAIN).GetConsensus()); // As in main\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    TestBlockSubsidyHalvings(testChainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, testChainParams->GetConsensus());\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "df29d95c77445b19b204a7bb63a5042a0f0bb3db",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4bb7a8a7d587ff8b911f9fc752e51f915c84058/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "patch": "@@ -60,7 +60,8 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const CChainParams& chainparams = *testChainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;"
      }
    ]
  },
  {
    "sha": "56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjczNWNlNTMzNmZkMjdkM2YwNjZjMWIzYmE3YTRiMWIwN2I2MWQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T00:31:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "consensus: don't define MAX_STANDARD_TX_SIGOPS in terms of block size",
      "tree": {
        "sha": "f2c4e0cbbda830fe52a975c61f02e1bef1635f32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2c4e0cbbda830fe52a975c61f02e1bef1635f32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4bb7a8a7d587ff8b911f9fc752e51f915c84058",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4bb7a8a7d587ff8b911f9fc752e51f915c84058"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "02f3a03b19fd36e52f497a1996a076ae305207c1",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
        "patch": "@@ -24,7 +24,7 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_STANDARD_TX_SIZE/25; // one sigop per 25 bytes\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**"
      }
    ]
  },
  {
    "sha": "809e5def588fc081265423f85cd3984e450745ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDllNWRlZjU4OGZjMDgxMjY1NDIzZjg1Y2QzOTg0ZTQ1MDc0NWNh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T20:18:40Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "consensus: teach ExtractMatches to check for an arbitrary max transaction number\n\nThis is a no-op change. For now, everything passes MAX_BLOCK_SIZE / 60, so the\nresult matches what it would've before.\n\nTests use a number equal to the number of transactions where necessary,\nto ensure that they're never rejected when blocksizesize isn't being tested.",
      "tree": {
        "sha": "7e3d310d6b0783c63f60c1833cd1c95dec48c225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e3d310d6b0783c63f60c1833cd1c95dec48c225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/809e5def588fc081265423f85cd3984e450745ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/809e5def588fc081265423f85cd3984e450745ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/809e5def588fc081265423f85cd3984e450745ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/809e5def588fc081265423f85cd3984e450745ca/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56735ce5336fd27d3f066c1b3ba7a4b1b07b61d0"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "70c007b6151f2469524bf3f6a752ed63534a3624",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809e5def588fc081265423f85cd3984e450745ca/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809e5def588fc081265423f85cd3984e450745ca/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=809e5def588fc081265423f85cd3984e450745ca",
        "patch": "@@ -147,13 +147,13 @@ CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const\n \n CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}\n \n-uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n+uint256 CPartialMerkleTree::ExtractMatches(uint64_t nMaxTransactions, std::vector<uint256> &vMatch) {\n     vMatch.clear();\n     // An empty set will not work\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > nMaxTransactions)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "244d3637e3f49e7a0905fe3c0777a1239177b4b4",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809e5def588fc081265423f85cd3984e450745ca/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809e5def588fc081265423f85cd3984e450745ca/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=809e5def588fc081265423f85cd3984e450745ca",
        "patch": "@@ -113,7 +113,7 @@ class CPartialMerkleTree\n      * extract the matching txid's represented by this partial merkle tree.\n      * returns the merkle root, or 0 in case of failure\n      */\n-    uint256 ExtractMatches(std::vector<uint256> &vMatch);\n+    uint256 ExtractMatches(uint64_t nMaxTransactions, std::vector<uint256> &vMatch);\n };\n \n "
      },
      {
        "sha": "50c4f558deec80f22277ed63a35ef965ab8d039d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809e5def588fc081265423f85cd3984e450745ca/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809e5def588fc081265423f85cd3984e450745ca/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=809e5def588fc081265423f85cd3984e450745ca",
        "patch": "@@ -302,8 +302,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n \n     UniValue res(UniValue::VARR);\n \n+    static const uint64_t nMaxTransactions = MAX_BLOCK_SIZE / 60;\n     vector<uint256> vMatch;\n-    if (merkleBlock.txn.ExtractMatches(vMatch) != merkleBlock.header.hashMerkleRoot)\n+    if (merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatch) != merkleBlock.header.hashMerkleRoot)\n         return res;\n \n     LOCK(cs_main);"
      },
      {
        "sha": "38b0d30b83be2fadad9a15cb7ec62098624eb733",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809e5def588fc081265423f85cd3984e450745ca/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809e5def588fc081265423f85cd3984e450745ca/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=809e5def588fc081265423f85cd3984e450745ca",
        "patch": "@@ -190,6 +190,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n@@ -204,7 +205,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -221,7 +222,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -235,6 +236,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the first transaction\n     filter.insert(uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n@@ -249,7 +251,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -275,7 +277,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 3);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -289,6 +291,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n     // Match the first transaction\n     filter.insert(uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n@@ -303,7 +306,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -326,7 +329,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 3);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -340,6 +343,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the only transaction\n     filter.insert(uint256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n@@ -353,7 +357,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -378,6 +382,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n@@ -392,7 +397,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -409,7 +414,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);"
      },
      {
        "sha": "0d15cbe012115e2e661cf3abd57c63eec604113b",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809e5def588fc081265423f85cd3984e450745ca/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809e5def588fc081265423f85cd3984e450745ca/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=809e5def588fc081265423f85cd3984e450745ca",
        "patch": "@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n             // extract merkle root and matched txids from copy\n             std::vector<uint256> vMatchTxid2;\n-            uint256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2);\n+            uint256 merkleRoot2 = pmt2.ExtractMatches(nTx, vMatchTxid2);\n \n             // check that it has the same merkle root as the original, and a valid one\n             BOOST_CHECK(merkleRoot1 == merkleRoot2);\n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n                 CPartialMerkleTreeTester pmt3(pmt2);\n                 pmt3.Damage();\n                 std::vector<uint256> vMatchTxid3;\n-                uint256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3);\n+                uint256 merkleRoot3 = pmt3.ExtractMatches(nTx, vMatchTxid3);\n                 BOOST_CHECK(merkleRoot3 != merkleRoot1);\n             }\n         }\n@@ -119,10 +119,11 @@ BOOST_AUTO_TEST_CASE(pmt_malleability)\n         (ArithToUint256(9))(ArithToUint256(10))\n         (ArithToUint256(9))(ArithToUint256(10));\n     std::vector<bool> vMatch = boost::assign::list_of(false)(false)(false)(false)(false)(false)(false)(false)(false)(true)(true)(false);\n+    uint64_t nMaxTransactions = vTxid.size();\n \n     CPartialMerkleTree tree(vTxid, vMatch);\n     std::vector<uint256> vTxid2;\n-    BOOST_CHECK(tree.ExtractMatches(vTxid).IsNull());\n+    BOOST_CHECK(tree.ExtractMatches(nMaxTransactions, vTxid).IsNull());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "b165fc806c52d02ee665eefd8fc1199b9612f418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTY1ZmM4MDZjNTJkMDJlZTY2NWVlZmQ4ZmMxMTk5Yjk2MTJmNDE4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T19:53:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "consensus: teach CheckTransaction to check for an arbitrary max tx size\n\nThis is a no-op change.\n\nTests use a value of std::numeric_limits<uint64_t>::max() where necessary, to ensure that they're never\nrejected when size isn't being tested.",
      "tree": {
        "sha": "7cfb711154cb104d5eb4ebd165f31fb3a905ef49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cfb711154cb104d5eb4ebd165f31fb3a905ef49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b165fc806c52d02ee665eefd8fc1199b9612f418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b165fc806c52d02ee665eefd8fc1199b9612f418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b165fc806c52d02ee665eefd8fc1199b9612f418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b165fc806c52d02ee665eefd8fc1199b9612f418/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "809e5def588fc081265423f85cd3984e450745ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/809e5def588fc081265423f85cd3984e450745ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/809e5def588fc081265423f85cd3984e450745ca"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 54,
      "deletions": 17
    },
    "files": [
      {
        "sha": "6d4289e7e25681ed7bc00f2c406e1c3ba73b3695",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -82,6 +82,8 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nMaxTxSize = 1000000;\n+\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -163,6 +165,8 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nMaxTxSize = 1000000;\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -227,6 +231,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.nMaxTxSize = 1000000;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "028ce07789b88700043c50e4dbe861130eff9940",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -6,6 +6,29 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"consensus/params.h\"\n+\n+#include <stdint.h>\n+\n+class CTransaction;\n+class CValidationState;\n+\n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/** Transaction validation functions */\n+\n+/**\n+ * Context-independent CTransaction validity checks\n+ */\n+bool CheckTx(const CTransaction& tx, CValidationState& state, const Params& consensusParams);\n+\n+} // namespace Consensus\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */"
      },
      {
        "sha": "66f5787480182b4da3a0fd0589a35efcc39795f4",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -14,6 +14,7 @@ namespace Consensus {\n  */\n struct Params {\n     uint256 hashGenesisBlock;\n+    uint32_t nMaxTxSize;\n     int nSubsidyHalvingInterval;\n     /** Used to check majorities for block version upgrade */\n     int nMajorityEnforceBlockUpgrade;"
      },
      {
        "sha": "152b3aec78a96e8ea0072fcbf126a2b2735ced19",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -741,15 +741,15 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n \n \n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state, const Consensus::Params& consensusParams)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > consensusParams.nMaxTxSize)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -839,11 +839,12 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                               bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n-    if (!CheckTransaction(tx, state))\n+    if (!Consensus::CheckTx(tx, state, consensusParams))\n         return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n@@ -2947,6 +2948,7 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n \n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // These are checks that are independent of context.\n \n     if (block.fChecked)\n@@ -2993,7 +2995,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!CheckTransaction(tx, state))\n+        if (!Consensus::CheckTx(tx, state, consensusParams))\n             return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n                 tx.GetHash().ToString(),\n                 FormatStateMessage(state));"
      },
      {
        "sha": "acc65b521c321b4bd6be31b97f13698de7b62d72",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -323,9 +323,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "0f935034a4c5ef593b488ca5b0ad9da808971544",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n@@ -169,6 +169,8 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n // Goal: check that SignatureHash generates correct hash\n BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     UniValue tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n@@ -200,7 +202,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           stream >> tx;\n \n           CValidationState state;\n-          BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+          BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state, testConsensusParams), strTest);\n           BOOST_CHECK(state.IsValid());\n \n           std::vector<unsigned char> raw = ParseHex(raw_script);"
      },
      {
        "sha": "01af2f455d78455bc92c51efa9d080db529b7a3d",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -7,11 +7,12 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\" // For CheckTransaction\n+#include \"main.h\" // For minRelayTxFee and DEFAULT_MIN_RELAY_TX_FEE\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n@@ -92,6 +93,8 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     UniValue tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n     ScriptError err;\n@@ -137,7 +140,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             stream >> tx;\n \n             CValidationState state;\n-            BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+            BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state, testConsensusParams), strTest);\n             BOOST_CHECK(state.IsValid());\n \n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -167,6 +170,8 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     UniValue tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n     ScriptError err;\n@@ -212,7 +217,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             stream >> tx;\n \n             CValidationState state;\n-            fValid = CheckTransaction(tx, state) && state.IsValid();\n+            fValid = Consensus::CheckTx(tx, state, testConsensusParams) && state.IsValid();\n \n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n@@ -240,12 +245,14 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n     CMutableTransaction tx;\n     stream >> tx;\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state, testConsensusParams) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!Consensus::CheckTx(tx, state, testConsensusParams) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //\n@@ -322,7 +329,6 @@ BOOST_AUTO_TEST_CASE(test_Get)\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n-    LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);"
      },
      {
        "sha": "a4a2b7f88ff6012c717ecc6ae1fed7a3b6eb2046",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fc806c52d02ee665eefd8fc1199b9612f418/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fc806c52d02ee665eefd8fc1199b9612f418/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b165fc806c52d02ee665eefd8fc1199b9612f418",
        "patch": "@@ -6,8 +6,8 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -349,6 +349,7 @@ bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n              CWalletScanState &wss, string& strType, string& strErr)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     try {\n         // Unserialize\n         // Taking advantage of the fact that pair serialization\n@@ -373,7 +374,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CWalletTx wtx;\n             ssValue >> wtx;\n             CValidationState state;\n-            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+            if (!(Consensus::CheckTx(wtx, state, consensusParams) && (wtx.GetHash() == hash) && state.IsValid()))\n                 return false;\n \n             // Undo serialize changes in 31600"
      }
    ]
  },
  {
    "sha": "969ad5a3d80157db4b2b7c305da38497c3552cd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjlhZDVhM2Q4MDE1N2RiNGIyYjdjMzA1ZGEzODQ5N2MzNTUyY2Q3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T20:10:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "consensus: Move consensus constants into Consensus::Params and consensus.h (as functions)\n\nThe following are now tied to a chain rather than being defined as global\nconstants. Their values have not changed.\n\nnMinTxSize\nnMaxBlockSize\nnMaxTxSize\nnMaxBlockSigops\nnCoinbaseMaturity\n\nAlso, for free (diff-wise):\n\nBlocksize: Turn MAX_BLOCK_SIZE (nMaxBlockSize) and MAX_BLOCK_SIGOPS (nMaxBlockSigops) into functions\n\n...which take Consensus::Params as parameter\nThis will be convenient to reduce the diff of any proposal that changes the blocksize as a hardfork",
      "tree": {
        "sha": "09e0ea392f45c0c1247318b97d18061d398a2e1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09e0ea392f45c0c1247318b97d18061d398a2e1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/969ad5a3d80157db4b2b7c305da38497c3552cd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/969ad5a3d80157db4b2b7c305da38497c3552cd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/969ad5a3d80157db4b2b7c305da38497c3552cd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/969ad5a3d80157db4b2b7c305da38497c3552cd7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b165fc806c52d02ee665eefd8fc1199b9612f418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b165fc806c52d02ee665eefd8fc1199b9612f418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b165fc806c52d02ee665eefd8fc1199b9612f418"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 80,
      "deletions": 34
    },
    "files": [
      {
        "sha": "22172497c6eaf580f9046b6c10abe9be4f3bbd46",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -177,6 +177,7 @@ static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n \n static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // separate TXID:VOUT in string\n     size_t pos = strInput.find(':');\n     if ((pos == string::npos) ||\n@@ -191,7 +192,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = consensusParams.nMaxTxSize / minTxOutSz;\n \n     // extract and validate vout\n     string strVout = strInput.substr(pos + 1, string::npos);"
      },
      {
        "sha": "816080e376a0b6ab44c6e43c0a2f33016d7e5d6f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -82,7 +82,11 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nMaxBlockSize = 1000000;\n         consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = ::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION);\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n \n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -165,7 +169,11 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nMaxBlockSize = 1000000;\n         consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = ::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION);\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n@@ -231,7 +239,11 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.nMaxBlockSize = 1000000;\n         consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = ::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION);\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "a5eb4bea766d5eeff6556d24455b1ee8cdadccef",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <stdint.h>\n \n+class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n \n@@ -26,15 +27,27 @@ namespace Consensus {\n  * Context-independent CTransaction validity checks\n  */\n bool CheckTx(const CTransaction& tx, CValidationState& state, const Params& consensusParams);\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const Params& consensusParams, const CCoinsViewCache& inputs, int nSpendHeight);\n \n } // namespace Consensus\n \n+/** Block validation utility functions */\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+inline uint64_t MaxBlockSize(const Consensus::Params& consensusParams)\n+{\n+    return consensusParams.nMaxBlockSize;\n+}\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n-/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n+inline uint64_t MaxBlockSigops(const Consensus::Params& consensusParams)\n+{\n+    return consensusParams.nMaxBlockSigops;\n+}\n \n /** Flags for LockTime() */\n enum {"
      },
      {
        "sha": "2fdf6b039bebe6dedb4a0d955498b4f15e865256",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -14,7 +14,12 @@ namespace Consensus {\n  */\n struct Params {\n     uint256 hashGenesisBlock;\n+    uint32_t nMinTxSize;\n+    uint64_t nMaxBlockSize;\n     uint32_t nMaxTxSize;\n+    uint64_t nMaxBlockSigops;\n+    /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n+    int32_t nCoinbaseMaturity;\n     int nSubsidyHalvingInterval;\n     /** Used to check majorities for block version upgrade */\n     int nMajorityEnforceBlockUpgrade;"
      },
      {
        "sha": "c83e89a7a71358a1a15f952070f603cbce47f9bc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -959,7 +959,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n+        // MaxBlockSigops(); we still consider this an invalid rather than\n         // merely non-standard transaction.\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n@@ -1599,8 +1599,7 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const Consensus::Params& consensusParams, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n@@ -1617,7 +1616,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n \n             // If prev is coinbase, check that it's matured\n             if (coins->IsCoinBase()) {\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                if (nSpendHeight - coins->nHeight < consensusParams.nCoinbaseMaturity)\n                     return state.Invalid(false,\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n                         strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n@@ -1643,13 +1642,13 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n-}// namespace Consensus\n \n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     if (!tx.IsCoinBase())\n     {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n+        if (!Consensus::CheckTxInputs(tx, state, consensusParams, inputs, GetSpendHeight(inputs)))\n             return false;\n \n         if (pvChecks)\n@@ -2083,13 +2082,14 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    uint64_t nMaxBlockSigops = MaxBlockSigops(chainparams.GetConsensus());\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n-        if (nSigOps > MAX_BLOCK_SIGOPS)\n+        if (nSigOps > nMaxBlockSigops)\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -2105,7 +2105,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // this is to prevent a \"rogue miner\" from creating\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n+                if (nSigOps > nMaxBlockSigops)\n                     return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n@@ -2980,7 +2980,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // because we receive the wrong transactions for it.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    uint64_t nMaxBlockSize = MaxBlockSize(consensusParams);\n+    uint64_t nMaxBlockSigops = MaxBlockSigops(consensusParams);\n+    if (block.vtx.empty() || block.vtx.size() > nMaxBlockSize || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > nMaxBlockSize)\n         return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n@@ -3005,7 +3007,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n+    if (nSigOps > nMaxBlockSigops)\n         return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n@@ -3727,11 +3729,12 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n+    uint64_t nMaxBlockSize = MaxBlockSize(chainparams.GetConsensus());\n \n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        CBufferedFile blkdat(fileIn, 2*nMaxBlockSize, nMaxBlockSize+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -3750,7 +3753,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n-                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                if (nSize < 80 || nSize > nMaxBlockSize)\n                     continue;\n             } catch (const std::exception&) {\n                 // no valid block header found; don't complain"
      },
      {
        "sha": "8de15498ead2e5efd7591ba9901308f27f8ed2ef",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -97,18 +97,19 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-    // Limit to between 1K and MAX_BLOCK_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+    uint64_t nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    // Limit to betweeen 1K and Consensus::Params::nMaxBlockSize-1K for sanity:\n+    nBlockMaxSize = std::max((uint64_t)1000, std::min((MaxBlockSize(chainparams.GetConsensus()) - 1000), nBlockMaxSize));\n+    uint64_t nMaxBlockSigops = MaxBlockSigops(chainparams.GetConsensus());\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n+    uint64_t nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n     nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n     // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n+    uint64_t nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n@@ -224,8 +225,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n \n             unsigned int nTxSigOps = iter->GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n-                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+            if (nBlockSigOps + nTxSigOps >= nMaxBlockSigops) {\n+                if (nBlockSigOps > nMaxBlockSigops - 2) {\n                     break;\n                 }\n                 continue;"
      },
      {
        "sha": "ca8e9d98986f5323cccc3ad84cae9282f76f48c3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -2113,8 +2113,9 @@ void CNode::RecordBytesSent(uint64_t bytes)\n \n void CNode::SetMaxOutboundTarget(uint64_t limit)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     LOCK(cs_totalBytesSent);\n-    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SIZE;\n+    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MaxBlockSize(consensusParams);\n     nMaxOutboundLimit = limit;\n \n     if (limit > 0 && limit < recommendedMinimum)\n@@ -2161,6 +2162,7 @@ void CNode::SetMaxOutboundTimeframe(uint64_t timeframe)\n \n bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     LOCK(cs_totalBytesSent);\n     if (nMaxOutboundLimit == 0)\n         return false;\n@@ -2169,7 +2171,7 @@ bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n     {\n         // keep a large enought buffer to at least relay each block once\n         uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n-        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n+        uint64_t buffer = timeLeftInCycle / 600 * MaxBlockSize(consensusParams);\n         if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n             return true;\n     }"
      },
      {
        "sha": "ea65ec747bad706029a26a0c97871d6f72f55ced",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -50,6 +50,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     QString strHTML;\n \n     LOCK2(cs_main, wallet->cs_wallet);\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     strHTML.reserve(4000);\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n@@ -262,7 +263,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n     if (wtx.IsCoinBase())\n     {\n-        quint32 numBlocksToMaturity = COINBASE_MATURITY +  1;\n+        quint32 numBlocksToMaturity = consensusParams.nCoinbaseMaturity + 1;\n         strHTML += \"<br>\" + tr(\"Generated coins must mature %1 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \\\"not accepted\\\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours.\").arg(QString::number(numBlocksToMaturity)) + \"<br>\";\n     }\n "
      },
      {
        "sha": "839e4db1361b5f7e917384883d993cf5c1650328",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -383,6 +383,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n          );\n \n     LOCK(cs_main);\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n@@ -520,7 +521,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n-    UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n+    UpdateTime(pblock, consensusParams, pindexPrev);\n     pblock->nNonce = 0;\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n@@ -581,8 +582,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+    result.push_back(Pair(\"sigoplimit\", MaxBlockSigops(consensusParams)));\n+    result.push_back(Pair(\"sizelimit\", MaxBlockSize(consensusParams)));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "782f18897ccf8bbeb3c70673f075889b639be236",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -285,6 +285,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n \n UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n@@ -302,7 +303,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n \n     UniValue res(UniValue::VARR);\n \n-    static const uint64_t nMaxTransactions = MAX_BLOCK_SIZE / 60;\n+    static const uint64_t nMaxTransactions = consensusParams.nMaxTxSize / consensusParams.nMinTxSize;\n     vector<uint256> vMatch;\n     if (merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatch) != merkleBlock.header.hashMerkleRoot)\n         return res;"
      },
      {
        "sha": "59da8c322b87b080ef7fa6927e0c0653398617da",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -2,7 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\" // For CheckBlock\n #include \"primitives/block.h\""
      },
      {
        "sha": "a7636d79d0706dd135302bcc81b2472fa1fe5137",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -98,10 +98,11 @@ TestingSetup::~TestingSetup()\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n-    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    for (int i = 0; i < consensusParams.nCoinbaseMaturity; i++)\n     {\n         std::vector<CMutableTransaction> noTxns;\n         CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);"
      },
      {
        "sha": "0f3609cad76e6108a8a76a8a6be6298aca77ec3d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txmempool.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -499,6 +500,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n@@ -513,7 +515,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n                     continue;\n                 const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n \t\tif (nCheckFrequency != 0) assert(coins);\n-                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < consensusParams.nCoinbaseMaturity)) {\n                     transactionsToRemove.push_back(tx);\n                     break;\n                 }"
      },
      {
        "sha": "8e21aac758b720460931ec4ec7cd69a663d9a10f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/969ad5a3d80157db4b2b7c305da38497c3552cd7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "patch": "@@ -2924,7 +2924,8 @@ int CMerkleTx::GetBlocksToMaturity() const\n {\n     if (!IsCoinBase())\n         return 0;\n-    return max(0, (COINBASE_MATURITY+1) - GetDepthInMainChain());\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    return max(0, (consensusParams.nCoinbaseMaturity + 1) - GetDepthInMainChain());\n }\n \n "
      }
    ]
  },
  {
    "sha": "059480afcd195694851a0338ced122ecd0d0fa98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTk0ODBhZmNkMTk1Njk0ODUxYTAzMzhjZWQxMjJlY2QwZDBmYTk4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-03T14:11:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "Testchains: Don't check the genesis block",
      "tree": {
        "sha": "0331a824003a588d39fc050f781eb29d62439373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0331a824003a588d39fc050f781eb29d62439373"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/059480afcd195694851a0338ced122ecd0d0fa98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059480afcd195694851a0338ced122ecd0d0fa98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/059480afcd195694851a0338ced122ecd0d0fa98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059480afcd195694851a0338ced122ecd0d0fa98/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/969ad5a3d80157db4b2b7c305da38497c3552cd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/969ad5a3d80157db4b2b7c305da38497c3552cd7"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fc6acdd95bcfde15b526323d98740b6f535006a6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/059480afcd195694851a0338ced122ecd0d0fa98/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/059480afcd195694851a0338ced122ecd0d0fa98/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=059480afcd195694851a0338ced122ecd0d0fa98",
        "patch": "@@ -1987,10 +1987,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     int64_t nTimeStart = GetTimeMicros();\n \n-    // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n-        return false;\n-\n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n@@ -2003,6 +1999,10 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n+    // Check it again in case a previous version let a bad block in\n+    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n+        return false;\n+\n     bool fScriptChecks = true;\n     if (fCheckpointsEnabled) {\n         CBlockIndex *pindexLastCheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());"
      },
      {
        "sha": "a5b6eb846127aee9684dd15c0138aa62ff85ed00",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/059480afcd195694851a0338ced122ecd0d0fa98/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/059480afcd195694851a0338ced122ecd0d0fa98/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=059480afcd195694851a0338ced122ecd0d0fa98",
        "patch": "@@ -177,6 +177,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n \n     pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n@@ -203,7 +204,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, consensusParams) &&\n+                    pindexNew->GetBlockHash() != consensusParams.hashGenesisBlock)\n                     return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      }
    ]
  },
  {
    "sha": "98923c381eca9874f135f08297218f3f8fff5221",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODkyM2MzODFlY2E5ODc0ZjEzNWYwODI5NzIxOGYzZjhmZmY1MjIx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-24T21:35:55Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "Chainparams: Generic selection with -chain=<chainString> in addition of -testnet and -regtest",
      "tree": {
        "sha": "6dc611c5e89db0a1328312860766c042e04d05e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dc611c5e89db0a1328312860766c042e04d05e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98923c381eca9874f135f08297218f3f8fff5221",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98923c381eca9874f135f08297218f3f8fff5221",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98923c381eca9874f135f08297218f3f8fff5221",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98923c381eca9874f135f08297218f3f8fff5221/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "059480afcd195694851a0338ced122ecd0d0fa98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059480afcd195694851a0338ced122ecd0d0fa98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/059480afcd195694851a0338ced122ecd0d0fa98"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4bdbf78672cc9da76a84090c10afb9035d6935fc",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98923c381eca9874f135f08297218f3f8fff5221/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98923c381eca9874f135f08297218f3f8fff5221/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=98923c381eca9874f135f08297218f3f8fff5221",
        "patch": "@@ -93,7 +93,7 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return false;\n     }\n-    // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "7ebacaf46416dfd92f0704438a088c97dfb48e6d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98923c381eca9874f135f08297218f3f8fff5221/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98923c381eca9874f135f08297218f3f8fff5221/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=98923c381eca9874f135f08297218f3f8fff5221",
        "patch": "@@ -34,7 +34,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n     //\n     ParseParameters(argc, argv);\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "5b071859dd05b6088ae145bc3fc13f0306549ff4",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98923c381eca9874f135f08297218f3f8fff5221/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98923c381eca9874f135f08297218f3f8fff5221/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=98923c381eca9874f135f08297218f3f8fff5221",
        "patch": "@@ -106,7 +106,7 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;\n         }\n-        // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+        // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(ChainNameFromCommandLine());\n         } catch (const std::exception& e) {"
      },
      {
        "sha": "efc71ff9ffacfd6bfdbd917babfdd4aa27f0f0d0",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98923c381eca9874f135f08297218f3f8fff5221/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98923c381eca9874f135f08297218f3f8fff5221/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=98923c381eca9874f135f08297218f3f8fff5221",
        "patch": "@@ -17,6 +17,7 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n@@ -98,7 +99,7 @@ std::string ChainNameFromCommandLine()\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n-    return CBaseChainParams::MAIN;\n+    return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n \n bool AreBaseParamsConfigured()"
      },
      {
        "sha": "1b0f6929988fa04f2c58983500437696f4d608b4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98923c381eca9874f135f08297218f3f8fff5221/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98923c381eca9874f135f08297218f3f8fff5221/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=98923c381eca9874f135f08297218f3f8fff5221",
        "patch": "@@ -598,7 +598,7 @@ int main(int argc, char *argv[])\n     // - QSettings() will use the new application name after this, resulting in network-specific settings\n     // - Needs to be done before createOptionsModel\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {"
      },
      {
        "sha": "d135e4ee201e862c33d2330e14b814cdc1a1df2e",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98923c381eca9874f135f08297218f3f8fff5221/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98923c381eca9874f135f08297218f3f8fff5221/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=98923c381eca9874f135f08297218f3f8fff5221",
        "patch": "@@ -619,7 +619,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             // Start client minimized\n             QString strArgs = \"-min\";\n             // Set -testnet /-regtest options\n-            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+            strArgs += QString::fromStdString(strprintf(\" -chain=%s\", ChainNameFromCommandLine()));\n \n #ifdef UNICODE\n             boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n@@ -730,7 +730,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             optionFile << \"Name=Bitcoin\\n\";\n         else\n             optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n-        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -chain=%s\\n\", chain);\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      }
    ]
  },
  {
    "sha": "7ce714b60e8b6ca9eee24ced8161297eb913906a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2U3MTRiNjBlOGI2Y2E5ZWVlMjRjZWQ4MTYxMjk3ZWI5MTM5MDZh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-03T19:25:45Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:09:36Z"
      },
      "message": "Chainparams: Qt: Simplify network/chain styles and add a default purple one",
      "tree": {
        "sha": "d3f539d0425f186547b5752bb4c9abea29625976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3f539d0425f186547b5752bb4c9abea29625976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ce714b60e8b6ca9eee24ced8161297eb913906a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ce714b60e8b6ca9eee24ced8161297eb913906a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ce714b60e8b6ca9eee24ced8161297eb913906a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ce714b60e8b6ca9eee24ced8161297eb913906a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98923c381eca9874f135f08297218f3f8fff5221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98923c381eca9874f135f08297218f3f8fff5221",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98923c381eca9874f135f08297218f3f8fff5221"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e83a043f99e32921a6c28dc175c2e91352a7e020",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ce714b60e8b6ca9eee24ced8161297eb913906a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ce714b60e8b6ca9eee24ced8161297eb913906a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7ce714b60e8b6ca9eee24ced8161297eb913906a",
        "patch": "@@ -610,7 +610,7 @@ int main(int argc, char *argv[])\n     PaymentServer::ipcParseCommandLine(argc, argv);\n #endif\n \n-    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(Params().NetworkIDString()));\n     assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n     QApplication::setApplicationName(networkStyle->getAppName());"
      },
      {
        "sha": "fe39059d1eb5148efc1b06a62b21e00b2fb34003",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ce714b60e8b6ca9eee24ced8161297eb913906a/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ce714b60e8b6ca9eee24ced8161297eb913906a/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=7ce714b60e8b6ca9eee24ced8161297eb913906a",
        "patch": "@@ -6,18 +6,20 @@\n \n #include \"guiconstants.h\"\n \n+#include \"chainparamsbase.h\"\n+#include \"tinyformat.h\"\n+\n #include <QApplication>\n \n static const struct {\n     const char *networkId;\n     const char *appName;\n     const int iconColorHueShift;\n     const int iconColorSaturationReduction;\n-    const char *titleAddText;\n } network_styles[] = {\n-    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n-    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n+    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n+    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n+    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n \n@@ -79,8 +81,9 @@ NetworkStyle::NetworkStyle(const QString &appName, const int iconColorHueShift,\n     trayAndWindowIcon   = QIcon(pixmap.scaled(QSize(256,256)));\n }\n \n-const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+const NetworkStyle* NetworkStyle::instantiate(const std::string& networkId)\n {\n+    std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n     for (unsigned x=0; x<network_styles_count; ++x)\n     {\n         if (networkId == network_styles[x].networkId)\n@@ -89,8 +92,8 @@ const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n                     network_styles[x].appName,\n                     network_styles[x].iconColorHueShift,\n                     network_styles[x].iconColorSaturationReduction,\n-                    network_styles[x].titleAddText);\n+                    titleAddText.c_str());\n         }\n     }\n-    return 0;\n+    return new NetworkStyle(strprintf(\"%s-%s\", QAPP_APP_NAME_DEFAULT, networkId).c_str(), 250, 30, titleAddText.c_str());\n }"
      },
      {
        "sha": "dad0c481753a88337bed2e7b98d2b428492e2764",
        "filename": "src/qt/networkstyle.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ce714b60e8b6ca9eee24ced8161297eb913906a/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ce714b60e8b6ca9eee24ced8161297eb913906a/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=7ce714b60e8b6ca9eee24ced8161297eb913906a",
        "patch": "@@ -13,8 +13,8 @@\n class NetworkStyle\n {\n public:\n-    /** Get style associated with provided BIP70 network id, or 0 if not known */\n-    static const NetworkStyle *instantiate(const QString &networkId);\n+    /** Get style associated with provided BIP70 network id, or a default style if not known */\n+    static const NetworkStyle* instantiate(const std::string& networkId);\n \n     const QString &getAppName() const { return appName; }\n     const QIcon &getAppIcon() const { return appIcon; }"
      }
    ]
  },
  {
    "sha": "160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjBkODc0ZGZkYjUzYzcxYTA3YjFiZjdiZGQwZGFiNTcxZGFiZWZh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-01T17:02:51Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:30:59Z"
      },
      "message": "Checkpoints: The hash of the genesis block it's the genesis checkpoint and chain id",
      "tree": {
        "sha": "5236e9e0533ef9856bdc6eaacd7e2ca54c7c8375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5236e9e0533ef9856bdc6eaacd7e2ca54c7c8375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ce714b60e8b6ca9eee24ced8161297eb913906a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ce714b60e8b6ca9eee24ced8161297eb913906a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ce714b60e8b6ca9eee24ced8161297eb913906a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 33,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0a867a73e0a0ce9568f9cd1e55d6fe5f181c79c4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
        "patch": "@@ -17,6 +17,13 @@\n \n #include \"chainparamsseeds.h\"\n \n+const std::map<std::string, uint256> CChainParams::supportedChains =\n+    boost::assign::map_list_of\n+    ( \"main\", uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"))\n+    ( \"test\", uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"))\n+    ( \"regtest\", uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+    ;\n+\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n@@ -104,8 +111,7 @@ class CMainParams : public CChainParams {\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        assert(consensus.hashGenesisBlock == supportedChains.find(strNetworkID)->second);\n \n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\")); // Pieter Wuille\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\")); // Matt Corallo\n@@ -130,6 +136,7 @@ class CMainParams : public CChainParams {\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n+            (     0, consensus.hashGenesisBlock)\n             ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n             ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n             ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n@@ -186,8 +193,7 @@ class CTestNetParams : public CChainParams {\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        assert(consensus.hashGenesisBlock == supportedChains.find(strNetworkID)->second);\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -212,6 +218,7 @@ class CTestNetParams : public CChainParams {\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n+            (     0, consensus.hashGenesisBlock)\n             ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n             1337966069,\n             1488,\n@@ -255,8 +262,7 @@ class CRegTestParams : public CChainParams {\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        assert(consensus.hashGenesisBlock == supportedChains.find(strNetworkID)->second);\n \n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n@@ -269,7 +275,7 @@ class CRegTestParams : public CChainParams {\n \n         checkpointData = (CCheckpointData){\n             boost::assign::map_list_of\n-            ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")),\n+            (     0, consensus.hashGenesisBlock),\n             0,\n             0,\n             0"
      },
      {
        "sha": "605eee9d66ec35016c8ac48579696301bbc9c094",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
        "patch": "@@ -52,6 +52,11 @@ class CChainParams\n         MAX_BASE58_TYPES\n     };\n \n+    /**\n+     * Maps strNetworkID [see BIP70] to chainID (hashGenesisBlock and genesis checkpoint)\n+     */\n+    static const std::map<std::string, uint256> supportedChains;\n+\n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }"
      },
      {
        "sha": "5b74d45c6c5b822f08270f9bf8736444a45ef9cc",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/160d874dfdb53c71a07b1bf7bdd0dab571dabefa/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
        "patch": "@@ -2,22 +2,30 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n-// Unit tests for block-chain checkpoints\n-//\n-\n #include \"checkpoints.h\"\n-\n #include \"uint256.h\"\n #include \"test/test_bitcoin.h\"\n #include \"chainparams.h\"\n \n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n-\n BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n+// The hash of the genesis block it's the genesis checkpoint and chain id\n+BOOST_AUTO_TEST_CASE(genesisblockhash_test)\n+{\n+    std::map<std::string, uint256>::const_iterator iter;\n+    for (iter = CChainParams::supportedChains.begin(); iter != CChainParams::supportedChains.end(); ++iter) {\n+        const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(iter->first));\n+        const CChainParams& chainparams = *testChainParams;\n+        std::string hashStr = chainparams.GenesisBlock().GetHash().GetHex();\n+        BOOST_CHECK_EQUAL(hashStr, iter->second.GetHex());\n+        BOOST_CHECK_EQUAL(hashStr, chainparams.GetConsensus().hashGenesisBlock.GetHex());\n+        const uint256& genesisCheckpoint = chainparams.Checkpoints().mapCheckpoints.find(0)->second;\n+        BOOST_CHECK_EQUAL(hashStr, genesisCheckpoint.GetHex());\n+    }\n+}    \n+\n BOOST_AUTO_TEST_CASE(sanity)\n {\n     const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));"
      }
    ]
  },
  {
    "sha": "28d961ff939bfc0887c6c8b8b288733864559abd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGQ5NjFmZjkzOWJmYzA4ODdjNmM4YjhiMjg4NzMzODY0NTU5YWJk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T06:16:15Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:31:02Z"
      },
      "message": "Chainparams: Adapt qt/paymentserver to support more than 2 chains",
      "tree": {
        "sha": "43ac3d8c2846b000453b411c6e523bf747bf6f3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43ac3d8c2846b000453b411c6e523bf747bf6f3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28d961ff939bfc0887c6c8b8b288733864559abd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d961ff939bfc0887c6c8b8b288733864559abd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28d961ff939bfc0887c6c8b8b288733864559abd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d961ff939bfc0887c6c8b8b288733864559abd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160d874dfdb53c71a07b1bf7bdd0dab571dabefa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/160d874dfdb53c71a07b1bf7bdd0dab571dabefa"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 8,
      "deletions": 20
    },
    "files": [
      {
        "sha": "075d7913caca649f10c13b42010f96cf962e693c",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28d961ff939bfc0887c6c8b8b288733864559abd/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28d961ff939bfc0887c6c8b8b288733864559abd/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=28d961ff939bfc0887c6c8b8b288733864559abd",
        "patch": "@@ -221,16 +221,13 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n                 CBitcoinAddress address(r.address.toStdString());\n-                boost::scoped_ptr<CChainParams> tempChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n-\n-                if (address.IsValid(*tempChainParams))\n-                {\n-                    SelectParams(CBaseChainParams::MAIN);\n-                }\n-                else {\n-                    tempChainParams.reset(CChainParams::Factory(CBaseChainParams::TESTNET));\n-                    if (address.IsValid(*tempChainParams))\n-                        SelectParams(CBaseChainParams::TESTNET);\n+                std::map<std::string, uint256>::const_iterator iter;\n+                for (iter = CChainParams::supportedChains.begin(); iter != CChainParams::supportedChains.end(); ++iter) {\n+                    boost::scoped_ptr<CChainParams> tempChainParams(CChainParams::Factory(iter->first));\n+                    if (address.IsValid(*tempChainParams)) {\n+                        SelectParams(iter->first);\n+                        break;\n+                    }\n                 }\n             }\n         }\n@@ -240,16 +237,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n \n             PaymentRequestPlus request;\n             if (readPaymentRequestFromFile(arg, request))\n-            {\n-                if (request.getDetails().network() == \"main\")\n-                {\n-                    SelectParams(CBaseChainParams::MAIN);\n-                }\n-                else if (request.getDetails().network() == \"test\")\n-                {\n-                    SelectParams(CBaseChainParams::TESTNET);\n-                }\n-            }\n+                SelectParams(request.getDetails().network());\n         }\n         else\n         {"
      }
    ]
  },
  {
    "sha": "bc87f5172393f005e167d81bbe043bd30e93d203",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzg3ZjUxNzIzOTNmMDA1ZTE2N2Q4MWJiZTA0M2JkMzBlOTNkMjAz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-06T15:12:15Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:31:14Z"
      },
      "message": "Blocksize: Introduce sizetest mode with std::numeric_limits<uint64_t>::max() chains",
      "tree": {
        "sha": "9e69a4bec0283e2366180bb6127e1cd31c14753c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e69a4bec0283e2366180bb6127e1cd31c14753c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc87f5172393f005e167d81bbe043bd30e93d203",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc87f5172393f005e167d81bbe043bd30e93d203",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc87f5172393f005e167d81bbe043bd30e93d203",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc87f5172393f005e167d81bbe043bd30e93d203/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28d961ff939bfc0887c6c8b8b288733864559abd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28d961ff939bfc0887c6c8b8b288733864559abd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28d961ff939bfc0887c6c8b8b288733864559abd"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 71,
      "deletions": 1
    },
    "files": [
      {
        "sha": "89f2604bfabe1340a8628fdf2ac5560db7c36ee1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc87f5172393f005e167d81bbe043bd30e93d203/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc87f5172393f005e167d81bbe043bd30e93d203/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=bc87f5172393f005e167d81bbe043bd30e93d203",
        "patch": "@@ -288,6 +288,58 @@ class CRegTestParams : public CChainParams {\n     }\n };\n \n+class CSizeTestParams : public CChainParams {\n+public:\n+    CSizeTestParams() {\n+        consensus.nMaxBlockSize = GetArg(\"-blocksize\", 1000000);\n+        strNetworkID = strprintf(\"sizetest%d\", consensus.nMaxBlockSize);\n+        consensus.nSubsidyHalvingInterval = 150;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = true;\n+        consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = ::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION);\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n+\n+        CScript scriptDestination(CScript() << OP_TRUE);\n+        genesis = CreateGenesisBlock(strNetworkID.c_str(), scriptDestination, 1296688602, 0, 0x2007ffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+\n+        nDefaultPort = 28333;\n+        nPruneAfterHeight = 100000;\n+        fMiningRequiresPeers = false;\n+        fDefaultConsistencyChecks = true;\n+        fRequireStandard = false;\n+        fMineBlocksOnDemand = true;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n+\n+        pchMessageStart[0] = 0xe0;\n+        pchMessageStart[1] = 0x35;\n+        pchMessageStart[2] = 0x8e;\n+        pchMessageStart[3] = 0xfb;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n+        checkpointData = (CCheckpointData){\n+            boost::assign::map_list_of\n+            (     0, consensus.hashGenesisBlock),\n+            0,\n+            0,\n+            0\n+        };\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+    }\n+};\n+\n static boost::scoped_ptr<CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n@@ -303,6 +355,8 @@ CChainParams* CChainParams::Factory(const std::string& chain)\n         return new CTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n         return new CRegTestParams();\n+    else if (chain == CBaseChainParams::SIZETEST)\n+        return new CSizeTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "c165f90ceef7f2c19c25d854d9b5fa3c009deac5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc87f5172393f005e167d81bbe043bd30e93d203/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc87f5172393f005e167d81bbe043bd30e93d203/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=bc87f5172393f005e167d81bbe043bd30e93d203",
        "patch": "@@ -13,15 +13,17 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::SIZETEST = \"sizetest\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n-    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest\"));\n+    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest, sizetest\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n+        strUsage += HelpMessageOpt(\"-blocksize=<n>\", strprintf(\"Max block size to be used with a sizetest chain (default: %u)\", 1000000));\n     }\n }\n \n@@ -63,6 +65,17 @@ class CBaseRegTestParams : public CBaseChainParams\n     }\n };\n \n+class CBaseSizeTestParams : public CBaseChainParams\n+{\n+public:\n+    CBaseSizeTestParams()\n+    {\n+        uint64_t nMaxBlockSize = GetArg(\"-blocksize\", 1000000);\n+        strDataDir = strprintf(\"sizetest%d\", nMaxBlockSize);\n+        nRPCPort = 28333;\n+    }\n+};\n+\n static boost::scoped_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -79,6 +92,8 @@ CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n         return new CBaseTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n         return new CBaseRegTestParams();\n+    else if (chain == CBaseChainParams::SIZETEST)\n+        return new CBaseSizeTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "67eec944ca359c8df3748b2ffe66287db5551eab",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc87f5172393f005e167d81bbe043bd30e93d203/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc87f5172393f005e167d81bbe043bd30e93d203/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=bc87f5172393f005e167d81bbe043bd30e93d203",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n+    static const std::string SIZETEST;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      }
    ]
  },
  {
    "sha": "d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjMxYmY2YTFmZDI1Y2EyOTAzYjFkZDBmZGJmODQ2ZGM1OGE1MzIz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-18T16:15:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:31:14Z"
      },
      "message": "??? Blocksize: Chainparams: Add to supportedChains dynamically",
      "tree": {
        "sha": "221975a764c96bad31fc8d16fcdf23997fe3f5da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/221975a764c96bad31fc8d16fcdf23997fe3f5da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc87f5172393f005e167d81bbe043bd30e93d203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc87f5172393f005e167d81bbe043bd30e93d203",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc87f5172393f005e167d81bbe043bd30e93d203"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4f509baea69d37b08d39ca0297575dfe9249fe0b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
        "patch": "@@ -17,7 +17,7 @@\n \n #include \"chainparamsseeds.h\"\n \n-const std::map<std::string, uint256> CChainParams::supportedChains =\n+std::map<std::string, uint256> CChainParams::supportedChains =\n     boost::assign::map_list_of\n     ( \"main\", uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"))\n     ( \"test\", uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"))\n@@ -310,6 +310,7 @@ class CSizeTestParams : public CChainParams {\n         CScript scriptDestination(CScript() << OP_TRUE);\n         genesis = CreateGenesisBlock(strNetworkID.c_str(), scriptDestination, 1296688602, 0, 0x2007ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n+        CChainParams::supportedChains[strNetworkID] = consensus.hashGenesisBlock;\n \n         nDefaultPort = 28333;\n         nPruneAfterHeight = 100000;"
      },
      {
        "sha": "247f7e9b60687e130a2a6e13082ff215b675ceb3",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
        "patch": "@@ -55,7 +55,7 @@ class CChainParams\n     /**\n      * Maps strNetworkID [see BIP70] to chainID (hashGenesisBlock and genesis checkpoint)\n      */\n-    static const std::map<std::string, uint256> supportedChains;\n+    static std::map<std::string, uint256> supportedChains;\n \n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }"
      }
    ]
  },
  {
    "sha": "a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTljYzU3ZGJjYWI3YjRiOWRiY2U3YWQzODczOTljNmFhNDExYjk0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-15T15:53:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:31:15Z"
      },
      "message": "Chainparams: Macros for chain names",
      "tree": {
        "sha": "e190eea2fb7e1c1453408978aae3ef4eb5c544b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e190eea2fb7e1c1453408978aae3ef4eb5c544b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d631bf6a1fd25ca2903b1dd0fdbf846dc58a5323"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b521a3743a94d5907ee561cb72f82331bbbad7f3",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "patch": "@@ -19,9 +19,9 @@\n \n std::map<std::string, uint256> CChainParams::supportedChains =\n     boost::assign::map_list_of\n-    ( \"main\", uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"))\n-    ( \"test\", uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"))\n-    ( \"regtest\", uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+    ( CHAINPARAMS_MAIN, uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"))\n+    ( CHAINPARAMS_TESTNET, uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"))\n+    ( CHAINPARAMS_REGTEST, uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n     ;\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n@@ -77,7 +77,7 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n-        strNetworkID = \"main\";\n+        strNetworkID = CHAINPARAMS_MAIN;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -164,7 +164,7 @@ class CMainParams : public CChainParams {\n class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n-        strNetworkID = \"test\";\n+        strNetworkID = CHAINPARAMS_TESTNET;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n@@ -234,7 +234,7 @@ class CTestNetParams : public CChainParams {\n class CRegTestParams : public CChainParams {\n public:\n     CRegTestParams() {\n-        strNetworkID = \"regtest\";\n+        strNetworkID = CHAINPARAMS_REGTEST;\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;"
      },
      {
        "sha": "8819c1cf74b2c76ca75a362e9a79a92ffb898b5e",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "patch": "@@ -10,9 +10,9 @@\n \n #include <boost/scoped_ptr.hpp>\n \n-const std::string CBaseChainParams::MAIN = \"main\";\n-const std::string CBaseChainParams::TESTNET = \"test\";\n-const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::MAIN = CHAINPARAMS_MAIN;\n+const std::string CBaseChainParams::TESTNET = CHAINPARAMS_TESTNET;\n+const std::string CBaseChainParams::REGTEST = CHAINPARAMS_REGTEST;\n const std::string CBaseChainParams::SIZETEST = \"sizetest\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n@@ -36,6 +36,7 @@ class CBaseMainParams : public CBaseChainParams\n     CBaseMainParams()\n     {\n         nRPCPort = 8332;\n+        strDataDir = \"\";\n     }\n };\n \n@@ -48,7 +49,7 @@ class CBaseTestNetParams : public CBaseChainParams\n     CBaseTestNetParams()\n     {\n         nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n+        strDataDir = CHAINPARAMS_TESTNET;\n     }\n };\n \n@@ -61,7 +62,7 @@ class CBaseRegTestParams : public CBaseChainParams\n     CBaseRegTestParams()\n     {\n         nRPCPort = 18332;\n-        strDataDir = \"regtest\";\n+        strDataDir = CHAINPARAMS_REGTEST;\n     }\n };\n "
      },
      {
        "sha": "9c389a8e17e8dd337fcf4304db9e9208fff524a4",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "patch": "@@ -8,6 +8,10 @@\n #include <string>\n #include <vector>\n \n+#define CHAINPARAMS_MAIN \"main\"\n+#define CHAINPARAMS_TESTNET \"testnet\"\n+#define CHAINPARAMS_REGTEST \"regtest\"\n+\n /**\n  * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)\n  * of a given instance of the Bitcoin system."
      },
      {
        "sha": "66a327acd7792667e01bdaad3b95b5e9c2d5c45d",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "patch": "@@ -17,9 +17,9 @@ static const struct {\n     const int iconColorHueShift;\n     const int iconColorSaturationReduction;\n } network_styles[] = {\n-    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n-    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30}\n+    {CHAINPARAMS_MAIN, QAPP_APP_NAME_DEFAULT, 0, 0},\n+    {CHAINPARAMS_TESTNET, QAPP_APP_NAME_TESTNET, 70, 30},\n+    {CHAINPARAMS_REGTEST, QAPP_APP_NAME_TESTNET, 160, 30}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n "
      },
      {
        "sha": "f7ab78fd4cbcdd6c36b454ad7cfc5255e997243c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "patch": "@@ -141,7 +141,7 @@ void PaymentServerTests::paymentServerTests()\n     data = DecodeBase64(paymentrequest1_cert2_BASE64);\n     byteArray = QByteArray((const char*)&data[0], data.size());\n     r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized, because network \"main\" is default, even for\n+    // Ensure the request is initialized, because network CHAINPARAMS_MAIN is default, even for\n     // uninizialized payment requests and that will fail our test here.\n     QVERIFY(r.paymentRequest.IsInitialized());\n     QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);"
      }
    ]
  },
  {
    "sha": "2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTdjYjMxOGQ5YTgwOWUyMDFhM2UzNzM4Njg5ZjBmMGFlOGE1ZmFk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T22:35:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-03T12:31:15Z"
      },
      "message": "fixup?",
      "tree": {
        "sha": "924e592721e2ce5d288cf2efddec2583d6b6efca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/924e592721e2ce5d288cf2efddec2583d6b6efca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a99cc57dbcab7b4b9dbce7ad387399c6aa411b94"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "bf9e9592fafb881ba413a7b299691714727c85c9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
        "patch": "@@ -292,7 +292,7 @@ class CSizeTestParams : public CChainParams {\n public:\n     CSizeTestParams() {\n         consensus.nMaxBlockSize = GetArg(\"-blocksize\", 1000000);\n-        strNetworkID = strprintf(\"sizetest%d\", consensus.nMaxBlockSize);\n+        strNetworkID = strprintf(\"%s%d\", CHAINPARAMS_SIZETEST, consensus.nMaxBlockSize);\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -350,13 +350,13 @@ const CChainParams &Params() {\n \n CChainParams* CChainParams::Factory(const std::string& chain)\n {\n-    if (chain == CBaseChainParams::MAIN)\n+    if (chain == CHAINPARAMS_MAIN)\n         return new CMainParams();\n-    else if (chain == CBaseChainParams::TESTNET)\n+    else if (chain == CHAINPARAMS_TESTNET)\n         return new CTestNetParams();\n-    else if (chain == CBaseChainParams::REGTEST)\n+    else if (chain == CHAINPARAMS_REGTEST)\n         return new CRegTestParams();\n-    else if (chain == CBaseChainParams::SIZETEST)\n+    else if (chain == CHAINPARAMS_SIZETEST)\n         return new CSizeTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));"
      },
      {
        "sha": "1a0a4771193327a349d91051982ffd610e1617d6",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
        "patch": "@@ -12,8 +12,6 @@\n \n const std::string CBaseChainParams::MAIN = CHAINPARAMS_MAIN;\n const std::string CBaseChainParams::TESTNET = CHAINPARAMS_TESTNET;\n-const std::string CBaseChainParams::REGTEST = CHAINPARAMS_REGTEST;\n-const std::string CBaseChainParams::SIZETEST = \"sizetest\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n@@ -72,7 +70,7 @@ class CBaseSizeTestParams : public CBaseChainParams\n     CBaseSizeTestParams()\n     {\n         uint64_t nMaxBlockSize = GetArg(\"-blocksize\", 1000000);\n-        strDataDir = strprintf(\"sizetest%d\", nMaxBlockSize);\n+        strDataDir = strprintf(\"%s%d\", CHAINPARAMS_SIZETEST, nMaxBlockSize);\n         nRPCPort = 28333;\n     }\n };\n@@ -87,13 +85,13 @@ const CBaseChainParams& BaseParams()\n \n CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n {\n-    if (chain == CBaseChainParams::MAIN)\n+    if (chain == CHAINPARAMS_MAIN)\n         return new CBaseMainParams();\n-    else if (chain == CBaseChainParams::TESTNET)\n+    else if (chain == CHAINPARAMS_TESTNET)\n         return new CBaseTestNetParams();\n-    else if (chain == CBaseChainParams::REGTEST)\n+    else if (chain == CHAINPARAMS_REGTEST)\n         return new CBaseRegTestParams();\n-    else if (chain == CBaseChainParams::SIZETEST)\n+    else if (chain == CHAINPARAMS_SIZETEST)\n         return new CBaseSizeTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n@@ -112,10 +110,10 @@ std::string ChainNameFromCommandLine()\n     if (fTestNet && fRegTest)\n         throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n     if (fRegTest)\n-        return CBaseChainParams::REGTEST;\n+        return CHAINPARAMS_REGTEST;\n     if (fTestNet)\n-        return CBaseChainParams::TESTNET;\n-    return GetArg(\"-chain\", CBaseChainParams::MAIN);\n+        return CHAINPARAMS_TESTNET;\n+    return GetArg(\"-chain\", CHAINPARAMS_MAIN);\n }\n \n bool AreBaseParamsConfigured()"
      },
      {
        "sha": "0fcfb3459b162cd73260e308fc54321cf49dc818",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
        "patch": "@@ -11,6 +11,7 @@\n #define CHAINPARAMS_MAIN \"main\"\n #define CHAINPARAMS_TESTNET \"testnet\"\n #define CHAINPARAMS_REGTEST \"regtest\"\n+#define CHAINPARAMS_SIZETEST \"sizetest\"\n \n /**\n  * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)\n@@ -22,8 +23,6 @@ class CBaseChainParams\n     /** BIP70 chain name strings (main, test or regtest) */\n     static const std::string MAIN;\n     static const std::string TESTNET;\n-    static const std::string REGTEST;\n-    static const std::string SIZETEST;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      },
      {
        "sha": "fc368b5468127f9ad35d11cb7d0e1d4ef9d2e420",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e7cb318d9a809e201a3e3738689f0f0ae8a5fad/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2e7cb318d9a809e201a3e3738689f0f0ae8a5fad",
        "patch": "@@ -96,7 +96,7 @@ TestingSetup::~TestingSetup()\n         boost::filesystem::remove_all(pathTemp);\n }\n \n-TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+TestChain100Setup::TestChain100Setup() : TestingSetup(CHAINPARAMS_REGTEST)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Generate a 100-block chain:"
      }
    ]
  }
]