[
  {
    "sha": "0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTU2ZTQ2YmZmN2YwYjZkYTY1YTRkZTZkNGY4MjYxZmU5ZDcwNTVj",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-10T15:39:36Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-25T11:49:08Z"
      },
      "message": "test: use zero-argument super() shortcut (Python 3.0+)\n\nas defined in PEP 3135:\n\n\"The new syntax:\n\n    super()\n\nis equivalent to:\n\n    super(__class__, <firstarg>)\n\nwhere __class__ is the class that the method was defined in, and <firstarg> is\nthe first parameter of the method (normally self for instance methods, and cls\nfor class methods).\"",
      "tree": {
        "sha": "daaa37ab9326e53a2c7fd734dbe9af0f79852387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daaa37ab9326e53a2c7fd734dbe9af0f79852387"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f19155e5bca37bf1fe14515758c6f589f6806ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f19155e5bca37bf1fe14515758c6f589f6806ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f19155e5bca37bf1fe14515758c6f589f6806ae"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4855f62a8f845019d36816498fc74c3f95cbe557",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
        "patch": "@@ -603,16 +603,16 @@ class CBlock(CBlockHeader):\n     __slots__ = (\"vtx\",)\n \n     def __init__(self, header=None):\n-        super(CBlock, self).__init__(header)\n+        super().__init__(header)\n         self.vtx = []\n \n     def deserialize(self, f):\n-        super(CBlock, self).deserialize(f)\n+        super().deserialize(f)\n         self.vtx = deser_vector(f, CTransaction)\n \n     def serialize(self, with_witness=True):\n         r = b\"\"\n-        r += super(CBlock, self).serialize()\n+        r += super().serialize()\n         if with_witness:\n             r += ser_vector(self.vtx, \"serialize_with_witness\")\n         else:\n@@ -752,7 +752,7 @@ def __repr__(self):\n class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n     __slots__ = ()\n     def serialize(self):\n-        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n+        return super().serialize(with_witness=True)\n \n # Calculate the BIP 152-compact blocks shortid for a given transaction hash\n def calculate_shortid(k0, k1, tx_hash):"
      },
      {
        "sha": "e475ed8596bdd12749dccfdac8143f2386446247",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
        "patch": "@@ -97,7 +97,7 @@ def __new__(cls, n):\n             return _opcode_instances[n]\n         except IndexError:\n             assert len(_opcode_instances) == n\n-            _opcode_instances.append(super(CScriptOp, cls).__new__(cls, n))\n+            _opcode_instances.append(super().__new__(cls, n))\n             return _opcode_instances[n]\n \n # Populate opcode instance table\n@@ -372,7 +372,7 @@ class CScriptTruncatedPushDataError(CScriptInvalidError):\n     \"\"\"Invalid pushdata due to truncation\"\"\"\n     def __init__(self, msg, data):\n         self.data = data\n-        super(CScriptTruncatedPushDataError, self).__init__(msg)\n+        super().__init__(msg)\n \n \n # This is used, eg, for blockchain heights in coinbase scripts (bip34)\n@@ -458,14 +458,14 @@ def join(self, iterable):\n \n     def __new__(cls, value=b''):\n         if isinstance(value, bytes) or isinstance(value, bytearray):\n-            return super(CScript, cls).__new__(cls, value)\n+            return super().__new__(cls, value)\n         else:\n             def coerce_iterable(iterable):\n                 for instance in iterable:\n                     yield cls.__coerce_instance(instance)\n             # Annoyingly on both python2 and python3 bytes.join() always\n             # returns a bytes instance even when subclassed.\n-            return super(CScript, cls).__new__(cls, b''.join(coerce_iterable(value)))\n+            return super().__new__(cls, b''.join(coerce_iterable(value)))\n \n     def raw_iter(self):\n         \"\"\"Raw iteration"
      },
      {
        "sha": "ad23206c902e35decbc1a977be14d7fe2fb3abfe",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0956e46bff7f0b6da65a4de6d4f8261fe9d7055c/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=0956e46bff7f0b6da65a4de6d4f8261fe9d7055c",
        "patch": "@@ -29,7 +29,7 @@ def add_options(self, parser):\n \n     def setup_network(self):\n         # Start with split network:\n-        super(TxnMallTest, self).setup_network()\n+        super().setup_network()\n         disconnect_nodes(self.nodes[1], 2)\n         disconnect_nodes(self.nodes[2], 1)\n "
      }
    ]
  }
]