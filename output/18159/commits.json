[
  {
    "sha": "1b068c50dd1522990cc33e1aca444741c7e5a747",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjA2OGM1MGRkMTUyMjk5MGNjMzNlMWFjYTQ0NDc0MWM3ZTVhNzQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-16T10:45:05Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-16T11:11:54Z"
      },
      "message": "tests: Add --valgrind option to test/fuzz/test_runner.py for running fuzzing test cases under valgrind",
      "tree": {
        "sha": "bfaf7398aabb27eaa8ff28dc32c0a6f12d06e3ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfaf7398aabb27eaa8ff28dc32c0a6f12d06e3ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b068c50dd1522990cc33e1aca444741c7e5a747",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b068c50dd1522990cc33e1aca444741c7e5a747",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b068c50dd1522990cc33e1aca444741c7e5a747",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b068c50dd1522990cc33e1aca444741c7e5a747/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a2631fb0dc781504df0f3fe8b42f21cbdb6f20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2631fb0dc781504df0f3fe8b42f21cbdb6f20d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2631fb0dc781504df0f3fe8b42f21cbdb6f20d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "61c3e700c57c6d44858edd26d98d42c1e9c4481f",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b068c50dd1522990cc33e1aca444741c7e5a747/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b068c50dd1522990cc33e1aca444741c7e5a747/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=1b068c50dd1522990cc33e1aca444741c7e5a747",
        "patch": "@@ -61,6 +61,11 @@ def main():\n         action='store_true',\n         help='If true, export coverage information to files in the seed corpus',\n     )\n+    parser.add_argument(\n+        '--valgrind',\n+        action='store_true',\n+        help='If true, run fuzzing binaries under the valgrind memory error detector. Valgrind 3.14 or later required.',\n+    )\n     parser.add_argument(\n         'seed_dir',\n         help='The seed corpus to run on (must contain subfolders for each fuzz target).',\n@@ -129,10 +134,11 @@ def main():\n         test_list=test_list_selection,\n         build_dir=config[\"environment\"][\"BUILDDIR\"],\n         export_coverage=args.export_coverage,\n+        use_valgrind=args.valgrind,\n     )\n \n \n-def run_once(*, corpus, test_list, build_dir, export_coverage):\n+def run_once(*, corpus, test_list, build_dir, export_coverage, use_valgrind):\n     for t in test_list:\n         corpus_path = os.path.join(corpus, t)\n         if t in FUZZERS_MISSING_CORPORA:\n@@ -143,6 +149,8 @@ def run_once(*, corpus, test_list, build_dir, export_coverage):\n             '-detect_leaks=0',\n             corpus_path,\n         ]\n+        if use_valgrind:\n+            args = ['valgrind', '--quiet', '--error-exitcode=1', '--exit-on-first-error=yes'] + args\n         logging.debug('Run {} with args {}'.format(t, args))\n         result = subprocess.run(args, stderr=subprocess.PIPE, universal_newlines=True)\n         output = result.stderr"
      }
    ]
  }
]