sipa,2012-12-02T17:09:40Z,"Benchmark result: on my system (an i7-2670QM), a reindex of the first 210000 blocks, with script verification enabled everywhere, and -dbcache=900:\n- HEAD: 3h22m\n- -par=4: 1h14m\n\nWith -par=4, CPU usage is around 350% (though the first ~100000 blocks cause lower CPU usage)\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-10932035,10932035,
sipa,2012-12-04T00:40:18Z,- cleaned up the code\n- moved the job queue implementation to checkqueue.h\n- added comments\n- enabled by default (-par=0 autodetects)\n,https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-10979285,10979285,
Diapolo,2012-12-04T08:42:09Z,"I love your comments, great work here. I still need to try out the code though :).\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-10988492,10988492,
laanwj,2012-12-06T12:39:31Z,Nice!\n,https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11083829,11083829,
sipa,2012-12-06T12:52:10Z,"I've been doing some benchmark, and it seems the contention on the (single) lock protecting the queue makes the throughput and contention overhead go rather high when using too many threads. At least extrapolating from what I see on my system. more than 8 or 16 threads will probably cause significantly degraded performance. Switching to a per-thread queue is probably better, with jobs assigned in ",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11084354,11084354,
BitcoinPullTester,2012-12-07T03:24:08Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8f706026e6dee8e38cca0d17acbfc75107d2dcba for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11117780,11117780,
sipa,2012-12-08T22:55:04Z,"Changes:\n- Access to the script check queue is now piped through a RAII CScriptCheckQueueControl, which guarantees the queue is fully processed before continuing\n- Print the number of threads used in debug.log\n- Don't store block validation results in signature cache (only mempool transactions are stored), but still use them. This allows multiple threads reading the cache simultaneously.\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11164828,11164828,
BitcoinPullTester,2012-12-08T23:12:45Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/5c713c9daa1128d407d9c483d1abae9bde6d48ad for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11164998,11164998,
BitcoinPullTester,2012-12-16T03:29:51Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/2f3ae3eebd979c1c4c7f43d9cfbe95f61db93ec6 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11413748,11413748,
gmaxwell,2012-12-19T17:08:29Z,"Just a comment on negative testing results:\n\nI've been running loops of par inside valgrind on fuzzed blockchains with an instrumented copy of Bitcoin that disables most of the block validity tests (so that the fuzzing doesn't cause the chain to be rejected).  In 1000 runs, no errors so farâ€” but I did trigger invalid memory accesses after about 100 runs on this code prior to the RAII CScriptChec",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11538359,11538359,
sipa,2012-12-19T17:32:49Z,"Given that any non-trivial code has at least one bug (see http://www.murphys-laws.com/murphy/murphy-computer.html), this is indeed bad news :(\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11539429,11539429,
BitcoinPullTester,2013-01-08T01:23:51Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ef0f422519de4a3ce47d923e5f8f90cd12349f3e for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-11980472,11980472,
gavinandresen,2013-01-17T22:00:19Z,"ACK.\n\nBenchmark results on my mac, testing by doing a fresh sync of the -testnet blockchain pulled over the LAN:\n\nWithout this pull:\n32-bit compile: 270 seconds\n64-bit compile: 180 seconds\n\nWith this pull:\n64-bit, 4-CPU : 125 seconds\n",https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-12394056,12394056,
practicalswift,2017-08-03T10:05:33Z,@gmaxwell Is your instrumented copy that disables most of the block validity tests available on GitHub? I've thought about writing something similar myself to facilitate deeper fuzzing (my current fuzzing is quite shallow) so I'd be very interested in your version :-),https://github.com/bitcoin/bitcoin/pull/2060#issuecomment-319926604,319926604,
Diapolo,2012-12-03T14:59:46Z,When -par=1 this would cause no thread to get spawned for verification and matches current behaviour?\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2293084,2293084,src/init.cpp
sipa,2012-12-03T22:23:08Z,"If nScriptCheckThreads == 0, there is some special code that just runs the script validation inline, instead of pushing it to queues.\n\nnScriptCheckThreads == 1 shouldn't ever happen - there's some code that turns it into 0 if set to 1.\n\nIf nScriptCheckThreads is higher, nScriptCheckThreads-1 actual separate threads are started. When the main block processing thread is done with its normal task",https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2299453,2299453,src/init.cpp
Diapolo,2012-12-04T08:35:07Z,Nit: Small indentation glitch.\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2303364,2303364,src/checkqueue.h
Diapolo,2012-12-04T08:39:45Z,This could be an `else if`.\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2303395,2303395,src/init.cpp
Diapolo,2012-12-04T08:41:16Z,"Can you include checkqueue.h in `bitcoin-qt.pro`, to be visible in the Qt IDE.\n",https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2303409,2303409,src/checkqueue.h
sipa,2012-12-04T13:37:15Z,How so? Indentation is 4 spaces...\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2306067,2306067,src/checkqueue.h
sipa,2012-12-04T13:37:44Z,Indeed.\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2306072,2306072,src/init.cpp
sipa,2012-12-04T13:37:49Z,Ok.\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2306077,2306077,src/checkqueue.h
Diapolo,2012-12-04T13:40:43Z,"You are right, it's fine ... just looked weird because of the do { above.\n",https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2306107,2306107,src/checkqueue.h
laanwj,2012-12-06T12:39:17Z,Please make this (arbitary?) limit of 64 a constant instead of a magic number.\n,https://github.com/bitcoin/bitcoin/pull/2060#discussion_r2334247,2334247,src/init.cpp
