[
  {
    "sha": "f1136200a67fc1df894d45fba51b40f748e0b889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTEzNjIwMGE2N2ZjMWRmODk0ZDQ1ZmJhNTFiNDBmNzQ4ZTBiODg5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-09-08T15:33:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-08T00:49:14Z"
      },
      "message": "Move VerifySignature to main",
      "tree": {
        "sha": "1c867524f6e9864f17024b817b68cbe8be78adf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c867524f6e9864f17024b817b68cbe8be78adf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1136200a67fc1df894d45fba51b40f748e0b889",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1136200a67fc1df894d45fba51b40f748e0b889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1136200a67fc1df894d45fba51b40f748e0b889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1136200a67fc1df894d45fba51b40f748e0b889/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "429915bd0dfcdb03b13d9a3c2fb82d5401ef70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429915bd0dfcdb03b13d9a3c2fb82d5401ef70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/429915bd0dfcdb03b13d9a3c2fb82d5401ef70ce"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c0446370ae382041f56482bc2e4d9483ebc6ef10",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1136200a67fc1df894d45fba51b40f748e0b889/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1136200a67fc1df894d45fba51b40f748e0b889/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f1136200a67fc1df894d45fba51b40f748e0b889",
        "patch": "@@ -1348,6 +1348,17 @@ bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n     return true;\n }\n \n+bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n+{\n+    assert(nIn < txTo.vin.size());\n+    const CTxIn& txin = txTo.vin[nIn];\n+    if (txin.prevout.n >= txFrom.vout.size())\n+        return false;\n+    const CTxOut& txout = txFrom.vout[txin.prevout.n];\n+\n+    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, flags, nHashType);\n+}\n+\n bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmode, unsigned int flags) const\n {\n     if (!IsCoinBase())"
      },
      {
        "sha": "a098cc775c2e1d4a611936488a589d3f447af766",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1136200a67fc1df894d45fba51b40f748e0b889/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1136200a67fc1df894d45fba51b40f748e0b889/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f1136200a67fc1df894d45fba51b40f748e0b889",
        "patch": "@@ -164,6 +164,8 @@ bool SetBestChain(CBlockIndex* pindexNew);\n bool ConnectBestBlock();\n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n+/** Verify a signature */\n+bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n \n \n "
      },
      {
        "sha": "52a8f2c1174170bb8fa58e9b221fb7799f672832",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1136200a67fc1df894d45fba51b40f748e0b889/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1136200a67fc1df894d45fba51b40f748e0b889/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=f1136200a67fc1df894d45fba51b40f748e0b889",
        "patch": "@@ -1723,17 +1723,6 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n     return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n }\n \n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n-{\n-    assert(nIn < txTo.vin.size());\n-    const CTxIn& txin = txTo.vin[nIn];\n-    if (txin.prevout.n >= txFrom.vout.size())\n-        return false;\n-    const CTxOut& txout = txFrom.vout[txin.prevout.n];\n-\n-    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, flags, nHashType);\n-}\n-\n static CScript PushAll(const vector<valtype>& values)\n {\n     CScript result;"
      },
      {
        "sha": "f7cf7e8e9e7fe849cd6f7b37c9447954ef5c215f",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1136200a67fc1df894d45fba51b40f748e0b889/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1136200a67fc1df894d45fba51b40f748e0b889/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=f1136200a67fc1df894d45fba51b40f748e0b889",
        "patch": "@@ -673,9 +673,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                   unsigned int flags, int nHashType);\n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n \n // Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n // combine them intelligently and return the result."
      }
    ]
  },
  {
    "sha": "2800ce7367760a9bb8fd5209feddf71e574a592d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODAwY2U3MzY3NzYwYTliYjhmZDUyMDlmZWRkZjcxZTU3NGE1OTJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-12-01T21:30:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-08T00:49:15Z"
      },
      "message": "Add CScriptCheck: a closure representing a script check",
      "tree": {
        "sha": "03a3551000b10db481b48a87a041f7b266729358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03a3551000b10db481b48a87a041f7b266729358"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2800ce7367760a9bb8fd5209feddf71e574a592d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2800ce7367760a9bb8fd5209feddf71e574a592d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2800ce7367760a9bb8fd5209feddf71e574a592d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2800ce7367760a9bb8fd5209feddf71e574a592d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1136200a67fc1df894d45fba51b40f748e0b889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1136200a67fc1df894d45fba51b40f748e0b889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1136200a67fc1df894d45fba51b40f748e0b889"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 34,
      "deletions": 8
    },
    "files": [
      {
        "sha": "4441c65fd4977eaea51d83e066de38935797d03f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2800ce7367760a9bb8fd5209feddf71e574a592d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2800ce7367760a9bb8fd5209feddf71e574a592d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2800ce7367760a9bb8fd5209feddf71e574a592d",
        "patch": "@@ -1348,15 +1348,16 @@ bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n     return true;\n }\n \n+bool CScriptCheck::operator()() const {\n+    const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n+    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, nHashType))\n+        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString().substr(0,10).c_str());\n+    return true;\n+}\n+\n bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n {\n-    assert(nIn < txTo.vin.size());\n-    const CTxIn& txin = txTo.vin[nIn];\n-    if (txin.prevout.n >= txFrom.vout.size())\n-        return false;\n-    const CTxOut& txout = txFrom.vout[txin.prevout.n];\n-\n-    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, flags, nHashType);\n+    return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n }\n \n bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmode, unsigned int flags) const"
      },
      {
        "sha": "83454e331b3c8d8355ef495875b5211e1c7baec8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2800ce7367760a9bb8fd5209feddf71e574a592d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2800ce7367760a9bb8fd5209feddf71e574a592d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2800ce7367760a9bb8fd5209feddf71e574a592d",
        "patch": "@@ -430,7 +430,6 @@ enum GetMinFee_mode\n     GMF_SEND,\n };\n \n-// Modes for script/signature checking\n enum CheckSig_mode\n {\n     CS_NEVER,             // never validate scripts\n@@ -1015,7 +1014,33 @@ class CCoins\n     }\n };\n \n+/** Closure representing one script verification\n+ *  Note that this stores references to the spending transaction */\n+class CScriptCheck\n+{\n+private:\n+    CScript scriptPubKey;\n+    const CTransaction *ptxTo;\n+    unsigned int nIn;\n+    unsigned int nFlags;\n+    int nHashType;\n+\n+public:\n+    CScriptCheck() {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, int nHashTypeIn) :\n+        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), nHashType(nHashTypeIn) { }\n+\n+    bool operator()() const;\n \n+    void swap(CScriptCheck &check) {\n+        scriptPubKey.swap(check.scriptPubKey);\n+        std::swap(ptxTo, check.ptxTo);\n+        std::swap(nIn, check.nIn);\n+        std::swap(nFlags, check.nFlags);\n+        std::swap(nHashType, check.nHashType);\n+    }\n+};\n \n /** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction"
      }
    ]
  },
  {
    "sha": "1d70f4bde8f6adc4df65397f486186a694a74c60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDcwZjRiZGU4ZjZhZGM0ZGY2NTM5N2Y0ODYxODZhNjk0YTc0YzYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-12-01T21:51:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-08T00:49:15Z"
      },
      "message": "Remove CheckSig_mode and move logic out of CheckInputs()",
      "tree": {
        "sha": "36a477faabb003e95a7bb3bb1583316664afc628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a477faabb003e95a7bb3bb1583316664afc628"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d70f4bde8f6adc4df65397f486186a694a74c60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d70f4bde8f6adc4df65397f486186a694a74c60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d70f4bde8f6adc4df65397f486186a694a74c60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d70f4bde8f6adc4df65397f486186a694a74c60/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2800ce7367760a9bb8fd5209feddf71e574a592d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2800ce7367760a9bb8fd5209feddf71e574a592d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2800ce7367760a9bb8fd5209feddf71e574a592d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 8,
      "deletions": 14
    },
    "files": [
      {
        "sha": "7b37d0644200df7fb7713a617b60ff8f61fe3133",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d70f4bde8f6adc4df65397f486186a694a74c60/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d70f4bde8f6adc4df65397f486186a694a74c60/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1d70f4bde8f6adc4df65397f486186a694a74c60",
        "patch": "@@ -772,7 +772,7 @@ bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs,\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!tx.CheckInputs(view, CS_ALWAYS, SCRIPT_VERIFY_P2SH))\n+        if (!tx.CheckInputs(view, true, SCRIPT_VERIFY_P2SH))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n@@ -1360,7 +1360,7 @@ bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned in\n     return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n }\n \n-bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmode, unsigned int flags) const\n+bool CTransaction::CheckInputs(CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags) const\n {\n     if (!IsCoinBase())\n     {\n@@ -1410,8 +1410,7 @@ bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmod\n         // Skip ECDSA signature verification when connecting blocks\n         // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n-        if (csmode == CS_ALWAYS ||\n-            (csmode == CS_AFTER_CHECKPOINT && inputs.GetBestBlock()->nHeight >= Checkpoints::GetTotalBlocksEstimate())) {\n+        if (fScriptChecks) {\n             for (unsigned int i = 0; i < vin.size(); i++) {\n                 const COutPoint &prevout = vin[i].prevout;\n                 const CCoins &coins = inputs.GetCoins(prevout.hash);\n@@ -1577,6 +1576,8 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n     // verify that the view's current state corresponds to the previous block\n     assert(pindex->pprev == view.GetBestBlock());\n \n+    bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate();\n+\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n@@ -1637,7 +1638,7 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n \n             nFees += tx.GetValueIn(view)-tx.GetValueOut();\n \n-            if (!tx.CheckInputs(view, CS_AFTER_CHECKPOINT, fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE))\n+            if (!tx.CheckInputs(view, fScriptChecks, fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE))\n                 return false;\n         }\n \n@@ -3924,7 +3925,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            if (!tx.CheckInputs(viewTemp, CS_ALWAYS, SCRIPT_VERIFY_P2SH))\n+            if (!tx.CheckInputs(viewTemp, true, SCRIPT_VERIFY_P2SH))\n                 continue;\n \n             CTxUndo txundo;"
      },
      {
        "sha": "abd3eaf7d772e40753844c79555e52a97a5c7362",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d70f4bde8f6adc4df65397f486186a694a74c60/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d70f4bde8f6adc4df65397f486186a694a74c60/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1d70f4bde8f6adc4df65397f486186a694a74c60",
        "patch": "@@ -430,13 +430,6 @@ enum GetMinFee_mode\n     GMF_SEND,\n };\n \n-enum CheckSig_mode\n-{\n-    CS_NEVER,             // never validate scripts\n-    CS_AFTER_CHECKPOINT,  // validate scripts after the last checkpoint\n-    CS_ALWAYS             // always validate scripts\n-};\n-\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n@@ -641,7 +634,7 @@ class CTransaction\n \n     // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n     // This does not modify the UTXO set\n-    bool CheckInputs(CCoinsViewCache &view, enum CheckSig_mode csmode, unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC) const;\n+    bool CheckInputs(CCoinsViewCache &view, bool fScriptChecks = true, unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC) const;\n \n     // Apply the effects of this transaction on the UTXO set represented by view\n     bool UpdateCoins(CCoinsViewCache &view, CTxUndo &txundo, int nHeight, const uint256 &txhash) const;"
      }
    ]
  },
  {
    "sha": "f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWNhZTgzMmU2ZjU2YzZhYmU4OWIzYmYwNWQxZjE3NmMyYTdjOTEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-12-01T22:04:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-08T01:00:59Z"
      },
      "message": "Parallelize script verification\n\n* During block verification (when parallelism is requested), script\n  check actions are stored instead of being executed immediately.\n* After every processed transactions, its signature actions are\n  pushed to a CScriptCheckQueue, which maintains a queue and some\n  synchronization mechanism.\n* Two or more threads (if enabled) start processing elements from\n  this queue,\n* When the block connection code is finished processing transactions,\n  it joins the worker pool until the queue is empty.\n\nAs cs_main is held the entire time, and all verification must be\nfinished before the block continues processing, this does not reach\nthe best possible performance. It is a less drastic change than\nsome more advanced mechanisms (like doing verification out-of-band\nentirely, and rolling back blocks when a failure is detected).\n\nThe -par=N flag controls the number of threads (1-16). 0 means auto,\nand is the default.",
      "tree": {
        "sha": "dd6c7cbfdee74c58b23e538853d7439bfa1f41e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6c7cbfdee74c58b23e538853d7439bfa1f41e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d70f4bde8f6adc4df65397f486186a694a74c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d70f4bde8f6adc4df65397f486186a694a74c60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d70f4bde8f6adc4df65397f486186a694a74c60"
      }
    ],
    "stats": {
      "total": 287,
      "additions": 281,
      "deletions": 6
    },
    "files": [
      {
        "sha": "31780b5b84ebddd861d5ba42284e685eebc99b37",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -156,6 +156,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/init.h \\\n     src/irc.h \\\n     src/mruset.h \\\n+    src/checkqueue.h \\\n     src/json/json_spirit_writer_template.h \\\n     src/json/json_spirit_writer.h \\\n     src/json/json_spirit_value.h \\"
      },
      {
        "sha": "36141dd74b60947fc61fcdf7bc1949953eaeaa18",
        "filename": "src/checkqueue.h",
        "status": "added",
        "additions": 206,
        "deletions": 0,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef CHECKQUEUE_H\n+#define CHECKQUEUE_H\n+\n+#include <boost/thread/mutex.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+\n+#include <vector>\n+#include <algorithm>\n+\n+template<typename T> class CCheckQueueControl;\n+\n+/** Queue for verifications that have to be performed.\n+  * The verifications are represented by a type T, which must provide an\n+  * operator(), returning a bool.\n+  *\n+  * One thread (the master) is assumed to push batches of verifications\n+  * onto the queue, where they are processed by N-1 worker threads. When\n+  * the master is done adding work, it temporarily joins the worker pool\n+  * as an N'th worker, until all jobs are done.\n+  */\n+template<typename T> class CCheckQueue {\n+private:\n+    // Mutex to protect the inner state\n+    boost::mutex mutex;\n+\n+    // Worker threads block on this when out of work\n+    boost::condition_variable condWorker;\n+\n+    // Master thread blocks on this when out of work\n+    boost::condition_variable condMaster;\n+\n+    // Quit method blocks on this until all workers are gone\n+    boost::condition_variable condQuit;\n+\n+    // The queue of elements to be processed.\n+    // As the order of booleans doesn't matter, it is used as a LIFO (stack)\n+    std::vector<T> queue;\n+\n+    // The number of workers (including the master) that are idle.\n+    int nIdle;\n+\n+    // The total number of workers (including the master).\n+    int nTotal;\n+\n+    // The temporary evaluation result.\n+    bool fAllOk;\n+\n+    // Number of verifications that haven't completed yet.\n+    // This includes elements that are not anymore in queue, but still in\n+    // worker's own batches.\n+    unsigned int nTodo;\n+\n+    // Whether we're shutting down.\n+    bool fQuit;\n+\n+    // The maximum number of elements to be processed in one batch\n+    unsigned int nBatchSize;\n+\n+    // Internal function that does bulk of the verification work.\n+    bool Loop(bool fMaster = false) {\n+        boost::condition_variable &cond = fMaster ? condMaster : condWorker;\n+        std::vector<T> vChecks;\n+        vChecks.reserve(nBatchSize);\n+        unsigned int nNow = 0;\n+        bool fOk = true;\n+        do {\n+            {\n+                boost::unique_lock<boost::mutex> lock(mutex);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                if (nNow) {\n+                    fAllOk &= fOk;\n+                    nTodo -= nNow;\n+                    if (nTodo == 0 && !fMaster)\n+                        // We processed the last element; inform the master he can exit and return the result\n+                        condMaster.notify_one();\n+                } else {\n+                    // first iteration\n+                    nTotal++;\n+                }\n+                // logically, the do loop starts here\n+                while (queue.empty()) {\n+                    if ((fMaster || fQuit) && nTodo == 0) {\n+                        nTotal--;\n+                        if (nTotal==0)\n+                            condQuit.notify_one();\n+                        bool fRet = fAllOk;\n+                        // reset the status for new work later\n+                        if (fMaster)\n+                            fAllOk = true;\n+                        // return the current status\n+                        return fRet;\n+                    }\n+                    nIdle++;\n+                    cond.wait(lock); // wait\n+                    nIdle--;\n+                }\n+                // Decide how many work units to process now.\n+                // * Do not try to do everything at once, but aim for increasingly smaller batches so\n+                //   all workers finish approximately simultaneously.\n+                // * Try to account for idle jobs which will instantly start helping.\n+                // * Don't do batches smaller than 1 (duh), or larger than nBatchSize.\n+                nNow = std::max(1U, std::min(nBatchSize, (unsigned int)queue.size() / (nTotal + nIdle + 1)));\n+                vChecks.resize(nNow);\n+                for (unsigned int i = 0; i < nNow; i++) {\n+                     // We want the lock on the mutex to be as short as possible, so swap jobs from the global\n+                     // queue to the local batch vector instead of copying.\n+                     vChecks[i].swap(queue.back());\n+                     queue.pop_back();\n+                }\n+                // Check whether we need to do work at all\n+                fOk = fAllOk;\n+            }\n+            // execute work\n+            BOOST_FOREACH(T &check, vChecks)\n+                if (fOk)\n+                    fOk = check();\n+            vChecks.clear();\n+        } while(true);\n+    }\n+\n+public:\n+    // Create a new check queue\n+    CCheckQueue(unsigned int nBatchSizeIn) :\n+        nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n+\n+    // Worker thread\n+    void Thread() {\n+        Loop();\n+    }\n+\n+    // Wait until execution finishes, and return whether all evaluations where succesful.\n+    bool Wait() {\n+        return Loop(true);\n+    }\n+\n+    // Add a batch of checks to the queue\n+    void Add(std::vector<T> &vChecks) {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        BOOST_FOREACH(T &check, vChecks) {\n+            queue.push_back(T());\n+            check.swap(queue.back());\n+        }\n+        nTodo += vChecks.size();\n+        if (vChecks.size() == 1)\n+            condWorker.notify_one();\n+        else if (vChecks.size() > 1)\n+            condWorker.notify_all();\n+    }\n+\n+    // Shut the queue down\n+    void Quit() {\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        fQuit = true;\n+        // No need to wake the master, as he will quit automatically when all jobs are\n+        // done.\n+        condWorker.notify_all(); \n+\n+        while (nTotal > 0)\n+            condQuit.wait(lock);\n+    }\n+\n+    friend class CCheckQueueControl<T>;\n+};\n+\n+/** RAII-style controller object for a CCheckQueue that guarantees the passed\n+ *  queue is finished before continuing.\n+ */\n+template<typename T> class CCheckQueueControl {\n+private:\n+    CCheckQueue<T> *pqueue;\n+    bool fDone;\n+\n+public:\n+    CCheckQueueControl(CCheckQueue<T> *pqueueIn) : pqueue(pqueueIn), fDone(false) {\n+        // passed queue is supposed to be unused, or NULL\n+        if (pqueue != NULL) {\n+            assert(pqueue->nTotal == pqueue->nIdle);\n+            assert(pqueue->nTodo == 0);\n+            assert(pqueue->fAllOk == true);\n+        }\n+    }\n+\n+    bool Wait() {\n+        if (pqueue == NULL)\n+            return true;\n+        bool fRet = pqueue->Wait();\n+        fDone = true;\n+        return fRet;\n+    }\n+\n+    void Add(std::vector<T> &vChecks) {\n+        if (pqueue != NULL)\n+            pqueue->Add(vChecks);\n+    }\n+\n+    ~CCheckQueueControl() {\n+        if (!fDone)\n+            Wait();\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "087750cf9052085ed0625cdb3d78893f2b09580c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -84,6 +84,10 @@ void Shutdown(void* parg)\n         fShutdown = true;\n         nTransactionsUpdated++;\n         bitdb.Flush(false);\n+        {\n+            LOCK(cs_main);\n+            ThreadScriptCheckQuit();\n+        }\n         StopNode();\n         {\n             LOCK(cs_main);\n@@ -303,6 +307,7 @@ std::string HelpMessage()\n         \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\" +\n         \"  -reindex               \" + _(\"Rebuild blockchain index from current blk000??.dat files\") + \"\\n\" +\n+        \"  -par=N                 \" + _(\"Set the number of script verification threads (1-16, 0=auto, default: 0)\") + \"\\n\" +\n \n         \"\\n\" + _(\"Block creation options:\") + \"\\n\" +\n         \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\" +\n@@ -484,6 +489,15 @@ bool AppInit2()\n     fDebug = GetBoolArg(\"-debug\");\n     fBenchmark = GetBoolArg(\"-benchmark\");\n \n+    // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n+    nScriptCheckThreads = GetArg(\"-par\", 0);\n+    if (nScriptCheckThreads == 0)\n+        nScriptCheckThreads = boost::thread::hardware_concurrency();\n+    if (nScriptCheckThreads <= 1) \n+        nScriptCheckThreads = 0;\n+    else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n+        nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;\n+\n     // -debug implies fDebug*\n     if (fDebug)\n         fDebugNet = true;\n@@ -579,6 +593,12 @@ bool AppInit2()\n     if (fDaemon)\n         fprintf(stdout, \"Bitcoin server starting\\n\");\n \n+    if (nScriptCheckThreads) {\n+        printf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n+        for (int i=0; i<nScriptCheckThreads-1; i++)\n+            NewThread(ThreadScriptCheck, NULL);\n+    }\n+\n     int64 nStart;\n \n     // ********************************************************* Step 5: verify database integrity"
      },
      {
        "sha": "18a1c59e14c6c9d0ba90ede86901378b6b5937c9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 4,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -10,6 +10,7 @@\n #include \"net.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n+#include \"checkqueue.h\"\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -40,6 +41,7 @@ uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n int64 nTimeBestReceived = 0;\n+int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n bool fBenchmark = false;\n@@ -1360,10 +1362,13 @@ bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned in\n     return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n }\n \n-bool CTransaction::CheckInputs(CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags) const\n+bool CTransaction::CheckInputs(CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks) const\n {\n     if (!IsCoinBase())\n     {\n+        if (pvChecks)\n+            pvChecks->reserve(vin.size());\n+\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!HaveInputs(inputs))\n@@ -1416,8 +1421,12 @@ bool CTransaction::CheckInputs(CCoinsViewCache &inputs, bool fScriptChecks, unsi\n                 const CCoins &coins = inputs.GetCoins(prevout.hash);\n \n                 // Verify signature\n-                if (!VerifySignature(coins, *this, i, flags, 0))\n-                    return DoS(100,error(\"CheckInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n+                CScriptCheck check(coins, *this, i, flags, 0);\n+                if (pvChecks) {\n+                    pvChecks->push_back(CScriptCheck());\n+                    check.swap(pvChecks->back());\n+                } else if (!check())\n+                    return DoS(100,false);\n             }\n         }\n     }\n@@ -1567,6 +1576,19 @@ void static FlushBlockFile()\n \n bool FindUndoPos(int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n+\n+void ThreadScriptCheck(void*) {\n+    vnThreadsRunning[THREAD_SCRIPTCHECK]++;\n+    RenameThread(\"bitcoin-scriptch\");\n+    scriptcheckqueue.Thread();\n+    vnThreadsRunning[THREAD_SCRIPTCHECK]--;\n+}\n+\n+void ThreadScriptCheckQuit() {\n+    scriptcheckqueue.Quit();\n+}\n+\n bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n@@ -1607,6 +1629,8 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n \n     CBlockUndo blockundo;\n \n+    CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n+\n     int64 nStart = GetTimeMicros();\n     int64 nFees = 0;\n     int nInputs = 0;\n@@ -1638,8 +1662,10 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n \n             nFees += tx.GetValueIn(view)-tx.GetValueOut();\n \n-            if (!tx.CheckInputs(view, fScriptChecks, fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE))\n+            std::vector<CScriptCheck> vChecks;\n+            if (!tx.CheckInputs(view, fScriptChecks, fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, nScriptCheckThreads ? &vChecks : NULL))\n                 return false;\n+            control.Add(vChecks);\n         }\n \n         CTxUndo txundo;\n@@ -1656,6 +1682,12 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n     if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees));\n \n+    if (!control.Wait())\n+        return DoS(100, false);\n+    int64 nTime2 = GetTimeMicros() - nStart;\n+    if (fBenchmark)\n+        printf(\"- Verify %u txins: %.2fms (%.3fms/txin)\\n\", nInputs - 1, 0.001 * nTime2, nInputs <= 1 ? 0 : 0.001 * nTime2 / (nInputs-1));\n+\n     if (fJustCheck)\n         return true;\n "
      },
      {
        "sha": "3b7621959abea1529b98bca5d45f25ce81be68c1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -53,6 +53,8 @@ inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONE\n static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+/** Maximum number of script-checking threads allowed */\n+static const int MAX_SCRIPTCHECK_THREADS = 16;\n #ifdef USE_UPNP\n static const int fHaveUPnP = true;\n #else\n@@ -90,6 +92,7 @@ extern unsigned char pchMessageStart[4];\n extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;\n+extern int nScriptCheckThreads;\n extern unsigned int nCoinCacheSize;\n \n // Settings\n@@ -107,6 +110,7 @@ class CCoins;\n class CTxUndo;\n class CCoinsView;\n class CCoinsViewCache;\n+class CScriptCheck;\n \n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWallet* pwalletIn);\n@@ -136,6 +140,10 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n /** Run the importer thread, which deals with reindexing, loading bootstrap.dat, and whatever is passed to -loadblock */\n void ThreadImport(void *parg);\n+/** Run an instance of the script checking thread */\n+void ThreadScriptCheck(void* parg);\n+/** Stop the script checking threads */\n+void ThreadScriptCheckQuit();\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n /** Generate a new block, without valid proof-of-work */\n@@ -633,8 +641,11 @@ class CTransaction\n     bool HaveInputs(CCoinsViewCache &view) const;\n \n     // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n-    // This does not modify the UTXO set\n-    bool CheckInputs(CCoinsViewCache &view, bool fScriptChecks = true, unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC) const;\n+    // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n+    // instead of being performed inline.\n+    bool CheckInputs(CCoinsViewCache &view, bool fScriptChecks = true,\n+                     unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC,\n+                     std::vector<CScriptCheck> *pvChecks = NULL) const;\n \n     // Apply the effects of this transaction on the UTXO set represented by view\n     bool UpdateCoins(CCoinsViewCache &view, CTxUndo &txundo, int nHeight, const uint256 &txhash) const;"
      },
      {
        "sha": "81caf541b0ef04b540df91146f15e959bfc7469f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -82,6 +82,7 @@ enum threadId\n     THREAD_DUMPADDRESS,\n     THREAD_RPCHANDLER,\n     THREAD_IMPORT,\n+    THREAD_SCRIPTCHECK,\n \n     THREAD_MAX\n };"
      },
      {
        "sha": "f75b762f1fc9f3df48fa895acd57da162918eaf0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "patch": "@@ -33,9 +33,13 @@ struct TestingSetup {\n         pwalletMain = new CWallet(\"wallet.dat\");\n         pwalletMain->LoadWallet(fFirstRun);\n         RegisterWallet(pwalletMain);\n+        nScriptCheckThreads = 3;\n+        for (int i=0; i < nScriptCheckThreads-1; i++)\n+            NewThread(ThreadScriptCheck, NULL);\n     }\n     ~TestingSetup()\n     {\n+        ThreadScriptCheckQuit();\n         delete pwalletMain;\n         pwalletMain = NULL;\n         delete pcoinsTip;"
      }
    ]
  },
  {
    "sha": "ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjBmNDIyNTE5ZGU0YTNjZTQ3ZDkyM2U1ZjhmOTBjZDEyMzQ5ZjNl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-12-08T21:49:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-08T01:00:59Z"
      },
      "message": "Remove contention on signature cache during block validation\n\nSince block validation happens in parallel, multiple threads may be\naccessing the signature cache simultaneously. To prevent contention:\n* Turn the signature cache lock into a shared mutex\n* Make reading from the cache only acquire a shared lock\n* Let block validations not store their results in the cache",
      "tree": {
        "sha": "ba208bc61340c76ceba465a05afe1391ea217086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba208bc61340c76ceba465a05afe1391ea217086"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cae832e6f56c6abe89b3bf05d1f176c2a7c913"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "92be0cfd3849808e93a8fb71e262b8cd3a5341d5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
        "patch": "@@ -1627,6 +1627,9 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n     int64 nBIP16SwitchTime = 1333238400;\n     bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n \n+    unsigned int flags = SCRIPT_VERIFY_NOCACHE |\n+                         (fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -1663,7 +1666,7 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n             nFees += tx.GetValueIn(view)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!tx.CheckInputs(view, fScriptChecks, fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!tx.CheckInputs(view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n                 return false;\n             control.Add(vChecks);\n         }"
      },
      {
        "sha": "70adf1f9dc7201b4bf06147cc146e5c5bf747483",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
        "patch": "@@ -16,7 +16,7 @@ using namespace boost;\n #include \"sync.h\"\n #include \"util.h\"\n \n-bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n \n \n \n@@ -1007,7 +1007,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                     bool fSuccess = (!fStrictEncodings || (IsCanonicalSignature(vchSig) && IsCanonicalPubKey(vchPubKey)));\n                     if (fSuccess)\n-                        fSuccess = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n+                        fSuccess = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -1069,7 +1069,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         // Check signature\n                         bool fOk = (!fStrictEncodings || (IsCanonicalSignature(vchSig) && IsCanonicalPubKey(vchPubKey)));\n                         if (fOk)\n-                            fOk = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n+                            fOk = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n \n                         if (fOk) {\n                             isig++;\n@@ -1199,13 +1199,13 @@ class CSignatureCache\n      // sigdata_type is (signature hash, signature, public key):\n     typedef boost::tuple<uint256, std::vector<unsigned char>, std::vector<unsigned char> > sigdata_type;\n     std::set< sigdata_type> setValid;\n-    CCriticalSection cs_sigcache;\n+    boost::shared_mutex cs_sigcache;\n \n public:\n     bool\n     Get(uint256 hash, const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& pubKey)\n     {\n-        LOCK(cs_sigcache);\n+        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n \n         sigdata_type k(hash, vchSig, pubKey);\n         std::set<sigdata_type>::iterator mi = setValid.find(k);\n@@ -1223,7 +1223,7 @@ class CSignatureCache\n         int64 nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n         if (nMaxCacheSize <= 0) return;\n \n-        LOCK(cs_sigcache);\n+        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n \n         while (static_cast<int64>(setValid.size()) > nMaxCacheSize)\n         {\n@@ -1246,7 +1246,7 @@ class CSignatureCache\n };\n \n bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode,\n-              const CTransaction& txTo, unsigned int nIn, int nHashType)\n+              const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)\n {\n     static CSignatureCache signatureCache;\n \n@@ -1271,7 +1271,9 @@ bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CSc\n     if (!key.Verify(sighash, vchSig))\n         return false;\n \n-    signatureCache.Set(sighash, vchSig, vchPubKey);\n+    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n+        signatureCache.Set(sighash, vchSig, vchPubKey);\n+\n     return true;\n }\n \n@@ -1761,7 +1763,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CTransaction& txTo, u\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0))\n+            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "ae316b33c44291c31b5d0dc8c7dde5943f61a30e",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef0f422519de4a3ce47d923e5f8f90cd12349f3e/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=ef0f422519de4a3ce47d923e5f8f90cd12349f3e",
        "patch": "@@ -32,6 +32,7 @@ enum\n     SCRIPT_VERIFY_NONE      = 0,\n     SCRIPT_VERIFY_P2SH      = (1U << 0),\n     SCRIPT_VERIFY_STRICTENC = (1U << 1),\n+    SCRIPT_VERIFY_NOCACHE   = (1U << 2),\n };\n \n enum txnouttype"
      }
    ]
  }
]