jtimon,2015-12-08T21:43:24Z,"Since #6312 has gne through a lot of review already, I would prefer that this branch builds on top of that to more easily review the differences. We can always squash things before merging for a cleaner history.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163026874,163026874,
morcos,2015-12-08T21:55:09Z,~~@jtimon That was the first thing I created: maaku@sequencenumbers...morcos:refactorb~~\n(misunderstanding of what he was asking)\n\nBut I think #7184 is a cleaner implementation of BIP 68 on its own.\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163030416,163030416,
jtimon,2015-12-08T22:05:48Z,"as said squashes to clean up the history can happen after review.\nAs mentiooned before, I still don't see how maaku@sequencenumbers...morcos achieves its alleged goal.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163032934,163032934,
morcos,2015-12-09T02:52:55Z,rebased\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163089747,163089747,
NicolasDorier,2015-12-09T03:54:32Z,"I think this PR is too complicated for fixing the perf issue, if https://github.com/NicolasDorier/bitcoin/compare/67646e099c13...b2a27a71823b is correct, it would be simpler to review. Regardless if we use #7184 or not.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163096743,163096743,
jtimon,2015-12-09T05:28:22Z,"@NicolasDorier I agree. Maybe more importantly, all the extra complexity is outside of the consensus critical code. Maybe you should consider opening a PR for your solution?\nIn this thread we should focus on the code of this PR. We have #7176 to discuss the different solutions more generally.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163114806,163114806,
jtimon,2015-12-09T06:23:24Z,"Is this supposed to fix the performance issues of CNB without touching miner.cpp, or are this just preparations without the actual performance solution?\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163123165,163123165,
morcos,2015-12-09T11:19:22Z,@jtimon This fixes the performance issues by never introducing them into CNB in the first place.  #7184 on its own has performance issues with reorgs.\n\n@NicolasDorier You think just the second commit here is significantly more complicated than your final commit in #7190?\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163192224,163192224,
morcos,2015-12-09T12:10:49Z,squashed a bug fix (wasn't actually skipping the work it was supposed to)\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163205428,163205428,
NicolasDorier,2015-12-09T15:09:20Z,"I like the fact you separate CheckLockTime (if you rename IsFinalTx) and CheckSequenceLockTime, but I really don't like the LockPoints structure. I'm still reviewing if commit 2 might not result in mempool finality corruption, I really don't find it obvious.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163284432,163284432,
NicolasDorier,2015-12-09T15:18:47Z,btw can you rename IsFinalTx to CheckLockTime as you said you wanted to do ?\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163287172,163287172,
morcos,2015-12-09T16:14:02Z,@NicolasDorier My approach and yours are not that different.  \n- You are storing the hash at which the calculation of the sequence lock time and height happened and using the fact that if that hash is still on the chain that the calculation must still be valid and the comparison to the current time and height must be valid because they can not have gone below what they were at the hash you saved.,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163309935,163309935,
NicolasDorier,2015-12-09T16:54:20Z,"Ok I'm getting it. Seems like it can work.\nYou forget to check SequenceLockTime in rpcwallet.cpp, wallet.cpp.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163322411,163322411,
morcos,2015-12-09T18:19:37Z,"@NicolasDorier I left that out on purpose.  See #7184.   It might need to be added back in but it wasn't really clear to me how that code ever gets hit.  I've tried asking about it on IRC a couple of times.   But it doesn't seem possible to me to generate a wallet tx which is sequence locked except in the event of a reorg, at which point the tx won't be in your mempool anyway.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163347696,163347696,
NicolasDorier,2015-12-10T06:23:15Z,"Ok, I don't really understand those implication yet.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163513582,163513582,
NicolasDorier,2015-12-10T06:24:48Z,Will you rename to IsFinalTx to CheckLockTime and CheckSequenceLocks to CheckSequenceLockTime ?\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-163513754,163513754,
morcos,2016-01-14T22:35:14Z,Updated for the updated #7184 and took @sdaftuar's suggestion\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-171803634,171803634,
morcos,2016-02-16T20:59:33Z,This has been rebased and updated now that #7184 is merged.\n\n@laanwj Ideally this would be backported to the 0.12 branch when the soft fork for BIP68 code is merged.  Otherwise the code for reorgs could be particularly slow.\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-184872758,184872758,
NicolasDorier,2016-02-16T22:07:50Z,"I remember having done this remark already: and I was still not too much convinced by your response, I'm saying it here so other reviewer can dig in about it:\n\nMy main doubt is that there is a case where the nHeight/nTime of LockPoint should be invalidated but is not. \nImagine you have a tx spending unconf coin C1 when tip is B1 and height X. MaxInputHash would be equals to hash(B1).\n\nNow if ",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-184894966,184894966,
morcos,2016-02-17T03:18:37Z,"@NicolasDorier Yes sorry I hate the way those get lost.\nHere is your old comment: https://github.com/morcos/bitcoin/commit/f8b6614#commitcomment-15979134\n\nI ended up punting on building the infrastructure to accept sequence locked txs that were not yet final.  I have the code written to do it, but it requires slight changes to the BIP 68 code and I didn't want to hold up merger for something of",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-184995331,184995331,
NicolasDorier,2016-02-17T06:11:42Z,"Good explanation, seems ok to me, I'll test a bit though.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-185043617,185043617,
morcos,2016-02-17T16:28:14Z,just changed a couple words in the comment\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-185283700,185283700,
NicolasDorier,2016-02-18T03:41:16Z,you may optimize even more: Only take the heights which correspond to an input who has a LockSequence for maxInputHeight calculation.\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-185529352,185529352,
morcos,2016-02-18T18:28:03Z,@NicolasDorier that's already done.  CalculateSequenceLocks already sets heights for non sequence locked inputs to 0.\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-185848626,185848626,
sdaftuar,2016-02-26T18:02:44Z,Code review ACK (apart from comment nit).  Testing...\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-189399693,189399693,
sdaftuar,2016-02-26T18:44:27Z,Tested ACK (hacked up some extra tests to `bip68-sequence.py` to exercise the reorg logic) 5912944f4d5eeb4078a5bb658ad09ef7eabbf53b\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-189419365,189419365,
btcdrak,2016-02-26T19:12:18Z,@sdaftuar Would you mind publishing/PRing those extra tests? Maybe they could be added to this PR?\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-189433886,189433886,
morcos,2016-02-29T21:30:36Z,comment nit addressed\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-190405240,190405240,
sipa,2016-03-05T05:24:29Z,Kicked Travis\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-192580900,192580900,
odinTy,2016-03-05T23:31:09Z,If I've done something wrong it was by mistake I'm new and trying to learn. Sorry if I messed up\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-192759045,192759045,
odinTy,2016-03-05T23:33:54Z,Please explain all my mistakes please as this should help the future \n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-192759990,192759990,
btcdrak,2016-03-15T11:09:50Z,utACK ddb4dab\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-196767877,196767877,
laanwj,2016-03-16T11:30:40Z,> If I've done something wrong it was by mistake I'm new and trying to learn. Sorry if I messed up\n\nWhat happened exactly? If you have specific questions about development and review process feel free to mail me on laanwj@gmail.com\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197275412,197275412,
laanwj,2016-03-16T15:58:14Z,ut/code review ACK ddb4dab\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197396105,197396105,
jtimon,2016-03-16T16:12:35Z,"Concept ACK, started reviewing more deeply.\n",https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197402954,197402954,
morcos,2016-03-16T16:39:50Z,@laanwj ok done.   If you think this has sufficient review I can squash.\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197415991,197415991,
morcos,2016-03-16T20:16:05Z,Squashed from e6cc06b which contained the switch to CBlockIndex*'s\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197527266,197527266,
laanwj,2016-03-16T20:19:58Z,utACK 982670c\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197528824,197528824,
btcdrak,2016-03-16T20:56:09Z,@laanwj this PR has been backported in 7543.\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-197545742,197545742,
MarcoFalke,2016-04-25T13:35:10Z,Removed 'needs backport' label per previous comment\n,https://github.com/bitcoin/bitcoin/pull/7187#issuecomment-214330431,214330431,
sipa,2016-03-05T22:51:46Z,I believe it suffices to turn this into a const reference.\n,https://github.com/bitcoin/bitcoin/pull/7187#discussion_r55129392,55129392,src/txmempool.h
sipa,2016-03-05T22:52:20Z,Make input argument const?\n,https://github.com/bitcoin/bitcoin/pull/7187#discussion_r55129397,55129397,src/txmempool.cpp
laanwj,2016-03-16T16:04:25Z,"Did you consider storing a CBlockIndex\* here instead of a uint256? (may be a stupid suggestion, but from what I see the only thing you do is look it back up in mapBlockIndex)\n",https://github.com/bitcoin/bitcoin/pull/7187#discussion_r56361728,56361728,src/txmempool.h
morcos,2016-03-16T16:16:18Z,"hmm...  i feel like we did consider that, but i can't see now why that wouldn't work.  maybe it didn't work with some previous iteration.   it makes sense to switch to that if we can't see any problems with it.\n",https://github.com/bitcoin/bitcoin/pull/7187#discussion_r56363899,56363899,src/txmempool.h
laanwj,2016-03-16T16:21:25Z,"right, I don't see any problems with it at least: as I see it it'd simplify the code, reduce storage requirement for LockPoints, and makes the same (valid) assumption that a block index entry never goes away\n",https://github.com/bitcoin/bitcoin/pull/7187#discussion_r56364845,56364845,src/txmempool.h
