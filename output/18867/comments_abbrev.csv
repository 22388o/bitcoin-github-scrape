jb55,2020-05-04 15:42:21,"nice, Concept ACK",https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-623541065,623541065,
laanwj,2020-05-13 19:39:53,ACK https://github.com/bitcoin/bitcoin/pull/18867/commits/b5f971a16ecbfcb0487b274f09516f17dfa19ab6,https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-628204316,628204316,
practicalswift,2020-05-18 20:12:48,@MarcoFalke Would you mind reviewing? :),https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-630410609,630410609,
practicalswift,2020-05-22 14:50:57,Rebased! :),https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-632732323,632732323,
practicalswift,2020-05-25 10:07:40,@MarcoFalke Thanks a lot for a very good review! All feedback addressed :),https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633494293,633494293,
MarcoFalke,2020-05-26 11:08:35,ACK f9b22e3bdb,https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633959421,633959421,
MarcoFalke,2020-05-26 11:09:25,"ACK f9b22e3bdb ðŸ“«\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK f9b22e3bdb ðŸ“«\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhWqQv/XMjZcKGe3IffrT2bXwemMhi9fKPwO9pJcYGnW6+V/8iHWrTF44+knH5Z\nk+gO6xywZRkw2LwHFQ2DRK8YYQex+AtAK4gsMu13bGZn6NoJToq",https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633959766,633959766,
MarcoFalke,2020-05-04 13:22:40,"```suggestion\n                if (e.what() != std::string{""Attempted to overwrite an unspent coin (when possible_overwrite is false)""}) raise e;\n```\n\nCould `expected_code_path` be removed with this fixup? If yes, that seems preferable, as it is less code.",https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419431163,419431163,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-04 13:24:15,"```suggestion\n            Coin move_to;\n```",https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419432165,419432165,src/test/fuzz/coins_view.cpp
practicalswift,2020-05-04 13:36:09,The current formulation is intentional. The problem with doing it the way you suggest is that the `throw;` line (I assume `raise e;` was a typo :)) will not be covered. That would be bad for `src/test/fuzz/` where I want literally 100% line coverage to be able to see fuzzing harness gaps where our inputs are not able to reach :),https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419440744,419440744,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 14:50:16,any reason to use static cast here? this seems to silence any sanitizers that check for overflow if the cast value was not 0 or 1,https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429644533,429644533,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:05:08,"```suggestion\n                coins_view_cache.AddCoin(random_out_point, std::move(coin), possible_overwrite);\n```",https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645870,429645870,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:05:44,"```suggestion\n                    assert(possible_overwrite);\n```\n\nCould make this check a bit stricter?",https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645933,429645933,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:15:02,What is this doing? How is this different from the fuzz engine running case 6 -> case 9?,https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429646754,429646754,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:20:14,"Note to myself only: I thought about putting a more strict assert here, but the exception doesn't give any hints which coin failed, so I don't think this is possible for now.",https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647249,429647249,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:28:26,`                    assert(possible_overwrite);`,https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647975,429647975,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:30:45,"```suggestion\n            CAmount tx_fee_out;\n```",https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648160,429648160,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-24 15:32:01,can `assert(MoneyRange(tx_fee_out));` when check was successful?,https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648269,429648269,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-26 11:05:48,why is this needed?,https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430331596,430331596,src/test/fuzz/coins_view.cpp
MarcoFalke,2020-05-26 11:08:11,Are you saying that the only exception that is allowed to be thrown is the one that is caught by the error string? Fair enough.,https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430332810,430332810,src/test/fuzz/coins_view.cpp
practicalswift,2020-05-26 11:20:38,Exactly :),https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430338853,430338853,src/test/fuzz/coins_view.cpp
