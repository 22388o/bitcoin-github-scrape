[
  {
    "sha": "5f35cdf66bba56f7432ddde80c41c5902063c0ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjM1Y2RmNjZiYmE1NmY3NDMyZGRkZTgwYzQxYzU5MDIwNjNjMGFl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-02T20:13:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-23T14:37:26Z"
      },
      "message": "[RPC] Refactor getpeerinfo RPC to call helper function NodeStatsToJSON().\n\nThis commit refactors getpeerinfo() to call a helper function\nNodeStatsToJSON() to build a JSON object with peer information.",
      "tree": {
        "sha": "ed6217ddb7ba6ad8d9e5acbe988aaaf29f61bb89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed6217ddb7ba6ad8d9e5acbe988aaaf29f61bb89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f35cdf66bba56f7432ddde80c41c5902063c0ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f35cdf66bba56f7432ddde80c41c5902063c0ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f35cdf66bba56f7432ddde80c41c5902063c0ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f35cdf66bba56f7432ddde80c41c5902063c0ae/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab28b5b52702a81966416d68b04e5bde73b2c4d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab28b5b52702a81966416d68b04e5bde73b2c4d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab28b5b52702a81966416d68b04e5bde73b2c4d4"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 67,
      "deletions": 55
    },
    "files": [
      {
        "sha": "17a064e0504b1e9a811b2ec064d1774b58e083f9",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 55,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f35cdf66bba56f7432ddde80c41c5902063c0ae/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f35cdf66bba56f7432ddde80c41c5902063c0ae/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5f35cdf66bba56f7432ddde80c41c5902063c0ae",
        "patch": "@@ -65,6 +65,72 @@ static UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats state_stats;\n+    bool got_state_stats = GetNodeStateStats(stats.nodeid, state_stats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty())) {\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    }\n+    if (stats.addrBind.IsValid()) {\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    }\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0) {\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    }\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6) {\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    }\n+    if (stats.dPingWait > 0.0) {\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    }\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (got_state_stats) {\n+        obj.push_back(Pair(\"banscore\", state_stats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", state_stats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", state_stats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : state_stats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue bytes_sent_per_message(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0) {\n+            bytes_sent_per_message.push_back(Pair(i.first, i.second));\n+        }\n+    }\n+    obj.push_back(Pair(\"bytessent_per_msg\", bytes_sent_per_message));\n+\n+    UniValue bytes_recvd_per_message(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n+        if (i.second > 0) {\n+            bytes_recvd_per_message.push_back(Pair(i.first, i.second));\n+        }\n+    }\n+    obj.push_back(Pair(\"bytesrecv_per_msg\", bytes_recvd_per_message));\n+}\n+\n static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n@@ -128,61 +194,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n \n     for (const CNodeStats& stats : vstats) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.pushKV(\"id\", stats.nodeid);\n-        obj.pushKV(\"addr\", stats.addrName);\n-        if (!(stats.addrLocal.empty()))\n-            obj.pushKV(\"addrlocal\", stats.addrLocal);\n-        if (stats.addrBind.IsValid())\n-            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n-        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n-        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n-        obj.pushKV(\"lastsend\", stats.nLastSend);\n-        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n-        obj.pushKV(\"bytessent\", stats.nSendBytes);\n-        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n-        obj.pushKV(\"conntime\", stats.nTimeConnected);\n-        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n-        if (stats.dPingTime > 0.0)\n-            obj.pushKV(\"pingtime\", stats.dPingTime);\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.pushKV(\"minping\", stats.dMinPing);\n-        if (stats.dPingWait > 0.0)\n-            obj.pushKV(\"pingwait\", stats.dPingWait);\n-        obj.pushKV(\"version\", stats.nVersion);\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.pushKV(\"subver\", stats.cleanSubVer);\n-        obj.pushKV(\"inbound\", stats.fInbound);\n-        obj.pushKV(\"addnode\", stats.m_manual_connection);\n-        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n-        if (fStateStats) {\n-            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n-            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n-            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.pushKV(\"inflight\", heights);\n-        }\n-        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n-\n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.pushKV(i.first, i.second);\n-        }\n-        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n-\n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.pushKV(i.first, i.second);\n-        }\n-        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n+        NodeStatsToJSON(stats, obj);\n \n         ret.push_back(obj);\n     }"
      }
    ]
  },
  {
    "sha": "30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGJlZDllYWE5YWVkNGJhMDc2Y2IzMGJjZDczZmIzNjI5YTU5YjRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-24T19:43:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-23T14:37:26Z"
      },
      "message": "[net] Add GetNodeByID helper function.",
      "tree": {
        "sha": "bc762c4a572424e7944e7c1625b7d5bb169fdb2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc762c4a572424e7944e7c1625b7d5bb169fdb2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f35cdf66bba56f7432ddde80c41c5902063c0ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f35cdf66bba56f7432ddde80c41c5902063c0ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f35cdf66bba56f7432ddde80c41c5902063c0ae"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bb42bfb4821b40979dbfaa18259480bb980f140c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
        "patch": "@@ -2544,6 +2544,18 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n     return nNum;\n }\n \n+CNode* CConnman::GetNodeByID(NodeId id)\n+{\n+    AssertLockHeld(cs_vNodes);\n+\n+    for(CNode* pnode : vNodes) {\n+        if (id == pnode->GetId()) {\n+            return pnode;\n+        }\n+    }\n+    return nullptr;\n+}\n+\n void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n {\n     vstats.clear();\n@@ -2564,14 +2576,14 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n     }\n     return false;\n }\n+\n bool CConnman::DisconnectNode(NodeId id)\n {\n     LOCK(cs_vNodes);\n-    for(CNode* pnode : vNodes) {\n-        if (id == pnode->GetId()) {\n-            pnode->fDisconnect = true;\n-            return true;\n-        }\n+    CNode* node = GetNodeByID(id);\n+    if (node) {\n+        node->fDisconnect = true;\n+        return true;\n     }\n     return false;\n }"
      },
      {
        "sha": "a5875ae482d4ca60addd7a585afda574399b261e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
        "patch": "@@ -352,6 +352,8 @@ class CConnman\n \n     NodeId GetNewNodeId();\n \n+    CNode* GetNodeByID(NodeId id);\n+\n     size_t SocketSendData(CNode *pnode) const;\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();"
      }
    ]
  },
  {
    "sha": "4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmFlNGE0ZjYzYTZmYWRmMzczOWQ4ZTllMjZlZjk4MDlmM2Q3NWVm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-02T20:47:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-23T14:37:26Z"
      },
      "message": "[RPC] Add GetNodeStats() function for individual node.\n\nGetNodeStats() can now be called for a single node.",
      "tree": {
        "sha": "89148c60b2036995ea6c98434a7f601c22b61eec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89148c60b2036995ea6c98434a7f601c22b61eec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30bed9eaa9aed4ba076cb30bcd73fb3629a59b4a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c69c9b83289c97d2e30f159df093c62ac3d7cff7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
        "patch": "@@ -2556,6 +2556,17 @@ CNode* CConnman::GetNodeByID(NodeId id)\n     return nullptr;\n }\n \n+bool CConnman::GetNodeStats(NodeId id, CNodeStats& stats)\n+{\n+    LOCK(cs_vNodes);\n+    CNode* node = GetNodeByID(id);\n+    if (node) {\n+        node->copyStats(stats);\n+        return true;\n+    }\n+    return false;\n+}\n+\n void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n {\n     vstats.clear();\n@@ -2576,7 +2587,6 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n     }\n     return false;\n }\n-\n bool CConnman::DisconnectNode(NodeId id)\n {\n     LOCK(cs_vNodes);"
      },
      {
        "sha": "1b6b5690121f797c825e0f11a85f4ee005fd24b5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
        "patch": "@@ -271,7 +271,10 @@ class CConnman\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n     size_t GetNodeCount(NumConnections num);\n+    // Gets a vector of NodeStats objects\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n+    // Gets a single NodeStats object by NodeID\n+    bool GetNodeStats(NodeId, CNodeStats& stats);\n     bool DisconnectNode(const std::string& node);\n     bool DisconnectNode(NodeId id);\n "
      }
    ]
  },
  {
    "sha": "2a764602ea6f0779281cc1199c1a0b121591a507",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTc2NDYwMmVhNmYwNzc5MjgxY2MxMTk5YzFhMGIxMjE1OTFhNTA3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-02T20:52:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-23T14:37:26Z"
      },
      "message": "[RPC] Allow getpeerinfo to be called for a single node.\n\nThe getpeerinfo RPC can now be called for a single node by specifying the\nnode id.",
      "tree": {
        "sha": "e896c0bf3574e4a3f5e30b6aa26a69bc4ad63b88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e896c0bf3574e4a3f5e30b6aa26a69bc4ad63b88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a764602ea6f0779281cc1199c1a0b121591a507",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a764602ea6f0779281cc1199c1a0b121591a507",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a764602ea6f0779281cc1199c1a0b121591a507",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a764602ea6f0779281cc1199c1a0b121591a507/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fae4a4f63a6fadf3739d8e9e26ef9809f3d75ef"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 34,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a686420413f70d26b8533fb8c1d3a1af14df2059",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a764602ea6f0779281cc1199c1a0b121591a507/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a764602ea6f0779281cc1199c1a0b121591a507/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=2a764602ea6f0779281cc1199c1a0b121591a507",
        "patch": "@@ -127,6 +127,9 @@ Low-level RPC changes\n   `importmulti` with hex script argument). `signrawtransaction*` also still\n   works for them.\n \n+- `getpeerinfo` can now take an `id` argument to only return information about the peer with\n+  the specified id.\n+\n ### Logging\n \n - The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\")."
      },
      {
        "sha": "dfc57a260c44d4b722b3d6a04276fe3a60db4cde",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a764602ea6f0779281cc1199c1a0b121591a507/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a764602ea6f0779281cc1199c1a0b121591a507/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=2a764602ea6f0779281cc1199c1a0b121591a507",
        "patch": "@@ -151,6 +151,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"prioritisetransaction\", 2, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },\n     { \"setban\", 3, \"absolute\" },\n+    { \"getpeerinfo\", 0, \"id\" },\n     { \"setnetworkactive\", 0, \"state\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },"
      },
      {
        "sha": "9af0ed0f156ae2a06bef22089271d4117863ecc1",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a764602ea6f0779281cc1199c1a0b121591a507/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a764602ea6f0779281cc1199c1a0b121591a507/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=2a764602ea6f0779281cc1199c1a0b121591a507",
        "patch": "@@ -133,10 +133,12 @@ void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n \n static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             \"getpeerinfo\\n\"\n-            \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n+            \"\\nReturns data about connected network nodes as a json array of objects.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"         (numeric, optional) Only return information about the peer with the specified id.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -187,16 +189,28 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        NodeStatsToJSON(stats, obj);\n+        CNodeStats stats;\n \n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n+        }\n+        NodeStatsToJSON(stats, obj);\n         ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n     }\n \n     return ret;\n@@ -641,7 +655,7 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"network\",            \"getconnectioncount\",     &getconnectioncount,     {} },\n     { \"network\",            \"ping\",                   &ping,                   {} },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            {} },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            {\"id\"} },\n     { \"network\",            \"addnode\",                &addnode,                {\"node\",\"command\"} },\n     { \"network\",            \"disconnectnode\",         &disconnectnode,         {\"address\", \"nodeid\"} },\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       {\"node\"} },"
      },
      {
        "sha": "bf949e7226c955325dab989dceaab1d35676e536",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a764602ea6f0779281cc1199c1a0b121591a507/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a764602ea6f0779281cc1199c1a0b121591a507/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=2a764602ea6f0779281cc1199c1a0b121591a507",
        "patch": "@@ -96,5 +96,13 @@ def _test_getpeerinfo(self):\n         assert_equal(peer_info[0][0]['addrbind'], peer_info[1][0]['addr'])\n         assert_equal(peer_info[1][0]['addrbind'], peer_info[0][0]['addr'])\n \n+        # Check that getpeerinfo can be called for a specific peer_id\n+        peer_id = peer_info[0][0]['id']\n+        assert_equal(peer_info[0][0]['addr'], self.nodes[0].getpeerinfo(peer_id)[0]['addr'])\n+        assert_equal(peer_info[0][0]['addrbind'], self.nodes[0].getpeerinfo(peer_id)[0]['addrbind'])\n+\n+        # Check that getpeerinfo fails for an invalid peer_id\n+        assert_raises_rpc_error(-5, \"not found\", self.nodes[0].getpeerinfo, 5000)\n+\n if __name__ == '__main__':\n     NetTest().main()"
      }
    ]
  },
  {
    "sha": "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODA3ZDk1OWQ1YmE2NGFkNmJkY2E3NmFkYmFkODM0OGE4ZWEyYTNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-02T20:52:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-23T14:37:26Z"
      },
      "message": "[RPC] Add updatepeer RPC.\n\nThis commit adds an updatepeer RPC for updating a single peer node.\n\nCurrently, updatepeer can be used to update the whitelisting and\nmanual_connection settings for the node. It could potentially be\nextended in future to allow updating other attributes of the peer node.",
      "tree": {
        "sha": "7f8c40a0475690d7d64484f3aa0dcc3841ea06e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f8c40a0475690d7d64484f3aa0dcc3841ea06e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a764602ea6f0779281cc1199c1a0b121591a507",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a764602ea6f0779281cc1199c1a0b121591a507",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a764602ea6f0779281cc1199c1a0b121591a507"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 101,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2c1f5fcc94081d32678b7796f137679f7e7061f5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
        "patch": "@@ -130,6 +130,8 @@ Low-level RPC changes\n - `getpeerinfo` can now take an `id` argument to only return information about the peer with\n   the specified id.\n \n+- `updatepeer` can be used to change the `whitelist` and `manual_connection` settings for a peer node.\n+\n ### Logging\n \n - The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\")."
      },
      {
        "sha": "1f89c230870d93a0dfb44d173ae7a7ff0fc3fe9f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
        "patch": "@@ -2598,6 +2598,28 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n+bool CConnman::SetWhitelisted(NodeId id, bool fWhitelisted)\n+{\n+    LOCK(cs_vNodes);\n+    CNode* node = GetNodeByID(id);\n+    if (node) {\n+        node->fWhitelisted = fWhitelisted;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CConnman::SetManualConnection(NodeId id, bool manual)\n+{\n+    LOCK(cs_vNodes);\n+    CNode* node = GetNodeByID(id);\n+    if (node) {\n+        node->m_manual_connection = manual;\n+        return true;\n+    }\n+    return false;\n+}\n+\n void CConnman::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);"
      },
      {
        "sha": "56e99233e6a8ac847553b051e8ddf82dfb611fcc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
        "patch": "@@ -278,6 +278,9 @@ class CConnman\n     bool DisconnectNode(const std::string& node);\n     bool DisconnectNode(NodeId id);\n \n+    bool SetWhitelisted(NodeId id, bool fWhitelisted);\n+    bool SetManualConnection(NodeId id, bool manual);\n+\n     ServiceFlags GetLocalServices() const;\n \n     //!set the max outbound target in bytes"
      },
      {
        "sha": "34c9803ad98514038e4a172ac75711b98111c0b8",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
        "patch": "@@ -152,6 +152,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setban\", 2, \"bantime\" },\n     { \"setban\", 3, \"absolute\" },\n     { \"getpeerinfo\", 0, \"id\" },\n+    { \"updatepeer\", 0, \"id\" },\n+    { \"updatepeer\", 1, \"whitelisted\" },\n+    { \"updatepeer\", 2, \"manual_connection\" },\n     { \"setnetworkactive\", 0, \"state\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },"
      },
      {
        "sha": "fba68add071400954d66e81a0cc07023d83da98f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 2,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
        "patch": "@@ -135,8 +135,8 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getpeerinfo\\n\"\n-            \"\\nReturns data about connected network nodes as a json array of objects.\\n\"\n+            \"getpeerinfo \\\"id\\\"\\n\"\n+            \"\\nReturns data about connected network nodes as a json array of objects\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"id\\\"         (numeric, optional) Only return information about the peer with the specified id.\\n\"\n             \"\\nResult:\\n\"\n@@ -216,6 +216,55 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network peer (debug method).\\n\"\n+            \"\\nReturns updated information about the peer. See the help text for getpeerinfo for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"                (string, required) The peer id (see getpeerinfo for a list of peers with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the peer is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the peer was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n+\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int node_id = request.params[0].get_int();\n+\n+    CNodeStats stats;\n+    if (!g_connman->GetNodeStats(node_id, stats)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %d not found\", node_id));\n+    }\n+\n+    if (!request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(node_id, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update peer whitelisting\");\n+        }\n+    }\n+\n+    if (!request.params[2].isNull()) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VBOOL);\n+        if (!g_connman->SetManualConnection(node_id, request.params[2].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update peer manual_connection\");\n+        }\n+    }\n+\n+    g_connman->GetNodeStats(node_id, stats);\n+\n+    UniValue entry(UniValue::VOBJ);\n+    NodeStatsToJSON(stats, entry);\n+    return entry;\n+}\n+\n static UniValue addnode(const JSONRPCRequest& request)\n {\n     std::string strCommand;\n@@ -665,6 +714,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"listbanned\",             &listbanned,             {} },\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n+    { \"hidden\",             \"updatepeer\",             &updatepeer,             {\"id\", \"whitelisted\", \"manual_connection\"} },\n };\n \n void RegisterNetRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "a357dcaaa0442a64a8507cfc437bba0fcdb47b50",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7807d959d5ba64ad6bdca76adbad8348a8ea2a3d/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
        "patch": "@@ -28,6 +28,7 @@ def run_test(self):\n         self._test_getnetworkinginfo()\n         self._test_getaddednodeinfo()\n         self._test_getpeerinfo()\n+        self._test_updatepeer()\n \n     def _test_connection_count(self):\n         # connect_nodes_bi connects each node to the other\n@@ -104,5 +105,23 @@ def _test_getpeerinfo(self):\n         # Check that getpeerinfo fails for an invalid peer_id\n         assert_raises_rpc_error(-5, \"not found\", self.nodes[0].getpeerinfo, 5000)\n \n+\n+    def _test_updatepeer(self):\n+        self.log.info(\"Test updatepeer\")\n+\n+        # whitelist should be false, manual conection should be true\n+        peer_info = self.nodes[0].getpeerinfo()[0]\n+        assert not peer_info['whitelisted']\n+        assert peer_info['addnode']\n+\n+        # Update properties and verify that they've changed\n+        self.nodes[0].updatepeer(peer_info['id'], True, False)\n+        peer_info = self.nodes[0].getpeerinfo()[0]\n+        assert peer_info['whitelisted']\n+        assert not peer_info['addnode']\n+\n+        # Check that updatepeer fails for an invalid peer_id\n+        assert_raises_rpc_error(-5, \"not found\", self.nodes[0].updatepeer, 5000)\n+\n if __name__ == '__main__':\n     NetTest().main()"
      }
    ]
  }
]