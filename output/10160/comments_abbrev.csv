theuni,2017-04-06T18:05:47Z,"I'm not sure I like the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly. The whitelist side-effects are especially hazy, see the brief discussion here: https://github.com/bitcoin/bitcoin/pull/10051#issuecomment-290622674.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292258826,292258826,
jonasschnelli,2017-04-06T18:26:31Z,"@jnewbery:\nCan you elaborate the use-case for `disconnect`? IMO `setban` provides a similar interface, with disconnecting & banning for a specific timespan (`1h`, etc.) because, a pure `disconnect` does not prevent the peer from a direct re-connect.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265018,292265018,
jonasschnelli,2017-04-06T18:27:34Z,Ah... an there is already the `disconnectnode` RPC call.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265363,292265363,
jnewbery,2017-04-06T20:22:37Z,"@jonasschnelli see #2729 and #6271 for history of the `disconnectnode` RPC. It's also useful in testing to be able to control the topology of the test nodes.\n\n@theuni - I agree that whitelisting is a mess and should be broken out into bits for controlling individual behaviours. Hence my original comment: ""I have a feeling we may want to make the whitelisting behaviour more granular and I don't",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292305200,292305200,
jnewbery,2017-04-07T20:57:08Z,"Closing in favour of #10143 for the immediate need (disconnect node by id), but I think this could still be a useful RPC in the future.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292649747,292649747,
jnewbery,2017-10-26T22:19:00Z,"Reopening with just the ability to update:\n\n- `fWhitelisted`\n- `m_manual_connection`\n\nThe net_processing functionality for the v0.15.0.2 PRs is disabled for manual connections, so this PR could be helpful for testing those changes.\n\n@sdaftuar ",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339817507,339817507,
jnewbery,2017-10-27T14:06:33Z,Thanks for the review @promag . I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339981381,339981381,
NicolasDorier,2017-10-27T14:32:40Z,whitelisting via rpc?? BIG BIG concept ACK. I am excited. It will make configuration of services depending on Bitcoin Core RPC and P2P so much easier.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339988630,339988630,
jnewbery,2017-10-27T19:43:49Z,@promag nits addressed in latest commit.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340067518,340067518,
NicolasDorier,2017-10-31T19:36:38Z,I agree with @promag `updatepeer id setting value (setting value ...)` would be easier to extend later.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340882821,340882821,
jnewbery,2017-10-31T22:40:00Z,"> Nit, how about updatepeer id setting value (setting value ...)\n\nThis is a different scheme from all of the existing RPCs. I expect that there would need to be changes to the rpc framework to make this work.\n\nIt doesn't make sense to me have a completely different scheme for just this RPC method, since we already have named arguments.\n\nIf you disagree, perhaps you could implement the ",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340928560,340928560,
NicolasDorier,2017-11-02T00:59:09Z,"@jnewbery how so? This is just 3 differents parameters of 3 strings.\n\nThe way you are doing now, if there is like 60 settings for one peer, we will have 60 parameters to this function. This does not seem very maintainable. In such case even  `updatewhitelist id true` would be better. We would have 60 functions, which is still better than 60 parameters.\n",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-341287363,341287363,
promag,2017-11-02T01:15:55Z,"> This is designed to be called using named arguments, but due to the RPC infrastructure can also be called with positional arguments (although doing so would be very fiddly).\n\n@jnewbery you too agree that this is by design bad for positional arguments (considering the possible settings can be extended).\n\nAnother approach is to use something like `sendmany`: `updatepeer {\""setting\"":value,",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-341289626,341289626,
jnewbery,2017-11-14T18:34:49Z,"@NicolasDorier \n\n> how so? This is just 3 differents parameters of 3 strings\n\nRight, but all RPCs currently support positional arguments, where the position of the argument determines its meaning. I don't necessarily agree that it's always appropriate, but having a single RPC that doesn't adhere to that scheme is confusing and inconsistent.\n\nUsing named arguments have been around for a",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-344354270,344354270,
NicolasDorier,2017-11-20T12:49:23Z,"yeah we talked about it, I understand now why named args make sense. Concept ACK.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-345686197,345686197,
jnewbery,2017-11-29T21:25:10Z,@NicolasDorier - you've given this a *BIG BIG concept ACK*. Mind reviewing? :slightly_smiling_face: ,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-348001110,348001110,
NicolasDorier,2017-11-30T01:57:19Z,Sure will review and test today.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-348058191,348058191,
NicolasDorier,2017-12-07T07:33:49Z,@jnewbery do you need more help on this PR? I am really interested into seeing it merged.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-349886489,349886489,
jnewbery,2017-12-07T16:43:41Z,"@NicolasDorier: Sorry for dropping this - I've rebased on master and squashed all nits.\n\nI'm not sure about your suggestion for locking in updatepeer and fetching the `CNode`. `cs_vNodes` isn't currently locked anywhere outsdie `CConman`, which I think is a good property to maintain.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350024909,350024909,
NicolasDorier,2017-12-08T05:15:11Z,"@jnewbery in this case, I would suggest to have a method on CConman `bool CConman::UpdateSetting(nodeid, str,value)` because there is high ratio of ceremonial monkey copy pasta code everytimes we will need to add one property here.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350174592,350174592,
TheBlueMatt,2017-12-08T16:00:35Z,"I'm still with @theuni on this one, not super happy with the idea of changing properties about peers that net_processing/net both consider ""constant"". Would prefer we add some (undocumented?) options to addnode (or a new RPC) which lets you control the flags of a peer as you create a connection.",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350299532,350299532,
jnewbery,2017-12-08T17:44:06Z,"@theuni's comment was:\n\n> the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly\n\nI don't understand what's meant by 'performing actions explicitly', but I'm happy to modify this PR if there are concrete suggestions.\n\n> not super happy with the idea of changing properties about peers that net_processing/net bo",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350325940,350325940,
TheBlueMatt,2017-12-08T18:43:30Z,"I might be slightly more OK with changing fWhitelisted on a peer after its up, as that may be useful ""in the real world"" outside of tests, but I'm super not a fan of changing manual_connection. One thing @theuni and I have talked about is being more aggressive about CNode representing a ""connection handle"" where its potentially allowed to have a few constant members which are general information a",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350340169,350340169,
jnewbery,2017-12-08T21:38:34Z,"> One thing you might imagine...\n\nYou're describing things that _may_ happen in future changes in abstract terms, particularly when you talk about between-message-stateful behaviour.\n\n`m_manual_connection` is certainly a better name than `fAddNode`, but I still don't think it really captures what the property means. Really it's something like 'preferred_peer' - it's a peer that we don't wa",https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350378639,350378639,
jnewbery,2018-05-24T19:57:52Z,Fixed @kallewoof review comments.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-391839757,391839757,
jnewbery,2018-07-23T17:56:35Z,There doesn't seem to much appetite for this. Closing.,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-407146189,407146189,
NicolasDorier,2018-07-24T03:23:34Z,I liked it :(,https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-407268229,407268229,
promag,2017-10-27T10:25:49Z,Is null instead.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147375941,147375941,src/rpc/net.cpp
promag,2017-10-27T10:29:03Z,If not then raise invalid parameter?,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376503,147376503,src/rpc/net.cpp
promag,2017-10-27T10:29:26Z,Missing test for invalid node.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376560,147376560,src/rpc/net.cpp
promag,2017-10-27T10:31:55Z,Not null instead.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147377023,147377023,src/rpc/net.cpp
promag,2017-10-27T14:35:38Z,"```cpp\nif (!...) {\n    throw ...;\n}\n```",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147427787,147427787,src/rpc/net.cpp
promag,2017-10-27T14:39:24Z,"Nit, `> 1`.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147428864,147428864,src/rpc/net.cpp
promag,2017-10-27T14:39:49Z,"Nit, same line or `{ }`.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147428979,147428979,src/rpc/net.cpp
promag,2017-10-27T14:41:09Z,"Nit, missing spaces after `for`.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147429388,147429388,src/net.cpp
promag,2017-10-27T14:41:47Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147429561,147429561,src/rpc/net.cpp
promag,2017-10-27T14:43:42Z,"Nit, the most common expression is\n```cpp\nif (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n```",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430084,147430084,src/rpc/net.cpp
promag,2017-10-27T14:44:17Z,"Nit, space after `if`.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430252,147430252,src/rpc/net.cpp
promag,2017-10-27T14:46:17Z,Same validation of `getpeerinfo`.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430787,147430787,src/rpc/net.cpp
promag,2017-10-27T14:46:52Z,Needs release notes.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430945,147430945,src/rpc/net.cpp
promag,2017-10-27T14:49:28Z,"Actually I think this is more correct:\n - raise `RPC_INVALID_PARAMETER` if `node_id < 0`;\n - raise `RPC_INVALID_ADDRESS_OR_KEY` if `!GetNodeStats(...)`.\n\nNote: if you do this then add a test for 1st case.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147431612,147431612,src/rpc/net.cpp
promag,2017-10-27T14:50:26Z,Missing failure tests for getpeerinfo (maybe unrelated to this PR).,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147431901,147431901,test/functional/net.py
jnewbery,2017-10-27T19:43:36Z,"I don't think it's too important, but feel free to open a follow-up PR if you think it's required.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147500533,147500533,src/rpc/net.cpp
promag,2017-10-31T14:59:01Z,"Nit, missing space after `for`. Same below.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r148022442,148022442,src/net.cpp
promag,2017-10-31T15:22:19Z,Remove lock or am I missing something?,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r148030122,148030122,src/rpc/net.cpp
NicolasDorier,2017-11-30T02:02:32Z,"The loop will get repeated all over the place for each field. (Already two times)\n\nI think a better approach would be to lock at `updatepeer` level and fetch the right CNode there at the beginning of the call. And change fields directly from there.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969175,153969175,src/net.cpp
NicolasDorier,2017-11-30T02:04:15Z,"See my above comment, by fetching once the node at the start of this method, you can remove all those `if` as you already know if the CNode with such id already exist. It makes things a bit easier to test and prevent monkey coding each time we want to add a new field.\n\nThis RPC error is also untestable as it makes you reproduce a difficult race condition. (need to drop the node after the previ",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969407,153969407,src/rpc/net.cpp
NicolasDorier,2017-11-30T02:07:33Z,This method would also be removed if fetching CNode was done at the updatepeer level.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969790,153969790,src/net.cpp
jnewbery,2017-12-07T15:09:40Z,fixed,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r155547583,155547583,src/net.cpp
jnewbery,2017-12-07T15:11:31Z,you're right - I don't think this is required,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r155548049,155548049,src/rpc/net.cpp
kallewoof,2018-02-22T08:51:34Z,Could you maybe make an (optionally inline) method `find_node_by_id` that the above methods use? Looks a bit copy-pastey.,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169887796,169887796,src/net.cpp
kallewoof,2018-02-22T08:53:22Z,"Nit: No period at end (seems to be the norm). Also add this to the first line (`""getpeerinfo \""id\""\n""`)",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169888223,169888223,src/rpc/net.cpp
kallewoof,2018-02-22T08:56:08Z,"`""updatepeer \""id\"" ( \""whitelisted\"" \""manual_connection\"" )\n""`",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169888849,169888849,src/rpc/net.cpp
kallewoof,2018-02-22T08:57:04Z,"Nit: `node_id` is an `int`, so `%d` not `%u`.",https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169889059,169889059,src/rpc/net.cpp
jnewbery,2018-05-24T19:54:46Z,refactored out,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711373,190711373,src/net.cpp
jnewbery,2018-05-24T19:56:03Z,fixed,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711669,190711669,src/rpc/net.cpp
jnewbery,2018-05-24T19:57:02Z,fixed,https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711896,190711896,src/rpc/net.cpp
