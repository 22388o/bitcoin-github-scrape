[
  {
    "sha": "ada356208e153e088c729c102d5d79c9c9d66f1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGEzNTYyMDhlMTUzZTA4OGM3MjljMTAyZDVkNzljOWM5ZDY2ZjFh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-14T07:27:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-04T11:11:26Z"
      },
      "message": "Fix typos reported by codespell",
      "tree": {
        "sha": "f379a875fbf5208de2fe211c0f5c343bc1bc51f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f379a875fbf5208de2fe211c0f5c343bc1bc51f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ada356208e153e088c729c102d5d79c9c9d66f1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada356208e153e088c729c102d5d79c9c9d66f1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ada356208e153e088c729c102d5d79c9c9d66f1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada356208e153e088c729c102d5d79c9c9d66f1a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59ecacfc84af13e5a1608e7d970315d07dcb0269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ecacfc84af13e5a1608e7d970315d07dcb0269",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59ecacfc84af13e5a1608e7d970315d07dcb0269"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 30,
      "deletions": 25
    },
    "files": [
      {
        "sha": "e5b9cbaa40ec960e1c50085ecddefacc3f1b1589",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -96,7 +96,7 @@ Comment: Site: https://bitcointalk.org/?topic=1756.0\n Files: src/qt/res/icons/proxy.png\n        src/qt/res/src/proxy.svg\n Copyright: Cristian Mircea Messel\n-Licese: public-domain\n+License: public-domain\n \n \n License: Expat"
      },
      {
        "sha": "14a2cf69881fc8f56ef1f983b4757e9710c9b1bf",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -170,7 +170,7 @@ def main():\n \n     args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n \n-    # Set enviroment variable USE_LXC or USE_DOCKER, let gitian-builder know that we use lxc or docker\n+    # Set environment variable USE_LXC or USE_DOCKER, let gitian-builder know that we use lxc or docker\n     if args.docker:\n         os.environ['USE_DOCKER'] = '1'\n     elif not args.kvm:"
      },
      {
        "sha": "58d8cc2c9d03fef45e1d4f9cb7ae6e2413cc7e1b",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -78,7 +78,7 @@ static void SetMaxOpenFiles(leveldb::Options *options) {\n     // do not interfere with select() loops. On 64-bit Unix hosts this value is\n     // also OK, because up to that amount LevelDB will use an mmap\n     // implementation that does not use extra file descriptors (the fds are\n-    // closed after being mmaped).\n+    // closed after being mmap'ed).\n     //\n     // Increasing the value beyond the default is dangerous because LevelDB will\n     // fall back to a non-mmap implementation when the file count is too large."
      },
      {
        "sha": "5363c945470bb78b2754441dbdf6914a649822fc",
        "filename": "src/qt/test/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/qt/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/qt/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/util.h?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -5,7 +5,7 @@\n  * Press \"Ok\" button in message box dialog.\n  *\n  * @param text - Optionally store dialog text.\n- * @param msec - Number of miliseconds to pause before triggering the callback.\n+ * @param msec - Number of milliseconds to pause before triggering the callback.\n  */\n void ConfirmMessage(QString* text = nullptr, int msec = 0);\n "
      },
      {
        "sha": "19109f60ecf70abbd1e5ecdc82c34a8643d643ea",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -1740,7 +1740,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\\n\"\n                             \"3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction.\\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n-                            \"                              will be tried. If false, only non-witness deserialization wil be tried. Only has an effect if\\n\"\n+                            \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n                             \"                              permitsigdata is true.\\n\"\n                             \"\\nResult:\\n\"\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\""
      },
      {
        "sha": "953d6c37de39fc76168149dabe286b999c26fa38",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -111,7 +111,7 @@ class SingleThreadedSchedulerClient {\n     /**\n      * Add a callback to be executed. Callbacks are executed serially\n      * and memory is release-acquire consistent between callback executions.\n-     * Practially, this means that callbacks can behave as if they are executed\n+     * Practically, this means that callbacks can behave as if they are executed\n      * in order by a single thread.\n      */\n     void AddToProcessQueue(std::function<void (void)> func);"
      },
      {
        "sha": "45b097dde6e141dfd1060a104f4ad736406fb23e",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -373,7 +373,7 @@ enum class ParseScriptContext {\n     P2WSH,\n };\n \n-/** Parse a constant. If succesful, sp is updated to skip the constant and return true. */\n+/** Parse a constant. If successful, sp is updated to skip the constant and return true. */\n bool Const(const std::string& str, Span<const char>& sp)\n {\n     if ((size_t)sp.size() >= str.size() && std::equal(str.begin(), str.end(), sp.begin())) {\n@@ -383,7 +383,7 @@ bool Const(const std::string& str, Span<const char>& sp)\n     return false;\n }\n \n-/** Parse a function call. If succesful, sp is updated to be the function's argument(s). */\n+/** Parse a function call. If successful, sp is updated to be the function's argument(s). */\n bool Func(const std::string& str, Span<const char>& sp)\n {\n     if ((size_t)sp.size() >= str.size() + 2 && sp[str.size()] == '(' && sp[sp.size() - 1] == ')' && std::equal(str.begin(), str.end(), sp.begin())) {"
      },
      {
        "sha": "dc20f7a9da4231caf96b6247f3db3101c4d51456",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -529,7 +529,7 @@ class BitStreamReader\n     explicit BitStreamReader(IStream& istream) : m_istream(istream) {}\n \n     /** Read the specified number of bits from the stream. The data is returned\n-     * in the nbits least signficant bits of a 64-bit uint.\n+     * in the nbits least significant bits of a 64-bit uint.\n      */\n     uint64_t Read(int nbits) {\n         if (nbits < 0 || nbits > 64) {"
      },
      {
        "sha": "8d577cf521a47ed08cd00d180531a0e73a85c700",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -75,7 +75,7 @@ void* Arena::alloc(size_t size)\n \n     // Create the used-chunk, taking its space from the end of the free-chunk\n     const size_t size_remaining = size_ptr_it->first - size;\n-    auto alloced = chunks_used.emplace(size_ptr_it->second + size_remaining, size).first;\n+    auto allocated = chunks_used.emplace(size_ptr_it->second + size_remaining, size).first;\n     chunks_free_end.erase(size_ptr_it->second + size_ptr_it->first);\n     if (size_ptr_it->first == size) {\n         // whole chunk is used up\n@@ -88,7 +88,7 @@ void* Arena::alloc(size_t size)\n     }\n     size_to_free_chunk.erase(size_ptr_it);\n \n-    return reinterpret_cast<void*>(alloced->first);\n+    return reinterpret_cast<void*>(allocated->first);\n }\n \n void Arena::free(void *ptr)"
      },
      {
        "sha": "e9060ce97de2eb67479020968a4f8d49b3a9a81f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -72,7 +72,7 @@ BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& data\n         database_filename = \"wallet.dat\";\n     }\n     LOCK(cs_db);\n-    // Note: An ununsed temporary BerkeleyEnvironment object may be created inside the\n+    // Note: An unused temporary BerkeleyEnvironment object may be created inside the\n     // emplace function if the key already exists. This is a little inefficient,\n     // but not a big concern since the map will be changed in the future to hold\n     // pointers instead of objects, anyway."
      },
      {
        "sha": "3edd760b909fb031d28cf09907589e337418c963",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -76,7 +76,7 @@ class ExampleTest(BitcoinTestFramework):\n     def set_test_params(self):\n         \"\"\"Override test parameters for your individual test.\n \n-        This method must be overridden and num_nodes must be exlicitly set.\"\"\"\n+        This method must be overridden and num_nodes must be explicitly set.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "450cef37c03e318bf70fe48916ad17140d35a579",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -989,7 +989,7 @@ def run_test(self):\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n         self.sync_blocks([b73], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n-        # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n+        # b74/75 - if we push an invalid script element, all previous sigops are counted,\n         #          but sigops after the element are not counted.\n         #\n         #       The invalid script element is that the push_data indicates that"
      },
      {
        "sha": "1259754c5af154b1f0a3888e04b0f96b97811a32",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -15,8 +15,8 @@ class LongpollThread(threading.Thread):\n     def __init__(self, node):\n         threading.Thread.__init__(self)\n         # query current longpollid\n-        templat = node.getblocktemplate()\n-        self.longpollid = templat['longpollid']\n+        template = node.getblocktemplate()\n+        self.longpollid = template['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n         self.node = get_rpc_proxy(node.url, 1, timeout=600, coveragedir=node.coverage_dir)\n@@ -31,11 +31,11 @@ def set_test_params(self):\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n-        templat = self.nodes[0].getblocktemplate()\n-        longpollid = templat['longpollid']\n+        template = self.nodes[0].getblocktemplate()\n+        longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n-        templat2 = self.nodes[0].getblocktemplate()\n-        assert(templat2['longpollid'] == longpollid)\n+        template2 = self.nodes[0].getblocktemplate()\n+        assert(template2['longpollid'] == longpollid)\n \n         # Test 1: test that the longpolling wait if we do nothing\n         thr = LongpollThread(self.nodes[0])"
      },
      {
        "sha": "40373689ded38969b04cd1e6651fb7c91e569e06",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -76,7 +76,7 @@ def run_test(self):\n         self.reconnect_p2p(num_connections=2)\n \n         self.log.info('Test orphan transaction handling ... ')\n-        # Create a root transaction that we withhold until all dependend transactions\n+        # Create a root transaction that we withhold until all dependent transactions\n         # are sent out and in the orphan cache\n         SCRIPT_PUB_KEY_OP_TRUE = b'\\x51\\x75' * 15 + b'\\x51'\n         tx_withhold = CTransaction()"
      },
      {
        "sha": "4740740d422d733ed70f6f85333f6ea5bea0438f",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -89,7 +89,7 @@ def run_test(self):\n             sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n         except:\n             pass\n-        # node2 must remain at heigh 0\n+        # node2 must remain at height 0\n         assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n \n         # now connect also to node 1 (non pruned)"
      },
      {
        "sha": "161efcf2e9fa6b2ff2083fc074d69ef50b82654e",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -471,7 +471,7 @@ def test_v0_outputs_arent_spendable(self):\n         blocks are permitted to contain witnesses).\"\"\"\n \n         # node2 doesn't need to be connected for this test.\n-        # (If it's connected, node0 may propogate an invalid block to it over\n+        # (If it's connected, node0 may propagate an invalid block to it over\n         # compact blocks and the nodes would have inconsistent tips.)\n         disconnect_nodes(self.nodes[0], 2)\n "
      },
      {
        "sha": "a693b7e4bb030a9b6e9e6bdbdf904bc265b1bad5",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -105,7 +105,7 @@ def run_test(self):\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'])\n \n-        # Explicilty allow converting non-empty txs\n+        # Explicitly allow converting non-empty txs\n         new_psbt = self.nodes[0].converttopsbt(rawtx['hex'])\n         self.nodes[0].decodepsbt(new_psbt)\n "
      },
      {
        "sha": "35004fb588adecede0aa79d09ef680ddfaaa13f3",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -122,7 +122,7 @@ def create_tx_with_script(prevtx, n, script_sig=b\"\", *, amount, script_pub_key=C\n     \"\"\"Return one-input, one-output transaction object\n        spending the prevtx's n-th output with the given amount.\n \n-       Can optionally pass scriptPubKey and scriptSig, default is anyone-can-spend ouput.\n+       Can optionally pass scriptPubKey and scriptSig, default is anyone-can-spend output.\n     \"\"\"\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))"
      },
      {
        "sha": "67b83b5d43847b145b73183f2537f8a0d137e112",
        "filename": "test/lint/lint-spelling.ignore-words.txt",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada356208e153e088c729c102d5d79c9c9d66f1a/test/lint/lint-spelling.ignore-words.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada356208e153e088c729c102d5d79c9c9d66f1a/test/lint/lint-spelling.ignore-words.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.ignore-words.txt?ref=ada356208e153e088c729c102d5d79c9c9d66f1a",
        "patch": "@@ -0,0 +1,5 @@\n+cas\n+hights\n+mor\n+objext\n+useable"
      }
    ]
  },
  {
    "sha": "f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGE4MWY3M2FjNGZlZTgyNDg4ODA2YzJiMzg0YjM2ZThlZTJhY2Rm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-13T13:19:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-04T11:11:26Z"
      },
      "message": "lint: Add spell check linter (codespell)",
      "tree": {
        "sha": "339c8ede5b1b85b3c43d3c8e3a8dee4f6047e278",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/339c8ede5b1b85b3c43d3c8e3a8dee4f6047e278"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ada356208e153e088c729c102d5d79c9c9d66f1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada356208e153e088c729c102d5d79c9c9d66f1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ada356208e153e088c729c102d5d79c9c9d66f1a"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a6ff73d79ee28c60c5993abfa22916b0aeaef2f",
        "filename": ".travis/lint_04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/.travis/lint_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/.travis/lint_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_04_install.sh?ref=f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
        "patch": "@@ -6,4 +6,5 @@\n \n export LC_ALL=C\n \n+travis_retry pip install codespell\n travis_retry pip install flake8"
      },
      {
        "sha": "9a49f3227134ed51a18f82d5bd75e58b7ad83f86",
        "filename": "test/lint/lint-spelling.ignore-words.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/test/lint/lint-spelling.ignore-words.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/test/lint/lint-spelling.ignore-words.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.ignore-words.txt?ref=f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
        "patch": "@@ -2,4 +2,5 @@ cas\n hights\n mor\n objext\n+unselect\n useable"
      },
      {
        "sha": "5d672698a77c49eb214403d114eba819883f2e34",
        "filename": "test/lint/lint-spelling.sh",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8a81f73ac4fee82488806c2b384b36e8ee2acdf/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=f8a81f73ac4fee82488806c2b384b36e8ee2acdf",
        "patch": "@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Warn in case of spelling errors.\n+# Note: Will exit successfully regardless of spelling errors.\n+\n+export LC_ALL=C\n+\n+IGNORE_WORDS_FILE=test/lint/lint-spelling.ignore-words.txt\n+if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/qt/locale/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\"); then\n+    echo \"^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in ${IGNORE_WORDS_FILE}\"\n+fi"
      }
    ]
  }
]