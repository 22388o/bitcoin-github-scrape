[
  {
    "sha": "b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDUxMWUyZTJlZDFhNjA3N2FlNjgyNmE5ZWU2YjdhMzExMjkzZDA4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-08-25T20:22:28Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-01-15T09:57:32Z"
      },
      "message": "log: Prefix log messages with function name if -logsourcelocations is set",
      "tree": {
        "sha": "b6191e31029db4e1e517f93e4af119015d159c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6191e31029db4e1e517f93e4af119015d159c2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29d2aeb4a2b1830be4724aab3a84a62f072056f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29d2aeb4a2b1830be4724aab3a84a62f072056f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29d2aeb4a2b1830be4724aab3a84a62f072056f4"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 40,
      "deletions": 4
    },
    "files": [
      {
        "sha": "17d0ac6d90e7ef9969260df3e9e6750e4792615d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -532,6 +532,7 @@ void SetupServerArgs(NodeContext& node)\n #else\n     hidden_args.emplace_back(\"-logthreadnames\");\n #endif\n+    argsman.AddArg(\"-logsourcelocations\", strprintf(\"Prepend debug output with name of the originating source location (source file, line number and function name) (default: %u)\", DEFAULT_LOGSOURCELOCATIONS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -878,6 +879,7 @@ void InitLogging(const ArgsManager& args)\n #ifdef HAVE_THREAD_LOCAL\n     LogInstance().m_log_threadnames = args.GetBoolArg(\"-logthreadnames\", DEFAULT_LOGTHREADNAMES);\n #endif\n+    LogInstance().m_log_sourcelocations = args.GetBoolArg(\"-logsourcelocations\", DEFAULT_LOGSOURCELOCATIONS);\n \n     fLogIPs = args.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n "
      },
      {
        "sha": "e175fc3d5e64c3d98684fe56c2961190e41e4504",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <logging.h>\n #include <util/threadnames.h>\n+#include <util/string.h>\n #include <util/time.h>\n \n #include <mutex>\n@@ -236,11 +237,15 @@ namespace BCLog {\n     }\n }\n \n-void BCLog::Logger::LogPrintStr(const std::string& str)\n+void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n {\n     StdLockGuard scoped_lock(m_cs);\n     std::string str_prefixed = LogEscapeMessage(str);\n \n+    if (m_log_sourcelocations && m_started_new_line) {\n+        str_prefixed.insert(0, \"[\" + RemovePrefix(source_file, \"./\") + \":\" + ToString(source_line) + \"] [\" + logging_function + \"] \");\n+    }\n+\n     if (m_log_threadnames && m_started_new_line) {\n         str_prefixed.insert(0, \"[\" + util::ThreadGetInternalName() + \"] \");\n     }"
      },
      {
        "sha": "4ece8f5e3aa666bafef892224d5273c8bd9d6c41",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -22,6 +22,7 @@ static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n static const bool DEFAULT_LOGTHREADNAMES = false;\n+static const bool DEFAULT_LOGSOURCELOCATIONS = false;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n@@ -90,12 +91,13 @@ namespace BCLog {\n         bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;\n         bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;\n         bool m_log_threadnames = DEFAULT_LOGTHREADNAMES;\n+        bool m_log_sourcelocations = DEFAULT_LOGSOURCELOCATIONS;\n \n         fs::path m_file_path;\n         std::atomic<bool> m_reopen_file{false};\n \n         /** Send a string to the log output */\n-        void LogPrintStr(const std::string& str);\n+        void LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line);\n \n         /** Returns whether logs will be written to any output */\n         bool Enabled() const\n@@ -163,7 +165,7 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n // peer can fill up a user's disk with debug.log entries.\n \n template <typename... Args>\n-static inline void LogPrintf(const char* fmt, const Args&... args)\n+static inline void LogPrintf_(const std::string& logging_function, const std::string& source_file, const int source_line, const char* fmt, const Args&... args)\n {\n     if (LogInstance().Enabled()) {\n         std::string log_msg;\n@@ -173,10 +175,12 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n             /* Original format string will have newline so don't add one here */\n             log_msg = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + fmt;\n         }\n-        LogInstance().LogPrintStr(log_msg);\n+        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line);\n     }\n }\n \n+#define LogPrintf(...) LogPrintf_(__func__, __FILE__, __LINE__, __VA_ARGS__)\n+\n // Use a macro instead of a function for conditional logging to prevent\n // evaluating arguments when logging for the category is not enabled.\n #define LogPrint(category, ...)              \\"
      },
      {
        "sha": "4136245050816c9d4864c1042fa538c108dade94",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -67,6 +67,7 @@ FUZZ_TARGET(string)\n     }\n     OutputType output_type;\n     (void)ParseOutputType(random_string_1, output_type);\n+    (void)RemovePrefix(random_string_1, random_string_2);\n     (void)ResolveErrMsg(random_string_1, random_string_2);\n     try {\n         (void)RPCConvertNamedValues(random_string_1, random_string_vector);"
      },
      {
        "sha": "4fabdd733cc2a1af6954cd17d49a74cf40e905ec",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -77,6 +77,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n         {\n             \"dummy\",\n             \"-printtoconsole=0\",\n+            \"-logsourcelocations\",\n             \"-logtimemicros\",\n             \"-logthreadnames\",\n             \"-debug\","
      },
      {
        "sha": "6e10d55b4644e826a411403943835026d91929ab",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -2200,4 +2200,17 @@ BOOST_AUTO_TEST_CASE(message_hash)\n     BOOST_CHECK_NE(message_hash1, signature_hash);\n }\n \n+BOOST_AUTO_TEST_CASE(remove_prefix)\n+{\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"./util/system.h\", \"./\"), \"util/system.h\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"foo\", \"foo\"), \"\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"foo\", \"fo\"), \"o\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"foo\", \"f\"), \"oo\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"foo\", \"\"), \"foo\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"fo\", \"foo\"), \"fo\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"f\", \"foo\"), \"f\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"\", \"foo\"), \"\");\n+    BOOST_CHECK_EQUAL(RemovePrefix(\"\", \"\"), \"\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "b26facc50288e781ae9d303ac12c56b01ba90ea0",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -25,6 +25,14 @@\n     return str.substr(front, end - front + 1);\n }\n \n+[[nodiscard]] inline std::string RemovePrefix(const std::string& str, const std::string& prefix)\n+{\n+    if (str.substr(0, prefix.size()) == prefix) {\n+        return str.substr(prefix.size());\n+    }\n+    return str;\n+}\n+\n /**\n  * Join a list of items\n  *"
      },
      {
        "sha": "224953f94175edb959c28872b4ff95a87a6922fa",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4511e2e2ed1a6077ae6826a9ee6b7a311293d08/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=b4511e2e2ed1a6077ae6826a9ee6b7a311293d08",
        "patch": "@@ -114,6 +114,8 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitc\n \n         if self.version_is_at_least(190000):\n             self.args.append(\"-logthreadnames\")\n+        if self.version_is_at_least(219900):\n+            self.args.append(\"-logsourcelocations\")\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n         self.use_cli = use_cli"
      }
    ]
  }
]