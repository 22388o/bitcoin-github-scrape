DrahtBot,2020-09-22 12:23:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19288 (tests: Add fuzzing harness for TorController by practicalswift)\n* #19064 (refactor: Cleanup thread ctor calls by ",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-696686472,696686472,
practicalswift,2020-09-22 13:17:10,"Concept ACK\n\nBeing able to differentiate between incoming Tor connections from normal localhost connections would be very useful\n\n",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-696715003,696715003,
laanwj,2020-09-22 15:05:28,Concept ACK! Thank you for working on this.,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-696781883,696781883,
hebasto,2020-09-23 10:48:59,"@vasild\n>  - This will always open `127.0.0.1:8334`, even if the new option `-onionservicetargetport=` is not specified and the system does not use Tor in any way. I think this deserves a release notes mention.\n\nTarget port opening could be dependent on `-listenonion` option value. What do you think?\n\n>  - Binding to `127.0.0.1` would make it impossible (or hard) to run the Tor daemon on",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-697285952,697285952,
naumenkogs,2020-09-23 14:17:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-697427490,697427490,
hebasto,2020-09-24 07:40:55,"From [IRC discussion](http://www.erisian.com.au/bitcoin-core-dev/log-2020-09-23.html#l-208):\n> \<vasild> what about extending the -bind=addr:port option to something like -bind=addr:port[=tor], for example: -bind=1.2.3.4:8333 -bind=1.2.3.4:8334=tor\n> \<vasild> instead of adding a new option -onionservicetarget= ?\n> \<wumpus> making it an attribute makes sense\n> \<wumpus> (of the bind)\n> ",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698174408,698174408,
jonatack,2020-09-24 13:57:04,Concept ACK. Could use test coverage. I'm running #20002 that is built on these changes and those in #19998.,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698361565,698361565,
hebasto,2020-09-24 21:00:01,"@vasild @jonatack \n\n> what about extending the -bind=addr:port option to something like -bind=addr:port[=tor]\n\nI like that ^ idea very much. Implemented in https://github.com/hebasto/bitcoin/commits/200924-WIP\n\nAs many other PRs are built on top of this one, I'm begging you to make some preliminary review of the suggested branch to avoid unneeded rebasing.\n\nNew version features:\n",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698585740,698585740,
hebasto,2020-09-24 21:27:10,"@vasild \n>  - Notice that if another peer manages to reach and connect to the new bind without tor, then we would mistakenly think it is an incoming tor connection.\n\nThis behavior could be mitigated in #19998 by additional checking of `peer.addr` and `peer.GetAddrLocal()`.",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698597381,698597381,
jonatack,2020-09-24 21:51:19,"I like that approach, too. Will look at your branch. Edit: done.",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698607934,698607934,
hebasto,2020-09-25 11:41:42,"Updated 6e05a443bbe7090a331281290f18bedea13bab0a -> cfa17e307adaec81f6036cf4f124d78f9e128c30 ([pr19991.01](https://github.com/hebasto/bitcoin/commits/pr19991.01) -> [pr19991.02](https://github.com/hebasto/bitcoin/commits/pr19991.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.01..pr19991.02)):\n\n- extended `-bind` configure option (credits to @vasild), now this PR completely repl",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698882284,698882284,
hebasto,2020-09-25 13:42:23,"@vasild \n> Just to summarize the default behavior:\n> ### Before this PR\n> \n>  - If no `-bind` is given then we will bind on `0.0.0.0:8333` and `[::]:8333`.\n> \n>  - If `-bind=1.2.3.4:8333` is given then we will bind only on `1.2.3.4:8333`.\n> \n> \n> ### With this PR\n> \n>  - If no `-bind` is given then we will bind on `0.0.0.0:8333`, `[::]:8333` and `127.0.0.1:8334`.\n> \n>  - ",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698936058,698936058,
vasild,2020-09-25 13:44:39,[This](https://lists.torproject.org/pipermail/tor-onions/2020-September/000414.html) could be an alternative way to check if an incoming connection is from tor - to ask the tor daemon if it made it. But it seems this is not possible now and even if made possible in the future then it will only be available if bitcoind has access to tor-control.,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-698937295,698937295,
hebasto,2020-09-25 15:48:31,"Updated cfa17e307adaec81f6036cf4f124d78f9e128c30 -> 0782aee0a3268e9e4de53613f229d645c2ab06b9 ([pr19991.02](https://github.com/hebasto/bitcoin/commits/pr19991.02) -> [pr19991.03](https://github.com/hebasto/bitcoin/commits/pr19991.03), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.02..pr19991.03)):\n\n- addressed some @vasild's comments",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699005931,699005931,
hebasto,2020-09-25 20:29:39,"Updated 0782aee0a3268e9e4de53613f229d645c2ab06b9 -> 20349ec2f669c6e06dfbddbcec63b1c3b6cdbc9e ([pr19991.03](https://github.com/hebasto/bitcoin/commits/pr19991.03) -> [pr19991.04](https://github.com/hebasto/bitcoin/commits/pr19991.04), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.03..pr19991.04)):\n\n- addressed some @vasild's [comment](https://github.com/bitcoin/bitcoin/pull/19991#di",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699140059,699140059,
hebasto,2020-09-28 11:18:42,"Updated 20349ec2f669c6e06dfbddbcec63b1c3b6cdbc9e -> d0e349140fac872ebf01c3826528a84bd6a89519 ([pr19991.04](https://github.com/hebasto/bitcoin/commits/pr19991.04) -> [pr19991.06](https://github.com/hebasto/bitcoin/commits/pr19991.06), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.04..pr19991.06)):\n\n- addressed @jonatack's comments\n\n@jonatack \n> When reviewing the commits in or",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699944325,699944325,
hebasto,2020-09-28 11:35:09,"@jonatack \n> Would it be possible to add test coverage? Perhaps similar to `feature_proxy.py`.\n\n`feature_proxy.py` tests outbound connections, IIUC.",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699951750,699951750,
hebasto,2020-09-29 07:06:53,Rebased d0e349140fac872ebf01c3826528a84bd6a89519 -> efa45f5fde37ebf20f318da74d53f056fd71d69f ([pr19991.06](https://github.com/hebasto/bitcoin/commits/pr19991.06) -> [pr19991.07](https://github.com/hebasto/bitcoin/commits/pr19991.07)) due to the conflict with #20014.,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700496140,700496140,
laanwj,2020-09-29 15:58:14,"Tested ACK efa45f5fde37ebf20f318da74d53f056fd71d69f\nI've verified that this opens a new port (8334, bound on 127.0.0.1 only) and that `torcontrol` makes incoming connection on the hidden service that it creates go to there. This allows to distinguish incoming Tor connections. This works together with #19954.",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700802861,700802861,
hebasto,2020-09-29 16:34:02,"Updated efa45f5fde37ebf20f318da74d53f056fd71d69f -> 30f2355d96bf67a30a06c1fcf6d27d242b05491b ([pr19991.07](https://github.com/hebasto/bitcoin/commits/pr19991.07) -> [pr19991.09](https://github.com/hebasto/bitcoin/commits/pr19991.09), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.07..pr19991.09)).\n\n1. Addressed @vasild's [comment](https://github.com/bitcoin/bitcoin/pull/19991#discus",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700831638,700831638,
hebasto,2020-09-30 13:34:01,"Updated 30f2355d96bf67a30a06c1fcf6d27d242b05491b -> 3c24f75d4ce7d3ce1e30d334ea30873a15633e46 ([pr19991.09](https://github.com/hebasto/bitcoin/commits/pr19991.09) -> [pr19991.10](https://github.com/hebasto/bitcoin/commits/pr19991.10), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.09..pr19991.10)):\n\n- addressed @laanwj's [comment](https://github.com/bitcoin/bitcoin/pull/19991#discuss",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-701394030,701394030,
laanwj,2020-09-30 13:40:38,"Thanks for addressing my comment. \n\nRe-ACK 3c24f75d4ce7d3ce1e30d334ea30873a15633e46",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-701397910,701397910,
hebasto,2020-09-30 17:19:39,"~Updated 3c24f75d4ce7d3ce1e30d334ea30873a15633e46 -> acba1851ef78d88c2442813174c2b559047b61e8 ([pr19991.10](https://github.com/hebasto/bitcoin/commits/pr19991.10) -> [pr19991.11](https://github.com/hebasto/bitcoin/commits/pr19991.11), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.10..pr19991.11)):~\n\n- ~type of `Options.onion_binds` switched from `std::vector` to `std::set` that is ",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-701528729,701528729,
hebasto,2020-10-01 16:30:21,"Updated 3c24f75d4ce7d3ce1e30d334ea30873a15633e46 -> 96571b3d4cb4cda0fd3d5a457ae4a12f615de82b ([pr19991.10](https://github.com/hebasto/bitcoin/commits/pr19991.10) -> [pr19991.12](https://github.com/hebasto/bitcoin/commits/pr19991.12), [diff](https://github.com/hebasto/bitcoin/compare/pr19991.10..pr19991.12)):\n\n- addressed all recent @Sjors' and @vasild's comments",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702253099,702253099,
Sjors,2020-10-01 17:55:29,re-utACK 96571b3d4cb4cda0fd3d5a457ae4a12f615de82b,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702300231,702300231,
hebasto,2020-10-01 19:43:36,@laanwj Assign [0.21.0](https://github.com/bitcoin/bitcoin/milestone/45) milestone?,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702357481,702357481,
hebasto,2020-10-02 09:52:49,@vasild Thanks for your review and suggestion! It seems your patch introduces a new circular dependency. Could we leave improvements for follow ups wrt coming feature freeze deadline?,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702636108,702636108,
vasild,2020-10-02 10:36:31,I am ok with 96571b3 (ACK-ed above). Feel free to ignore the idea or postpone it.,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702657464,702657464,
laanwj,2020-10-02 11:37:02,Re-ACK 96571b3d4cb4cda0fd3d5a457ae4a12f615de82b,https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702684104,702684104,
jonatack,2020-10-02 11:40:00,"@hebasto I am writing test coverage, are you open to bringing it into this PR or do you consider it a follow-up?",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702685460,702685460,
laanwj,2020-10-02 11:42:14,"@jonatack Though it would have been nice to include more testing here, let's leave that for a follow-up PR. this is a good self-contained change, and now we can move on to the other PRs based on it.",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702686420,702686420,
SimonVrouwe,2021-07-25 07:21:41,"@hebasto Hello, I ended up here to find reasons why my node (`bitcoind` v0.21.1) is listening on port 8334 even when `listenonion=0` is set. Reading the discussion in this PR, it is not clear to me if this was intended or not.\n\n> @vasild\n> \n...\n> > ### With this PR\n> > \n> > * If no `-bind` is given then we will bind on `0.0.0.0:8333`, `[::]:8333` and `127.0.0.1:8334`.\n> > * If `-bi",https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-886159283,886159283,
Saibato,2020-09-22 13:06:07,"nit. Why casting 0 to 0 , 0 is 0 in every byte-order? I like this to be a constant and not a hookable function. ",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r492716989,492716989,src/net.cpp
kristapsk,2020-09-22 13:39:02,"Is it guaranteed that `INADDR_ANY` will always be 0, on any operating system?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r492740957,492740957,src/net.cpp
Saibato,2020-09-22 15:05:13,[rfc1122](https://tools.ietf.org/html/rfc1122#section-3.2.1.3) section-3.2.1.3 ,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r492810592,492810592,src/net.cpp
hebasto,2020-09-22 19:43:48,"> Why casting 0 to 0 , 0 is 0 in every byte-order?\n\nFirstly, https://www.man7.org/linux/man-pages/man7/ip.7.html:\n> `in_addr` should be assigned one of the `INADDR_*` values using `htonl`...\n\nSecondly, it is inconsistent to have `s_addr = INADDR_ANY` in a line, and `s_addr = htonl(INADDR_LOOPBACK)` in another one.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r492989711,492989711,src/net.cpp
Saibato,2020-09-23 08:27:13,"Yup i guess its just a generation thing, its a nit, but i always liked to some degree how the bitcoin client did network things different than expected, \nU will never know who wrote the example codes and how drunk or biased by a gun on there head they where at those times when the foundations  u all take for granted where coded. \nINADDR_LOOPBACK is a different case and hey what can u do if the",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r493306244,493306244,src/net.cpp
sipa,2020-09-23 08:35:10,@saibato Are you ok?,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r493313890,493313890,src/net.cpp
vasild,2020-09-23 10:00:46,`htonl()` is the proper one even though the number is a palindrome. We had some discussion about that [here](https://github.com/bitcoin/bitcoin/pull/19628#discussion_r464156291) and [here](https://github.com/bitcoin/bitcoin/pull/19628#discussion_r473486793).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r493398119,493398119,src/net.cpp
vasild,2020-09-23 10:07:59,Signet not mentioned?,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r493404738,493404738,src/init.cpp
hebasto,2020-09-23 10:38:09,"I think this change -- to mention signet in help output for all relevant config options -- should be the part of another PR, no?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r493432398,493432398,src/init.cpp
Saibato,2020-09-23 12:37:46,"@sipa \n> @Saibato Are you ok?\n\nThx :)\n<details><summary>click here :package: :tada:  . to find out more</summary>\n<br>\nI case u forgot,  just assign INADDR_ANY without htonl is up till now in source code right after some first commits. from November 2009 onward.\nEven you later never changed that behavior and so far all run good with this.\n\nI get nervous when things in bitcoin are",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r493538320,493538320,src/net.cpp
vasild,2020-09-25 11:50:52,"```suggestion\n    argsman.AddArg(""-bind=<addr>[:<port>][=onion]"", strprintf(""Bind to given address and always listen on it. Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming tor connections (default: mainnet: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)"", defaultBaseParams->OnionServiceTargetPort",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494935024,494935024,src/init.cpp
vasild,2020-09-25 12:19:06,This would accept multiple =onion arguments and discard all but the last one. I.e. if `-bind=1.1.1.1:8334=onion -bind=2.2.2.2:8334=onion` is given then it will behave as if only `-bind=2.2.2.2:8334=onion` is given. Should we support more than one onion bind address? Maybe it would make sense on a machine with many interfaces.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494948385,494948385,src/init.cpp
vasild,2020-09-25 12:19:25,If the suffix is something else than `=onion` then this code would silently ignore it. I think we should print an error and refuse to start if the user makes a typo like `=omion`.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494948527,494948527,src/init.cpp
vasild,2020-09-25 12:29:38,nit: `m_` prefix.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494953857,494953857,src/net.h
vasild,2020-09-25 12:36:20,"This will cause undefined behavior if `connOptions.onion_bind` is not set, are we sure it is set here?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494957373,494957373,src/net.cpp
vasild,2020-09-25 12:43:10,"I don't think the new functionality should be tied to the `-listenonion` option.\n\nIts name is confusing - it has nothing to do with ""listening"" for tor connections. What it does is to automatically create the tor hidden service using the tor-control connection.\n\nIf the hidden service is configured via `torrc`, then we don't want to create another one automatically via tor-control and thus ",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494961073,494961073,src/net.cpp
vasild,2020-09-25 12:55:25,"`Bind()` could call `AddLocal()` which will add the address to `mapLocalHost`. From there we will eventually advertise it to some peer and it will get gossiped over the network.\n\nWe definitely do not want that because if somebody else manages to connect to it (outside of tor) then we will consider that as an incoming tor connection. This bind address should only be known by bitcoind and the to",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494967703,494967703,src/net.cpp
vasild,2020-09-25 12:59:53,"nit: I think it is wrong to call this ""socket"" as sockets are usually integers, like file descriptors, not `std::string`s. I understand why ""target"" is now undesirable. What about `tor_control_center`? ;)",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494970139,494970139,src/torcontrol.cpp
vasild,2020-09-25 13:10:49,`TorControlThread()` only takes a reference to this object and uses it in another thread. I think this is dangerous because the liftetime of the object may be shorter than the lifetime of the thread. Better make `TorControlThread()`'s argument just `CService` so that the object is copied.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494976346,494976346,src/torcontrol.cpp
hebasto,2020-09-25 13:47:13,Maybe `control_center` (if we are already within Tor-related class)?,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r494999263,494999263,src/torcontrol.cpp
hebasto,2020-09-25 13:51:53,#19759,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495002342,495002342,src/net.h
hebasto,2020-09-25 13:58:19,"```\n$ src/bitcoind -bind=127.0.0.1:4242=omion | grep omion\n2020-09-25T13:57:56Z [init] Command-line arg: bind=""127.0.0.1:4242=omion""\nError: Cannot resolve -bind address: '127.0.0.1:4242=omion'\n2020-09-25T13:57:58Z [init] Error: Cannot resolve -bind address: '127.0.0.1:4242=omion'\n```",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495006505,495006505,src/init.cpp
hebasto,2020-09-25 14:01:29,"> This would accept multiple =onion arguments and discard all but the last one.\n\nThat is done intentionally, leaving improving for follow ups.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495008672,495008672,src/init.cpp
hebasto,2020-09-25 14:34:33,Ok. I think a user should be able to explicitly disable such an additional binding? Any ideas?,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495031121,495031121,src/net.cpp
hebasto,2020-09-25 14:48:12,"wrt properties of `std::thread()` constructor and `TraceThread()` function I don't think it is dangerous. But objects of `CService` class are small, so going to implement passing by-copy.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495039958,495039958,src/torcontrol.cpp
hebasto,2020-09-25 15:28:07,"For ""127.0.0.1"" `IsRoutable()` returns `false`, therefore it won't be passed to AddLocal(). But, in general, I agree with you.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495065234,495065234,src/net.cpp
hebasto,2020-09-25 15:41:40,"Why not assign to the ""-listenonion"" option a new meaning ""Listen incoming onion connection, and automatically create the onion service if the Tor control available"". It looks pretty back-compatible, no?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495073463,495073463,src/net.cpp
hebasto,2020-09-25 15:48:57,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699005931).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495078026,495078026,src/torcontrol.cpp
hebasto,2020-09-25 15:49:04,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699005931).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495078093,495078093,src/torcontrol.cpp
hebasto,2020-09-25 15:49:20,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699005931).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495078248,495078248,src/net.cpp
hebasto,2020-09-25 15:49:48,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699005931).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495078496,495078496,src/init.cpp
hebasto,2020-09-25 20:30:13,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699140059).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495216360,495216360,src/net.cpp
hebasto,2020-09-26 09:35:31,See #20014.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495438047,495438047,src/init.cpp
jonatack,2020-09-28 06:34:50,3271e6d maybe document in this section the why and choice of the additional port `<n + 2>` in each chain,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495716246,495716246,src/chainparamsbase.cpp
jonatack,2020-09-28 06:39:51,"a8b28269 nit, rm extra space\n```suggestion\nbool TorControlConnection::Connect(const std::string& tor_control_center, const ConnectionCB& _connected, const ConnectionCB& _disconnected)\n```",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495718158,495718158,src/torcontrol.cpp
jonatack,2020-09-28 08:25:57,"937faad This would print:\n```text\n  -bind=<addr>[:<port>][=onion]\n       Bind to given address and always listen on it. Use [host]:port notation\n       for IPv6. Append =onion to tag any incoming connections to that\n       address and port as incoming tor connections (default: mainnet:\n       127.0.0.1:8334=onion, testnet: 127.0.0.1:18334=onion, regtest:\n       127.0.0.1:18445=onion)",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495769826,495769826,src/init.cpp
jonatack,2020-09-28 08:59:09,"0c9e4c55 One thing I did while testing this was add this logging change:\n```diff\ndiff --git a/src/torcontrol.cpp b/src/torcontrol.cpp\nindex f3583d5754..bafa44645f 100644\n--- a/src/torcontrol.cpp\n+++ b/src/torcontrol.cpp\n@@ -490,7 +490,7 @@ TorController::~TorController()\n void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495789132,495789132,src/torcontrol.cpp
jonatack,2020-09-28 09:35:43,Signet?,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495810711,495810711,src/init.cpp
hebasto,2020-09-28 09:50:57,#20014,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495819957,495819957,src/init.cpp
hebasto,2020-09-28 09:56:55,It is an arbitrary choice. Just verified that ports are not reserved by some other service.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495823479,495823479,src/chainparamsbase.cpp
jonatack,2020-09-28 09:58:26,"Yes, #20014 doesn't update `-bind`, as there's nothing to update before this PR, so it should be updated here if I'm not confused.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495824359,495824359,src/init.cpp
jonatack,2020-09-28 10:01:23,Thanks. I think it would be helpful to document that and say why there is an extra port for future readers of the code.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495826021,495826021,src/chainparamsbase.cpp
hebasto,2020-09-28 10:52:20,"We already have the following log message:\n```\n2020-09-28T10:51:00Z [init] Bound to 127.0.0.1:18334\n```",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495852333,495852333,src/torcontrol.cpp
hebasto,2020-09-28 11:02:32,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699936868).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495857174,495857174,src/chainparamsbase.cpp
hebasto,2020-09-28 11:02:54,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699936868).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495857364,495857364,src/torcontrol.cpp
hebasto,2020-09-28 11:03:12,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699936868).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495857505,495857505,src/init.cpp
hebasto,2020-09-28 11:05:36,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-699936868).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495858701,495858701,src/init.cpp
jonatack,2020-09-28 11:18:39,"Oh, quite right, I was grepping on `-ni bind` ;/\n\nmaster\n```\n456006:2020-09-28T10:33:52Z Bound to [::]:8333\n456007:2020-09-28T10:33:52Z Bound to 0.0.0.0:8333\n```\nthis branch\n```\n456232:2020-09-28T11:16:58Z Bound to [::]:8333\n456233:2020-09-28T11:16:58Z Bound to 0.0.0.0:8333\n456234:2020-09-28T11:16:58Z Bound to 127.0.0.1:8334\n```",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r495864912,495864912,src/torcontrol.cpp
vasild,2020-09-29 12:50:18,Thanks! It just occurred to me that the default for `-bind` (with this PR) is not `127.0.0.1:8334=onion` like in the description above. It is rather `-bind=0.0.0.0:8333 -bind=127.0.0.1:8334=onion`.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496689477,496689477,src/init.cpp
vasild,2020-09-29 13:08:05,"I think it is not good to introduce one behavior and change it later. Like ""ignore all but last `-bind=addr:port=onion`"" and later change it to something else because users may start to depend on the first one.\n\nIf supporting more than one `-bind=addr:port=onion` is undesired then what about emitting an error in that case?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496701511,496701511,src/init.cpp
vasild,2020-09-29 13:11:25,"Sorry, I misread the code.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496703810,496703810,src/init.cpp
vasild,2020-09-29 13:29:27,"Ok, drop this. I suggested it because members below use `m_` prefix. But members above don't!",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496716895,496716895,src/net.h
hebasto,2020-09-29 13:37:52,"https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-700702839\n\n:D",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496723371,496723371,src/net.h
vasild,2020-09-29 13:42:22,"That would couple the two things together under one option, making it impossible to configure them independently:\n\nN | auto create hidden service (`-listenonion`) | extra bind (`-bind=addr:port=onion`)\n---|---|---\n1 | no | no\n2 | no | yes\n3 | yes | no\n4 | yes | yes",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496726904,496726904,src/net.cpp
vasild,2020-09-29 14:02:43,"Yes, this is only relevant if a routable address is supplied to `-bind=addr:port=onion`.\n\nThe added `NetPermissionFlags::PF_ONION` works, but is strange because that is not a ""permission"". It is just a flag telling `Bind()` ""this is a covert bind address, don't advertise it"". Isn't `enum BindFlags` more suitable for it? `BF_DONT_ADVERTISE` or `BF_COVERT`?\n\nIn any case - the `_ONION` in the",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496743497,496743497,src/net.cpp
vasild,2020-09-29 14:07:55,"> Should we warn that only the last =onion argument will be kept if more than one is passed?\n\nRight, or even error :bomb: or support more than one `=onion`.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496747544,496747544,src/init.cpp
hebasto,2020-09-29 16:35:03,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700831638).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496881439,496881439,src/init.cpp
hebasto,2020-09-29 16:35:20,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700831638).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496881619,496881619,src/init.cpp
hebasto,2020-09-29 16:35:41,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700831638).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496881834,496881834,src/net.cpp
hebasto,2020-09-29 16:36:07,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700831638).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496882119,496882119,src/net.cpp
hebasto,2020-09-29 16:36:41,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-700831638).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r496882465,496882465,src/init.cpp
laanwj,2020-09-30 10:03:31,"I really hope we can avoid introducing this circular dependency.\n\nLooks like this is due to only one line: `onion_binds.push_back(DefaultOnionServiceTarget());`\nlet just pass this value in.\n",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r497391823,497391823,src/net.cpp
hebasto,2020-09-30 13:34:25,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-701394030).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r497513349,497513349,src/net.cpp
Sjors,2020-10-01 14:10:25,These flags would benefit from some documentation.,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498274458,498274458,src/net.cpp
vasild,2020-10-01 14:52:03,"nit: `!(a & b)` is the same as `(a & b) == 0`, use just either one for consistency, not both.",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498306575,498306575,src/net.cpp
vasild,2020-10-01 14:53:21,"nit:\n\n```suggestion\n            InitWarning(strprintf(_(""More than one onion bind address is provided. Using %s for the automatically created hidden service.""), bind_addr.ToStringIPPort()));\n```",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498307586,498307586,src/init.cpp
vasild,2020-10-01 14:58:15,Maybe change the `onion_binds` argument to `const` reference?,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498311386,498311386,src/net.cpp
vasild,2020-10-01 15:02:46,"Is this change still needed after recent mods to this PR? If ""yes"", then why is it needed?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498314755,498314755,test/functional/test_framework/test_framework.py
hebasto,2020-10-01 16:30:52,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702253099).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498374300,498374300,src/net.cpp
hebasto,2020-10-01 16:31:43,[Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702253099).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498374763,498374763,src/net.cpp
hebasto,2020-10-01 16:31:54,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702253099).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498374890,498374890,src/init.cpp
hebasto,2020-10-01 16:32:05,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702253099).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498374964,498374964,src/net.cpp
hebasto,2020-10-01 16:32:26,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19991#issuecomment-702253099).,https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498375133,498375133,test/functional/test_framework/test_framework.py
vasild,2020-10-02 09:42:56,"nit: maybe `BF_REPORT_ERROR` should be here too, like with `binds` and `whiteBinds`?",https://github.com/bitcoin/bitcoin/pull/19991#discussion_r498721063,498721063,src/net.cpp
