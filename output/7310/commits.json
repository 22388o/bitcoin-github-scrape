[
  {
    "sha": "9001c6050b817f9c2e37bd62154fdca6fe9dc573",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDAxYzYwNTBiODE3ZjljMmUzN2JkNjIxNTRmZGNhNmZlOWRjNTcz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-30T16:19:08Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-25T19:19:20Z"
      },
      "message": "MOVEONLY: Libconsensus: Move consensus functions away from main.cpp",
      "tree": {
        "sha": "46dbbb95a47253975be69dd34a7ab46f7e6f2b67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46dbbb95a47253975be69dd34a7ab46f7e6f2b67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9001c6050b817f9c2e37bd62154fdca6fe9dc573",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9001c6050b817f9c2e37bd62154fdca6fe9dc573",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9001c6050b817f9c2e37bd62154fdca6fe9dc573",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9001c6050b817f9c2e37bd62154fdca6fe9dc573/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80d1f2e48364f05b2cdf44239b3a1faa0277e58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80d1f2e48364f05b2cdf44239b3a1faa0277e58e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80d1f2e48364f05b2cdf44239b3a1faa0277e58e"
      }
    ],
    "stats": {
      "total": 925,
      "additions": 495,
      "deletions": 430
    },
    "files": [
      {
        "sha": "7a66f5840e81e629d0618c2b3dae7e8a3251e660",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -179,6 +179,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/consensus.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "32d1937335685380ff09f8440ccb75d96092168e",
        "filename": "src/consensus/consensus.cpp",
        "status": "added",
        "additions": 387,
        "deletions": 0,
        "changes": 387,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -0,0 +1,387 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus.h\"\n+\n+#include \"merkle.h\"\n+#include \"pow.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validation.h\"\n+#include \"version.h\"\n+\n+// TODO remove the following dependencies\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"coins.h\"\n+#include \"timedata.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+using namespace std;\n+\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n+{\n+    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n+    // Force block reward to zero when right shift is undefined.\n+    if (halvings >= 64)\n+        return 0;\n+\n+    CAmount nSubsidy = 50 * COIN;\n+    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n+    nSubsidy >>= halvings;\n+    return nSubsidy;\n+}\n+\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if (tx.nLockTime == 0)\n+        return true;\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+unsigned int GetLegacySigOpCount(const CTransaction& tx)\n+{\n+    unsigned int nSigOps = 0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        nSigOps += txin.scriptSig.GetSigOpCount(false);\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n+    }\n+    return nSigOps;\n+}\n+\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        if (txout.nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (txout.nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs\n+    set<COutPoint> vInOutPoints;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        if (vInOutPoints.count(txin.prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(txin.prevout);\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            if (txin.prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+\n+    return true;\n+}\n+\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+{\n+    // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+    // for an attacker to attempt to split the network.\n+    if (!inputs.HaveInputs(tx))\n+        return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n+\n+    CAmount nValueIn = 0;\n+    CAmount nFees = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+\n+        const COutPoint &prevout = tx.vin[i].prevout;\n+        const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+        assert(coins);\n+\n+        // If prev is coinbase, check that it's matured\n+        if (coins->IsCoinBase()) {\n+            if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                return state.Invalid(false, REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                                     strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n+        }\n+\n+        // Check for negative or overflow input values\n+        nValueIn += coins->vout[prevout.n].nValue;\n+        if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+    }\n+\n+    if (nValueIn < tx.GetValueOut())\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+                         strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+\n+    // Tally transaction fees\n+    CAmount nTxFee = nValueIn - tx.GetValueOut();\n+    if (nTxFee < 0)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+    nFees += nTxFee;\n+    if (!MoneyRange(nFees))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+\n+    return true;\n+}\n+\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+{\n+    // Check proof of work matches claimed amount\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n+\n+    // Check timestamp\n+    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n+\n+    return true;\n+}\n+\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n+{\n+    // These are checks that are independent of context.\n+\n+    if (block.fChecked)\n+        return true;\n+\n+    // Check that the header is valid (particularly PoW).  This is mostly\n+    // redundant with the call in AcceptBlockHeader.\n+    if (!CheckBlockHeader(block, state, fCheckPOW))\n+        return false;\n+\n+    // Check the merkle root.\n+    if (fCheckMerkleRoot) {\n+        bool mutated;\n+        uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n+        if (block.hashMerkleRoot != hashMerkleRoot2)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true, \"hashMerkleRoot mismatch\");\n+\n+        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+        // of transactions in a block without affecting the merkle root of a block,\n+        // while still invalidating it.\n+        if (mutated)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true, \"duplicate transaction\");\n+    }\n+\n+    // All potential-corruption validation must be done before we do any\n+    // transaction validation, as otherwise we may mark the header as invalid\n+    // because we receive the wrong transactions for it.\n+\n+    // Size limits\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n+\n+    // First transaction must be coinbase, the rest must not be\n+    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", false, \"first tx is not coinbase\");\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (block.vtx[i].IsCoinBase())\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n+\n+    // Check transactions\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!CheckTransaction(tx, state))\n+            return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n+                                 strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n+\n+    unsigned int nSigOps = 0;\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    {\n+        nSigOps += GetLegacySigOpCount(tx);\n+    }\n+    if (nSigOps > MAX_BLOCK_SIGOPS)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n+\n+    if (fCheckPOW && fCheckMerkleRoot)\n+        block.fChecked = true;\n+\n+    return true;\n+}\n+\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    // Check proof of work\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n+\n+    // Check timestamp against prev\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n+\n+    // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n+    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n+        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(v%d)\", version - 1),\n+                                 strprintf(\"rejected nVersion=%d block\", version - 1));\n+\n+    return true;\n+}\n+\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+\n+    // Check that all transactions are finalized\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        int nLockTimeFlags = 0;\n+        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? pindexPrev->GetMedianTimePast()\n+                                : block.GetBlockTime();\n+        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n+        }\n+    }\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    {\n+        CScript expect = CScript() << nHeight;\n+        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n+            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\", false, \"block height mismatch in coinbase\");\n+        }\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "0f34e126a1e67a64329f642b53d297b0e3cca399",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -6,6 +6,18 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"amount.h\"\n+#include \"consensus/params.h\"\n+\n+#include <stdint.h>\n+\n+class CBlock;\n+class CBlockHeader;\n+class CBlockIndex;\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n@@ -22,4 +34,94 @@ enum {\n     LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n };\n \n+/**\n+ * Context-independent CTransaction validity checks.\n+ * Nobody should spend an extra cycle on a transaction that doesn't pass this.\n+ */\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n+\n+/**\n+ * Consensus validations (for Script, Tx, Header and Block):\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/** Transaction validation functions */\n+\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+\n+} // namespace Consensus\n+\n+/** Block Header validation functions */\n+\n+/**\n+ * Context-independent CBlockHeader validity checks\n+ */\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n+/**\n+ * Context-dependent CBlockHeader validity checks.\n+ * By \"context\", we mean only the previous block headers, but not the UTXO set.\n+ * UTXO-related validity checks are still done in main::ConnectBlock().\n+ */\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev);\n+\n+/** Block validation functions */\n+\n+/**\n+ * Context-independent CBlock validity checks\n+ */\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+/**\n+ * Context-dependent CBlock validity checks\n+ */\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindexPrev);\n+\n+/** Transaction validation utility functions */\n+\n+/**\n+ * Check if transaction is final and can be included in a block with the\n+ * specified height and time. Consensus critical.\n+ */\n+bool IsFinalTx(const CTransaction& tx, int nBlockHeight, int64_t nBlockTime);\n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction& tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair);\n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n+ * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n+ */\n+bool SequenceLocks(const CTransaction& tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+/**\n+ * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+ * @return number of sigops this transaction's outputs will produce when spent\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+/**\n+ * Count ECDSA signature operations in pay-to-script-hash inputs.\n+ * \n+ * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n+ * @return maximum number of sigops required to validate this transaction's inputs\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+/** Block validation utility functions */\n+\n+// TODO make static again\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "0ba4cf1c4cd2b1d1d21876081c1217d2a4fa9db4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 382,
        "changes": 382,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -91,11 +91,6 @@ map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -666,19 +661,6 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     return nEvicted;\n }\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if (tx.nLockTime == 0)\n-        return true;\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n-            return false;\n-    }\n-    return true;\n-}\n-\n bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n@@ -711,89 +693,6 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-/**\n- * Calculates the block height and previous block's median time past at\n- * which the transaction will be considered final in the context of BIP 68.\n- * Also removes from the vector of input heights any entries which did not\n- * correspond to sequence locked inputs as they do not affect the calculation.\n- */\n-static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n-{\n-    assert(prevHeights->size() == tx.vin.size());\n-\n-    // Will be set to the equivalent height- and time-based nLockTime\n-    // values that would be necessary to satisfy all relative lock-\n-    // time constraints given our view of block chain history.\n-    // The semantics of nLockTime are the last invalid height/time, so\n-    // use -1 to have the effect of any height or time being valid.\n-    int nMinHeight = -1;\n-    int64_t nMinTime = -1;\n-\n-    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n-    // we would be doing a signed comparison and half the range of nVersion\n-    // wouldn't support BIP 68.\n-    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n-                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n-\n-    // Do not enforce sequence numbers as a relative lock time\n-    // unless we have been instructed to\n-    if (!fEnforceBIP68) {\n-        return std::make_pair(nMinHeight, nMinTime);\n-    }\n-\n-    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n-        const CTxIn& txin = tx.vin[txinIndex];\n-\n-        // Sequence numbers with the most significant bit set are not\n-        // treated as relative lock-times, nor are they given any\n-        // consensus-enforced meaning at this point.\n-        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n-            // The height of this input is not relevant for sequence locks\n-            (*prevHeights)[txinIndex] = 0;\n-            continue;\n-        }\n-\n-        int nCoinHeight = (*prevHeights)[txinIndex];\n-\n-        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n-            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n-            // NOTE: Subtract 1 to maintain nLockTime semantics\n-            // BIP 68 relative lock times have the semantics of calculating\n-            // the first block or time at which the transaction would be\n-            // valid. When calculating the effective block time or height\n-            // for the entire transaction, we switch to using the\n-            // semantics of nLockTime which is the last invalid block\n-            // time or height.  Thus we subtract 1 from the calculated\n-            // time or height.\n-\n-            // Time-based relative lock-times are measured from the\n-            // smallest allowed timestamp of the block containing the\n-            // txout being spent, which is the median time past of the\n-            // block prior.\n-            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n-        } else {\n-            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n-        }\n-    }\n-\n-    return std::make_pair(nMinHeight, nMinTime);\n-}\n-\n-static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n-{\n-    assert(block.pprev);\n-    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n-    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n-        return false;\n-\n-    return true;\n-}\n-\n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n-{\n-    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n-}\n-\n bool CheckSequenceLocks(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n@@ -832,91 +731,6 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags)\n     return EvaluateSequenceLocks(index, lockPair);\n }\n \n-\n-unsigned int GetLegacySigOpCount(const CTransaction& tx)\n-{\n-    unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n-    }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n-    }\n-    return nSigOps;\n-}\n-\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-\n-    return true;\n-}\n-\n void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0)\n@@ -1490,19 +1304,6 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     return true;\n }\n \n-CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n-{\n-    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n-    // Force block reward to zero when right shift is undefined.\n-    if (halvings >= 64)\n-        return 0;\n-\n-    CAmount nSubsidy = 50 * COIN;\n-    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n-    nSubsidy >>= halvings;\n-    return nSubsidy;\n-}\n-\n bool IsInitialBlockDownload()\n {\n     const CChainParams& chainParams = Params();\n@@ -1703,52 +1504,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n-{\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n-            assert(coins);\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase()) {\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(false,\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n-                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n-            }\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coins->vout[prevout.n].nValue;\n-            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-\n-        }\n-\n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n-                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n-    return true;\n-}\n-}// namespace Consensus\n-\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n@@ -3054,80 +2809,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n-{\n-    // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n-\n-    // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n-\n-    return true;\n-}\n-\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n-{\n-    // These are checks that are independent of context.\n-\n-    if (block.fChecked)\n-        return true;\n-\n-    // Check that the header is valid (particularly PoW).  This is mostly\n-    // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n-        return false;\n-\n-    // Check the merkle root.\n-    if (fCheckMerkleRoot) {\n-        bool mutated;\n-        uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n-        if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true, \"hashMerkleRoot mismatch\");\n-\n-        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n-        // of transactions in a block without affecting the merkle root of a block,\n-        // while still invalidating it.\n-        if (mutated)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true, \"duplicate transaction\");\n-    }\n-\n-    // All potential-corruption validation must be done before we do any\n-    // transaction validation, as otherwise we may mark the header as invalid\n-    // because we receive the wrong transactions for it.\n-\n-    // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n-\n-    // First transaction must be coinbase, the rest must not be\n-    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", false, \"first tx is not coinbase\");\n-    for (unsigned int i = 1; i < block.vtx.size(); i++)\n-        if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n-\n-    // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!CheckTransaction(tx, state))\n-            return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n-                                 strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n-\n-    unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-    {\n-        nSigOps += GetLegacySigOpCount(tx);\n-    }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n-\n-    if (fCheckPOW && fCheckMerkleRoot)\n-        block.fChecked = true;\n-\n-    return true;\n-}\n-\n static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const CChainParams& chainparams, const uint256& hash)\n {\n     if (*pindexPrev->phashBlock == chainparams.GetConsensus().hashGenesisBlock)\n@@ -3142,56 +2823,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n-{\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n-\n-    // Check timestamp against prev\n-    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n-\n-    // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n-        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(v%d)\", version - 1),\n-                                 strprintf(\"rejected nVersion=%d block\", version - 1));\n-\n-    return true;\n-}\n-\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n-{\n-    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-\n-    // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n-        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n-            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n-        }\n-    }\n-\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n-    {\n-        CScript expect = CScript() << nHeight;\n-        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n-            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\", false, \"block height mismatch in coinbase\");\n-        }\n-    }\n-\n-    return true;\n-}\n-\n static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex=NULL)\n {\n     AssertLockHeld(cs_main);\n@@ -3303,19 +2934,6 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp)\n {\n     {"
      },
      {
        "sha": "bd1f09be7a05b14c4148154f3478958996b1b3dd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -244,7 +244,6 @@ std::string GetWarnings(const std::string& strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n-CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n  * Prune block and undo files (blk???.dat and undo???.dat) so that the disk space used is less than a user-defined target.\n@@ -318,24 +317,6 @@ struct CDiskTxPos : public CDiskBlockPos\n     }\n };\n \n-\n-/** \n- * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n- * @return number of sigops this transaction's outputs will produce when spent\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetLegacySigOpCount(const CTransaction& tx);\n-\n-/**\n- * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n- * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n- * @return maximum number of sigops required to validate this transaction's inputs\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n@@ -347,15 +328,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n-/**\n- * Check if transaction is final and can be included in a block with the\n- * specified height and time. Consensus critical.\n- */\n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n-\n /**\n  * Check if transaction will be final in the next block to be created.\n  *\n@@ -364,13 +336,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * See consensus/consensus.h for flag definitions.\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n-\n-/**\n- * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n- * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n- */\n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n-\n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n  *\n@@ -422,16 +387,6 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n \n /** Functions for validating blocks and updating the block tree */\n \n-/** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n-\n-/** Context-dependent validity checks.\n- *  By \"context\", we mean only the previous block headers, but not the UTXO\n- *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n-\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */"
      },
      {
        "sha": "1a8c61dfeba0cbb2b95b1becfc563f717b41c1b5",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n \n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "5e18640a2255370562c71306b1fe3f772389263a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "b42ff4419e4cfa155af217321f41290c9c6dc431",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -7,11 +7,12 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\" // For CheckTransaction\n+#include \"main.h\" // For cs_main, minRelayTxFee and DEFAULT_MIN_RELAY_TX_FEE\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\""
      },
      {
        "sha": "aed7ea312f8330d817cabb4fb3e542b37011c732",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9001c6050b817f9c2e37bd62154fdca6fe9dc573/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9001c6050b817f9c2e37bd62154fdca6fe9dc573",
        "patch": "@@ -6,8 +6,8 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      }
    ]
  }
]