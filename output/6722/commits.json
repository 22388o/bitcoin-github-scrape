[
  {
    "sha": "78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGI4MmY0YTE2ZDhhYWQxNWVmMzk3YjFhMWNkMDc1YjJlZmM4YzE2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-09-24T17:21:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:44:03Z"
      },
      "message": "Reverse the sort on the mempool's feerate index",
      "tree": {
        "sha": "c6aef9e8f52ce6f18fc3fb710ed03d5ea1cd1a28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6aef9e8f52ce6f18fc3fb710ed03d5ea1cd1a28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 25,
      "deletions": 25
    },
    "files": [
      {
        "sha": "79d806bd224204f155b856ad68b8d4d2bb313bbd",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "patch": "@@ -153,11 +153,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n-    sortedOrder[0] = tx2.GetHash().ToString(); // 20000\n-    sortedOrder[1] = tx4.GetHash().ToString(); // 15000\n+    sortedOrder[0] = tx3.GetHash().ToString(); // 0\n+    sortedOrder[1] = tx5.GetHash().ToString(); // 10000\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n-    sortedOrder[3] = tx5.GetHash().ToString(); // 10000\n-    sortedOrder[4] = tx3.GetHash().ToString(); // 0\n+    sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n+    sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n     CheckSort(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -169,7 +169,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 0LL, 1, 10.0, 1, true));\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n-    sortedOrder.push_back(tx6.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n@@ -194,9 +194,9 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 7);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n-    sortedOrder.erase(sortedOrder.end()-1);\n-    sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    sortedOrder.insert(sortedOrder.begin(), tx7.GetHash().ToString());\n+    sortedOrder.erase(sortedOrder.begin());\n+    sortedOrder.push_back(tx6.GetHash().ToString());\n+    sortedOrder.push_back(tx7.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx8.GetHash(), CTxMemPoolEntry(tx8, 0LL, 2, 10.0, 1, true), setAncestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n-    sortedOrder.push_back(tx8.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n@@ -226,7 +226,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n-    sortedOrder.push_back(tx9.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n@@ -255,21 +255,21 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n      *  tx8 and tx9 should both now be sorted higher\n      *  Final order after tx10 is added:\n      *\n-     *  tx7 = 2.2M (4 txs)\n-     *  tx6 = 2.2M (5 txs)\n-     *  tx10 = 200k (1 tx)\n-     *  tx8 = 200k (2 txs)\n-     *  tx9 = 200k (2 txs)\n-     *  tx2 = 20000 (1)\n-     *  tx4 = 15000 (1)\n-     *  tx1 = 10000 (1)\n-     *  tx5 = 10000 (1)\n      *  tx3 = 0 (1)\n+     *  tx5 = 10000 (1)\n+     *  tx1 = 10000 (1)\n+     *  tx4 = 15000 (1)\n+     *  tx2 = 20000 (1)\n+     *  tx9 = 200k (2 txs)\n+     *  tx8 = 200k (2 txs)\n+     *  tx10 = 200k (1 tx)\n+     *  tx6 = 2.2M (5 txs)\n+     *  tx7 = 2.2M (4 txs)\n      */\n-    sortedOrder.erase(sortedOrder.end()-2, sortedOrder.end()); // take out tx8, tx9 from the end\n-    sortedOrder.insert(sortedOrder.begin()+2, tx10.GetHash().ToString()); // tx10 is after tx6\n-    sortedOrder.insert(sortedOrder.begin()+3, tx9.GetHash().ToString());\n-    sortedOrder.insert(sortedOrder.begin()+3, tx8.GetHash().ToString());\n+    sortedOrder.erase(sortedOrder.begin(), sortedOrder.begin()+2); // take out tx9, tx8 from the beginning\n+    sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n     CheckSort(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool"
      },
      {
        "sha": "2085b718e26c20494bc1c92be86998dd663f340f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "patch": "@@ -160,9 +160,9 @@ class CompareTxMemPoolEntryByFee\n         double f2 = aSize * bFees;\n \n         if (f1 == f2) {\n-            return a.GetTime() < b.GetTime();\n+            return a.GetTime() >= b.GetTime();\n         }\n-        return f1 > f2;\n+        return f1 < f2;\n     }\n \n     // Calculate which feerate to use for an entry (avoiding division)."
      }
    ]
  },
  {
    "sha": "49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWI2ZmQ1NjYzZGZlMDgxZDEyN2NkMWViMTE0MDdjNGQzZWFmOTNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-02T21:43:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:44:03Z"
      },
      "message": "Add Mempool Expire function to remove old transactions\n\n(note the 9x multiplier on (void*)'s for CTxMemPool::DynamicMemoryUsage\n was accidentally introduced in 5add7a7 but should have waited for this\n commit which adds the extra index)",
      "tree": {
        "sha": "30caec98dd3dc4fae4aef494ff04b0df81778ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30caec98dd3dc4fae4aef494ff04b0df81778ca4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "22f0525b320db7e5c0e6d0733e6d35d1b1140903",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -320,6 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32"
      },
      {
        "sha": "ec7cc2fdc6547f79e8ce9427bd6a46e11688045e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -51,6 +51,8 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 900;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 1000;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 2500;\n+/** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n+static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      },
      {
        "sha": "57bb284602135a3b3e7521520fb75b9743e935b5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -792,6 +792,22 @@ void CTxMemPool::RemoveStaged(setEntries &stage) {\n     }\n }\n \n+int CTxMemPool::Expire(int64_t time) {\n+    LOCK(cs);\n+    indexed_transaction_set::nth_index<2>::type::iterator it = mapTx.get<2>().begin();\n+    setEntries toremove;\n+    while (it != mapTx.get<2>().end() && it->GetTime() < time) {\n+        toremove.insert(mapTx.project<0>(it));\n+        it++;\n+    }\n+    setEntries stage;\n+    BOOST_FOREACH(txiter removeit, toremove) {\n+        CalculateDescendants(removeit, stage);\n+    }\n+    RemoveStaged(stage);\n+    return stage.size();\n+}\n+\n bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n {\n     LOCK(cs);"
      },
      {
        "sha": "635b66fb85081778e4284662c0a5e5f19b576ab8",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -211,9 +211,10 @@ class CInPoint\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 2 criteria:\n+ * mapTx is a boost::multi_index that sorts the mempool on 3 criteria:\n  * - transaction hash\n  * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n+ * - time in mempool\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given\n@@ -294,6 +295,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByFee\n+            >,\n+            // sorted by entry time\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByEntryTime\n             >\n         >\n     > indexed_transaction_set;\n@@ -397,6 +403,9 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n+    /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n+    int Expire(int64_t time);\n+\n     unsigned long size()\n     {\n         LOCK(cs);"
      }
    ]
  },
  {
    "sha": "9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzliNjZmNzcxYWQ5MDRjZDY2NWY3ZjVmNjhlMzI3OWViYjJmYTdl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-02T21:17:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:44:03Z"
      },
      "message": "Fix calling mempool directly, instead of pool, in ATMP",
      "tree": {
        "sha": "ee023e54b896bcbe5d5eee7bb87da639e5bd852a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee023e54b896bcbe5d5eee7bb87da639e5bd852a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 13,
      "deletions": 16
    },
    "files": [
      {
        "sha": "613eeff2272ae49f7fa25460bbcb306699fb3f1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "patch": "@@ -740,17 +740,14 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n {\n-    {\n-        LOCK(mempool.cs);\n-        uint256 hash = tx.GetHash();\n-        double dPriorityDelta = 0;\n-        CAmount nFeeDelta = 0;\n-        mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-        if (dPriorityDelta > 0 || nFeeDelta > 0)\n-            return 0;\n-    }\n+    uint256 hash = tx.GetHash();\n+    double dPriorityDelta = 0;\n+    CAmount nFeeDelta = 0;\n+    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n+    if (dPriorityDelta > 0 || nFeeDelta > 0)\n+        return 0;\n \n     CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n@@ -879,11 +876,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, pool, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));"
      },
      {
        "sha": "aa5aec0556bb6534246940802804194d0b3bc88a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "patch": "@@ -735,10 +735,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n     const std::pair<double, CAmount> &deltas = pos->second;"
      },
      {
        "sha": "cee1a146dab2f6a31a943078d36e6b9d2aadc629",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "patch": "@@ -83,7 +83,7 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    CAmount GetFee() const { return nFee; }\n+    const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -371,7 +371,7 @@ class CTxMemPool\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n+    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n \n public:"
      }
    ]
  },
  {
    "sha": "e8bcdce8a245af235f8be9853c8f81c9bda56412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGJjZGNlOGEyNDVhZjIzNWY4YmU5ODUzYzhmODFjOWJkYTU2NDEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:57:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:00:19Z"
      },
      "message": "Track (and define) ::minRelayTxFee in CTxMemPool",
      "tree": {
        "sha": "2404fef3f821029474459fbf6e5941757581a865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2404fef3f821029474459fbf6e5941757581a865"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8bcdce8a245af235f8be9853c8f81c9bda56412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e8d76dd2f1d558a0197242395748c30aeaa1ce11",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "patch": "@@ -305,15 +305,16 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n     }\n }\n \n-CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n+CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     fSanityCheck = false;\n \n-    minerPolicyEstimator = new CBlockPolicyEstimator(_minRelayFee);\n+    minerPolicyEstimator = new CBlockPolicyEstimator(_minReasonableRelayFee);\n+    minReasonableRelayFee = _minReasonableRelayFee;\n }\n \n CTxMemPool::~CTxMemPool()"
      },
      {
        "sha": "e45867f71357854056aaae4e8caf6b90917ab896",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "patch": "@@ -285,6 +285,8 @@ class CTxMemPool\n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n+    CFeeRate minReasonableRelayFee;\n+\n public:\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n@@ -334,7 +336,12 @@ class CTxMemPool\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n-    CTxMemPool(const CFeeRate& _minRelayFee);\n+    /** Create a new CTxMemPool.\n+     *  minReasonableRelayFee should be a feerate which is, roughly, somewhere\n+     *  around what it \"costs\" to relay a transaction around the network and\n+     *  below which we would reasonably say a transaction has 0-effective-fee.\n+     */\n+    CTxMemPool(const CFeeRate& _minReasonableRelayFee);\n     ~CTxMemPool();\n \n     /**"
      }
    ]
  },
  {
    "sha": "241d6078ba26db4d3a36227d3275be2ee34625a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDFkNjA3OGJhMjZkYjRkM2EzNjIyN2QzMjc1YmUyZWUzNDYyNWE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:53:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:04:39Z"
      },
      "message": "Add CFeeRate += operator",
      "tree": {
        "sha": "717da978c3a0e4cd6e55b91fdf0452e5f838896c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/717da978c3a0e4cd6e55b91fdf0452e5f838896c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/241d6078ba26db4d3a36227d3275be2ee34625a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d6078ba26db4d3a36227d3275be2ee34625a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/241d6078ba26db4d3a36227d3275be2ee34625a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d6078ba26db4d3a36227d3275be2ee34625a6/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8bcdce8a245af235f8be9853c8f81c9bda56412"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a4c7764cda2bfd3a7afcc4ffa9a286eb0a42a4c3",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/241d6078ba26db4d3a36227d3275be2ee34625a6/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/241d6078ba26db4d3a36227d3275be2ee34625a6/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=241d6078ba26db4d3a36227d3275be2ee34625a6",
        "patch": "@@ -51,6 +51,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n \n     ADD_SERIALIZE_METHODS;"
      }
    ]
  },
  {
    "sha": "e6c7b362ab8915e2aac167fa519bd29836d482af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmM3YjM2MmFiODkxNWUyYWFjMTY3ZmE1MTliZDI5ODM2ZDQ4MmFm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-08T07:46:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:05:43Z"
      },
      "message": "Print mempool size in KB when adding txn",
      "tree": {
        "sha": "d34bdd92b0f60688a50c4461fb6335189cb895dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d34bdd92b0f60688a50c4461fb6335189cb895dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c7b362ab8915e2aac167fa519bd29836d482af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c7b362ab8915e2aac167fa519bd29836d482af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c7b362ab8915e2aac167fa519bd29836d482af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c7b362ab8915e2aac167fa519bd29836d482af/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "241d6078ba26db4d3a36227d3275be2ee34625a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d6078ba26db4d3a36227d3275be2ee34625a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/241d6078ba26db4d3a36227d3275be2ee34625a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f01bb8ec9e2f7e259c71624bcddc29111b2074b1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c7b362ab8915e2aac167fa519bd29836d482af/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c7b362ab8915e2aac167fa519bd29836d482af/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e6c7b362ab8915e2aac167fa519bd29836d482af",
        "patch": "@@ -4287,10 +4287,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n-                mempool.size());\n+                mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n             set<NodeId> setMisbehaving;"
      }
    ]
  },
  {
    "sha": "794a8cec5db84fde1cce82ada51740070ec188ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTRhOGNlYzVkYjg0ZmRlMWNjZTgyYWRhNTE3NDAwNzBlYzE4OGFj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-02T21:19:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:27Z"
      },
      "message": "Implement on-the-fly mempool size limitation.\n\nAfter each transaction which is added to mempool, we first call\nExpire() to remove old transactions, then throwing away the\nlowest-feerate transactions.\n\nAfter throwing away transactions by feerate, we set the minimum\nrelay fee to the maximum fee transaction-and-dependant-set we\nremoved, plus the default minimum relay fee.\n\nAfter the next block is received, the minimum relay fee is allowed\nto decrease exponentially. Its halflife defaults to 12 hours, but\nis decreased to 6 hours if the mempool is smaller than half its\nmaximum size, and 3 hours if the mempool is smaller than a quarter\nits maximum size.\n\nThe minimum -maxmempool size is 40*-limitdescendantsize, as it is\neasy for an attacker to play games with the cheapest\n-limitdescendantsize transactions. -maxmempool defaults to 300MB.\n\nThis disables high-priority transaction relay when the min relay\nfee adjustment is >0 (ie when the mempool is full). When the relay\nfee adjustment drops below the default minimum relay fee / 2 it is\nset to 0 (re-enabling priority-based free relay).",
      "tree": {
        "sha": "35b6750a3dc813c635fb304f9d7658b2695edb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35b6750a3dc813c635fb304f9d7658b2695edb70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/794a8cec5db84fde1cce82ada51740070ec188ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a8cec5db84fde1cce82ada51740070ec188ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/794a8cec5db84fde1cce82ada51740070ec188ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a8cec5db84fde1cce82ada51740070ec188ac/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6c7b362ab8915e2aac167fa519bd29836d482af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c7b362ab8915e2aac167fa519bd29836d482af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c7b362ab8915e2aac167fa519bd29836d482af"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 106,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e3ad63a56e9d99f7cd23fbec2f45de9c8da7c53f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -320,6 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n@@ -842,6 +843,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n+    // -mempoollimit limits\n+    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n+        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)"
      },
      {
        "sha": "c1df9998a9e73cd28453b0a73b9fa4d1aad801fc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -885,8 +885,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));\n \n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+            // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n@@ -951,6 +954,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n+\n+        // trim mempool and check if tx was trimmed\n+        int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        if (expired != 0)\n+            LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+\n+        pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        if (!pool.exists(tx.GetHash()))\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n     }\n \n     SyncWithWallets(tx, NULL);"
      },
      {
        "sha": "be0d2bf47d26c74fca8dc3783f921645069b8de6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -51,6 +51,8 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 900;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 1000;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 2500;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      },
      {
        "sha": "7563c0788040152a07f4abfaee8e489b47b32f46",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -13,6 +13,7 @@\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utiltime.h\"\n #include \"version.h\"\n \n using namespace std;\n@@ -308,6 +309,8 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n+    clear();\n+\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n@@ -539,6 +542,8 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     }\n     // After the txs in the new block have been removed from the mempool, update policy estimates\n     minerPolicyEstimator->processBlock(nBlockHeight, entries, fCurrentEstimate);\n+    lastRollingFeeUpdate = GetTime();\n+    blockSinceLastRollingFeeBump = true;\n }\n \n void CTxMemPool::clear()\n@@ -549,6 +554,9 @@ void CTxMemPool::clear()\n     mapNextTx.clear();\n     totalTxSize = 0;\n     cachedInnerUsage = 0;\n+    lastRollingFeeUpdate = GetTime();\n+    blockSinceLastRollingFeeBump = false;\n+    rollingMinimumFeeRate = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -854,3 +862,60 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        double halflife = ROLLING_FEE_HALFLIFE;\n+        if (DynamicMemoryUsage() < sizelimit / 4)\n+            halflife /= 4;\n+        else if (DynamicMemoryUsage() < sizelimit / 2)\n+            halflife /= 2;\n+\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n+        lastRollingFeeUpdate = time;\n+\n+        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2)\n+            rollingMinimumFeeRate = 0;\n+    }\n+    return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n+}\n+\n+void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+void CTxMemPool::TrimToSize(size_t sizelimit) {\n+    LOCK(cs);\n+\n+    unsigned nTxnRemoved = 0;\n+    CFeeRate maxFeeRateRemoved(0);\n+    while (DynamicMemoryUsage() > sizelimit) {\n+        indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n+\n+        // We set the new mempool min fee to either the feerate of the removed set,\n+        // or the \"minimum reasonable fee rate\" (ie some value under which we consider\n+        // txn to have 0 fee). This way, if the mempool reaches its full size on free\n+        // txn, we will simply disable free txn until there is a block, and some time.\n+        CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n+        removed += minReasonableRelayFee;\n+        trackPackageRemoved(removed);\n+        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+\n+        setEntries stage;\n+        CalculateDescendants(mapTx.project<0>(it), stage);\n+        RemoveStaged(stage);\n+        nTxnRemoved += stage.size();\n+    }\n+\n+    if (maxFeeRateRemoved > CFeeRate(0))\n+        LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n+}"
      },
      {
        "sha": "e8572e7bdad57aa639476c0eb10d2bae6ff6b47c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -287,6 +287,13 @@ class CTxMemPool\n \n     CFeeRate minReasonableRelayFee;\n \n+    mutable int64_t lastRollingFeeUpdate;\n+    mutable bool blockSinceLastRollingFeeBump;\n+    mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n+    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12;\n+\n+    void trackPackageRemoved(const CFeeRate& rate);\n+\n public:\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n@@ -410,6 +417,17 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n+    /** The minimum fee to get into the mempool, which may itself not be enough\n+\t *  for larger-sized transactions.\n+\t *  The minReasonableRelayFee constructor arg is used to bound the time it\n+     *  takes the fee rate to go back down all the way to 0. When the feerate\n+     *  would otherwise be half of this, it is set to 0 instead.\n+\t */\n+    CFeeRate GetMinFee(size_t sizelimit) const;\n+\n+    /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */\n+    void TrimToSize(size_t sizelimit);\n+\n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n     int Expire(int64_t time);\n "
      }
    ]
  },
  {
    "sha": "d355cf4420043a866e418c97778d999cd1958f61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzU1Y2Y0NDIwMDQzYTg2NmU0MThjOTc3NzhkOTk5Y2QxOTU4ZjYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-02T21:20:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:38Z"
      },
      "message": "Only call TrimToSize once per reorg/blocks disconnect",
      "tree": {
        "sha": "ffd7f4048f86201a3737bb04a795d1c5c60970b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffd7f4048f86201a3737bb04a795d1c5c60970b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d355cf4420043a866e418c97778d999cd1958f61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d355cf4420043a866e418c97778d999cd1958f61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d355cf4420043a866e418c97778d999cd1958f61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d355cf4420043a866e418c97778d999cd1958f61/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "794a8cec5db84fde1cce82ada51740070ec188ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a8cec5db84fde1cce82ada51740070ec188ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/794a8cec5db84fde1cce82ada51740070ec188ac"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f379ea46e27a2dc9f0bc74943b9b85a2a3286162",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -776,7 +776,7 @@ static std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -956,13 +956,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n \n         // trim mempool and check if tx was trimmed\n-        int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n-        if (expired != 0)\n-            LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+        if (!fOverrideMempoolLimit) {\n+            int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            if (expired != 0)\n+                LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n \n-        pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-        if (!pool.exists(tx.GetHash()))\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+            pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+            if (!pool.exists(tx.GetHash()))\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+        }\n     }\n \n     SyncWithWallets(tx, NULL);\n@@ -2029,7 +2031,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. */\n+/** Disconnect chainActive's tip. You want to manually re-limit mempool size after this */\n bool static DisconnectTip(CValidationState &state) {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2056,7 +2058,7 @@ bool static DisconnectTip(CValidationState &state) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL)) {\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n             mempool.remove(tx, removed, true);\n         } else if (mempool.exists(tx.GetHash())) {\n             vHashUpdate.push_back(tx.GetHash());\n@@ -2229,9 +2231,11 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n+    bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n         if (!DisconnectTip(state))\n             return false;\n+        fBlocksDisconnected = true;\n     }\n \n     // Build list of new blocks to connect.\n@@ -2277,6 +2281,9 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     }\n     }\n \n+    if (fBlocksDisconnected)\n+        mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+\n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n         CheckForkWarningConditionsOnNewFork(vpindexToConnect.back());\n@@ -2363,6 +2370,8 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n         }\n     }\n \n+    mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+\n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n     BlockMap::iterator it = mapBlockIndex.begin();"
      },
      {
        "sha": "202d2c772ba896b3f9f71cba6d1e6121ddd53594",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -229,7 +229,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "4b964735042dabbffcc4bcc266942a28b99b5833",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -809,7 +809,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, !fOverrideFees)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, !fOverrideFees)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "9b8e1c088b2d386986d23580d8efdaefaa40c0c9",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, false);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "3f2d5a05f698d7da7e8d70f61ec2f1cda71a449d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -2863,6 +2863,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee);\n }\n "
      }
    ]
  },
  {
    "sha": "074cb155c2f01ba6ddc555c01943fc20c46c0b46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzRjYjE1NWMyZjAxYmE2ZGRjNTU1YzAxOTQzZmMyMGM0NmMwYjQ2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:43:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:38Z"
      },
      "message": "Add reasonable test case for mempool trimming",
      "tree": {
        "sha": "46461c075f6e47dbb42f1e599b03026d872e2df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46461c075f6e47dbb42f1e599b03026d872e2df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d355cf4420043a866e418c97778d999cd1958f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d355cf4420043a866e418c97778d999cd1958f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d355cf4420043a866e418c97778d999cd1958f61"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 157,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dce278d99908039f892e7c1cc2c8abdde44ed04c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 154,
        "deletions": 0,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "patch": "@@ -281,4 +281,158 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     CheckSort(pool, snapshotOrder);\n }\n \n+BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n+{\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx1)));\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n+    BOOST_CHECK(pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n+    BOOST_CHECK(pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 20000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx3)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n+    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.exists(tx3.GetHash()));\n+\n+    pool.TrimToSize(::GetSerializeSize(CTransaction(tx1), SER_NETWORK, PROTOCOL_VERSION)); // mempool is limited to tx1's size in memory usage, so nothing fits\n+    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx3.GetHash()));\n+\n+    CFeeRate maxFeeRateRemoved(25000, ::GetSerializeSize(CTransaction(tx3), SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(CTransaction(tx2), SER_NETWORK, PROTOCOL_VERSION));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+\n+    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 1100LL, 0, 10.0, 1, pool.HasNoInputsOf(tx6)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n+    pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+    BOOST_CHECK(pool.exists(tx4.GetHash()));\n+    BOOST_CHECK(pool.exists(tx6.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+\n+    if (!pool.exists(tx5.GetHash()))\n+        pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n+    BOOST_CHECK(pool.exists(tx4.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx5.GetHash()));\n+    BOOST_CHECK(pool.exists(tx6.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    std::vector<CTransaction> vtx;\n+    std::list<CTransaction> conflicts;\n+    SetMockTime(42);\n+    SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    // ... we should keep the same min fee until we get a block\n+    pool.removeForBlock(vtx, 1, conflicts);\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    // ... then feerate should drop 1/2 each halflife\n+\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    // ... with a 1/2 halflife when mempool is < 1/2 its target size\n+\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    // ... with a 1/4 halflife when mempool is < 1/4 its target size\n+\n+    SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    // ... but feerate should never drop below 1000\n+\n+    SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    pool.GetMinFee(1);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    // ... unless it has gone all the way to 0 (after getting past 1000/2)\n+\n+    SetMockTime(0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "319b972c3a00f0b8c263a4ce4f6bc9abb0bdfef3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "patch": "@@ -290,11 +290,13 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n-    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12;\n \n     void trackPackageRemoved(const CFeeRate& rate);\n \n public:\n+\n+    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; // public only for testing\n+\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n         boost::multi_index::indexed_by<"
      }
    ]
  },
  {
    "sha": "9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTkzNjQwYmU2YzQ5ZmExNTA1YmE1YzVkZjhjODkyMTBkYTVhNmU0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:06:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:38Z"
      },
      "message": "Drop minRelayTxFee to 1000\n\nThere is no exact science to setting this parameter, but 5000\n(just over 1 US cent at the time of writing) is higher than the\ncost to relay a transaction around the network (the new benchmark\ndue to mempool limiting).",
      "tree": {
        "sha": "e6864d5d559b5dc298fb227c97dcc2ebef807ada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6864d5d559b5dc298fb227c97dcc2ebef807ada"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/074cb155c2f01ba6ddc555c01943fc20c46c0b46"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "31b3c2114351a8f4e1744fabacdafcc074f12875",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e93640be6c49fa1505ba5c5df8c89210da5a6e4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e93640be6c49fa1505ba5c5df8c89210da5a6e4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
        "patch": "@@ -75,7 +75,7 @@ uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(5000);\n+CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n "
      }
    ]
  },
  {
    "sha": "8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWJlMGY1NjU4NGZmNDlhZDI1MDExNWViMWYwYTlhYzhmOWNmMGNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:44:18Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:44:18Z"
      },
      "message": "Undo GetMinFee-requires-extra-call-to-hit-0",
      "tree": {
        "sha": "d73b44f802177659fb65ddb71b1316543adbcde0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d73b44f802177659fb65ddb71b1316543adbcde0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e93640be6c49fa1505ba5c5df8c89210da5a6e4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0cf906a259e7b1fbdeefb655f5ced1fcc37b55ac",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "patch": "@@ -428,7 +428,6 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    pool.GetMinFee(1);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n "
      },
      {
        "sha": "9a651049d5dc69aa4eddd055de7046585ee1b502",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "patch": "@@ -879,8 +879,10 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n         lastRollingFeeUpdate = time;\n \n-        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2)\n+        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2) {\n             rollingMinimumFeeRate = 0;\n+            return CFeeRate(0);\n+        }\n     }\n     return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n }"
      }
    ]
  },
  {
    "sha": "2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmM1MDE4N2VlNmI2YTNlNGRmYWEyM2JmMjkyZDYzYWQyOTE1OTQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:46:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:46:20Z"
      },
      "message": "Fix comment formatting tabs",
      "tree": {
        "sha": "2d2ecb3c1613d156190db4e859d7835b39864753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d2ecb3c1613d156190db4e859d7835b39864753"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d44995eefe737b67e7557a125fc47d5aed34590d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
        "patch": "@@ -420,11 +420,11 @@ class CTxMemPool\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n-\t *  for larger-sized transactions.\n-\t *  The minReasonableRelayFee constructor arg is used to bound the time it\n-     *  takes the fee rate to go back down all the way to 0. When the feerate\n-     *  would otherwise be half of this, it is set to 0 instead.\n-\t */\n+      *  for larger-sized transactions.\n+      *  The minReasonableRelayFee constructor arg is used to bound the time it\n+      *  takes the fee rate to go back down all the way to 0. When the feerate\n+      *  would otherwise be half of this, it is set to 0 instead.\n+      */\n     CFeeRate GetMinFee(size_t sizelimit) const;\n \n     /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */"
      }
    ]
  },
  {
    "sha": "58254aa3bc2e92840679183cc884eb76670af525",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODI1NGFhM2JjMmU5Mjg0MDY3OTE4M2NjODg0ZWI3NjY3MGFmNTI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-19T09:40:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-19T09:41:52Z"
      },
      "message": "Fix stale comment in CTxMemPool::TrimToSize.",
      "tree": {
        "sha": "db223b51f357eaf8c9aba7b14e1e675f8fcd9124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db223b51f357eaf8c9aba7b14e1e675f8fcd9124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58254aa3bc2e92840679183cc884eb76670af525",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58254aa3bc2e92840679183cc884eb76670af525",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58254aa3bc2e92840679183cc884eb76670af525",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58254aa3bc2e92840679183cc884eb76670af525/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "bb148005cd274de57d0888a7b8d20497ef5aa79d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58254aa3bc2e92840679183cc884eb76670af525/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58254aa3bc2e92840679183cc884eb76670af525/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=58254aa3bc2e92840679183cc884eb76670af525",
        "patch": "@@ -903,10 +903,10 @@ void CTxMemPool::TrimToSize(size_t sizelimit) {\n     while (DynamicMemoryUsage() > sizelimit) {\n         indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n \n-        // We set the new mempool min fee to either the feerate of the removed set,\n-        // or the \"minimum reasonable fee rate\" (ie some value under which we consider\n-        // txn to have 0 fee). This way, if the mempool reaches its full size on free\n-        // txn, we will simply disable free txn until there is a block, and some time.\n+        // We set the new mempool min fee to the feerate of the removed set, plus the\n+        // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n+        // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n+        // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n         removed += minReasonableRelayFee;\n         trackPackageRemoved(removed);"
      }
    ]
  }
]