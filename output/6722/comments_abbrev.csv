JeremyRubin,2015-09-25T12:18:51Z,"One thing that I think is maybe not great about the behavior of this, is let's say we have:\n\nTXs:\nA, Fee 10, Size 1\nB, Fee 10, Size 1\nC, Fee 21, Size 2\n\nIf A and B are the min in the set, submitting C should kick them out. Now, let's say B wanted to increase their fee, they would need to go above 21 to get in. As implemented, it doesn't seem to me that two TX's could both raise by 1 to, com",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143201072,143201072,
JeremyRubin,2015-09-25T13:52:35Z,"I think that my earlier comment is not fully needed, because mempool is a large multiple of block size, currently. Perhaps a more future proof implementation would allow setting:\n- an optional hard memory cap\n- a (potentially) dynamic size which is a large multiple of the current block size\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143229977,143229977,
TheBlueMatt,2015-09-25T20:38:10Z,"@JeremyRubin No, you're right, this breaks relaying of child-pays-for-parent when mempool grows large (assuming the package is not already present). The easy solution is to allow fee calulation of packages together when processing orphans, and then you send your package in reverse-dependancy order.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143347863,143347863,
morcos,2015-09-25T23:45:51Z,"@TheBlueMatt re: my comment on high fee txs.  I see now, you aren't doing the overall fee check in order to boot a package.  I just assumed the StageTrimToSize logic was the same.  So how do you think about free relay then?  Could you write up a quick intro describing the algorithm as it would help to know how you think about it.  Is the idea that all even though the tx causing the eviction hasn't",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143378272,143378272,
TheBlueMatt,2015-09-26T00:25:09Z,"@morcos see the description of the main commit:\n""This limits mempool by walking the lowest-feerate txn in mempool\nwhen it goes over -maxmempool in size, removing them.\nIt then sets the minimum relay fee to the maximum fee\ntransaction-and-dependant-set it removed, plus the default minimum\nrelay fee. After the next block is received, the minimum relay fee\nis allowed to decrease exponentially (",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143382724,143382724,
morcos,2015-09-26T00:57:32Z,But in particular the increased relay fee does NOT apply to high priority txs?  That's what I don't understand.  It seems you could use the same stable of high priority inputs over and over to gain free relay.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143386645,143386645,
TheBlueMatt,2015-09-26T01:59:13Z,"Hmm, indeed, there is an attack there where you can cause lots of relay for free there. You cant really get much into the mempool (only up to the max package size) and you do have to increase the feerate each time, but only by one satoshi per kb...\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143390920,143390920,
ghost,2015-09-26T22:30:34Z,What's wrong with XT's method of discarding a random transaction so that you can't predictably  manipulate the mempool?\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143500720,143500720,
TheBlueMatt,2015-09-26T22:36:31Z,"@NanoAkron It makes it trivial to DoS the network, among many other issues.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-143501742,143501742,
morcos,2015-09-30T18:32:56Z,I think the `ROLLING_FEE_HALFLIFE` should be 12 hours.  Here's my analysis:\nThe purpose of the `rollingMinimumFeeRate` is to strike the right balance between two things.  \n- Future transactions should be obligated to pay for the cost of transactions that were evicted (and their own relay fee) otherwise a large package of transactions could be evicted by a small tx with a slightly higher fee rate,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-144501017,144501017,
jgarzik,2015-09-30T19:40:03Z,concept ACK - prefer 24-48 hours - will do some testing\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-144517292,144517292,
sdaftuar,2015-10-01T00:19:41Z,Reorgs should probably be handled differently -- I don't think it makes sense for eviction to take place when calling `AcceptToMemoryPool()` from `DisconnectBlock()`; instead perhaps we can just let the mempool grow during a reorg and trim it down to size at the end?\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-144581220,144581220,
TheBlueMatt,2015-10-01T01:52:41Z,"Addressed a few nits...Things left to do:\n- [x] Figure out the decay constant/drop min fee to 0 when it gets near 0 (if we decide to push forward with this tomorrow, we should discuss this value)\n- [x] Steal code from #6557 to use CalculateDescendants to make the TrimToSize code simpler\n- [x] Write some basic sanity-check test cases\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-144593118,144593118,
TheBlueMatt,2015-10-02T08:48:31Z,Removed more than a third of the lines in TrimToSize and removed some other code in mempool sorting thanks to some suggestions from @morcos and @sdaftuar.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-144961886,144961886,
TheBlueMatt,2015-10-02T09:59:08Z,"Halflife set to:\nif mempool is < max_mempool_size / 4:\n    halflife = 3 hours\nelif mempool < max_mempool_size / 2:\n    halflife = 6 hours\nelse\n    halflife = 12 hours.\n\nWhen halflife is < minRelayTxFee (1000 satoshisPerKb), it is rounded down to 0 and free relay is re-enabled.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-144979788,144979788,
morcos,2015-10-02T13:57:10Z,+1 on the half life suggestions.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145028966,145028966,
TheBlueMatt,2015-10-02T20:44:24Z,"OK, did even better and solved an edge case (thanks again to @sdaftuar for suggestions) by just adding the new tx to the mempool first, and then calling TrimToSize blind and checking if the tx is still in mempool afterwards.\n\nAlso reverted the mempool sorting change after discussion with @morcos on IRC - though it is a win in the ""optimize for maximum mempool feerate"" metric, it seems better to ",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145150751,145150751,
TheBlueMatt,2015-10-02T21:52:54Z,"Incorporated mempool expiry from @sipa, rebased and squashed. Should be reviewable/testable, but needs test cases.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145164748,145164748,
petertodd,2015-10-03T17:15:39Z,"It'd be good to add some design doc comments explaining the intent of this code. CTxMemPool::GetMinFee() especially is quite mysterious and full of magic constants right now, which is easier to understand when you read @sdaftuar's comments, but that's much harder to discover if you're starting from the source code.\n\nWe also should add a way to get the current minimum relay fee from the RPC inter",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145269499,145269499,
petertodd,2015-10-03T17:16:11Z,"Code looks reasonable so far, though I haven't looked into it in enough detail to give a utACK just yet.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145269690,145269690,
morcos,2015-10-05T16:28:10Z,"@TheBlueMatt I was just talking with @sdaftuar and now we think the max is required for the sort.  I know you reverted back to max, but I just wanted to memorialize that it is actually necessary.  Otherwise, it might possible to purposefully construct packages which will cause a parent to sort down and get evicted, allowing an attacker to control evicting a particular tx.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145591235,145591235,
paveljanik,2015-10-06T19:19:13Z,```\nIn file included from wallet/wallet.cpp:24:\n./txmempool.h:291:25: warning: in-class initializer for static data member of type 'const double' is a GNU extension [-Wgnu-static-float-init]\n    static const double ROLLING_FEE_HALFLIFE = 60 * 60 * 12;\n                        ^                      ~~~~~~~~~~~~\n1 warning generated.\n```\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-145970517,145970517,
TheBlueMatt,2015-10-06T21:46:07Z,Comments should all be addressed.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146010872,146010872,
sdaftuar,2015-10-07T21:36:20Z,"There's an issue with the way the locking is done -- with the current code, we need to hold cs_main in order to call `TrimToSize()` (eg in `ActivateBestChain()`) or else it's possible for there to be a race condition with `AcceptToMemoryPool()` and we could, for instance, let an orphan in to the mempool (because the mempool lock isn't held from the `HaveInputs()` check to acceptance).\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146339870,146339870,
TheBlueMatt,2015-10-08T00:52:49Z,"@sdaftuar Argh, you're right...could switch it to require you check your inputs with mempool.cs, but its probably just easier to stick with cs_main for this one.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146384879,146384879,
TheBlueMatt,2015-10-08T01:50:15Z,"Fixed bugs and changed the 0-setting feerate stuff:\n- When a transaction is removed, the minimum mempool fee is set to the max of its package's feerate and ::minRelayTxFee. This way, when a transaction is removed, feerate is set to ::minRelayTxFee (ie the value under which we consider txn to have effectively ""0 fee"") until the next block.\n- After that, the feerate is allowed to decay as previous",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146391005,146391005,
morcos,2015-10-08T03:05:39Z,"@TheBlueMatt huh?  You can't remove the addition of ::minRelayTxFee to the rollingMinFee.  That's the only thing that makes this mempool limiting work, unless I'm misunderstanding what you did.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146404540,146404540,
TheBlueMatt,2015-10-08T03:09:49Z,"When I was thinking about how to fix it, I was going to add ::minRelayTxFee instead of max, but it seems wires got crossed and I didn't change the max...\n\nOn October 7, 2015 8:05:47 PM PDT, Alex Morcos notifications@github.com wrote:\n\n> @TheBlueMatt huh?  You can't remove the addition of ::minRelayTxFee to\n> the rollingMinFee.  That's the only thing that makes this mempool\n> limiting work, u",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146404984,146404984,
TheBlueMatt,2015-10-08T03:10:44Z,"ie the ::minRelayTxFee is added, but it's added to the mempool's limit, not in ATMP.\n\nOn October 7, 2015 8:05:47 PM PDT, Alex Morcos notifications@github.com wrote:\n\n> @TheBlueMatt huh?  You can't remove the addition of ::minRelayTxFee to\n> the rollingMinFee.  That's the only thing that makes this mempool\n> limiting work, unless I'm misunderstanding what you did.\n> \n> ---\n> \n> Reply to t",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146405074,146405074,
morcos,2015-10-08T03:20:27Z,oh ok...  but thats really putting the wrong kind of logic in the mempool.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146407074,146407074,
TheBlueMatt,2015-10-08T03:23:35Z,"I'm not sure I agree... Mempool has logic for ""this is the fee needed to get into this mempool"". The ""this fee is effectively 0"" parameter is not a mempool policy, indeed, but it's already a parameter. It has some idea of how it wants to decay the fee, which could be better moved outside of mempool, but putting it in ATMP also feels strange... It's a property of the mempool, not a global one.\n\nO",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-146407350,146407350,
TheBlueMatt,2015-10-13T08:44:00Z,Squashed/rebased and reverted the minRelayTxFee bump.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-147649344,147649344,
TheBlueMatt,2015-10-14T19:46:32Z,"@sdaftuar I was being lazy and not bothering since the behavior either way is just as good. But, OK, I fixed it.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148173903,148173903,
dcousens,2015-10-14T21:17:03Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148203761,148203761,
morcos,2015-10-14T22:12:38Z,ACK!\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148218232,148218232,
btcdrak,2015-10-15T02:43:07Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148263649,148263649,
instagibbs,2015-10-15T12:52:29Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148375798,148375798,
jgarzik,2015-10-15T13:10:19Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148379789,148379789,
sdaftuar,2015-10-16T16:28:44Z,ACK (apart from sipa's nit) \n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148761612,148761612,
morcos,2015-10-17T01:19:36Z,"I've done some benchmarking.  I ran a historical simulation over 1 million transactions between July 6th and July 14th.  And I repeated this for 3 different code bases.  \n- master as of 7/31 (before multindex and package tracking)\n- master as of 10/16\n- this pull\n\nResults are below, I think you can see that the average is within measurement error.  The slight increase in the median is to be e",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148874040,148874040,
sipa,2015-10-17T01:29:57Z,Those numbers look reasonable and are probably consistent with what I've\nbeen seeing. I temporarily can't benchmark easily to verify.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148874654,148874654,
rubensayshi,2015-10-19T09:56:05Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149171010,149171010,
sipa,2015-10-19T16:24:41Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149268107,149268107,
ABISprotocol,2015-10-20T21:25:15Z,"Since #6557 was closed (in favor of opening this pull request, according to @sdaftuar from a comment in #6557) I am again coming back to evaluate whether this new pull request does the following:\n\na) addresses my concerns as expressed in comments [here](https://github.com/bitcoin/bitcoin/pull/6201#issuecomment-122119307) and [here](https://github.com/bitcoin/bitcoin/pull/6201#issuecomment-122438",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149707956,149707956,
TheBlueMatt,2015-10-20T21:47:52Z,"@ABISprotocol I'm not actually sure if you're asking a question or what, but I think the answer is ""yes"". Yes, it does the things in (b) and (c), I guess? As for what you're talking about in (a), I have no idea. Please make specific criticisms.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149712837,149712837,
ABISprotocol,2015-10-20T22:31:27Z,"@TheBlueMatt I have been very specific since #6201 when I raised these issues, the pull requests since then which have led to this one have in part been responsive to the issues I raised, but have been closed.\n\nWhen you say ""I think the answer is ""yes"" (...) it does the things in (b) and (c), I guess?"" I would appreciate a better answer, where you cite how it does so.  If you believe that it doe",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149721490,149721490,
sipa,2015-10-20T22:43:46Z,@ABISprotocol This page is for discussing technical issues. Please take the philosophical considerations elsewhere.\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149723456,149723456,
ABISprotocol,2015-10-20T23:04:51Z,"@sipa I believe I have raised substantial technical issues in my past and present comments.  I think it is unfair of you to attempt to diminish my participation.  Instead, please let me know if the issues I have raised have been addressed, and if so, please cite a basic message as to how they have been addressed.  Thank you for your consideration of my comments.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149726830,149726830,
sipa,2015-10-20T23:10:04Z,"(a) If you're talking about accessibility of _on blockchain_ transactions: no. We can't guarantee that every possible useful transaction will have a negligable fee for every person on earth. If that was the case, DoS attacks that intervene with everyone's ability to use it would also be negligable in cost for every person on earth. This is a philosophical question, and not something that changes i",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149727534,149727534,
ABISprotocol,2015-10-20T23:29:49Z,"@sipa Your remarks regarding (c) are dismissive, ""read title of this pull request please"" assumes stupidity of the commenter(s), namely myself, and is not a kind way to address my participation.  I will assume someone else will better answer my concerns. @laanwj \n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149733563,149733563,
laanwj,2015-10-21T06:50:04Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-149797846,149797846,
dcousens,2015-10-21T22:29:52Z,"@ABISprotocol what specific question do you want to ask?\n\nI'll try to answer, paraphrasing you:\n\n> [does this PR affect the] ability of people in the developing world to access [to] bitcoin?\n\nIf you classify access as the ability to run a full node,  then,  this PR,  which will allow users to adjust the software to meet the capabilities of their hardware,  **does** increase access.\n\n> b) H",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-150042573,150042573,
ABISprotocol,2015-10-22T04:28:27Z,"-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHello,\n\nBy access, I didn't mean necessarily the ability to run a full node.\nI was more concerned with the ability of users to make a transaction\nat all (regardless of what software they might be using) and not be\nsqueezed out by the upward creep of fees.\n\nSee, for example, this, cited previously here in (a), which discusses\nthe issue in ",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-150103587,150103587,
rubensayshi,2015-11-18T13:04:16Z,this is going to be in v0.12.0?\nit's not in the release-notes yet for v0.12.0? \n,https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-157706114,157706114,
TheBlueMatt,2015-11-20T22:57:28Z,"Yes, this should be added to the release-notes.\n",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-158551077,158551077,
rebroad,2021-05-16T11:49:43Z,"> @JeremyRubin No, you're right, this breaks relaying of child-pays-for-parent when mempool grows large (assuming the package is not already present). The easy solution is to allow fee calulation of packages together when processing orphans, and then you send your package in reverse-dependancy order.\n\nDid this end up being implemented?",https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-841806474,841806474,
jonasschnelli,2015-09-25T09:22:40Z,travis complains about a missing `mutable bool blockSinceLastRollingFeeUpdate;` here.\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40412933,40412933,src/txmempool.h
morcos,2015-09-25T17:20:39Z,You can't call this by itself anymore.  Use removeStaged\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453419,40453419,src/txmempool.cpp
morcos,2015-09-25T17:23:33Z,"It doesn't make sense to bump the rolling fee for a tx that didn't get in.   A very high fee tx might not make it in if there are large packages or transactions (even of low fee rate) at the bottom of the mempool.  That's a problem in and of itself for the tx that doesn't get in, but it's even worse if you make that the new minimum relay rate.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453689,40453689,src/txmempool.cpp
morcos,2015-09-25T17:26:05Z,"I'd be concerned about the tradeoff here between one-time cost to stuff the mempool full of very high fee txs, and the length of time that stuffing causes the min relay rate to remain high.   Expecially with 100MB mempool, thats only about 30MB of txs.  So for example at 100k sat / kb fee rate, for 30 BTC you can knock the min relay fee up to 100k satoshis and the effect lasts for some time.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40453957,40453957,src/txmempool.cpp
TheBlueMatt,2015-09-25T20:29:02Z,Hmm? No a very high fee tx will always evict transactions with lower feerate even if it ends up evicting a very large package to do so.\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40472178,40472178,src/txmempool.cpp
TheBlueMatt,2015-09-25T20:32:56Z,"Sure, the ROLLING_FEE_HALFLIFE could be dropped a lot. I had originally figured it based on decreasing the mempool right away, but since it now waits at least for one block before it lets the min feerate drop, I think it probably could be dropped a lot. Maybe we even dont want an exponential decrease either.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40472516,40472516,src/txmempool.cpp
morcos,2015-09-26T00:51:29Z,"need to pop_front() before continuing, otherwise its an infinite loop\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40487766,40487766,src/txmempool.cpp
TheBlueMatt,2015-09-26T01:53:09Z,"LOL, oops...\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40488841,40488841,src/txmempool.cpp
morcos,2015-09-26T17:30:15Z,"this is a bug.  rootit is an iterator by txid hash, so decrementing it puts you at a completely random transaction.\nthe base iterator needs to be decremented before projecting.\n\n@sdaftuar and i didn't like this oddness, so the first commit in #6557 reverses the feerate sort.  there was no reason to do it the other way in the first place.  maybe you should just grab that?\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40495966,40495966,src/txmempool.cpp
morcos,2015-09-26T22:22:38Z,"Keep in mind this is a ratio of 2 different measurements.  Serialized transaction size for descendant limit and mempool memory usage for maxmempool.  There is about a 3x ratio between those measurements.  So a 25MB mempool would actually only fit about 3 maximum sized packages...  (I used 4x as a conservative ratio, and similarly wanted a 10x difference so ended up with 40x between the arguments.)",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40499037,40499037,src/init.cpp
TheBlueMatt,2015-09-26T22:38:15Z,"Oops, yea, my notes to fix this from earlier were saying do something like 100MB, for this reason...Last time I ignore my notes and just do what I think when I'm sick :/\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40499174,40499174,src/init.cpp
morcos,2015-09-30T17:36:38Z,These functions will be called every time through even if the mempool wasn't full to start with\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40824946,40824946,src/txmempool.cpp
sdaftuar,2015-09-30T18:02:13Z,"With the way the half-life calculation works, I believe it would take a very long time before mempoolRejectFee will reach 0 again, after an eviction; this in turn would cause us to wait a really long time before being willing to relay low-fee transactions that have high priority.  Perhaps the mempool could round the min fee it returns down to 0 at some point so that this doesn't take forever, or w",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40828264,40828264,src/main.cpp
sdaftuar,2015-09-30T18:31:47Z,"I think it'd be better to make this default value as large as we think users can reasonably live with. 100MB of memory is only about 30MB of actual transactions, or 30 full blocks.  It seems to me like all the attacks someone could do on a limited mempool involve trying to play games with the effects of eviction, so having a bigger default mempool just causes all attacks to scale up in cost to car",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40832241,40832241,src/main.h
sdaftuar,2015-09-30T18:43:59Z,"I haven't thought about how much this is likely to matter but I don't think this is the best way to guess the expected size of the resulting mempool -- it misses the extra overhead from mapLinks, mapNextTx, and the multi_index pointers itself.  \n\nI think this code here is almost correct:\nhttps://github.com/sdaftuar/bitcoin/blob/7008233767bd5e03521d96cde414394975e940d7/src/txmempool.cpp#L797\n\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40833980,40833980,src/txmempool.cpp
sdaftuar,2015-09-30T18:58:44Z,"If you change `TrimToSize()` to take as an argument the ancestors of the entry being considered (which is calculated earlier in `AcceptToMemoryPool()`), then you can get rid of `protect`, and instead just check that each package root that you consider isn't an ancestor of the entry being added.  (This is what I did in #6557 and I think it helps make the code a lot simpler, especially combined with",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r40836107,40836107,src/txmempool.cpp
sdaftuar,2015-10-06T18:58:09Z,"""is was"" -> ""was""\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41306866,41306866,src/main.cpp
sdaftuar,2015-10-06T19:02:53Z,"Would it perhaps be better to pass the minRelayTxFee in, so that we're not needing to access globals inside the mempool?\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41307526,41307526,src/txmempool.cpp
sdaftuar,2015-10-06T20:05:29Z,"On further thought -- would it make more sense to just move this code out of the mempool and into main.cpp, to isolate the mempool from relay policy?  We could make `TrimToSize()` return the fee rate of the last package it removes, and then leave `AcceptToMemoryPool()` responsible for deciding what to do with the prevailing relay fee after eviction (including this logic for decaying things back do",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41314592,41314592,src/txmempool.cpp
morcos,2015-10-06T20:58:20Z,"This seems like it has two problems.  First, the descendant package information will have been updated by the removal of all the descendants in RemoveStaged.  More importantly, won't the iterator be invalid once it has been erased?\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41321243,41321243,src/txmempool.cpp
TheBlueMatt,2015-10-06T21:37:49Z,"I see GetMinFee() as a ""minimum feerate this mempool reasonably accepts"" not a part of your relay policy. You can tweak your relay policy by having a bigger mempool. Someone who wants to refactor all of the relay policy to be separated, later, can do so, but that seems far out-of-scope for this pull.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41326086,41326086,src/txmempool.cpp
morcos,2015-10-07T15:53:22Z,"I'm not sure if this is ideal.  \n- If a bunch of free txs fill the mempool, they can then start evicting each other and continue getting relayed with no effective min relay rate ever getting created.\n- If we ignore free txs, then if the mempool is full of minRelayTxFee txs then we're reliant on `blockSinceLastRollingFeeBump` to prevent us from decaying the mempoolRejectFee immediately and as soo",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41407947,41407947,src/main.cpp
morcos,2015-10-07T17:37:15Z,"how about:\n`state.DoS(0, false, REJECT_INSUFFICIENTFEE, ""mempool full"", false, strprintf(""%d < %d + %d"", nFees, ::minRelayTxFee.GetFee(nSize), mempoolRejectFee.GetFee(nSize)));`\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41420730,41420730,src/main.cpp
morcos,2015-10-07T17:37:24Z,"how about adding:\n`LogPrint(""mempool"", ""Rolling Min Fee bumped to %f\n"", rollingMinimumFeeRate);`\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41420748,41420748,src/txmempool.cpp
morcos,2015-10-07T17:37:27Z,What do you think about tracking the size and number of transactions that are removed here and debug logging it at the end?\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41420755,41420755,src/txmempool.cpp
morcos,2015-10-07T21:07:18Z,also log slightly more info here\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41447522,41447522,src/main.cpp
morcos,2015-10-07T21:30:20Z,I'm not a fan of having this in InvalidateBlock.\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41450271,41450271,src/main.cpp
TheBlueMatt,2015-10-08T00:44:02Z,Not sure what else to log here?\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41465900,41465900,src/main.cpp
TheBlueMatt,2015-10-08T00:53:14Z,"I agree, but the alternative seems to be to do it per disconnected block?\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41466408,41466408,src/main.cpp
TheBlueMatt,2015-10-08T00:58:56Z,Did it in one print at the end of TrimToSize instead.\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41466708,41466708,src/txmempool.cpp
TheBlueMatt,2015-10-08T01:41:55Z,"Yea, indeed, trying to address suhas' comments about not wanting to call ::minRelayTxFee in mempool made this worse, but I agree that it wasnt ideal to begin with.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41468645,41468645,src/main.cpp
instagibbs,2015-10-12T14:04:30Z,there a reason why it's not pool.exists rather than mempool?\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r41758998,41758998,src/main.cpp
btcdrak,2015-10-14T19:34:45Z,nit: docblock alignment/formatting is squiff \n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42041520,42041520,src/txmempool.h
btcdrak,2015-10-14T19:37:55Z,"I think recent events proved this was too low, so I'm not sure we should revert it all the way back.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42041893,42041893,src/main.cpp
TheBlueMatt,2015-10-14T19:47:19Z,Oh? Recent events proved it was too low as the only mempool-limiting mechanism (which it is now). But if it doesnt matter for mempool limiting I'm not sure thats true?\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42043050,42043050,src/main.cpp
btcdrak,2015-10-15T02:42:02Z,Wouldn't this be better discussed in a separate PR?\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42078247,42078247,src/main.cpp
TheBlueMatt,2015-10-15T03:22:37Z,"Changint it to anything but 1000, probably. But the 5000 change was done as a temporary hack to fix mempool until something better comes along. Dont take this as an update, its just reverting the now-useless commit :)\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42080052,42080052,src/main.cpp
jtimon,2015-10-20T10:36:26Z,"Yes, please, let's leave changing default values for policy parameters to separate PRs.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42479274,42479274,src/main.cpp
jtimon,2015-10-20T10:49:10Z,"I would prefer that this new `GetArg(""-maxmempool"", DEFAULT_MAX_MEMPOOL_SIZE)` global was initialized only in one place: init.cpp\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42480405,42480405,src/main.cpp
jtimon,2015-10-20T10:50:02Z,"`GetArg(""-mempoolexpiry"", DEFAULT_MEMPOOL_EXPIRY)` could also be initialized in init.cpp\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42480489,42480489,src/main.cpp
jtimon,2015-10-20T10:56:18Z,Maybe these belong to txmempool.h ?\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42480972,42480972,src/main.h
sipa,2015-10-20T11:02:38Z,"IMHO the logic for deciding what goes into the mempool doesn't belong in\ntxmempool, only what is necessary to maintain its efficiency and\ncorrectness.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42481483,42481483,src/main.h
sipa,2015-10-20T11:03:33Z,"I agree, but I don't care strongly. It's already violated in many places,\nthough.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42481557,42481557,src/main.cpp
jtimon,2015-10-20T11:09:10Z,"The logic is in txmempool already, these are just default values for a couple of new policy globals.\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42481993,42481993,src/main.h
sipa,2015-10-20T11:12:16Z,"The logic for enforcing it is, but not the logic to decide what the limits\nare.\n\nPlease don't encourage moving more policy decisions to the mempool...\n",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42482248,42482248,src/main.h
jtimon,2015-10-20T11:24:51Z,"Well, my general approach is not moving more policy to main. I had encapsulated policy in txmempool (including all the uses of global minTxRelayFee) , decoupled policy/fee from txmempool (done in master thanks to @morcos ) and also decoupled txmempool from policy/fee once. Of course it doesn't make sense to redo that work while waiting for one of these mempool limit PRs to be merged since they are",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42483170,42483170,src/main.h
TheBlueMatt,2015-10-20T21:48:42Z,Seems like an easy thing to do in a separate PR.\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42559396,42559396,src/main.cpp
TheBlueMatt,2015-10-20T21:48:55Z,Can we do this in a separate PR? It seems a bit late to be bikeshedding on where to put constants.\n,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42559430,42559430,src/main.h
jonasschnelli,2015-10-26T10:44:55Z,This change produces a crash on osx.\n\n```\njonasschnelli$ ./src/bitcoind --regtest\nlibc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error> >: boost: mutex lock failed in pthread_mutex_lock: Invalid argument\n```\n\nStacktrace goes back to `cxx_global_var_initXX()`.\nI think calling `LOCK()` ,https://github.com/bitcoin/bitcoin/pull/6722#discussion_r42978487,42978487,src/txmempool.cpp
rebroad,2021-05-16T09:21:46Z,"why is it limited to minReasonableRelayFee here, but on line 869, it isn't?",https://github.com/bitcoin/bitcoin/pull/6722#discussion_r633066967,633066967,src/txmempool.cpp
