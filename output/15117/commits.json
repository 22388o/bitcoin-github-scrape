[
  {
    "sha": "ca126d490b0ff6960e135f3c77b2b2d4892a5744",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTEyNmQ0OTBiMGZmNjk2MGUxMzVmM2M3N2IyYjJkNDg5MmE1NzQ0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-06T15:38:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-06T16:45:53Z"
      },
      "message": "Fix out-of-bounds write in case of failing mmap(...) in PosixLockedPageAllocator::AllocateLocked",
      "tree": {
        "sha": "f7255fed8ac1451d6438eb058f640cc58f0fe0a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7255fed8ac1451d6438eb058f640cc58f0fe0a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca126d490b0ff6960e135f3c77b2b2d4892a5744",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca126d490b0ff6960e135f3c77b2b2d4892a5744",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca126d490b0ff6960e135f3c77b2b2d4892a5744",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca126d490b0ff6960e135f3c77b2b2d4892a5744/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c719987718d9fcc3a689e50f5212acc7ead7606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c719987718d9fcc3a689e50f5212acc7ead7606",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c719987718d9fcc3a689e50f5212acc7ead7606"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "57f5b1f73356354813f5acadbafc51518553ddb1",
        "filename": "src/support/allocators/secure.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca126d490b0ff6960e135f3c77b2b2d4892a5744/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca126d490b0ff6960e135f3c77b2b2d4892a5744/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=ca126d490b0ff6960e135f3c77b2b2d4892a5744",
        "patch": "@@ -40,7 +40,11 @@ struct secure_allocator : public std::allocator<T> {\n \n     T* allocate(std::size_t n, const void* hint = 0)\n     {\n-        return static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));\n+        T* allocation = static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));\n+        if (!allocation) {\n+            throw std::bad_alloc();\n+        }\n+        return allocation;\n     }\n \n     void deallocate(T* p, std::size_t n)"
      },
      {
        "sha": "627018083e3df1277647e1c092012c492bfcb0a4",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca126d490b0ff6960e135f3c77b2b2d4892a5744/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca126d490b0ff6960e135f3c77b2b2d4892a5744/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=ca126d490b0ff6960e135f3c77b2b2d4892a5744",
        "patch": "@@ -248,6 +248,9 @@ void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n     void *addr;\n     len = align_up(len, page_size);\n     addr = mmap(nullptr, len, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n+    if (addr == MAP_FAILED) {\n+        return nullptr;\n+    }\n     if (addr) {\n         *lockingSuccess = mlock(addr, len) == 0;\n     }"
      },
      {
        "sha": "b420c909fc53aec6ca38cb59f5ae929a3e722766",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca126d490b0ff6960e135f3c77b2b2d4892a5744/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca126d490b0ff6960e135f3c77b2b2d4892a5744/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=ca126d490b0ff6960e135f3c77b2b2d4892a5744",
        "patch": "@@ -22,7 +22,7 @@ class LockedPageAllocator\n     virtual ~LockedPageAllocator() {}\n     /** Allocate and lock memory pages.\n      * If len is not a multiple of the system page size, it is rounded up.\n-     * Returns 0 in case of allocation failure.\n+     * Returns nullptr in case of allocation failure.\n      *\n      * If locking the memory pages could not be accomplished it will still\n      * return the memory, however the lockingSuccess flag will be false."
      }
    ]
  }
]