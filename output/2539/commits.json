[
  {
    "sha": "57d80467f123741f228910dea8c1245134bbfbfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2Q4MDQ2N2YxMjM3NDFmMjI4OTEwZGVhOGMxMjQ1MTM0YmJmYmZl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-08T03:09:07Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:44Z"
      },
      "message": "Reject dust amounts during validation\n\nReplaces the validation check for \"amount == 0\" with an isDust check,\nso very small output amounts are caught before the wallet\nis unlocked, a transaction is created, etc.",
      "tree": {
        "sha": "abdc71a4ec2d9ccb3f31e3027abe768b3db330c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abdc71a4ec2d9ccb3f31e3027abe768b3db330c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57d80467f123741f228910dea8c1245134bbfbfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d80467f123741f228910dea8c1245134bbfbfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57d80467f123741f228910dea8c1245134bbfbfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d80467f123741f228910dea8c1245134bbfbfe/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b986663ccdd3dfd8a93aad660839a315ca5c5bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b986663ccdd3dfd8a93aad660839a315ca5c5bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b986663ccdd3dfd8a93aad660839a315ca5c5bdd"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 20,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c951b21b80c5676dbc0a556c8f70fe8e0ed92db0",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57d80467f123741f228910dea8c1245134bbfbfe/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57d80467f123741f228910dea8c1245134bbfbfe/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=57d80467f123741f228910dea8c1245134bbfbfe",
        "patch": "@@ -148,6 +148,14 @@ bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)\n     return parseBitcoinURI(uriInstance, out);\n }\n \n+bool isDust(const QString& address, qint64 amount)\n+{\n+    CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n+    CScript script; script.SetDestination(dest);\n+    CTxOut txOut(amount, script);\n+    return txOut.IsDust(CTransaction::nMinRelayTxFee);\n+}\n+\n QString HtmlEscape(const QString& str, bool fMultiLine)\n {\n #if QT_VERSION < 0x050000"
      },
      {
        "sha": "8472700f48b4ab7a0dbe070278379efc5a8a235a",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57d80467f123741f228910dea8c1245134bbfbfe/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57d80467f123741f228910dea8c1245134bbfbfe/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=57d80467f123741f228910dea8c1245134bbfbfe",
        "patch": "@@ -36,6 +36,9 @@ namespace GUIUtil\n     bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out);\n     bool parseBitcoinURI(QString uri, SendCoinsRecipient *out);\n \n+    // Returns true if given address+amount meets \"dust\" definition\n+    bool isDust(const QString& address, qint64 amount);\n+\n     // HTML escaping for rich text controls\n     QString HtmlEscape(const QString& str, bool fMultiLine=false);\n     QString HtmlEscape(const std::string& str, bool fMultiLine=false);"
      },
      {
        "sha": "1c54850a037a3dad2f0257b4636c30192ddfef5a",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57d80467f123741f228910dea8c1245134bbfbfe/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57d80467f123741f228910dea8c1245134bbfbfe/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=57d80467f123741f228910dea8c1245134bbfbfe",
        "patch": "@@ -101,24 +101,21 @@ bool SendCoinsEntry::validate()\n     // Check input validity\n     bool retval = true;\n \n-    if(!ui->payAmount->validate())\n+    if(!ui->payTo->hasAcceptableInput() ||\n+       (model && !model->validateAddress(ui->payTo->text())))\n     {\n+        ui->payTo->setValid(false);\n         retval = false;\n     }\n-    else\n+\n+    if(!ui->payAmount->validate())\n     {\n-        if(ui->payAmount->value() <= 0)\n-        {\n-            // Cannot send 0 coins or less\n-            ui->payAmount->setValid(false);\n-            retval = false;\n-        }\n+        retval = false;\n     }\n \n-    if(!ui->payTo->hasAcceptableInput() ||\n-       (model && !model->validateAddress(ui->payTo->text())))\n-    {\n-        ui->payTo->setValid(false);\n+    // Reject dust outputs:\n+    if (retval && GUIUtil::isDust(ui->payTo->text(), ui->payAmount->value())) {\n+        ui->payAmount->setValid(false);\n         retval = false;\n     }\n "
      }
    ]
  },
  {
    "sha": "b94595bb7f6b98c11182df5373fe6461f4776098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTQ1OTViYjdmNmI5OGMxMTE4MmRmNTM3M2ZlNjQ2MWY0Nzc2MDk4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-17T02:20:09Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:44Z"
      },
      "message": "GetDataDir(): cache paths for each network separately",
      "tree": {
        "sha": "d78a22b32c7f581773118f194f3135b6b8d29adc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d78a22b32c7f581773118f194f3135b6b8d29adc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b94595bb7f6b98c11182df5373fe6461f4776098",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94595bb7f6b98c11182df5373fe6461f4776098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b94595bb7f6b98c11182df5373fe6461f4776098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94595bb7f6b98c11182df5373fe6461f4776098/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57d80467f123741f228910dea8c1245134bbfbfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d80467f123741f228910dea8c1245134bbfbfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57d80467f123741f228910dea8c1245134bbfbfe"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 20,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ce3c14306df37bb4223269c1aa50e5bca3f977f2",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b94595bb7f6b98c11182df5373fe6461f4776098/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b94595bb7f6b98c11182df5373fe6461f4776098/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=b94595bb7f6b98c11182df5373fe6461f4776098",
        "patch": "@@ -39,6 +39,8 @@ class CChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+\n+        MAX_NETWORK_TYPES\n     };\n \n     enum Base58Type {"
      },
      {
        "sha": "136a0354856c06a7f43a19ca71608dbef96ba5c3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 11,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b94595bb7f6b98c11182df5373fe6461f4776098/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b94595bb7f6b98c11182df5373fe6461f4776098/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b94595bb7f6b98c11182df5373fe6461f4776098",
        "patch": "@@ -8,6 +8,7 @@\n #ifdef __linux__\n #define _POSIX_C_SOURCE 200112L\n #endif\n+#include <algorithm>\n #include <fcntl.h>\n #include <sys/stat.h>\n #include <sys/resource.h>\n@@ -83,7 +84,6 @@ bool fNoListen = false;\n bool fLogTimestamps = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n volatile bool fReopenDebugLog = false;\n-bool fCachedPath[2] = {false, false};\n \n // Init OpenSSL library multithreading support\n static CCriticalSection** ppmutexOpenSSL;\n@@ -1043,22 +1043,25 @@ boost::filesystem::path GetDefaultDataDir()\n #endif\n }\n \n+static boost::filesystem::path pathCached[CChainParams::MAX_NETWORK_TYPES+1];\n+static CCriticalSection csPathCached;\n+\n const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n {\n     namespace fs = boost::filesystem;\n \n-    static fs::path pathCached[2];\n-    static CCriticalSection csPathCached;\n+    LOCK(csPathCached);\n+\n+    int nNet = CChainParams::MAX_NETWORK_TYPES;\n+    if (fNetSpecific) nNet = Params().NetworkID();\n \n-    fs::path &path = pathCached[fNetSpecific];\n+    fs::path &path = pathCached[nNet];\n \n     // This can be called during exceptions by printf, so we cache the\n     // value so we don't have to do memory allocations after that.\n-    if (fCachedPath[fNetSpecific])\n+    if (!path.empty())\n         return path;\n \n-    LOCK(csPathCached);\n-\n     if (mapArgs.count(\"-datadir\")) {\n         path = fs::system_complete(mapArgs[\"-datadir\"]);\n         if (!fs::is_directory(path)) {\n@@ -1073,10 +1076,15 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n \n     fs::create_directories(path);\n \n-    fCachedPath[fNetSpecific] = true;\n     return path;\n }\n \n+void ClearDatadirCache()\n+{\n+    std::fill(&pathCached[0], &pathCached[CChainParams::MAX_NETWORK_TYPES+1],\n+              boost::filesystem::path());\n+}\n+\n boost::filesystem::path GetConfigFile()\n {\n     boost::filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n@@ -1091,9 +1099,6 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n-    // clear path cache after loading config file\n-    fCachedPath[0] = fCachedPath[1] = false;\n-\n     set<string> setOptions;\n     setOptions.insert(\"*\");\n \n@@ -1109,6 +1114,8 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n         }\n         mapMultiSettingsRet[strKey].push_back(it->value[0]);\n     }\n+    // If datadir is changed in .conf file:\n+    ClearDatadirCache();\n }\n \n boost::filesystem::path GetPidFile()"
      }
    ]
  },
  {
    "sha": "618855133d4ae4ece130aec3b35c5a65bea95b8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTg4NTUxMzNkNGFlNGVjZTEzMGFlYzNiMzVjNWE2NWJlYTk1Yjhm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-15T05:20:50Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:45Z"
      },
      "message": "Refactor: CAddressBookData for mapAddressBook\n\nStraight refactor, so mapAddressBook stores a CAddressBookData\n(which just contains a std::string) instead of a std::string.\n\nPreparation for payment protocol work, which will add the notion\nof refund addresses to the address book.",
      "tree": {
        "sha": "fbbaf4bfdf5751ad24635fdcb4b633d71433a2d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbbaf4bfdf5751ad24635fdcb4b633d71433a2d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/618855133d4ae4ece130aec3b35c5a65bea95b8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618855133d4ae4ece130aec3b35c5a65bea95b8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/618855133d4ae4ece130aec3b35c5a65bea95b8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618855133d4ae4ece130aec3b35c5a65bea95b8f/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b94595bb7f6b98c11182df5373fe6461f4776098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94595bb7f6b98c11182df5373fe6461f4776098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b94595bb7f6b98c11182df5373fe6461f4776098"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 54,
      "deletions": 38
    },
    "files": [
      {
        "sha": "823730c4ca9187efac99ee9f15afa7b61e65868d",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -59,10 +59,10 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, std::string)& item, wallet->mapAddressBook)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n-                const std::string& strName = item.second;\n+                const std::string& strName = item.second.name;\n                 bool fMine = IsMine(*wallet, address.Get());\n                 cachedAddressTable.append(AddressTableEntry(fMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending,\n                                   QString::fromStdString(strName),\n@@ -397,10 +397,10 @@ QString AddressTableModel::labelForAddress(const QString &address) const\n     {\n         LOCK(wallet->cs_wallet);\n         CBitcoinAddress address_parsed(address.toStdString());\n-        std::map<CTxDestination, std::string>::iterator mi = wallet->mapAddressBook.find(address_parsed.Get());\n+        std::map<CTxDestination, CAddressBookData>::iterator mi = wallet->mapAddressBook.find(address_parsed.Get());\n         if (mi != wallet->mapAddressBook.end())\n         {\n-            return QString::fromStdString(mi->second);\n+            return QString::fromStdString(mi->second.name);\n         }\n     }\n     return QString();"
      },
      {
        "sha": "e9f3eb478dc36b774f845b0f90a04057bc719ce6",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -88,8 +88,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                                 strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n                                 strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                                 strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n-                                if (!wallet->mapAddressBook[address].empty())\n-                                    strHTML += \" (\" + tr(\"own address\") + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \")\";\n+                                if (!wallet->mapAddressBook[address].name.empty())\n+                                    strHTML += \" (\" + tr(\"own address\") + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n                                 else\n                                     strHTML += \" (\" + tr(\"own address\") + \")\";\n                                 strHTML += \"<br>\";\n@@ -110,8 +110,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n             std::string strAddress = wtx.mapValue[\"to\"];\n             strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n             CTxDestination dest = CBitcoinAddress(strAddress).Get();\n-            if (wallet->mapAddressBook.count(dest) && !wallet->mapAddressBook[dest].empty())\n-                strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[dest]) + \" \";\n+            if (wallet->mapAddressBook.count(dest) && !wallet->mapAddressBook[dest].name.empty())\n+                strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[dest].name) + \" \";\n             strHTML += GUIUtil::HtmlEscape(strAddress) + \"<br>\";\n         }\n \n@@ -167,8 +167,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                         if (ExtractDestination(txout.scriptPubKey, address))\n                         {\n                             strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n-                            if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].empty())\n-                                strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \" \";\n+                            if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n+                                strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n                             strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                             strHTML += \"<br>\";\n                         }\n@@ -254,8 +254,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                             CTxDestination address;\n                             if (ExtractDestination(vout.scriptPubKey, address))\n                             {\n-                                if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].empty())\n-                                    strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \" \";\n+                                if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n+                                    strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n                                 strHTML += QString::fromStdString(CBitcoinAddress(address).ToString());\n                             }\n                             strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, vout.nValue);"
      },
      {
        "sha": "d3c3ddcab1988cb8459d13ba24414610bf421a18",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -214,10 +214,10 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n         {\n             LOCK(wallet->cs_wallet);\n \n-            std::map<CTxDestination, std::string>::iterator mi = wallet->mapAddressBook.find(dest);\n+            std::map<CTxDestination, CAddressBookData>::iterator mi = wallet->mapAddressBook.find(dest);\n \n             // Check if we have a new address or an updated label\n-            if (mi == wallet->mapAddressBook.end() || mi->second != strLabel)\n+            if (mi == wallet->mapAddressBook.end() || mi->second.name != strLabel)\n             {\n                 wallet->SetAddressBookName(dest, strLabel);\n             }"
      },
      {
        "sha": "fde9984b0869ada473418652ea2696ae5bc496ea",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -255,7 +255,7 @@ Value dumpwallet(const Array& params, bool fHelp)\n         CKey key;\n         if (pwalletMain->GetKey(keyid, key)) {\n             if (pwalletMain->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), EncodeDumpString(pwalletMain->mapAddressBook[keyid]).c_str(), strAddr.c_str());\n+                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), EncodeDumpString(pwalletMain->mapAddressBook[keyid].name).c_str(), strAddr.c_str());\n             } else if (setKeyPool.count(keyid)) {\n                 file << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), strAddr.c_str());\n             } else {"
      },
      {
        "sha": "580120f2a2a477a6b22e72dcb5d68d89238ce97f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -229,7 +229,7 @@ Value listunspent(const Array& params, bool fHelp)\n         {\n             entry.push_back(Pair(\"address\", CBitcoinAddress(address).ToString()));\n             if (pwalletMain->mapAddressBook.count(address))\n-                entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address]));\n+                entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address].name));\n         }\n         entry.push_back(Pair(\"scriptPubKey\", HexStr(pk.begin(), pk.end())));\n         if (pk.IsPayToScriptHash())"
      },
      {
        "sha": "b233b654b567f20bdd907c041d0522568e088f7f",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -196,7 +196,7 @@ Value setaccount(const Array& params, bool fHelp)\n     // Detect when changing the account of an address that is the 'unused current key' of another account:\n     if (pwalletMain->mapAddressBook.count(address.Get()))\n     {\n-        string strOldAccount = pwalletMain->mapAddressBook[address.Get()];\n+        string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n         if (address == GetAccountAddress(strOldAccount))\n             GetAccountAddress(strOldAccount, true);\n     }\n@@ -219,9 +219,9 @@ Value getaccount(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n-    if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n-        strAccount = (*mi).second;\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.name.empty())\n+        strAccount = (*mi).second.name;\n     return strAccount;\n }\n \n@@ -237,10 +237,10 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     Array ret;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n-        const string& strName = item.second;\n+        const string& strName = item.second.name;\n         if (strName == strAccount)\n             ret.push_back(address.ToString());\n     }\n@@ -301,7 +301,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             {\n                 LOCK(pwalletMain->cs_wallet);\n                 if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n-                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n+                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n             }\n             jsonGrouping.push_back(addressInfo);\n         }\n@@ -423,10 +423,10 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n {\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, pwalletMain->mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n-        const string& strName = item.second;\n+        const string& strName = item.second.name;\n         if (strName == strAccount)\n             setAddress.insert(address);\n     }\n@@ -862,10 +862,10 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     // Reply\n     Array ret;\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n-        const string& strAccount = item.second;\n+        const string& strAccount = item.second.name;\n         map<CBitcoinAddress, tallyitem>::iterator it = mapTally.find(address);\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n@@ -988,7 +988,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n-                account = pwalletMain->mapAddressBook[r.first];\n+                account = pwalletMain->mapAddressBook[r.first].name;\n             if (fAllAccounts || (account == strAccount))\n             {\n                 Object entry;\n@@ -1101,9 +1101,9 @@ Value listaccounts(const Array& params, bool fHelp)\n         nMinDepth = params[0].get_int();\n \n     map<string, int64> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n-            mapAccountBalances[entry.second] = 0;\n+            mapAccountBalances[entry.second.name] = 0;\n     }\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -1121,7 +1121,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         {\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n-                    mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n+                    mapAccountBalances[pwalletMain->mapAddressBook[r.first].name] += r.second;\n                 else\n                     mapAccountBalances[\"\"] += r.second;\n         }\n@@ -1470,7 +1470,7 @@ Value validateaddress(const Array& params, bool fHelp)\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n         if (pwalletMain->mapAddressBook.count(dest))\n-            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));\n+            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n     }\n     return ret;\n }"
      },
      {
        "sha": "4f3516953cab9f547eef6941fe773800986d1d7a",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -717,8 +717,8 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nReceived,\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n-                map<CTxDestination, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n-                if (mi != pwallet->mapAddressBook.end() && (*mi).second == strAccount)\n+                map<CTxDestination, CAddressBookData>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n+                if (mi != pwallet->mapAddressBook.end() && (*mi).second.name == strAccount)\n                     nReceived += r.second;\n             }\n             else if (strAccount.empty())\n@@ -1459,8 +1459,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)\n {\n-    std::map<CTxDestination, std::string>::iterator mi = mapAddressBook.find(address);\n-    mapAddressBook[address] = strName;\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n+    mapAddressBook[address].name = strName;\n     NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address), (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n     if (!fFileBacked)\n         return false;"
      },
      {
        "sha": "a3bcc26c5e00f2ad9285a6c634138f06444ec8d9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -64,6 +64,22 @@ class CKeyPool\n     )\n };\n \n+/** Address book data */\n+class CAddressBookData\n+{\n+public:\n+    std::string name;\n+\n+    CAddressBookData()\n+    {\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(name);\n+    )\n+};\n+\n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n@@ -124,7 +140,7 @@ class CWallet : public CCryptoKeyStore\n     int64 nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n-    std::map<CTxDestination, std::string> mapAddressBook;\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n     CPubKey vchDefaultKey;\n "
      },
      {
        "sha": "6cfd394bd0eac53bb6012d75a76ab6054e8de412",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618855133d4ae4ece130aec3b35c5a65bea95b8f/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "patch": "@@ -212,7 +212,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             string strAddress;\n             ssKey >> strAddress;\n-            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()];\n+            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].name;\n         }\n         else if (strType == \"tx\")\n         {"
      }
    ]
  },
  {
    "sha": "3624356e82015c980fa7b7e60dfbe128665b1952",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjI0MzU2ZTgyMDE1Yzk4MGZhN2I3ZTYwZGZiZTEyODY2NWIxOTUy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-15T23:01:09Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:45Z"
      },
      "message": "Refactor: Move GetAccountAddresses to CWallet",
      "tree": {
        "sha": "0002752cd17fa71e5065232c91ae7be83bc8f2bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0002752cd17fa71e5065232c91ae7be83bc8f2bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3624356e82015c980fa7b7e60dfbe128665b1952",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3624356e82015c980fa7b7e60dfbe128665b1952",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3624356e82015c980fa7b7e60dfbe128665b1952",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3624356e82015c980fa7b7e60dfbe128665b1952/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618855133d4ae4ece130aec3b35c5a65bea95b8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/618855133d4ae4ece130aec3b35c5a65bea95b8f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "78f561a0a9f061e2eaa32ecadd99c19c33effcef",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3624356e82015c980fa7b7e60dfbe128665b1952/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3624356e82015c980fa7b7e60dfbe128665b1952/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3624356e82015c980fa7b7e60dfbe128665b1952",
        "patch": "@@ -421,17 +421,6 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n-{\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, pwalletMain->mapAddressBook)\n-    {\n-        const CTxDestination& address = item.first;\n-        const string& strName = item.second.name;\n-        if (strName == strAccount)\n-            setAddress.insert(address);\n-    }\n-}\n-\n Value getreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -446,8 +435,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n     // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n-    set<CTxDestination> setAddress;\n-    GetAccountAddresses(strAccount, setAddress);\n+    set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n     int64 nAmount = 0;"
      },
      {
        "sha": "c0f2d74ca753dd4796d30dc51a5a36107e2a0f86",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3624356e82015c980fa7b7e60dfbe128665b1952/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3624356e82015c980fa7b7e60dfbe128665b1952/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3624356e82015c980fa7b7e60dfbe128665b1952",
        "patch": "@@ -1812,6 +1812,19 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     return ret;\n }\n \n+set<CTxDestination> CWallet::GetAccountAddresses(string strAccount) const\n+{\n+    set<CTxDestination> result;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n+    {\n+        const CTxDestination& address = item.first;\n+        const string& strName = item.second.name;\n+        if (strName == strAccount)\n+            result.insert(address);\n+    }\n+    return result;\n+}\n+\n bool CReserveKey::GetReservedKey(CPubKey& pubkey)\n {\n     if (nIndex == -1)"
      },
      {
        "sha": "8b9ccaf5cbfcaf52bffabd5d5b8f0c8c98968411",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3624356e82015c980fa7b7e60dfbe128665b1952/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3624356e82015c980fa7b7e60dfbe128665b1952/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3624356e82015c980fa7b7e60dfbe128665b1952",
        "patch": "@@ -73,11 +73,6 @@ class CAddressBookData\n     CAddressBookData()\n     {\n     }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(name);\n-    )\n };\n \n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n@@ -230,6 +225,8 @@ class CWallet : public CCryptoKeyStore\n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, int64> GetAddressBalances();\n \n+    std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n+\n     bool IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;\n     bool IsMine(const CTxOut& txout) const"
      }
    ]
  },
  {
    "sha": "a2189fbaf65dd56c808dc7429b800e70d31178c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjE4OWZiYWY2NWRkNTZjODA4ZGM3NDI5YjgwMGU3MGQzMTE3OGMz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-06-23T16:04:44Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:45Z"
      },
      "message": "update SelectParamsFromCommandLine() handling/order\n\n- move SelectParamsFromCommandLine() from init.cpp to bitcoin.cpp to allow\n  to use TestNet() for Bitcoin-Qt instead of GetBoolArg(\"-testnet\", false)\n- change order in bitcoind.cpp to match bitcoin.cpp functionality\n- hamonize error message strings for missing datadir and failing\n  SelectParamsFromCommandLine() in bitcoin.cpp and bitcoind.cpp\n- use TestNet() call in splashscreen.cpp",
      "tree": {
        "sha": "3a9e6d8fcb69d25f2e9f6f1091252367137f056c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a9e6d8fcb69d25f2e9f6f1091252367137f056c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2189fbaf65dd56c808dc7429b800e70d31178c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2189fbaf65dd56c808dc7429b800e70d31178c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2189fbaf65dd56c808dc7429b800e70d31178c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2189fbaf65dd56c808dc7429b800e70d31178c3/comments",
    "author": null,
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3624356e82015c980fa7b7e60dfbe128665b1952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3624356e82015c980fa7b7e60dfbe128665b1952",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3624356e82015c980fa7b7e60dfbe128665b1952"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 36,
      "deletions": 22
    },
    "files": [
      {
        "sha": "02e4e7d6e7c7db4a43705170095654a46cc3838b",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=a2189fbaf65dd56c808dc7429b800e70d31178c3",
        "patch": "@@ -39,10 +39,15 @@ bool AppInit(int argc, char* argv[])\n         ParseParameters(argc, argv);\n         if (!boost::filesystem::is_directory(GetDataDir(false)))\n         {\n-            fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n-            Shutdown();\n+            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n+            return false;\n         }\n         ReadConfigFile(mapArgs, mapMultiArgs);\n+        // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+        if (!SelectParamsFromCommandLine()) {\n+            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+            return false;\n+        }\n \n         if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n         {\n@@ -67,10 +72,6 @@ bool AppInit(int argc, char* argv[])\n \n         if (fCommandLine)\n         {\n-            if (!SelectParamsFromCommandLine()) {\n-                fprintf(stderr, \"Error: invalid combination of -regtest and -testnet.\\n\");\n-                return false;\n-            }\n             int ret = CommandLineRPC(argc, argv);\n             exit(ret);\n         }"
      },
      {
        "sha": "64a5de239fbfd86115d154f8c72d156fd606f645",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a2189fbaf65dd56c808dc7429b800e70d31178c3",
        "patch": "@@ -373,9 +373,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // ********************************************************* Step 2: parameter interactions\n \n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n-    if (!SelectParamsFromCommandLine()) {\n-        return InitError(\"Invalid combination of -testnet and -regtest.\");\n-    }\n \n     if (mapArgs.count(\"-bind\")) {\n         // when specifying an explicit binding address, you want to listen on it"
      },
      {
        "sha": "e4ca9e4387974d4324b094305986569e5d601386",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 12,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a2189fbaf65dd56c808dc7429b800e70d31178c3",
        "patch": "@@ -154,10 +154,23 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n+    bool fMissingDatadir = false;\n+    bool fSelParFromCLFailed = false;\n+\n     fHaveGUI = true;\n \n     // Command-line options take precedence:\n     ParseParameters(argc, argv);\n+    // ... then bitcoin.conf:\n+    if (!boost::filesystem::is_directory(GetDataDir(false))) {\n+        fMissingDatadir = true;\n+    } else {\n+        ReadConfigFile(mapArgs, mapMultiArgs);\n+    }\n+    // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fSelParFromCLFailed = true;\n+    }\n \n #if QT_VERSION < 0x050000\n     // Internal string conversion is all UTF-8\n@@ -175,7 +188,7 @@ int main(int argc, char *argv[])\n     // as it is used to locate QSettings)\n     QApplication::setOrganizationName(\"Bitcoin\");\n     QApplication::setOrganizationDomain(\"bitcoin.org\");\n-    if (GetBoolArg(\"-testnet\", false)) // Separate UI settings for testnet\n+    if (TestNet()) // Separate UI settings for testnet\n         QApplication::setApplicationName(\"Bitcoin-Qt-testnet\");\n     else\n         QApplication::setApplicationName(\"Bitcoin-Qt\");\n@@ -184,6 +197,17 @@ int main(int argc, char *argv[])\n     QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n+    // Now that translations are initialized check for errors and allow a translatable error message\n+    if (fMissingDatadir) {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n+                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n+        return 1;\n+    }\n+    else if (fSelParFromCLFailed) {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"), QObject::tr(\"Error: Invalid combination of -regtest and -testnet.\"));\n+        return 1;\n+    }\n+\n     // User language is set up: pick a data directory\n     Intro::pickDataDirectory();\n \n@@ -196,16 +220,7 @@ int main(int argc, char *argv[])\n     // Install global event filter that makes sure that long tooltips can be word-wrapped\n     app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));\n \n-    // ... then bitcoin.conf:\n-    if (!boost::filesystem::is_directory(GetDataDir(false)))\n-    {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n-                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n-        return 1;\n-    }\n-    ReadConfigFile(mapArgs, mapMultiArgs);\n-\n-    // ... then GUI settings:\n+    // ... now GUI settings:\n     OptionsModel optionsModel;\n \n     // Subscribe to global signals from core\n@@ -245,7 +260,7 @@ int main(int argc, char *argv[])\n \n         boost::thread_group threadGroup;\n \n-        BitcoinGUI window(GetBoolArg(\"-testnet\", false), 0);\n+        BitcoinGUI window(TestNet(), 0);\n         guiref = &window;\n \n         QTimer* pollShutdownTimer = new QTimer(guiref);"
      },
      {
        "sha": "7c9bc46c46f2a1557f70e492703fed284fa72f78",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2189fbaf65dd56c808dc7429b800e70d31178c3/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=a2189fbaf65dd56c808dc7429b800e70d31178c3",
        "patch": "@@ -1,6 +1,7 @@\n #include \"splashscreen.h\"\n #include \"clientversion.h\"\n #include \"util.h\"\n+#include \"chainparams.h\"\n \n #include <QApplication>\n #include <QPainter>\n@@ -26,7 +27,7 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f) :\n \n     // load the bitmap for writing some text over it\n     QPixmap newPixmap;\n-    if(GetBoolArg(\"-testnet\", false)) {\n+    if(TestNet()) {\n         newPixmap     = QPixmap(\":/images/splash_testnet\");\n     }\n     else {"
      }
    ]
  },
  {
    "sha": "a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzNhYTY4Yjg0OGY3ZmU0MWFhMmU2YTg3MjFkYmM3ZmRjZmE4MDgw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-18T06:50:17Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:45Z"
      },
      "message": "Rework when payment server is started",
      "tree": {
        "sha": "53ac3ec549f9c13dcddf6878110e236605cf322f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53ac3ec549f9c13dcddf6878110e236605cf322f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2189fbaf65dd56c808dc7429b800e70d31178c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2189fbaf65dd56c808dc7429b800e70d31178c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2189fbaf65dd56c808dc7429b800e70d31178c3"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "52015b47516b29483e7e47ae85f75907b407637e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
        "patch": "@@ -197,6 +197,12 @@ int main(int argc, char *argv[])\n     QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n+    // Do this early as we don't want to bother initializing if we are just calling IPC\n+    // ... but do it after creating app and setting up translations, so errors are\n+    // translated properly.\n+    if (PaymentServer::ipcSendCommandLine())\n+        exit(0);\n+\n     // Now that translations are initialized check for errors and allow a translatable error message\n     if (fMissingDatadir) {\n         QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n@@ -208,15 +214,13 @@ int main(int argc, char *argv[])\n         return 1;\n     }\n \n+    // Start up the payment server early, too, so impatient users that click on\n+    // bitcoin: links repeatedly have their payment requests routed to this process:\n+    PaymentServer* paymentServer = new PaymentServer(&app);\n+\n     // User language is set up: pick a data directory\n     Intro::pickDataDirectory();\n \n-    // Do this early as we don't want to bother initializing if we are just calling IPC\n-    // ... but do it after creating app, so QCoreApplication::arguments is initialized:\n-    if (PaymentServer::ipcSendCommandLine())\n-        exit(0);\n-    PaymentServer* paymentServer = new PaymentServer(&app);\n-\n     // Install global event filter that makes sure that long tooltips can be word-wrapped\n     app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));\n "
      }
    ]
  },
  {
    "sha": "47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2QwNTM0MzY4ZmJmMGUzZmIyY2FkN2QwNWQ2MDUwMWQyOWY2MmFh",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-23T07:01:08Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T01:05:45Z"
      },
      "message": "Route qDebug() messages to debug.log",
      "tree": {
        "sha": "5294b7b4791a813980588600104f7b95839132b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5294b7b4791a813980588600104f7b95839132b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d0534368fbf0e3fb2cad7d05d60501d29f62aa/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a73aa68b848f7fe41aa2e6a8721dbc7fdcfa8080"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ab5d1f7eece1d4275ce526be11d4bf86312d6ad",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47d0534368fbf0e3fb2cad7d05d60501d29f62aa/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47d0534368fbf0e3fb2cad7d05d60501d29f62aa/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
        "patch": "@@ -151,6 +151,19 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n         QApplication::installTranslator(&translator);\n }\n \n+/* qDebug() message handler --> debug.log */\n+#if QT_VERSION < 0x050000\n+void DebugMessageHandler(QtMsgType type, const char * msg)\n+{\n+    OutputDebugStringF(\"%s\\n\", msg);\n+}\n+#else\n+void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, const QString &msg)\n+{\n+    OutputDebugStringF(\"%s\\n\", qPrintable(msg));\n+}\n+#endif\n+\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n@@ -242,6 +255,13 @@ int main(int argc, char *argv[])\n         return 1;\n     }\n \n+    // Install qDebug() message handler to route to debug.log:\n+#if QT_VERSION < 0x050000\n+    qInstallMsgHandler(DebugMessageHandler);\n+#else\n+    qInstallMessageHandler(DebugMessageHandler);\n+#endif\n+\n     SplashScreen splash(QPixmap(), 0);\n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n     {"
      }
    ]
  },
  {
    "sha": "a41d5fe01947f2f878c055670986a165af800f9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDFkNWZlMDE5NDdmMmY4NzhjMDU1NjcwOTg2YTE2NWFmODAwZjlh",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-07-22T06:50:39Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-22T06:18:25Z"
      },
      "message": "Payment Protocol: X509-validated payment requests\n\nAdd support for a Payment Protocol to Bitcoin-Qt.\n\nPayment messages are protocol-buffer encoded and communicated over\nhttp(s), so this adds a dependency on the Google protocol buffer\nlibrary, and requires Qt with OpenSSL support.",
      "tree": {
        "sha": "40eeada1ebc180f8e3669a7d164104686dc0c618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40eeada1ebc180f8e3669a7d164104686dc0c618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a41d5fe01947f2f878c055670986a165af800f9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41d5fe01947f2f878c055670986a165af800f9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a41d5fe01947f2f878c055670986a165af800f9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41d5fe01947f2f878c055670986a165af800f9a/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d0534368fbf0e3fb2cad7d05d60501d29f62aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47d0534368fbf0e3fb2cad7d05d60501d29f62aa"
      }
    ],
    "stats": {
      "total": 2807,
      "additions": 2466,
      "deletions": 341
    },
    "files": [
      {
        "sha": "9baa03a4e3dd9af4161814d629e59246372623af",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 20,
        "deletions": 8,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -16,21 +16,29 @@ CONFIG += thread\n # or when linking against a specific BerkelyDB version: BDB_LIB_SUFFIX=-4.8\n \n # Dependency library locations can be customized with:\n-#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,\n-#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively\n+#    BOOST_INCLUDE_PATH BOOST_LIB_PATH,\n+#    BDB_INCLUDE_PATH BDB_LIB_PATH,\n+#    OPENSSL_INCLUDE_PATH OPENSSL_LIB_PATH\n+#    PROTOBUF_INCLUDE_PATH PROTOBUF_LIB_PATH\n+#    PROTOC : protocol buffer compiler tool\n \n OBJECTS_DIR = build\n MOC_DIR = build\n UI_DIR = build\n+PROTO_DIR = build\n+PROTO_PATH = src/qt\n \n contains(BITCOIN_QT_TEST, 1) {\n OBJECTS_DIR = build_test\n MOC_DIR = build_test\n UI_DIR = build_test\n+PROTO_DIR = build_test\n \n SOURCES += src/qt/test/test_main.cpp \\\n-    src/qt/test/uritests.cpp\n-HEADERS += src/qt/test/uritests.h\n+    src/qt/test/uritests.cpp \\\n+    src/qt/test/paymentservertests.cpp\n+HEADERS += src/qt/test/uritests.h \\\n+    src/qt/test/paymentservertests.h\n DEPENDPATH += src/qt/test\n QT += testlib\n TARGET = bitcoin-qt_test\n@@ -219,6 +227,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/askpassphrasedialog.h \\\n     src/protocol.h \\\n     src/qt/notificator.h \\\n+    src/qt/paymentrequestplus.h \\\n     src/qt/paymentserver.h \\\n     src/allocators.h \\\n     src/ui_interface.h \\\n@@ -297,6 +306,7 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/askpassphrasedialog.cpp \\\n     src/protocol.cpp \\\n     src/qt/notificator.cpp \\\n+    src/qt/paymentrequestplus.cpp \\\n     src/qt/paymentserver.cpp \\\n     src/qt/rpcconsole.cpp \\\n     src/noui.cpp \\\n@@ -320,13 +330,15 @@ FORMS += src/qt/forms/sendcoinsdialog.ui \\\n     src/qt/forms/optionsdialog.ui \\\n     src/qt/forms/intro.ui\n \n+PROTOS = src/qt/paymentrequest.proto\n+include(share/qt/protobuf.pri)\n+\n contains(USE_QRCODE, 1) {\n HEADERS += src/qt/qrcodedialog.h\n SOURCES += src/qt/qrcodedialog.cpp\n FORMS += src/qt/forms/qrcodedialog.ui\n }\n \n-\n # Todo: Remove this line when switching to Qt5, as that option was removed\n CODECFORTR = UTF-8\n \n@@ -420,9 +432,9 @@ macx:QMAKE_CXXFLAGS_THREAD += -pthread\n macx:QMAKE_INFO_PLIST = share/qt/Info.plist\n \n # Set libraries and includes at end, to use platform-defined defaults if not overridden\n-INCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH\n-LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,)\n-LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n+INCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$PROTOBUF_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH\n+LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(PROTOBUF_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,)\n+LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX -lprotobuf\n # -lgdi32 has to happen after -lcrypto (see  #681)\n win32:LIBS += -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32\n LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX"
      },
      {
        "sha": "f1c960ba110e842f783c638ff354c5c3e3d5250b",
        "filename": "contrib/gitian-descriptors/README",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -32,6 +32,7 @@ Once you've got the right hardware and software:\n     wget 'https://downloads.sourceforge.net/project/libpng/zlib/1.2.6/zlib-1.2.6.tar.gz'\n     wget 'https://downloads.sourceforge.net/project/libpng/libpng15/older-releases/1.5.9/libpng-1.5.9.tar.gz'\n     wget 'http://releases.qt-project.org/qt4/source/qt-everywhere-opensource-src-4.8.3.tar.gz'\n+    wget 'http://protobuf.googlecode.com/files/protobuf-2.5.0.tar.bz2'\n     cd ../..\n \n     cd gitian-builder\n@@ -50,6 +51,7 @@ Once you've got the right hardware and software:\n     ./bin/gbuild --commit bitcoin=HEAD ../bitcoin/contrib/gitian-descriptors/boost-win32.yml\n     ./bin/gbuild --commit bitcoin=HEAD ../bitcoin/contrib/gitian-descriptors/deps-win32.yml\n     ./bin/gbuild --commit bitcoin=HEAD ../bitcoin/contrib/gitian-descriptors/qt-win32.yml\n+    ./bin/gbuild --commit bitcoin=HEAD ../bitcoin/contrib/gitian-descriptors/protobuf-win32.yml\n \n     # Build Win32 release:\n     ./bin/gbuild --commit bitcoin=HEAD ../bitcoin/contrib/gitian-descriptors/gitian-win32.yml"
      },
      {
        "sha": "5fc5a5a16b2d91f3796a868677c1d424acc1e38e",
        "filename": "contrib/gitian-descriptors/gitian-win32.yml",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/gitian-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/gitian-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win32.yml?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -15,16 +15,18 @@ remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"qt-win32-4.8.3-gitian-r1.zip\"\n+- \"qt-win32-4.8.3-gitian-r2.zip\"\n - \"boost-win32-1.50.0-gitian2.zip\"\n - \"bitcoin-deps-0.0.5.zip\"\n+- \"protobuf-win32-2.5.0-gitian-r1.zip\"\n script: |\n   #\n-  mkdir $HOME/qt\n-  cd $HOME/qt\n-  unzip ../build/qt-win32-4.8.3-gitian-r1.zip\n+  export QTDIR=$HOME/qt\n+  mkdir $QTDIR\n+  cd $QTDIR\n+  unzip ../build/qt-win32-4.8.3-gitian-r2.zip\n   cd $HOME/build/\n-  export PATH=$HOME/qt/bin/:$PATH\n+  export PATH=$QTDIR/bin/:$PATH\n   #\n   mkdir boost_1_50_0\n   cd boost_1_50_0\n@@ -41,6 +43,8 @@ script: |\n   #\n   unzip bitcoin-deps-0.0.5.zip\n   #\n+  unzip protobuf-win32-2.5.0-gitian-r1.zip\n+  #\n   find -type f | xargs touch --date=\"$REFERENCE_DATETIME\"\n   #\n   cd bitcoin\n@@ -51,7 +55,7 @@ script: |\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  $HOME/qt/src/bin/qmake -spec unsupported/win32-g++-cross MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n+  $QTDIR/bin/qmake -spec unsupported/win32-g++-cross PROTOBUF_LIB_PATH=$HOME/build/protobuf-win32 PROTOBUF_INCLUDE_PATH=$HOME/build/protobuf-win32 PROTOC=$HOME/build/protobuf-win32/protoc MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n   make $MAKEOPTS\n   cp release/bitcoin-qt.exe $OUTDIR/\n   #"
      },
      {
        "sha": "6d47a46d5adcaf6885328a91cb5c484acdf9902c",
        "filename": "contrib/gitian-descriptors/gitian.yml",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/gitian.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/gitian.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian.yml?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -18,38 +18,44 @@ packages:\n - \"unzip\"\n - \"pkg-config\"\n - \"libpng12-dev\"\n-reference_datetime: \"2011-01-30 00:00:00\"\n+reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n - \"miniupnpc-1.6.tar.gz\"\n - \"qrencode-3.2.0.tar.bz2\"\n+- \"protobuf-2.5.0.tar.bz2\"\n script: |\n   INSTDIR=\"$HOME/install\"\n   export LIBRARY_PATH=\"$INSTDIR/lib\"\n   #\n-  tar xzf miniupnpc-1.6.tar.gz\n+  tar xzfm miniupnpc-1.6.tar.gz\n   cd miniupnpc-1.6\n   INSTALLPREFIX=$INSTDIR make $MAKEOPTS install\n   cd ..\n   #\n-  tar xjf qrencode-3.2.0.tar.bz2\n+  tar xjfm qrencode-3.2.0.tar.bz2\n   cd qrencode-3.2.0\n   ./configure --prefix=$INSTDIR --enable-static --disable-shared\n   make $MAKEOPTS install\n   cd ..\n   #\n+  tar xjfm protobuf-2.5.0.tar.bz2\n+  cd protobuf-2.5.0\n+  ./configure --prefix=$INSTDIR --enable-static --disable-shared\n+  make $MAKEOPTS install\n+  cd ..\n+  #\n   cd bitcoin\n   mkdir -p $OUTDIR/src\n   git archive HEAD | tar -x -C $OUTDIR/src\n   cp $OUTDIR/src/doc/README.md $OUTDIR\n   cp $OUTDIR/src/COPYING $OUTDIR\n-  cd src\n-  make -f makefile.unix STATIC=1 OPENSSL_INCLUDE_PATH=\"$INSTDIR/include\" OPENSSL_LIB_PATH=\"$INSTDIR/lib\" $MAKEOPTS bitcoind USE_UPNP=0 DEBUGFLAGS=\n   mkdir -p $OUTDIR/bin/$GBUILD_BITS\n-  install -s bitcoind $OUTDIR/bin/$GBUILD_BITS\n-  cd ..\n-  qmake INCLUDEPATH=\"$INSTDIR/include\" LIBS=\"-L$INSTDIR/lib\" RELEASE=1 USE_QRCODE=1\n+  qmake INCLUDEPATH=\"$INSTDIR/include\" LIBS=\"-L$INSTDIR/lib\" PROTOC=\"$INSTDIR/bin/protoc\" PROTOBUF_LIB_PATH=\"$INSTDIR/lib\" PROTOBUF_INCLUDE_PATH=\"$INSTDIR/include\" RELEASE=1 USE_QRCODE=1\n   make $MAKEOPTS\n   install bitcoin-qt $OUTDIR/bin/$GBUILD_BITS\n+  cd src\n+  make -f makefile.unix STATIC=1 OPENSSL_INCLUDE_PATH=\"$INSTDIR/include\" OPENSSL_LIB_PATH=\"$INSTDIR/lib\" $MAKEOPTS bitcoind USE_UPNP=0 DEBUGFLAGS=\n+  install -s bitcoind $OUTDIR/bin/$GBUILD_BITS"
      },
      {
        "sha": "492b21e7f501f71de0518cf27c77b4201cb0a45d",
        "filename": "contrib/gitian-descriptors/protobuf-win32.yml",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/protobuf-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/protobuf-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/protobuf-win32.yml?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,37 @@\n+---\n+name: \"protobuf-win32\"\n+suites:\n+- \"lucid\"\n+architectures:\n+- \"i386\"\n+packages:\n+- \"mingw32\"\n+- \"zip\"\n+- \"faketime\"\n+reference_datetime: \"2013-04-15 00:00:00\"\n+remotes: []\n+files:\n+- \"protobuf-2.5.0.tar.bz2\"\n+script: |\n+  #\n+  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n+  export FAKETIME=$REFERENCE_DATETIME\n+  export TZ=UTC\n+  #\n+  tar xjf protobuf-2.5.0.tar.bz2\n+  cd protobuf-2.5.0\n+  # First: build a native (linux) protoc\n+  ./configure --enable-shared=no --disable-dependency-tracking\n+  make\n+  mkdir -p host\n+  cp src/protoc host\n+  # Now recompile with the mingw cross-compiler:\n+  make distclean\n+  ./configure --enable-shared=no --disable-dependency-tracking --with-protoc=$(pwd)/host/protoc --host=i586-mingw32msvc CXXFLAGS=-frandom-seed=11\n+  make\n+  cd ..\n+  mkdir -p protobuf-win32\n+  cp protobuf-2.5.0/host/protoc protobuf-win32/protoc\n+  cp protobuf-2.5.0/src/.libs/libprotobuf.a protobuf-win32/libprotobuf.a\n+  cp -r protobuf-2.5.0/src/google protobuf-win32/\n+  zip -r $OUTDIR/protobuf-win32-2.5.0-gitian-r1.zip protobuf-win32"
      },
      {
        "sha": "7152875b86d6f1803e3b762f0a99fea8ae2c5b43",
        "filename": "contrib/gitian-descriptors/qt-win32.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/qt-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/contrib/gitian-descriptors/qt-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-win32.yml?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -12,11 +12,14 @@ reference_datetime: \"2011-01-30 00:00:00\"\n remotes: []\n files:\n - \"qt-everywhere-opensource-src-4.8.3.tar.gz\"\n+- \"bitcoin-deps-0.0.5.zip\"\n script: |\n   INSTDIR=\"$HOME/qt/\"\n   mkdir $INSTDIR\n-  SRCDIR=\"$INSTDIR/src/\"\n-  mkdir $SRCDIR\n+  #\n+  # Need mingw-compiled openssl from bitcoin-deps:\n+  unzip bitcoin-deps-0.0.5.zip\n+  DEPSDIR=`pwd`\n   #\n   tar xzf qt-everywhere-opensource-src-4.8.3.tar.gz\n   cd qt-everywhere-opensource-src-4.8.3\n@@ -40,15 +43,14 @@ script: |\n   #export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  ./configure -prefix $INSTDIR -confirm-license -release -opensource -static -no-qt3support -xplatform unsupported/win32-g++-cross -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-declarative -no-script -no-scripttools -no-javascript-jit -no-webkit -no-svg -no-xmlpatterns -no-sql-sqlite -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-libtiff -no-opengl -nomake examples -nomake demos -nomake docs -no-feature-style-plastique -no-feature-style-cleanlooks -no-feature-style-motif -no-feature-style-cde -no-feature-style-windowsce -no-feature-style-windowsmobile -no-feature-style-s60\n+  # Compile static libraries, and use statically linked openssl (-openssl-linked):\n+  OPENSSL_LIBS=\"-L$DEPSDIR/openssl-1.0.1c -lssl -lcrypto -lgdi32\" ./configure -prefix $INSTDIR -I $DEPSDIR/openssl-1.0.1c/include  -confirm-license -release -opensource -static -no-qt3support -xplatform unsupported/win32-g++-cross -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-declarative -no-script -no-scripttools -no-javascript-jit -no-webkit -no-svg -no-xmlpatterns -no-sql-sqlite -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-libtiff -no-opengl -nomake examples -nomake demos -nomake docs -no-feature-style-plastique -no-feature-style-cleanlooks -no-feature-style-motif -no-feature-style-cde -no-feature-style-windowsce -no-feature-style-windowsmobile -no-feature-style-s60 -openssl-linked\n   find . -name *.prl | xargs -l sed 's|/\\.||' -i\n   find . -name *.prl | xargs -l sed 's|/$||' -i\n   make $MAKEOPTS install\n-  cp -a bin $SRCDIR/\n   cd $INSTDIR\n   find . -name *.prl | xargs -l sed 's|/$||' -i\n-  #sed 's|QMAKE_PRL_LIBS.*|QMAKE_PRL_LIBS = -lQtDeclarative -lQtScript -lQtSvg -lQtSql -lQtXmlPatterns -lQtGui -lgdi32 -lcomdlg32 -loleaut32 -limm32 -lwinmm -lwinspool -lmsimg32 -lQtNetwork -lQtCore -lole32 -luuid -lws2_32 -ladvapi32 -lshell32 -luser32 -lkernel32|' -i imports/Qt/labs/particles/qmlparticlesplugin.prl\n \n   # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-  zip -r $OUTDIR/qt-win32-4.8.3-gitian-r1.zip *\n+  zip -r $OUTDIR/qt-win32-4.8.3-gitian-r2.zip *"
      },
      {
        "sha": "cbaaf645af44965470972aa80cf52eab854c9fe5",
        "filename": "doc/readme-qt.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/doc/readme-qt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/doc/readme-qt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/readme-qt.md?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -18,13 +18,13 @@ for Debian and Ubuntu  <= 11.10 :\n \n     apt-get install qt4-qmake libqt4-dev build-essential libboost-dev libboost-system-dev \\\n         libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev \\\n-        libssl-dev libdb4.8++-dev\n+        libssl-dev libdb4.8++-dev libprotobuf-dev protobuf-compiler\n \n for Ubuntu >= 12.04 (please read the 'Berkely DB version warning' below):\n \n     apt-get install qt4-qmake libqt4-dev build-essential libboost-dev libboost-system-dev \\\n         libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev \\\n-        libssl-dev libdb++-dev libminiupnpc-dev\n+        libssl-dev libdb++-dev libminiupnpc-dev libprotobuf-dev protobuf-compiler\n \n For Qt 5 you need the following, otherwise you get an error with lrelease when running qmake:\n \n@@ -48,12 +48,12 @@ An executable named `bitcoin-qt` will be built.\n * Execute the following commands in a terminal to get the dependencies using MacPorts\n \n \t\tsudo port selfupdate\n-\t\tsudo port install boost db48 miniupnpc\n+\t\tsudo port install boost db48 miniupnpc protobuf-cpp\n \n * Execute the following commands in a terminal to get the dependencies using HomeBrew:\n \n \t\tbrew update\n-\t\tbrew install boost miniupnpc openssl berkeley-db4\n+\t\tbrew install boost miniupnpc openssl berkeley-db4 protobuf\n \n - If using HomeBrew,  edit `bitcoin-qt.pro` to account for library location differences. There's a diff in `contrib/homebrew/bitcoin-qt-pro.patch` that shows what you need to change, or you can just patch by doing\n "
      },
      {
        "sha": "f191402e83fbac8fee2046fdfc090c62f38c16db",
        "filename": "share/qt/Info.plist",
        "status": "modified",
        "additions": 67,
        "deletions": 29,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/share/qt/Info.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/share/qt/Info.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -2,36 +2,74 @@\n <!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n <plist version=\"0.9\">\n <dict>\n-\t<key>CFBundleIconFile</key>\n-\t<string>bitcoin.icns</string>\n-\t<key>CFBundlePackageType</key>\n-\t<string>APPL</string>\n-\t<key>CFBundleGetInfoString</key>\n-\t<string>$VERSION, Copyright \u00a9 2009-$YEAR The Bitcoin developers</string>\n-\t<key>CFBundleShortVersionString</key>\n-\t<string>$VERSION</string>\n-\t<key>CFBundleVersion</key>\n-\t<string>$VERSION</string>\n-\t<key>CFBundleSignature</key>\n-\t<string>????</string>\n-\t<key>CFBundleExecutable</key>\n-\t<string>Bitcoin-Qt</string>\n-\t<key>CFBundleIdentifier</key>\n-\t<string>org.bitcoinfoundation.Bitcoin-Qt</string>\n-        <key>CFBundleURLTypes</key>\n+  <key>CFBundleIconFile</key>\n+  <string>bitcoin.icns</string>\n+  <key>CFBundlePackageType</key>\n+  <string>APPL</string>\n+  <key>CFBundleGetInfoString</key>\n+  <string>$VERSION, Copyright \u00a9 2009-$YEAR The Bitcoin developers</string>\n+  <key>CFBundleShortVersionString</key>\n+  <string>$VERSION</string>\n+  <key>CFBundleVersion</key>\n+  <string>$VERSION</string>\n+  <key>CFBundleSignature</key>\n+  <string>????</string>\n+  <key>CFBundleExecutable</key>\n+  <string>Bitcoin-Qt</string>\n+  <key>CFBundleIdentifier</key>\n+  <string>org.bitcoinfoundation.Bitcoin-Qt</string>\n+\n+  <key>CFBundleURLTypes</key>\n+  <array>\n+    <dict>\n+      <key>CFBundleTypeRole</key>\n+      <string>Editor</string>\n+      <key>CFBundleURLName</key>\n+      <string>org.bitcoin.BitcoinPayment</string>\n+      <key>CFBundleURLSchemes</key>\n+      <array>\n+        <string>bitcoin</string>\n+      </array>\n+    </dict>\n+  </array>\n+\n+  <key>UTExportedTypeDeclarations</key>\n+  <array>\n+    <dict>\n+      <key>UTTypeIdentifier</key>\n+      <string>org.bitcoin.paymentrequest</string>\n+      <key>UTTypeDescription</key>\n+      <string>Bitcoin payment request</string>\n+      <key>UTTypeConformsTo</key>\n+      <array>\n+        <string>public.data</string>\n+      </array>\n+      <key>UTTypeTagSpecification</key>\n+      <dict>\n+        <key>public.mime-type</key>\n+        <string>application/x-bitcoin-payment-request</string>\n+        <key>public.filename-extension</key>\n         <array>\n-          <dict>\n-            <key>CFBundleTypeRole</key>\n-            <string>Editor</string>\n-            <key>CFBundleURLName</key>\n-            <string>org.bitcoinfoundation.BitcoinPayment</string>\n-            <key>CFBundleURLSchemes</key>\n-            <array>\n-              <string>bitcoin</string>\n-            </array>\n-          </dict>\n+          <string>bitcoinpaymentrequest</string>\n         </array>\n-\t<key>NSHighResolutionCapable</key>\n-\t<true/>\n+      </dict>\n+    </dict>\n+  </array>\n+\n+  <key>CFBundleDocumentTypes</key>\n+  <array>\n+    <dict>\n+      <key>CFBundleTypeRole</key>\n+      <string>Editor</string>\n+      <key>LSItemContentTypes</key>\n+      <array>\n+        <string>org.bitcoin.paymentrequest</string>\n+      </array>\n+      <key>LSHandlerRank</key>\n+      <string>Owner</string>\n+    </dict>\n+  </array>\n+  <key>NSHighResolutionCapable</key>\n+  <true/>\n </dict>\n </plist>"
      },
      {
        "sha": "865fe865550ae21f2eec4bb7c8f8c1817bdf1bce",
        "filename": "share/qt/protobuf.pri",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/share/qt/protobuf.pri",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/share/qt/protobuf.pri",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/protobuf.pri?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,35 @@\n+# Based on: http://code.google.com/p/ostinato/source/browse/protobuf.pri\n+#\n+# Qt qmake integration with Google Protocol Buffers compiler protoc\n+#\n+# To compile protocol buffers with qt qmake, specify PROTOS variable and\n+# include this file\n+#\n+# Example:\n+# PROTOS = a.proto b.proto\n+# include(protobuf.pri)\n+#\n+# Set PROTO_PATH if you need to set the protoc --proto_path search path\n+# Set PROTOC to the path to the protoc compiler if it is not in your $PATH\n+#\n+\n+isEmpty(PROTO_DIR):PROTO_DIR = .\n+isEmpty(PROTOC):PROTOC = protoc\n+\n+PROTOPATHS =\n+for(p, PROTO_PATH):PROTOPATHS += --proto_path=$${p}\n+\n+protobuf_decl.name  = protobuf header\n+protobuf_decl.input = PROTOS\n+protobuf_decl.output  = $${PROTO_DIR}/${QMAKE_FILE_BASE}.pb.h\n+protobuf_decl.commands = $${PROTOC} --cpp_out=\"$${PROTO_DIR}\" $${PROTOPATHS} --proto_path=${QMAKE_FILE_IN_PATH} ${QMAKE_FILE_NAME}\n+protobuf_decl.variable_out = GENERATED_FILES\n+QMAKE_EXTRA_COMPILERS += protobuf_decl\n+\n+protobuf_impl.name  = protobuf implementation\n+protobuf_impl.input = PROTOS\n+protobuf_impl.output  = $${PROTO_DIR}/${QMAKE_FILE_BASE}.pb.cc\n+protobuf_impl.depends  = $${PROTO_DIR}/${QMAKE_FILE_BASE}.pb.h\n+protobuf_impl.commands = $$escape_expand(\\\\n)\n+protobuf_impl.variable_out = GENERATED_SOURCES\n+QMAKE_EXTRA_COMPILERS += protobuf_impl"
      },
      {
        "sha": "72635650472fad34c55864ae3a679bdad023659b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -895,7 +895,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         CPubKey newDefaultKey;\n         if (pwalletMain->GetKeyFromPool(newDefaultKey, false)) {\n             pwalletMain->SetDefaultKey(newDefaultKey);\n-            if (!pwalletMain->SetAddressBookName(pwalletMain->vchDefaultKey.GetID(), \"\"))\n+            if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n                 strErrors << _(\"Cannot write default address\") << \"\\n\";\n         }\n "
      },
      {
        "sha": "dcc70222cc977cc87a9d44b6223d686cfb8e4ce7",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -62,9 +62,19 @@ class AddressTablePriv\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n+\n+                AddressTableEntry::Type addressType;\n+                const std::string& strPurpose = item.second.purpose;\n+                if (strPurpose == \"send\") addressType = AddressTableEntry::Sending;\n+                else if (strPurpose == \"receive\") addressType = AddressTableEntry::Receiving;\n+                else if (strPurpose == \"unknown\") {\n+                    bool fMine = IsMine(*wallet, address.Get());\n+                    addressType = (fMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending);\n+                }\n+                else continue; // \"refund\" addresses aren't shown, and change addresses aren't in mapAddressBook at all.\n+\n                 const std::string& strName = item.second.name;\n-                bool fMine = IsMine(*wallet, address.Get());\n-                cachedAddressTable.append(AddressTableEntry(fMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending,\n+                cachedAddressTable.append(AddressTableEntry(addressType,\n                                   QString::fromStdString(strName),\n                                   QString::fromStdString(address.ToString())));\n             }\n@@ -215,7 +225,7 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n     if(!index.isValid())\n         return false;\n     AddressTableEntry *rec = static_cast<AddressTableEntry*>(index.internalPointer());\n-\n+    std::string strPurpose = (rec->type == AddressTableEntry::Sending ? \"send\" : \"receive\");\n     editStatus = OK;\n \n     if(role == Qt::EditRole)\n@@ -229,7 +239,7 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n                 editStatus = NO_CHANGES;\n                 return false;\n             }\n-            wallet->SetAddressBookName(CBitcoinAddress(rec->address.toStdString()).Get(), value.toString().toStdString());\n+            wallet->SetAddressBook(CBitcoinAddress(rec->address.toStdString()).Get(), value.toString().toStdString(), strPurpose);\n             break;\n         case Address:\n             // Do nothing, if old address == new address\n@@ -257,9 +267,9 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n                 {\n                     LOCK(wallet->cs_wallet);\n                     // Remove old entry\n-                    wallet->DelAddressBookName(CBitcoinAddress(rec->address.toStdString()).Get());\n+                    wallet->DelAddressBook(CBitcoinAddress(rec->address.toStdString()).Get());\n                     // Add new entry with new address\n-                    wallet->SetAddressBookName(CBitcoinAddress(value.toString().toStdString()).Get(), rec->label.toStdString());\n+                    wallet->SetAddressBook(CBitcoinAddress(value.toString().toStdString()).Get(), rec->label.toStdString(), strPurpose);\n                 }\n             }\n             break;\n@@ -368,7 +378,8 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     // Add entry\n     {\n         LOCK(wallet->cs_wallet);\n-        wallet->SetAddressBookName(CBitcoinAddress(strAddress).Get(), strLabel);\n+        wallet->SetAddressBook(CBitcoinAddress(strAddress).Get(), strLabel,\n+                               (type == Send ? \"send\" : \"receive\"));\n     }\n     return QString::fromStdString(strAddress);\n }\n@@ -385,7 +396,7 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent\n     }\n     {\n         LOCK(wallet->cs_wallet);\n-        wallet->DelAddressBookName(CBitcoinAddress(rec->address.toStdString()).Get());\n+        wallet->DelAddressBook(CBitcoinAddress(rec->address.toStdString()).Get());\n     }\n     return true;\n }"
      },
      {
        "sha": "e7cf440044998b3c7aa710ed3340bc2c81d483de",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -213,7 +213,7 @@ int main(int argc, char *argv[])\n     // Do this early as we don't want to bother initializing if we are just calling IPC\n     // ... but do it after creating app and setting up translations, so errors are\n     // translated properly.\n-    if (PaymentServer::ipcSendCommandLine())\n+    if (PaymentServer::ipcSendCommandLine(argc, argv))\n         exit(0);\n \n     // Now that translations are initialized check for errors and allow a translatable error message\n@@ -299,6 +299,9 @@ int main(int argc, char *argv[])\n \n                 optionsModel.Upgrade(); // Must be done after AppInit2\n \n+                PaymentServer::LoadRootCAs();\n+                paymentServer->initNetManager(optionsModel);\n+\n                 if (splashref)\n                     splash.finish(&window);\n \n@@ -320,8 +323,15 @@ int main(int argc, char *argv[])\n                 }\n \n                 // Now that initialization/startup is done, process any command-line\n-                // bitcoin: URIs\n-                QObject::connect(paymentServer, SIGNAL(receivedURI(QString)), &window, SLOT(handleURI(QString)));\n+                // bitcoin: URIs or payment requests:\n+                QObject::connect(paymentServer, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n+                                 &window, SLOT(handlePaymentRequest(SendCoinsRecipient)));\n+                QObject::connect(&walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n+                                 paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n+                QObject::connect(paymentServer, SIGNAL(receivedPaymentACK(QString)),\n+                                 &window, SLOT(showPaymentACK(QString)));\n+                QObject::connect(paymentServer, SIGNAL(reportError(QString, QString, unsigned int)),\n+                                 guiref, SLOT(message(QString, QString, unsigned int)));\n                 QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n \n                 app.exec();"
      },
      {
        "sha": "d9d4e3b23da0fa644fdecb1f40aff2d29384766b",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -130,6 +130,11 @@ void BitcoinAmountField::setValue(qint64 value)\n     setText(BitcoinUnits::format(currentUnit, value));\n }\n \n+void BitcoinAmountField::setReadOnly(bool fReadeOnly)\n+{\n+    // TODO ...\n+}\n+\n void BitcoinAmountField::unitChanged(int idx)\n {\n     // Use description tooltip for current unit for the combobox"
      },
      {
        "sha": "9c8be5a26a0dcc0055a6400a5ed336d40cb61c06",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -22,6 +22,9 @@ class BitcoinAmountField: public QWidget\n     qint64 value(bool *valid=0) const;\n     void setValue(qint64 value);\n \n+    /** Make read-only **/\n+    void setReadOnly(bool fReadOnly);\n+\n     /** Mark current value as invalid in UI. */\n     void setValid(bool valid);\n     /** Perform input validation, mark field as invalid if entered value is not valid. */"
      },
      {
        "sha": "ad32c9ea68369c51c19be4b76ab4b8e02d46399b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -45,6 +45,7 @@\n #include <QDragEnterEvent>\n #if QT_VERSION < 0x050000\n #include <QUrl>\n+#include <QTextDocument>\n #endif\n #include <QMimeData>\n #include <QStyle>\n@@ -707,7 +708,8 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n         QList<QUrl> uris = event->mimeData()->urls();\n         foreach(const QUrl &uri, uris)\n         {\n-            if (walletFrame->handleURI(uri.toString()))\n+            SendCoinsRecipient r;\n+            if (GUIUtil::parseBitcoinURI(uri, &r) && walletFrame->handlePaymentRequest(r))\n                 nValidUrisFound++;\n         }\n \n@@ -734,12 +736,18 @@ bool BitcoinGUI::eventFilter(QObject *object, QEvent *event)\n     return QMainWindow::eventFilter(object, event);\n }\n \n-void BitcoinGUI::handleURI(QString strURI)\n+void BitcoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)\n {\n-    // URI has to be valid\n-    if (!walletFrame->handleURI(strURI))\n-        message(tr(\"URI handling\"), tr(\"URI can not be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n-                  CClientUIInterface::ICON_WARNING);\n+    walletFrame->handlePaymentRequest(recipient);\n+}\n+\n+void BitcoinGUI::showPaymentACK(QString msg)\n+{\n+#if QT_VERSION < 0x050000\n+    message(tr(\"Payment acknowledged\"), Qt::escape(msg), CClientUIInterface::MODAL);\n+#else\n+    message(tr(\"Payment acknowledged\"), msg.toHtmlEscaped(), CClientUIInterface::MODAL);\n+#endif\n }\n \n void BitcoinGUI::setEncryptionStatus(int status)"
      },
      {
        "sha": "fc25e867fc6cba58eb53876f883d5945fbc2da26",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -15,6 +15,7 @@ class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n+class SendCoinsRecipient;\n class SignVerifyMessageDialog;\n class Notificator;\n class RPCConsole;\n@@ -151,7 +152,9 @@ public slots:\n       @param[out] payFee            true to pay the fee, false to not pay the fee\n     */\n     void askFee(qint64 nFeeRequired, bool *payFee);\n-    void handleURI(QString strURI);\n+\n+    void handlePaymentRequest(const SendCoinsRecipient& recipient);\n+    void showPaymentACK(QString msg);\n \n     /** Show incoming transaction notification for new transactions. */\n     void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);"
      },
      {
        "sha": "a2ef9a0a381b0ac5ef06c1678c501b89a75a9cbc",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 667,
        "deletions": 125,
        "changes": 792,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -1,143 +1,685 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ui version=\"4.0\">\n  <class>SendCoinsEntry</class>\n- <widget class=\"QFrame\" name=\"SendCoinsEntry\">\n+ <widget class=\"QStackedWidget\" name=\"SendCoinsEntry\">\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>\n     <y>0</y>\n     <width>729</width>\n-    <height>136</height>\n+    <height>150</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n-   <string>Form</string>\n+   <string>StackedWidget</string>\n   </property>\n-  <property name=\"frameShape\">\n-   <enum>QFrame::StyledPanel</enum>\n+  <property name=\"autoFillBackground\">\n+   <bool>false</bool>\n   </property>\n-  <property name=\"frameShadow\">\n-   <enum>QFrame::Sunken</enum>\n+  <property name=\"currentIndex\">\n+   <number>1</number>\n   </property>\n-  <layout class=\"QGridLayout\" name=\"gridLayout\">\n-   <property name=\"spacing\">\n-    <number>12</number>\n+  <widget class=\"QFrame\" name=\"SendCoinsInsecure\">\n+   <property name=\"windowTitle\">\n+    <string>Form</string>\n    </property>\n-   <item row=\"5\" column=\"0\">\n-    <widget class=\"QLabel\" name=\"label\">\n-     <property name=\"text\">\n-      <string>A&amp;mount:</string>\n-     </property>\n-     <property name=\"alignment\">\n-      <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-     </property>\n-     <property name=\"buddy\">\n-      <cstring>payAmount</cstring>\n-     </property>\n-    </widget>\n-   </item>\n-   <item row=\"3\" column=\"0\">\n-    <widget class=\"QLabel\" name=\"label_2\">\n-     <property name=\"text\">\n-      <string>Pay &amp;To:</string>\n-     </property>\n-     <property name=\"alignment\">\n-      <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-     </property>\n-     <property name=\"buddy\">\n-      <cstring>payTo</cstring>\n-     </property>\n-    </widget>\n-   </item>\n-   <item row=\"5\" column=\"1\">\n-    <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n-   </item>\n-   <item row=\"4\" column=\"0\">\n-    <widget class=\"QLabel\" name=\"label_4\">\n-     <property name=\"text\">\n-      <string>&amp;Label:</string>\n-     </property>\n-     <property name=\"alignment\">\n-      <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-     </property>\n-     <property name=\"buddy\">\n-      <cstring>addAsLabel</cstring>\n-     </property>\n-    </widget>\n-   </item>\n-   <item row=\"3\" column=\"1\">\n-    <layout class=\"QHBoxLayout\" name=\"payToLayout\">\n-     <property name=\"spacing\">\n-      <number>0</number>\n-     </property>\n-     <item>\n-      <widget class=\"QValidatedLineEdit\" name=\"payTo\">\n-       <property name=\"toolTip\">\n-        <string>The address to send the payment to (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)</string>\n-       </property>\n-       <property name=\"maxLength\">\n-        <number>34</number>\n-       </property>\n-      </widget>\n-     </item>\n-     <item>\n-      <widget class=\"QToolButton\" name=\"addressBookButton\">\n-       <property name=\"toolTip\">\n-        <string>Choose address from address book</string>\n-       </property>\n-       <property name=\"text\">\n-        <string/>\n-       </property>\n-       <property name=\"icon\">\n-        <iconset resource=\"../bitcoin.qrc\">\n-         <normaloff>:/icons/address-book</normaloff>:/icons/address-book</iconset>\n-       </property>\n-       <property name=\"shortcut\">\n-        <string>Alt+A</string>\n-       </property>\n-      </widget>\n-     </item>\n-     <item>\n-      <widget class=\"QToolButton\" name=\"pasteButton\">\n-       <property name=\"toolTip\">\n-        <string>Paste address from clipboard</string>\n-       </property>\n-       <property name=\"text\">\n-        <string/>\n-       </property>\n-       <property name=\"icon\">\n-        <iconset resource=\"../bitcoin.qrc\">\n-         <normaloff>:/icons/editpaste</normaloff>:/icons/editpaste</iconset>\n-       </property>\n-       <property name=\"shortcut\">\n-        <string>Alt+P</string>\n-       </property>\n-      </widget>\n-     </item>\n-     <item>\n-      <widget class=\"QToolButton\" name=\"deleteButton\">\n-       <property name=\"toolTip\">\n-        <string>Remove this recipient</string>\n-       </property>\n-       <property name=\"text\">\n-        <string/>\n-       </property>\n-       <property name=\"icon\">\n-        <iconset resource=\"../bitcoin.qrc\">\n-         <normaloff>:/icons/remove</normaloff>:/icons/remove</iconset>\n-       </property>\n-      </widget>\n-     </item>\n-    </layout>\n-   </item>\n-   <item row=\"4\" column=\"1\">\n-    <widget class=\"QValidatedLineEdit\" name=\"addAsLabel\">\n-     <property name=\"toolTip\">\n-      <string>Enter a label for this address to add it to your address book</string>\n-     </property>\n-    </widget>\n-   </item>\n-  </layout>\n+   <property name=\"frameShape\">\n+    <enum>QFrame::StyledPanel</enum>\n+   </property>\n+   <property name=\"frameShadow\">\n+    <enum>QFrame::Sunken</enum>\n+   </property>\n+   <layout class=\"QGridLayout\" name=\"gridLayout\">\n+    <property name=\"spacing\">\n+     <number>12</number>\n+    </property>\n+    <item row=\"5\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"label\">\n+      <property name=\"text\">\n+       <string>A&amp;mount:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+      <property name=\"buddy\">\n+       <cstring>payAmount</cstring>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"3\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"label_2\">\n+      <property name=\"text\">\n+       <string>Pay &amp;To:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+      <property name=\"buddy\">\n+       <cstring>payTo</cstring>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"5\" column=\"1\">\n+     <widget class=\"BitcoinAmountField\" name=\"payAmount\"/>\n+    </item>\n+    <item row=\"4\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"label_4\">\n+      <property name=\"text\">\n+       <string>&amp;Label:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+      <property name=\"buddy\">\n+       <cstring>addAsLabel</cstring>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"3\" column=\"1\">\n+     <layout class=\"QHBoxLayout\" name=\"payToLayout\">\n+      <property name=\"spacing\">\n+       <number>0</number>\n+      </property>\n+      <item>\n+       <widget class=\"QValidatedLineEdit\" name=\"payTo\">\n+        <property name=\"toolTip\">\n+         <string>The address to send the payment to (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)</string>\n+        </property>\n+        <property name=\"maxLength\">\n+         <number>34</number>\n+        </property>\n+       </widget>\n+      </item>\n+      <item>\n+       <widget class=\"QToolButton\" name=\"addressBookButton\">\n+        <property name=\"toolTip\">\n+         <string>Choose address from address book</string>\n+        </property>\n+        <property name=\"text\">\n+         <string/>\n+        </property>\n+        <property name=\"icon\">\n+         <iconset resource=\"../bitcoin.qrc\">\n+          <normaloff>:/icons/address-book</normaloff>:/icons/address-book</iconset>\n+        </property>\n+        <property name=\"shortcut\">\n+         <string>Alt+A</string>\n+        </property>\n+       </widget>\n+      </item>\n+      <item>\n+       <widget class=\"QToolButton\" name=\"pasteButton\">\n+        <property name=\"toolTip\">\n+         <string>Paste address from clipboard</string>\n+        </property>\n+        <property name=\"text\">\n+         <string/>\n+        </property>\n+        <property name=\"icon\">\n+         <iconset resource=\"../bitcoin.qrc\">\n+          <normaloff>:/icons/editpaste</normaloff>:/icons/editpaste</iconset>\n+        </property>\n+        <property name=\"shortcut\">\n+         <string>Alt+P</string>\n+        </property>\n+       </widget>\n+      </item>\n+      <item>\n+       <widget class=\"QToolButton\" name=\"deleteButton\">\n+        <property name=\"toolTip\">\n+         <string>Remove this recipient</string>\n+        </property>\n+        <property name=\"text\">\n+         <string/>\n+        </property>\n+        <property name=\"icon\">\n+         <iconset resource=\"../bitcoin.qrc\">\n+          <normaloff>:/icons/remove</normaloff>:/icons/remove</iconset>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n+    </item>\n+    <item row=\"4\" column=\"1\">\n+     <widget class=\"QValidatedLineEdit\" name=\"addAsLabel\">\n+      <property name=\"toolTip\">\n+       <string>Enter a label for this address to add it to your address book</string>\n+      </property>\n+     </widget>\n+    </item>\n+   </layout>\n+  </widget>\n+  <widget class=\"QFrame\" name=\"SendCoinsSecure\">\n+   <property name=\"palette\">\n+    <palette>\n+     <active>\n+      <colorrole role=\"WindowText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Button\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Light\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>230</red>\n+         <green>255</green>\n+         <blue>224</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Midlight\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>185</red>\n+         <green>243</green>\n+         <blue>171</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Dark\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>70</red>\n+         <green>116</green>\n+         <blue>59</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Mid\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>93</red>\n+         <green>155</green>\n+         <blue>79</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Text\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"BrightText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>155</red>\n+         <green>255</green>\n+         <blue>147</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ButtonText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Base\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>119</red>\n+         <green>255</green>\n+         <blue>233</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Window\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Shadow\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"AlternateBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>197</red>\n+         <green>243</green>\n+         <blue>187</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"NoRole\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>125</red>\n+         <green>194</green>\n+         <blue>122</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>220</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+     </active>\n+     <inactive>\n+      <colorrole role=\"WindowText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Button\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Light\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>230</red>\n+         <green>255</green>\n+         <blue>224</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Midlight\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>185</red>\n+         <green>243</green>\n+         <blue>171</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Dark\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>70</red>\n+         <green>116</green>\n+         <blue>59</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Mid\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>93</red>\n+         <green>155</green>\n+         <blue>79</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Text\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"BrightText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>155</red>\n+         <green>255</green>\n+         <blue>147</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ButtonText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Base\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>119</red>\n+         <green>255</green>\n+         <blue>233</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Window\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Shadow\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"AlternateBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>197</red>\n+         <green>243</green>\n+         <blue>187</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"NoRole\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>125</red>\n+         <green>194</green>\n+         <blue>122</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>220</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+     </inactive>\n+     <disabled>\n+      <colorrole role=\"WindowText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>70</red>\n+         <green>116</green>\n+         <blue>59</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Button\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Light\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>230</red>\n+         <green>255</green>\n+         <blue>224</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Midlight\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>185</red>\n+         <green>243</green>\n+         <blue>171</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Dark\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>70</red>\n+         <green>116</green>\n+         <blue>59</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Mid\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>93</red>\n+         <green>155</green>\n+         <blue>79</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Text\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>70</red>\n+         <green>116</green>\n+         <blue>59</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"BrightText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>155</red>\n+         <green>255</green>\n+         <blue>147</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ButtonText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>70</red>\n+         <green>116</green>\n+         <blue>59</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Base\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Window\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Shadow\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"AlternateBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>140</red>\n+         <green>232</green>\n+         <blue>119</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"NoRole\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>125</red>\n+         <green>194</green>\n+         <blue>122</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>220</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+     </disabled>\n+    </palette>\n+   </property>\n+   <property name=\"windowTitle\">\n+    <string>SecureSend</string>\n+   </property>\n+   <property name=\"autoFillBackground\">\n+    <bool>true</bool>\n+   </property>\n+   <property name=\"frameShape\">\n+    <enum>QFrame::StyledPanel</enum>\n+   </property>\n+   <property name=\"frameShadow\">\n+    <enum>QFrame::Sunken</enum>\n+   </property>\n+   <layout class=\"QGridLayout\" name=\"gridLayout_s\">\n+    <property name=\"spacing\">\n+     <number>12</number>\n+    </property>\n+    <item row=\"4\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"label_s4\">\n+      <property name=\"text\">\n+       <string>Memo:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+      <property name=\"buddy\">\n+       <cstring>addAsLabel</cstring>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"5\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"label_s1\">\n+      <property name=\"text\">\n+       <string>A&amp;mount:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+      <property name=\"buddy\">\n+       <cstring>payAmount</cstring>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"3\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"label_s2\">\n+      <property name=\"text\">\n+       <string>Pay &amp;To:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+      <property name=\"buddy\">\n+       <cstring>payTo_s</cstring>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"5\" column=\"2\">\n+     <widget class=\"BitcoinAmountField\" name=\"payAmount_s\">\n+      <property name=\"enabled\">\n+       <bool>false</bool>\n+      </property>\n+      <property name=\"acceptDrops\">\n+       <bool>false</bool>\n+      </property>\n+      <property name=\"readOnly\">\n+       <bool>true</bool>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"3\" column=\"2\">\n+     <layout class=\"QHBoxLayout\" name=\"payToLayout_s\">\n+      <property name=\"spacing\">\n+       <number>0</number>\n+      </property>\n+      <item>\n+       <widget class=\"QLabel\" name=\"payTo_s\">\n+       </widget>\n+      </item>\n+     </layout>\n+    </item>\n+    <item row=\"4\" column=\"2\">\n+     <widget class=\"QLabel\" name=\"memo_s\">\n+      <property name=\"text\">\n+       <string>message from merchant</string>\n+      </property>\n+     </widget>\n+    </item>\n+   </layout>\n+  </widget>\n  </widget>\n  <customwidgets>\n   <customwidget>"
      },
      {
        "sha": "2c72c01021999e97c10ab078673a0e38c982d3e9",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -28,6 +28,9 @@ static const int TOOLTIP_WRAP_THRESHOLD = 80;\n /* Maximum allowed URI length */\n static const int MAX_URI_LENGTH = 255;\n \n+/* Maximum somewhat-sane size of a payment request file */\n+static const int MAX_PAYMENT_REQUEST_SIZE = 50000; // bytes\n+\n /* QRCodeDialog -- size of exported QR Code image */\n #define EXPORT_IMAGE_SIZE 256\n "
      },
      {
        "sha": "d93a60e1bcae6a39d8b24c6421848ad6143eb051",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -290,3 +290,14 @@ qint64 OptionsModel::getTransactionFee()\n {\n     return nTransactionFee;\n }\n+\n+bool OptionsModel::getProxySettings(QString& proxyIP, quint16 &proxyPort) const\n+{\n+    std::string proxy = GetArg(\"-proxy\", \"\");\n+    if (proxy.empty()) return false;\n+\n+    CService addrProxy(proxy);\n+    proxyIP = QString(addrProxy.ToStringIP().c_str());\n+    proxyPort = addrProxy.GetPort();\n+    return true;\n+}"
      },
      {
        "sha": "173db0fe0a6f9da4f7be0be09d95f77ce57cda52",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -49,6 +49,7 @@ class OptionsModel : public QAbstractListModel\n     int getDisplayUnit() { return nDisplayUnit; }\n     bool getDisplayAddresses() { return bDisplayAddresses; }\n     QString getLanguage() { return language; }\n+    bool getProxySettings(QString& proxyIP, quint16 &proxyPort) const;\n \n private:\n     int nDisplayUnit;"
      },
      {
        "sha": "b2281c4c7b3402de9d00457ebf44d31b0193643f",
        "filename": "src/qt/paymentrequest.proto",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentrequest.proto",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentrequest.proto",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequest.proto?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,46 @@\n+//\n+// Simple Bitcoin Payment Protocol messages\n+//\n+// Use fields 100+ for extensions;\n+// to avoid conflicts, register extensions at:\n+// https://en.bitcoin.it/wiki/Payment_Request\n+//\n+\n+package payments;\n+option java_package = \"org.bitcoin.protocols.payments\";\n+option java_outer_classname = \"Protos\";\n+\n+// Generalized form of \"send payment to this/these bitcoin addresses\"\n+message Output {\n+\toptional uint64 amount = 1 [default = 0]; // amount is integer-number-of-satoshis\n+\trequired bytes script = 2; // usually one of the standard Script forms\n+}\n+message PaymentDetails {\n+        optional string network = 1 [default = \"main\"]; // \"main\" or \"test\"\n+        repeated Output outputs = 2;        // Where payment should be sent\n+        required uint64 time = 3;           // Timestamp; when payment request created\n+        optional uint64 expires = 4;        // Timestamp; when this request should be considered invalid\n+        optional string memo = 5;           // Human-readable description of request for the customer\n+        optional string payment_url = 6;    // URL to send Payment and get PaymentACK\n+        optional bytes merchant_data = 7;   // Arbitrary data to include in the Payment message\n+}\n+message PaymentRequest {\n+        optional uint32 payment_details_version = 1 [default = 1];\n+        optional string pki_type = 2 [default = \"none\"];  // none / x509+sha256 / x509+sha1\n+        optional bytes pki_data = 3;                      // depends on pki_type\n+        required bytes serialized_payment_details = 4;    // PaymentDetails\n+        optional bytes signature = 5;                     // pki-dependent signature\n+}\n+message X509Certificates {\n+        repeated bytes certificate = 1;    // DER-encoded X.509 certificate chain\n+}\n+message Payment {\n+        optional bytes merchant_data = 1;  // From PaymentDetails.merchant_data\n+        repeated bytes transactions = 2;   // Signed transactions that satisfy PaymentDetails.outputs\n+        repeated Output refund_to = 3;     // Where to send refunds, if a refund is necessary\n+        optional string memo = 4;          // Human-readable message for the merchant\n+}\n+message PaymentACK {\n+        required Payment payment = 1;      // Payment message that triggered this ACK\n+        optional string memo = 2;          // human-readable message for customer\n+}"
      },
      {
        "sha": "289ddabb92154e44525f1680056fecee97302d74",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "added",
        "additions": 204,
        "deletions": 0,
        "changes": 204,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,204 @@\n+//\n+// Wraps dumb protocol buffer paymentRequest\n+// with some extra methods\n+//\n+\n+#include <QDateTime>\n+#include <QDebug>\n+#include <QSslCertificate>\n+\n+#include <openssl/x509.h>\n+#include <openssl/x509_vfy.h>\n+\n+#include <stdexcept>\n+\n+#include \"paymentrequestplus.h\"\n+\n+class SSLVerifyError : public std::runtime_error\n+{\n+public:\n+    SSLVerifyError(std::string err) : std::runtime_error(err) { }\n+};\n+\n+bool PaymentRequestPlus::parse(const QByteArray& data)\n+{\n+    bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n+    if (!parseOK) {\n+        qDebug() << \"Error parsing payment request\";\n+        return false;\n+    }\n+    if (paymentRequest.payment_details_version() > 1) {\n+        qDebug() << \"Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        return false;\n+    }\n+\n+    parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n+    if (!parseOK)\n+    {\n+        qDebug() << \"Error parsing payment details\";\n+        paymentRequest.Clear();\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool PaymentRequestPlus::SerializeToString(string* output) const\n+{\n+    return paymentRequest.SerializeToString(output);\n+}\n+\n+bool PaymentRequestPlus::IsInitialized() const\n+{\n+    return paymentRequest.IsInitialized();\n+}\n+\n+QString PaymentRequestPlus::getPKIType() const\n+{\n+    if (!IsInitialized()) return QString(\"none\");\n+    return QString::fromStdString(paymentRequest.pki_type());\n+}\n+\n+bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) const\n+{\n+    merchant.clear();\n+\n+    if (!IsInitialized())\n+        return false;\n+\n+    // One day we'll support more PKI types, but just\n+    // x509 for now:\n+    const EVP_MD* digestAlgorithm = NULL;\n+    if (paymentRequest.pki_type() == \"x509+sha256\") {\n+        digestAlgorithm = EVP_sha256();\n+    }\n+    else if (paymentRequest.pki_type() == \"x509+sha1\") {\n+        digestAlgorithm = EVP_sha1();\n+    }\n+    else if (paymentRequest.pki_type() == \"none\") {\n+        if (fDebug) qDebug() << \"PaymentRequest: pki_type == none\";\n+        return false;\n+    }\n+    else {\n+        qDebug() << \"PaymentRequest: unknown pki_type \" << paymentRequest.pki_type().c_str();\n+        return false;\n+    }\n+\n+    payments::X509Certificates certChain;\n+    if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n+        qDebug() << \"PaymentRequest: error parsing pki_data\";\n+        return false;\n+    }\n+\n+    std::vector<X509*> certs;\n+    const QDateTime currentTime = QDateTime::currentDateTime();\n+    for (int i = 0; i < certChain.certificate_size(); i++) {\n+        QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n+        QSslCertificate qCert(certData, QSsl::Der);\n+        if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n+            qDebug() << \"PaymentRequest: certificate expired or not yet active: \" << qCert;\n+            return false;\n+        }\n+#if QT_VERSION >= 0x050000\n+        if (qCert.isBlacklisted()) {\n+            qDebug() << \"PaymentRequest: certificate blacklisted: \" << qCert;\n+            return false;\n+        }\n+#endif\n+        const unsigned char *data = (const unsigned char *)certChain.certificate(i).data();\n+        X509 *cert = d2i_X509(NULL, &data, certChain.certificate(i).size());\n+        if (cert)\n+            certs.push_back(cert);\n+    }\n+    if (certs.empty()) {\n+        qDebug() << \"PaymentRequest: empty certificate chain\";\n+        return false;\n+    }\n+\n+    // The first cert is the signing cert, the rest are untrusted certs that chain\n+    // to a valid root authority. OpenSSL needs them separately.\n+    STACK_OF(X509) *chain = sk_X509_new_null();\n+    for (int i = certs.size()-1; i > 0; i--) {\n+        sk_X509_push(chain, certs[i]);\n+    }\n+    X509 *signing_cert = certs[0];\n+\n+    // Now create a \"store context\", which is a single use object for checking,\n+    // load the signing cert into it and verify.\n+    X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n+    if (!store_ctx) {\n+        qDebug() << \"PaymentRequest: error creating X509_STORE_CTX\";\n+        return false;\n+    }\n+\n+    char *website = NULL;\n+    bool fResult = true;\n+    try\n+    {\n+        if (!X509_STORE_CTX_init(store_ctx, certStore, signing_cert, chain))\n+        {\n+            int error = X509_STORE_CTX_get_error(store_ctx);\n+            throw SSLVerifyError(X509_verify_cert_error_string(error));\n+        }\n+\n+        // Now do the verification!\n+        int result = X509_verify_cert(store_ctx);\n+        if (result != 1) {\n+            int error = X509_STORE_CTX_get_error(store_ctx);\n+            throw SSLVerifyError(X509_verify_cert_error_string(error));\n+        }\n+        X509_NAME *certname = X509_get_subject_name(signing_cert);\n+\n+        // Valid cert; check signature:\n+        payments::PaymentRequest rcopy(paymentRequest); // Copy\n+        rcopy.set_signature(std::string(\"\"));\n+        std::string data_to_verify;                 // Everything but the signature\n+        rcopy.SerializeToString(&data_to_verify);\n+\n+        EVP_MD_CTX ctx;\n+        EVP_PKEY *pubkey = X509_get_pubkey(signing_cert);\n+        EVP_MD_CTX_init(&ctx);\n+        if (!EVP_VerifyInit_ex(&ctx, digestAlgorithm, NULL) ||\n+            !EVP_VerifyUpdate(&ctx, data_to_verify.data(), data_to_verify.size()) ||\n+            !EVP_VerifyFinal(&ctx, (const unsigned char*)paymentRequest.signature().data(), paymentRequest.signature().size(), pubkey)) {\n+\n+            throw SSLVerifyError(\"Bad signature, invalid PaymentRequest.\");\n+        }\n+\n+        // OpenSSL API for getting human printable strings from certs is baroque.\n+        int textlen = X509_NAME_get_text_by_NID(certname, NID_commonName, NULL, 0);\n+        website = new char[textlen + 1];\n+        if (X509_NAME_get_text_by_NID(certname, NID_commonName, website, textlen + 1) == textlen && textlen > 0) {\n+            merchant = website;\n+        }\n+        else {\n+            throw SSLVerifyError(\"Bad certificate, missing common name\");\n+        }\n+        // TODO: detect EV certificates and set merchant = business name instead of unfriendly NID_commonName ?\n+    }\n+    catch (SSLVerifyError& err)\n+    {\n+        fResult = false;\n+        qDebug() << \"PaymentRequestPlus::getMerchant SSL err: \" << err.what();\n+    }\n+\n+    if (website)\n+        delete[] website;\n+    X509_STORE_CTX_free(store_ctx);\n+    for (unsigned int i = 0; i < certs.size(); i++)\n+        X509_free(certs[i]);\n+\n+    return fResult;\n+}\n+\n+QList<std::pair<CScript,qint64> > PaymentRequestPlus::getPayTo() const\n+{\n+    QList<std::pair<CScript,qint64> > result;\n+    for (int i = 0; i < details.outputs_size(); i++)\n+    {\n+        const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();\n+        CScript s(scriptStr, scriptStr+details.outputs(i).script().size());\n+\n+        result.append(make_pair(s, details.outputs(i).amount()));\n+    }\n+    return result;\n+}"
      },
      {
        "sha": "846d256aca971286fafe3d10a6bfc77a9593fa45",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,41 @@\n+#ifndef PAYMENTREQUESTPLUS_H\n+#define PAYMENTREQUESTPLUS_H\n+\n+#include <QByteArray>\n+#include <QList>\n+#include <QString>\n+\n+#include \"base58.h\"\n+#include \"paymentrequest.pb.h\"\n+\n+//\n+// Wraps dumb protocol buffer paymentRequest\n+// with extra methods\n+//\n+\n+class PaymentRequestPlus\n+{\n+public:\n+    PaymentRequestPlus() { }\n+\n+    bool parse(const QByteArray& data);\n+    bool SerializeToString(string* output) const;\n+\n+    bool IsInitialized() const;\n+    QString getPKIType() const;\n+    // Returns true if merchant's identity is authenticated, and\n+    // returns human-readable merchant identity in merchant\n+    bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n+\n+    // Returns list of outputs, amount\n+    QList<std::pair<CScript,qint64> > getPayTo() const;\n+\n+    const payments::PaymentDetails& getDetails() const { return details; }\n+\n+private:\n+    payments::PaymentRequest paymentRequest;\n+    payments::PaymentDetails details;\n+};\n+\n+#endif // PAYMENTREQUESTPLUS_H\n+"
      },
      {
        "sha": "a9f71315a9048f5006d557b5195f0657373f330a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 491,
        "deletions": 36,
        "changes": 527,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -2,30 +2,63 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"paymentserver.h\"\n-\n-#include \"guiconstants.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-\n #include <QApplication>\n #include <QByteArray>\n #include <QDataStream>\n+#include <QDateTime>\n #include <QDebug>\n+#include <QFile>\n #include <QFileOpenEvent>\n #include <QHash>\n+#include <QList>\n #include <QLocalServer>\n #include <QLocalSocket>\n #include <QStringList>\n+#include <QTextDocument>\n+#include <QNetworkAccessManager>\n+#include <QNetworkProxy>\n+#include <QNetworkReply>\n+#include <QNetworkRequest>\n+#include <QSslCertificate>\n+#include <QSslError>\n+#include <QSslSocket>\n #if QT_VERSION < 0x050000\n #include <QUrl>\n+#else\n+#include <QUrlQuery>\n #endif\n \n+#include <cstdlib>\n+\n+#include <openssl/x509.h>\n+#include <openssl/x509_vfy.h>\n+\n+#include \"base58.h\"\n+#include \"bitcoinunits.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"paymentserver.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"wallet.h\"\n+#include \"walletmodel.h\"\n+\n using namespace boost;\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n \n+X509_STORE* PaymentServer::certStore = NULL;\n+void PaymentServer::freeCertStore()\n+{\n+    if (PaymentServer::certStore != NULL)\n+    {\n+        X509_STORE_free(PaymentServer::certStore);\n+        PaymentServer::certStore = NULL;\n+    }\n+}\n+\n //\n // Create a name that is unique for:\n //  testnet / non-testnet\n@@ -45,31 +78,154 @@ static QString ipcServerName()\n }\n \n //\n-// This stores payment requests received before\n+// We store payment URLs and requests received before\n // the main GUI window is up and ready to ask the user\n // to send payment.\n+\n+static QList<QString> savedPaymentRequests;\n+\n+static void ReportInvalidCertificate(const QSslCertificate& cert)\n+{\n+    if (fDebug) {\n+        qDebug() << \"Invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    }\n+}\n+\n+//\n+// Load openSSL's list of root certificate authorities\n //\n-static QStringList savedPaymentRequests;\n+void PaymentServer::LoadRootCAs(X509_STORE* _store)\n+{\n+    if (PaymentServer::certStore == NULL)\n+        atexit(PaymentServer::freeCertStore);\n+    else\n+        freeCertStore();\n+\n+    // Unit tests mostly use this, to pass in fake root CAs:\n+    if (_store)\n+    {\n+        PaymentServer::certStore = _store;\n+        return;\n+    }\n+\n+    // Normal execution, use either -rootcertificates or system certs:\n+    PaymentServer::certStore = X509_STORE_new();\n+\n+    // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n+    // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n+    QString certFile = QString::fromStdString(GetArg(\"-rootcertificates\", \"-system-\"));\n+\n+    if (certFile.isEmpty())\n+        return; // Empty store\n+\n+    QList<QSslCertificate> certList;\n+\n+    if (certFile != \"-system-\")\n+    {\n+        certList = QSslCertificate::fromPath(certFile);\n+        // Use those certificates when fetching payment requests, too:\n+        QSslSocket::setDefaultCaCertificates(certList);\n+    }\n+    else\n+        certList = QSslSocket::systemCaCertificates ();\n+\n+    int nRootCerts = 0;\n+    const QDateTime currentTime = QDateTime::currentDateTime();\n+    foreach (const QSslCertificate& cert, certList)\n+    {\n+        if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+#if QT_VERSION >= 0x050000\n+        if (cert.isBlacklisted()) {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+#endif\n+        QByteArray certData = cert.toDer();\n+        const unsigned char *data = (const unsigned char *)certData.data();\n+\n+        X509* x509 = d2i_X509(0, &data, certData.size());\n+        if (x509 && X509_STORE_add_cert( PaymentServer::certStore, x509))\n+        {\n+            // Note: X509_STORE_free will free the X509* objects when\n+            // the PaymentServer is destroyed\n+            ++nRootCerts;\n+        }\n+        else\n+        {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+    }\n+    if (fDebug)\n+        qDebug() << \"PaymentServer: loaded \" << nRootCerts << \" root certificates\";\n+\n+    // Project for another day:\n+    // Fetch certificate revocation lists, and add them to certStore.\n+    // Issues to consider:\n+    //   performance (start a thread to fetch in background?)\n+    //   privacy (fetch through tor/proxy so IP address isn't revealed)\n+    //   would it be easier to just use a compiled-in blacklist?\n+    //    or use Qt's blacklist?\n+    //   \"certificate stapling\" with server-side caching is more efficient\n+}\n \n //\n // Sending to the server is done synchronously, at startup.\n // If the server isn't already running, startup continues,\n // and the items in savedPaymentRequest will be handled\n // when uiReady() is called.\n //\n-bool PaymentServer::ipcSendCommandLine()\n+bool PaymentServer::ipcSendCommandLine(int argc, char* argv[])\n {\n     bool fResult = false;\n \n-    const QStringList& args = qApp->arguments();\n-    for (int i = 1; i < args.size(); i++)\n+    for (int i = 1; i < argc; i++)\n     {\n-        if (!args[i].startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive))\n+        QString arg(argv[i]);\n+        if (arg.startsWith(\"-\"))\n             continue;\n-        savedPaymentRequests.append(args[i]);\n+\n+        if (arg.startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive)) // bitcoin:\n+        {\n+            savedPaymentRequests.append(arg);\n+\n+            SendCoinsRecipient r;\n+            if (GUIUtil::parseBitcoinURI(arg, &r))\n+            {\n+                CBitcoinAddress address(r.address.toStdString());\n+\n+                SelectParams(CChainParams::MAIN);\n+                if (!address.IsValid())\n+                {\n+                    SelectParams(CChainParams::TESTNET);\n+                }\n+            }\n+        }\n+        else if (QFile::exists(arg)) // Filename\n+        {\n+            savedPaymentRequests.append(arg);\n+\n+            PaymentRequestPlus request;\n+            if (readPaymentRequest(arg, request))\n+            {\n+                if (request.getDetails().network() == \"main\")\n+                    SelectParams(CChainParams::MAIN);\n+                else\n+                    SelectParams(CChainParams::TESTNET);\n+            }\n+        }\n+        else\n+        {\n+            qDebug() << \"Payment request file does not exist: \" << argv[i];\n+            // Printing to debug.log is about the best we can do here, the\n+            // GUI hasn't started yet so we can't pop up a message box.\n+        }\n     }\n \n-    foreach (const QString& arg, savedPaymentRequests)\n+    foreach (const QString& r, savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -79,7 +235,7 @@ bool PaymentServer::ipcSendCommandLine()\n         QByteArray block;\n         QDataStream out(&block, QIODevice::WriteOnly);\n         out.setVersion(QDataStream::Qt_4_0);\n-        out << arg;\n+        out << r;\n         out.device()->seek(0);\n         socket->write(block);\n         socket->flush();\n@@ -92,50 +248,148 @@ bool PaymentServer::ipcSendCommandLine()\n     return fResult;\n }\n \n-PaymentServer::PaymentServer(QApplication* parent) : QObject(parent), saveURIs(true)\n+PaymentServer::PaymentServer(QObject* parent,\n+                             bool startLocalServer) : QObject(parent), saveURIs(true)\n {\n+    // Verify that the version of the library that we linked against is\n+    // compatible with the version of the headers we compiled against.\n+    GOOGLE_PROTOBUF_VERIFY_VERSION;\n+\n     // Install global event filter to catch QFileOpenEvents on the mac (sent when you click bitcoin: links)\n-    parent->installEventFilter(this);\n+    if (parent)\n+        parent->installEventFilter(this);\n \n     QString name = ipcServerName();\n \n     // Clean up old socket leftover from a crash:\n     QLocalServer::removeServer(name);\n \n-    uriServer = new QLocalServer(this);\n+    if (startLocalServer)\n+    {\n+        uriServer = new QLocalServer(this);\n \n-    if (!uriServer->listen(name))\n-        qDebug() << tr(\"Cannot start bitcoin: click-to-pay handler\");\n-    else\n-        connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n+        if (!uriServer->listen(name))\n+            qDebug() << \"Cannot start bitcoin: click-to-pay handler\";\n+        else\n+            connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n+    }\n+\n+    // netManager is null until uiReady() is called\n+    netManager = NULL;\n }\n \n-bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n+PaymentServer::~PaymentServer()\n+{\n+    google::protobuf::ShutdownProtobufLibrary();\n+}\n+\n+//\n+// OSX-specific way of handling bitcoin uris and\n+// PaymentRequest mime types\n+//\n+bool PaymentServer::eventFilter(QObject *, QEvent *event)\n {\n     // clicking on bitcoin: URLs creates FileOpen events on the Mac:\n     if (event->type() == QEvent::FileOpen)\n     {\n         QFileOpenEvent* fileEvent = static_cast<QFileOpenEvent*>(event);\n-        if (!fileEvent->url().isEmpty())\n-        {\n-            if (saveURIs) // Before main window is ready:\n-                savedPaymentRequests.append(fileEvent->url().toString());\n-            else\n-                emit receivedURI(fileEvent->url().toString());\n-            return true;\n-        }\n+        if (!fileEvent->file().isEmpty())\n+            handleURIOrFile(fileEvent->file());\n+        else if (!fileEvent->url().isEmpty())\n+            handleURIOrFile(fileEvent->url().toString());\n+\n+        return true;\n     }\n     return false;\n }\n \n+void PaymentServer::initNetManager(const OptionsModel& options)\n+{\n+    if (netManager != NULL)\n+        delete netManager;\n+\n+    // netManager is used to fetch paymentrequests given in bitcoin: URI's\n+    netManager = new QNetworkAccessManager(this);\n+\n+    // Use proxy settings from options:\n+    QString proxyIP;\n+    quint16 proxyPort;\n+    if (options.getProxySettings(proxyIP, proxyPort))\n+    {\n+        QNetworkProxy proxy;\n+        proxy.setType(QNetworkProxy::Socks5Proxy);\n+        proxy.setHostName(proxyIP);\n+        proxy.setPort(proxyPort);\n+        netManager->setProxy(proxy);\n+    }\n+\n+    connect(netManager, SIGNAL(finished(QNetworkReply*)),\n+            this, SLOT(netRequestFinished(QNetworkReply*)));\n+    connect(netManager, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError> &)),\n+            this, SLOT(reportSslErrors(QNetworkReply*, const QList<QSslError> &)));\n+}\n+\n void PaymentServer::uiReady()\n {\n+    assert(netManager != NULL); // Must call initNetManager before uiReady()\n+\n     saveURIs = false;\n     foreach (const QString& s, savedPaymentRequests)\n-        emit receivedURI(s);\n+    {\n+        handleURIOrFile(s);\n+    }\n     savedPaymentRequests.clear();\n }\n \n+void PaymentServer::handleURIOrFile(const QString& s)\n+{\n+    if (saveURIs)\n+    {\n+        savedPaymentRequests.append(s);\n+        return;\n+    }\n+\n+    if (s.startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive)) // bitcoin:\n+    {\n+#if QT_VERSION >= 0x050000\n+        QUrlQuery url((QUrl(s)));\n+#else\n+        QUrl url(s);\n+#endif\n+        if (url.hasQueryItem(\"request\"))\n+        {\n+            QByteArray temp; temp.append(url.queryItemValue(\"request\"));\n+            QString decoded = QUrl::fromPercentEncoding(temp);\n+            QUrl fetchUrl(decoded, QUrl::StrictMode);\n+\n+            if (fDebug) qDebug() << \"PaymentServer::fetchRequest \" << fetchUrl;\n+\n+            if (fetchUrl.isValid())\n+                fetchRequest(fetchUrl);\n+            else\n+                qDebug() << \"PaymentServer: invalid url: \" << fetchUrl;\n+            return;\n+        }\n+\n+        SendCoinsRecipient recipient;\n+        if (GUIUtil::parseBitcoinURI(s, &recipient))\n+            emit receivedPaymentRequest(recipient);\n+        return;\n+    }\n+\n+    if (QFile::exists(s))\n+    {\n+        PaymentRequestPlus request;\n+        QList<SendCoinsRecipient> recipients;\n+        if (readPaymentRequest(s, request) && processPaymentRequest(request, recipients)) {\n+            foreach (const SendCoinsRecipient& recipient, recipients){\n+                emit receivedPaymentRequest(recipient);\n+            }\n+        }\n+        return;\n+    }\n+}\n+\n void PaymentServer::handleURIConnection()\n {\n     QLocalSocket *clientConnection = uriServer->nextPendingConnection();\n@@ -154,8 +408,209 @@ void PaymentServer::handleURIConnection()\n     QString message;\n     in >> message;\n \n-    if (saveURIs)\n-        savedPaymentRequests.append(message);\n-    else\n-        emit receivedURI(message);\n+    handleURIOrFile(message);\n+}\n+\n+bool PaymentServer::readPaymentRequest(const QString& filename, PaymentRequestPlus& request)\n+{\n+    QFile f(filename);\n+    if (!f.open(QIODevice::ReadOnly))\n+    {\n+        qDebug() << \"PaymentServer::readPaymentRequest fail to open \" << filename;\n+        return false;\n+    }\n+\n+    if (f.size() > MAX_PAYMENT_REQUEST_SIZE)\n+    {\n+        qDebug() << \"PaymentServer::readPaymentRequest \" << filename << \" too large\";\n+        return false;\n+    }\n+\n+    QByteArray data = f.readAll();\n+\n+    return request.parse(data);\n+}\n+\n+bool\n+PaymentServer::processPaymentRequest(PaymentRequestPlus& request,\n+                                     QList<SendCoinsRecipient>& recipients)\n+{\n+    QList<std::pair<CScript,qint64> > sendingTos = request.getPayTo();\n+    qint64 totalAmount = 0;\n+    foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+        CTxOut txOut(sendingTo.second, sendingTo.first);\n+        if (txOut.IsDust(CTransaction::nMinRelayTxFee)) {\n+            QString message = QObject::tr(\"Requested payment amount (%1) too small\")\n+                .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, sendingTo.second));\n+            qDebug() << message;\n+            emit reportError(tr(\"Payment request error\"), message, CClientUIInterface::MODAL);\n+            return false;\n+        }\n+\n+        totalAmount += sendingTo.second;\n+    }\n+\n+    recipients.append(SendCoinsRecipient());\n+\n+    if (request.getMerchant(PaymentServer::certStore, recipients[0].authenticatedMerchant)) {\n+        recipients[0].paymentRequest = request;\n+        recipients[0].amount = totalAmount;\n+        if (fDebug) qDebug() << \"PaymentRequest from \" << recipients[0].authenticatedMerchant;\n+    }\n+    else {\n+        recipients.clear();\n+        // Insecure payment requests may turn into more than one recipient if\n+        // the merchant is requesting payment to more than one address.\n+        for (int i = 0; i < sendingTos.size(); i++) {\n+            std::pair<CScript, qint64>& sendingTo = sendingTos[i];\n+            recipients.append(SendCoinsRecipient());\n+            recipients[i].amount = sendingTo.second;\n+            QString memo = QString::fromStdString(request.getDetails().memo());\n+#if QT_VERSION < 0x050000\n+            recipients[i].label = Qt::escape(memo);\n+#else\n+            recipients[i].label = memo.toHtmlEscaped();\n+#endif\n+            CTxDestination dest;\n+            if (ExtractDestination(sendingTo.first, dest)) {\n+                if (i == 0) // Tie request to first pay-to, we don't want multiple ACKs\n+                    recipients[i].paymentRequest = request;\n+                recipients[i].address = QString::fromStdString(CBitcoinAddress(dest).ToString());\n+                if (fDebug) qDebug() << \"PaymentRequest, insecure \" << recipients[i].address;\n+            }\n+            else {\n+                // Insecure payments to custom bitcoin addresses are not supported\n+                // (there is no good way to tell the user where they are paying in a way\n+                // they'd have a chance of understanding).\n+                emit reportError(tr(\"Payment request error\"), \n+                                 tr(\"Insecure requests to custom payment scripts unsupported\"),\n+                                 CClientUIInterface::MODAL);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void\n+PaymentServer::fetchRequest(const QUrl& url)\n+{\n+    QNetworkRequest netRequest;\n+    netRequest.setAttribute(QNetworkRequest::User, \"PaymentRequest\");\n+    netRequest.setUrl(url);\n+    netRequest.setRawHeader(\"User-Agent\", CLIENT_NAME.c_str());\n+    netManager->get(netRequest);\n+}\n+\n+void\n+PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipient, QByteArray transaction)\n+{\n+    const payments::PaymentDetails& details = recipient.paymentRequest.getDetails();\n+    if (!details.has_payment_url())\n+        return;\n+\n+    QNetworkRequest netRequest;\n+    netRequest.setAttribute(QNetworkRequest::User, \"PaymentACK\");\n+    netRequest.setUrl(QString::fromStdString(details.payment_url()));\n+    netRequest.setHeader(QNetworkRequest::ContentTypeHeader, \"application/bitcoin-payment\");\n+    netRequest.setRawHeader(\"User-Agent\", CLIENT_NAME.c_str());\n+\n+    payments::Payment payment;\n+    payment.set_merchant_data(details.merchant_data());\n+    payment.add_transactions(transaction.data(), transaction.size());\n+\n+    // Create a new refund address, or re-use:\n+    QString account = tr(\"Refund from\") + QString(\" \") + recipient.authenticatedMerchant;\n+    std::string strAccount = account.toStdString();\n+    set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n+    if (!refundAddresses.empty()) {\n+        CScript s; s.SetDestination(*refundAddresses.begin());\n+        payments::Output* refund_to = payment.add_refund_to();\n+        refund_to->set_script(&s[0], s.size());\n+    }\n+    else {\n+        CPubKey newKey;\n+        if (wallet->GetKeyFromPool(newKey, false)) {\n+            CKeyID keyID = newKey.GetID();\n+            wallet->SetAddressBook(keyID, strAccount, \"refund\");\n+\n+            CScript s; s.SetDestination(keyID);\n+            payments::Output* refund_to = payment.add_refund_to();\n+            refund_to->set_script(&s[0], s.size());\n+        }\n+        else {\n+            // This should never happen, because sending coins should have just unlocked the wallet\n+            // and refilled the keypool\n+            qDebug() << \"Error getting refund key, refund_to not set\";\n+        }\n+    }\n+\n+    int length = payment.ByteSize();\n+    netRequest.setHeader(QNetworkRequest::ContentLengthHeader, length);\n+    QByteArray serData(length, '\\0');\n+    if (payment.SerializeToArray(serData.data(), length)) {\n+        netManager->post(netRequest, serData);\n+    }\n+    else {\n+        // This should never happen, either:\n+        qDebug() << \"Error serializing payment message\";\n+    }\n+}\n+\n+void\n+PaymentServer::netRequestFinished(QNetworkReply* reply)\n+{\n+    reply->deleteLater();\n+    if (reply->error() != QNetworkReply::NoError)\n+    {\n+        QString message = QObject::tr(\"Error communicating with %1: %2\")\n+            .arg(reply->request().url().toString())\n+            .arg(reply->errorString());\n+        qDebug() << message;\n+        emit reportError(tr(\"Network request error\"), message, CClientUIInterface::MODAL);\n+        return;\n+    }\n+\n+    QByteArray data = reply->readAll();\n+\n+    QString requestType = reply->request().attribute(QNetworkRequest::User).toString();\n+    if (requestType == \"PaymentRequest\")\n+    {\n+        PaymentRequestPlus request;\n+        QList<SendCoinsRecipient> recipients;\n+        if (request.parse(data) && processPaymentRequest(request, recipients)) {\n+            foreach (const SendCoinsRecipient& recipient, recipients){\n+                emit receivedPaymentRequest(recipient);\n+            }\n+        }\n+        else\n+            qDebug() << \"PaymentServer::netRequestFinished: error processing PaymentRequest\";\n+        return;\n+    }\n+    else if (requestType == \"PaymentACK\")\n+    {\n+        payments::PaymentACK paymentACK;\n+        if (!paymentACK.ParseFromArray(data.data(), data.size()))\n+        {\n+            QString message = QObject::tr(\"Bad response from server %1\")\n+                .arg(reply->request().url().toString());\n+            qDebug() << message;\n+            emit reportError(tr(\"Network request error\"), message, CClientUIInterface::MODAL);\n+        }\n+        else {\n+            emit receivedPaymentACK(QString::fromStdString(paymentACK.memo()));\n+        }\n+    }\n+}\n+\n+void\n+PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &errs)\n+{\n+    QString errString;\n+    foreach (const QSslError& err, errs) {\n+        qDebug() << err;\n+        errString += err.errorString() + \"\\n\";\n+    }\n+    emit reportError(tr(\"Network request error\"), errString, CClientUIInterface::MODAL);\n }"
      },
      {
        "sha": "7c6b2eabf086d38f91003f9d723c8c48bfe0561c",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 57,
        "deletions": 7,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -31,37 +31,87 @@\n #include <QObject>\n #include <QString>\n \n+#include \"paymentrequestplus.h\"\n+#include \"walletmodel.h\"\n+\n+class CWallet;\n+class OptionsModel;\n class QApplication;\n+class QByteArray;\n class QLocalServer;\n+class QNetworkAccessManager;\n+class QNetworkReply;\n+class QSslError;\n+class QUrl;\n \n class PaymentServer : public QObject\n {\n     Q_OBJECT\n \n-private:\n-    bool saveURIs;\n-    QLocalServer* uriServer;\n-\n public:\n     // Returns true if there were URIs on the command line\n     // which were successfully sent to an already-running\n     // process.\n-    static bool ipcSendCommandLine();\n+    // Note: if a payment request is given, SelectParams(MAIN/TESTNET)\n+    // will be called so we startup in the right mode.\n+    static bool ipcSendCommandLine(int argc, char *argv[]);\n \n-    PaymentServer(QApplication* parent);\n+    PaymentServer(QObject* parent, // parent should be QApplication object\n+                  bool startLocalServer=true);\n+    ~PaymentServer();\n \n+    // Load root certificate authorities. Pass NULL (default)\n+    // to read from the file specified in the -rootcertificates setting,\n+    // or, if that's not set, to use the system default root certificates.\n+    // If you pass in a store, you should not X509_STORE_free it: it will be\n+    // freed either at exit or when another set of CAs are loaded.\n+    static void LoadRootCAs(X509_STORE* store=NULL);\n+\n+    // Return certificate store\n+    static X509_STORE* getCertStore() { return certStore; }\n+\n+    // Setup networking (options is used to get proxy settings)\n+    void initNetManager(const OptionsModel& options);\n+\n+    // Constructor registers this on the parent QApplication to\n+    // receive QEvent::FileOpen events\n     bool eventFilter(QObject *object, QEvent *event);\n \n signals:\n-    void receivedURI(QString);\n+    // Fired when a valid payment request is received\n+    void receivedPaymentRequest(SendCoinsRecipient);\n+\n+    // Fired when a valid PaymentACK is received\n+    void receivedPaymentACK(QString);\n+\n+    // Fired when an error should be reported to the user\n+    void reportError(QString, QString, unsigned int);\n \n public slots:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n \n+    // Submit Payment message to a merchant, get back PaymentACK:\n+    void fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipient, QByteArray transaction);\n+\n private slots:\n     void handleURIConnection();\n+    void netRequestFinished(QNetworkReply*);\n+    void reportSslErrors(QNetworkReply*, const QList<QSslError> &);\n+\n+private:\n+    static bool readPaymentRequest(const QString& filename, PaymentRequestPlus& request);\n+    bool processPaymentRequest(PaymentRequestPlus& request, QList<SendCoinsRecipient>& recipients);\n+    void handleURIOrFile(const QString& s);\n+    void fetchRequest(const QUrl& url);\n+\n+    bool saveURIs;                 // true during startup\n+    QLocalServer* uriServer;\n+    static X509_STORE* certStore; // Trusted root certificates\n+    static void freeCertStore();\n+\n+    QNetworkAccessManager* netManager; // Used to fetch payment requests\n };\n \n #endif // PAYMENTSERVER_H"
      },
      {
        "sha": "09d83b1a2949309c54fc3474b6344762c32c6593",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 11,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -93,11 +93,26 @@ void SendCoinsDialog::on_sendButton_clicked()\n     QStringList formatted;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n+        QString amount = BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount);\n+        if (rcp.authenticatedMerchant.isEmpty())\n+        {\n+            QString address = rcp.address;\n #if QT_VERSION < 0x050000\n-        formatted.append(tr(\"<b>%1</b> to %2 (%3)\").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount), Qt::escape(rcp.label), rcp.address));\n+            QString to = Qt::escape(rcp.label);\n #else\n-        formatted.append(tr(\"<b>%1</b> to %2 (%3)\").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount), rcp.label.toHtmlEscaped(), rcp.address));\n+            QString to = rcp.label.toHtmlEscaped();\n #endif\n+            formatted.append(tr(\"<b>%1</b> to %2 (%3)\").arg(amount, to, address));\n+        }\n+        else\n+        {\n+#if QT_VERSION < 0x050000\n+            QString merchant = Qt::escape(rcp.authenticatedMerchant);\n+#else\n+            QString merchant = rcp.authenticatedMerchant.toHtmlEscaped();\n+#endif\n+            formatted.append(tr(\"<b>%1</b> to %2\").arg(amount, merchant));\n+        }\n     }\n \n     fNewRecipientAllowed = false;\n@@ -292,20 +307,30 @@ void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)\n     entry->setValue(rv);\n }\n \n-bool SendCoinsDialog::handleURI(const QString &uri)\n+bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n {\n-    SendCoinsRecipient rv;\n-    // URI has to be valid\n-    if (GUIUtil::parseBitcoinURI(uri, &rv))\n-    {\n+    if (!rv.authenticatedMerchant.isEmpty()) {\n+        // Expired payment request?\n+        const payments::PaymentDetails& details = rv.paymentRequest.getDetails();\n+        if (details.has_expires() && (int64)details.expires() < GetTime())\n+        {\n+            QMessageBox::warning(this, tr(\"Send Coins\"),\n+                                 tr(\"Payment request expired\"));\n+            return false;\n+        }\n+    }\n+    else {\n         CBitcoinAddress address(rv.address.toStdString());\n-        if (!address.IsValid())\n+        if (!address.IsValid()) {\n+            QString strAddress(address.ToString().c_str());\n+            QMessageBox::warning(this, tr(\"Send Coins\"),\n+                                 tr(\"Invalid payment address %1\").arg(strAddress));\n             return false;\n-        pasteEntry(rv);\n-        return true;\n+        }\n     }\n \n-    return false;\n+    pasteEntry(rv);\n+    return true;\n }\n \n void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)"
      },
      {
        "sha": "e75a003ba10f81018f5a04e530a4c37be5225370",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -2,6 +2,7 @@\n #define SENDCOINSDIALOG_H\n \n #include <QDialog>\n+#include <QVariant>\n \n namespace Ui {\n     class SendCoinsDialog;\n@@ -31,7 +32,7 @@ class SendCoinsDialog : public QDialog\n \n     void setAddress(const QString &address);\n     void pasteEntry(const SendCoinsRecipient &rv);\n-    bool handleURI(const QString &uri);\n+    bool handlePaymentRequest(const SendCoinsRecipient &recipient);\n \n public slots:\n     void clear();"
      },
      {
        "sha": "75610f199ea4acddbacfe5f7f04db8f38385571e",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 7,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -12,12 +12,14 @@\n #include <QClipboard>\n \n SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n-    QFrame(parent),\n+    QStackedWidget(parent),\n     ui(new Ui::SendCoinsEntry),\n     model(0)\n {\n     ui->setupUi(this);\n \n+    setCurrentWidget(ui->SendCoinsInsecure);\n+\n #ifdef Q_OS_MAC\n     ui->payToLayout->setSpacing(4);\n #endif\n@@ -101,6 +103,9 @@ bool SendCoinsEntry::validate()\n     // Check input validity\n     bool retval = true;\n \n+    if (!recipient.authenticatedMerchant.isEmpty())\n+        return retval;\n+\n     if(!ui->payTo->hasAcceptableInput() ||\n        (model && !model->validateAddress(ui->payTo->text())))\n     {\n@@ -124,13 +129,15 @@ bool SendCoinsEntry::validate()\n \n SendCoinsRecipient SendCoinsEntry::getValue()\n {\n-    SendCoinsRecipient rv;\n+    if (!recipient.authenticatedMerchant.isEmpty())\n+        return recipient;\n \n-    rv.address = ui->payTo->text();\n-    rv.label = ui->addAsLabel->text();\n-    rv.amount = ui->payAmount->value();\n+    // User-entered or non-authenticated:\n+    recipient.address = ui->payTo->text();\n+    recipient.label = ui->addAsLabel->text();\n+    recipient.amount = ui->payAmount->value();\n \n-    return rv;\n+    return recipient;\n }\n \n QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)\n@@ -145,9 +152,22 @@ QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)\n \n void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n {\n+    recipient = value;\n+\n     ui->payTo->setText(value.address);\n     ui->addAsLabel->setText(value.label);\n     ui->payAmount->setValue(value.amount);\n+\n+    if (!recipient.authenticatedMerchant.isEmpty())\n+    {\n+        const payments::PaymentDetails& details = value.paymentRequest.getDetails();\n+\n+        ui->payTo_s->setText(value.authenticatedMerchant);\n+        ui->memo_s->setTextFormat(Qt::PlainText);\n+        ui->memo_s->setText(QString::fromStdString(details.memo()));\n+        ui->payAmount_s->setValue(value.amount);\n+        setCurrentWidget(ui->SendCoinsSecure);\n+    }\n }\n \n void SendCoinsEntry::setAddress(const QString &address)\n@@ -158,7 +178,7 @@ void SendCoinsEntry::setAddress(const QString &address)\n \n bool SendCoinsEntry::isClear()\n {\n-    return ui->payTo->text().isEmpty();\n+    return ui->payTo->text().isEmpty() && ui->payTo_s->text().isEmpty();\n }\n \n void SendCoinsEntry::setFocus()\n@@ -172,5 +192,6 @@ void SendCoinsEntry::updateDisplayUnit()\n     {\n         // Update payAmount with the current unit\n         ui->payAmount->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n+        ui->payAmount_s->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n     }\n }"
      },
      {
        "sha": "9c7bfe95217d4e2d145bef3a3c3f485005fc0d1d",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -1,16 +1,21 @@\n #ifndef SENDCOINSENTRY_H\n #define SENDCOINSENTRY_H\n \n-#include <QFrame>\n+#include <QStackedWidget>\n+\n+#include \"walletmodel.h\"\n \n namespace Ui {\n     class SendCoinsEntry;\n }\n class WalletModel;\n-class SendCoinsRecipient;\n \n-/** A single entry in the dialog for sending bitcoins. */\n-class SendCoinsEntry : public QFrame\n+/**\n+ * A single entry in the dialog for sending bitcoins.\n+ * Stacked widget, with different UIs for payment requests\n+ * with a strong payee identity.\n+ */\n+class SendCoinsEntry : public QStackedWidget\n {\n     Q_OBJECT\n \n@@ -49,6 +54,7 @@ private slots:\n     void updateDisplayUnit();\n \n private:\n+    SendCoinsRecipient recipient;\n     Ui::SendCoinsEntry *ui;\n     WalletModel *model;\n };"
      },
      {
        "sha": "49558165f0551a1270d0d882a4ef7ac9be6ba645",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "added",
        "additions": 307,
        "deletions": 0,
        "changes": 307,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,307 @@\n+//\n+// Data for paymentservertests.cpp\n+//\n+\n+// Base64/DER-encoded fake certificate authority certificate.\n+// Convert pem to base64/der with:\n+// cat file.pem | openssl x509 -inform PEM -outform DER | openssl enc -base64\n+//\n+// Serial Number: 10302349811211485352 (0x8ef94c91b112c0a8)\n+// Issuer: CN=PaymentRequest Test CA\n+// Subject: CN=PaymentRequest Test CA\n+// Not Valid After : Dec  8 16:37:24 2022 GMT\n+//\n+const char* caCert_BASE64 =\n+\"\\\n+MIIB0DCCATmgAwIBAgIJAI75TJGxEsCoMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n+BAMTFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTIxMjEwMTYzNzI0WhcNMjIx\\\n+MjA4MTYzNzI0WjAhMR8wHQYDVQQDExZQYXltZW50UmVxdWVzdCBUZXN0IENBMIGf\\\n+MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCvua59nX9radoqDYyplcns5qdVDTN1\\\n+7tmcGixmMYOYU3UYMU55VSsJs0dWKnMm3COQDY+N63c0XSbRqarBcsLTkaNASuPX\\\n+FCv1VWuEKSyy5xe4zeoDU7CVSzlxtQD9wbZW/s3ISjgaXBpwn6eVmntb0JwYxxPc\\\n+M1u/hrMD8BDbSQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA\\\n+A4GBADSaRgK5xe47XxycXBhHhr0Wgl4pAsFsufqA9aB9r8KNEHJ0yUvvbD/jaJJM\\\n+RtQcf0AJ9olzUMY4syehxbzUJP6aeXhZEYiMvdvcv9D55clq6+WLLlNT3jBgAaVn\\\n+p3waRjPD4bUX3nv+ojz5s4puw7Qq5QUZlhGsMzPvwDGCmZkL\\\n+\";\n+\n+//\n+// This payment request validates directly against the\n+// above certificate authority.\n+//\n+const char* paymentrequest1_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMjEyMTAx\\\n+NjM3MjRaFw0yMjEyMDgxNjM3MjRaMEMxGTAXBgNVBAMMEHRlc3RtZXJjaGFudC5v\\\n+cmcxJjAkBgNVBAoMHVBheW1lbnQgUmVxdWVzdCBUZXN0IE1lcmNoYW50MIGfMA0G\\\n+CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHkMy8W1u6HsWlSqdWTmMKf54gICxNfxbY\\\n++rcMtAftr62hCYx2d2QiSRd1pCUzmo12IiSX3WxSHwaTnT3MFD6jRx6+zM6XdGar\\\n+I2zpYle11ANzu4gAthN17uRQHV2O5QxVtzNaMdKeJLXT2L9tfEdyL++9ZUqoQmdA\\\n+YG9ix330hQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GB\\\n+AIkyO99KC68bi9PFRyQQ7nvn5GlQEb3Ca1bRG5+AKN9N5vc8rZ9G2hejtM8wEXni\\\n+eGBP+chVMsbTPEHKLrwREn7IvcyCcbAStaklPC3w0B/2idQSHskb6P3X13OR2bTH\\\n+a2+6wuhsOZRUrVNr24rM95DKx/eCC6JN1VW+qRPU6fqzIjQSHwiw2wYSGXapFJVg\\\n+igPI+6XpExtNLO/i1WFV8ZmoiKwYsuHFiwUqC1VuaXRUZXN0T25lKoABS0j59iMU\\\n+Uc9MdIfwsO1BskIET0eJSGNZ7eXb9N62u+qf831PMpEHkmlGpk8rHy92nPcgua/U\\\n+Yt8oZMn3QaTZ5A6HjJbc3A73eLylp1a0SwCl+KDMEvDQhqMn1jAVu2v92AH3uB7n\\\n+SiWVbw0tX/68iSQEGGfh9n6ee/8Myb3ICdw=\\\n+\";\n+\n+//\n+// Signed, but expired, merchant cert in the request\n+//\n+const char* paymentrequest2_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrsAwrpAzCCAeUwggFOoAMCAQICAQMwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzAyMjMy\\\n+MTI2NDNaFw0xMzAyMjQyMTI2NDNaMD4xHDAaBgNVBAMME2V4cGlyZWRtZXJjaGFu\\\n+dC5vcmcxHjAcBgNVBAoMFUV4cGlyZWQgVGVzdCBNZXJjaGFudDCBnzANBgkqhkiG\\\n+9w0BAQEFAAOBjQAwgYkCgYEAx5DMvFtbuh7FpUqnVk5jCn+eICAsTX8W2Pq3DLQH\\\n+7a+toQmMdndkIkkXdaQlM5qNdiIkl91sUh8Gk509zBQ+o0cevszOl3RmqyNs6WJX\\\n+tdQDc7uIALYTde7kUB1djuUMVbczWjHSniS109i/bXxHci/vvWVKqEJnQGBvYsd9\\\n+9IUCAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAaU137\\\n+j53rvSjlmYZpZ4RWTP7EdD6fl5ZxBeXHytN6DQL33H0eD7OFHt+ofc7E6D7keubl\\\n+UfCu+jOvt/MvvPUmtCI9yXZ0dNC4sjyETv+wQpxO0UNZwOM4uegdCzlo6Bi3pD4/\\\n+KKLdMkWuUfuPBmoammny74lZaOVr5deKXztTuCI0Eh8IsNsGEhl2qRSVYIoDyPul\\\n+6RMbTSzv4tVhVfGZqIisGLLhxYsFKgtVbml0VGVzdFR3byqAAXHuo4nZEPniLpkd\\\n+y30TkwBxVgprWJ18a9z/7Py35Qss/JMbOXbnBhJtmJCdIowHRI0aa+zqt3KKKAXi\\\n+mm+V4seMgxTcxMS+eDDkiTcB/RtWWSyRcS2ANjFeY0T4SLMwiCL9qWPi03hr8j96\\\n+tejrSPOBNSJ3Mi/q5u2Yl4gJZY2b\\\n+\";\n+\n+//\n+// 10-long chain, all intermediates valid\n+//\n+const char* paymentrequest3_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1Nhq8JAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n+dWVzdCBJbnRlcm1lZGlhdGUgODAeFw0xMzAyMjMyMjQyMzFaFw0yMzAyMjEyMjQy\\\n+MzFaMDYxGjAYBgNVBAMMEXRlc3RtZXJjaGFudDgub3JnMRgwFgYDVQQKDA9UZXN0\\\n+IE1lcmNoYW50IDgwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMMCHA3hiHbS\\\n+TKZ5K9jHRwE8NxkGp3IOx56PDB2diNkldG8XweTcRq7bBm7pdiBt4IVggtfs+6hE\\\n+hDYIOecyoAnVzPFTdvQ7KQdQ/fD9YLe6lk+o0edOqutPMyrxLFjSluXxEQyk7fdt\\\n+URloMMYfp3p1/hFCboA1rAsQ2RW38hR5AgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8w\\\n+DQYJKoZIhvcNAQELBQADgYEAPsdFatnc2RJSpvZsw+nCiPVsllycw5ELglq9vfJz\\\n+nJJucRxgzmqI2iuas1ugwbXn0BEIRLK7vMF/qBzQR6M/nTxttah+KEu+okjps9vJ\\\n+cIyhfTyGPC5xkHaHZ7sG+UHOFhPw0/kXn0x+pbVgBZ5315axqcp1R+DTSj/whMAr\\\n+n0AKiAQwggIEMIIBbaADAgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMM\\\n+C3Rlc3RjYTcub3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRp\\\n+YXRlIDcwHhcNMTMwMjIzMjI0MjMxWhcNMjMwMjIxMjI0MjMxWjA/MRQwEgYDVQQD\\\n+DAt0ZXN0Y2E4Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVk\\\n+aWF0ZSA4MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDexUFfxb1sThvabp7u\\\n+dZz59ciThGmmAW0nP4tjrgEACgvWIInr2dZpTHbiQNF34ycsk0le1JD93D7Qb8rd\\\n+25OrpaO8XS2Li2zjR9cleixXjSLwV/zv8zJ8yPl/27XL++PDTKBXVpJ8/Syp+9Ty\\\n+plV1BqDhqtIHb/QSHEkTQXjeYQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqG\\\n+SIb3DQEBCwUAA4GBACMooQVbkbIZ2DaPwHDc4ULwguG3VI2Kzj50UdExmHtzm2S4\\\n+MQei+n+HEPjtJAx5OY520+10nfuP+12H2DRLQmWmdvDpeQ/Cv0yavlw4ZRejRFo7\\\n+KS83C0wo5rd+qTvvOmAN4UTArWkzYcEUulPdiXnRamb0WQHTeVdIbHVkMormCogE\\\n+MIICBDCCAW2gAwIBAgIBAjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0ZXN0\\\n+Y2E2Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSA2\\\n+MB4XDTEzMDIyMzIyNDIzMVoXDTIzMDIyMTIyNDIzMVowPzEUMBIGA1UEAwwLdGVz\\\n+dGNhNy5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUg\\\n+NzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAtjBRazrkebXAhXsbjimrMIRm\\\n+W/f9SwAHwXfc042keNtl0t2z6XE6UPcR2v/KrssXuCZgodeYxz6IM6lWosCM1xot\\\n+C3ChKKFBfVO30reuKBRUxXfKAFqxaG0YOAEzdZkkY9AGhqWloeSmgxpIfhInU0EF\\\n+JjCwrJ6IkijBatGoAAECAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B\\\n+AQsFAAOBgQDBRTi1MolmOA0niHYX0A2lN5QWHkCfX0A7GwyoMA3dvM45m/NYd4WB\\\n+X+HwfnfYcI6X9jOgNo5OWmc4GGsld0HlxwMYEKISBS9PbSHPBrb3TBOlw5ztQpXZ\\\n+91+bOhLux52Fr03sK7v9qExmBM12M8UR2ltpzAMiUgLLMHyPfiWkvQqIBDCCAgQw\\\n+ggFtoAMCAQICAQIwDQYJKoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNhNS5v\\\n+cmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgNTAeFw0x\\\n+MzAyMjMyMjQyMzBaFw0yMzAyMjEyMjQyMzBaMD8xFDASBgNVBAMMC3Rlc3RjYTYu\\\n+b3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDYwgZ8w\\\n+DQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANJSH3xivX1t9olIdHsznI1aE9SD7t9i\\\n+SZJsIB0otoETHZRVv9M9LvyzBNK98ZV+kTOlST7PJgC0d9BQM9sgYApSRq5oqKDM\\\n+9FXbOm/yaReAbU3mkFNFw5roTlJ5ThEy0yOGT/DS0YBRaGIvRPRj2DiqDVdCZZ+w\\\n+4jo1IYHkZt4FAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQAD\\\n+gYEATm6+J1OmbrothO60xALKonWMBKr6hudb4amkFBqKbA9wMeM3jl+I/yKfz/Uf\\\n+xWuJ071IhiNv6Gxx5YwNvhUe1xMhUqHv0gpyK1Z47bD+kYS2se5sWNPNo3Y9qZDG\\\n+IXiGQxwHmrzaFk79Uy1xsmvsEz42w6hr25Yaw7HkIgrFveoKiAQwggIEMIIBbaAD\\\n+AgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMMC3Rlc3RjYTQub3JnMScw\\\n+JQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDQwHhcNMTMwMjIz\\\n+MjI0MjMwWhcNMjMwMjIxMjI0MjMwWjA/MRQwEgYDVQQDDAt0ZXN0Y2E1Lm9yZzEn\\\n+MCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSA1MIGfMA0GCSqG\\\n+SIb3DQEBAQUAA4GNADCBiQKBgQC7vVUFpxHzz2Tr/xij3k58s8d/BPA0R6D5RXTV\\\n+vmhAzc1Zuin4zUKRFs/aCj/0yED8Wu/COfNGF4tVlRNMdl9EcFsxa8XGEL4eAZa+\\\n+H/rOHH+7/1EINrrVWhZlUecyhilN8jmCZmqEM3ecuD0NAViqyMrgmaiFmsLoQZpE\\\n+GepDUQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBAEdJ\\\n+Ss8jWiooja3WZzHXeF95QkBJNjIlpDLGcpl4opOYLSuEl9Uxp//LaQQiXuzpj4/I\\\n+pkWGQmMy5HOyH1lqDyiMgXpcG8PE0jEQAoEUGZ0QEqB1mZ6BCrYvmUuf/5aSVd8Y\\\n+6lKMR3WzFDYU9Zy0nzuHB/3nvp6MeDRQeRMtYvz4CogEMIICBDCCAW2gAwIBAgIB\\\n+AjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0ZXN0Y2EzLm9yZzEnMCUGA1UE\\\n+CgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSAzMB4XDTEzMDIyMzIyNDIy\\\n+OVoXDTIzMDIyMTIyNDIyOVowPzEUMBIGA1UEAwwLdGVzdGNhNC5vcmcxJzAlBgNV\\\n+BAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgNDCBnzANBgkqhkiG9w0B\\\n+AQEFAAOBjQAwgYkCgYEAxYYo3w2UXiYg6O8b4QgwN/vgreTkiW122Ep/z2TiDrhV\\\n+MhfOOiKdwYESPflfnXnVaQQzCGexYTQqsvqvzHSyna5hL0zPTRJxSKmTVrXRsWtp\\\n+dCRhjxCGipS3tlQBDi7vb+7SNRIBK4dBjjGzALNk7gMCpy+yM8f6I043jTlmGb0C\\\n+AwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQDU+IQxt3Oh\\\n+KqaUYWC23+cB2gekvWqwMBnrCNrX/Dp+kjoJKUoR2Fs3qw53raHES4SIhpGT9l9l\\\n+rppNQgFe/JMHeYqOZMZO+6kuU0olJanBJ14tPIc7zlMTQ9OfmZ6v07IpyFbsQDtR\\\n+hpe80DpuvSFPfJ4fh0WrQf6kn3KDVpGDnAqIBDCCAgQwggFtoAMCAQICAQIwDQYJ\\\n+KoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNhMi5vcmcxJzAlBgNVBAoMHlBh\\\n+eW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgMjAeFw0xMzAyMjMyMjQyMjlaFw0y\\\n+MzAyMjEyMjQyMjlaMD8xFDASBgNVBAMMC3Rlc3RjYTMub3JnMScwJQYDVQQKDB5Q\\\n+YXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDMwgZ8wDQYJKoZIhvcNAQEBBQAD\\\n+gY0AMIGJAoGBANzgVP99Qg98e6NsKEz1v5KqRB7NTBRRsYnBvb/TSWipvMQaCYuE\\\n+yk1xG57x++QuASKeR3QHRQJOoAhQaj9JLUhSSv9GQ5PrFLLsOFv7L1tpzXHh2dOB\\\n+IW92X2yFRW2s39q+Q21yvN+N8uoKdqXhzRA+dDoXh3cavaVeHX1G+IrlAgMBAAGj\\\n+EDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADgYEASTwg84cX+1UhOG9s\\\n+ejFV3m34QuI1hPZ+qhqVJlRYUtego8Wng1BburDSwqVAv4ch2wi3c2s4e8J7AXyL\\\n+tzSbSQG4RN0oZi0mR8EtTTN+Mix/hBIk79dMZg85+I29uFA6Zj2d9oAhQv2qkHhc\\\n+6tcaheNvkQRlCyH68k3iF1Fqf+4KiAQwggIEMIIBbaADAgECAgECMA0GCSqGSIb3\\\n+DQEBCwUAMD8xFDASBgNVBAMMC3Rlc3RjYTEub3JnMScwJQYDVQQKDB5QYXltZW50\\\n+IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDEwHhcNMTMwMjIzMjI0MjI5WhcNMjMwMjIx\\\n+MjI0MjI5WjA/MRQwEgYDVQQDDAt0ZXN0Y2EyLm9yZzEnMCUGA1UECgweUGF5bWVu\\\n+dCBSZXF1ZXN0IEludGVybWVkaWF0ZSAyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\\\n+iQKBgQDaV8zhfyQuSf/f+fauMfgs3g/RnWy9yxxUkvQneQQPH3uZzCyk3A6q72ip\\\n+TtwNqiibG9455L9A7SaUjGtnpUz0NKT/VWUdqbfCl1PqXjEZbDobbAQ5hxLGOTyL\\\n+RQhLIcgeq2/BnmeCqHsC4md04nUp+nBo1HwKyygvK+9sMbCp/wIDAQABoxAwDjAM\\\n+BgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBACvYyE+PPmWFkbjyRu9LAt8D\\\n+crtyYYLRClKSg6tVvutwukLG2l//kDOohYkJtgTqr6LnCIIIwYdXN+4wxugmw4cn\\\n+PIZmP6kovxjhhVM95okilor1zniTAo3RN7JDIfTGNgxLdGu1btt7DOFL4zTbeSJM\\\n+b8M1JpPftehH+x/VLyuUCuoDMIIB5jCCAU+gAwIBAgIBBTANBgkqhkiG9w0BAQsF\\\n+ADAhMR8wHQYDVQQDExZQYXltZW50UmVxdWVzdCBUZXN0IENBMB4XDTEzMDIyMzIy\\\n+NDIyOFoXDTIzMDIyMTIyNDIyOFowPzEUMBIGA1UEAwwLdGVzdGNhMS5vcmcxJzAl\\\n+BgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgMTCBnzANBgkqhkiG\\\n+9w0BAQEFAAOBjQAwgYkCgYEAo5Vy9H3nA/OOkF5Ap89yfVNSiTay/LYCaB0eALpc\\\n+U690U75O9Q3w2M+2AN8wpbbHsJHZMIjEeBRoQfjlYXW1ucQTxWKyT+liu0D25mGX\\\n+X27CBXBd4iXTxVII/iX+u3lcjORjoHOBy7QgeIDIIS9y0vYu8eArpjh7m4thrVgI\\\n+RtMCAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQB9LKcV\\\n+JK9sjASNzpQlpUp7nCiw5FSjVY+XMRIKK/kavzlKjZ+InsmmyRVGjDoZi9GrqG9P\\\n+VHgLBxi2VtVjmokZoNPqao3OfhqORAubC+JR/JLepM7aDaxDdTHVhSUk4lgNAvi2\\\n+6dGY7nZMsnHlPQ2tPp/HvRRiMq1oDjlylc8VTCI2Eh8IsNsGEhl2qRSVYIoDyPul\\\n+6RMbTSzv4tVhVfGZqIisGLLhxYsFKg1Vbml0VGVzdFRocmVlKoABn2HTsUQtMNI4\\\n+yNvkfkFNka3pRvTUTydJrvyfmEeLzImfM1BWddZjnywku9RToNFZZNgow5QnljmF\\\n+chhR/aHOuEMTxmc12K4rNlgYtHCsxLP9zd+6u0cva3TucZ6EzS8PKEib/+r12/52\\\n+664NuWA9WtsK7QCFrK2K95PnVCRmWl0=\\\n+\";\n+\n+//\n+// Long chain, with an invalid (expired) cert in the middle\n+//\n+const char* paymentrequest4_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhqeJAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n+dWVzdCBJbnRlcm1lZGlhdGUgODAeFw0xMzAyMjMyMjQyMzFaFw0yMzAyMjEyMjQy\\\n+MzFaMDYxGjAYBgNVBAMMEXRlc3RtZXJjaGFudDgub3JnMRgwFgYDVQQKDA9UZXN0\\\n+IE1lcmNoYW50IDgwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMMCHA3hiHbS\\\n+TKZ5K9jHRwE8NxkGp3IOx56PDB2diNkldG8XweTcRq7bBm7pdiBt4IVggtfs+6hE\\\n+hDYIOecyoAnVzPFTdvQ7KQdQ/fD9YLe6lk+o0edOqutPMyrxLFjSluXxEQyk7fdt\\\n+URloMMYfp3p1/hFCboA1rAsQ2RW38hR5AgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8w\\\n+DQYJKoZIhvcNAQELBQADgYEAPsdFatnc2RJSpvZsw+nCiPVsllycw5ELglq9vfJz\\\n+nJJucRxgzmqI2iuas1ugwbXn0BEIRLK7vMF/qBzQR6M/nTxttah+KEu+okjps9vJ\\\n+cIyhfTyGPC5xkHaHZ7sG+UHOFhPw0/kXn0x+pbVgBZ5315axqcp1R+DTSj/whMAr\\\n+n0AKiAQwggIEMIIBbaADAgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMM\\\n+C3Rlc3RjYTcub3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRp\\\n+YXRlIDcwHhcNMTMwMjIzMjI0MjMxWhcNMjMwMjIxMjI0MjMxWjA/MRQwEgYDVQQD\\\n+DAt0ZXN0Y2E4Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVk\\\n+aWF0ZSA4MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDexUFfxb1sThvabp7u\\\n+dZz59ciThGmmAW0nP4tjrgEACgvWIInr2dZpTHbiQNF34ycsk0le1JD93D7Qb8rd\\\n+25OrpaO8XS2Li2zjR9cleixXjSLwV/zv8zJ8yPl/27XL++PDTKBXVpJ8/Syp+9Ty\\\n+plV1BqDhqtIHb/QSHEkTQXjeYQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqG\\\n+SIb3DQEBCwUAA4GBACMooQVbkbIZ2DaPwHDc4ULwguG3VI2Kzj50UdExmHtzm2S4\\\n+MQei+n+HEPjtJAx5OY520+10nfuP+12H2DRLQmWmdvDpeQ/Cv0yavlw4ZRejRFo7\\\n+KS83C0wo5rd+qTvvOmAN4UTArWkzYcEUulPdiXnRamb0WQHTeVdIbHVkMormCogE\\\n+MIICBDCCAW2gAwIBAgIBAjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0ZXN0\\\n+Y2E2Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSA2\\\n+MB4XDTEzMDIyMzIyNDIzMVoXDTIzMDIyMTIyNDIzMVowPzEUMBIGA1UEAwwLdGVz\\\n+dGNhNy5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUg\\\n+NzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAtjBRazrkebXAhXsbjimrMIRm\\\n+W/f9SwAHwXfc042keNtl0t2z6XE6UPcR2v/KrssXuCZgodeYxz6IM6lWosCM1xot\\\n+C3ChKKFBfVO30reuKBRUxXfKAFqxaG0YOAEzdZkkY9AGhqWloeSmgxpIfhInU0EF\\\n+JjCwrJ6IkijBatGoAAECAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B\\\n+AQsFAAOBgQDBRTi1MolmOA0niHYX0A2lN5QWHkCfX0A7GwyoMA3dvM45m/NYd4WB\\\n+X+HwfnfYcI6X9jOgNo5OWmc4GGsld0HlxwMYEKISBS9PbSHPBrb3TBOlw5ztQpXZ\\\n+91+bOhLux52Fr03sK7v9qExmBM12M8UR2ltpzAMiUgLLMHyPfiWkvQqIBDCCAgQw\\\n+ggFtoAMCAQICAQIwDQYJKoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNhNS5v\\\n+cmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgNTAeFw0x\\\n+MzAyMjMyMjQyMzBaFw0yMzAyMjEyMjQyMzBaMD8xFDASBgNVBAMMC3Rlc3RjYTYu\\\n+b3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDYwgZ8w\\\n+DQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANJSH3xivX1t9olIdHsznI1aE9SD7t9i\\\n+SZJsIB0otoETHZRVv9M9LvyzBNK98ZV+kTOlST7PJgC0d9BQM9sgYApSRq5oqKDM\\\n+9FXbOm/yaReAbU3mkFNFw5roTlJ5ThEy0yOGT/DS0YBRaGIvRPRj2DiqDVdCZZ+w\\\n+4jo1IYHkZt4FAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQAD\\\n+gYEATm6+J1OmbrothO60xALKonWMBKr6hudb4amkFBqKbA9wMeM3jl+I/yKfz/Uf\\\n+xWuJ071IhiNv6Gxx5YwNvhUe1xMhUqHv0gpyK1Z47bD+kYS2se5sWNPNo3Y9qZDG\\\n+IXiGQxwHmrzaFk79Uy1xsmvsEz42w6hr25Yaw7HkIgrFveoK6gMwggHmMIIBT6AD\\\n+AgECAgEGMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNVBAMTFlBheW1lbnRSZXF1ZXN0\\\n+IFRlc3QgQ0EwHhcNMTMwMjIzMjI1OTUxWhcNMTMwMjI0MjI1OTUxWjA/MRQwEgYD\\\n+VQQDDAt0ZXN0Y2E1Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVy\\\n+bWVkaWF0ZSA1MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7vVUFpxHzz2Tr\\\n+/xij3k58s8d/BPA0R6D5RXTVvmhAzc1Zuin4zUKRFs/aCj/0yED8Wu/COfNGF4tV\\\n+lRNMdl9EcFsxa8XGEL4eAZa+H/rOHH+7/1EINrrVWhZlUecyhilN8jmCZmqEM3ec\\\n+uD0NAViqyMrgmaiFmsLoQZpEGepDUQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0G\\\n+CSqGSIb3DQEBCwUAA4GBAEmcUEnhua/oiXy1fwScLgMqt+jk9mHRpE6SVsIop23Q\\\n+CY2JfpG6RxhMMzzzhGklEGN6cxG0HCi6B3HJx6PYrFEfTB0rW4K6m0Tvx3WpS9mN\\\n+uoEuJHLy18ausI/sYAPDHCL+SfBVcqorpaIG2sSpZouRBjRHAyqFAYlwlW87uq5n\\\n+CogEMIICBDCCAW2gAwIBAgIBAjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0\\\n+ZXN0Y2EzLm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0\\\n+ZSAzMB4XDTEzMDIyMzIyNDIyOVoXDTIzMDIyMTIyNDIyOVowPzEUMBIGA1UEAwwL\\\n+dGVzdGNhNC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlh\\\n+dGUgNDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxYYo3w2UXiYg6O8b4Qgw\\\n+N/vgreTkiW122Ep/z2TiDrhVMhfOOiKdwYESPflfnXnVaQQzCGexYTQqsvqvzHSy\\\n+na5hL0zPTRJxSKmTVrXRsWtpdCRhjxCGipS3tlQBDi7vb+7SNRIBK4dBjjGzALNk\\\n+7gMCpy+yM8f6I043jTlmGb0CAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG\\\n+9w0BAQsFAAOBgQDU+IQxt3OhKqaUYWC23+cB2gekvWqwMBnrCNrX/Dp+kjoJKUoR\\\n+2Fs3qw53raHES4SIhpGT9l9lrppNQgFe/JMHeYqOZMZO+6kuU0olJanBJ14tPIc7\\\n+zlMTQ9OfmZ6v07IpyFbsQDtRhpe80DpuvSFPfJ4fh0WrQf6kn3KDVpGDnAqIBDCC\\\n+AgQwggFtoAMCAQICAQIwDQYJKoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNh\\\n+Mi5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgMjAe\\\n+Fw0xMzAyMjMyMjQyMjlaFw0yMzAyMjEyMjQyMjlaMD8xFDASBgNVBAMMC3Rlc3Rj\\\n+YTMub3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDMw\\\n+gZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANzgVP99Qg98e6NsKEz1v5KqRB7N\\\n+TBRRsYnBvb/TSWipvMQaCYuEyk1xG57x++QuASKeR3QHRQJOoAhQaj9JLUhSSv9G\\\n+Q5PrFLLsOFv7L1tpzXHh2dOBIW92X2yFRW2s39q+Q21yvN+N8uoKdqXhzRA+dDoX\\\n+h3cavaVeHX1G+IrlAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEL\\\n+BQADgYEASTwg84cX+1UhOG9sejFV3m34QuI1hPZ+qhqVJlRYUtego8Wng1BburDS\\\n+wqVAv4ch2wi3c2s4e8J7AXyLtzSbSQG4RN0oZi0mR8EtTTN+Mix/hBIk79dMZg85\\\n++I29uFA6Zj2d9oAhQv2qkHhc6tcaheNvkQRlCyH68k3iF1Fqf+4KiAQwggIEMIIB\\\n+baADAgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMMC3Rlc3RjYTEub3Jn\\\n+MScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDEwHhcNMTMw\\\n+MjIzMjI0MjI5WhcNMjMwMjIxMjI0MjI5WjA/MRQwEgYDVQQDDAt0ZXN0Y2EyLm9y\\\n+ZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSAyMIGfMA0G\\\n+CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDaV8zhfyQuSf/f+fauMfgs3g/RnWy9yxxU\\\n+kvQneQQPH3uZzCyk3A6q72ipTtwNqiibG9455L9A7SaUjGtnpUz0NKT/VWUdqbfC\\\n+l1PqXjEZbDobbAQ5hxLGOTyLRQhLIcgeq2/BnmeCqHsC4md04nUp+nBo1HwKyygv\\\n+K+9sMbCp/wIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GB\\\n+ACvYyE+PPmWFkbjyRu9LAt8DcrtyYYLRClKSg6tVvutwukLG2l//kDOohYkJtgTq\\\n+r6LnCIIIwYdXN+4wxugmw4cnPIZmP6kovxjhhVM95okilor1zniTAo3RN7JDIfTG\\\n+NgxLdGu1btt7DOFL4zTbeSJMb8M1JpPftehH+x/VLyuUCuoDMIIB5jCCAU+gAwIB\\\n+AgIBBTANBgkqhkiG9w0BAQsFADAhMR8wHQYDVQQDExZQYXltZW50UmVxdWVzdCBU\\\n+ZXN0IENBMB4XDTEzMDIyMzIyNDIyOFoXDTIzMDIyMTIyNDIyOFowPzEUMBIGA1UE\\\n+AwwLdGVzdGNhMS5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1l\\\n+ZGlhdGUgMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAo5Vy9H3nA/OOkF5A\\\n+p89yfVNSiTay/LYCaB0eALpcU690U75O9Q3w2M+2AN8wpbbHsJHZMIjEeBRoQfjl\\\n+YXW1ucQTxWKyT+liu0D25mGXX27CBXBd4iXTxVII/iX+u3lcjORjoHOBy7QgeIDI\\\n+IS9y0vYu8eArpjh7m4thrVgIRtMCAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkq\\\n+hkiG9w0BAQsFAAOBgQB9LKcVJK9sjASNzpQlpUp7nCiw5FSjVY+XMRIKK/kavzlK\\\n+jZ+InsmmyRVGjDoZi9GrqG9PVHgLBxi2VtVjmokZoNPqao3OfhqORAubC+JR/JLe\\\n+pM7aDaxDdTHVhSUk4lgNAvi26dGY7nZMsnHlPQ2tPp/HvRRiMq1oDjlylc8VTCI1\\\n+Eh8IsNsGEhl2qRSVYIoDyPul6RMbTSzv4tVhVfGZqIisGLLhxYsFKgxVbml0VGVz\\\n+dEZvdXIqgAEBE1PP93Tkpif35F+dYmXn9kLA/1djcPjCs2o2rwRMM4Uk356O5dgu\\\n+HXQjsfdR58qZQS9CS5DAtRUf0R8+43/wijO/hb49VNaNXmY+/cPHMkahP2aV3tZi\\\n+FAyZblLik9A7ZvF+UsjeFQiHB5wzWQvbqk5wQ4yabHIXoYv/E0q+eQ==\\\n+\";\n+\n+const char* paymentrequest5_BASE64 =\n+\"\\\n+Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n+BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzA0MTkx\\\n+NzIwMDZaFw0yMzA0MTcxNzIwMDZaMEMxGTAXBgNVBAMMEHRlc3RtZXJjaGFudC5v\\\n+cmcxJjAkBgNVBAoMHVBheW1lbnQgUmVxdWVzdCBUZXN0IE1lcmNoYW50MIGfMA0G\\\n+CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDhV6Yn47aEEmbl50YLvXoqGEJA51I/40wr\\\n+Z6VQGdXYaRqYktagrWDlgYY9h0JQ1bQhm8HgW7ju0R4NaDTXUqxg4HjprF0z3Mfm\\\n+/6mmebkLOOptfkVD7ceAteNI7cyuqWGIAZA7D9mV97mXoCAtTlBUycvkmoiClCCS\\\n+h0EpF/UTaQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GB\\\n+AGIRwW7I0QvLga+RnJoJSZNZQbtu4rQW3xmoz8WfZMBYXX3QBYg5ftycbdK+/IbP\\\n+qozfjGW2AS6DNArvpveSPDTK9+GJBNo1paiNtVqwXkC3Ddscv5AIms1eZGiIOQNC\\\n+mUvdLkpoXo48WAer3EGsZ3B15GyNEELc0q9W5yUebba1IjUSHwiw2wYSGXapFJVg\\\n+igPI+6XpExtNLO/i1WFV8ZmoiKwYuPvFiwUqDFVuaXRUZXN0Rml2ZSqAAXdsMgdG\\\n+ssymvca1S/1KeM3n8Ydi2fi1JUzAAr59xPvNJRUeqCLP9upHn5z7br3P12Oz9A20\\\n+5/4wL4ClPRPVnOHgij0bEg+y0tGESqmF1rfOfXDszlo2U92wCxS07kq79YAZJ1Zo\\\n+XYh860/Q4wvc7lfiTe+dXBzPKAKhMy91yETY\\\n+\";"
      },
      {
        "sha": "2e26ab0c9bdb5b90c75334640d7a42caf8a83c87",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "added",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,109 @@\n+#include <QCoreApplication>\n+#include <QDebug>\n+#include <QTemporaryFile>\n+#include <QVariant>\n+\n+#include <openssl/x509.h>\n+#include <openssl/x509_vfy.h>\n+\n+#include \"optionsmodel.h\"\n+#include \"paymentservertests.h\"\n+#include \"paymentrequestdata.h\"\n+#include \"util.h\"\n+\n+\n+\n+X509 *parse_b64der_cert(const char* cert_data)\n+{\n+    std::vector<unsigned char> data = DecodeBase64(cert_data);\n+    assert(data.size() > 0);\n+    const unsigned char* dptr = &data[0];\n+    X509 *cert = d2i_X509(NULL, &dptr, data.size());\n+    assert(cert);\n+    return cert;\n+}\n+\n+\n+//\n+// Test payment request handling\n+//\n+\n+static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsigned char>& data)\n+{\n+    RecipientCatcher sigCatcher;\n+    QObject::connect(server, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n+                     &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n+\n+    // Write data to a temp file:\n+    QTemporaryFile f;\n+    f.open();\n+    f.write((const char*)&data[0], data.size());\n+    f.close();\n+\n+    // Create a FileOpenEvent and send it directly to the server's event filter:\n+    QFileOpenEvent event(f.fileName());\n+    server->eventFilter(NULL, &event);\n+\n+    QObject::disconnect(server, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n+                        &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n+\n+    // Return results from sigCatcher\n+    return sigCatcher.recipient;\n+}\n+\n+void PaymentServerTests::paymentServerTests()\n+{\n+    OptionsModel optionsModel;\n+    PaymentServer* server = new PaymentServer(NULL, false);\n+    X509_STORE* caStore = X509_STORE_new();\n+    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert_BASE64));\n+    PaymentServer::LoadRootCAs(caStore);\n+    server->initNetManager(optionsModel);\n+    server->uiReady();\n+\n+    // Now feed PaymentRequests to server, and observe signals it produces:\n+    std::vector<unsigned char> data = DecodeBase64(paymentrequest1_BASE64);\n+    SendCoinsRecipient r = handleRequest(server, data);\n+    QString merchant;\n+    r.paymentRequest.getMerchant(caStore, merchant);\n+    QCOMPARE(merchant, QString(\"testmerchant.org\"));\n+\n+    // Version of the above, with an expired certificate:\n+    data = DecodeBase64(paymentrequest2_BASE64);\n+    r = handleRequest(server, data);\n+    r.paymentRequest.getMerchant(caStore, merchant);\n+    QCOMPARE(merchant, QString(\"\"));\n+\n+    // Long certificate chain:\n+    data = DecodeBase64(paymentrequest3_BASE64);\n+    r = handleRequest(server, data);\n+    r.paymentRequest.getMerchant(caStore, merchant);\n+    QCOMPARE(merchant, QString(\"testmerchant8.org\"));\n+\n+    // Long certificate chain, with an expired certificate in the middle:\n+    data = DecodeBase64(paymentrequest4_BASE64);\n+    r = handleRequest(server, data);\n+    r.paymentRequest.getMerchant(caStore, merchant);\n+    QCOMPARE(merchant, QString(\"\"));\n+\n+    // Validly signed, but by a CA not in our root CA list:\n+    data = DecodeBase64(paymentrequest5_BASE64);\n+    r = handleRequest(server, data);\n+    r.paymentRequest.getMerchant(caStore, merchant);\n+    QCOMPARE(merchant, QString(\"\"));\n+\n+    // Try again with no root CA's, verifiedMerchant should be empty:\n+    caStore = X509_STORE_new();\n+    PaymentServer::LoadRootCAs(caStore);\n+    data = DecodeBase64(paymentrequest1_BASE64);\n+    r = handleRequest(server, data);\n+    r.paymentRequest.getMerchant(caStore, merchant);\n+    QCOMPARE(merchant, QString(\"\"));\n+\n+    delete server;\n+}\n+\n+void RecipientCatcher::getRecipient(SendCoinsRecipient r)\n+{\n+    recipient = r;\n+}"
      },
      {
        "sha": "5aa24ebaf2c87d2219385716545892e3911f01f6",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -0,0 +1,29 @@\n+#ifndef PAYMENTSERVERTESTS_H\n+#define PAYMENTSERVERTESTS_H\n+\n+#include <QTest>\n+#include <QObject>\n+\n+#include \"../paymentserver.h\"\n+\n+class PaymentServerTests : public QObject\n+{\n+    Q_OBJECT\n+\n+private slots:\n+    void paymentServerTests();\n+};\n+\n+// Dummy class to receive paymentserver signals.\n+// If SendCoinsRecipient was a proper QObject, then we could use\n+// QSignalSpy... but it's not.\n+class RecipientCatcher : public QObject\n+{\n+    Q_OBJECT\n+public slots:\n+    void getRecipient(SendCoinsRecipient r);\n+public:\n+    SendCoinsRecipient recipient;\n+};\n+\n+#endif // PAYMENTSERVERTESTS_H"
      },
      {
        "sha": "dae4e604120a443ed90b0c05af8df4ee46a49a5f",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 16,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -1,16 +1,21 @@\n-#include <QTest>\r\n-#include <QObject>\r\n-\r\n-#include \"uritests.h\"\r\n-\r\n-// This is all you need to run all the tests\r\n-int main(int argc, char *argv[])\r\n-{\r\n-    bool fInvalid = false;\r\n-\r\n-    URITests test1;\r\n-    if (QTest::qExec(&test1) != 0)\r\n-        fInvalid = true;\r\n-\r\n-    return fInvalid;\r\n-}\r\n+#include <QTest>\n+#include <QObject>\n+\n+#include \"uritests.h\"\n+#include \"paymentservertests.h\"\n+\n+// This is all you need to run all the tests\n+int main(int argc, char *argv[])\n+{\n+    bool fInvalid = false;\n+\n+    URITests test1;\n+    if (QTest::qExec(&test1) != 0)\n+        fInvalid = true;\n+\n+    PaymentServerTests test2;\n+    if (QTest::qExec(&test2) != 0)\n+        fInvalid = true;\n+\n+    return fInvalid;\n+}"
      },
      {
        "sha": "25ff3623c028d52e85f5c21edf4b70cdded0a5a2",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -7,6 +7,7 @@\n #include \"db.h\"\n #include \"ui_interface.h\"\n #include \"base58.h\"\n+#include \"paymentserver.h\"\n \n #include <string>\n \n@@ -216,6 +217,21 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n \n         strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + wtx.GetHash().ToString().c_str() + \"<br>\";\n \n+        //\n+        // PaymentRequest info:\n+        //\n+        foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+        {\n+            if (r.first == \"PaymentRequest\")\n+            {\n+                PaymentRequestPlus req;\n+                req.parse(QByteArray::fromRawData(r.second.c_str(), r.second.size()));\n+                QString merchant;\n+                if (req.getMerchant(PaymentServer::getCertStore(), merchant))\n+                    strHTML += \"<b>\" + tr(\"Merchant\") + \":</b> \" + GUIUtil::HtmlEscape(merchant) + \"<br>\";\n+            }\n+        }\n+\n         if (wtx.IsCoinBase())\n             strHTML += \"<br>\" + tr(\"Generated coins must mature 120 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \\\"not accepted\\\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours.\") + \"<br>\";\n "
      },
      {
        "sha": "ed2723a0f7debf648e10f6a636558b8b9ddc1e7c",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -52,9 +52,9 @@ void WalletFrame::removeAllWallets()\n     walletStack->removeAllWallets();\n }\n \n-bool WalletFrame::handleURI(const QString &uri)\n+bool WalletFrame::handlePaymentRequest(const SendCoinsRecipient &recipient)\n {\n-    return walletStack->handleURI(uri);\n+    return walletStack->handlePaymentRequest(recipient);\n }\n \n void WalletFrame::showOutOfSyncWarning(bool fShow)"
      },
      {
        "sha": "d5aeb6d8592c8520dac204d835d9d0455f2b2590",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -11,6 +11,7 @@\n \n class BitcoinGUI;\n class ClientModel;\n+class SendCoinsRecipient;\n class WalletModel;\n class WalletStack;\n \n@@ -29,7 +30,7 @@ class WalletFrame : public QFrame\n \n     void removeAllWallets();\n \n-    bool handleURI(const QString &uri);\n+    bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     void showOutOfSyncWarning(bool fShow);\n \n@@ -71,4 +72,4 @@ public slots:\n     void setEncryptionStatus();\n };\n \n-#endif // WALLETFRAME_H\n\\ No newline at end of file\n+#endif // WALLETFRAME_H"
      },
      {
        "sha": "61357647b7f5bfe5fd30b107c61a24808abb53f3",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 27,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -127,31 +127,60 @@ bool WalletModel::validateAddress(const QString &address)\n WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipient> &recipients)\n {\n     qint64 total = 0;\n-    QSet<QString> setAddress;\n-    QString hex;\n+    std::vector<std::pair<CScript, int64> > vecSend;\n+    QByteArray transaction;\n \n     if(recipients.empty())\n     {\n         return OK;\n     }\n \n+    QSet<QString> setAddress; // Used to detect duplicates\n+    int nAddresses = 0;\n+\n     // Pre-check input data for validity\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n-        if(!validateAddress(rcp.address))\n-        {\n-            return InvalidAddress;\n+        if (rcp.paymentRequest.IsInitialized())\n+        {    // PaymentRequest...\n+            int64 subtotal = 0;\n+            const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n+            for (int i = 0; i < details.outputs_size(); i++)\n+            {\n+                const payments::Output& out = details.outputs(i);\n+                if (out.amount() <= 0) continue;\n+                subtotal += out.amount();\n+                const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n+                CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n+                vecSend.push_back(std::pair<CScript, int64>(scriptPubKey, out.amount()));\n+            }\n+            if (subtotal <= 0)\n+            {\n+                return InvalidAmount;\n+            }\n+            total += subtotal;\n         }\n-        setAddress.insert(rcp.address);\n+        else\n+        {   // User-entered bitcoin address / amount:\n+            if(!validateAddress(rcp.address))\n+            {\n+                return InvalidAddress;\n+            }\n+            if(rcp.amount <= 0)\n+            {\n+                return InvalidAmount;\n+            }\n+            setAddress.insert(rcp.address);\n+            ++nAddresses;\n \n-        if(rcp.amount <= 0)\n-        {\n-            return InvalidAmount;\n+            CScript scriptPubKey;\n+            scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n+            vecSend.push_back(std::pair<CScript, int64>(scriptPubKey, rcp.amount));\n+\n+            total += rcp.amount;\n         }\n-        total += rcp.amount;\n     }\n-\n-    if(recipients.size() > setAddress.size())\n+    if(setAddress.size() != nAddresses)\n     {\n         return DuplicateAddress;\n     }\n@@ -169,19 +198,10 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n \n-        // Sendmany\n-        std::vector<std::pair<CScript, int64> > vecSend;\n-        foreach(const SendCoinsRecipient &rcp, recipients)\n-        {\n-            CScript scriptPubKey;\n-            scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(make_pair(scriptPubKey, rcp.amount));\n-        }\n-\n-        CWalletTx wtx;\n         CReserveKey keyChange(wallet);\n         int64 nFeeRequired = 0;\n         std::string strFailReason;\n+        CWalletTx wtx;\n         bool fCreated = wallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n \n         if(!fCreated)\n@@ -194,6 +214,18 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n                          CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n+        // Store PaymentRequests in wtx.vOrderForm in wallet.\n+        foreach(const SendCoinsRecipient &rcp, recipients)\n+        {\n+            if (rcp.paymentRequest.IsInitialized())\n+            {\n+                std::string key(\"PaymentRequest\");\n+                std::string value;\n+                rcp.paymentRequest.SerializeToString(&value);\n+                wtx.vOrderForm.push_back(make_pair(key, value));\n+            }\n+        }        \n+\n         if(!uiInterface.ThreadSafeAskFee(nFeeRequired))\n         {\n             return Aborted;\n@@ -202,10 +234,15 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n         {\n             return TransactionCommitFailed;\n         }\n-        hex = QString::fromStdString(wtx.GetHash().GetHex());\n+\n+        CTransaction* t = (CTransaction*)&wtx;\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << *t;\n+        transaction.append(&(ssTx[0]), ssTx.size());\n     }\n \n-    // Add addresses / update labels that we've sent to to the address book\n+    // Add addresses / update labels that we've sent to to the address book,\n+    // and emit coinsSent signal\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         std::string strAddress = rcp.address.toStdString();\n@@ -217,14 +254,19 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n             std::map<CTxDestination, CAddressBookData>::iterator mi = wallet->mapAddressBook.find(dest);\n \n             // Check if we have a new address or an updated label\n-            if (mi == wallet->mapAddressBook.end() || mi->second.name != strLabel)\n+            if (mi == wallet->mapAddressBook.end())\n+            {\n+                wallet->SetAddressBook(dest, strLabel, \"send\");\n+            }\n+            else if (mi->second.name != strLabel)\n             {\n-                wallet->SetAddressBookName(dest, strLabel);\n+                wallet->SetAddressBook(dest, strLabel, \"\"); // \"\" means don't change purpose\n             }\n         }\n+        emit coinsSent(wallet, rcp, transaction);\n     }\n \n-    return SendCoinsReturn(OK, 0, hex);\n+    return SendCoinsReturn(OK, 0);\n }\n \n OptionsModel *WalletModel::getOptionsModel()"
      },
      {
        "sha": "8cba10f5d27c236a6e042be14788b4b195247bd7",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -4,6 +4,7 @@\n #include <QObject>\n \n #include \"allocators.h\" /* for SecureString */\n+#include \"paymentrequestplus.h\"\n \n class OptionsModel;\n class AddressTableModel;\n@@ -17,9 +18,15 @@ QT_END_NAMESPACE\n class SendCoinsRecipient\n {\n public:\n+    SendCoinsRecipient() : amount(0) { }\n+\n     QString address;\n     QString label;\n     qint64 amount;\n+\n+    // If from a payment request, paymentRequest.IsInitialized() will be true\n+    PaymentRequestPlus paymentRequest;\n+    QString authenticatedMerchant; // Empty if no authentication or invalid signature/cert/etc.\n };\n \n /** Interface to Bitcoin wallet from Qt view code. */\n@@ -68,12 +75,10 @@ class WalletModel : public QObject\n     struct SendCoinsReturn\n     {\n         SendCoinsReturn(StatusCode status,\n-                         qint64 fee=0,\n-                         QString hex=QString()):\n-            status(status), fee(fee), hex(hex) {}\n+                        qint64 fee=0):\n+            status(status), fee(fee) {}\n         StatusCode status;\n         qint64 fee; // is used in case status is \"AmountWithFeeExceedsBalance\"\n-        QString hex; // is filled with the transaction hash if status is \"OK\"\n     };\n \n     // Send coins to a list of recipients\n@@ -151,6 +156,9 @@ class WalletModel : public QObject\n     // Asynchronous message notification\n     void message(const QString &title, const QString &message, unsigned int style);\n \n+    // Coins sent: from wallet, to recipient, in (serialized) transaction:\n+    void coinsSent(CWallet* wallet, SendCoinsRecipient recipient, QByteArray transaction);\n+\n public slots:\n     /* Wallet status might have changed */\n     void updateStatus();"
      },
      {
        "sha": "6cc73358a4afdf2fd3e24f4a7d1c9bf281992803",
        "filename": "src/qt/walletstack.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletstack.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletstack.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletstack.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -54,12 +54,12 @@ void WalletStack::removeAllWallets()\n     mapWalletViews.clear();\n }\n \n-bool WalletStack::handleURI(const QString &uri)\n+bool WalletStack::handlePaymentRequest(const SendCoinsRecipient &recipient)\n {\n     WalletView *walletView = (WalletView*)currentWidget();\n     if (!walletView) return false;\n \n-    return walletView->handleURI(uri);\n+    return walletView->handlePaymentRequest(recipient);\n }\n \n void WalletStack::showOutOfSyncWarning(bool fShow)"
      },
      {
        "sha": "5c84cb6e1eb411ee9e1dd86b208e62015ae072aa",
        "filename": "src/qt/walletstack.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletstack.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletstack.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletstack.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -20,6 +20,7 @@ class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n+class SendCoinsRecipient;\n class SignVerifyMessageDialog;\n class Notificator;\n class RPCConsole;\n@@ -54,7 +55,7 @@ class WalletStack : public QStackedWidget\n \n     void removeAllWallets();\n \n-    bool handleURI(const QString &uri);\n+    bool handlePaymentRequest(const SendCoinsRecipient &recipient);\n \n     void showOutOfSyncWarning(bool fShow);\n "
      },
      {
        "sha": "0a6a4028a06edf6d23a9f1038400afb1ee880d70",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -201,10 +201,10 @@ void WalletView::gotoVerifyMessageTab(QString addr)\n         signVerifyMessageDialog->setAddress_VM(addr);\n }\n \n-bool WalletView::handleURI(const QString& strURI)\n+bool WalletView::handlePaymentRequest(const SendCoinsRecipient& recipient)\n {\n     // URI has to be valid\n-    if (sendCoinsPage->handleURI(strURI))\n+    if (sendCoinsPage->handlePaymentRequest(recipient))\n     {\n         gotoSendCoinsPage();\n         return true;"
      },
      {
        "sha": "97e8f93df94f71bae4b8d56e51d53cac6151875c",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -16,6 +16,7 @@ class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n+class SendCoinsRecipient;\n class SignVerifyMessageDialog;\n class RPCConsole;\n \n@@ -49,7 +50,7 @@ class WalletView : public QStackedWidget\n     */\n     void setWalletModel(WalletModel *walletModel);\n \n-    bool handleURI(const QString &uri);\n+    bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     void showOutOfSyncWarning(bool fShow);\n "
      },
      {
        "sha": "e166f76bf15eff26b69dced54dd7dc00e2cc6118",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -94,7 +94,7 @@ Value importprivkey(const Array& params, bool fHelp)\n         LOCK2(cs_main, pwalletMain->cs_wallet);\n \n         pwalletMain->MarkDirty();\n-        pwalletMain->SetAddressBookName(vchAddress, strLabel);\n+        pwalletMain->SetAddressBook(vchAddress, strLabel, \"receive\");\n \n         // Don't throw error in case a key is already there\n         if (pwalletMain->HaveKey(vchAddress))\n@@ -172,7 +172,7 @@ Value importwallet(const Array& params, bool fHelp)\n         }\n         pwalletMain->mapKeyMetadata[keyid].nCreateTime = nTime;\n         if (fLabel)\n-            pwalletMain->SetAddressBookName(keyid, strLabel);\n+            pwalletMain->SetAddressBook(keyid, strLabel, \"receive\");\n         nTimeBegin = std::min(nTimeBegin, nTime);\n     }\n     file.close();"
      },
      {
        "sha": "d07d3408b96cda0bc163d24e30d35164177d894a",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -114,7 +114,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n \n-    pwalletMain->SetAddressBookName(keyID, strAccount);\n+    pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n \n     return CBitcoinAddress(keyID).ToString();\n }\n@@ -151,7 +151,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n         if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n-        pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n+        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n         walletdb.WriteAccount(strAccount, account);\n     }\n \n@@ -201,7 +201,7 @@ Value setaccount(const Array& params, bool fHelp)\n             GetAccountAddress(strOldAccount, true);\n     }\n \n-    pwalletMain->SetAddressBookName(address.Get(), strAccount);\n+    pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n \n     return Value::null;\n }\n@@ -768,7 +768,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n     CScriptID innerID = inner.GetID();\n     pwalletMain->AddCScript(inner);\n \n-    pwalletMain->SetAddressBookName(innerID, strAccount);\n+    pwalletMain->SetAddressBook(innerID, strAccount, \"send\");\n     return CBitcoinAddress(innerID).ToString();\n }\n "
      },
      {
        "sha": "ddfd71efda0e76fe8e2a7a614cdb7620a4b5fa35",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -496,7 +496,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                         if (GetKeyFromPool(newDefaultKey, false))\n                         {\n                             SetDefaultKey(newDefaultKey);\n-                            SetAddressBookName(vchDefaultKey.GetID(), \"\");\n+                            SetAddressBook(vchDefaultKey.GetID(), \"\", \"receive\");\n                         }\n                     }\n                 }\n@@ -1457,26 +1457,28 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n-bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)\n+bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)\n {\n     std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n     mapAddressBook[address].name = strName;\n     NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address), (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n     if (!fFileBacked)\n         return false;\n+    if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n+        return false;\n     return CWalletDB(strWalletFile).WriteName(CBitcoinAddress(address).ToString(), strName);\n }\n \n-bool CWallet::DelAddressBookName(const CTxDestination& address)\n+bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n     mapAddressBook.erase(address);\n     NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), CT_DELETED);\n     if (!fFileBacked)\n         return false;\n+    CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());\n     return CWalletDB(strWalletFile).EraseName(CBitcoinAddress(address).ToString());\n }\n \n-\n void CWallet::PrintWallet(const CBlock& block)\n {\n     {"
      },
      {
        "sha": "d47416d27227c0707feefbdd5512650ded72d21e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -69,9 +69,11 @@ class CAddressBookData\n {\n public:\n     std::string name;\n+    std::string purpose;\n \n     CAddressBookData()\n     {\n+        purpose = \"unknown\";\n     }\n };\n \n@@ -294,9 +296,9 @@ class CWallet : public CCryptoKeyStore\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n \n-    bool SetAddressBookName(const CTxDestination& address, const std::string& strName);\n+    bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n-    bool DelAddressBookName(const CTxDestination& address);\n+    bool DelAddressBook(const CTxDestination& address);\n \n     void UpdatedTransaction(const uint256 &hashTx);\n "
      },
      {
        "sha": "554d140024e26205204fd71e6de0d6489f43c9d1",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -32,6 +32,18 @@ bool CWalletDB::EraseName(const string& strAddress)\n     return Erase(make_pair(string(\"name\"), strAddress));\n }\n \n+bool CWalletDB::WritePurpose(const string& strAddress, const string& strPurpose)\n+{\n+    nWalletDBUpdated++;\n+    return Write(make_pair(string(\"purpose\"), strAddress), strPurpose);\n+}\n+\n+bool CWalletDB::ErasePurpose(const string& strPurpose)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(make_pair(string(\"purpose\"), strPurpose));\n+}\n+\n bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n {\n     account.SetNull();\n@@ -214,6 +226,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> strAddress;\n             ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].name;\n         }\n+        else if (strType == \"purpose\")\n+        {\n+            string strAddress;\n+            ssKey >> strAddress;\n+            ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()].purpose;\n+        }\n         else if (strType == \"tx\")\n         {\n             uint256 hash;"
      },
      {
        "sha": "09ebebe5ac0cdc9f07f2541bd87b29256e07544e",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41d5fe01947f2f878c055670986a165af800f9a/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41d5fe01947f2f878c055670986a165af800f9a/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=a41d5fe01947f2f878c055670986a165af800f9a",
        "patch": "@@ -68,9 +68,11 @@ class CWalletDB : public CDB\n     void operator=(const CWalletDB&);\n public:\n     bool WriteName(const std::string& strAddress, const std::string& strName);\n-\n     bool EraseName(const std::string& strAddress);\n \n+    bool WritePurpose(const std::string& strAddress, const std::string& purpose);\n+    bool ErasePurpose(const std::string& strAddress);\n+\n     bool WriteTx(uint256 hash, const CWalletTx& wtx)\n     {\n         nWalletDBUpdated++;"
      }
    ]
  }
]