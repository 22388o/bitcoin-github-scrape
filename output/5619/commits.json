[
  {
    "sha": "13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2NkY2U0MzM2ODE4ZDBmNmNlZmU2YjNlNjFjNDU3NjJkOTdkN2M2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-08T13:38:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-08T14:51:15Z"
      },
      "message": "Catch UTXO set read errors and shutdown",
      "tree": {
        "sha": "9d49d6bf7b61801aa9b4e17202034e22344c1f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d49d6bf7b61801aa9b4e17202034e22344c1f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13cdce4336818d0f6cefe6b3e61c45762d97d7c6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c97bbe70a6876dadedfbf672387371c9c849d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c97bbe70a6876dadedfbf672387371c9c849d1"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6f1e1cb9f9a8d34d06a6ce665bd6552115b7b00",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13cdce4336818d0f6cefe6b3e61c45762d97d7c6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13cdce4336818d0f6cefe6b3e61c45762d97d7c6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=13cdce4336818d0f6cefe6b3e61c45762d97d7c6",
        "patch": "@@ -111,7 +111,28 @@ bool ShutdownRequested()\n     return fRequestShutdown;\n }\n \n+class CCoinsViewErrorCatcher : public CCoinsViewBacked\n+{\n+public:\n+    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+        try {\n+            return CCoinsViewBacked::GetCoins(txid, coins);\n+        } catch(const std::runtime_error& e) {\n+            uiInterface.ThreadSafeMessageBox(_(\"Error reading from database, shutting down.\"), \"\", CClientUIInterface::MSG_ERROR);\n+            LogPrintf(\"Error reading from database: %s\\n\", e.what());\n+            // Starting the shutdown sequence and returning false to the caller would be\n+            // interpreted as 'entry not found' (as opposed to unable to read data), and\n+            // could lead to invalid interpration. Just exit immediately, as we can't\n+            // continue anyway, and all writes should be atomic.\n+            abort();\n+        }\n+    }\n+    // Writes do not need similar protection, as failure to write is handled by the caller.\n+};\n+\n static CCoinsViewDB *pcoinsdbview = NULL;\n+static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n \n void Shutdown()\n {\n@@ -154,6 +175,8 @@ void Shutdown()\n         }\n         delete pcoinsTip;\n         pcoinsTip = NULL;\n+        delete pcoinscatcher;\n+        pcoinscatcher = NULL;\n         delete pcoinsdbview;\n         pcoinsdbview = NULL;\n         delete pblocktree;\n@@ -990,11 +1013,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 UnloadBlockIndex();\n                 delete pcoinsTip;\n                 delete pcoinsdbview;\n+                delete pcoinscatcher;\n                 delete pblocktree;\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-                pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n+                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);"
      }
    ]
  }
]