[
  {
    "sha": "80f52a2267f44a9cae4440615df3ff989be1579c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGY1MmEyMjY3ZjQ0YTljYWU0NDQwNjE1ZGYzZmY5ODliZTE1Nzlj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T22:13:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of CheckFinalTx in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "4497a03d9034c0d81400ce97ec9d80ce146c31fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4497a03d9034c0d81400ce97ec9d80ce146c31fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80f52a2267f44a9cae4440615df3ff989be1579c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f52a2267f44a9cae4440615df3ff989be1579c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80f52a2267f44a9cae4440615df3ff989be1579c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f52a2267f44a9cae4440615df3ff989be1579c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c7c2d4e91c3bdf0a4b9e2661ce8d3d6ebb55495b",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparams.h>\n #include <primitives/block.h>\n #include <sync.h>\n+#include <threadsafety.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -132,6 +133,11 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n+    bool checkFinalTx(const CTransaction& tx) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return CheckFinalTx(tx);\n+    }\n };\n \n class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>"
      },
      {
        "sha": "453938751dda76808b96c184a96754c955efbdd7",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -14,6 +14,7 @@\n \n class CBlock;\n class CScheduler;\n+class CTransaction;\n class uint256;\n struct CBlockLocator;\n \n@@ -102,6 +103,9 @@ class Chain\n         //! is guaranteed to be an ancestor of the block used to create the\n         //! locator.\n         virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+\n+        //! Check if transaction will be final given chain height current time.\n+        virtual bool checkFinalTx(const CTransaction& tx) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and"
      },
      {
        "sha": "e870d3d537701043f14c2a0e3fccef7c5cb13791",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -99,7 +99,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n //! Construct wallet tx status struct.\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n+    LockAnnotation lock(::cs_main); // Temporary, for mapBlockIndex below. Removed in upcoming commit.\n \n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -109,7 +109,7 @@ WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const C\n     result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n-    result.is_final = CheckFinalTx(*wtx.tx);\n+    result.is_final = locked_chain.checkFinalTx(*wtx.tx);\n     result.is_trusted = wtx.IsTrusted(locked_chain);\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();"
      },
      {
        "sha": "eae0be86d327539c04bdff9bcfe5e8bfbd56aada",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -607,7 +607,6 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -630,7 +629,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n             continue;\n \n         for (const CTxOut& txout : wtx.tx->vout)\n@@ -679,7 +678,6 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -696,7 +694,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n             continue;\n \n         for (const CTxOut& txout : wtx.tx->vout)\n@@ -1051,8 +1049,6 @@ struct tallyitem\n \n static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (!params[0].isNull())\n@@ -1083,7 +1079,7 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx))\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain(locked_chain);"
      },
      {
        "sha": "eb99c6cd77b322505bb208f2bcb10354b184f680",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -2075,10 +2075,8 @@ bool CWalletTx::InMempool() const\n \n bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     // Quick answer in most cases\n-    if (!CheckFinalTx(*tx))\n+    if (!locked_chain.checkFinalTx(*tx))\n         return false;\n     int nDepth = GetDepthInMainChain(locked_chain);\n     if (nDepth >= 1)\n@@ -2263,15 +2261,14 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n // trusted.\n CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n     CAmount balance = 0;\n     for (const auto& entry : mapWallet) {\n         const CWalletTx& wtx = entry.second;\n         const int depth = wtx.GetDepthInMainChain(*locked_chain);\n-        if (depth < 0 || !CheckFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n+        if (depth < 0 || !locked_chain->checkFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n             continue;\n         }\n \n@@ -2325,7 +2322,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         const uint256& wtxid = entry.first;\n         const CWalletTx* pcoin = &entry.second;\n \n-        if (!CheckFinalTx(*pcoin->tx))\n+        if (!locked_chain.checkFinalTx(*pcoin->tx))\n             continue;\n \n         if (pcoin->IsImmatureCoinBase(locked_chain))"
      }
    ]
  },
  {
    "sha": "bdc6628683197945326cbdfea3f53ec0b7d1949f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGM2NjI4NjgzMTk3OTQ1MzI2Y2JkZmVhM2Y1M2VjMGI3ZDE5NDlm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:25:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of IsRBFOptIn in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "242a847bbb66dde5ca29834418f1df247b6afd74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/242a847bbb66dde5ca29834418f1df247b6afd74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc6628683197945326cbdfea3f53ec0b7d1949f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80f52a2267f44a9cae4440615df3ff989be1579c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f52a2267f44a9cae4440615df3ff989be1579c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80f52a2267f44a9cae4440615df3ff989be1579c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7cab303aadf9bcbaad1bd31c1bfcd528c30fc182",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "patch": "@@ -6,9 +6,11 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <policy/rbf.h>\n #include <primitives/block.h>\n #include <sync.h>\n #include <threadsafety.h>\n+#include <txmempool.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -183,6 +185,11 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n     }\n+    RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n+    {\n+        LOCK(::mempool.cs);\n+        return IsRBFOptIn(tx, ::mempool);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "486f1ea16972845f7163b61c0aeb34b92b72636c",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "patch": "@@ -5,7 +5,8 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional.h>\n+#include <optional.h>               // For Optional and nullopt\n+#include <policy/rbf.h>             // For RBFTransactionState\n \n #include <memory>\n #include <stdint.h>\n@@ -131,6 +132,9 @@ class Chain\n     //! Estimate fraction of total transactions verified if blocks up to\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n+\n+    //! Check if transaction is RBF opt in.\n+    virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "72177995350b383c525bcee4b6bf6c78b094d4db",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "patch": "@@ -124,8 +124,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n     if (confirms <= 0) {\n-        LOCK(mempool.cs);\n-        RBFTransactionState rbfState = IsRBFOptIn(*wtx.tx, mempool);\n+        RBFTransactionState rbfState = chain.isRBFOptIn(*wtx.tx);\n         if (rbfState == RBFTransactionState::UNKNOWN)\n             rbfStatus = \"unknown\";\n         else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)"
      }
    ]
  },
  {
    "sha": "291276f7f40df9fcd62e54c016953705bf0ed04a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTEyNzZmN2Y0MGRmOWZjZDYyZTU0YzAxNjk1MzcwNWJmMGVkMDRh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:29:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of GetCountWithDescendants in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "bd5e5f8280ff559fe2a8eb84538655957619136b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd5e5f8280ff559fe2a8eb84538655957619136b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/291276f7f40df9fcd62e54c016953705bf0ed04a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291276f7f40df9fcd62e54c016953705bf0ed04a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/291276f7f40df9fcd62e54c016953705bf0ed04a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291276f7f40df9fcd62e54c016953705bf0ed04a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc6628683197945326cbdfea3f53ec0b7d1949f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8c5921970b01503cae2781d4015d637b96ba6be3",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=291276f7f40df9fcd62e54c016953705bf0ed04a",
        "patch": "@@ -190,6 +190,12 @@ class ChainImpl : public Chain\n         LOCK(::mempool.cs);\n         return IsRBFOptIn(tx, ::mempool);\n     }\n+    bool hasDescendantsInMempool(const uint256& txid) override\n+    {\n+        LOCK(::mempool.cs);\n+        auto it_mp = ::mempool.mapTx.find(txid);\n+        return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "aa4f17a8ec01ec2f4054bb731d104901299ff898",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=291276f7f40df9fcd62e54c016953705bf0ed04a",
        "patch": "@@ -135,6 +135,9 @@ class Chain\n \n     //! Check if transaction is RBF opt in.\n     virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n+\n+    //! Check if transaction has descendants in mempool.\n+    virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "f4b419ca2a1f863e5fad3204d7eda13de1ca20d6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291276f7f40df9fcd62e54c016953705bf0ed04a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291276f7f40df9fcd62e54c016953705bf0ed04a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=291276f7f40df9fcd62e54c016953705bf0ed04a",
        "patch": "@@ -27,9 +27,7 @@ static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chai\n     }\n \n     {\n-        LOCK(mempool.cs);\n-        auto it_mp = mempool.mapTx.find(wtx.GetHash());\n-        if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n+        if (wallet->chain().hasDescendantsInMempool(wtx.GetHash())) {\n             errors.push_back(\"Transaction has descendants in the mempool\");\n             return feebumper::Result::INVALID_PARAMETER;\n         }"
      }
    ]
  },
  {
    "sha": "cd32160af0528cc746968ee0eadf4f63c98665f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDMyMTYwYWYwNTI4Y2M3NDY5NjhlZTBlYWRmNGY2M2M5ODY2NWYy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:42:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of GetTransactionAncestry in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "38c2df53e845cb7c3206507ca23d7a5d59a75e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38c2df53e845cb7c3206507ca23d7a5d59a75e72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd32160af0528cc746968ee0eadf4f63c98665f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32160af0528cc746968ee0eadf4f63c98665f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd32160af0528cc746968ee0eadf4f63c98665f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32160af0528cc746968ee0eadf4f63c98665f2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "291276f7f40df9fcd62e54c016953705bf0ed04a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291276f7f40df9fcd62e54c016953705bf0ed04a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/291276f7f40df9fcd62e54c016953705bf0ed04a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7bad0543cee2e316126e847b505c4794bae47e7",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=cd32160af0528cc746968ee0eadf4f63c98665f2",
        "patch": "@@ -196,6 +196,10 @@ class ChainImpl : public Chain\n         auto it_mp = ::mempool.mapTx.find(txid);\n         return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n     }\n+    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n+    {\n+        ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "33bbfefd9f3d6c9a8a33d11961b1729e066d054d",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=cd32160af0528cc746968ee0eadf4f63c98665f2",
        "patch": "@@ -9,6 +9,7 @@\n #include <policy/rbf.h>             // For RBFTransactionState\n \n #include <memory>\n+#include <stddef.h>\n #include <stdint.h>\n #include <string>\n #include <vector>\n@@ -138,6 +139,9 @@ class Chain\n \n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n+\n+    //! Calculate mempool ancestor and descendant counts for the given transaction.\n+    virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "a77b1c60f2b772bbd878ac523575bf61e42a207b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd32160af0528cc746968ee0eadf4f63c98665f2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd32160af0528cc746968ee0eadf4f63c98665f2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cd32160af0528cc746968ee0eadf4f63c98665f2",
        "patch": "@@ -4528,7 +4528,7 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n             CInputCoin input_coin = output.GetInputCoin();\n \n             size_t ancestors, descendants;\n-            mempool.GetTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+            chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n             if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n                 // Limit output groups to no more than 10 entries, to protect\n                 // against inadvertently creating a too-large transaction"
      }
    ]
  },
  {
    "sha": "1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmIwYTRhMDRlOWNkYTE5ZWQ1YWQwNDY5NGEzOWM4M2M5MWI2MDcy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:45:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of CalculateMemPoolAncestors in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "5b09b20818eea283c6fa782662f0fbef6ced776b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b09b20818eea283c6fa782662f0fbef6ced776b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd32160af0528cc746968ee0eadf4f63c98665f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32160af0528cc746968ee0eadf4f63c98665f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd32160af0528cc746968ee0eadf4f63c98665f2"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c12215cd606e1dd8b45e0a33faf653aa494fb6e5",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "patch": "@@ -200,6 +200,20 @@ class ChainImpl : public Chain\n     {\n         ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n     }\n+    bool checkChainLimits(CTransactionRef tx) override\n+    {\n+        LockPoints lp;\n+        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n+        CTxMemPool::setEntries ancestors;\n+        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        std::string unused_error_string;\n+        LOCK(::mempool.cs);\n+        return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n+            limit_descendant_count, limit_descendant_size, unused_error_string);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "2e0328eb25bd8587a930c329a744b1fa3dfea2a5",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "patch": "@@ -142,6 +142,9 @@ class Chain\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n+\n+    //! Check chain limits.\n+    virtual bool checkChainLimits(CTransactionRef tx) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "5c95c7ec61407a0de9616b2a1ce32531f08b5a55",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "patch": "@@ -3127,16 +3127,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n-        LockPoints lp;\n-        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n-        CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n-        std::string errString;\n-        LOCK(::mempool.cs);\n-        if (!::mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n+        if (!chain().checkChainLimits(tx)) {\n             strFailReason = _(\"Transaction has too long of a mempool chain\");\n             return false;\n         }"
      }
    ]
  },
  {
    "sha": "cc02c796d3517931acc861b0f9bc50e36e1c95f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzAyYzc5NmQzNTE3OTMxYWNjODYxYjBmOWJjNTBlMzZlMWM5NWY5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T01:40:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of fee globals in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "adc01a513b50ceed34412f362644999de61ff561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adc01a513b50ceed34412f362644999de61ff561"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 54,
      "deletions": 36
    },
    "files": [
      {
        "sha": "f88860687923739371421627eb3fed53aa8586be",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -6,6 +6,8 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/block.h>\n #include <sync.h>\n@@ -214,6 +216,18 @@ class ChainImpl : public Chain\n         return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n             limit_descendant_count, limit_descendant_size, unused_error_string);\n     }\n+    CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc) override\n+    {\n+        return ::feeEstimator.estimateSmartFee(num_blocks, calc, conservative);\n+    }\n+    unsigned int estimateMaxBlocks() override\n+    {\n+        return ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    }\n+    CFeeRate mempoolMinFee() override\n+    {\n+        return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "d0f74cb100c21f05a4770a207d0a8801fdc18014",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -19,6 +19,7 @@ class CScheduler;\n class CTransaction;\n class uint256;\n struct CBlockLocator;\n+struct FeeCalculation;\n \n namespace interfaces {\n \n@@ -145,6 +146,15 @@ class Chain\n \n     //! Check chain limits.\n     virtual bool checkChainLimits(CTransactionRef tx) = 0;\n+\n+    //! Estimate smart fee.\n+    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc = nullptr) = 0;\n+\n+    //! Fee estimator max target.\n+    virtual unsigned int estimateMaxBlocks() = 0;\n+\n+    //! Pool min fee.\n+    virtual CFeeRate mempoolMinFee() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "f3a0b416dbeebd86012de779ab9e9f22a9f0455a",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -457,7 +457,7 @@ class WalletImpl : public Wallet\n     {\n         FeeCalculation fee_calc;\n         CAmount result;\n-        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n+        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, &fee_calc);\n         if (returned_target) *returned_target = fee_calc.returnedTarget;\n         if (reason) *reason = fee_calc.reason;\n         return result;"
      },
      {
        "sha": "f2acb8fbf59773ff556698fb1986158b3a1f9036",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -843,7 +843,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     bool conservative = true;\n     if (!request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n@@ -915,7 +916,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();"
      },
      {
        "sha": "fb048311de08258d3af2217f2f57e5c0404593a5",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -4,11 +4,9 @@\n \n #include <key_io.h>\n #include <keystore.h>\n-#include <policy/fees.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n-#include <validation.h>\n \n InitInterfaces* g_rpc_interfaces = nullptr;\n \n@@ -130,10 +128,9 @@ UniValue DescribeAddress(const CTxDestination& dest)\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n \n-unsigned int ParseConfirmTarget(const UniValue& value)\n+unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)\n {\n     int target = value.get_int();\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     if (target < 1 || (unsigned int)target > max_target) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n     }"
      },
      {
        "sha": "e1a5491def2d246bbffc0bfe0907c7b8249481d5",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -33,7 +33,7 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n UniValue DescribeAddress(const CTxDestination& dest);\n \n //! Parse a confirm target option and raise an RPC error if it is invalid.\n-unsigned int ParseConfirmTarget(const UniValue& value);\n+unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target);\n \n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");"
      },
      {
        "sha": "dd4b2fad4bee96fc03d4e08369864519e74f4de6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -144,7 +144,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         new_fee = total_fee;\n         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -195,7 +195,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet, ::feeEstimator))) {\n+    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet))) {\n         wallet->WalletLogPrintf(\"Bumping fee and discarding dust output\\n\");\n         new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);"
      },
      {
        "sha": "545adaebc18c97450343fa3dd7706354c3ea3bac",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -6,7 +6,6 @@\n #include <wallet/fees.h>\n \n #include <policy/policy.h>\n-#include <txmempool.h>\n #include <util/system.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n@@ -19,9 +18,9 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)\n }\n \n \n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n-    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n+    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, feeCalc).GetFee(nTxBytes);\n     // Always obey the maximum\n     if (fee_needed > maxTxFee) {\n         fee_needed = maxTxFee;\n@@ -35,7 +34,7 @@ CFeeRate GetRequiredFeeRate(const CWallet& wallet)\n     return std::max(wallet.m_min_fee, ::minRelayTxFee);\n }\n \n-CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n     /* User control of how to calculate fee uses the following parameter precedence:\n        1. coin_control.m_feerate\n@@ -64,7 +63,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n-        feerate_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate);\n+        feerate_needed = wallet.chain().estimateSmartFee(target, conservative_estimate, feeCalc);\n         if (feerate_needed == CFeeRate(0)) {\n             // if we don't have enough data for estimateSmartFee, then use fallback fee\n             feerate_needed = wallet.m_fallback_fee;\n@@ -74,7 +73,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n             if (wallet.m_fallback_fee == CFeeRate(0)) return feerate_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n-        CFeeRate min_mempool_feerate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        CFeeRate min_mempool_feerate = wallet.chain().mempoolMinFee();\n         if (feerate_needed < min_mempool_feerate) {\n             feerate_needed = min_mempool_feerate;\n             if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n@@ -90,10 +89,10 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n     return feerate_needed;\n }\n \n-CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator)\n+CFeeRate GetDiscardRate(const CWallet& wallet)\n {\n-    unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n-    CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n+    unsigned int highest_target = wallet.chain().estimateMaxBlocks();\n+    CFeeRate discard_rate = wallet.chain().estimateSmartFee(highest_target, false /* conservative */);\n     // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n     discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n     // Discard rate must be at least dustRelayFee"
      },
      {
        "sha": "434f211dc243c15be2c05e981497267eec766d99",
        "filename": "src/wallet/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -8,10 +8,8 @@\n \n #include <amount.h>\n \n-class CBlockPolicyEstimator;\n class CCoinControl;\n class CFeeRate;\n-class CTxMemPool;\n class CWallet;\n struct FeeCalculation;\n \n@@ -25,7 +23,7 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes);\n  * Estimate the minimum fee considering user set parameters\n  * and the required fee\n  */\n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc);\n \n /**\n  * Return the minimum required feerate taking into account the\n@@ -37,11 +35,11 @@ CFeeRate GetRequiredFeeRate(const CWallet& wallet);\n  * Estimate the minimum fee rate considering user set parameters\n  * and the required fee\n  */\n-CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc);\n \n /**\n  * Return the maximum feerate for discarding change.\n  */\n-CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator);\n+CFeeRate GetDiscardRate(const CWallet& wallet);\n \n #endif // BITCOIN_WALLET_FEES_H"
      },
      {
        "sha": "09e91dc58808ce712b742c0f7f6e5cfe0f6c80bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -424,7 +424,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n     }\n \n     if (!request.params[7].isNull()) {\n@@ -884,7 +884,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n     }\n \n     if (!request.params[7].isNull()) {\n@@ -2989,7 +2989,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"feeRate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n             }\n-            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"]);\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], pwallet->chain().estimateMaxBlocks());\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (options.exists(\"feeRate\")) {\n@@ -3279,7 +3279,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n-            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"]);\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {"
      },
      {
        "sha": "75681e2007eca3941a1c937fb2a9f74ee108f563",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -2485,10 +2485,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         FeeCalculation feeCalc;\n         CCoinControl temp;\n         temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, ::mempool, ::feeEstimator, &feeCalc);\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n         for (OutputGroup& group : groups) {\n@@ -2858,10 +2858,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n-            CFeeRate discard_rate = GetDiscardRate(*this, ::feeEstimator);\n+            CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n@@ -2994,7 +2994,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n                     strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n@@ -3022,7 +3022,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);\n+                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;"
      },
      {
        "sha": "f215765dab5e81cdd68937de997560d08bdf23c0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -100,8 +100,6 @@ class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n-class CTxMemPool;\n-class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n enum class FeeEstimateMode;"
      }
    ]
  },
  {
    "sha": "cc3836e8f90894432db06d9de6b20eac53d93cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzM4MzZlOGY5MDg5NDQzMmRiMDZkOWRlNmIyMGVhYzUzZDkzY2Jl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:45:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of fPruneMode in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "25b167f26fa6a1bc1123fec1e9e8b9d5e2968faa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25b167f26fa6a1bc1123fec1e9e8b9d5e2968faa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc3836e8f90894432db06d9de6b20eac53d93cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc02c796d3517931acc861b0f9bc50e36e1c95f9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bb2af5b8ba5f2a18b4803886569eb100cd3f55b7",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -228,6 +228,7 @@ class ChainImpl : public Chain\n     {\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n+    bool getPruneMode() override { return ::fPruneMode; }\n };\n \n } // namespace"
      },
      {
        "sha": "96e4f8cf0bb506e70b7c19f4c1ebb23465afeb6b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -155,6 +155,9 @@ class Chain\n \n     //! Pool min fee.\n     virtual CFeeRate mempoolMinFee() = 0;\n+\n+    //! Check if pruning is enabled.\n+    virtual bool getPruneMode() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "046a6567a5d8ee27e49ae514669790c02a23c0af",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -157,7 +157,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n-        if (fRescan && fPruneMode)\n+        if (fRescan && pwallet->chain().getPruneMode())\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n         if (fRescan && !reserver.reserve()) {\n@@ -313,7 +313,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    if (fRescan && pwallet->chain().getPruneMode())\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);\n@@ -501,7 +501,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    if (fRescan && pwallet->chain().getPruneMode())\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);\n@@ -562,7 +562,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if (fPruneMode)\n+    if (pwallet->chain().getPruneMode())\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);"
      },
      {
        "sha": "a0718309b92791c311dbf74190391a9128d19249",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -4334,7 +4334,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (fPruneMode)\n+        if (chain.getPruneMode())\n         {\n             int block_height = *tip_height;\n             while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {"
      }
    ]
  },
  {
    "sha": "00dfb2a440b94a24b61cafb519fb122f6a0ae176",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGRmYjJhNDQwYjk0YTI0YjYxY2FmYjUxOWZiMTIyZjZhMGFlMTc2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:50:07Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of g_connman in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "203e03944bd1a1975671bf2faa0f16b6cf0d22eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203e03944bd1a1975671bf2faa0f16b6cf0d22eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc3836e8f90894432db06d9de6b20eac53d93cbe"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 17,
      "deletions": 6
    },
    "files": [
      {
        "sha": "650e347da3858d8de26cb7bd962373f31223ef44",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -562,16 +562,20 @@ bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_ZMQ) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n-  $(LIBSECP256K1)\n+  $(LIBSECP256K1) \\\n+  $(LIBUNIVALUE)\n \n-bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(ZMQ_LIBS)\n #\n \n # bitcoinconsensus library #"
      },
      {
        "sha": "829e6446436af56970eef56a3e23e4c5fe66f2c3",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -37,6 +37,8 @@ nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -57,7 +59,7 @@ if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "8493c5de70b9f96612c5410fa1aca7fda6d6eabf",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <net.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -229,6 +230,7 @@ class ChainImpl : public Chain\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     bool getPruneMode() override { return ::fPruneMode; }\n+    bool p2pEnabled() override { return g_connman != nullptr; }\n };\n \n } // namespace"
      },
      {
        "sha": "44a0b1743ed66e94e03096e0d01af99a81438f3f",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -158,6 +158,9 @@ class Chain\n \n     //! Check if pruning is enabled.\n     virtual bool getPruneMode() = 0;\n+\n+    //! Check if p2p enabled.\n+    virtual bool p2pEnabled() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "6e11fe936c02ab9d9ce26c1c65512424f7cb9227",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -318,7 +318,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n+    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -858,7 +858,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n+    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -2690,7 +2690,7 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n              }.ToString()\n             );\n \n-    if (!g_connman)\n+    if (!pwallet->chain().p2pEnabled())\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     auto locked_chain = pwallet->chain().lock();"
      }
    ]
  },
  {
    "sha": "6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDZiY2M3N2MwNThmYmNmZDM5YzdlMzA1MGJiZTgyZmM4OTAyNGNm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:34:54Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of g_connman / PushInventory in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "c1c287c2912931607c545c5875029a64c65265f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1c287c2912931607c545c5875029a64c65265f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00dfb2a440b94a24b61cafb519fb122f6a0ae176"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 26,
      "deletions": 21
    },
    "files": [
      {
        "sha": "4abb1e638fa354e6bdd43d668e72582e4a1f2029",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -11,6 +11,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/block.h>\n+#include <protocol.h>\n #include <sync.h>\n #include <threadsafety.h>\n #include <txmempool.h>\n@@ -199,6 +200,11 @@ class ChainImpl : public Chain\n         auto it_mp = ::mempool.mapTx.find(txid);\n         return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n     }\n+    void relayTransaction(const uint256& txid) override\n+    {\n+        CInv inv(MSG_TX, txid);\n+        g_connman->ForEachNode([&inv](CNode* node) { node->PushInventory(inv); });\n+    }\n     void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n     {\n         ::mempool.GetTransactionAncestry(txid, ancestors, descendants);"
      },
      {
        "sha": "b4a458cba6b75375a1f0749d3678835d088ac535",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -141,6 +141,9 @@ class Chain\n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n \n+    //! Relay transaction.\n+    virtual void relayTransaction(const uint256& txid) = 0;\n+\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n "
      },
      {
        "sha": "7abbee0912f0d2f54cf1f35f3e431e0ca7ceb933",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -56,7 +56,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, g_connman.get(), state)) {\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, state)) {\n             reject_reason = state.GetRejectReason();\n             return false;\n         }"
      },
      {
        "sha": "a1c3a21d4b186e61b974d9fcd39036c8e98ecaca",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -245,7 +245,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n \n     CReserveKey reservekey(wallet);\n     CValidationState state;\n-    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, g_connman.get(), state)) {\n+    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;"
      },
      {
        "sha": "8d1bd3a16962102fbfe35d0d7531aaf148c4a1bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -340,7 +340,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n@@ -946,7 +946,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n@@ -2700,7 +2700,7 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\");\n     }\n \n-    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime(), g_connman.get());\n+    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime());\n     UniValue result(UniValue::VARR);\n     for (const uint256& txid : txids)\n     {"
      },
      {
        "sha": "af57dbf5f6dbe25ab9d24f69a4edc29ac82c1742",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -368,7 +368,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CCoinControl dummy;\n         BOOST_CHECK(wallet->CreateTransaction(*m_locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, nullptr, state));\n+        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, state));\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "8746fb556b6a934932ecb4e4d18a4f09200a81f1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -1890,7 +1890,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman)\n+bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n {\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain(locked_chain) == 0)\n@@ -1899,12 +1899,8 @@ bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CC\n         /* GetDepthInMainChain already catches known conflicts. */\n         if (InMempool() || AcceptToMemoryPool(locked_chain, maxTxFee, state)) {\n             pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-            if (connman) {\n-                CInv inv(MSG_TX, GetHash());\n-                connman->ForEachNode([&inv](CNode* pnode)\n-                {\n-                    pnode->PushInventory(inv);\n-                });\n+            if (pwallet->chain().p2pEnabled()) {\n+                pwallet->chain().relayTransaction(GetHash());\n                 return true;\n             }\n         }\n@@ -2113,7 +2109,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman)\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime)\n {\n     std::vector<uint256> result;\n \n@@ -2132,7 +2128,7 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::\n     for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(locked_chain, connman))\n+        if (wtx.RelayWalletTransaction(locked_chain))\n             result.push_back(wtx.GetHash());\n     }\n     return result;\n@@ -2157,7 +2153,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n     auto locked_chain = chain().assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60, connman);\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60);\n     if (!relayed.empty())\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n@@ -3147,7 +3143,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n+bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state)\n {\n     {\n         auto locked_chain = chain().lock();\n@@ -3188,7 +3184,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtx.RelayWalletTransaction(*locked_chain, connman);\n+                wtx.RelayWalletTransaction(*locked_chain);\n             }\n         }\n     }"
      },
      {
        "sha": "41bb4bd8c727c095ee35f04dec6a7c03b6354b95",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -535,7 +535,7 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman);\n+    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n     bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state);\n@@ -944,7 +944,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime);\n     CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -969,7 +969,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n-    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n+    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  },
  {
    "sha": "c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWU1OWE5NmE4NTYxYjZhMGJjYWJhMGVkZTJkNTNkYmFhYzExM2Iw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:54:31Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of GetAdjustedTime in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "6e2c080795bfea40396407131096fd04b9d5d44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e2c080795bfea40396407131096fd04b9d5d44d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a654f55f5548d855ff121c7612da60566ce19ba5",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "patch": "@@ -14,6 +14,7 @@\n #include <protocol.h>\n #include <sync.h>\n #include <threadsafety.h>\n+#include <timedata.h>\n #include <txmempool.h>\n #include <uint256.h>\n #include <util/system.h>\n@@ -237,6 +238,7 @@ class ChainImpl : public Chain\n     }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n+    int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n };\n \n } // namespace"
      },
      {
        "sha": "c5aa67d0d7618e1c0093cfc0bc44d1585e775e52",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "patch": "@@ -164,6 +164,9 @@ class Chain\n \n     //! Check if p2p enabled.\n     virtual bool p2pEnabled() = 0;\n+\n+    //! Get adjusted time.\n+    virtual int64_t getAdjustedTime() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "845210474589628605a9396a46e42a8aa5c2e233",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "patch": "@@ -940,7 +940,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     wtx.BindWallet(this);\n     bool fInsertedNew = ret.second;\n     if (fInsertedNew) {\n-        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nTimeReceived = chain().getAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx);"
      }
    ]
  },
  {
    "sha": "e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmM4YmE5ZjZlNzgyZTI1NDViNzFlOWUzNGI5NjdjNjllMThjN2Yw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:59:47Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of InitMessage/Warning/Error in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "b23691d11eac220ec44a617ecf9b32ce3cabb05a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b23691d11eac220ec44a617ecf9b32ce3cabb05a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 56,
      "deletions": 39
    },
    "files": [
      {
        "sha": "4f60448958f3413b1fa89d99afdea93885ef5a49",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -16,6 +16,7 @@\n #include <threadsafety.h>\n #include <timedata.h>\n #include <txmempool.h>\n+#include <ui_interface.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -239,6 +240,9 @@ class ChainImpl : public Chain\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n+    void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n+    void initWarning(const std::string& message) override { InitWarning(message); }\n+    void initError(const std::string& message) override { InitError(message); }\n };\n \n } // namespace"
      },
      {
        "sha": "b1e3f5945261825166285d23fe8f8fbfcba4aa00",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -167,6 +167,15 @@ class Chain\n \n     //! Get adjusted time.\n     virtual int64_t getAdjustedTime() = 0;\n+\n+    //! Send init message.\n+    virtual void initMessage(const std::string& message) = 0;\n+\n+    //! Send init warning.\n+    virtual void initWarning(const std::string& message) = 0;\n+\n+    //! Send init error.\n+    virtual void initError(const std::string& message) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "7ad343c15fc873d5317151566416c8d87f67fe9e",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -138,12 +138,15 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            return false;\n         }\n         gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n     }\n@@ -164,14 +167,15 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         WalletLocation location(wallet_file);\n \n         if (!wallet_paths.insert(location.GetPath()).second) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            return false;\n         }\n \n         std::string error_string;\n         std::string warning_string;\n         bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n-        if (!error_string.empty()) InitError(error_string);\n-        if (!warning_string.empty()) InitWarning(warning_string);\n+        if (!error_string.empty()) chain.initError(error_string);\n+        if (!warning_string.empty()) chain.initWarning(warning_string);\n         if (!verify_success) return false;\n     }\n "
      },
      {
        "sha": "2a1744fa6837e8354948aa6c0fe1015f7c750426",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -4087,17 +4087,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+        chain.initMessage(_(\"Zapping all transactions from wallet...\"));\n \n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n             return nullptr;\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    chain.initMessage(_(\"Loading wallet...\"));\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n@@ -4108,26 +4108,26 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n-            InitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                         \" or address book entries might be missing or incorrect.\"),\n+            chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+                                          \" or address book entries might be missing or incorrect.\"),\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n             return nullptr;\n         }\n         else {\n-            InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s\"), walletFile));\n             return nullptr;\n         }\n     }\n@@ -4146,7 +4146,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            InitError(_(\"Cannot downgrade wallet\"));\n+            chain.initError(_(\"Cannot downgrade wallet\"));\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4159,7 +4159,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->nWalletVersion;\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >=FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            InitError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n+            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n             return nullptr;\n         }\n \n@@ -4187,7 +4187,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                InitError(_(\"Unable to generate keys\"));\n+                chain.initError(_(\"Unable to generate keys\"));\n                 return nullptr;\n             }\n         }\n@@ -4211,42 +4211,42 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            InitError(_(\"Unable to generate initial keys\"));\n+            chain.initError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }\n \n         auto locked_chain = chain.assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        InitError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n+        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            InitWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n+            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n+        chain.initError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        InitError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n+        chain.initError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+            chain.initWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+                              _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n@@ -4255,41 +4255,41 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+            chain.initWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+                              _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n         walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n-                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n+            chain.initWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n+                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+            chain.initWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+                              _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < ::minRelayTxFee) {\n-            InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                 gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n             return nullptr;\n         }\n@@ -4338,12 +4338,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n                 return nullptr;\n             }\n         }\n \n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        chain.initMessage(_(\"Rescanning...\"));\n         walletInstance->WalletLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", *tip_height - rescan_height, rescan_height);\n \n         // No need to read and scan block if block was created before\n@@ -4358,7 +4358,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n-                InitError(_(\"Failed to rescan the wallet during initialization\"));\n+                chain.initError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }\n         }"
      }
    ]
  },
  {
    "sha": "d02b34c8a8bd446c9620fe626b4379617f9a9639",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDJiMzRjOGE4YmQ0NDZjOTYyMGZlNjI2YjQzNzk2MTdmOWE5NjM5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-31T20:31:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of AcceptToMemoryPool in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "b782a9fcc3835c09f94e5a2d9d7060b46b4c9088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b782a9fcc3835c09f94e5a2d9d7060b46b4c9088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d02b34c8a8bd446c9620fe626b4379617f9a9639",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 26,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9f02514df3e097836126ecddecb850d337da1521",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -11,6 +11,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>\n #include <protocol.h>\n #include <sync.h>\n #include <threadsafety.h>\n@@ -146,6 +147,12 @@ class LockImpl : public Chain::Lock\n         LockAnnotation lock(::cs_main);\n         return CheckFinalTx(tx);\n     }\n+    bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n+            false /* bypass limits */, absurd_fee);\n+    }\n };\n \n class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n@@ -237,6 +244,7 @@ class ChainImpl : public Chain\n     {\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n+    CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }"
      },
      {
        "sha": "be486bd4fcef83a3a240157314aa61ad0fb80576",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <optional.h>               // For Optional and nullopt\n #include <policy/rbf.h>             // For RBFTransactionState\n+#include <primitives/transaction.h> // For CTransactionRef\n \n #include <memory>\n #include <stddef.h>\n@@ -16,7 +17,7 @@\n \n class CBlock;\n class CScheduler;\n-class CTransaction;\n+class CValidationState;\n class uint256;\n struct CBlockLocator;\n struct FeeCalculation;\n@@ -109,6 +110,10 @@ class Chain\n \n         //! Check if transaction will be final given chain height current time.\n         virtual bool checkFinalTx(const CTransaction& tx) = 0;\n+\n+        //! Add transaction to memory pool if the transaction fee is below the\n+        //! amount specified by absurd_fee (as a safeguard). */\n+        virtual bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and\n@@ -159,6 +164,12 @@ class Chain\n     //! Pool min fee.\n     virtual CFeeRate mempoolMinFee() = 0;\n \n+    //! Get node max tx fee setting (-maxtxfee).\n+    //! This could be replaced by a per-wallet max fee, as proposed at\n+    //! https://github.com/bitcoin/bitcoin/issues/15355\n+    //! But for the time being, wallets call this to access the node setting.\n+    virtual CAmount maxTxFee() = 0;\n+\n     //! Check if pruning is enabled.\n     virtual bool getPruneMode() = 0;\n "
      },
      {
        "sha": "fb4bd8811fbde1bd34ce896309ba598ad5757af5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -1886,7 +1886,7 @@ void CWallet::ReacceptWalletTransactions()\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state);\n+        wtx.AcceptToMemoryPool(*locked_chain, state);\n     }\n }\n \n@@ -1897,7 +1897,7 @@ bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(locked_chain, maxTxFee, state)) {\n+        if (InMempool() || AcceptToMemoryPool(locked_chain, state)) {\n             pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             if (pwallet->chain().p2pEnabled()) {\n                 pwallet->chain().relayTransaction(GetHash());\n@@ -3180,7 +3180,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state)) {\n+            if (!wtx.AcceptToMemoryPool(*locked_chain, state)) {\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n@@ -4474,17 +4474,14 @@ bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n     return GetBlocksToMaturity(locked_chain) > 0;\n }\n \n-bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for AcceptToMemoryPool below. Removed in upcoming commit.\n-\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that this newly generated transaction's change is\n     // unavailable as we're not yet aware that it is in the mempool.\n-    bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n+    bool ret = locked_chain.submitToMemoryPool(tx, pwallet->chain().maxTxFee(), state);\n     fInMempool |= ret;\n     return ret;\n }"
      },
      {
        "sha": "3cfcf7a27d27ba5034b9660f04a81448cb1fe5d5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -538,7 +538,7 @@ class CWalletTx : public CMerkleTx\n     bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation"
      }
    ]
  },
  {
    "sha": "318f41fb2cae0a46b4e4be49156562b8ed640f0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMThmNDFmYjJjYWUwYTQ2YjRlNGJlNDkxNTY1NjJiOGVkNjQwZjBj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-08T18:37:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "circular-dependencies: Avoid treating some .h/.cpp files as a unit\n\nThis avoids a bogus circular dependency error in the next commit:\n\ninterfaces/chain -> interfaces/wallet -> wallet/wallet -> interfaces/chain\n\nWhich is incorrect, because interfaces/chain.cpp depends only on the\ninterfaces/wallet.h file, not the interfaces/wallet.cpp file, and it is\nwrong to treat these as a unit. Inside the interfaces directory, .h files\ncontain abstract class definitions and .cpp files contain implementations of\nthose classes, so you don't need to link against .cpp files if you're only\nusing the abstract class definition in the .h file.\n\nAn alternative fix might be to rename all the cpp files in the interfaces\ndirectory like: chain.cpp->chain_impl.cpp, node.cpp->node_impl.cpp. But just\ngetting the linter to treat these files as independent dependencies seemed\nlike it would allow keeping code organization straightforward and avoiding\nthe need to rename things.",
      "tree": {
        "sha": "0eba3861ed4428126b2e068d79e93895375c8163",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0eba3861ed4428126b2e068d79e93895375c8163"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d02b34c8a8bd446c9620fe626b4379617f9a9639"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2e4657f1dd5433ad130f06cdf4d1c64a33f75960",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/318f41fb2cae0a46b4e4be49156562b8ed640f0c/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/318f41fb2cae0a46b4e4be49156562b8ed640f0c/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=318f41fb2cae0a46b4e4be49156562b8ed640f0c",
        "patch": "@@ -8,9 +8,18 @@\n     'core_write.cpp': 'core_io.cpp',\n }\n \n+# Directories with header-based modules, where the assumption that .cpp files\n+# define functions and variables declared in corresponding .h files is\n+# incorrect.\n+HEADER_MODULE_PATHS = [\n+    'interfaces/'\n+]\n+\n def module_name(path):\n     if path in MAPPING:\n         path = MAPPING[path]\n+    if any(path.startswith(dirpath) for dirpath in HEADER_MODULE_PATHS):\n+        return path\n     if path.endswith(\".h\"):\n         return path[:-2]\n     if path.endswith(\".c\"):"
      }
    ]
  },
  {
    "sha": "1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTA2YTZmZGU0YmZkZTMxYTE2ZGU0NWU0Y2M4NGVkNWRhMDVjNWE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-08T18:37:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of uiInterface.LoadWallet in wallet code\n\nThis also changes the uiInterface.LoadWallet signal argument type from\nshared_ptr<CWallet> to unique_ptr<interfaces::Wallet> because CWallet is an\ninternal wallet class that shouldn't be used in non-wallet code (and also can't\nbe passed across process boundaries).\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "7d8168d42ef198f19f5f200833d22c77a6b0c86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d8168d42ef198f19f5f200833d22c77a6b0c86d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "318f41fb2cae0a46b4e4be49156562b8ed640f0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/318f41fb2cae0a46b4e4be49156562b8ed640f0c"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a2418e479356f970b6b0a052b3732cb890e7fa68",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -562,8 +562,6 @@ bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n-  $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_UTIL) \\"
      },
      {
        "sha": "77fb416b9c6bdde3cf0bb533e108f5dd2e21b038",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -37,8 +37,6 @@ nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n-  $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\"
      },
      {
        "sha": "725b485e51e2991ad49f87a6999a61b09a401288",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <interfaces/wallet.h>\n #include <net.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -251,6 +252,7 @@ class ChainImpl : public Chain\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }\n     void initError(const std::string& message) override { InitError(message); }\n+    void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n };\n \n } // namespace"
      },
      {
        "sha": "116656fef452608f3b56b57cd7bd78f78de0cff9",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -24,6 +24,8 @@ struct FeeCalculation;\n \n namespace interfaces {\n \n+class Wallet;\n+\n //! Interface for giving wallet processes access to blockchain state.\n class Chain\n {\n@@ -187,6 +189,9 @@ class Chain\n \n     //! Send init error.\n     virtual void initError(const std::string& message) = 0;\n+\n+    //! Send wallet load notification to the GUI.\n+    virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "6f7dce0c24686eaa7014e16014d42facc1f39894",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -275,7 +275,7 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n-        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); }));\n+        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::unique_ptr<Wallet>& wallet) { fn(std::move(wallet)); }));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {"
      },
      {
        "sha": "16ab24686b11799c7268e9cfa70b7da51be04463",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -52,7 +52,7 @@ void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_s\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }\n-void CClientUIInterface::LoadWallet(std::shared_ptr<CWallet> wallet) { return g_ui_signals.LoadWallet(wallet); }\n+void CClientUIInterface::LoadWallet(std::unique_ptr<interfaces::Wallet>& wallet) { return g_ui_signals.LoadWallet(wallet); }\n void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }\n void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }\n void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }"
      },
      {
        "sha": "f1aebce3bb48a518fa7fe457816f0d06738f222f",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -11,14 +11,17 @@\n #include <stdint.h>\n #include <string>\n \n-class CWallet;\n class CBlockIndex;\n namespace boost {\n namespace signals2 {\n class connection;\n }\n } // namespace boost\n \n+namespace interfaces {\n+class Wallet;\n+} // namespace interfaces\n+\n /** General change type (added, updated, removed). */\n enum ChangeType\n {\n@@ -102,7 +105,7 @@ class CClientUIInterface\n     ADD_SIGNALS_DECL_WRAPPER(NotifyAlertChanged, void, );\n \n     /** A wallet has been loaded. */\n-    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::shared_ptr<CWallet> wallet);\n+    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::unique_ptr<interfaces::Wallet>& wallet);\n \n     /**\n      * Show progress e.g. for verifychain."
      },
      {
        "sha": "3d64adec53e64a76dd69a8140e0621d0d217009c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -12,6 +12,7 @@\n #include <consensus/validation.h>\n #include <fs.h>\n #include <interfaces/chain.h>\n+#include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n #include <keystore.h>\n@@ -4391,7 +4392,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    uiInterface.LoadWallet(walletInstance);\n+    chain.loadWallet(interfaces::MakeWallet(walletInstance));\n \n     // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.\n     RegisterValidationInterface(walletInstance.get());"
      }
    ]
  },
  {
    "sha": "a1df1b48a80bf122efa73677ff72577ec0103a3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWRmMWI0OGE4MGJmMTIyZWZhNzM2NzdmZjcyNTc3ZWMwMTAzYTNi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-07-10T19:48:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of IsInitialBlockDownload in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "5e086560149e2d871a38d882dcc784f264b103fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e086560149e2d871a38d882dcc784f264b103fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1df1b48a80bf122efa73677ff72577ec0103a3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb634e73da99e80b6f17918549351b2419611c71",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "patch": "@@ -248,6 +248,7 @@ class ChainImpl : public Chain\n     CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n+    bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }"
      },
      {
        "sha": "60f8570e3666a22cc2456a13e8929d504b493646",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "patch": "@@ -178,6 +178,9 @@ class Chain\n     //! Check if p2p enabled.\n     virtual bool p2pEnabled() = 0;\n \n+    // Check if in IBD.\n+    virtual bool isInitialBlockDownload() = 0;\n+\n     //! Get adjusted time.\n     virtual int64_t getAdjustedTime() = 0;\n "
      },
      {
        "sha": "a30df9f037dad807ec71510c512e41dbd68ed722",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "patch": "@@ -3889,7 +3889,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             }.ToString());\n     }\n \n-    if (IsInitialBlockDownload()) {\n+    if (pwallet->chain().isInitialBlockDownload()) {\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n     }\n "
      }
    ]
  },
  {
    "sha": "f7efd87c8fb49f82e268a95e989909d453500e2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2VmZDg3YzhmYjQ5ZjgyZTI2OGE5NWU5ODk5MDlkNDUzNTAwZTJi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-01T22:35:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Change brace formatting\n\nSuggested https://github.com/bitcoin/bitcoin/pull/15288#pullrequestreview-197915100",
      "tree": {
        "sha": "2299bb49eccb96210001211f8bca8031d1904ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2299bb49eccb96210001211f8bca8031d1904ce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7efd87c8fb49f82e268a95e989909d453500e2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7efd87c8fb49f82e268a95e989909d453500e2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7efd87c8fb49f82e268a95e989909d453500e2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7efd87c8fb49f82e268a95e989909d453500e2b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1df1b48a80bf122efa73677ff72577ec0103a3b"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 23,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b8d5c9d0e11b75e1cb1c992a8f578ababf1e1fe1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f7efd87c8fb49f82e268a95e989909d453500e2b",
        "patch": "@@ -157,8 +157,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n-        if (fRescan && pwallet->chain().getPruneMode())\n+        if (fRescan && pwallet->chain().getPruneMode()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+        }\n \n         if (fRescan && !reserver.reserve()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n@@ -313,8 +314,9 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && pwallet->chain().getPruneMode())\n+    if (fRescan && pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (fRescan && !reserver.reserve()) {\n@@ -501,8 +503,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && pwallet->chain().getPruneMode())\n+    if (fRescan && pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (fRescan && !reserver.reserve()) {\n@@ -562,8 +565,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if (pwallet->chain().getPruneMode())\n+    if (pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (!reserver.reserve()) {"
      },
      {
        "sha": "2e1fb50e70baca191bcb610cefb6089409e73d8f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f7efd87c8fb49f82e268a95e989909d453500e2b",
        "patch": "@@ -628,8 +628,9 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n@@ -693,8 +694,9 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         for (const CTxOut& txout : wtx.tx->vout)\n         {\n@@ -1078,8 +1080,9 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         int nDepth = wtx.GetDepthInMainChain(locked_chain);\n         if (nDepth < nMinDepth)\n@@ -2690,8 +2693,9 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n              }.ToString()\n             );\n \n-    if (!pwallet->chain().p2pEnabled())\n+    if (!pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "daf99ad341e3ef195a9a2fd9a4b108f77e4c8ec6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f7efd87c8fb49f82e268a95e989909d453500e2b",
        "patch": "@@ -2073,8 +2073,9 @@ bool CWalletTx::InMempool() const\n bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const\n {\n     // Quick answer in most cases\n-    if (!locked_chain.checkFinalTx(*tx))\n+    if (!locked_chain.checkFinalTx(*tx)) {\n         return false;\n+    }\n     int nDepth = GetDepthInMainChain(locked_chain);\n     if (nDepth >= 1)\n         return true;\n@@ -2129,8 +2130,9 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::\n     for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(locked_chain))\n+        if (wtx.RelayWalletTransaction(locked_chain)) {\n             result.push_back(wtx.GetHash());\n+        }\n     }\n     return result;\n }\n@@ -2319,8 +2321,9 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         const uint256& wtxid = entry.first;\n         const CWalletTx* pcoin = &entry.second;\n \n-        if (!locked_chain.checkFinalTx(*pcoin->tx))\n+        if (!locked_chain.checkFinalTx(*pcoin->tx)) {\n             continue;\n+        }\n \n         if (pcoin->IsImmatureCoinBase(locked_chain))\n             continue;\n@@ -4331,8 +4334,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (chain.getPruneMode())\n-        {\n+        if (chain.getPruneMode()) {\n             int block_height = *tip_height;\n             while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {\n                 --block_height;"
      }
    ]
  }
]