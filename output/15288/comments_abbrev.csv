DrahtBot,2019-01-30T03:38:08Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15491](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15491.html) (wallet: Improve log output for errors durin",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-458800007,458800007,
jnewbery,2019-01-30T15:41:11Z,"Agree with @hebasto that the indentations should be fixed since those are misaligned by this PR. Not sure about fixing `if` braces - I would expect that it's contributors choice whether they fix existing style in lines they touch, but they shouldn't be obligated.\n\n`git diff -U0 5ff7dc424~..  | ./contrib/devtools/clang-format-diff.py -p1 -i -v` throws up a couple more style suggestions if you'r",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-458991057,458991057,
ryanofsky,2019-01-30T16:11:37Z,"> I'll wait for Russ's response to the style comments before doing a full review.\n\nWill look more closely but probably I'll fix whitespace in the existing commits and add braces in a new commit.",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-459003372,459003372,
jnewbery,2019-01-30T16:49:05Z,Obvious Concept ACK,https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-459018566,459018566,
Empact,2019-01-30T22:01:45Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-459127275,459127275,
hebasto,2019-01-30T22:57:55Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-459144193,459144193,
jonasschnelli,2019-02-07T06:23:31Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-461301810,461301810,
jnewbery,2019-02-25T21:42:20Z,utACK https://github.com/bitcoin/bitcoin/commit/bb0f2b04fd2b03245a19aef298ec5e83a8d20481 if you revert the `RelayWalletTransaction()` change.,https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-467194904,467194904,
jnewbery,2019-02-25T22:44:07Z,"utACK https://github.com/bitcoin/bitcoin/commit/19afbb7e4a840404b992851612583fb2c3793e56 (only reviewed force-push diffs).\n\nSorry for pushing you in the direction of unnecessary tidy-ups! We can tackle those later.",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-467214629,467214629,
jnewbery,2019-02-27T16:29:44Z,"> a preference for dropping [6f836c0](https://github.com/bitcoin/bitcoin/commit/6f836c04d13bd49bcddff570c73820777a56f419) `Remove use of generateBlocks in wallet code` and rebasing on #15492 which removes `generate` RPC.\n\nMy previous thoughts were that this PR could go in first and we could then remove the generate method, but I agree that removing `generate` first is cleaner due to the makefi",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-467931775,467931775,
Sjors,2019-02-27T18:38:41Z,"@ryanofsky wrote in #15492:\n\n> I think there is some confusion in the #15288 discussion that `generateBlocks` method requires additional makefile changes that other `Chain` methods don't require, but this is not true. The only reason makefile changes are part of the `generateBlocks` commit is because that commit comes first, so all the later commits just piggyback off of it.\n\nSounds like i",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-467979727,467979727,
jnewbery,2019-02-27T22:29:37Z,"Since the makefile changes are required with or without the removal of generate, I'm reverting to my previous opinion: we should aim to get this in first, and then tidy up the API later (by removing generate amongst other things).",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468056792,468056792,
Sjors,2019-03-02T15:18:31Z,"re f7efd87: is there a particular reason now why the `Makefile` changes are in `Remove uses of g_connman in wallet code`? Otherwise it makes more sense to me to have a separate commit for that. From inline discussion:\n\n>> This causes RPC code to get entangled with pure wallet code, which adds a dependency on UniValue for the wallet and causes the need to change Makefile.\n\n>This isn't reall",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468929514,468929514,
ryanofsky,2019-03-02T17:11:08Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468929514\n\n> Otherwise it makes more sense to me to have a separate commit for that. \n\nI disagree with this. I think when you add a new dependency in the source, you should be adding the new dependency in the build at the same time. If you add one dependency in two commits, history is harder to understand than it needs to be an",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468939538,468939538,
jnewbery,2019-03-02T18:02:17Z,"utACK f7efd87c8fb49f82e268a95e989909d453500e2b (verified changes in the force push only).\n\n@ryanofsky - I edited your last comment by putting the build output in a collapsible `<details>` tag to make this issue easier to follow. I hope you don't mind!\n\nI think this should be high priority for review/merge now that the v0.18 branch is split. Large PRs that touch a lot of files are best merg",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468944483,468944483,
Sjors,2019-03-02T18:15:20Z,"Ok, that's a good explanation of why it's in that particular `g_connman` commit. I'd love to see the include stuff get cleaned up one day, but that's out of scope here. \n\n@jnewbery TIL you can collapse stuff <details>Lorem ipsum</details>\n\n\nutACK f7efd87",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468945734,468945734,
jnewbery,2019-03-02T18:18:36Z,"> you can collapse stuff. How does that work?\n\nPut it in a `<details></details>` tag (with optional `<summary>Click me!</summary>`, like this:\n\n<details><summary>Click me!</summary>\n\n![img](https://user-images.githubusercontent.com/1063656/53685808-8d79db80-3ced-11e9-9a18-8293b7c41f3e.jpg)\n\n</details>",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468946028,468946028,
ryanofsky,2019-03-02T18:45:42Z,"> I'd love to see the include stuff get cleaned up one day, but that's out of scope here.\n\nJust in case anybody is interested in following up on this, the main thing we need if we want predictable link dependencies is to remove circular dependencies:\n\nhttps://github.com/bitcoin/bitcoin/blob/46eb2755d456ca736c1cb7a0922bfece63c5151e/test/lint/lint-circular-dependencies.sh#L11-L42\n\nThe ci",https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-468948415,468948415,
ryanofsky,2019-03-05T13:29:01Z,Could remove this PR from the high priority list https://github.com/bitcoin/bitcoin/projects/8 (and maybe replace it with #10973),https://github.com/bitcoin/bitcoin/pull/15288#issuecomment-469679453,469679453,
hebasto,2019-01-30T06:01:45Z,Is it required to break the line?,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252125852,252125852,src/interfaces/node.cpp
hebasto,2019-01-30T06:10:25Z,"```\n    if (!locked_chain.checkFinalTx(*tx)) {\n        return false;\n    }\n```\nor\n```\n    if (!locked_chain.checkFinalTx(*tx)) return false;\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252127175,252127175,src/wallet/wallet.cpp
hebasto,2019-01-30T06:13:38Z,"```\n        if (wtx.RelayWalletTransaction(locked_chain)) {\n            result.push_back(wtx.GetHash());\n        }\n```\nor\n```\n        if (wtx.RelayWalletTransaction(locked_chain)) result.push_back(wtx.GetHash());\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252127661,252127661,src/wallet/wallet.cpp
hebasto,2019-01-30T06:15:25Z,"```\n        if (!locked_chain.checkFinalTx(*pcoin->tx)) {\n            continue;\n        }\n```\nor\n```\n        if (!locked_chain.checkFinalTx(*pcoin->tx)) continue;\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252127946,252127946,src/wallet/wallet.cpp
hebasto,2019-01-30T06:20:02Z,"Indentation:\n```\n            chain.initWarning(AmountHighWarn(""-mintxfee"") + "" "" +\n                              _(""This is the minimum transaction fee you pay on every transaction.""));\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252128843,252128843,src/wallet/wallet.cpp
hebasto,2019-01-30T06:20:50Z,"Indentation:\n```\n            chain.initWarning(AmountHighWarn(""-fallbackfee"") + "" "" +\n                              _(""This is the transaction fee you may pay when fee estimates are not available.""));\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252128990,252128990,src/wallet/wallet.cpp
hebasto,2019-01-30T06:21:40Z,"Indentation:\n```\n            chain.initWarning(AmountHighWarn(""-discardfee"") + "" "" +\n                              _(""This is the transaction fee you may discard if change is smaller than dust at this level""));\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252129142,252129142,src/wallet/wallet.cpp
hebasto,2019-01-30T06:22:54Z,"Indentation:\n```\n            chain.initWarning(AmountHighWarn(""-paytxfee"") + "" "" +\n                              _(""This is the transaction fee you will pay if you send a transaction.""));\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252129340,252129340,src/wallet/wallet.cpp
hebasto,2019-01-30T06:27:37Z,"```\n        if (fRescan && pwallet->chain().getPruneMode()) {\n            throw JSONRPCError(RPC_WALLET_ERROR, ""Rescan is disabled in pruned mode"");\n        }\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130091,252130091,src/wallet/rpcdump.cpp
hebasto,2019-01-30T06:28:09Z,"```\n    if (fRescan && pwallet->chain().getPruneMode()) {\n        throw JSONRPCError(RPC_WALLET_ERROR, ""Rescan is disabled in pruned mode"");\n    }\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130168,252130168,src/wallet/rpcdump.cpp
hebasto,2019-01-30T06:28:36Z,"```\n    if (fRescan && pwallet->chain().getPruneMode()) {\n        throw JSONRPCError(RPC_WALLET_ERROR, ""Rescan is disabled in pruned mode"");\n    }\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130246,252130246,src/wallet/rpcdump.cpp
hebasto,2019-01-30T06:29:14Z,"```\n    if (pwallet->chain().getPruneMode()) {\n        throw JSONRPCError(RPC_WALLET_ERROR, ""Importing wallets is disabled in pruned mode"");\n    }\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130370,252130370,src/wallet/rpcdump.cpp
hebasto,2019-01-30T06:30:26Z,"```\n        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n            continue;\n        }\n```\nor\n```\n        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) continue;\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130561,252130561,src/wallet/rpcwallet.cpp
hebasto,2019-01-30T06:31:10Z,"```\n        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n            continue;\n        }\n```\nor\n```\n        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) continue;\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130679,252130679,src/wallet/rpcwallet.cpp
hebasto,2019-01-30T06:32:12Z,"```\n        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx)) {\n            continue;\n        }\n```\nor\n```\n        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx)) continue;\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130825,252130825,src/wallet/rpcwallet.cpp
hebasto,2019-01-30T06:32:49Z,"```\n    if (!pwallet->chain().p2pEnabled()) {\n        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, ""Error: Peer-to-peer functionality missing or disabled"");\n    }\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252130921,252130921,src/wallet/rpcwallet.cpp
hebasto,2019-01-30T06:36:17Z,"Indentation:\n```\n            chain.initWarning(strprintf(_(""Error reading %s! All keys read correctly, but transaction data""\n                                          "" or address book entries might be missing or incorrect.""),\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252131446,252131446,src/wallet/wallet.cpp
hebasto,2019-01-30T06:39:02Z,"Brace on the same line:\n```\n        if (chain.getPruneMode()) {\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252131841,252131841,src/wallet/wallet.cpp
Empact,2019-01-30T19:38:53Z,unnecessary given this is declared in the header,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252408008,252408008,src/interfaces/chain.cpp
Empact,2019-01-30T19:50:36Z,nit: IMO we could do without this comment,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252412378,252412378,src/interfaces/chain.h
Empact,2019-01-30T19:54:14Z,Could return the status string and thus avoid the include / simplify the interface.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252413788,252413788,src/interfaces/chain.h
Empact,2019-01-30T20:04:33Z,Could you explain these? Compiles successfully with just the EVENT_LIBS on my machine.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252417273,252417273,src/Makefile.bench.include
Empact,2019-01-30T21:44:51Z,note: last use removed in d97fe2016cc7739929aac5c44de5037163b17ad0,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252450316,252450316,src/wallet/wallet.h
Empact,2019-01-30T21:54:43Z,nit: these read better if you lead with the param name comment IMO,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252453738,252453738,src/interfaces/chain.cpp
Empact,2019-01-30T21:58:45Z,Should this be in `interfaces/node`? That's where other `::uiInterface` access is.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252455116,252455116,src/interfaces/chain.cpp
Empact,2019-01-30T22:01:12Z,Should this be in `interfaces/node`? That's where other `::uiInterface` access is.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252455869,252455869,src/interfaces/chain.cpp
ryanofsky,2019-02-03T21:29:44Z,"> Could you explain these? Compiles successfully with just the EVENT_LIBS on my machine.\n\nI didn't take the time go back and see why these were needed, but I dropped the wallet and server lines. We have circular dependencies so the need to repeat libraries on the linker command line comes and goes as dependencies between individual object files change: https://github.com/bitcoin/bitcoin/pull/1",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253320373,253320373,src/Makefile.bench.include
ryanofsky,2019-02-03T21:38:06Z,"> unnecessary given this is declared in the header\n\nThis was added by IWYU because `CReserveScript` is only forward declared in the headers included here, and defined in a different header. In theory this allows the other headers to change without breaking this file. I don't think [IWYU rationale](https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/WhyIWYU.md) is comp",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253320689,253320689,src/interfaces/chain.cpp
ryanofsky,2019-02-03T21:42:42Z,"> nit: these read better if you lead with the param name comment IMO\n\nI don't think there is anything to be done here. I just want to stick to one style, and would be happy with whatever style people like. If you want to see changes related to this, I'd suggest opening a PR adding a recommendation to the developer guide so the project could converge on one style.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253320864,253320864,src/interfaces/chain.cpp
ryanofsky,2019-02-03T21:48:30Z,"> Should this be in interfaces/node? That's where other ::uiInterface access is.\n\nIn #10102 there are three processes: `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui`. `interfaces::Node` is used by the `bitcoin-gui` process to control the `bitcoin-node` process, and `interfaces::Chain` is used by the `bitcoin-wallet` process to interact with the `bitcoin-node` process (mainly by receiving ",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253321096,253321096,src/interfaces/chain.cpp
ryanofsky,2019-02-03T22:16:25Z,"> Should this be in interfaces/node? That's where other ::uiInterface access is.\n\nPrevious comment https://github.com/bitcoin/bitcoin/pull/15288#discussion_r252455869 about `uiInterface` also applies here, but in the future, the `initMessage`, `initWarning`, `initError`, and `loadWallet` methods will likely move to a new interface (maybe `interfaces::WalletClient` or `interfaces::Ui`) to allow",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322273,253322273,src/interfaces/chain.cpp
ryanofsky,2019-02-03T22:18:35Z,"> nit: IMO we could do without this comment\n\nNot clear what change is being asked for. It would seem inconsistent to delete this comment and keep other comments around it.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322347,253322347,src/interfaces/chain.h
ryanofsky,2019-02-03T22:23:43Z,">  Could return the status string and thus avoid the include / simplify the interface.\n\nInclude could be removed with a forward declaration in the future. String would make the interface more cumbersome and generate JSONRPC error text in non-RPC code.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322575,253322575,src/interfaces/chain.h
ryanofsky,2019-02-03T22:24:01Z,reformatted,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322593,253322593,src/interfaces/node.cpp
ryanofsky,2019-02-03T22:26:07Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322670,253322670,src/wallet/rpcdump.cpp
ryanofsky,2019-02-03T22:26:16Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322675,253322675,src/wallet/rpcdump.cpp
ryanofsky,2019-02-03T22:26:21Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322682,253322682,src/wallet/rpcdump.cpp
ryanofsky,2019-02-03T22:26:28Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322691,253322691,src/wallet/rpcdump.cpp
ryanofsky,2019-02-03T22:27:49Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322766,253322766,src/wallet/rpcwallet.cpp
ryanofsky,2019-02-03T22:27:56Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322774,253322774,src/wallet/rpcwallet.cpp
ryanofsky,2019-02-03T22:28:05Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322781,253322781,src/wallet/rpcwallet.cpp
ryanofsky,2019-02-03T22:28:37Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322816,253322816,src/wallet/rpcwallet.cpp
ryanofsky,2019-02-03T22:28:55Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322836,253322836,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:29:57Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322878,253322878,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:30:05Z,added braces,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322891,253322891,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:30:53Z,moved brace,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322923,253322923,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:32:01Z,added space,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253322985,253322985,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:32:29Z,added space,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253323007,253323007,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:32:57Z,added space,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253323037,253323037,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:33:09Z,added space,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253323059,253323059,src/wallet/wallet.cpp
ryanofsky,2019-02-03T22:33:35Z,added space,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253323073,253323073,src/wallet/wallet.cpp
dongcarl,2019-02-05T17:52:39Z,Aside: Perhaps IWYU can be included in `doc/developer-notes.md`,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253975914,253975914,src/interfaces/chain.cpp
MarcoFalke,2019-02-05T17:59:44Z,"Agree, and it should come with steps to install for Bitcoin Core.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253978656,253978656,src/interfaces/chain.cpp
ryanofsky,2019-02-05T19:06:35Z,"> Agree, and it should come with steps to install for Bitcoin Core.\n\nIt's not very convenient, but here are steps I've followed previously: https://github.com/bitcoin/bitcoin/pull/11878#issuecomment-351610027",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254004123,254004123,src/interfaces/chain.cpp
jnewbery,2019-02-06T15:54:36Z,"I don't have an opinion on whether the comment should be before or after the parameter, but agree with Russ that this PR should stick to one style. A future PR could update the developer guide if we want to converge to a single style",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254329944,254329944,src/interfaces/chain.cpp
jnewbery,2019-02-06T15:57:37Z,"Suggestion: consider renaming this interface function `submitToMemoryPool()`. The wallet cannot itself accept a transaction to the memory pool, it can only submit it to the node, which will decide whether to accept the tx. I think changing the naming reinforces the division between wallet and node.\n\nInterested to hear your thoughts on this. If you agree, we can push the naming change to a futu",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254331334,254331334,src/interfaces/chain.h
jnewbery,2019-02-06T16:14:45Z,"I have a slight concern about the `maxTxFee` being set by the node instead of the wallet here, but that's more of a long-term design question (and is inherited from having a single `maxTxFee` for both the raw transaction RPCs and wallet RPCs). This PR simply moves the existing function calls to the interface classes. The API can be improved later.\n\nLonger term, the single `-maxtxfee` option sh",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254339021,254339021,src/interfaces/chain.cpp
jnewbery,2019-02-06T19:30:59Z,"Are we ever expecting `g_conman` to be false? (except perhaps in the unit tests?)\n\nIn any case, you could make this a bit tidier with:\n\n```\nif (g_conman == nullptr) return false\n...\n```",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254417716,254417716,src/interfaces/chain.cpp
jnewbery,2019-02-06T19:33:19Z,"could just:\n\n`return pwallet->chain().relayTransaction(GetHash())`\n\nhere\n\nEDIT: in fact, after ff0c6daf3aee45cc806178a3737f64693e9f0f53, you could just change the conditional above to:\n\n```\nif (InMempool() || AcceptToMemoryPool(locked_chain, state) && pwallet->chain().p2pEnabled()) {\n    pwallet->chain().relayTransaction(GetHash());\n}\n```\n\nand drop the return value from",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254418583,254418583,src/wallet/wallet.cpp
jnewbery,2019-02-06T20:54:08Z,The return value of `errString` is unused. A future PR could rename to `dummy_string` or add a comment. Not required for this move-only commit.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254446784,254446784,src/interfaces/chain.cpp
jnewbery,2019-02-06T21:01:42Z,Wow. This should be moved into `rpc/util` (in a future PR). (also comment is outdated!),https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254449444,254449444,src/rpc/mining.h
jnewbery,2019-02-06T21:13:46Z,nit: can you name this function `mempoolMinFee()`?,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254453488,254453488,src/interfaces/chain.cpp
jnewbery,2019-02-06T21:38:31Z,"nit: change to ""Send wallet load notification to the GUI.""",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254462181,254462181,src/interfaces/chain.h
jnewbery,2019-02-06T21:46:31Z,It's not obvious to me why this (and associated changes) is necessary. Can you perhaps add commentary to the commit message why you're changing the function signature here?,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254464908,254464908,src/interfaces/node.cpp
ryanofsky,2019-02-06T22:15:57Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254464908\n\n> It's not obvious to me why this (and associated changes) is necessary\n\nI'll add information to the commit message, but just to give some feedback now, the idea is that in #10102 the `CWallet` class is internal to the `bitcoin-wallet` process. The other `bitcoin-node` and `bitcoin-gui` processes don't use `CWallet` a",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254474385,254474385,src/interfaces/node.cpp
ryanofsky,2019-02-07T16:10:42Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254418583\n\n> could just\n\nNice suggestions, they do make things clearer and I think I applied them all.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254750583,254750583,src/wallet/wallet.cpp
ryanofsky,2019-02-07T16:11:00Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254339021\n\nI replaced ::maxTxFee with an absurd_fee parameter here to help with goal of having separate settings. I think this also makes the current behavior more clear.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254750723,254750723,src/interfaces/chain.cpp
ryanofsky,2019-02-07T16:11:24Z,"re: https://github.com/bitcoin/bitcoin/pull/15288/files#r254417716\n\nIn commit ""Remove use of g_connman / PushInventory in wallet code"" (9cd8d6a90df628ca805d0cfa5569d50a666674c9)\n\n> Are we ever expecting `g_conman` to be false? (except perhaps in the unit tests?)\n\nI don't think so, but it does seem reasonable for a test to leave g_connman set to null.\n\nThis is just a cut and paste o",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254750915,254750915,src/interfaces/chain.cpp
ryanofsky,2019-02-07T16:11:31Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254446784\n\n> The return value of `errString` is unused. A future PR could rename to `dummy_string` or add a comment. Not required for this move-only commit.\n\nApplied suggestion here. This wasn't 100% move only anyway, because size_t/auto change (I think made in response to practicalswift signed/unsigned warnings).",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254750968,254750968,src/interfaces/chain.cpp
ryanofsky,2019-02-07T16:11:42Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254453488\n\n> nit: can you name this function `mempoolMinFee()`?\n\nRenamed",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254751037,254751037,src/interfaces/chain.cpp
ryanofsky,2019-02-07T16:11:47Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254331334\n\n> Suggestion: consider renaming this interface function `submitToMemoryPool()`\n\nMakes sense, changed.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254751088,254751088,src/interfaces/chain.h
ryanofsky,2019-02-07T16:11:53Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254462181\n\n> nit: change to ""Send wallet load notification to the GUI.""\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254751139,254751139,src/interfaces/chain.h
ryanofsky,2019-02-07T16:11:58Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254464908\n\n> Can you perhaps add commentary to the commit message why you're changing the function signature here?\n\nAdded description in f40de055f0bbed97d0a4e1dddd2413be672bf717",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254751182,254751182,src/interfaces/node.cpp
ryanofsky,2019-02-07T16:12:02Z,"https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254449444\n\n> Wow. This should be moved into `rpc/util` (in a future PR). (also comment is outdated!)\n\nDone in #15373.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254751213,254751213,src/rpc/mining.h
MarcoFalke,2019-02-09T14:23:32Z,"This is also used for `::mapBlockIndex`, so can not be removed yet?",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r255300183,255300183,src/interfaces/wallet.cpp
ryanofsky,2019-02-09T21:20:03Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r255300183\n\n> This is also used for `::mapBlockIndex`, so can not be removed yet?\n\nSeems like a silent merge conflict with #15321 (this PR has not been rebased since that was merged).",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r255314043,255314043,src/interfaces/wallet.cpp
jnewbery,2019-02-12T16:30:05Z,"My previous comment wasn't clear. I think this would be even better as:\n\n```\nif ((InMempool() || AcceptToMemoryPool(locked_chain, state) && pwallet->chain().p2pEnabled()) {\n    pwallet->WalletLogPrintf(""Relaying wtx %s\n"", GetHash().ToString());\n    return True;\n}\n```\n\nI think the existing behaviour, where `Relaying wtx...` is logged even when p2p is not enabled and the tx is not",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r256036330,256036330,src/wallet/wallet.cpp
ryanofsky,2019-02-25T21:02:55Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r256036330\n\n> I think this would be even better as\n\nApplied your suggestion in commit ""Remove use of g_connman / PushInventory in wallet code"" (ae6b51043e46e80c0fe89628776de48274d7c1b2)\n\nI think it's still not a change in behavior, unless it really is possible for `g_connman` to be null at this point. Even if there is a chang",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260016631,260016631,src/wallet/wallet.cpp
jnewbery,2019-02-25T21:41:06Z,"Your parens are slightly different from the existing precedence.\n\nWhat you have in this PR:\n\n```\n        if (InMempool() || (AcceptToMemoryPool(locked_chain, state) && pwallet->chain().p2pEnabled())) {\n```\n\ninstead of:\n\n```\n        if ((InMempool() || AcceptToMemoryPool(locked_chain, state)) && pwallet->chain().p2pEnabled()) {\n```\n\nI suggest we revert the most recent ch",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260030584,260030584,src/wallet/wallet.cpp
ryanofsky,2019-02-25T22:15:40Z,"https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260030584\n\n> Your parens are slightly different from the existing precedence\n\nWow, not good. Reverted.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260042724,260042724,src/wallet/wallet.cpp
Sjors,2019-02-27T09:18:59Z,"This causes RPC code to get entangled with pure wallet code, which adds a dependency on UniValue for the wallet and causes the need to change Makefile.\n\n`generateBlocks` itself should be split between:\n* `rpc/mining.cpp`: check the input parameters, loop over the number of blocks requested, request a block hash, convert the result(s) to JSON\n* `interfaces/chain.cpp`  construct block and re",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260655451,260655451,src/wallet/rpcwallet.cpp
Sjors,2019-02-27T10:07:59Z,"There should be no need to communicate with the node for pure utility functions like this, but we can worry about that later. Maybe we need a `Utility` interface? Or `CTransaction` should just have a `->VirtualSize()` method.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260675286,260675286,src/wallet/feebumper.cpp
Sjors,2019-02-27T10:18:04Z,"Call me `enum` fanboy, but I like to avoid using strings when enums suffice, and let the RPC & GUI deal with rendering them as strings. So agree with keeping it as is.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260679620,260679620,src/interfaces/chain.h
Sjors,2019-02-27T10:49:26Z,Note to other reviewers: `p2pEnabled()` is called 1835020e98259568e5e754a7930eb7e0995c7b34 which Github incorrectly shows as earlier.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260692216,260692216,src/interfaces/chain.cpp
Sjors,2019-02-27T11:00:01Z,"Nit: ""below the amount specified by absurd_fee""",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260696227,260696227,src/interfaces/chain.h
Sjors,2019-02-27T11:10:59Z,"From discussion in commit `Remove use of AcceptToMemoryPool in wallet code` between you and @jnewbery: this `Relaying wtx` log message is displayed even if `!p2pEnabled()`. I'm fine with moving the log message down, or adding a TODO, or just ignoring this.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260700480,260700480,src/wallet/wallet.cpp
Sjors,2019-02-27T11:13:20Z,nit: could be a separate commit,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260701216,260701216,contrib/devtools/circular-dependencies.py
Sjors,2019-02-27T11:27:08Z,"To make this bouncing around of unique pointers easier to follow (another commit could) move `std::string name = wallet->getWalletName();` all the way up in `WalletModel* WalletController::getOrCreateWallet`, and then add a comment that this is the last time it needs the unique pointer `std::unique_ptr<interfaces::Wallet> wallet`.\n\nAlternatively, but that's too much behavior change for this PR",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260706613,260706613,src/ui_interface.h
ryanofsky,2019-02-28T06:38:43Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260701216\n\nIn commit ""Remove use of uiInterface.LoadWallet in wallet code"" (1e5f7a174c264cfe9e65a7206acc24f43d9255d7)\n\n> nit: could be a separate commit\n\nMoved to 318f41fb2cae0a46b4e4be49156562b8ed640f0c.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261062410,261062410,contrib/devtools/circular-dependencies.py
ryanofsky,2019-02-28T06:39:08Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260696227\n\n> Nit: ""below the amount specified by absurd_fee""\n\nThanks, fixed.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261062488,261062488,src/interfaces/chain.h
ryanofsky,2019-02-28T06:39:37Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260706613\n\nIn commit ""Remove use of uiInterface.LoadWallet in wallet code"" (1e5f7a174c264cfe9e65a7206acc24f43d9255d7)\n\n> To make this bouncing around of unique pointers easier to follow (another commit could) move `std::string name = wallet->getWalletName();` all the way up in `WalletModel* WalletController::getOrCreateWallet`, ",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261062566,261062566,src/ui_interface.h
ryanofsky,2019-02-28T06:39:44Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260675286\n\nIn commit ""Remove uses of GetVirtualTransactionSize in wallet code"" (428e6c422c21f35ff991823697a373dfa5cb4e4f)\n\n> There should be no need to communicate with the node for pure utility functions like this, but we can worry about that later. Maybe we need a `Utility` interface? Or `CTransaction` should just have a `->Vi",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261062589,261062589,src/wallet/feebumper.cpp
ryanofsky,2019-02-28T06:39:53Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260655451\n\nIn commit ""Remove use of generateBlocks in wallet code"" (6f836c04d13bd49bcddff570c73820777a56f419)\n\nDropped this commit as suggested to avoid unnecessary conflicts with #15492.\n\n> This causes RPC code to get entangled with pure wallet code, which adds a dependency on UniValue for the wallet and causes the need to ",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261062613,261062613,src/wallet/rpcwallet.cpp
ryanofsky,2019-02-28T06:42:59Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r260700480\n\n> I'm fine with moving the log message down, or adding a TODO, or just ignoring this.\n\nI'm happy to go with whatever you and John want to see here. Since you're ok with the status quo, I'm going to stick with this, since it follows the last suggestion from John.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261063266,261063266,src/wallet/wallet.cpp
jnewbery,2019-03-02T17:56:34Z,Leave it. Tidy ups can come in a later PR.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261835599,261835599,src/wallet/wallet.cpp
promag,2019-03-03T18:45:27Z,"Thanks for the explanation.\n\n> the `initMessage`, `initWarning`, `initError`, and `loadWallet` methods will likely move to a new interface\n\nI though it could be `interfaces::Wallet`, the `CreateWalletFromFile` caller would get the wallet interface asap, then request the loading etc and then signal the loading for everyone else.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261880757,261880757,src/interfaces/chain.cpp
promag,2019-03-03T18:54:53Z,I think this is fine.,https://github.com/bitcoin/bitcoin/pull/15288#discussion_r261881121,261881121,src/ui_interface.h
MarcoFalke,2019-03-04T16:34:56Z,"in commit bdc6628683\n\nCan this be done as a forward decl?",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262141149,262141149,src/interfaces/chain.h
MarcoFalke,2019-03-04T16:37:40Z,"in commit 291276f7f4:\n\nCould use `CTxMemPool::GetIter` to avoid the direct access to mapTx (which should ideally be private to the mempool)",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262142373,262142373,src/interfaces/chain.cpp
MarcoFalke,2019-03-04T16:44:51Z,"in commit cd32160af0528cc746:\n\nI didn't check if this needs a broader mempool (or main) lock (maybe for this whole function, since the mempool can remove/expire entries at will), but you are not changing this in your refactoring. So probably orthogonal to your changes. Still, I wanted to leave the comment.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262145565,262145565,src/wallet/wallet.cpp
MarcoFalke,2019-03-04T16:49:00Z,"in commit cd32160af0528cc746:\n\nAny reason to rename the variables `(set)ancestors` and types `(int)->(auto)`? Breaks `--color-moved=dimmed-zebra` and makes review harder",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262147319,262147319,src/interfaces/chain.cpp
MarcoFalke,2019-03-04T18:07:16Z,"in commit d02b34c8a8bd446c9620fe626b4379617f9a9639:\n\nCould take a const ref to `CTransactionRef` to avoid incrementing the shared ptr counter?",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262177802,262177802,src/interfaces/chain.h
MarcoFalke,2019-03-04T18:10:22Z,"in commit d02b34c8a8bd446c9620fe626b437:\n\nThe `absurd_fee` is only one case this could return false, but should never happen. There might be other cases such as descendant limits?",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262178929,262178929,src/interfaces/chain.h
ryanofsky,2019-03-04T18:25:34Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262142373\n\n> Could use CTxMemPool::GetIter to avoid the direct access to mapTx (which should ideally be private to the mempool)\n\nDone in #15531",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262184574,262184574,src/interfaces/chain.cpp
ryanofsky,2019-03-04T18:25:43Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262147319\n\n> Any reason to rename the variables (set)ancestors and types (int)->(auto)? Breaks --color-moved=dimmed-zebra and makes review harder\n\nIIRC, John asked for variable renames, and I used auto to avoid signed/unsigned conversion errors reported by practicalswift.",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262184637,262184637,src/interfaces/chain.cpp
ryanofsky,2019-03-04T18:25:49Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262141149\n\n> Can this be done as a forward decl?\n\nDone in #15531",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262184675,262184675,src/interfaces/chain.h
ryanofsky,2019-03-04T18:25:54Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262178929\n\n> The absurd_fee is only one case this could return false, but should never happen. There might be other cases such as descendant limits?\n\nUpdated comment in #15531",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262184694,262184694,src/interfaces/chain.h
ryanofsky,2019-03-04T18:25:59Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262177802\n\n> Could take a const ref to CTransactionRef to avoid incrementing the shared ptr counter?\n\nDone in #15531",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262184731,262184731,src/interfaces/chain.h
ryanofsky,2019-03-04T18:27:34Z,"re: https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262145565\n\n> I didn't check if this needs a broader mempool (or main) lock (maybe for this whole function, since the mempool can remove/expire entries at will), but you are not changing this in your refactoring. So probably orthogonal to your changes. Still, I wanted to leave the comment\n\nThis is called from coin selection, so I",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262185264,262185264,src/wallet/wallet.cpp
MarcoFalke,2019-03-04T18:44:48Z,"```diff\ndiff --git a/src/interfaces/chain.h b/src/interfaces/chain.h\nindex 60f8570e36..ef2b6607de 100644\n--- a/src/interfaces/chain.h\n+++ b/src/interfaces/chain.h\n@@ -6,7 +6,7 @@\n #define BITCOIN_INTERFACES_CHAIN_H\n \n #include <optional.h>               // For Optional and nullopt\n-#include <policy/rbf.h>             // For RBFTransactionState\n+enum class RBFTransactionState;\",https://github.com/bitcoin/bitcoin/pull/15288#discussion_r262191377,262191377,src/interfaces/chain.h
