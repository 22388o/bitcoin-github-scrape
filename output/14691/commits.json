[
  {
    "sha": "9c930190ec2c35a71d768d04285fd813d220780c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzkzMDE5MGVjMmMzNWE3MWQ3NjhkMDQyODVmZDgxM2QyMjA3ODBj",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-11-08T11:26:16Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-11-12T08:20:36Z"
      },
      "message": "[Tests] - Add giant OP_RETURN for mining large blocks and refactor large tx code",
      "tree": {
        "sha": "2388af8ef4f21a1a35a34f62c0b1ded7c17e662e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2388af8ef4f21a1a35a34f62c0b1ded7c17e662e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c930190ec2c35a71d768d04285fd813d220780c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c930190ec2c35a71d768d04285fd813d220780c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c930190ec2c35a71d768d04285fd813d220780c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c930190ec2c35a71d768d04285fd813d220780c/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11e1ac3ae08535cefbd8235a8deb6cd100bcb2b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11e1ac3ae08535cefbd8235a8deb6cd100bcb2b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11e1ac3ae08535cefbd8235a8deb6cd100bcb2b1"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 81,
      "deletions": 53
    },
    "files": [
      {
        "sha": "251591d28d536debcc51c49686ee436de978a395",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c930190ec2c35a71d768d04285fd813d220780c/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c930190ec2c35a71d768d04285fd813d220780c/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=9c930190ec2c35a71d768d04285fd813d220780c",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -19,7 +19,6 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n@@ -44,7 +43,7 @@ def run_test(self):\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n         assert(txid not in self.nodes[0].getrawmempool())"
      },
      {
        "sha": "44ef839bf3421c891a5de053dd0f54e6c76406fb",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c930190ec2c35a71d768d04285fd813d220780c/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c930190ec2c35a71d768d04285fd813d220780c/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=9c930190ec2c35a71d768d04285fd813d220780c",
        "patch": "@@ -8,7 +8,7 @@\n \n from test_framework.messages import COIN, MAX_BLOCK_BASE_SIZE\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -40,7 +40,6 @@ def run_test(self):\n         # Test `prioritisetransaction` invalid `fee_delta`\n         assert_raises_rpc_error(-1, \"JSON value is not an integer as expected\", self.nodes[0].prioritisetransaction, txid=txid, fee_delta='foo')\n \n-        self.txouts = gen_return_txouts()\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n         utxo_count = 90\n@@ -54,7 +53,7 @@ def run_test(self):\n             txids.append([])\n             start_range = i * range_size\n             end_range = start_range + range_size\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[start_range:end_range], end_range - start_range, (i+1)*base_fee)\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], utxos[start_range:end_range], end_range - start_range, (i+1)*base_fee)\n \n         # Make sure that the size of each group of transactions exceeds\n         # MAX_BLOCK_BASE_SIZE -- otherwise the test needs to be revised to create"
      },
      {
        "sha": "e5fb0c509bad1b51699cc94400aef7c086fad489",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 77,
        "deletions": 47,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c930190ec2c35a71d768d04285fd813d220780c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c930190ec2c35a71d768d04285fd813d220780c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=9c930190ec2c35a71d768d04285fd813d220780c",
        "patch": "@@ -169,6 +169,54 @@ def assert_array_result(object_array, to_match, expected, should_not_find=False)\n     if num_matched > 0 and should_not_find:\n         raise AssertionError(\"Objects were found %s\" % (str(to_match)))\n \n+\n+# OP_RETURN Splices\n+####################\n+\n+# A hex string representing 128 OP_RETURN outputs each with 512 bytes of data\n+#\n+# Serialization breakdown:\n+#\n+# 0x81 - 129 outputs (128 OP_RETURN and 1 Change output)\n+#\n+# OP_RETURN Output format:\n+#   Amount\n+#       0x0000000000000000 : 8 bytes for 0 amount (OP_RETURN)\n+#   VarInt for scriptPubKey Size\n+#       0xfd : signals 2 byte VarInt\n+#       0x0402 : (little-endian) scriptPubKey is 516 bytes\n+#   scriptPubKey\n+#       0x6a4d : OP_RETURN OP_PUSHDATA2\n+#       0x0200 : <DATA_SIZE> (512 bytes)\n+#       0x01*512 : 512 bytes of '01'\n+MULTI_OP_RETURN = \"81\" + (\"0000000000000000\"  # Amount\n+                  \"fd0402\" +                  # VarInt scriptPubKey size\n+                  \"6a4d\" +                    # OP_RETURN PUSHDATA2\n+                  \"0200\" +                    # Data is 512 bytes\n+                  \"01\" * 512) * 128          # 512 bytes of data (repeat script 128 times)\n+\n+# A hex string segment representing 1 OP_RETURN output 947000 bytes of data.\n+#\n+# Serialization breakdown:\n+#\n+# 0x02 - 2 outputs (1 OP_RETURN and 1 Change output)\n+#\n+# OP_RETURN Output format:\n+#   Amount\n+#       0x0000000000000000 : 8 bytes for 0 amount (OP_RETURN)\n+#   VarInt for scriptPubKey Size\n+#       0xfe : signals 4 byte VarInt\n+#       0x3e730e00 : (little-endian) scriptPubKey is 947006 bytes\n+#   scriptPubKey\n+#       0x6a4e : OP_RETURN OP_PUSHDATA4\n+#       0x000e7338: <DATA_SIZE> (947000 bytes)\n+#       0x01*947000 :  947000 bytes of '01'\n+GIANT_OP_RETURN = \"02\" + (\"0000000000000000\" +  # Amount\n+                  \"fe3e730e00\" +                # VarInt scriptPubKey size\n+                  \"6a4e\" +                      # OP_RETURN OP_PUSHDATA4\n+                  \"000e7338\" +                  # Data is 947000 bytes\n+                  (\"01\" * 947000))              # 947000 bytes of data\n+\n # Utility functions\n ###################\n \n@@ -489,8 +537,7 @@ def create_confirmed_utxos(fee, node, count):\n         return utxos\n     for i in range(iterations):\n         t = utxos.pop()\n-        inputs = []\n-        inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]})\n+        inputs = [{\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]}]\n         outputs = {}\n         send_value = t['amount'] - fee\n         outputs[addr1] = satoshi_round(send_value / 2)\n@@ -506,57 +553,40 @@ def create_confirmed_utxos(fee, node, count):\n     assert(len(utxos) >= count)\n     return utxos\n \n-# Create large OP_RETURN txouts that can be appended to a transaction\n-# to make it large (helper for constructing large transactions).\n-def gen_return_txouts():\n-    # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n-    # So we have big transactions (and therefore can't fit very many into each block)\n-    # create one script_pubkey\n-    script_pubkey = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n-    for i in range(512):\n-        script_pubkey = script_pubkey + \"01\"\n-    # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n-    txouts = \"81\"\n-    for k in range(128):\n-        # add txout value\n-        txouts = txouts + \"0000000000000000\"\n-        # add length of script_pubkey\n-        txouts = txouts + \"fd0402\"\n-        # add script_pubkey\n-        txouts = txouts + script_pubkey\n-    return txouts\n-\n-# Create a spend of each passed-in utxo, splicing in \"txouts\" to each raw\n-# transaction to make it large.  See gen_return_txouts() above.\n-def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n+# Create single large transaction. Can specify the kind of op_return_txout\n+# to splice into the transaction. By default, it will splice in\n+# 128 OP_RETURN outputs of 512 data bytes (see MULTI_OP_RETURN)\n+def create_big_transaction(node, utxo, fee, op_return_txout=MULTI_OP_RETURN):\n     addr = node.getnewaddress()\n-    txids = []\n-    for _ in range(num):\n-        t = utxos.pop()\n-        inputs = [{\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]}]\n-        outputs = {}\n-        change = t['amount'] - fee\n-        outputs[addr] = satoshi_round(change)\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-        newtx = rawtx[0:92]\n-        newtx = newtx + txouts\n-        newtx = newtx + rawtx[94:]\n-        signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n-        txid = node.sendrawtransaction(signresult[\"hex\"], True)\n-        txids.append(txid)\n+    inputs = [{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}]\n+    outputs = {addr: satoshi_round(utxo['amount'] - fee)}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    # Signing with SIGHASH_NONE allows splicing in OP_RETURNS after signing\n+    signresult = node.signrawtransactionwithwallet(rawtx, None, \"NONE\")['hex']\n+    # Look for sequence number, followed by '01' for number of outputs\n+    output_index = signresult.index('ffffffff01')\n+    # 8 characters forwards past 'ffffffff' and the splice includes the correct number of outputs\n+    # so the '01' can be skipped when copying the rest of the signed tx\n+    signresult = signresult[:output_index+8] + op_return_txout + signresult[output_index+10:]\n+    return node.sendrawtransaction(signresult, True)\n+\n+\n+# Create a spend of each passed-in utxo, splicing in \"txout\" to each raw\n+# transaction to make it large. By default, it will splice in\n+# 128 OP_RETURN outputs of 512 data bytes (see MULTI_OP_RETURN)\n+def create_lots_of_big_transactions(node, utxos, num, fee, op_return_txout=MULTI_OP_RETURN):\n+    assert_greater_than_or_equal(len(utxos), num)\n+    txids = [create_big_transaction(node, utxos.pop(), fee, op_return_txout) for _ in range(num)]\n     return txids\n \n+# Create a large block from a single large transaction\n def mine_large_block(node, utxos=None):\n-    # generate a 66k transaction,\n-    # and 14 of them is close to the 1MB block limit\n-    num = 14\n-    txouts = gen_return_txouts()\n     utxos = utxos if utxos is not None else []\n-    if len(utxos) < num:\n-        utxos.clear()\n+    if not utxos:\n         utxos.extend(node.listunspent())\n-    fee = 100 * node.getnetworkinfo()[\"relayfee\"]\n-    create_lots_of_big_transactions(node, txouts, utxos, num, fee=fee)\n+    fee = 1000 * node.getnetworkinfo()[\"relayfee\"]\n+    # Generates ~947Kb transaction\n+    create_big_transaction(node, utxos.pop(), fee=fee, op_return_txout=GIANT_OP_RETURN)\n     node.generate(1)\n \n def find_vout_for_address(node, txid, addr):"
      }
    ]
  },
  {
    "sha": "ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2Y4Mzg5YzFmMmY2MWE2ZThkYmUyNGViNjU2M2NjOGFmZjI3MDgz",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-11-08T11:28:21Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-11-12T08:20:43Z"
      },
      "message": "[Tests] - Make mempool_limit test use larger tx to hit mempool limit",
      "tree": {
        "sha": "17a17111154b839c5a9a57ab861b6e22f539dd9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17a17111154b839c5a9a57ab861b6e22f539dd9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c930190ec2c35a71d768d04285fd813d220780c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c930190ec2c35a71d768d04285fd813d220780c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c930190ec2c35a71d768d04285fd813d220780c"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f1e9b43656b368041f5a8f6212758ab9f242bcfd",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=ecf8389c1f2f61a6e8dbe24eb6563cc8aff27083",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_big_transaction, GIANT_OP_RETURN\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -25,8 +25,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 7)\n \n         self.log.info('Create a mempool tx that will be evicted')\n         us0 = utxos.pop()\n@@ -40,10 +39,12 @@ def run_test(self):\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+        base_fee = relayfee*10000\n+\n+        # Each tx is over 900Kb, each with a slightly higher fee. After 6 insertions\n+        # the mempool should evict the original transaction\n+        for i in range (6):\n+            create_big_transaction(self.nodes[0], utxos[i], (i+1)*base_fee, op_return_txout=GIANT_OP_RETURN)\n \n         self.log.info('The tx should be evicted by now')\n         assert(txid not in self.nodes[0].getrawmempool())"
      }
    ]
  }
]