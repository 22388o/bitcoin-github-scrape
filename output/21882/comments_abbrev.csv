hebasto,2021-05-07 21:20:37,"@rebroad @MarcoFalke \n\nDoes this fix work in your cases?",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-834788182,834788182,
MarcoFalke,2021-05-08 09:22:41,Concept and tested-only ACK 207b4e2c2bdbb882035cb0f595b55f9415557d6f didn't review,https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-835238855,835238855,
MarcoFalke,2021-05-08 09:24:06,"This allows to remove the workaround in oss-fuzz:\n\n```diff\noss-fuzz# git diff\ndiff --git a/projects/bitcoin-core/build.sh b/projects/bitcoin-core/build.sh\nindex 66d827f8..b2c4f36e 100755\n--- a/projects/bitcoin-core/build.sh\n+++ b/projects/bitcoin-core/build.sh\n@@ -19,13 +19,6 @@\n # This will also force static builds\n if [ ""$ARCHITECTURE"" = ""i386"" ]; then\n   export BUILD_TRIPL",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-835239644,835239644,
rebroad,2021-05-09 10:23:17,"> @rebroad @MarcoFalke\n> \n> Does this fix work in your cases?\n\nI'll have a look and let you know",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-835775352,835775352,
laanwj,2021-05-10 11:24:49,Does this issue only affect building the fuzz binary? This wasn't clear for me from the OP in #21294.,https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-836577276,836577276,
hebasto,2021-05-10 20:34:47,"@laanwj \n> Does this issue only affect building the fuzz binary? This wasn't clear for me from the OP in #21294.\n\nYes, the OP in #21294 points to some other places, but the exact version of the code is still unknown (or I missed it).\n\nOn the current master the bug is reproducible for fuzz binary only (using  Armbian 21.02.3 Focal).",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-837297018,837297018,
laanwj,2021-05-12 12:20:20,"> On the current master the bug is reproducible for fuzz binary only (using Armbian 21.02.3 Focal).\n\nMakes sense, thanks for letting me know, maybe we can wait a bit for tested confirmation that this solves the referenced issues.",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-839725408,839725408,
MarcoFalke,2021-05-12 12:49:39,"I did test this in https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-835238855, but I did not review",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-839744964,839744964,
MarcoFalke,2021-05-13 17:20:03,The steps to reproduce from https://github.com/bitcoin/bitcoin/pull/21920#issue-641280284 can be used here as well,https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-840707066,840707066,
hebasto,2021-05-14 13:30:14,"@fanquake \n\n> Is this actually limited to 32-bit? When compiling with Clang 11, on a 64-bit system, it is easy to recreate the same problem. i.e:\n> \n> ```c\n> int f(__int128 a, __int128 b, __int128 *p) {\n>   return __builtin_mul_overflow(a, b, p);\n> }\n> int main() {}\n> ```\n\nDo we use `__builtin_mul_overflow` with 128-bit arguments?\n\n> Why isn't this broken for 64-bit build",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-841245612,841245612,
hebasto,2021-05-14 17:09:37,"Updated 207b4e2c2bdbb882035cb0f595b55f9415557d6f -> 70d89ff9f6a883d5a8cc6049adf4dc173bced73a ([pr21882.02](https://github.com/hebasto/bitcoin/commits/pr21882.02) -> [pr21882.03](https://github.com/hebasto/bitcoin/commits/pr21882.03)):\n\n- addressed @fanquake's [comment](https://github.com/bitcoin/bitcoin/pull/21882#pullrequestreview-657469273)\n\n> This should probably be broken out into it's",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-841382845,841382845,
practicalswift,2021-05-15 07:53:00,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-841618104,841618104,
laanwj,2021-05-17 12:02:13,"On some level this problem is really *strange*. You're absolutely not supposed to have to link anything special to be able to use this basic C functionality. Functions with double underscore `__` are internal compiler details, unless you're deep into embedded development territory there should be no reason for application builders to be concerned with them.\n\nIf this is a workaround for a bug i",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-842268005,842268005,
hebasto,2021-05-17 12:06:50,"> On some level this problem is really _strange_. You're absolutely not supposed to have to link anything special to be able to use this basic C functionality. Functions with double underscore `__` are internal compiler details, unless you're deep into embedded development territory there should be no reason for application builders to be concerned with them.\n\nWe are already use double-undersc",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-842270988,842270988,
hebasto,2021-05-17 12:11:03,"@laanwj \n> If this is a workaround for a bug in a specific compiler version, please make this more clear and add a comment so that we know when it can be removed again.\n\nI'm not sure about a specific clang version. From https://bugs.llvm.org/show_bug.cgi?id=28629 I can assume that all supported clang versions are affected.",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-842273814,842273814,
laanwj,2021-05-17 13:53:02,"> We are already use double-underscore-named functions: \n\nEven there it's a compiler builtin / intrinsic. It's supposed to be part of the compiler or its support code, not a library you have to explicitly link. And I see no calls to `__mulodi4` specifically.\nTo be clear it's not meant as a NACK or anything, but I sometimes worry about the number of one-shot compiler bug workarounds we're acc",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-842343091,842343091,
MarcoFalke,2021-05-18 15:00:10,Could rebase to simplify testing?,https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-843246206,843246206,
hebasto,2021-05-18 15:38:33,"> Could rebase to simplify testing?\n\nDone.",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-843278398,843278398,
MarcoFalke,2021-05-20 08:32:31,"tested-only ACK bd55f62549ef16b2bbe8273ee8d98c05520aa7b4\n\nOn vanilla Ubuntu Focal:\n\n```\nexport DEBIAN_FRONTEND=noninteractive && apt update && apt install curl wget htop git vim ccache -y && git clone https://github.com/bitcoin/bitcoin.git && cd bitcoin && apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3-zmq make automake cmake curl clang llvm g+",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-844860976,844860976,
luke-jr,2021-06-13 19:03:09,"Perhaps something like this would be better?\n\n```diff\ndiff --git a/build-aux/m4/bitcoin_runtime_lib.m4 b/build-aux/m4/bitcoin_runtime_lib.m4\nindex 6af5514e6b7..9834b6c7965 100644\n--- a/build-aux/m4/bitcoin_runtime_lib.m4\n+++ b/build-aux/m4/bitcoin_runtime_lib.m4\n@@ -5,14 +5,10 @@\n # - https://bugs.llvm.org/show_bug.cgi?id=28629\n \n m4_define([_CHECK_RUNTIME_testbody], [[\n-  #i",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-860255830,860255830,
hebasto,2021-07-27 11:55:27,"Updated bd55f62549ef16b2bbe8273ee8d98c05520aa7b4 -> e4c8bb62e4a6873c45f42d0d2a24927cb241a0ea ([pr21882.04](https://github.com/hebasto/bitcoin/commits/pr21882.04) -> [pr21882.05](https://github.com/hebasto/bitcoin/commits/pr21882.05), [diff](https://github.com/hebasto/bitcoin/compare/pr21882.04..pr21882.05)):\n\n- addressed @luke-jr's [comment](https://github.com/bitcoin/bitcoin/pull/21882#issuec",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-887449511,887449511,
MarcoFalke,2021-07-29 07:09:49,"tested-only ACK e4c8bb62e4a6873c45f42d0d2a24927cb241a0ea\n\nCould suffix title with ""... in fuzz binary""?",https://github.com/bitcoin/bitcoin/pull/21882#issuecomment-888860446,888860446,
fanquake,2021-05-12 05:21:11,Is linking against GCCs runtime library actually needed?,https://github.com/bitcoin/bitcoin/pull/21882#discussion_r630731803,630731803,configure.ac
hebasto,2021-05-14 15:18:23,"Yes, it is.\n\nAfter adding `--rtlib=compiler-rt` the new linking error appears:\n```\n  CXXLD    bitcoind\n  CXXLD    bitcoin-cli\n  CXXLD    bitcoin-util\n  CXXLD    test/fuzz/fuzz\n/usr/bin/ld: test/fuzz/fuzz-addition_overflow.o: undefined reference to symbol '__aeabi_unwind_cpp_pr0@@GCC_3.5'\n/usr/bin/ld: /lib/arm-linux-gnueabihf/libgcc_s.so.1: error adding symbols: DSO missing from c",https://github.com/bitcoin/bitcoin/pull/21882#discussion_r632601539,632601539,configure.ac
luke-jr,2021-06-11 22:59:59,"AIUI, this test succeeds with non-clang, but `__builtin_mul_overflow` doesn't actually get checked at all. Maybe the test itself should be conditional on using clang?",https://github.com/bitcoin/bitcoin/pull/21882#discussion_r650302416,650302416,build-aux/m4/bitcoin_runtime_lib.m4
