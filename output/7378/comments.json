[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/172867435",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#issuecomment-172867435",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7378",
    "id": 172867435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Mjg2NzQzNQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-19T14:19:53Z",
    "updated_at": "2016-01-19T14:19:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice!\nTested ACK (on a different repo: https://github.com/digitalbitbox/dbb-app/commit/a592638e733a124426145cb0601907561ecd9975).\n\nThought for future additions:\n- show the head SHA256 hash from the PR (possible short compare against the one you have ACKed)\n- short command to diff the PR (temp bash alias instead of typing `git diff HEAD~1`?)\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/172867435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/172889118",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#issuecomment-172889118",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7378",
    "id": 172889118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Mjg4OTExOA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-19T15:31:17Z",
    "updated_at": "2016-01-19T15:31:17Z",
    "author_association": "MEMBER",
    "body": "utACK  b86484c\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/172889118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/173177394",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#issuecomment-173177394",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7378",
    "id": 173177394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzE3NzM5NA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-20T11:28:37Z",
    "updated_at": "2016-01-20T11:28:37Z",
    "author_association": "MEMBER",
    "body": "> show the head SHA256 hash from the PR (possible short compare against the one you have ACKed)\n\nThe simplest idea there would be to print the commit message for the merge to the console. It has all context information: the pull #,  the pull title, and the SHA (not 256) hashes for the commits in topological order.\n(this can be done in a later pull, not going to do so now)\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/173177394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/173192381",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#issuecomment-173192381",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7378",
    "id": 173192381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzE5MjM4MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-20T12:39:02Z",
    "updated_at": "2016-01-20T12:39:02Z",
    "author_association": "MEMBER",
    "body": "Tested ACK  da6d18b\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/173192381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50130758",
    "pull_request_review_id": null,
    "id": 50130758,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzU4",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']",
    "path": "contrib/devtools/github-merge.py",
    "position": 46,
    "original_position": 46,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "b86484c61eb7aeceaf35c7e46ea1dc46a96aef6b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could make sense to \"sanitize\" the title such that it fits in the git(hub) subject line.\n\nThat is, `return title[0:min(80, len(title)) - len(\"Merge pull request #xxxx: \"]`\n",
    "created_at": "2016-01-19T16:00:24Z",
    "updated_at": "2016-01-20T12:02:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50130758",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50130758"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50130758"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50130758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 46,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50233580",
    "pull_request_review_id": null,
    "id": 50233580,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNTgw",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']",
    "path": "contrib/devtools/github-merge.py",
    "position": 46,
    "original_position": 46,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "b86484c61eb7aeceaf35c7e46ea1dc46a96aef6b",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't know - I don't like it cut off.\nAt least github tends to handle long title lines already by adding ... and continuing on the next line.\n",
    "created_at": "2016-01-20T09:51:30Z",
    "updated_at": "2016-01-20T12:02:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50233580",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50233580"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50233580"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50233580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 46,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234324",
    "pull_request_review_id": null,
    "id": 50234324,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MzI0",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']",
    "path": "contrib/devtools/github-merge.py",
    "position": 46,
    "original_position": 46,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "b86484c61eb7aeceaf35c7e46ea1dc46a96aef6b",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Other, less lossy ways to shorten the text may be:\n- leave out the \"pull request\" completely, as in \"Merge #1234: bla\"\n- abbreviate it as PR\n  ...\n",
    "created_at": "2016-01-20T09:58:04Z",
    "updated_at": "2016-01-20T12:02:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50234324",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234324"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50234324"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 46,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234740",
    "pull_request_review_id": null,
    "id": 50234740,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0NzQw",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']",
    "path": "contrib/devtools/github-merge.py",
    "position": 46,
    "original_position": 46,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "b86484c61eb7aeceaf35c7e46ea1dc46a96aef6b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ACK on shorten the text.\n",
    "created_at": "2016-01-20T10:02:08Z",
    "updated_at": "2016-01-20T12:02:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50234740",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234740"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50234740"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 46,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234939",
    "pull_request_review_id": null,
    "id": 50234939,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0OTM5",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']",
    "path": "contrib/devtools/github-merge.py",
    "position": 46,
    "original_position": 46,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "b86484c61eb7aeceaf35c7e46ea1dc46a96aef6b",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ACK on keeping the full title but removing \"pull request\".\n",
    "created_at": "2016-01-20T10:04:06Z",
    "updated_at": "2016-01-20T12:02:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50234939",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234939"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50234939"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50234939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 46,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50248240",
    "pull_request_review_id": null,
    "id": 50248240,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4MjQw",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']\n+    except Exception as e:\n+        print('Warning: unable to retrieve pull title from github: %s' % e)\n+        return None\n+\n+def ask_prompt(text):\n+    print(text,end=\" \",file=stderr)\n+    reply = stdin.readline().rstrip()\n+    print(\"\",file=stderr)\n+    return reply\n+\n+def parse_arguments(branch):\n+    epilog = '''\n+        In addition, you can set the following git configuration variables:\n+        githubmerge.repository (mandatory),\n+        user.signingkey (mandatory),\n+        githubmerge.host (default: git@github.com),\n+        githubmerge.branch (default: master),\n+        githubmerge.testcmd (default: none).\n+    '''\n+    parser = argparse.ArgumentParser(description='Utility to merge, sign and push github pull requests',\n+            epilog=epilog)\n+    parser.add_argument('pull', metavar='PULL', type=int, nargs=1,\n+        help='Pull request ID to merge')\n+    parser.add_argument('branch', metavar='BRANCH', type=str, nargs='?',\n+        default=branch, help='Branch to merge against (default: '+branch+')')\n+    return parser.parse_args()\n+\n+def main():\n+    # Extract settings from git repo\n+    repo = git_config_get('githubmerge.repository')\n+    host = git_config_get('githubmerge.host','git@github.com')\n+    branch = git_config_get('githubmerge.branch','master')\n+    testcmd = git_config_get('githubmerge.testcmd')\n+    signingkey = git_config_get('user.signingkey')\n+    if repo is None:\n+        print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n+        print(\"git config githubmerge.repository <owner>/<repo>\", file=stderr)\n+        exit(1)\n+    if signingkey is None:\n+        print(\"ERROR: No GPG signing key set. Set one using:\",file=stderr)\n+        print(\"git config --global user.signingkey <key>\",file=stderr)\n+        exit(1)\n+\n+    host_repo = host+\":\"+repo # shortcut for push/pull target\n+\n+    # Extract settings from command line\n+    args = parse_arguments(branch)\n+    pull = str(args.pull[0])\n+    branch = args.branch\n+\n+    # Initialize source branches\n+    head_branch = 'pull/'+pull+'/head'\n+    base_branch = 'pull/'+pull+'/base'\n+    merge_branch = 'pull/'+pull+'/merge'\n+    local_merge_branch = 'pull/'+pull+'/local-merge'\n+\n+    devnull = open(os.devnull,'w')\n+    try:\n+        subprocess.check_call([GIT,'checkout','-q',branch])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*'])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/heads/'+branch+':refs/heads/'+base_branch])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find branch %s on %s.\" % (branch,host_repo), file=stderr)\n+        exit(3)\n+    subprocess.check_call([GIT,'checkout','-q',base_branch])\n+    subprocess.call([GIT,'branch','-q','-D',local_merge_branch], stderr=devnull)\n+    subprocess.check_call([GIT,'checkout','-q','-b',local_merge_branch])\n+\n+    try:\n+        # Create unsigned merge commit.\n+        title = retrieve_pr_title(repo,pull)\n+        if title:\n+            firstline = 'Merge #%s: %s' % (pull,title)\n+        else:\n+            firstline = 'Merge #%s' % (pull,)\n+        message = firstline + '\\n\\n'\n+        message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%h %s (%an)',base_branch+'..'+head_branch])\n+        try:\n+            subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message,head_branch])\n+        except subprocess.CalledProcessError as e:\n+            print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n+            subprocess.check_call([GIT,'merge','--abort'])\n+            exit(4)\n+        logmsg = subprocess.check_output([GIT,'log','--pretty=format:%s','-n','1'])\n+        if logmsg.rstrip() != firstline.rstrip():\n+            print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n+            exit(4)\n+\n+        # Run test command if configured.\n+        if testcmd:\n+            # Go up to the repository's root.\n+            toplevel = subprocess.check_output([GIT,'rev-parse','--show-toplevel'])\n+            os.chdir(toplevel)\n+            if subprocess.call(testcmd,shell=True):\n+                print(\"ERROR: Running %s failed.\" % testcmd,file=stderr)\n+                exit(5)\n+\n+            # Show the created merge.\n+            diff = subprocess.check_output([GIT,'diff',merge_branch+'..'+local_merge_branch])\n+            subprocess.check_call([GIT,'diff',base_branch+'..'+local_merge_branch])\n+            if diff:\n+                print(\"WARNING: merge differs from github!\",file=stderr)\n+                reply = ask_prompt(\"Type 'ignore' to continue.\")\n+                if reply.lower() == 'ignore':\n+                    print(\"Difference with github ignored.\",file=stderr)\n+                else:\n+                    exit(6)\n+            reply = ask_prompt(\"Press 'd' to accept the diff.\")\n+            if reply.lower() == 'd':\n+                print(\"Diff accepted.\",file=stderr)\n+            else:\n+                print(\"ERROR: Diff rejected.\",file=stderr)\n+                exit(6)\n+        else:\n+            # Verify the result manually.\n+            print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n+            print(\"Run 'git diff HEAD~' to show the changes being merged.\",file=stderr)\n+            print(\"Type 'exit' when done.\",file=stderr)\n+            if os.path.isfile('/etc/debian_version'): # Show pull number on Debian default prompt\n+                os.putenv('debian_chroot',pull)\n+            subprocess.call([BASH,'-i'])\n+            reply = ask_prompt(\"Type 'm' to accept the merge.\")",
    "path": "contrib/devtools/github-merge.py",
    "position": 186,
    "original_position": 186,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "BTW: is anyone opposed to combining 'accept' and 'sign off' into one step? I may be overlooking something, but I've never completely understood why these are separate, why you would accept a change but then not sign it (which is mandatory).\n",
    "created_at": "2016-01-20T12:30:39Z",
    "updated_at": "2016-01-20T12:30:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50248240",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50248240"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r50248240"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/50248240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 186,
    "original_line": 186,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/58317448",
    "pull_request_review_id": null,
    "id": 58317448,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzE3NDQ4",
    "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip()\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_title(repo,pull):\n+    '''\n+    Retrieve pull request title from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    import urllib2,json\n+    try:\n+        req = urllib2.Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urllib2.urlopen(req)\n+        result = json.load(result)\n+        return result['title']\n+    except Exception as e:\n+        print('Warning: unable to retrieve pull title from github: %s' % e)\n+        return None\n+\n+def ask_prompt(text):\n+    print(text,end=\" \",file=stderr)\n+    reply = stdin.readline().rstrip()\n+    print(\"\",file=stderr)\n+    return reply\n+\n+def parse_arguments(branch):\n+    epilog = '''\n+        In addition, you can set the following git configuration variables:\n+        githubmerge.repository (mandatory),\n+        user.signingkey (mandatory),\n+        githubmerge.host (default: git@github.com),\n+        githubmerge.branch (default: master),\n+        githubmerge.testcmd (default: none).\n+    '''\n+    parser = argparse.ArgumentParser(description='Utility to merge, sign and push github pull requests',\n+            epilog=epilog)\n+    parser.add_argument('pull', metavar='PULL', type=int, nargs=1,\n+        help='Pull request ID to merge')\n+    parser.add_argument('branch', metavar='BRANCH', type=str, nargs='?',\n+        default=branch, help='Branch to merge against (default: '+branch+')')\n+    return parser.parse_args()\n+\n+def main():\n+    # Extract settings from git repo\n+    repo = git_config_get('githubmerge.repository')\n+    host = git_config_get('githubmerge.host','git@github.com')\n+    branch = git_config_get('githubmerge.branch','master')\n+    testcmd = git_config_get('githubmerge.testcmd')\n+    signingkey = git_config_get('user.signingkey')\n+    if repo is None:\n+        print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n+        print(\"git config githubmerge.repository <owner>/<repo>\", file=stderr)\n+        exit(1)\n+    if signingkey is None:\n+        print(\"ERROR: No GPG signing key set. Set one using:\",file=stderr)\n+        print(\"git config --global user.signingkey <key>\",file=stderr)\n+        exit(1)\n+\n+    host_repo = host+\":\"+repo # shortcut for push/pull target\n+\n+    # Extract settings from command line\n+    args = parse_arguments(branch)\n+    pull = str(args.pull[0])\n+    branch = args.branch\n+\n+    # Initialize source branches\n+    head_branch = 'pull/'+pull+'/head'\n+    base_branch = 'pull/'+pull+'/base'\n+    merge_branch = 'pull/'+pull+'/merge'\n+    local_merge_branch = 'pull/'+pull+'/local-merge'\n+\n+    devnull = open(os.devnull,'w')\n+    try:\n+        subprocess.check_call([GIT,'checkout','-q',branch])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*'])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/heads/'+branch+':refs/heads/'+base_branch])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find branch %s on %s.\" % (branch,host_repo), file=stderr)\n+        exit(3)\n+    subprocess.check_call([GIT,'checkout','-q',base_branch])\n+    subprocess.call([GIT,'branch','-q','-D',local_merge_branch], stderr=devnull)\n+    subprocess.check_call([GIT,'checkout','-q','-b',local_merge_branch])\n+\n+    try:\n+        # Create unsigned merge commit.\n+        title = retrieve_pr_title(repo,pull)\n+        if title:\n+            firstline = 'Merge #%s: %s' % (pull,title)\n+        else:\n+            firstline = 'Merge #%s' % (pull,)\n+        message = firstline + '\\n\\n'\n+        message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%h %s (%an)',base_branch+'..'+head_branch])\n+        try:\n+            subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message,head_branch])\n+        except subprocess.CalledProcessError as e:\n+            print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n+            subprocess.check_call([GIT,'merge','--abort'])\n+            exit(4)\n+        logmsg = subprocess.check_output([GIT,'log','--pretty=format:%s','-n','1'])\n+        if logmsg.rstrip() != firstline.rstrip():\n+            print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n+            exit(4)\n+\n+        # Run test command if configured.\n+        if testcmd:\n+            # Go up to the repository's root.\n+            toplevel = subprocess.check_output([GIT,'rev-parse','--show-toplevel'])\n+            os.chdir(toplevel)\n+            if subprocess.call(testcmd,shell=True):\n+                print(\"ERROR: Running %s failed.\" % testcmd,file=stderr)\n+                exit(5)\n+\n+            # Show the created merge.\n+            diff = subprocess.check_output([GIT,'diff',merge_branch+'..'+local_merge_branch])\n+            subprocess.check_call([GIT,'diff',base_branch+'..'+local_merge_branch])\n+            if diff:\n+                print(\"WARNING: merge differs from github!\",file=stderr)\n+                reply = ask_prompt(\"Type 'ignore' to continue.\")\n+                if reply.lower() == 'ignore':\n+                    print(\"Difference with github ignored.\",file=stderr)\n+                else:\n+                    exit(6)\n+            reply = ask_prompt(\"Press 'd' to accept the diff.\")\n+            if reply.lower() == 'd':\n+                print(\"Diff accepted.\",file=stderr)\n+            else:\n+                print(\"ERROR: Diff rejected.\",file=stderr)\n+                exit(6)\n+        else:\n+            # Verify the result manually.\n+            print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n+            print(\"Run 'git diff HEAD~' to show the changes being merged.\",file=stderr)\n+            print(\"Type 'exit' when done.\",file=stderr)\n+            if os.path.isfile('/etc/debian_version'): # Show pull number on Debian default prompt\n+                os.putenv('debian_chroot',pull)\n+            subprocess.call([BASH,'-i'])\n+            reply = ask_prompt(\"Type 'm' to accept the merge.\")",
    "path": "contrib/devtools/github-merge.py",
    "position": 186,
    "original_position": 186,
    "commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "original_commit_id": "da6d18b6c7a4c305b661684ccda23083731bbb08",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They were separate at a time when the signing was not mandatory :)\n",
    "created_at": "2016-04-03T20:59:30Z",
    "updated_at": "2016-04-03T20:59:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r58317448",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/58317448"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7378#discussion_r58317448"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7378"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/58317448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 186,
    "original_line": 186,
    "side": "RIGHT"
  }
]