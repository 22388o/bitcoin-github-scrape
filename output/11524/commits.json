[
  {
    "sha": "5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2U3Y2I5NTE4MGI3ZDg4NzNkYWU5MWQ4MzcwYmM3ZWE2OWNkMmE3",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-10-19T07:53:01Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2017-11-07T23:33:15Z"
      },
      "message": "[net] De-duplicate connection eviction logic",
      "tree": {
        "sha": "8bcf70d5df00c0c99abaa842f16f5c7ffddb33b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bcf70d5df00c0c99abaa842f16f5c7ffddb33b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a9da37fb3f4b53f556e1d46509b94dc3c661d75"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 20,
      "deletions": 29
    },
    "files": [
      {
        "sha": "391c229ebcae3788dfb09ec4562b32e64658bcd6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 29,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5ce7cb95180b7d8873dae91d8370bc7ea69cd2a7",
        "patch": "@@ -962,6 +962,16 @@ static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEviction\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+\n+//! Sort an array by the specified comparator, then erase the last K elements.\n+template<typename T, typename Comparator>\n+static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)\n+{\n+    std::sort(elements.begin(), elements.end(), comparator);\n+    size_t eraseSize = std::min(k, elements.size());\n+    elements.erase(elements.end() - eraseSize, elements.end());\n+}\n+\n /** Try to find a connection to evict when the node is full.\n  *  Extreme care must be taken to avoid opening the node to attacker\n  *   triggered network partitioning.\n@@ -991,42 +1001,23 @@ bool CConnman::AttemptToEvictConnection()\n         }\n     }\n \n-    if (vEvictionCandidates.empty()) return false;\n-\n     // Protect connections with certain characteristics\n \n     // Deterministically select 4 peers to protect by netgroup.\n     // An attacker cannot predict which netgroups will be protected\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNetGroupKeyed);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n-\n-    if (vEvictionCandidates.empty()) return false;\n-\n+    EraseLastKElements(vEvictionCandidates, CompareNetGroupKeyed, 4);\n     // Protect the 8 nodes with the lowest minimum ping time.\n     // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n-\n-    if (vEvictionCandidates.empty()) return false;\n-\n+    EraseLastKElements(vEvictionCandidates, ReverseCompareNodeMinPingTime, 8);\n     // Protect 4 nodes that most recently sent us transactions.\n     // An attacker cannot manipulate this metric without performing useful work.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeTXTime);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n-\n-    if (vEvictionCandidates.empty()) return false;\n-\n+    EraseLastKElements(vEvictionCandidates, CompareNodeTXTime, 4);\n     // Protect 4 nodes that most recently sent us blocks.\n     // An attacker cannot manipulate this metric without performing useful work.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeBlockTime);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n-\n-    if (vEvictionCandidates.empty()) return false;\n-\n+    EraseLastKElements(vEvictionCandidates, CompareNodeBlockTime, 4);\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n+    EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, vEvictionCandidates.size() / 2);\n \n     if (vEvictionCandidates.empty()) return false;\n \n@@ -1037,12 +1028,12 @@ bool CConnman::AttemptToEvictConnection()\n     int64_t nMostConnectionsTime = 0;\n     std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n     for (const NodeEvictionCandidate &node : vEvictionCandidates) {\n-        mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n-        int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n-        size_t groupsize = mapNetGroupNodes[node.nKeyedNetGroup].size();\n+        std::vector<NodeEvictionCandidate> &group = mapNetGroupNodes[node.nKeyedNetGroup];\n+        group.push_back(node);\n+        int64_t grouptime = group[0].nTimeConnected;\n \n-        if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n-            nMostConnections = groupsize;\n+        if (group.size() > nMostConnections || (group.size() == nMostConnections && grouptime > nMostConnectionsTime)) {\n+            nMostConnections = group.size();\n             nMostConnectionsTime = grouptime;\n             naMostConnections = node.nKeyedNetGroup;\n         }"
      }
    ]
  }
]