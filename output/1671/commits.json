[
  {
    "sha": "ee9eecb54db794a97de6e5add719aa6c4c020589",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTllZWNiNTRkYjc5NGE5N2RlNmU1YWRkNzE5YWE2YzRjMDIwNTg5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-02T02:33:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T22:30:29Z"
      },
      "message": "Treat generation (mined) transactions less different from receive transactions\n\n- Show address receiving the generation, and include it in the correct \"account\"\n- Multiple entries in listtransactions output if the coinbase has multiple outputs to us\n- Classify generation as \"receive\" category, so it doesn't require special treatment for payment services\n- Add new \"status\" key to wallet transactions, which is:\n- - \"confirmed\"  -- 6+ confirmations (120+ for generation)\n- - \"processing\" -- 2+ confirmations (100+ for generation)\n- - \"validating\" -- 0+ confirmations (  1+ for generation)\n- - \"invalid\"    -- negative confirmations (contradicted in main chain)",
      "tree": {
        "sha": "e6e05fa27eb67f8b34293c55abc7c832e7b53dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6e05fa27eb67f8b34293c55abc7c832e7b53dc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee9eecb54db794a97de6e5add719aa6c4c020589",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9eecb54db794a97de6e5add719aa6c4c020589",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9eecb54db794a97de6e5add719aa6c4c020589",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9eecb54db794a97de6e5add719aa6c4c020589/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11f73c728afcc1663755d85311cc09c5188a4dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f73c728afcc1663755d85311cc09c5188a4dd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11f73c728afcc1663755d85311cc09c5188a4dd3"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 56,
      "deletions": 60
    },
    "files": [
      {
        "sha": "3ab1a8431cd1cdd800eb3b7b5b7521f98e5e9855",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 32,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9eecb54db794a97de6e5add719aa6c4c020589/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9eecb54db794a97de6e5add719aa6c4c020589/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ee9eecb54db794a97de6e5add719aa6c4c020589",
        "patch": "@@ -162,6 +162,37 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.push_back(Pair(\"confirmations\", confirms));\n+    const char *strStatus;\n+    if (wtx.IsCoinBase())\n+    {\n+        entry.push_back(Pair(\"from\", \"generation\"));\n+        if (confirms >= COINBASE_MATURITY)\n+        {\n+            if (!wtx.GetBlocksToMaturity())\n+                strStatus = \"confirmed\";\n+            else\n+                strStatus = \"processing\";\n+        }\n+        else\n+        if (confirms >= 1)\n+            strStatus = \"validating\";\n+        else\n+            strStatus = \"invalid\";\n+    }\n+    else\n+    {\n+        if (confirms >= 6)\n+            strStatus = \"confirmed\";\n+        else\n+        if (confirms >= 2)\n+            strStatus = \"processing\";\n+        else\n+        if (confirms >= 0)\n+            strStatus = \"validating\";\n+        else\n+            strStatus = \"invalid\";\n+    }\n+    entry.push_back(Pair(\"status\", strStatus));\n     if (confirms)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n@@ -951,12 +982,12 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n         if (!wtx.IsFinal())\n             continue;\n \n-        int64 nGenerated, nReceived, nSent, nFee;\n-        wtx.GetAccountAmounts(strAccount, nGenerated, nReceived, nSent, nFee);\n+        int64 nReceived, nSent, nFee;\n+        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n             nBalance += nReceived;\n-        nBalance += nGenerated - nSent - nFee;\n+        nBalance -= nSent + nFee;\n     }\n \n     // Tally internal accounting entries\n@@ -998,12 +1029,11 @@ Value getbalance(const Array& params, bool fHelp)\n             if (!wtx.IsFinal())\n                 continue;\n \n-            int64 allGeneratedImmature, allGeneratedMature, allFee;\n-            allGeneratedImmature = allGeneratedMature = allFee = 0;\n+            int64 allFee;\n             string strSentAccount;\n             list<pair<CTxDestination, int64> > listReceived;\n             list<pair<CTxDestination, int64> > listSent;\n-            wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n+            wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n@@ -1012,7 +1042,6 @@ Value getbalance(const Array& params, bool fHelp)\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n-            nBalance += allGeneratedMature;\n         }\n         return  ValueFromAmount(nBalance);\n     }\n@@ -1381,35 +1410,15 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n-    int64 nGeneratedImmature, nGeneratedMature, nFee;\n+    int64 nFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64> > listReceived;\n     list<pair<CTxDestination, int64> > listSent;\n \n-    wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n+    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n \n-    // Generated blocks assigned to account \"\"\n-    if ((nGeneratedMature+nGeneratedImmature) != 0 && (fAllAccounts || strAccount == \"\"))\n-    {\n-        Object entry;\n-        entry.push_back(Pair(\"account\", string(\"\")));\n-        if (nGeneratedImmature)\n-        {\n-            entry.push_back(Pair(\"category\", wtx.GetDepthInMainChain() ? \"immature\" : \"orphan\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(nGeneratedImmature)));\n-        }\n-        else\n-        {\n-            entry.push_back(Pair(\"category\", \"generate\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(nGeneratedMature)));\n-        }\n-        if (fLong)\n-            WalletTxToJSON(wtx, entry);\n-        ret.push_back(entry);\n-    }\n-\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n@@ -1562,17 +1571,16 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64 nGeneratedImmature, nGeneratedMature, nFee;\n+        int64 nFee;\n         string strSentAccount;\n         list<pair<CTxDestination, int64> > listReceived;\n         list<pair<CTxDestination, int64> > listSent;\n-        wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n+        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n-            mapAccountBalances[\"\"] += nGeneratedMature;\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;"
      },
      {
        "sha": "cc60e2732bf1a62767b4489c5dc5408101e0586b",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9eecb54db794a97de6e5add719aa6c4c020589/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9eecb54db794a97de6e5add719aa6c4c020589/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ee9eecb54db794a97de6e5add719aa6c4c020589",
        "patch": "@@ -54,12 +54,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                if (wtx.IsCoinBase())\n-                {\n-                    // Generated\n-                    sub.type = TransactionRecord::Generated;\n-                }\n-                else if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n+                if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n                     sub.type = TransactionRecord::RecvWithAddress;\n@@ -71,6 +66,11 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.type = TransactionRecord::RecvFromOther;\n                     sub.address = mapValue[\"from\"];\n                 }\n+                if (wtx.IsCoinBase())\n+                {\n+                    // Generated\n+                    sub.type = TransactionRecord::Generated;\n+                }\n \n                 parts.append(sub);\n             }"
      },
      {
        "sha": "12d902a294f85480cd68ba0e63eaced77f7fe9dc",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9eecb54db794a97de6e5add719aa6c4c020589/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9eecb54db794a97de6e5add719aa6c4c020589/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=ee9eecb54db794a97de6e5add719aa6c4c020589",
        "patch": "@@ -391,11 +391,11 @@ QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, b\n         return QString::fromStdString(wtx->address);\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n+    case TransactionRecord::Generated:\n         return lookupAddress(wtx->address, tooltip);\n     case TransactionRecord::SendToOther:\n         return QString::fromStdString(wtx->address);\n     case TransactionRecord::SendToSelf:\n-    case TransactionRecord::Generated:\n     default:\n         return tr(\"(n/a)\");\n     }\n@@ -408,13 +408,13 @@ QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const\n     {\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n+    case TransactionRecord::Generated:\n         {\n         QString label = walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(wtx->address));\n         if(label.isEmpty())\n             return COLOR_BAREADDRESS;\n         } break;\n     case TransactionRecord::SendToSelf:\n-    case TransactionRecord::Generated:\n         return COLOR_BAREADDRESS;\n     default:\n         break;"
      },
      {
        "sha": "7e71ac60632af189747e51c9033113366a52d008",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 18,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9eecb54db794a97de6e5add719aa6c4c020589/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9eecb54db794a97de6e5add719aa6c4c020589/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ee9eecb54db794a97de6e5add719aa6c4c020589",
        "patch": "@@ -518,23 +518,14 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CTxDestination, int64> >& listReceived,\n+void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n                            list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n-    nGeneratedImmature = nGeneratedMature = nFee = 0;\n+    nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n-    if (IsCoinBase())\n-    {\n-        if (GetBlocksToMaturity() > 0)\n-            nGeneratedImmature = pwallet->GetCredit(*this);\n-        else\n-            nGeneratedMature = GetCredit();\n-        return;\n-    }\n-\n     // Compute fee:\n     int64 nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n@@ -567,20 +558,17 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived,\n+void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nReceived,\n                                   int64& nSent, int64& nFee) const\n {\n-    nGenerated = nReceived = nSent = nFee = 0;\n+    nReceived = nSent = nFee = 0;\n \n-    int64 allGeneratedImmature, allGeneratedMature, allFee;\n-    allGeneratedImmature = allGeneratedMature = allFee = 0;\n+    int64 allFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64> > listReceived;\n     list<pair<CTxDestination, int64> > listSent;\n-    GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n+    GetAmounts(listReceived, listSent, allFee, strSentAccount);\n \n-    if (strAccount == \"\")\n-        nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& s, listSent)"
      },
      {
        "sha": "81060bc437e48b8e8e64dcd92b51640489b663a3",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee9eecb54db794a97de6e5add719aa6c4c020589/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee9eecb54db794a97de6e5add719aa6c4c020589/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ee9eecb54db794a97de6e5add719aa6c4c020589",
        "patch": "@@ -533,10 +533,10 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CTxDestination, int64> >& listReceived,\n+    void GetAmounts(std::list<std::pair<CTxDestination, int64> >& listReceived,\n                     std::list<std::pair<CTxDestination, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n+    void GetAccountAmounts(const std::string& strAccount, int64& nReceived,\n                            int64& nSent, int64& nFee) const;\n \n     bool IsFromMe() const"
      }
    ]
  },
  {
    "sha": "eff8ee03f30512d97496da4ed8207c9870069a9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmY4ZWUwM2YzMDUxMmQ5NzQ5NmRhNGVkODIwN2M5ODcwMDY5YTlj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-06-27T23:30:39Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-07-06T15:37:01Z"
      },
      "message": "Block height in coinbase as a new block rule\n\n\"Version 2\" blocks are blocks that have nVersion=2 and\nhave the block height as the first item in their coinbase.\nBlock-height-in-the-coinbase is strictly enforced when\nversion=2 blocks are a supermajority in the block chain\n(750 of the last 1,000 blocks on main net, 51 of 100 for\ntestnet). This does not affect old clients/miners at all,\nwhich will continue producing nVersion=1 blocks, and\nwhich will continue to be valid.",
      "tree": {
        "sha": "ae8ee657e289ab4d2d92a126600a9d78991dc0c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae8ee657e289ab4d2d92a126600a9d78991dc0c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eff8ee03f30512d97496da4ed8207c9870069a9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff8ee03f30512d97496da4ed8207c9870069a9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eff8ee03f30512d97496da4ed8207c9870069a9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff8ee03f30512d97496da4ed8207c9870069a9c/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a919e396d95425fd2a3411c1716b7ccfe719540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a919e396d95425fd2a3411c1716b7ccfe719540",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a919e396d95425fd2a3411c1716b7ccfe719540"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 34,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bae7d1955d3071722de9e7f6270e3ba9cfe71703",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff8ee03f30512d97496da4ed8207c9870069a9c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff8ee03f30512d97496da4ed8207c9870069a9c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eff8ee03f30512d97496da4ed8207c9870069a9c",
        "patch": "@@ -1788,6 +1788,19 @@ bool CBlock::AcceptBlock()\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n         return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    if (nVersion > 1)\n+    {\n+        // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+        if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n+            (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+        {\n+            CScript expect = CScript() << nHeight;\n+            if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n+                return DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n+        }\n+    }\n+\n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n@@ -1811,6 +1824,18 @@ bool CBlock::AcceptBlock()\n     return true;\n }\n \n+bool CBlockIndex::IsSuperMajority(unsigned int minVersion, const CBlockIndex* pstart, unsigned int nRequired, unsigned int nToCheck)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n     // Check for duplicate\n@@ -3493,7 +3518,8 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n         hashPrevBlock = pblock->hashPrevBlock;\n     }\n     ++nExtraNonce;\n-    pblock->vtx[0].vin[0].scriptSig = (CScript() << pblock->nTime << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n+    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n+    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n \n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();"
      },
      {
        "sha": "22328430248ecf7e6eef8b69ade0008dedb67762",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff8ee03f30512d97496da4ed8207c9870069a9c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff8ee03f30512d97496da4ed8207c9870069a9c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=eff8ee03f30512d97496da4ed8207c9870069a9c",
        "patch": "@@ -818,7 +818,7 @@ class CBlock\n {\n public:\n     // header\n-    static const int CURRENT_VERSION=1;\n+    static const int CURRENT_VERSION=2;\n     int nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n@@ -1162,6 +1162,12 @@ class CBlockIndex\n         return pindex->GetMedianTimePast();\n     }\n \n+    /**\n+     * Returns true if there are nRequired or more blocks of minVersion or above\n+     * in the last nToCheck blocks, starting at pstart and going backwards.\n+     */\n+    static bool IsSuperMajority(unsigned int minVersion, const CBlockIndex* pstart,\n+                                unsigned int nRequired, unsigned int nToCheck);\n \n \n     std::string ToString() const"
      }
    ]
  },
  {
    "sha": "fa174be9b58de7377b46416d3a040c979d27d7e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE3NGJlOWI1OGRlNzM3N2I0NjQxNmQzYTA0MGM5NzlkMjdkN2Uy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-07-06T01:22:16Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-07-06T15:37:01Z"
      },
      "message": "Reject block.nVersion<=1 blocks if network has upgraded to version=2\n\nIf 950 of the last 1,000 blocks are nVersion=2, reject nVersion=1\n(or zero, but no bitcoin release has created block.nVersion=0) blocks\n-- 75 of last 100 on testnet3.\n\nThis rule is being put in place now so that we don't have to go\nthrough another \"express support\" process to get what we really\nwant, which is for every single new block to include the block height\nin the coinbase.",
      "tree": {
        "sha": "f63ce15975defd1eb0ea21bd074a0576f5e6e705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f63ce15975defd1eb0ea21bd074a0576f5e6e705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa174be9b58de7377b46416d3a040c979d27d7e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa174be9b58de7377b46416d3a040c979d27d7e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa174be9b58de7377b46416d3a040c979d27d7e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa174be9b58de7377b46416d3a040c979d27d7e2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eff8ee03f30512d97496da4ed8207c9870069a9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff8ee03f30512d97496da4ed8207c9870069a9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eff8ee03f30512d97496da4ed8207c9870069a9c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "453d8f6f837ac058fb2f67884c4cd6007ce96fe1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa174be9b58de7377b46416d3a040c979d27d7e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa174be9b58de7377b46416d3a040c979d27d7e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa174be9b58de7377b46416d3a040c979d27d7e2",
        "patch": "@@ -1788,8 +1788,17 @@ bool CBlock::AcceptBlock()\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n         return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n+    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (nVersion < 2)\n+    {\n+        if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n+            (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+        {\n+            return error(\"AcceptBlock() : rejected nVersion=1 block\");\n+        }\n+    }\n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    if (nVersion > 1)\n+    if (nVersion >= 2)\n     {\n         // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n         if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||"
      }
    ]
  },
  {
    "sha": "17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2NmYzNhODY0YjA5ZDQ2ZGZlNjRhMGM2YmU4MWFkNDViZGZjOGUz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T16:35:58Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:35:29Z"
      },
      "message": "Make IPv6 support buildtime-optional again (defaults to enabled)",
      "tree": {
        "sha": "8bc5506359fa775224c7c411315ddddb1190d697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bc5506359fa775224c7c411315ddddb1190d697"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232393e3bda19392d1a9727c81bad1796b6061a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232393e3bda19392d1a9727c81bad1796b6061a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232393e3bda19392d1a9727c81bad1796b6061a8"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 33,
      "deletions": 5
    },
    "files": [
      {
        "sha": "40b98e26c53768aa699f607509354236a2d034a9",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "patch": "@@ -2,7 +2,7 @@ TEMPLATE = app\n TARGET =\n VERSION = 0.6.99\n INCLUDEPATH += src src/json src/qt\n-DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE USE_IPV6\n+DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n CONFIG += no_include_pwd\n \n # for boost 1.37, add -mt to the boost libraries\n@@ -68,6 +68,14 @@ contains(FIRST_CLASS_MESSAGING, 1) {\n     DEFINES += FIRST_CLASS_MESSAGING\n }\n \n+# use: qmake \"USE_IPV6=1\" (enabled; default)\n+#  or: qmake \"USE_IPV6=-\" (not supported)\n+contains(USE_IPV6, -) {\n+\tmessage(Building without IPv6 support)\n+} else {\n+\tDEFINES += USE_IPV6\n+}\n+\n contains(BITCOIN_NEED_QT_PLUGINS, 1) {\n     DEFINES += BITCOIN_NEED_QT_PLUGINS\n     QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets"
      },
      {
        "sha": "7222f5314aee9e822772585c2e27b2a60188ac8f",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "patch": "@@ -5,6 +5,7 @@\n DEPSDIR:=/usr/i586-mingw32msvc\n \n USE_UPNP:=0\n+USE_IPV6:=1\n \n INCLUDEPATHS= \\\n  -I\"$(DEPSDIR)/boost_1_49_0\" \\\n@@ -27,7 +28,7 @@ LIBS= \\\n  -l ssl \\\n  -l crypto\n \n-DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6\n+DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n DEBUGFLAGS=-g\n CFLAGS=-O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n@@ -39,6 +40,10 @@ ifdef USE_UPNP\n \tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6\n+endif\n+\n LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi\n \n # TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are"
      },
      {
        "sha": "32d25083b8c4f23c9d505ff73224e329ec542541",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "patch": "@@ -3,6 +3,7 @@\n # file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n USE_UPNP:=0\n+USE_IPV6:=1\n \n INCLUDEPATHS= \\\n  -I\"C:\\boost-1.49.0-mgw\" \\\n@@ -23,7 +24,7 @@ LIBS= \\\n  -l ssl \\\n  -l crypto\n \n-DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6\n+DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n DEBUGFLAGS=-g\n CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n@@ -36,6 +37,10 @@ ifdef USE_UPNP\n  DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6\n+endif\n+\n LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi\n \n # TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are"
      },
      {
        "sha": "3a39db7197039992ca7cda06658efe260f616d33",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "patch": "@@ -20,6 +20,7 @@ LIBPATHS= \\\n  -L\"$(DEPSDIR)/lib/db48\"\n \n USE_UPNP:=1\n+USE_IPV6:=1\n \n LIBS= -dead_strip\n \n@@ -53,7 +54,7 @@ LIBS += \\\n TESTDEFS += -DBOOST_TEST_DYN_LINK\n endif\n \n-DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6\n+DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE\n \n ifdef RELEASE\n # Compile for maximum compatibility and smallest size.\n@@ -102,6 +103,10 @@ else\n endif\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6\n+endif\n+\n all: bitcoind\n \n # auto-generated dependencies:"
      },
      {
        "sha": "57e52813cd2803b3dc12d5d2b8e60c59e0f5755a",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "patch": "@@ -3,8 +3,9 @@\n # file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n USE_UPNP:=0\n+USE_IPV6:=1\n \n-DEFS=-DUSE_IPV6 -DBOOST_SPIRIT_THREADSAFE\n+DEFS=-DBOOST_SPIRIT_THREADSAFE\n \n DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))\n@@ -41,6 +42,10 @@ ifneq (${USE_UPNP}, -)\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6\n+endif\n+\n LIBS+= \\\n  -Wl,-B$(LMODE2) \\\n    -l z \\"
      }
    ]
  },
  {
    "sha": "787027ca38ac447a03f161b65be4a0af4d141bce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODcwMjdjYTM4YWM0NDdhMDNmMTYxYjY1YmU0YTBhZjRkMTQxYmNl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T16:36:40Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:35:39Z"
      },
      "message": "Bugfix: Make USE_UPNP=- work with makefile.{linux-mingw,mingw,osx} too",
      "tree": {
        "sha": "188c52a792be62c0ea4deaea186b951259d31d11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/188c52a792be62c0ea4deaea186b951259d31d11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/787027ca38ac447a03f161b65be4a0af4d141bce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/787027ca38ac447a03f161b65be4a0af4d141bce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/787027ca38ac447a03f161b65be4a0af4d141bce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/787027ca38ac447a03f161b65be4a0af4d141bce/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17cfc3a864b09d46dfe64a0c6be81ad45bdfc8e3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "699583278dba71e0df2c9366d8b69935a8df59d7",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/787027ca38ac447a03f161b65be4a0af4d141bce/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/787027ca38ac447a03f161b65be4a0af4d141bce/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=787027ca38ac447a03f161b65be4a0af4d141bce",
        "patch": "@@ -34,7 +34,10 @@ CFLAGS=-O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(D\n \n TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n \n-ifdef USE_UPNP\n+ifndef USE_UPNP\n+\toverride USE_UPNP = -\n+endif\n+ifneq (${USE_UPNP}, -)\n \tLIBPATHS += -L\"$(DEPSDIR)/miniupnpc\"\n \tLIBS += -l miniupnpc -l iphlpapi\n \tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)"
      },
      {
        "sha": "3e8c4d1c6c31fdaf0763b615ba2885ed3a9ad03c",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/787027ca38ac447a03f161b65be4a0af4d141bce/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/787027ca38ac447a03f161b65be4a0af4d141bce/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=787027ca38ac447a03f161b65be4a0af4d141bce",
        "patch": "@@ -30,7 +30,10 @@ CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-par\n \n TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n \n-ifdef USE_UPNP\n+ifndef USE_UPNP\n+\toverride USE_UPNP = -\n+endif\n+ifneq (${USE_UPNP}, -)\n  INCLUDEPATHS += -I\"C:\\miniupnpc-1.6-mgw\"\n  LIBPATHS += -L\"C:\\miniupnpc-1.6-mgw\"\n  LIBS += -l miniupnpc -l iphlpapi"
      },
      {
        "sha": "2e6bb6e0ba6c0f2f3508d9bf56985bb6935ec3c2",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/787027ca38ac447a03f161b65be4a0af4d141bce/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/787027ca38ac447a03f161b65be4a0af4d141bce/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=787027ca38ac447a03f161b65be4a0af4d141bce",
        "patch": "@@ -94,7 +94,10 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o\n \n-ifdef USE_UPNP\n+ifndef USE_UPNP\n+\toverride USE_UPNP = -\n+endif\n+ifneq (${USE_UPNP}, -)\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)\n ifdef STATIC\n \tLIBS += $(DEPSDIR)/lib/libminiupnpc.a"
      }
    ]
  },
  {
    "sha": "751b8eb120375a1a045d55f267d2d93d807ab649",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTFiOGViMTIwMzc1YTFhMDQ1ZDU1ZjI2N2QyZDkzZDgwN2FiNjQ5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-08T16:43:06Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:35:43Z"
      },
      "message": "Allow building with IPv6 support, but it disabled by default",
      "tree": {
        "sha": "fbeda05784d2a4363e611cd609f126ff4b3fe608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbeda05784d2a4363e611cd609f126ff4b3fe608"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/751b8eb120375a1a045d55f267d2d93d807ab649",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/751b8eb120375a1a045d55f267d2d93d807ab649",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/751b8eb120375a1a045d55f267d2d93d807ab649",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/751b8eb120375a1a045d55f267d2d93d807ab649/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "787027ca38ac447a03f161b65be4a0af4d141bce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/787027ca38ac447a03f161b65be4a0af4d141bce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/787027ca38ac447a03f161b65be4a0af4d141bce"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 16,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f12c65d90aa2d2af009dd5bced6137ba1da70470",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/751b8eb120375a1a045d55f267d2d93d807ab649/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/751b8eb120375a1a045d55f267d2d93d807ab649/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=751b8eb120375a1a045d55f267d2d93d807ab649",
        "patch": "@@ -68,12 +68,16 @@ contains(FIRST_CLASS_MESSAGING, 1) {\n     DEFINES += FIRST_CLASS_MESSAGING\n }\n \n-# use: qmake \"USE_IPV6=1\" (enabled; default)\n+# use: qmake \"USE_IPV6=1\" ( enabled by default; default)\n+#  or: qmake \"USE_IPV6=0\" (disabled by default)\n #  or: qmake \"USE_IPV6=-\" (not supported)\n contains(USE_IPV6, -) {\n \tmessage(Building without IPv6 support)\n } else {\n-\tDEFINES += USE_IPV6\n+\tcount(USE_IPV6, 0) {\n+\t\tUSE_IPV6=1\n+\t}\n+\tDEFINES += USE_IPV6=$$USE_IPV6\n }\n \n contains(BITCOIN_NEED_QT_PLUGINS, 1) {"
      },
      {
        "sha": "66d469de37c92b8ee52a32fb15925973c59d1190",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/751b8eb120375a1a045d55f267d2d93d807ab649/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/751b8eb120375a1a045d55f267d2d93d807ab649/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=751b8eb120375a1a045d55f267d2d93d807ab649",
        "patch": "@@ -477,6 +477,12 @@ bool AppInit2()\n                 SetLimited(net);\n         }\n     }\n+#if defined(USE_IPV6)\n+#if ! USE_IPV6\n+    else\n+        SetLimited(NET_IPV6);\n+#endif\n+#endif\n \n     CService addrProxy;\n     bool fProxy = false;"
      },
      {
        "sha": "f89eb1dce1e59c63eab1b2e53644aca96fdbea34",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=751b8eb120375a1a045d55f267d2d93d807ab649",
        "patch": "@@ -44,7 +44,7 @@ ifneq (${USE_UPNP}, -)\n endif\n \n ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n endif\n \n LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi"
      },
      {
        "sha": "ad61ae0dd3c8a6aca7482e2a8893653988219964",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=751b8eb120375a1a045d55f267d2d93d807ab649",
        "patch": "@@ -41,7 +41,7 @@ ifneq (${USE_UPNP}, -)\n endif\n \n ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n endif\n \n LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi"
      },
      {
        "sha": "364f5cefd889feae7c82238f9c7a6519f1833891",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=751b8eb120375a1a045d55f267d2d93d807ab649",
        "patch": "@@ -107,7 +107,7 @@ endif\n endif\n \n ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n endif\n \n all: bitcoind"
      },
      {
        "sha": "a01ad990528d5a1313cd7712fd79c5d72101fa5b",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/751b8eb120375a1a045d55f267d2d93d807ab649/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=751b8eb120375a1a045d55f267d2d93d807ab649",
        "patch": "@@ -43,7 +43,7 @@ ifneq (${USE_UPNP}, -)\n endif\n \n ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n endif\n \n LIBS+= \\"
      }
    ]
  },
  {
    "sha": "45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTQ2OTA5NWU2NGNhOTA0MWU3ZDNmYmU5MTY4MTEzZDVjMGU5YTFj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-22T19:51:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:50:27Z"
      },
      "message": "Run BDB disk-less for test_bitcoin",
      "tree": {
        "sha": "c359d632f5be6180cf33b559732f9eda2da38fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c359d632f5be6180cf33b559732f9eda2da38fad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232393e3bda19392d1a9727c81bad1796b6061a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232393e3bda19392d1a9727c81bad1796b6061a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232393e3bda19392d1a9727c81bad1796b6061a8"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 60,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5671993d371fc465d259a290ea605da71bb5920c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 3,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
        "patch": "@@ -42,7 +42,8 @@ void CDBEnv::EnvShutdown()\n     {\n         printf(\"EnvShutdown exception: %s (%d)\\n\", e.what(), e.get_errno());\n     }\n-    DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n+    if (!fMockDb)\n+        DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n }\n \n CDBEnv::CDBEnv() : dbenv(0)\n@@ -103,12 +104,48 @@ bool CDBEnv::Open(boost::filesystem::path pathEnv_)\n         return error(\"CDB() : error %d opening database environment\", ret);\n \n     fDbEnvInit = true;\n+    fMockDb = false;\n     return true;\n }\n \n+void CDBEnv::MakeMock()\n+{\n+    if (fDbEnvInit)\n+        throw runtime_error(\"CDBEnv::MakeMock(): already initialized\");\n+\n+    if (fShutdown)\n+        throw runtime_error(\"CDBEnv::MakeMock(): during shutdown\");\n+\n+    printf(\"CDBEnv::MakeMock()\\n\");\n+\n+    dbenv.set_cachesize(1, 0, 1);\n+    dbenv.set_lg_bsize(10485760*4);\n+    dbenv.set_lg_max(10485760);\n+    dbenv.set_lk_max_locks(10000);\n+    dbenv.set_lk_max_objects(10000);\n+    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv.open(NULL,\n+                     DB_CREATE     |\n+                     DB_INIT_LOCK  |\n+                     DB_INIT_LOG   |\n+                     DB_INIT_MPOOL |\n+                     DB_INIT_TXN   |\n+                     DB_THREAD     |\n+                     DB_PRIVATE,\n+                     S_IRUSR | S_IWUSR);\n+    if (ret > 0)\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock(): error %d opening database environment\", ret));\n+\n+    fDbEnvInit = true;\n+    fMockDb = true;\n+}\n+\n void CDBEnv::CheckpointLSN(std::string strFile)\n {\n     dbenv.txn_checkpoint(0, 0, 0);\n+    if (fMockDb)\n+        return;\n     dbenv.lsn_reset(strFile.c_str(), 0);\n }\n \n@@ -138,8 +175,17 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n         {\n             pdb = new Db(&bitdb.dbenv, 0);\n \n+            bool fMockDb = bitdb.IsMock();\n+            if (fMockDb)\n+            {\n+                DbMpoolFile*mpf = pdb->get_mpf();\n+                ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n+                if (ret != 0)\n+                    throw runtime_error(strprintf(\"CDB() : failed to configure for no temp file backing for database %s\", pszFile));\n+            }\n+\n             ret = pdb->open(NULL,      // Txn pointer\n-                            pszFile,   // Filename\n+                            fMockDb ? NULL : pszFile,   // Filename\n                             \"main\",    // Logical db name\n                             DB_BTREE,  // Database type\n                             nFlags,    // Flags\n@@ -337,7 +383,8 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv.txn_checkpoint(0, 0, 0);\n                 if (!IsChainFile(strFile) || fDetachDB) {\n                     printf(\"%s detach\\n\", strFile.c_str());\n-                    dbenv.lsn_reset(strFile.c_str(), 0);\n+                    if (!fMockDb)\n+                        dbenv.lsn_reset(strFile.c_str(), 0);\n                 }\n                 printf(\"%s closed\\n\", strFile.c_str());\n                 mapFileUseCount.erase(mi++);"
      },
      {
        "sha": "4a08bf10a14a3d3f8e4e351a68f1acd2e533b9da",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
        "patch": "@@ -35,6 +35,7 @@ class CDBEnv\n private:\n     bool fDetachDB;\n     bool fDbEnvInit;\n+    bool fMockDb;\n     boost::filesystem::path pathEnv;\n \n     void EnvShutdown();\n@@ -47,6 +48,8 @@ class CDBEnv\n \n     CDBEnv();\n     ~CDBEnv();\n+    void MakeMock();\n+    bool IsMock() { return fMockDb; };\n     bool Open(boost::filesystem::path pathEnv_);\n     void Close();\n     void Flush(bool fShutdown);"
      },
      {
        "sha": "cae0bb6baf56e1097b565dc66dc6df43e574c10e",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45469095e64ca9041e7d3fbe9168113d5c0e9a1c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
        "patch": "@@ -1,6 +1,7 @@\n #define BOOST_TEST_MODULE Bitcoin Test Suite\n #include <boost/test/unit_test.hpp>\n \n+#include \"db.h\"\n #include \"main.h\"\n #include \"wallet.h\"\n \n@@ -14,13 +15,18 @@ struct TestingSetup {\n     TestingSetup() {\n         fPrintToConsole = true; // don't want to write to debug.log file\n         noui_connect();\n-        pwalletMain = new CWallet();\n+        bitdb.MakeMock();\n+        LoadBlockIndex(true);\n+        bool fFirstRun;\n+        pwalletMain = new CWallet(\"wallet.dat\");\n+        pwalletMain->LoadWallet(fFirstRun);\n         RegisterWallet(pwalletMain);\n     }\n     ~TestingSetup()\n     {\n         delete pwalletMain;\n         pwalletMain = NULL;\n+        bitdb.Flush(true);\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "b645451a1fcbc572ec537ca858e23efb913d150f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ1NDUxYTFmY2JjNTcyZWM1MzdjYTg1OGUyM2VmYjkxM2QxNTBm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-27T23:06:09Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:50:32Z"
      },
      "message": "Store a fixed order of transactions (and accounting) in the wallet\n\nFor backward compatibility, new accounting data is stored after a \\0 in the comment string.\nThis way, old versions and third-party software should load and store them, but all actual use (listtransactions, for example) ignores it.",
      "tree": {
        "sha": "8f0d440d17f282f8179f35e140c21bfbd9633e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f0d440d17f282f8179f35e140c21bfbd9633e9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b645451a1fcbc572ec537ca858e23efb913d150f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b645451a1fcbc572ec537ca858e23efb913d150f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b645451a1fcbc572ec537ca858e23efb913d150f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b645451a1fcbc572ec537ca858e23efb913d150f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45469095e64ca9041e7d3fbe9168113d5c0e9a1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45469095e64ca9041e7d3fbe9168113d5c0e9a1c"
      }
    ],
    "stats": {
      "total": 322,
      "additions": 315,
      "deletions": 7
    },
    "files": [
      {
        "sha": "404d430d629692d63beb809627a021bc294d139f",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645451a1fcbc572ec537ca858e23efb913d150f/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645451a1fcbc572ec537ca858e23efb913d150f/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=b645451a1fcbc572ec537ca858e23efb913d150f",
        "patch": "@@ -894,6 +894,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Debit\n     CAccountingEntry debit;\n+    debit.nOrderPos = pwalletMain->nOrderPosNext++;\n     debit.strAccount = strFrom;\n     debit.nCreditDebit = -nAmount;\n     debit.nTime = nNow;\n@@ -903,6 +904,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Credit\n     CAccountingEntry credit;\n+    credit.nOrderPos = pwalletMain->nOrderPosNext++;\n     credit.strAccount = strTo;\n     credit.nCreditDebit = nAmount;\n     credit.nTime = nNow;\n@@ -1336,27 +1338,27 @@ Value listtransactions(const Array& params, bool fHelp)\n     Array ret;\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n \n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n     typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef multimap<int64, TxPair > TxItems;\n-    TxItems txByTime;\n+    TxItems txOrdered;\n \n     // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n     // would make this much faster for applications that do this a lot.\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(make_pair(wtx->GetTxTime(), TxPair(wtx, (CAccountingEntry*)0)));\n+        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n     }\n     list<CAccountingEntry> acentries;\n     walletdb.ListAccountCreditDebit(strAccount, acentries);\n     BOOST_FOREACH(CAccountingEntry& entry, acentries)\n     {\n-        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n     }\n \n     // iterate backwards until we have nCount items to return:\n-    for (TxItems::reverse_iterator it = txByTime.rbegin(); it != txByTime.rend(); ++it)\n+    for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)"
      },
      {
        "sha": "c474fd65c113202cceebdb767ac28a4344f9f6d9",
        "filename": "src/test/accounting_tests.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645451a1fcbc572ec537ca858e23efb913d150f/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645451a1fcbc572ec537ca858e23efb913d150f/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=b645451a1fcbc572ec537ca858e23efb913d150f",
        "patch": "@@ -0,0 +1,123 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include <boost/foreach.hpp>\n+\n+#include \"init.h\"\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n+\n+BOOST_AUTO_TEST_SUITE(accounting_tests)\n+\n+static void\n+GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n+{\n+    std::list<CAccountingEntry> aes;\n+\n+    results.clear();\n+    BOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n+    walletdb.ListAccountCreditDebit(\"\", aes);\n+    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    {\n+        results[ae.nOrderPos] = ae;\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n+{\n+    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    std::vector<CWalletTx*> vpwtx;\n+    CWalletTx wtx;\n+    CAccountingEntry ae;\n+    std::map<int64, CAccountingEntry> results;\n+\n+    ae.strAccount = \"\";\n+    ae.nCreditDebit = 1;\n+    ae.nTime = 1333333333;\n+    ae.strOtherAccount = \"b\";\n+    ae.strComment = \"\";\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    wtx.mapValue[\"comment\"] = \"z\";\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n+    vpwtx[0]->nOrderPos = -1;\n+\n+    ae.nTime = 1333333336;\n+    ae.strOtherAccount = \"c\";\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(2 == results.size());\n+    BOOST_CHECK(results[0].nTime == 1333333333);\n+    BOOST_CHECK(results[0].strComment.empty());\n+    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[2].nTime == 1333333336);\n+    BOOST_CHECK(results[2].strOtherAccount == \"c\");\n+\n+\n+    ae.nTime = 1333333330;\n+    ae.strOtherAccount = \"d\";\n+    ae.nOrderPos = pwalletMain->nOrderPosNext++;\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 3);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(results[0].nTime == 1333333333);\n+    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[2].nTime == 1333333336);\n+    BOOST_CHECK(results[3].nTime == 1333333330);\n+    BOOST_CHECK(results[3].strComment.empty());\n+\n+\n+    wtx.mapValue[\"comment\"] = \"y\";\n+    --wtx.nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n+\n+    wtx.mapValue[\"comment\"] = \"x\";\n+    --wtx.nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n+    vpwtx[2]->nOrderPos = -1;\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 3);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n+    BOOST_CHECK(results[1].nTime == 1333333333);\n+    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[3].nTime == 1333333336);\n+    BOOST_CHECK(results[4].nTime == 1333333330);\n+    BOOST_CHECK(results[4].strComment.empty());\n+    BOOST_CHECK(5 == vpwtx[1]->nOrderPos);\n+\n+\n+    ae.nTime = 1333333334;\n+    ae.strOtherAccount = \"e\";\n+    ae.nOrderPos = -1;\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 4);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n+    BOOST_CHECK(results[1].nTime == 1333333333);\n+    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[3].nTime == 1333333336);\n+    BOOST_CHECK(results[3].strComment.empty());\n+    BOOST_CHECK(results[4].nTime == 1333333330);\n+    BOOST_CHECK(results[4].strComment.empty());\n+    BOOST_CHECK(results[5].nTime == 1333333334);\n+    BOOST_CHECK(6 == vpwtx[1]->nOrderPos);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "232dcf596606b6ef6b11b499e4d8ffc2f3e0e9bd",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645451a1fcbc572ec537ca858e23efb913d150f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645451a1fcbc572ec537ca858e23efb913d150f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b645451a1fcbc572ec537ca858e23efb913d150f",
        "patch": "@@ -336,7 +336,10 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         wtx.BindWallet(this);\n         bool fInsertedNew = ret.second;\n         if (fInsertedNew)\n+        {\n             wtx.nTimeReceived = GetAdjustedTime();\n+            wtx.nOrderPos = nOrderPosNext++;\n+        }\n \n         bool fUpdated = false;\n         if (!fInsertedNew)"
      },
      {
        "sha": "b32face5bfa92211dc1372eaf03ec77120691eee",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 82,
        "deletions": 1,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645451a1fcbc572ec537ca858e23efb913d150f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645451a1fcbc572ec537ca858e23efb913d150f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=b645451a1fcbc572ec537ca858e23efb913d150f",
        "patch": "@@ -5,11 +5,17 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n \n class CWalletTx;\n class CReserveKey;\n@@ -103,6 +109,7 @@ class CWallet : public CCryptoKeyStore\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    int64 nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n     std::map<CTxDestination, std::string> mapAddressBook;\n@@ -304,6 +311,32 @@ class CReserveKey\n };\n \n \n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static\n+void\n+ReadOrderPos(int64& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static\n+void\n+WriteOrderPos(const int64& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+\n /** A transaction with a bunch of additional info that only the owner cares about. \n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n@@ -314,13 +347,14 @@ class CWalletTx : public CMerkleTx\n \n public:\n     std::vector<CMerkleTx> vtxPrev;\n-    std::map<std::string, std::string> mapValue;\n+    mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n     char fFromMe;\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n+    int64 nOrderPos;  // position in ordered transaction list\n \n     // memory only\n     mutable bool fDebitCached;\n@@ -371,6 +405,7 @@ class CWalletTx : public CMerkleTx\n         nCreditCached = 0;\n         nAvailableCreditCached = 0;\n         nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n     IMPLEMENT_SERIALIZE\n@@ -392,6 +427,8 @@ class CWalletTx : public CMerkleTx\n                     fSpent = true;\n             }\n             pthis->mapValue[\"spent\"] = str;\n+\n+            WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n@@ -414,9 +451,13 @@ class CWalletTx : public CMerkleTx\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n         }\n \n+        if (fRead)\n+            ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n+\n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n+        pthis->mapValue.erase(\"n\");\n     )\n \n     // marks certain txout's as spent\n@@ -705,6 +746,9 @@ class CAccountingEntry\n     int64 nTime;\n     std::string strOtherAccount;\n     std::string strComment;\n+    mapValue_t mapValue;\n+    int64 nOrderPos;  // position in ordered transaction list\n+    uint64 nEntryNo;\n \n     CAccountingEntry()\n     {\n@@ -718,18 +762,55 @@ class CAccountingEntry\n         strAccount.clear();\n         strOtherAccount.clear();\n         strComment.clear();\n+        nOrderPos = -1;\n     }\n \n     IMPLEMENT_SERIALIZE\n     (\n+        CAccountingEntry& me = *const_cast<CAccountingEntry*>(this);\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         // Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);\n         READWRITE(nTime);\n         READWRITE(strOtherAccount);\n+\n+        if (!fRead)\n+        {\n+            WriteOrderPos(nOrderPos, me.mapValue);\n+\n+            if (!(mapValue.empty() && _ssExtra.empty()))\n+            {\n+                CDataStream ss(nType, nVersion);\n+                ss.insert(ss.begin(), '\\0');\n+                ss << mapValue;\n+                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n+                me.strComment.append(ss.str());\n+            }\n+        }\n+\n         READWRITE(strComment);\n+\n+        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n+        if (fRead)\n+        {\n+            me.mapValue.clear();\n+            if (std::string::npos != nSepPos)\n+            {\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                ss >> me.mapValue;\n+                me._ssExtra = std::vector<char>(ss.begin(), ss.end());\n+            }\n+            ReadOrderPos(me.nOrderPos, me.mapValue);\n+        }\n+        if (std::string::npos != nSepPos)\n+            me.strComment.erase(nSepPos);\n+\n+        me.mapValue.erase(\"n\");\n     )\n+\n+private:\n+    std::vector<char> _ssExtra;\n };\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);"
      },
      {
        "sha": "6c254823ff5e9941887341b87c353621b30262b7",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 1,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645451a1fcbc572ec537ca858e23efb913d150f/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645451a1fcbc572ec537ca858e23efb913d150f/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=b645451a1fcbc572ec537ca858e23efb913d150f",
        "patch": "@@ -42,9 +42,14 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n     return Write(make_pair(string(\"acc\"), strAccount), account);\n }\n \n+bool CWalletDB::WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry)\n+{\n+    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n+}\n+\n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n {\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n+    return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n@@ -95,19 +100,94 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n             break;\n \n         ssValue >> acentry;\n+        ssKey >> acentry.nEntryNo;\n         entries.push_back(acentry);\n     }\n \n     pcursor->close();\n }\n \n \n+int\n+CWalletDB::ReorderTransactions(CWallet* pwallet)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    // Old wallets didn't have any defined order for transactions\n+    // Probably a bad idea to change the output of this\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef multimap<int64, TxPair > TxItems;\n+    TxItems txByTime;\n+\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    ListAccountCreditDebit(\"\", acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    int64& nOrderPosNext = pwallet->nOrderPosNext;\n+    nOrderPosNext = 0;\n+    std::vector<int64> nOrderPosOffsets;\n+    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+    {\n+        CWalletTx *const pwtx = (*it).second.first;\n+        CAccountingEntry *const pacentry = (*it).second.second;\n+        int64& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+        if (nOrderPos == -1)\n+        {\n+            nOrderPos = nOrderPosNext++;\n+            nOrderPosOffsets.push_back(nOrderPos);\n+\n+            if (pacentry)\n+                // Have to write accounting regardless, since we don't keep it in memory\n+                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+        else\n+        {\n+            int64 nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64& nOffsetStart, nOrderPosOffsets)\n+            {\n+                if (nOrderPos >= nOffsetStart)\n+                    ++nOrderPosOff;\n+            }\n+            nOrderPos += nOrderPosOff;\n+            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+\n+            if (!nOrderPosOff)\n+                continue;\n+\n+            // Since we're changing the order, write it back\n+            if (pwtx)\n+            {\n+                if (!WriteTx(pwtx->GetHash(), *pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+    }\n+\n+    return DB_LOAD_OK;\n+}\n+\n+\n int CWalletDB::LoadWallet(CWallet* pwallet)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     int nFileVersion = 0;\n     vector<uint256> vWalletUpgrade;\n     bool fIsEncrypted = false;\n+    bool fAnyUnordered = false;\n \n     //// todo: shouldn't we catch exceptions and try to recover and continue?\n     {\n@@ -183,6 +263,9 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                     vWalletUpgrade.push_back(hash);\n                 }\n \n+                if (wtx.nOrderPos == -1)\n+                    fAnyUnordered = true;\n+\n                 //// debug print\n                 //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n                 //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n@@ -199,6 +282,14 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 ssKey >> nNumber;\n                 if (nNumber > nAccountingEntryNumber)\n                     nAccountingEntryNumber = nNumber;\n+\n+                if (!fAnyUnordered)\n+                {\n+                    CAccountingEntry acentry;\n+                    ssValue >> acentry;\n+                    if (acentry.nOrderPos == -1)\n+                        fAnyUnordered = true;\n+                }\n             }\n             else if (strType == \"key\" || strType == \"wkey\")\n             {\n@@ -318,6 +409,10 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n     if (nFileVersion < CLIENT_VERSION) // Update\n         WriteVersion(CLIENT_VERSION);\n \n+    if (fAnyUnordered)\n+        return ReorderTransactions(pwallet);\n+\n+    // If you add anything else here... be sure to do it if ReorderTransactions returns DB_LOAD_OK too!\n     return DB_LOAD_OK;\n }\n "
      },
      {
        "sha": "187be65a978361d3334de9e6241ef0ac7625ef20",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b645451a1fcbc572ec537ca858e23efb913d150f/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b645451a1fcbc572ec537ca858e23efb913d150f/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=b645451a1fcbc572ec537ca858e23efb913d150f",
        "patch": "@@ -170,10 +170,14 @@ class CWalletDB : public CDB\n \n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+private:\n+    bool WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry);\n+public:\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     int64 GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n+    int ReorderTransactions(CWallet*);\n     int LoadWallet(CWallet* pwallet);\n };\n "
      }
    ]
  },
  {
    "sha": "9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjQ5ZjhlZjQ1MWRhZmRkZjNlNzM3YTljMmQyYmVmY2IyYWEyNGU3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-28T16:56:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:55:24Z"
      },
      "message": "JSON-RPC: Add \"blocktime\" and (for wallet transactions) \"timereceived\" to transaction Object outputs",
      "tree": {
        "sha": "0b5b05fbbc32e57220247b1d10ac9737bc304eeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b5b05fbbc32e57220247b1d10ac9737bc304eeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b645451a1fcbc572ec537ca858e23efb913d150f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b645451a1fcbc572ec537ca858e23efb913d150f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b645451a1fcbc572ec537ca858e23efb913d150f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "255a89bd8c88e4d4ee3f3044c02f9016841c6efb",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
        "patch": "@@ -184,9 +184,11 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n+        entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n     entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n+    entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }"
      },
      {
        "sha": "3ba13dc321e5a1af782ba107ad3da47f56fa09f6",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
        "patch": "@@ -99,6 +99,7 @@ TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n             {\n                 entry.push_back(Pair(\"confirmations\", 1 + nBestHeight - pindex->nHeight));\n                 entry.push_back(Pair(\"time\", (boost::int64_t)pindex->nTime));\n+                entry.push_back(Pair(\"blocktime\", (boost::int64_t)pindex->nTime));\n             }\n             else\n                 entry.push_back(Pair(\"confirmations\", 0));"
      }
    ]
  },
  {
    "sha": "f45fa25bb9efb6f83409e71b972f07cce0eb4520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDVmYTI1YmI5ZWZiNmY4MzQwOWU3MWI5NzJmMDdjY2UwZWI0NTIw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-28T18:45:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:57:36Z"
      },
      "message": "Choose reasonable \"smart\" times to display for transactions\n\nLogic:\n- If sending a transaction, assign its timestamp to the current time.\n- If receiving a transaction outside a block, assign its timestamp to the current time.\n- If receiving a block with a future timestamp, assign all its (not already known) transactions' timestamps to the current time.\n- If receiving a block with a past timestamp, before the most recent known transaction (that we care about), assign all its (not already known) transactions' timestamps to the same timestamp as that most-recent-known transaction.\n- If receiving a block with a past timestamp, but after the most recent known transaction, assign all its (not already known) transactions' timestamps to the block time.",
      "tree": {
        "sha": "5a16f3753b452b4f3cd28d39b7ba6a37f381ff06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a16f3753b452b4f3cd28d39b7ba6a37f381ff06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f45fa25bb9efb6f83409e71b972f07cce0eb4520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f45fa25bb9efb6f83409e71b972f07cce0eb4520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f45fa25bb9efb6f83409e71b972f07cce0eb4520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f45fa25bb9efb6f83409e71b972f07cce0eb4520/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b49f8ef451dafddf3e737a9c2d2befcb2aa24e7"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 88,
      "deletions": 23
    },
    "files": [
      {
        "sha": "a554e8aae1538bb9f8795215f8a200b2cd986bbd",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 20,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f45fa25bb9efb6f83409e71b972f07cce0eb4520/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f45fa25bb9efb6f83409e71b972f07cce0eb4520/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=f45fa25bb9efb6f83409e71b972f07cce0eb4520",
        "patch": "@@ -1338,29 +1338,11 @@ Value listtransactions(const Array& params, bool fHelp)\n         throw JSONRPCError(-8, \"Negative from\");\n \n     Array ret;\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n-    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64, TxPair > TxItems;\n-    TxItems txOrdered;\n \n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    list<CAccountingEntry> acentries;\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n-    }\n+    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(strAccount);\n \n     // iterate backwards until we have nCount items to return:\n-    for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)"
      },
      {
        "sha": "4de83d41cf8570aba123d50867c2f6468ff526d4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 1,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f45fa25bb9efb6f83409e71b972f07cce0eb4520/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f45fa25bb9efb6f83409e71b972f07cce0eb4520/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=f45fa25bb9efb6f83409e71b972f07cce0eb4520",
        "patch": "@@ -291,6 +291,31 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     return true;\n }\n \n+CWallet::TxItems\n+CWallet::OrderedTxItems(std::string strAccount)\n+{\n+    CWalletDB walletdb(strWalletFile);\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n+    TxItems txOrdered;\n+\n+    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n+    // would make this much faster for applications that do this a lot.\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    walletdb.ListAccountCreditDebit(strAccount, acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    return txOrdered;\n+}\n+\n void CWallet::WalletUpdateSpent(const CTransaction &tx)\n {\n     // Anytime a signature is successfully verified, it's proof the outpoint is spent.\n@@ -339,6 +364,51 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         {\n             wtx.nTimeReceived = GetAdjustedTime();\n             wtx.nOrderPos = nOrderPosNext++;\n+\n+            wtx.nTimeSmart = wtx.nTimeReceived;\n+            if (wtxIn.hashBlock != 0)\n+            {\n+                if (mapBlockIndex.count(wtxIn.hashBlock))\n+                {\n+                    unsigned int latestNow = wtx.nTimeReceived;\n+                    unsigned int latestEntry = 0;\n+                    {\n+                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                        int64 latestTolerated = latestNow + 300;\n+                        TxItems txOrdered = OrderedTxItems();\n+                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        {\n+                            CWalletTx *const pwtx = (*it).second.first;\n+                            if (pwtx == &wtx)\n+                                continue;\n+                            CAccountingEntry *const pacentry = (*it).second.second;\n+                            int64 nSmartTime;\n+                            if (pwtx)\n+                            {\n+                                nSmartTime = pwtx->nTimeSmart;\n+                                if (!nSmartTime)\n+                                    nSmartTime = pwtx->nTimeReceived;\n+                            }\n+                            else\n+                                nSmartTime = pacentry->nTime;\n+                            if (nSmartTime <= latestTolerated)\n+                            {\n+                                latestEntry = nSmartTime;\n+                                if (nSmartTime > latestNow)\n+                                    latestNow = nSmartTime;\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    unsigned int& blocktime = mapBlockIndex[wtxIn.hashBlock]->nTime;\n+                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+                }\n+                else\n+                    printf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                           wtxIn.GetHash().ToString().substr(0,10).c_str(),\n+                           wtxIn.hashBlock.ToString().c_str());\n+            }\n         }\n \n         bool fUpdated = false;\n@@ -488,7 +558,8 @@ bool CWallet::IsChange(const CTxOut& txout) const\n \n int64 CWalletTx::GetTxTime() const\n {\n-    return nTimeReceived;\n+    int64 n = nTimeSmart;\n+    return n ? n : nTimeReceived;\n }\n \n int CWalletTx::GetRequestCount() const"
      },
      {
        "sha": "9103aa675e22e1d2bd50be6323017d5efd936a6c",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f45fa25bb9efb6f83409e71b972f07cce0eb4520/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f45fa25bb9efb6f83409e71b972f07cce0eb4520/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=f45fa25bb9efb6f83409e71b972f07cce0eb4520",
        "patch": "@@ -17,6 +17,7 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n \n+class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n class CWalletDB;\n@@ -143,6 +144,10 @@ class CWallet : public CCryptoKeyStore\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64, TxPair > TxItems;\n+    TxItems OrderedTxItems(std::string strAccount = \"\");\n+\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n@@ -351,6 +356,7 @@ class CWalletTx : public CMerkleTx\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n+    unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n@@ -394,6 +400,7 @@ class CWalletTx : public CMerkleTx\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n         nTimeReceived = 0;\n+        nTimeSmart = 0;\n         fFromMe = false;\n         strFromAccount.clear();\n         vfSpent.clear();\n@@ -429,6 +436,9 @@ class CWalletTx : public CMerkleTx\n             pthis->mapValue[\"spent\"] = str;\n \n             WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n+\n+            if (nTimeSmart)\n+                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n@@ -449,15 +459,17 @@ class CWalletTx : public CMerkleTx\n                     pthis->vfSpent.push_back(c != '0');\n             else\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n-        }\n \n-        if (fRead)\n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n+            pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n+        }\n+\n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n         pthis->mapValue.erase(\"n\");\n+        pthis->mapValue.erase(\"timesmart\");\n     )\n \n     // marks certain txout's as spent"
      }
    ]
  },
  {
    "sha": "27b24244c4d1f97690d5908e3412ac5306920281",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2IyNDI0NGM0ZDFmOTc2OTBkNTkwOGUzNDEyYWM1MzA2OTIwMjgx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-01T22:36:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-01T22:36:01Z"
      },
      "message": "CreateNewBlock: Consider parent transactions in the \"cost\" of child transactions until confirmed, and confirm them together",
      "tree": {
        "sha": "d9b8da886d7d76d638d3fc31c6a60dc9a2f1c3f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9b8da886d7d76d638d3fc31c6a60dc9a2f1c3f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27b24244c4d1f97690d5908e3412ac5306920281",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b24244c4d1f97690d5908e3412ac5306920281",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27b24244c4d1f97690d5908e3412ac5306920281",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b24244c4d1f97690d5908e3412ac5306920281/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ce7915aad505fd6e57f599b5b43fc241d8b4cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce7915aad505fd6e57f599b5b43fc241d8b4cb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ce7915aad505fd6e57f599b5b43fc241d8b4cb4"
      }
    ],
    "stats": {
      "total": 299,
      "additions": 204,
      "deletions": 95
    },
    "files": [
      {
        "sha": "8529ac51b3e6ec5816243a888a1f6467d5c7a1ad",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 204,
        "deletions": 95,
        "changes": 299,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b24244c4d1f97690d5908e3412ac5306920281/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b24244c4d1f97690d5908e3412ac5306920281/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=27b24244c4d1f97690d5908e3412ac5306920281",
        "patch": "@@ -3324,36 +3324,159 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n     }\n }\n \n-// Some explaining would be appreciated\n-class COrphan\n+// CTxInfo represents a logical transaction to potentially be included in blocks\n+// It stores extra metadata such as the subjective priority of a transaction at the time of building the block\n+// When there are unconfirmed transactions that depend on other unconfirmed transactions, these \"child\" transactions' CTxInfo object factors in its \"parents\" to its priority and effective size; this way, the \"child\" can cover the \"cost\" of its \"parents\", and the \"parents\" are included into the block as part of the \"child\"\n+\n+class CTxInfo;\n+typedef std::map<uint256, CTxInfo> mapInfo_t;\n+\n+class CTxInfo\n {\n public:\n+    mapInfo_t *pmapInfoById;\n     CTransaction* ptx;\n+    uint256 hash;\n+private:\n     set<uint256> setDependsOn;\n+public:\n+    set<uint256> setDependents;\n     double dPriority;\n-    double dFeePerKb;\n+    uint64 nTxFee;\n+    bool fInvalid;\n+    unsigned int nSize;\n+    unsigned int nEffectiveSizeCached;\n \n-    COrphan(CTransaction* ptxIn)\n+    CTxInfo()\n     {\n-        ptx = ptxIn;\n-        dPriority = dFeePerKb = 0;\n+        pmapInfoById = NULL;\n+        ptx = NULL;\n+        hash = 0;\n+        dPriority = 0;\n+        nTxFee = 0;\n+        fInvalid = false;\n+        nSize = 0;\n+        nEffectiveSizeCached = 0;\n     }\n \n     void print() const\n     {\n-        printf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n-               ptx->GetHash().ToString().substr(0,10).c_str(), dPriority, dFeePerKb);\n+        printf(\"CTxInfo(hash=%s, dPriority=%.1f, nTxFee=%\"PRI64u\")\\n\",\n+               ptx->GetHash().ToString().substr(0,10).c_str(), dPriority, nTxFee);\n         BOOST_FOREACH(uint256 hash, setDependsOn)\n             printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n     }\n+\n+    void addDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.insert(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    void rmDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.erase(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    // effectiveSize handles inheriting the fInvalid flag as a side effect\n+    unsigned int\n+    effectiveSize()\n+    {\n+        if (fInvalid)\n+            return -1;\n+\n+        if (nEffectiveSizeCached)\n+            return nEffectiveSizeCached;\n+\n+        assert(pmapInfoById);\n+\n+        if (!nSize)\n+            nSize = ::GetSerializeSize(*ptx, SER_NETWORK, PROTOCOL_VERSION);\n+        unsigned int nEffectiveSize = nSize;\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            nEffectiveSize += depinfo.effectiveSize();\n+\n+            if (depinfo.fInvalid)\n+            {\n+                fInvalid = true;\n+                return -1;\n+            }\n+        }\n+        nEffectiveSizeCached = nEffectiveSize;\n+        return nEffectiveSize;\n+    }\n+\n+    double\n+    getPriority()\n+    {\n+        // Priority is sum(valuein * age) / txsize\n+        return dPriority / effectiveSize();\n+    }\n+\n+    double\n+    getFeePerKB()\n+    {\n+        return double(nTxFee) / (double(effectiveSize()) / 1000);\n+    }\n+\n+    unsigned int\n+    GetLegacySigOpCount()\n+    {\n+        assert(pmapInfoById);\n+\n+        unsigned int n = ptx->GetLegacySigOpCount();\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            n += depinfo.GetLegacySigOpCount();\n+        }\n+        return n;\n+    }\n+\n+    bool\n+    DoInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoolTmp, CBlockIndex*pindexPrev, std::vector<CTxInfo*>& vAdded, unsigned int& nTxSigOps)\n+    {\n+        CTransaction& tx = *ptx;\n+\n+        if (mapTestPoolTmp.count(hash))\n+            // Already included in block template\n+            return true;\n+\n+        assert(pmapInfoById);\n+\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            if (!depinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n+                return false;\n+        }\n+\n+        MapPrevTx mapInputs;\n+        bool fInvalid;\n+        if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            return false;\n+\n+        nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+\n+        if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n+            return false;\n+\n+        mapTestPoolTmp[hash] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n+        vAdded.push_back(this);\n+\n+        return true;\n+    }\n };\n \n \n uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n // We want to sort transactions by priority and fee, so:\n-typedef boost::tuple<double, double, CTransaction*> TxPriority;\n+typedef CTxInfo* TxPriority;\n class TxPriorityCompare\n {\n     bool byFee;\n@@ -3363,15 +3486,15 @@ class TxPriorityCompare\n     {\n         if (byFee)\n         {\n-            if (a.get<1>() == b.get<1>())\n-                return a.get<0>() < b.get<0>();\n-            return a.get<1>() < b.get<1>();\n+            if (a->getFeePerKB() == b->getFeePerKB())\n+                return a->getPriority() < b->getPriority();\n+            return a->getFeePerKB() < b->getFeePerKB();\n         }\n         else\n         {\n-            if (a.get<0>() == b.get<0>())\n-                return a.get<1>() < b.get<1>();\n-            return a.get<0>() < b.get<0>();\n+            if (a->getPriority() == b->getPriority())\n+                return a->getFeePerKB() < b->getFeePerKB();\n+            return a->getPriority() < b->getPriority();\n         }\n     }\n };\n@@ -3429,78 +3552,67 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         CTxDB txdb(\"r\");\n \n         // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n+        mapInfo_t mapInfoById;\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n+\n         for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n         {\n             CTransaction& tx = (*mi).second;\n             if (tx.IsCoinBase() || !tx.IsFinal())\n                 continue;\n \n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n+            const uint256& hash = tx.GetHash();\n+            CTxInfo& txinfo = mapInfoById[hash];\n+            txinfo.hash = hash;\n+            txinfo.pmapInfoById = &mapInfoById;\n+            txinfo.ptx = &tx;\n+\n+            double& dPriority = txinfo.dPriority;\n+            uint64& nTxFee = txinfo.nTxFee;\n             int64 nTotalIn = 0;\n-            bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n                 // Read prev transaction\n                 CTransaction txPrev;\n                 CTxIndex txindex;\n-                if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n+                int64 nValueIn;\n+                int nConf;\n+                if (txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n                 {\n-                    // This should never happen; all transactions in the memory\n-                    // pool should connect to either transactions in the chain\n-                    // or other transactions in the memory pool.\n-                    if (!mempool.mapTx.count(txin.prevout.hash))\n-                    {\n-                        printf(\"ERROR: mempool transaction missing input\\n\");\n-                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n-                        fMissingInputs = true;\n-                        if (porphan)\n-                            vOrphan.pop_back();\n-                        break;\n-                    }\n-\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].vout[txin.prevout.n].nValue;\n-                    continue;\n+                    // Input is confirmed\n+                    nConf = txindex.GetDepthInMainChain();\n+                    nValueIn = txPrev.vout[txin.prevout.n].nValue;\n+                    dPriority += (double)nValueIn * nConf;\n+                }\n+                else\n+                if (mempool.mapTx.count(txin.prevout.hash))\n+                {\n+                    // Input is still unconfirmed\n+                    const uint256& hashPrev = txin.prevout.hash;\n+                    nValueIn = mempool.mapTx[hashPrev].vout[txin.prevout.n].nValue;\n+                    txinfo.addDependsOn(hashPrev);\n+                    mapInfoById[hashPrev].setDependents.insert(hash);\n+                    nConf = 0;\n+                }\n+                else\n+                {\n+                    // We don't know where the input is\n+                    // In this case, it's impossible to include this transaction in a block, so mark it invalid and move on\n+                    txinfo.fInvalid = true;\n+                    printf(\"priority %s invalid input %s\", txinfo.hash.ToString().substr(0,10).c_str(), txin.prevout.hash.ToString().substr(0,10).c_str());\n+                    goto nexttxn;\n                 }\n-                int64 nValueIn = txPrev.vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n-\n-                int nConf = txindex.GetDepthInMainChain();\n-                dPriority += (double)nValueIn * nConf;\n             }\n-            if (fMissingInputs) continue;\n \n-            // Priority is sum(valuein * age) / txsize\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            dPriority /= nTxSize;\n+            nTxFee = nTotalIn - tx.GetValueOut();\n \n-            // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n-            // client code rounds up the size to the nearest 1K. That's good, because it gives an\n-            // incentive to create smaller transactions.\n-            double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n+            vecPriority.push_back(&txinfo);\n \n-            if (porphan)\n-            {\n-                porphan->dPriority = dPriority;\n-                porphan->dFeePerKb = dFeePerKb;\n-            }\n-            else\n-                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &(*mi).second));\n+nexttxn:    (void)1;\n         }\n \n         // Collect transactions into block\n@@ -3516,20 +3628,24 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         while (!vecPriority.empty())\n         {\n             // Take highest priority transaction off the priority queue:\n-            double dPriority = vecPriority.front().get<0>();\n-            double dFeePerKb = vecPriority.front().get<1>();\n-            CTransaction& tx = *(vecPriority.front().get<2>());\n-\n+            CTxInfo& txinfo = *(vecPriority.front());\n             std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             vecPriority.pop_back();\n \n+            if (txinfo.fInvalid)\n+                continue;\n+\n+            CTransaction& tx = *txinfo.ptx;\n+            double dPriority = txinfo.getPriority();\n+            double dFeePerKb = txinfo.getFeePerKB();\n+\n             // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+            unsigned int nTxSize = txinfo.effectiveSize();\n             if (nBlockSize + nTxSize >= nBlockMaxSize)\n                 continue;\n \n             // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = tx.GetLegacySigOpCount();\n+            unsigned int nTxSigOps = txinfo.GetLegacySigOpCount();\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n@@ -3547,55 +3663,48 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            // Connecting shouldn't fail due to dependency on other memory pool transactions\n-            // because we're already processing them in order of dependency\n             map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n-            MapPrevTx mapInputs;\n-            bool fInvalid;\n-            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            std::vector<CTxInfo*> vAdded;\n+            if (!txinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n                 continue;\n \n-            int64 nTxFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();\n-\n-            nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n-                continue;\n-            mapTestPoolTmp[tx.GetHash()] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n             swap(mapTestPool, mapTestPoolTmp);\n \n             // Added\n-            pblock->vtx.push_back(tx);\n             nBlockSize += nTxSize;\n-            ++nBlockTx;\n+            nBlockTx += vAdded.size();\n             nBlockSigOps += nTxSigOps;\n-            nFees += nTxFees;\n \n             if (fDebug && GetBoolArg(\"-printpriority\"))\n             {\n                 printf(\"priority %.1f feeperkb %.1f txid %s\\n\",\n                        dPriority, dFeePerKb, tx.GetHash().ToString().c_str());\n             }\n \n-            // Add transactions that depend on this one to the priority queue\n-            uint256 hash = tx.GetHash();\n-            if (mapDependers.count(hash))\n+            bool fResort = false;\n+            BOOST_FOREACH(CTxInfo* ptxinfo, vAdded)\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n+                pblock->vtx.push_back(*ptxinfo->ptx);\n+                nFees += ptxinfo->nTxFee;\n+\n+                ptxinfo->fInvalid = true;\n+                if (!ptxinfo->setDependents.empty())\n                 {\n-                    if (!porphan->setDependsOn.empty())\n+                    fResort = true;\n+                    BOOST_FOREACH(const uint256& dhash, ptxinfo->setDependents)\n                     {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                        {\n-                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->dFeePerKb, porphan->ptx));\n-                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-                        }\n+                        CTxInfo& dtxinfo = mapInfoById[dhash];\n+                        dtxinfo.rmDependsOn(ptxinfo->hash);\n+                        fResort = true;\n                     }\n                 }\n             }\n+            if (fResort)\n+                // Re-sort the priority queue to pick up on improved standing\n+                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n         }\n \n         nLastBlockTx = nBlockTx;"
      }
    ]
  },
  {
    "sha": "3390014fd0d91b0148425e794ac01c10b646a682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzkwMDE0ZmQwZDkxYjAxNDg0MjVlNzk0YWMwMWMxMGI2NDZhNjgy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-12T14:31:32Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-03T01:02:51Z"
      },
      "message": "Minimal BIP 22 (getblocktemplate) support\n\n- Replaces getmemorypool with new getblocktemplate\n- Add missing keys: coinbaseaux, target, mutable, noncerange, sigoplimit, sizelimit, and height\n- Accept and send parameter Objects, checking \"mode\" key if present\n- Return rejection reason \"rejected\" for submit mode",
      "tree": {
        "sha": "e5ed1c8f1b6fc2072874b25b469113aa704339eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ed1c8f1b6fc2072874b25b469113aa704339eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3390014fd0d91b0148425e794ac01c10b646a682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3390014fd0d91b0148425e794ac01c10b646a682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3390014fd0d91b0148425e794ac01c10b646a682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3390014fd0d91b0148425e794ac01c10b646a682/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3d8f14dca6a86fa103d86ef125e95372f860c"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 95,
      "deletions": 20
    },
    "files": [
      {
        "sha": "94d46b69de8e906272fb5bf8bf6563ed75192e66",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 20,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3390014fd0d91b0148425e794ac01c10b646a682/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3390014fd0d91b0148425e794ac01c10b646a682/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=3390014fd0d91b0148425e794ac01c10b646a682",
        "patch": "@@ -1862,24 +1862,43 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getmemorypool(const Array& params, bool fHelp)\n+Value getblocktemplate(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getmemorypool [data]\\n\"\n-            \"If [data] is not specified, returns data needed to construct a block to work on:\\n\"\n+            \"getblocktemplate [params]\\n\"\n+            \"If [params] does not contain a \\\"data\\\" key, returns data needed to construct a block to work on:\\n\"\n             \"  \\\"version\\\" : block version\\n\"\n             \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"coinbaseaux\\\" : data that should be included in coinbase\\n\"\n             \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n-            \"  \\\"coinbaseflags\\\" : data that should be included in coinbase so support for new features can be judged\\n\"\n-            \"  \\\"time\\\" : timestamp appropriate for next block\\n\"\n+            \"  \\\"target\\\" : hash target\\n\"\n             \"  \\\"mintime\\\" : minimum timestamp appropriate for next block\\n\"\n             \"  \\\"curtime\\\" : current timestamp\\n\"\n+            \"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"\n+            \"  \\\"noncerange\\\" : range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"\n+            \"  \\\"sizelimit\\\" : limit of block size\\n\"\n             \"  \\\"bits\\\" : compressed target of next block\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+            \"  \\\"height\\\" : height of the next block\\n\"\n+            \"If [params] does contain a \\\"data\\\" key, tries to solve the block and returns null if it was successful (and \\\"rejected\\\" if not)\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n \n-    if (params.size() == 0)\n+    const Object& oparam = params[0].get_obj();\n+    std::string strMode;\n+    {\n+        const Value& modeval = find_value(oparam, \"mode\");\n+        if (modeval.type() == str_type)\n+            strMode = modeval.get_str();\n+        else\n+        if (find_value(oparam, \"data\").type() == null_type)\n+            strMode = \"template\";\n+        else\n+            strMode = \"submit\";\n+    }\n+\n+    if (strMode == \"template\")\n     {\n         if (vNodes.empty())\n             throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n@@ -1914,38 +1933,93 @@ Value getmemorypool(const Array& params, bool fHelp)\n         pblock->nNonce = 0;\n \n         Array transactions;\n-        BOOST_FOREACH(CTransaction tx, pblock->vtx) {\n-            if(tx.IsCoinBase())\n+        map<uint256, int64_t> setTxIndex;\n+        int i = 0;\n+        CTxDB txdb(\"r\");\n+        BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n+        {\n+            uint256 txHash = tx.GetHash();\n+            setTxIndex[txHash] = i++;\n+\n+            if (tx.IsCoinBase())\n                 continue;\n \n-            CDataStream ssTx;\n+            Object entry;\n+\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n             ssTx << tx;\n+            entry.push_back(Pair(\"data\", HexStr(ssTx.begin(), ssTx.end())));\n \n-            transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+            entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+\n+            MapPrevTx mapInputs;\n+            map<uint256, CTxIndex> mapUnused;\n+            bool fInvalid = false;\n+            if (tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n+            {\n+                entry.push_back(Pair(\"fee\", (int64_t)(tx.GetValueIn(mapInputs) - tx.GetValueOut())));\n+\n+                Array deps;\n+                BOOST_FOREACH (MapPrevTx::value_type& inp, mapInputs)\n+                {\n+                    if (setTxIndex.count(inp.first))\n+                        deps.push_back(setTxIndex[inp.first]);\n+                }\n+                entry.push_back(Pair(\"depends\", deps));\n+\n+                int64_t nSigOps = tx.GetLegacySigOpCount();\n+                nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+                entry.push_back(Pair(\"sigops\", nSigOps));\n+            }\n+\n+            transactions.push_back(entry);\n+        }\n+\n+        Object aux;\n+        aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+\n+        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+\n+        static Array aMutable;\n+        if (aMutable.empty())\n+        {\n+            aMutable.push_back(\"time\");\n+            aMutable.push_back(\"transactions\");\n+            aMutable.push_back(\"prevblock\");\n         }\n \n         Object result;\n         result.push_back(Pair(\"version\", pblock->nVersion));\n         result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n         result.push_back(Pair(\"transactions\", transactions));\n+        result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n-        result.push_back(Pair(\"coinbaseflags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n-        result.push_back(Pair(\"time\", (int64_t)pblock->nTime));\n+        result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-        result.push_back(Pair(\"curtime\", (int64_t)GetAdjustedTime()));\n+        result.push_back(Pair(\"mutable\", aMutable));\n+        result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+        result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+        result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));\n         result.push_back(Pair(\"bits\", HexBits(pblock->nBits)));\n+        result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n         return result;\n     }\n     else\n+    if (strMode == \"submit\")\n     {\n         // Parse parameters\n-        CDataStream ssBlock(ParseHex(params[0].get_str()));\n+        CDataStream ssBlock(ParseHex(find_value(oparam, \"data\").get_str()), SER_NETWORK, PROTOCOL_VERSION);\n         CBlock pblock;\n         ssBlock >> pblock;\n \n-        return ProcessBlock(NULL, &pblock);\n+        bool fAccepted = ProcessBlock(NULL, &pblock);\n+\n+        return fAccepted ? Value::null : \"rejected\";\n     }\n+\n+    throw JSONRPCError(-8, \"Invalid mode\");\n }\n \n Value getblockhash(const Array& params, bool fHelp)\n@@ -2044,7 +2118,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),\n-    make_pair(\"getmemorypool\",          &getmemorypool),\n+    make_pair(\"getblocktemplate\",       &getblocktemplate),\n     make_pair(\"listsinceblock\",         &listsinceblock),\n     make_pair(\"dumpprivkey\",            &dumpprivkey),\n     make_pair(\"importprivkey\",          &importprivkey)\n@@ -2074,7 +2148,7 @@ string pAllowInSafeMode[] =\n     \"walletlock\",\n     \"validateaddress\",\n     \"getwork\",\n-    \"getmemorypool\",\n+    \"getblocktemplate\",\n };\n set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));\n \n@@ -2499,7 +2573,7 @@ void ThreadRPCServer2(void* parg)\n             if (valMethod.type() != str_type)\n                 throw JSONRPCError(-32600, \"Method must be a string\");\n             string strMethod = valMethod.get_str();\n-            if (strMethod != \"getwork\" && strMethod != \"getmemorypool\")\n+            if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n                 printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n             // Parse params\n@@ -2681,6 +2755,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n         if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n         if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+        if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n         if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"sendmany\"               && n > 1)\n         {"
      }
    ]
  },
  {
    "sha": "44427fa8332b2ae090256345ec5f9e6e78e04dba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQyN2ZhODMzMmIyYWUwOTAyNTYzNDVlYzVmOWU2ZTc4ZTA0ZGJh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-03T01:12:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-03T01:12:55Z"
      },
      "message": "Merge branch 'gmp_bip_0.6.0' into gmp_bip\n\nConflicts:\n\tsrc/bitcoinrpc.cpp",
      "tree": {
        "sha": "0c649ecfaf4bb1a3808c10602db495363280072c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c649ecfaf4bb1a3808c10602db495363280072c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44427fa8332b2ae090256345ec5f9e6e78e04dba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd199d0ebd086262626a5cc0ce794de6a477d731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd199d0ebd086262626a5cc0ce794de6a477d731",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd199d0ebd086262626a5cc0ce794de6a477d731"
      },
      {
        "sha": "3390014fd0d91b0148425e794ac01c10b646a682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3390014fd0d91b0148425e794ac01c10b646a682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3390014fd0d91b0148425e794ac01c10b646a682"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 93,
      "deletions": 18
    },
    "files": [
      {
        "sha": "208c830aa90df099e72dde62fcf5be51191145f1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 18,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44427fa8332b2ae090256345ec5f9e6e78e04dba/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44427fa8332b2ae090256345ec5f9e6e78e04dba/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=44427fa8332b2ae090256345ec5f9e6e78e04dba",
        "patch": "@@ -1923,24 +1923,43 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getmemorypool(const Array& params, bool fHelp)\n+Value getblocktemplate(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getmemorypool [data]\\n\"\n-            \"If [data] is not specified, returns data needed to construct a block to work on:\\n\"\n+            \"getblocktemplate [params]\\n\"\n+            \"If [params] does not contain a \\\"data\\\" key, returns data needed to construct a block to work on:\\n\"\n             \"  \\\"version\\\" : block version\\n\"\n             \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"coinbaseaux\\\" : data that should be included in coinbase\\n\"\n             \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n-            \"  \\\"coinbaseflags\\\" : data that should be included in coinbase so support for new features can be judged\\n\"\n-            \"  \\\"time\\\" : timestamp appropriate for next block\\n\"\n+            \"  \\\"target\\\" : hash target\\n\"\n             \"  \\\"mintime\\\" : minimum timestamp appropriate for next block\\n\"\n             \"  \\\"curtime\\\" : current timestamp\\n\"\n+            \"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"\n+            \"  \\\"noncerange\\\" : range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"\n+            \"  \\\"sizelimit\\\" : limit of block size\\n\"\n             \"  \\\"bits\\\" : compressed target of next block\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+            \"  \\\"height\\\" : height of the next block\\n\"\n+            \"If [params] does contain a \\\"data\\\" key, tries to solve the block and returns null if it was successful (and \\\"rejected\\\" if not)\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n \n-    if (params.size() == 0)\n+    const Object& oparam = params[0].get_obj();\n+    std::string strMode;\n+    {\n+        const Value& modeval = find_value(oparam, \"mode\");\n+        if (modeval.type() == str_type)\n+            strMode = modeval.get_str();\n+        else\n+        if (find_value(oparam, \"data\").type() == null_type)\n+            strMode = \"template\";\n+        else\n+            strMode = \"submit\";\n+    }\n+\n+    if (strMode == \"template\")\n     {\n         if (vNodes.empty())\n             throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n@@ -1985,38 +2004,93 @@ Value getmemorypool(const Array& params, bool fHelp)\n         pblock->nNonce = 0;\n \n         Array transactions;\n-        BOOST_FOREACH(CTransaction tx, pblock->vtx) {\n-            if(tx.IsCoinBase())\n+        map<uint256, int64_t> setTxIndex;\n+        int i = 0;\n+        CTxDB txdb(\"r\");\n+        BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n+        {\n+            uint256 txHash = tx.GetHash();\n+            setTxIndex[txHash] = i++;\n+\n+            if (tx.IsCoinBase())\n                 continue;\n \n+            Object entry;\n+\n             CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n             ssTx << tx;\n+            entry.push_back(Pair(\"data\", HexStr(ssTx.begin(), ssTx.end())));\n \n-            transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+            entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+\n+            MapPrevTx mapInputs;\n+            map<uint256, CTxIndex> mapUnused;\n+            bool fInvalid = false;\n+            if (tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n+            {\n+                entry.push_back(Pair(\"fee\", (int64_t)(tx.GetValueIn(mapInputs) - tx.GetValueOut())));\n+\n+                Array deps;\n+                BOOST_FOREACH (MapPrevTx::value_type& inp, mapInputs)\n+                {\n+                    if (setTxIndex.count(inp.first))\n+                        deps.push_back(setTxIndex[inp.first]);\n+                }\n+                entry.push_back(Pair(\"depends\", deps));\n+\n+                int64_t nSigOps = tx.GetLegacySigOpCount();\n+                nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+                entry.push_back(Pair(\"sigops\", nSigOps));\n+            }\n+\n+            transactions.push_back(entry);\n+        }\n+\n+        Object aux;\n+        aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+\n+        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+\n+        static Array aMutable;\n+        if (aMutable.empty())\n+        {\n+            aMutable.push_back(\"time\");\n+            aMutable.push_back(\"transactions\");\n+            aMutable.push_back(\"prevblock\");\n         }\n \n         Object result;\n         result.push_back(Pair(\"version\", pblock->nVersion));\n         result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n         result.push_back(Pair(\"transactions\", transactions));\n+        result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n-        result.push_back(Pair(\"coinbaseflags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n-        result.push_back(Pair(\"time\", (int64_t)pblock->nTime));\n+        result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-        result.push_back(Pair(\"curtime\", (int64_t)GetAdjustedTime()));\n+        result.push_back(Pair(\"mutable\", aMutable));\n+        result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+        result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+        result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));\n         result.push_back(Pair(\"bits\", HexBits(pblock->nBits)));\n+        result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n         return result;\n     }\n     else\n+    if (strMode == \"submit\")\n     {\n         // Parse parameters\n-        CDataStream ssBlock(ParseHex(params[0].get_str()), SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssBlock(ParseHex(find_value(oparam, \"data\").get_str()), SER_NETWORK, PROTOCOL_VERSION);\n         CBlock pblock;\n         ssBlock >> pblock;\n \n-        return ProcessBlock(NULL, &pblock);\n+        bool fAccepted = ProcessBlock(NULL, &pblock);\n+\n+        return fAccepted ? Value::null : \"rejected\";\n     }\n+\n+    throw JSONRPCError(-8, \"Invalid mode\");\n }\n \n Value getrawmempool(const Array& params, bool fHelp)\n@@ -2128,7 +2202,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getwork\",                &getwork,                true },\n     { \"listaccounts\",           &listaccounts,           false },\n     { \"settxfee\",               &settxfee,               false },\n-    { \"getmemorypool\",          &getmemorypool,          true },\n+    { \"getblocktemplate\",       &getblocktemplate,       true },\n     { \"listsinceblock\",         &listsinceblock,         false },\n     { \"dumpprivkey\",            &dumpprivkey,            false },\n     { \"importprivkey\",          &importprivkey,          false },\n@@ -2736,7 +2810,7 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valMethod.type() != str_type)\n         throw JSONRPCError(-32600, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getwork\" && strMethod != \"getmemorypool\")\n+    if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n         printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n     // Parse params\n@@ -3015,6 +3089,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n     if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n     if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);"
      }
    ]
  },
  {
    "sha": "46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmQwODljYWI1ZWJiMGJkYzBjYzdjNTRlMTUzN2Y3MDkwYWIxZDEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T17:55:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-09T19:38:11Z"
      },
      "message": "Use a copy in place of mapMultiArgs[\"-addnode\"].\n\nAlso moves the DNS lookup of -addnode nodes into the repeated\nloop, allowing -addnode to follow DNS changes.",
      "tree": {
        "sha": "bb5ae83a7d1d179aac41985fb210b67847968fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb5ae83a7d1d179aac41985fb210b67847968fd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10/comments",
    "author": null,
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "198947c19fe1452cbef3265c280cd96afa084012",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/198947c19fe1452cbef3265c280cd96afa084012",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/198947c19fe1452cbef3265c280cd96afa084012"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 38,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1748977d0fd645291f75e5f16e4658dbcd880bd2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 18,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
        "patch": "@@ -73,6 +73,9 @@ CCriticalSection cs_vOneShots;\n set<CNetAddr> setservAddNodeAddresses;\n CCriticalSection cs_setservAddNodeAddresses;\n \n+vector<std::string> vAddedNodes;\n+CCriticalSection cs_vAddedNodes;\n+\n static CSemaphore *semOutbound = NULL;\n \n void AddOneShot(string strDest)\n@@ -1529,12 +1532,20 @@ void ThreadOpenAddedConnections2(void* parg)\n {\n     printf(\"ThreadOpenAddedConnections started\\n\");\n \n-    if (mapArgs.count(\"-addnode\") == 0)\n-        return;\n+    {\n+        LOCK(cs_vAddedNodes);\n+        vAddedNodes = mapMultiArgs[\"-addnode\"];\n+    }\n \n     if (GetNameProxy()) {\n         while(!fShutdown) {\n-            BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"]) {\n+            list<string> lAddresses(0);\n+            {\n+                LOCK(cs_vAddedNodes);\n+                BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+                    lAddresses.push_back(strAddNode);\n+            }\n+            BOOST_FOREACH(string& strAddNode, lAddresses) {\n                 CAddress addr;\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n@@ -1547,38 +1558,44 @@ void ThreadOpenAddedConnections2(void* parg)\n         return;\n     }\n \n-    vector<vector<CService> > vservAddressesToAdd(0);\n-    BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"])\n+    loop\n     {\n-        vector<CService> vservNode(0);\n-        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+        list<string> lAddresses(0);\n+        {\n+            LOCK(cs_vAddedNodes);\n+            BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+                lAddresses.push_back(strAddNode);\n+        }\n+\n+        list<vector<CService> > lservAddressesToAdd(0);\n+        BOOST_FOREACH(string& strAddNode, lAddresses)\n         {\n-            vservAddressesToAdd.push_back(vservNode);\n+            vector<CService> vservNode(0);\n+            if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n             {\n-                LOCK(cs_setservAddNodeAddresses);\n-                BOOST_FOREACH(CService& serv, vservNode)\n-                    setservAddNodeAddresses.insert(serv);\n+                lservAddressesToAdd.push_back(vservNode);\n+                {\n+                    LOCK(cs_setservAddNodeAddresses);\n+                    BOOST_FOREACH(CService& serv, vservNode)\n+                        setservAddNodeAddresses.insert(serv);\n+                }\n             }\n         }\n-    }\n-    loop\n-    {\n-        vector<vector<CService> > vservConnectAddresses = vservAddressesToAdd;\n         // Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry\n         // (keeping in mind that addnode entries can have many IPs if fNameLookup)\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n-                for (vector<vector<CService> >::iterator it = vservConnectAddresses.begin(); it != vservConnectAddresses.end(); it++)\n+                for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n                     BOOST_FOREACH(CService& addrNode, *(it))\n                         if (pnode->addr == addrNode)\n                         {\n-                            it = vservConnectAddresses.erase(it);\n+                            it = lservAddressesToAdd.erase(it);\n                             it--;\n                             break;\n                         }\n         }\n-        BOOST_FOREACH(vector<CService>& vserv, vservConnectAddresses)\n+        BOOST_FOREACH(vector<CService>& vserv, lservAddressesToAdd)\n         {\n             CSemaphoreGrant grant(*semOutbound);\n             OpenNetworkConnection(CAddress(*(vserv.begin())), &grant);"
      },
      {
        "sha": "e530d93fa3abcb1f2158e7fd37cc0e9ee56afe6a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
        "patch": "@@ -125,6 +125,9 @@ extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n extern std::map<CInv, int64> mapAlreadyAskedFor;\n \n+extern std::vector<std::string> vAddedNodes;\n+extern CCriticalSection cs_vAddedNodes;\n+\n \n \n "
      }
    ]
  },
  {
    "sha": "203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDNkYmJmZGI4ZjBhZjFlNDJjYzk0ZGRkMzJjMjRhZTczZmE2Njcw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T18:14:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-09T19:38:11Z"
      },
      "message": "Make ThreadOpenAddedConnections2 exit quicker if(GetNameProxy()).",
      "tree": {
        "sha": "08110f423c2c8b069702c34fe22f5d061eca7681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08110f423c2c8b069702c34fe22f5d061eca7681"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670/comments",
    "author": null,
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46d089cab5ebb0bdc0cc7c54e1537f7090ab1d10"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2bc1c68c5a94868963c68977d9cb5de5444c04d2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
        "patch": "@@ -1550,6 +1550,8 @@ void ThreadOpenAddedConnections2(void* parg)\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n                 Sleep(500);\n+                if (fShutdown)\n+                    return;\n             }\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n             Sleep(120000); // Retry every 2 minutes"
      }
    ]
  },
  {
    "sha": "e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWVhOGQ4MzQ0NTY3NzM0ZWY3M2E1ZGE0YTU3ZTBkN2UyZmE3NGY4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T18:25:32Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-09T19:39:03Z"
      },
      "message": "Add addnode RPC command.",
      "tree": {
        "sha": "591c4c498cc17501c5eb607b7687fca7876e3948",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/591c4c498cc17501c5eb607b7687fca7876e3948"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8/comments",
    "author": null,
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/203dbbfdb8f0af1e42cc94ddd32c24ae73fa6670"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "17cd1724caeabac91c590da5c7f1029d18d5c6a2",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
        "patch": "@@ -44,6 +44,7 @@ static CCriticalSection cs_nWalletUnlockTime;\n \n extern Value getconnectioncount(const Array& params, bool fHelp); // in rpcnet.cpp\n extern Value getpeerinfo(const Array& params, bool fHelp);\n+extern Value addnode(const Array& params, bool fHelp);\n extern Value dumpprivkey(const Array& params, bool fHelp); // in rpcdump.cpp\n extern Value importprivkey(const Array& params, bool fHelp);\n extern Value getrawtransaction(const Array& params, bool fHelp); // in rcprawtransaction.cpp\n@@ -2090,6 +2091,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblockcount\",          &getblockcount,          true },\n     { \"getconnectioncount\",     &getconnectioncount,     true },\n     { \"getpeerinfo\",            &getpeerinfo,            true },\n+    { \"addnode\",                &addnode,                true },\n     { \"getdifficulty\",          &getdifficulty,          true },\n     { \"getgenerate\",            &getgenerate,            true },\n     { \"setgenerate\",            &setgenerate,            true },"
      },
      {
        "sha": "de14d340b7b0603712025d455cdaed99af827e5e",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
        "patch": "@@ -65,3 +65,45 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value addnode(const Array& params, bool fHelp)\n+{\n+    string strCommand;\n+    if (params.size() == 2)\n+        strCommand = params[1].get_str();\n+    if (fHelp || params.size() != 2 ||\n+        (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n+        throw runtime_error(\n+            \"addnode <node> <add|remove|onetry>\\n\"\n+            \"Attempts add or remove <node> from the addnode list or try a connection to <node> once.\");\n+\n+    string strNode = params[0].get_str();\n+\n+    if (strCommand == \"onetry\")\n+    {\n+        CAddress addr;\n+        ConnectNode(addr, strNode.c_str());\n+        return Value::null;\n+    }\n+\n+    LOCK(cs_vAddedNodes);\n+    vector<string>::iterator it = vAddedNodes.begin();\n+    for(; it != vAddedNodes.end(); it++)\n+        if (strNode == *it)\n+            break;\n+\n+    if (strCommand == \"add\")\n+    {\n+        if (it != vAddedNodes.end())\n+            throw JSONRPCError(-23, \"Error: Node already added\");\n+        vAddedNodes.push_back(strNode);\n+    }\n+    else if(strCommand == \"remove\")\n+    {\n+        if (it == vAddedNodes.end())\n+            throw JSONRPCError(-24, \"Error: Node has not been added.\");\n+        vAddedNodes.erase(it);\n+    }\n+\n+    return Value::null;\n+}\n+"
      }
    ]
  },
  {
    "sha": "07c8938a1ed937351019298c516222cc28d64520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2M4OTM4YTFlZDkzNzM1MTAxOTI5OGM1MTYyMjJjYzI4ZDY0NTIw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T18:44:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-09T20:56:38Z"
      },
      "message": "Add a getaddednodeinfo RPC.",
      "tree": {
        "sha": "d81df16ec322f3f71d093120effe8624cfe18065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d81df16ec322f3f71d093120effe8624cfe18065"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07c8938a1ed937351019298c516222cc28d64520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c8938a1ed937351019298c516222cc28d64520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07c8938a1ed937351019298c516222cc28d64520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c8938a1ed937351019298c516222cc28d64520/comments",
    "author": null,
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ea8d8344567734ef73a5da4a57e0d7e2fa74f8"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 95,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd3b5bd9b5b794e20020f4dd3499ea27f74441cc",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07c8938a1ed937351019298c516222cc28d64520/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07c8938a1ed937351019298c516222cc28d64520/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=07c8938a1ed937351019298c516222cc28d64520",
        "patch": "@@ -45,6 +45,7 @@ static CCriticalSection cs_nWalletUnlockTime;\n extern Value getconnectioncount(const Array& params, bool fHelp); // in rpcnet.cpp\n extern Value getpeerinfo(const Array& params, bool fHelp);\n extern Value addnode(const Array& params, bool fHelp);\n+extern Value getaddednodeinfo(const Array& params, bool fHelp);\n extern Value dumpprivkey(const Array& params, bool fHelp); // in rpcdump.cpp\n extern Value importprivkey(const Array& params, bool fHelp);\n extern Value getrawtransaction(const Array& params, bool fHelp); // in rcprawtransaction.cpp\n@@ -2092,6 +2093,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getconnectioncount\",     &getconnectioncount,     true },\n     { \"getpeerinfo\",            &getpeerinfo,            true },\n     { \"addnode\",                &addnode,                true },\n+    { \"getaddednodeinfo\",       &getaddednodeinfo,       true },\n     { \"getdifficulty\",          &getdifficulty,          true },\n     { \"getgenerate\",            &getgenerate,            true },\n     { \"setgenerate\",            &setgenerate,            true },\n@@ -2997,6 +2999,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     //\n     // Special case non-string parameter types\n     //\n+    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);"
      },
      {
        "sha": "d4f61a8155803aa64a84ad4006220fae1e708f45",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07c8938a1ed937351019298c516222cc28d64520/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07c8938a1ed937351019298c516222cc28d64520/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=07c8938a1ed937351019298c516222cc28d64520",
        "patch": "@@ -107,3 +107,95 @@ Value addnode(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value getaddednodeinfo(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"getaddednodeinfo <dns> [node]\\n\"\n+            \"Returns information about the given added node, or all added nodes\\n\"\n+            \"(note that onetry addnodes are not listed here)\\n\"\n+            \"If dns is false, only a list of added nodes will be provided,\\n\"\n+            \"otherwise connected information will also be available.\");\n+\n+    bool fDns = params[0].get_bool();\n+\n+    list<string> laddedNodes(0);\n+    if (params.size() == 1)\n+    {\n+        LOCK(cs_vAddedNodes);\n+        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+            laddedNodes.push_back(strAddNode);\n+    }\n+    else\n+    {\n+        string strNode = params[1].get_str();\n+        LOCK(cs_vAddedNodes);\n+        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+            if (strAddNode == strNode)\n+            {\n+                laddedNodes.push_back(strAddNode);\n+                break;\n+            }\n+        if (laddedNodes.size() == 0)\n+            throw JSONRPCError(-24, \"Error: Node has not been added.\");\n+    }\n+\n+    if (!fDns)\n+    {\n+        Object ret;\n+        BOOST_FOREACH(string& strAddNode, laddedNodes)\n+            ret.push_back(Pair(\"addednode\", strAddNode));\n+        return ret;\n+    }\n+\n+    Array ret;\n+\n+    list<pair<string, vector<CService> > > laddedAddreses(0);\n+    BOOST_FOREACH(string& strAddNode, laddedNodes)\n+    {\n+        vector<CService> vservNode(0);\n+        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+            laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n+        else\n+        {\n+            Object obj;\n+            obj.push_back(Pair(\"addednode\", strAddNode));\n+            obj.push_back(Pair(\"connected\", false));\n+            Array addresses;\n+            obj.push_back(Pair(\"addresses\", addresses));\n+        }\n+    }\n+\n+    LOCK(cs_vNodes);\n+    for (list<pair<string, vector<CService> > >::iterator it = laddedAddreses.begin(); it != laddedAddreses.end(); it++)\n+    {\n+        Object obj;\n+        obj.push_back(Pair(\"addednode\", it->first));\n+\n+        Array addresses;\n+        bool fConnected = false;\n+        BOOST_FOREACH(CService& addrNode, it->second)\n+        {\n+            bool fFound = false;\n+            Object node;\n+            node.push_back(Pair(\"address\", addrNode.ToString()));\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n+                if (pnode->addr == addrNode)\n+                {\n+                    fFound = true;\n+                    fConnected = true;\n+                    node.push_back(Pair(\"connected\", pnode->fInbound ? \"inbound\" : \"outbound\"));\n+                    break;\n+                }\n+            if (!fFound)\n+                node.push_back(Pair(\"connected\", \"false\"));\n+            addresses.push_back(node);\n+        }\n+        obj.push_back(Pair(\"connected\", fConnected));\n+        obj.push_back(Pair(\"addresses\", addresses));\n+        ret.push_back(obj);\n+    }\n+\n+    return ret;\n+}\n+"
      }
    ]
  },
  {
    "sha": "c6de971557c64d9897d83fb49330ad3333796832",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmRlOTcxNTU3YzY0ZDk4OTdkODNmYjQ5MzMwYWQzMzMzNzk2ODMy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-07-02T19:11:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-09T20:56:38Z"
      },
      "message": "Try more than the first address for a DNS -addnode.",
      "tree": {
        "sha": "0a5f1a6b2e30f7dc7542a85090230b16dc71c692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5f1a6b2e30f7dc7542a85090230b16dc71c692"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6de971557c64d9897d83fb49330ad3333796832",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de971557c64d9897d83fb49330ad3333796832",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6de971557c64d9897d83fb49330ad3333796832",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de971557c64d9897d83fb49330ad3333796832/comments",
    "author": null,
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07c8938a1ed937351019298c516222cc28d64520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c8938a1ed937351019298c516222cc28d64520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07c8938a1ed937351019298c516222cc28d64520"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "650c20ad0267ea1acc4d4ed1e0139614ddf7434f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6de971557c64d9897d83fb49330ad3333796832/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6de971557c64d9897d83fb49330ad3333796832/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c6de971557c64d9897d83fb49330ad3333796832",
        "patch": "@@ -1560,7 +1560,7 @@ void ThreadOpenAddedConnections2(void* parg)\n         return;\n     }\n \n-    loop\n+    for (unsigned int i = 0; true; i++)\n     {\n         list<string> lAddresses(0);\n         {\n@@ -1600,7 +1600,7 @@ void ThreadOpenAddedConnections2(void* parg)\n         BOOST_FOREACH(vector<CService>& vserv, lservAddressesToAdd)\n         {\n             CSemaphoreGrant grant(*semOutbound);\n-            OpenNetworkConnection(CAddress(*(vserv.begin())), &grant);\n+            OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n             Sleep(500);\n             if (fShutdown)\n                 return;"
      }
    ]
  },
  {
    "sha": "650ea32bbd60ac149809333131bd887537afa477",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTBlYTMyYmJkNjBhYzE0OTgwOTMzMzEzMWJkODg3NTM3YWZhNDc3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-13T04:43:24Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:24:14Z"
      },
      "message": "getblocktemplate: longpolling support",
      "tree": {
        "sha": "7cfb190922cc80ccce6c7d7e1224c16946f35aad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cfb190922cc80ccce6c7d7e1224c16946f35aad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/650ea32bbd60ac149809333131bd887537afa477",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/650ea32bbd60ac149809333131bd887537afa477",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/650ea32bbd60ac149809333131bd887537afa477",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/650ea32bbd60ac149809333131bd887537afa477/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44427fa8332b2ae090256345ec5f9e6e78e04dba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44427fa8332b2ae090256345ec5f9e6e78e04dba"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52166d0318616d30924000c3dc9ff2738330691c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/650ea32bbd60ac149809333131bd887537afa477/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/650ea32bbd60ac149809333131bd887537afa477/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=650ea32bbd60ac149809333131bd887537afa477",
        "patch": "@@ -26,8 +26,11 @@\n #include <boost/asio/ssl.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/thread/locks.hpp>\n #include <list>\n \n+typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n+\n #define printf OutputDebugStringF\n \n using namespace std;\n@@ -1967,6 +1970,33 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         if (IsInitialBlockDownload())\n             throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n \n+        do\n+        {\n+            Value lpval = find_value(oparam, \"longpollid\");\n+            if (lpval.type() != null_type)\n+            {\n+                uint256 hashWatchedChain = hashBestChain;\n+                if (lpval.type() == str_type)\n+                {\n+                    uint256 lpid;\n+                    lpid.SetHex(lpval.get_str());\n+                    if (lpid != hashWatchedChain)\n+                        break;\n+                }\n+\n+                LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+                LEAVE_CRITICAL_SECTION(cs_main);\n+                {\n+                    boost::unique_lock<boost::mutex> lock(csBestBlock);\n+                    while (hashBestChain == hashWatchedChain)\n+                        cvBlockChange.wait(lock);\n+                }\n+                ENTER_CRITICAL_SECTION(cs_main);\n+                ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+            }\n+        }\n+        while(0);\n+\n         static CReserveKey reservekey(pwalletMain);\n \n         // Update block\n@@ -2065,6 +2095,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         result.push_back(Pair(\"transactions\", transactions));\n         result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+        result.push_back(Pair(\"longpollid\", hashBestChain.GetHex()));\n         result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n         result.push_back(Pair(\"mutable\", aMutable));"
      },
      {
        "sha": "492169329f26ce9084b75603dce0384fe86b2ed6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/650ea32bbd60ac149809333131bd887537afa477/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/650ea32bbd60ac149809333131bd887537afa477/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=650ea32bbd60ac149809333131bd887537afa477",
        "patch": "@@ -11,6 +11,9 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/mutex.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -37,6 +40,8 @@ CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n int64 nTimeBestReceived = 0;\n+boost::mutex csBestBlock;\n+boost::condition_variable cvBlockChange;\n \n CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes claim to have\n \n@@ -1649,6 +1654,9 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n         ::SetBestChain(locator);\n     }\n \n+    {\n+        boost::lock_guard<boost::mutex> lock(csBestBlock);\n+\n     // New best block\n     hashBestChain = hash;\n     pindexBest = pindexNew;\n@@ -1657,10 +1665,15 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n+\n+    }\n+\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  date=%s\\n\",\n       hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n+    cvBlockChange.notify_all();\n+\n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     if (!fIsInitialDownload)\n     {"
      },
      {
        "sha": "88df8f21af819a34fb8a80e6ff1d0409dd343395",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/650ea32bbd60ac149809333131bd887537afa477/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/650ea32bbd60ac149809333131bd887537afa477/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=650ea32bbd60ac149809333131bd887537afa477",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/mutex.hpp>\n+\n #include \"bignum.h\"\n #include \"sync.h\"\n #include \"net.h\"\n@@ -64,6 +67,8 @@ extern const std::string strMessageMagic;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n+extern boost::mutex csBestBlock;\n+extern boost::condition_variable cvBlockChange;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];"
      }
    ]
  },
  {
    "sha": "a2bba9ff00e6894669901826cb70a65918de44b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmJiYTlmZjAwZTY4OTQ2Njk5MDE4MjZjYjcwYTY1OTE4ZGU0NGI5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:27:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:27:57Z"
      },
      "message": "Merge branch 'gmp_bip' into next",
      "tree": {
        "sha": "0f74aece7fc2680d0da236418e028dccc0b7e356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f74aece7fc2680d0da236418e028dccc0b7e356"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2bba9ff00e6894669901826cb70a65918de44b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bba9ff00e6894669901826cb70a65918de44b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bba9ff00e6894669901826cb70a65918de44b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bba9ff00e6894669901826cb70a65918de44b9/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c23b6fd6887707c18d8a8e9c82047413d038b4b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c23b6fd6887707c18d8a8e9c82047413d038b4b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c23b6fd6887707c18d8a8e9c82047413d038b4b6"
      },
      {
        "sha": "44427fa8332b2ae090256345ec5f9e6e78e04dba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44427fa8332b2ae090256345ec5f9e6e78e04dba"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 93,
      "deletions": 18
    },
    "files": [
      {
        "sha": "208c830aa90df099e72dde62fcf5be51191145f1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 18,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bba9ff00e6894669901826cb70a65918de44b9/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bba9ff00e6894669901826cb70a65918de44b9/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a2bba9ff00e6894669901826cb70a65918de44b9",
        "patch": "@@ -1923,24 +1923,43 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getmemorypool(const Array& params, bool fHelp)\n+Value getblocktemplate(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getmemorypool [data]\\n\"\n-            \"If [data] is not specified, returns data needed to construct a block to work on:\\n\"\n+            \"getblocktemplate [params]\\n\"\n+            \"If [params] does not contain a \\\"data\\\" key, returns data needed to construct a block to work on:\\n\"\n             \"  \\\"version\\\" : block version\\n\"\n             \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"coinbaseaux\\\" : data that should be included in coinbase\\n\"\n             \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n-            \"  \\\"coinbaseflags\\\" : data that should be included in coinbase so support for new features can be judged\\n\"\n-            \"  \\\"time\\\" : timestamp appropriate for next block\\n\"\n+            \"  \\\"target\\\" : hash target\\n\"\n             \"  \\\"mintime\\\" : minimum timestamp appropriate for next block\\n\"\n             \"  \\\"curtime\\\" : current timestamp\\n\"\n+            \"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"\n+            \"  \\\"noncerange\\\" : range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"\n+            \"  \\\"sizelimit\\\" : limit of block size\\n\"\n             \"  \\\"bits\\\" : compressed target of next block\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+            \"  \\\"height\\\" : height of the next block\\n\"\n+            \"If [params] does contain a \\\"data\\\" key, tries to solve the block and returns null if it was successful (and \\\"rejected\\\" if not)\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n \n-    if (params.size() == 0)\n+    const Object& oparam = params[0].get_obj();\n+    std::string strMode;\n+    {\n+        const Value& modeval = find_value(oparam, \"mode\");\n+        if (modeval.type() == str_type)\n+            strMode = modeval.get_str();\n+        else\n+        if (find_value(oparam, \"data\").type() == null_type)\n+            strMode = \"template\";\n+        else\n+            strMode = \"submit\";\n+    }\n+\n+    if (strMode == \"template\")\n     {\n         if (vNodes.empty())\n             throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n@@ -1985,38 +2004,93 @@ Value getmemorypool(const Array& params, bool fHelp)\n         pblock->nNonce = 0;\n \n         Array transactions;\n-        BOOST_FOREACH(CTransaction tx, pblock->vtx) {\n-            if(tx.IsCoinBase())\n+        map<uint256, int64_t> setTxIndex;\n+        int i = 0;\n+        CTxDB txdb(\"r\");\n+        BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n+        {\n+            uint256 txHash = tx.GetHash();\n+            setTxIndex[txHash] = i++;\n+\n+            if (tx.IsCoinBase())\n                 continue;\n \n+            Object entry;\n+\n             CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n             ssTx << tx;\n+            entry.push_back(Pair(\"data\", HexStr(ssTx.begin(), ssTx.end())));\n \n-            transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+            entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+\n+            MapPrevTx mapInputs;\n+            map<uint256, CTxIndex> mapUnused;\n+            bool fInvalid = false;\n+            if (tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n+            {\n+                entry.push_back(Pair(\"fee\", (int64_t)(tx.GetValueIn(mapInputs) - tx.GetValueOut())));\n+\n+                Array deps;\n+                BOOST_FOREACH (MapPrevTx::value_type& inp, mapInputs)\n+                {\n+                    if (setTxIndex.count(inp.first))\n+                        deps.push_back(setTxIndex[inp.first]);\n+                }\n+                entry.push_back(Pair(\"depends\", deps));\n+\n+                int64_t nSigOps = tx.GetLegacySigOpCount();\n+                nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+                entry.push_back(Pair(\"sigops\", nSigOps));\n+            }\n+\n+            transactions.push_back(entry);\n+        }\n+\n+        Object aux;\n+        aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+\n+        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+\n+        static Array aMutable;\n+        if (aMutable.empty())\n+        {\n+            aMutable.push_back(\"time\");\n+            aMutable.push_back(\"transactions\");\n+            aMutable.push_back(\"prevblock\");\n         }\n \n         Object result;\n         result.push_back(Pair(\"version\", pblock->nVersion));\n         result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n         result.push_back(Pair(\"transactions\", transactions));\n+        result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n-        result.push_back(Pair(\"coinbaseflags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n-        result.push_back(Pair(\"time\", (int64_t)pblock->nTime));\n+        result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-        result.push_back(Pair(\"curtime\", (int64_t)GetAdjustedTime()));\n+        result.push_back(Pair(\"mutable\", aMutable));\n+        result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+        result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+        result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));\n         result.push_back(Pair(\"bits\", HexBits(pblock->nBits)));\n+        result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n         return result;\n     }\n     else\n+    if (strMode == \"submit\")\n     {\n         // Parse parameters\n-        CDataStream ssBlock(ParseHex(params[0].get_str()), SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssBlock(ParseHex(find_value(oparam, \"data\").get_str()), SER_NETWORK, PROTOCOL_VERSION);\n         CBlock pblock;\n         ssBlock >> pblock;\n \n-        return ProcessBlock(NULL, &pblock);\n+        bool fAccepted = ProcessBlock(NULL, &pblock);\n+\n+        return fAccepted ? Value::null : \"rejected\";\n     }\n+\n+    throw JSONRPCError(-8, \"Invalid mode\");\n }\n \n Value getrawmempool(const Array& params, bool fHelp)\n@@ -2128,7 +2202,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getwork\",                &getwork,                true },\n     { \"listaccounts\",           &listaccounts,           false },\n     { \"settxfee\",               &settxfee,               false },\n-    { \"getmemorypool\",          &getmemorypool,          true },\n+    { \"getblocktemplate\",       &getblocktemplate,       true },\n     { \"listsinceblock\",         &listsinceblock,         false },\n     { \"dumpprivkey\",            &dumpprivkey,            false },\n     { \"importprivkey\",          &importprivkey,          false },\n@@ -2736,7 +2810,7 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valMethod.type() != str_type)\n         throw JSONRPCError(-32600, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getwork\" && strMethod != \"getmemorypool\")\n+    if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n         printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n     // Parse params\n@@ -3015,6 +3089,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n     if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n     if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);"
      }
    ]
  },
  {
    "sha": "7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmYwZjQ4ZDRkNjVjZjg0MjZmNmU5NjlkZjlmNGQ1MGRhYzBjZWE3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:28:05Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:28:05Z"
      },
      "message": "Merge branch 'opt_ipv6' into next",
      "tree": {
        "sha": "ee7f49b892d70db23ae954091863de01a75e5c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee7f49b892d70db23ae954091863de01a75e5c6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bba9ff00e6894669901826cb70a65918de44b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bba9ff00e6894669901826cb70a65918de44b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bba9ff00e6894669901826cb70a65918de44b9"
      },
      {
        "sha": "751b8eb120375a1a045d55f267d2d93d807ab649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/751b8eb120375a1a045d55f267d2d93d807ab649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/751b8eb120375a1a045d55f267d2d93d807ab649"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 55,
      "deletions": 8
    },
    "files": [
      {
        "sha": "159783b2fdc469c88db5a482cf531f2a24f7f1fd",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "patch": "@@ -2,7 +2,7 @@ TEMPLATE = app\n TARGET =\n VERSION = 0.6.99\n INCLUDEPATH += src src/json src/qt\n-DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE USE_IPV6\n+DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n CONFIG += no_include_pwd\n \n # for boost 1.37, add -mt to the boost libraries\n@@ -68,6 +68,18 @@ contains(FIRST_CLASS_MESSAGING, 1) {\n     DEFINES += FIRST_CLASS_MESSAGING\n }\n \n+# use: qmake \"USE_IPV6=1\" ( enabled by default; default)\n+#  or: qmake \"USE_IPV6=0\" (disabled by default)\n+#  or: qmake \"USE_IPV6=-\" (not supported)\n+contains(USE_IPV6, -) {\n+\tmessage(Building without IPv6 support)\n+} else {\n+\tcount(USE_IPV6, 0) {\n+\t\tUSE_IPV6=1\n+\t}\n+\tDEFINES += USE_IPV6=$$USE_IPV6\n+}\n+\n contains(BITCOIN_NEED_QT_PLUGINS, 1) {\n     DEFINES += BITCOIN_NEED_QT_PLUGINS\n     QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets"
      },
      {
        "sha": "f244a0f227ab6d7eecd9eb57b273b5a40bf84368",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "patch": "@@ -488,6 +488,12 @@ bool AppInit2()\n                 SetLimited(net);\n         }\n     }\n+#if defined(USE_IPV6)\n+#if ! USE_IPV6\n+    else\n+        SetLimited(NET_IPV6);\n+#endif\n+#endif\n \n     CService addrProxy;\n     bool fProxy = false;"
      },
      {
        "sha": "8dc7b2ed5ef51faffaac8d740a05cbee2717a554",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "patch": "@@ -5,6 +5,7 @@\n DEPSDIR:=/usr/i586-mingw32msvc\n \n USE_UPNP:=0\n+USE_IPV6:=1\n \n INCLUDEPATHS= \\\n  -I\"$(CURDIR)\" \\\n@@ -28,18 +29,25 @@ LIBS= \\\n  -l ssl \\\n  -l crypto\n \n-DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6\n+DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n DEBUGFLAGS=-g\n CFLAGS=-O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n \n-ifdef USE_UPNP\n+ifndef USE_UPNP\n+\toverride USE_UPNP = -\n+endif\n+ifneq (${USE_UPNP}, -)\n \tLIBPATHS += -L\"$(DEPSDIR)/miniupnpc\"\n \tLIBS += -l miniupnpc -l iphlpapi\n \tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n+endif\n+\n LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi\n \n # TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are"
      },
      {
        "sha": "6f549a4c60c405c47f795f9aa4b79efc9c67da8e",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "patch": "@@ -3,6 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n USE_UPNP:=0\n+USE_IPV6:=1\n \n INCLUDEPATHS= \\\n  -I\"C:\\boost-1.49.0-mgw\" \\\n@@ -23,19 +24,26 @@ LIBS= \\\n  -l ssl \\\n  -l crypto\n \n-DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6\n+DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n DEBUGFLAGS=-g\n CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n \n-ifdef USE_UPNP\n+ifndef USE_UPNP\n+\toverride USE_UPNP = -\n+endif\n+ifneq (${USE_UPNP}, -)\n  INCLUDEPATHS += -I\"C:\\miniupnpc-1.6-mgw\"\n  LIBPATHS += -L\"C:\\miniupnpc-1.6-mgw\"\n  LIBS += -l miniupnpc -l iphlpapi\n  DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n+endif\n+\n LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi\n \n # TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are"
      },
      {
        "sha": "d54c775da76bc49b069a7637cda339022ba7ae30",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "patch": "@@ -20,6 +20,7 @@ LIBPATHS= \\\n  -L\"$(DEPSDIR)/lib/db48\"\n \n USE_UPNP:=1\n+USE_IPV6:=1\n \n LIBS= -dead_strip\n \n@@ -53,7 +54,7 @@ LIBS += \\\n TESTDEFS += -DBOOST_TEST_DYN_LINK\n endif\n \n-DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6\n+DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE\n \n ifdef RELEASE\n # Compile for maximum compatibility and smallest size.\n@@ -93,7 +94,10 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o\n \n-ifdef USE_UPNP\n+ifndef USE_UPNP\n+\toverride USE_UPNP = -\n+endif\n+ifneq (${USE_UPNP}, -)\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)\n ifdef STATIC\n \tLIBS += $(DEPSDIR)/lib/libminiupnpc.a\n@@ -102,6 +106,10 @@ else\n endif\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n+endif\n+\n all: bitcoind\n \n # auto-generated dependencies:"
      },
      {
        "sha": "0d0c3d61ae8c81472e446026bba3e09e18230e73",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "patch": "@@ -3,8 +3,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n USE_UPNP:=0\n+USE_IPV6:=1\n \n-DEFS=-DUSE_IPV6 -DBOOST_SPIRIT_THREADSAFE\n+DEFS=-DBOOST_SPIRIT_THREADSAFE\n \n DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))\n@@ -41,6 +42,10 @@ ifneq (${USE_UPNP}, -)\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+ifneq (${USE_IPV6}, -)\n+\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n+endif\n+\n LIBS+= \\\n  -Wl,-B$(LMODE2) \\\n    -l z \\"
      }
    ]
  },
  {
    "sha": "7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzg3Yjc2NzJkZDVlOWJmOGM5OGRjMTg5ZWJiYzZiYzZiMTMzNjZm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:28:45Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:29:31Z"
      },
      "message": "Merge remote-tracking branch 'gavin/heightincoinbase' into next",
      "tree": {
        "sha": "e57f62276d7950db69604cf149862dfeb79ae624",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e57f62276d7950db69604cf149862dfeb79ae624"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff0f48d4d65cf8426f6e969df9f4d50dac0cea7"
      },
      {
        "sha": "fa174be9b58de7377b46416d3a040c979d27d7e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa174be9b58de7377b46416d3a040c979d27d7e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa174be9b58de7377b46416d3a040c979d27d7e2"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 44,
      "deletions": 2
    },
    "files": [
      {
        "sha": "322df710f879b5e2114aa20c57617f7594cc5229",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 1,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
        "patch": "@@ -1826,6 +1826,28 @@ bool CBlock::AcceptBlock()\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n         return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n \n+    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (nVersion < 2)\n+    {\n+        if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n+            (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+        {\n+            return error(\"AcceptBlock() : rejected nVersion=1 block\");\n+        }\n+    }\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    if (nVersion >= 2)\n+    {\n+        // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+        if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n+            (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+        {\n+            CScript expect = CScript() << nHeight;\n+            if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n+                return DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n+        }\n+    }\n+\n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n@@ -1849,6 +1871,18 @@ bool CBlock::AcceptBlock()\n     return true;\n }\n \n+bool CBlockIndex::IsSuperMajority(unsigned int minVersion, const CBlockIndex* pstart, unsigned int nRequired, unsigned int nToCheck)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n {\n     // Check for duplicate\n@@ -3632,7 +3666,8 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n         hashPrevBlock = pblock->hashPrevBlock;\n     }\n     ++nExtraNonce;\n-    pblock->vtx[0].vin[0].scriptSig = (CScript() << pblock->nTime << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n+    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n+    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n \n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();"
      },
      {
        "sha": "8aa08266f3fb097a9fd3d89463a6c838c11461a0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
        "patch": "@@ -819,7 +819,7 @@ class CBlock\n {\n public:\n     // header\n-    static const int CURRENT_VERSION=1;\n+    static const int CURRENT_VERSION=2;\n     int nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n@@ -1163,6 +1163,12 @@ class CBlockIndex\n         return pindex->GetMedianTimePast();\n     }\n \n+    /**\n+     * Returns true if there are nRequired or more blocks of minVersion or above\n+     * in the last nToCheck blocks, starting at pstart and going backwards.\n+     */\n+    static bool IsSuperMajority(unsigned int minVersion, const CBlockIndex* pstart,\n+                                unsigned int nRequired, unsigned int nToCheck);\n \n \n     std::string ToString() const"
      },
      {
        "sha": "4558a76a2868f1046b47cd4ef35e8b306751a8bf",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
        "patch": "@@ -62,6 +62,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     std::vector<CTransaction*>txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n+        pblock->nVersion = 1;\n         pblock->nTime = pindexBest->GetMedianTimePast()+1;\n         pblock->vtx[0].vin[0].scriptSig = CScript();\n         pblock->vtx[0].vin[0].scriptSig.push_back(blockinfo[i].extranonce);"
      }
    ]
  },
  {
    "sha": "9b5409c1a162eec34bddabbb33c8b82e8433395e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjU0MDljMWExNjJlZWMzNGJkZGFiYmIzM2M4YjgyZTg0MzMzOTVl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:29:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:29:41Z"
      },
      "message": "Merge remote-tracking branch 'matt/addnoderpc' into next",
      "tree": {
        "sha": "5e81f9cc382d0b9d8ca0bfab1e021197a3f37e80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e81f9cc382d0b9d8ca0bfab1e021197a3f37e80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b5409c1a162eec34bddabbb33c8b82e8433395e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b5409c1a162eec34bddabbb33c8b82e8433395e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b5409c1a162eec34bddabbb33c8b82e8433395e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b5409c1a162eec34bddabbb33c8b82e8433395e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7787b7672dd5e9bf8c98dc189ebbc6bc6b13366f"
      },
      {
        "sha": "c6de971557c64d9897d83fb49330ad3333796832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de971557c64d9897d83fb49330ad3333796832",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6de971557c64d9897d83fb49330ad3333796832"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 180,
      "deletions": 19
    },
    "files": [
      {
        "sha": "cadbdcd2990d7b8f08d5714223e3789a374fbe0c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9b5409c1a162eec34bddabbb33c8b82e8433395e",
        "patch": "@@ -44,6 +44,8 @@ static CCriticalSection cs_nWalletUnlockTime;\n \n extern Value getconnectioncount(const Array& params, bool fHelp); // in rpcnet.cpp\n extern Value getpeerinfo(const Array& params, bool fHelp);\n+extern Value addnode(const Array& params, bool fHelp);\n+extern Value getaddednodeinfo(const Array& params, bool fHelp);\n extern Value dumpprivkey(const Array& params, bool fHelp); // in rpcdump.cpp\n extern Value importprivkey(const Array& params, bool fHelp);\n extern Value getrawtransaction(const Array& params, bool fHelp); // in rcprawtransaction.cpp\n@@ -2164,6 +2166,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblockcount\",          &getblockcount,          true },\n     { \"getconnectioncount\",     &getconnectioncount,     true },\n     { \"getpeerinfo\",            &getpeerinfo,            true },\n+    { \"addnode\",                &addnode,                true },\n+    { \"getaddednodeinfo\",       &getaddednodeinfo,       true },\n     { \"getdifficulty\",          &getdifficulty,          true },\n     { \"getgenerate\",            &getgenerate,            true },\n     { \"setgenerate\",            &setgenerate,            true },\n@@ -3069,6 +3073,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     //\n     // Special case non-string parameter types\n     //\n+    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);"
      },
      {
        "sha": "650c20ad0267ea1acc4d4ed1e0139614ddf7434f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 19,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9b5409c1a162eec34bddabbb33c8b82e8433395e",
        "patch": "@@ -73,6 +73,9 @@ CCriticalSection cs_vOneShots;\n set<CNetAddr> setservAddNodeAddresses;\n CCriticalSection cs_setservAddNodeAddresses;\n \n+vector<std::string> vAddedNodes;\n+CCriticalSection cs_vAddedNodes;\n+\n static CSemaphore *semOutbound = NULL;\n \n void AddOneShot(string strDest)\n@@ -1529,16 +1532,26 @@ void ThreadOpenAddedConnections2(void* parg)\n {\n     printf(\"ThreadOpenAddedConnections started\\n\");\n \n-    if (mapArgs.count(\"-addnode\") == 0)\n-        return;\n+    {\n+        LOCK(cs_vAddedNodes);\n+        vAddedNodes = mapMultiArgs[\"-addnode\"];\n+    }\n \n     if (GetNameProxy()) {\n         while(!fShutdown) {\n-            BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"]) {\n+            list<string> lAddresses(0);\n+            {\n+                LOCK(cs_vAddedNodes);\n+                BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+                    lAddresses.push_back(strAddNode);\n+            }\n+            BOOST_FOREACH(string& strAddNode, lAddresses) {\n                 CAddress addr;\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n                 Sleep(500);\n+                if (fShutdown)\n+                    return;\n             }\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n             Sleep(120000); // Retry every 2 minutes\n@@ -1547,41 +1560,47 @@ void ThreadOpenAddedConnections2(void* parg)\n         return;\n     }\n \n-    vector<vector<CService> > vservAddressesToAdd(0);\n-    BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"])\n+    for (unsigned int i = 0; true; i++)\n     {\n-        vector<CService> vservNode(0);\n-        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+        list<string> lAddresses(0);\n         {\n-            vservAddressesToAdd.push_back(vservNode);\n+            LOCK(cs_vAddedNodes);\n+            BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+                lAddresses.push_back(strAddNode);\n+        }\n+\n+        list<vector<CService> > lservAddressesToAdd(0);\n+        BOOST_FOREACH(string& strAddNode, lAddresses)\n+        {\n+            vector<CService> vservNode(0);\n+            if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n             {\n-                LOCK(cs_setservAddNodeAddresses);\n-                BOOST_FOREACH(CService& serv, vservNode)\n-                    setservAddNodeAddresses.insert(serv);\n+                lservAddressesToAdd.push_back(vservNode);\n+                {\n+                    LOCK(cs_setservAddNodeAddresses);\n+                    BOOST_FOREACH(CService& serv, vservNode)\n+                        setservAddNodeAddresses.insert(serv);\n+                }\n             }\n         }\n-    }\n-    loop\n-    {\n-        vector<vector<CService> > vservConnectAddresses = vservAddressesToAdd;\n         // Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry\n         // (keeping in mind that addnode entries can have many IPs if fNameLookup)\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n-                for (vector<vector<CService> >::iterator it = vservConnectAddresses.begin(); it != vservConnectAddresses.end(); it++)\n+                for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n                     BOOST_FOREACH(CService& addrNode, *(it))\n                         if (pnode->addr == addrNode)\n                         {\n-                            it = vservConnectAddresses.erase(it);\n+                            it = lservAddressesToAdd.erase(it);\n                             it--;\n                             break;\n                         }\n         }\n-        BOOST_FOREACH(vector<CService>& vserv, vservConnectAddresses)\n+        BOOST_FOREACH(vector<CService>& vserv, lservAddressesToAdd)\n         {\n             CSemaphoreGrant grant(*semOutbound);\n-            OpenNetworkConnection(CAddress(*(vserv.begin())), &grant);\n+            OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n             Sleep(500);\n             if (fShutdown)\n                 return;"
      },
      {
        "sha": "e530d93fa3abcb1f2158e7fd37cc0e9ee56afe6a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9b5409c1a162eec34bddabbb33c8b82e8433395e",
        "patch": "@@ -125,6 +125,9 @@ extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n extern std::map<CInv, int64> mapAlreadyAskedFor;\n \n+extern std::vector<std::string> vAddedNodes;\n+extern CCriticalSection cs_vAddedNodes;\n+\n \n \n "
      },
      {
        "sha": "d4f61a8155803aa64a84ad4006220fae1e708f45",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b5409c1a162eec34bddabbb33c8b82e8433395e/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9b5409c1a162eec34bddabbb33c8b82e8433395e",
        "patch": "@@ -65,3 +65,137 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value addnode(const Array& params, bool fHelp)\n+{\n+    string strCommand;\n+    if (params.size() == 2)\n+        strCommand = params[1].get_str();\n+    if (fHelp || params.size() != 2 ||\n+        (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n+        throw runtime_error(\n+            \"addnode <node> <add|remove|onetry>\\n\"\n+            \"Attempts add or remove <node> from the addnode list or try a connection to <node> once.\");\n+\n+    string strNode = params[0].get_str();\n+\n+    if (strCommand == \"onetry\")\n+    {\n+        CAddress addr;\n+        ConnectNode(addr, strNode.c_str());\n+        return Value::null;\n+    }\n+\n+    LOCK(cs_vAddedNodes);\n+    vector<string>::iterator it = vAddedNodes.begin();\n+    for(; it != vAddedNodes.end(); it++)\n+        if (strNode == *it)\n+            break;\n+\n+    if (strCommand == \"add\")\n+    {\n+        if (it != vAddedNodes.end())\n+            throw JSONRPCError(-23, \"Error: Node already added\");\n+        vAddedNodes.push_back(strNode);\n+    }\n+    else if(strCommand == \"remove\")\n+    {\n+        if (it == vAddedNodes.end())\n+            throw JSONRPCError(-24, \"Error: Node has not been added.\");\n+        vAddedNodes.erase(it);\n+    }\n+\n+    return Value::null;\n+}\n+\n+Value getaddednodeinfo(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"getaddednodeinfo <dns> [node]\\n\"\n+            \"Returns information about the given added node, or all added nodes\\n\"\n+            \"(note that onetry addnodes are not listed here)\\n\"\n+            \"If dns is false, only a list of added nodes will be provided,\\n\"\n+            \"otherwise connected information will also be available.\");\n+\n+    bool fDns = params[0].get_bool();\n+\n+    list<string> laddedNodes(0);\n+    if (params.size() == 1)\n+    {\n+        LOCK(cs_vAddedNodes);\n+        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+            laddedNodes.push_back(strAddNode);\n+    }\n+    else\n+    {\n+        string strNode = params[1].get_str();\n+        LOCK(cs_vAddedNodes);\n+        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+            if (strAddNode == strNode)\n+            {\n+                laddedNodes.push_back(strAddNode);\n+                break;\n+            }\n+        if (laddedNodes.size() == 0)\n+            throw JSONRPCError(-24, \"Error: Node has not been added.\");\n+    }\n+\n+    if (!fDns)\n+    {\n+        Object ret;\n+        BOOST_FOREACH(string& strAddNode, laddedNodes)\n+            ret.push_back(Pair(\"addednode\", strAddNode));\n+        return ret;\n+    }\n+\n+    Array ret;\n+\n+    list<pair<string, vector<CService> > > laddedAddreses(0);\n+    BOOST_FOREACH(string& strAddNode, laddedNodes)\n+    {\n+        vector<CService> vservNode(0);\n+        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+            laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n+        else\n+        {\n+            Object obj;\n+            obj.push_back(Pair(\"addednode\", strAddNode));\n+            obj.push_back(Pair(\"connected\", false));\n+            Array addresses;\n+            obj.push_back(Pair(\"addresses\", addresses));\n+        }\n+    }\n+\n+    LOCK(cs_vNodes);\n+    for (list<pair<string, vector<CService> > >::iterator it = laddedAddreses.begin(); it != laddedAddreses.end(); it++)\n+    {\n+        Object obj;\n+        obj.push_back(Pair(\"addednode\", it->first));\n+\n+        Array addresses;\n+        bool fConnected = false;\n+        BOOST_FOREACH(CService& addrNode, it->second)\n+        {\n+            bool fFound = false;\n+            Object node;\n+            node.push_back(Pair(\"address\", addrNode.ToString()));\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n+                if (pnode->addr == addrNode)\n+                {\n+                    fFound = true;\n+                    fConnected = true;\n+                    node.push_back(Pair(\"connected\", pnode->fInbound ? \"inbound\" : \"outbound\"));\n+                    break;\n+                }\n+            if (!fFound)\n+                node.push_back(Pair(\"connected\", \"false\"));\n+            addresses.push_back(node);\n+        }\n+        obj.push_back(Pair(\"connected\", fConnected));\n+        obj.push_back(Pair(\"addresses\", addresses));\n+        ret.push_back(obj);\n+    }\n+\n+    return ret;\n+}\n+"
      }
    ]
  },
  {
    "sha": "16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmUxNjgxZGQ0YTBhZDdlMWIyZWUzNzZjODhjNjA5OGMxNzcwM2Y5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:32:19Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:32:19Z"
      },
      "message": "Merge branch 'gmp_longpoll' into next",
      "tree": {
        "sha": "3fff3ea49d0bbde30bccb8b48015d411b61221d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fff3ea49d0bbde30bccb8b48015d411b61221d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b5409c1a162eec34bddabbb33c8b82e8433395e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b5409c1a162eec34bddabbb33c8b82e8433395e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b5409c1a162eec34bddabbb33c8b82e8433395e"
      },
      {
        "sha": "650ea32bbd60ac149809333131bd887537afa477",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/650ea32bbd60ac149809333131bd887537afa477",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/650ea32bbd60ac149809333131bd887537afa477"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8fd73354d2043e2415209c31129d90a348015d81",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
        "patch": "@@ -26,8 +26,11 @@\n #include <boost/asio/ssl.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <boost/thread/locks.hpp>\n #include <list>\n \n+typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n+\n #define printf OutputDebugStringF\n \n using namespace std;\n@@ -1969,6 +1972,33 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         if (IsInitialBlockDownload())\n             throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n \n+        do\n+        {\n+            Value lpval = find_value(oparam, \"longpollid\");\n+            if (lpval.type() != null_type)\n+            {\n+                uint256 hashWatchedChain = hashBestChain;\n+                if (lpval.type() == str_type)\n+                {\n+                    uint256 lpid;\n+                    lpid.SetHex(lpval.get_str());\n+                    if (lpid != hashWatchedChain)\n+                        break;\n+                }\n+\n+                LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+                LEAVE_CRITICAL_SECTION(cs_main);\n+                {\n+                    boost::unique_lock<boost::mutex> lock(csBestBlock);\n+                    while (hashBestChain == hashWatchedChain)\n+                        cvBlockChange.wait(lock);\n+                }\n+                ENTER_CRITICAL_SECTION(cs_main);\n+                ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+            }\n+        }\n+        while(0);\n+\n         static CReserveKey reservekey(pwalletMain);\n \n         // Update block\n@@ -2067,6 +2097,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         result.push_back(Pair(\"transactions\", transactions));\n         result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+        result.push_back(Pair(\"longpollid\", hashBestChain.GetHex()));\n         result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n         result.push_back(Pair(\"mutable\", aMutable));"
      },
      {
        "sha": "b1931a4003c3dde98fd81b97480692165d8fafd1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
        "patch": "@@ -11,6 +11,9 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/mutex.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -37,6 +40,8 @@ CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n int64 nTimeBestReceived = 0;\n+boost::mutex csBestBlock;\n+boost::condition_variable cvBlockChange;\n \n CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes claim to have\n \n@@ -1649,6 +1654,9 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n         ::SetBestChain(locator);\n     }\n \n+    {\n+        boost::lock_guard<boost::mutex> lock(csBestBlock);\n+\n     // New best block\n     hashBestChain = hash;\n     pindexBest = pindexNew;\n@@ -1657,10 +1665,15 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n+\n+    }\n+\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  date=%s\\n\",\n       hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n+    cvBlockChange.notify_all();\n+\n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     if (!fIsInitialDownload)\n     {"
      },
      {
        "sha": "3de48c8d07e34b09488f11e4863355b70ceca31e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/mutex.hpp>\n+\n #include \"bignum.h\"\n #include \"sync.h\"\n #include \"net.h\"\n@@ -64,6 +67,8 @@ extern const std::string strMessageMagic;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n+extern boost::mutex csBestBlock;\n+extern boost::condition_variable cvBlockChange;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];"
      }
    ]
  },
  {
    "sha": "73d335af49071d56caad48d9a6f737fa7257058d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2QzMzVhZjQ5MDcxZDU2Y2FhZDQ4ZDlhNmY3MzdmYTcyNTcwNThk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:32:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:32:28Z"
      },
      "message": "Merge branch 'listtx_generate_fold' into next",
      "tree": {
        "sha": "f1ba17fe59a18c6278b034e41de8595e4dec464e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ba17fe59a18c6278b034e41de8595e4dec464e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73d335af49071d56caad48d9a6f737fa7257058d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73d335af49071d56caad48d9a6f737fa7257058d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73d335af49071d56caad48d9a6f737fa7257058d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73d335af49071d56caad48d9a6f737fa7257058d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16e1681dd4a0ad7e1b2ee376c88c6098c17703f9"
      },
      {
        "sha": "ee9eecb54db794a97de6e5add719aa6c4c020589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee9eecb54db794a97de6e5add719aa6c4c020589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee9eecb54db794a97de6e5add719aa6c4c020589"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 56,
      "deletions": 60
    },
    "files": [
      {
        "sha": "7425c1f9a796b6752e3cb95d6b853c04240b01e0",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 32,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73d335af49071d56caad48d9a6f737fa7257058d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73d335af49071d56caad48d9a6f737fa7257058d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=73d335af49071d56caad48d9a6f737fa7257058d",
        "patch": "@@ -185,6 +185,37 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.push_back(Pair(\"confirmations\", confirms));\n+    const char *strStatus;\n+    if (wtx.IsCoinBase())\n+    {\n+        entry.push_back(Pair(\"from\", \"generation\"));\n+        if (confirms >= COINBASE_MATURITY)\n+        {\n+            if (!wtx.GetBlocksToMaturity())\n+                strStatus = \"confirmed\";\n+            else\n+                strStatus = \"processing\";\n+        }\n+        else\n+        if (confirms >= 1)\n+            strStatus = \"validating\";\n+        else\n+            strStatus = \"invalid\";\n+    }\n+    else\n+    {\n+        if (confirms >= 6)\n+            strStatus = \"confirmed\";\n+        else\n+        if (confirms >= 2)\n+            strStatus = \"processing\";\n+        else\n+        if (confirms >= 0)\n+            strStatus = \"validating\";\n+        else\n+            strStatus = \"invalid\";\n+    }\n+    entry.push_back(Pair(\"status\", strStatus));\n     if (confirms)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n@@ -800,12 +831,12 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n         if (!wtx.IsFinal())\n             continue;\n \n-        int64 nGenerated, nReceived, nSent, nFee;\n-        wtx.GetAccountAmounts(strAccount, nGenerated, nReceived, nSent, nFee);\n+        int64 nReceived, nSent, nFee;\n+        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n             nBalance += nReceived;\n-        nBalance += nGenerated - nSent - nFee;\n+        nBalance -= nSent + nFee;\n     }\n \n     // Tally internal accounting entries\n@@ -847,12 +878,11 @@ Value getbalance(const Array& params, bool fHelp)\n             if (!wtx.IsFinal())\n                 continue;\n \n-            int64 allGeneratedImmature, allGeneratedMature, allFee;\n-            allGeneratedImmature = allGeneratedMature = allFee = 0;\n+            int64 allFee;\n             string strSentAccount;\n             list<pair<CTxDestination, int64> > listReceived;\n             list<pair<CTxDestination, int64> > listSent;\n-            wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n+            wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n@@ -861,7 +891,6 @@ Value getbalance(const Array& params, bool fHelp)\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n-            nBalance += allGeneratedMature;\n         }\n         return  ValueFromAmount(nBalance);\n     }\n@@ -1230,35 +1259,15 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n-    int64 nGeneratedImmature, nGeneratedMature, nFee;\n+    int64 nFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64> > listReceived;\n     list<pair<CTxDestination, int64> > listSent;\n \n-    wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n+    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n \n-    // Generated blocks assigned to account \"\"\n-    if ((nGeneratedMature+nGeneratedImmature) != 0 && (fAllAccounts || strAccount == \"\"))\n-    {\n-        Object entry;\n-        entry.push_back(Pair(\"account\", string(\"\")));\n-        if (nGeneratedImmature)\n-        {\n-            entry.push_back(Pair(\"category\", wtx.GetDepthInMainChain() ? \"immature\" : \"orphan\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(nGeneratedImmature)));\n-        }\n-        else\n-        {\n-            entry.push_back(Pair(\"category\", \"generate\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(nGeneratedMature)));\n-        }\n-        if (fLong)\n-            WalletTxToJSON(wtx, entry);\n-        ret.push_back(entry);\n-    }\n-\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n@@ -1411,17 +1420,16 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64 nGeneratedImmature, nGeneratedMature, nFee;\n+        int64 nFee;\n         string strSentAccount;\n         list<pair<CTxDestination, int64> > listReceived;\n         list<pair<CTxDestination, int64> > listSent;\n-        wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n+        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n-            mapAccountBalances[\"\"] += nGeneratedMature;\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;"
      },
      {
        "sha": "cc60e2732bf1a62767b4489c5dc5408101e0586b",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73d335af49071d56caad48d9a6f737fa7257058d/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73d335af49071d56caad48d9a6f737fa7257058d/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=73d335af49071d56caad48d9a6f737fa7257058d",
        "patch": "@@ -54,12 +54,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                if (wtx.IsCoinBase())\n-                {\n-                    // Generated\n-                    sub.type = TransactionRecord::Generated;\n-                }\n-                else if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n+                if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n                     sub.type = TransactionRecord::RecvWithAddress;\n@@ -71,6 +66,11 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.type = TransactionRecord::RecvFromOther;\n                     sub.address = mapValue[\"from\"];\n                 }\n+                if (wtx.IsCoinBase())\n+                {\n+                    // Generated\n+                    sub.type = TransactionRecord::Generated;\n+                }\n \n                 parts.append(sub);\n             }"
      },
      {
        "sha": "847c9e97338657005545ee00f03a24f00a4d96d7",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73d335af49071d56caad48d9a6f737fa7257058d/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73d335af49071d56caad48d9a6f737fa7257058d/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=73d335af49071d56caad48d9a6f737fa7257058d",
        "patch": "@@ -392,11 +392,11 @@ QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, b\n         return QString::fromStdString(wtx->address);\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n+    case TransactionRecord::Generated:\n         return lookupAddress(wtx->address, tooltip);\n     case TransactionRecord::SendToOther:\n         return QString::fromStdString(wtx->address);\n     case TransactionRecord::SendToSelf:\n-    case TransactionRecord::Generated:\n     default:\n         return tr(\"(n/a)\");\n     }\n@@ -409,13 +409,13 @@ QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const\n     {\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n+    case TransactionRecord::Generated:\n         {\n         QString label = walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(wtx->address));\n         if(label.isEmpty())\n             return COLOR_BAREADDRESS;\n         } break;\n     case TransactionRecord::SendToSelf:\n-    case TransactionRecord::Generated:\n         return COLOR_BAREADDRESS;\n     default:\n         break;"
      },
      {
        "sha": "da9cc3e64a69026719966a94af6a329600735b14",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 18,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73d335af49071d56caad48d9a6f737fa7257058d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73d335af49071d56caad48d9a6f737fa7257058d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=73d335af49071d56caad48d9a6f737fa7257058d",
        "patch": "@@ -527,23 +527,14 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CTxDestination, int64> >& listReceived,\n+void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n                            list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n-    nGeneratedImmature = nGeneratedMature = nFee = 0;\n+    nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n-    if (IsCoinBase())\n-    {\n-        if (GetBlocksToMaturity() > 0)\n-            nGeneratedImmature = pwallet->GetCredit(*this);\n-        else\n-            nGeneratedMature = GetCredit();\n-        return;\n-    }\n-\n     // Compute fee:\n     int64 nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n@@ -576,20 +567,17 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived,\n+void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nReceived,\n                                   int64& nSent, int64& nFee) const\n {\n-    nGenerated = nReceived = nSent = nFee = 0;\n+    nReceived = nSent = nFee = 0;\n \n-    int64 allGeneratedImmature, allGeneratedMature, allFee;\n-    allGeneratedImmature = allGeneratedMature = allFee = 0;\n+    int64 allFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64> > listReceived;\n     list<pair<CTxDestination, int64> > listSent;\n-    GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n+    GetAmounts(listReceived, listSent, allFee, strSentAccount);\n \n-    if (strAccount == \"\")\n-        nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& s, listSent)"
      },
      {
        "sha": "3f80a624385331926521c25f2739ae0a9bebf0cf",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73d335af49071d56caad48d9a6f737fa7257058d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73d335af49071d56caad48d9a6f737fa7257058d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=73d335af49071d56caad48d9a6f737fa7257058d",
        "patch": "@@ -536,10 +536,10 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CTxDestination, int64> >& listReceived,\n+    void GetAmounts(std::list<std::pair<CTxDestination, int64> >& listReceived,\n                     std::list<std::pair<CTxDestination, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n+    void GetAccountAmounts(const std::string& strAccount, int64& nReceived,\n                            int64& nSent, int64& nFee) const;\n \n     bool IsFromMe() const"
      }
    ]
  },
  {
    "sha": "56f2e1161daf722b80d3ca6d5af8e44db968d96b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmYyZTExNjFkYWY3MjJiODBkM2NhNmQ1YWY4ZTQ0ZGI5NjhkOTZi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:32:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:32:33Z"
      },
      "message": "Merge branch 'refactor_times' into next",
      "tree": {
        "sha": "4193db0a404377965800a457d12dcac06475b9d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4193db0a404377965800a457d12dcac06475b9d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56f2e1161daf722b80d3ca6d5af8e44db968d96b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f2e1161daf722b80d3ca6d5af8e44db968d96b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56f2e1161daf722b80d3ca6d5af8e44db968d96b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f2e1161daf722b80d3ca6d5af8e44db968d96b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73d335af49071d56caad48d9a6f737fa7257058d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73d335af49071d56caad48d9a6f737fa7257058d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73d335af49071d56caad48d9a6f737fa7257058d"
      },
      {
        "sha": "f45fa25bb9efb6f83409e71b972f07cce0eb4520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f45fa25bb9efb6f83409e71b972f07cce0eb4520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f45fa25bb9efb6f83409e71b972f07cce0eb4520"
      }
    ],
    "stats": {
      "total": 422,
      "additions": 399,
      "deletions": 23
    },
    "files": [
      {
        "sha": "9b6b87cac94b4fd1045863c23da6a8faa574c4ff",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 20,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -220,9 +220,11 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n+        entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n     entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n+    entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n@@ -928,6 +930,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Debit\n     CAccountingEntry debit;\n+    debit.nOrderPos = pwalletMain->nOrderPosNext++;\n     debit.strAccount = strFrom;\n     debit.nCreditDebit = -nAmount;\n     debit.nTime = nNow;\n@@ -937,6 +940,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     // Credit\n     CAccountingEntry credit;\n+    credit.nOrderPos = pwalletMain->nOrderPosNext++;\n     credit.strAccount = strTo;\n     credit.nCreditDebit = nAmount;\n     credit.nTime = nNow;\n@@ -1348,29 +1352,11 @@ Value listtransactions(const Array& params, bool fHelp)\n         throw JSONRPCError(-8, \"Negative from\");\n \n     Array ret;\n-    CWalletDB walletdb(pwalletMain->strWalletFile);\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n-    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64, TxPair > TxItems;\n-    TxItems txByTime;\n \n-    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n-    // would make this much faster for applications that do this a lot.\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(make_pair(wtx->GetTxTime(), TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    list<CAccountingEntry> acentries;\n-    walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n-    }\n+    CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(strAccount);\n \n     // iterate backwards until we have nCount items to return:\n-    for (TxItems::reverse_iterator it = txByTime.rbegin(); it != txByTime.rend(); ++it)\n+    for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)"
      },
      {
        "sha": "c0aec433b846691393861d99354a8e2a93e0ce95",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -100,6 +100,7 @@ TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n             {\n                 entry.push_back(Pair(\"confirmations\", 1 + nBestHeight - pindex->nHeight));\n                 entry.push_back(Pair(\"time\", (boost::int64_t)pindex->nTime));\n+                entry.push_back(Pair(\"blocktime\", (boost::int64_t)pindex->nTime));\n             }\n             else\n                 entry.push_back(Pair(\"confirmations\", 0));"
      },
      {
        "sha": "c474fd65c113202cceebdb767ac28a4344f9f6d9",
        "filename": "src/test/accounting_tests.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -0,0 +1,123 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include <boost/foreach.hpp>\n+\n+#include \"init.h\"\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n+\n+BOOST_AUTO_TEST_SUITE(accounting_tests)\n+\n+static void\n+GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n+{\n+    std::list<CAccountingEntry> aes;\n+\n+    results.clear();\n+    BOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n+    walletdb.ListAccountCreditDebit(\"\", aes);\n+    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    {\n+        results[ae.nOrderPos] = ae;\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n+{\n+    CWalletDB walletdb(pwalletMain->strWalletFile);\n+    std::vector<CWalletTx*> vpwtx;\n+    CWalletTx wtx;\n+    CAccountingEntry ae;\n+    std::map<int64, CAccountingEntry> results;\n+\n+    ae.strAccount = \"\";\n+    ae.nCreditDebit = 1;\n+    ae.nTime = 1333333333;\n+    ae.strOtherAccount = \"b\";\n+    ae.strComment = \"\";\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    wtx.mapValue[\"comment\"] = \"z\";\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n+    vpwtx[0]->nOrderPos = -1;\n+\n+    ae.nTime = 1333333336;\n+    ae.strOtherAccount = \"c\";\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(2 == results.size());\n+    BOOST_CHECK(results[0].nTime == 1333333333);\n+    BOOST_CHECK(results[0].strComment.empty());\n+    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[2].nTime == 1333333336);\n+    BOOST_CHECK(results[2].strOtherAccount == \"c\");\n+\n+\n+    ae.nTime = 1333333330;\n+    ae.strOtherAccount = \"d\";\n+    ae.nOrderPos = pwalletMain->nOrderPosNext++;\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 3);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(results[0].nTime == 1333333333);\n+    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[2].nTime == 1333333336);\n+    BOOST_CHECK(results[3].nTime == 1333333330);\n+    BOOST_CHECK(results[3].strComment.empty());\n+\n+\n+    wtx.mapValue[\"comment\"] = \"y\";\n+    --wtx.nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n+\n+    wtx.mapValue[\"comment\"] = \"x\";\n+    --wtx.nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n+    vpwtx[2]->nOrderPos = -1;\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 3);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n+    BOOST_CHECK(results[1].nTime == 1333333333);\n+    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[3].nTime == 1333333336);\n+    BOOST_CHECK(results[4].nTime == 1333333330);\n+    BOOST_CHECK(results[4].strComment.empty());\n+    BOOST_CHECK(5 == vpwtx[1]->nOrderPos);\n+\n+\n+    ae.nTime = 1333333334;\n+    ae.strOtherAccount = \"e\";\n+    ae.nOrderPos = -1;\n+    walletdb.WriteAccountingEntry(ae);\n+\n+    GetResults(walletdb, results);\n+\n+    BOOST_CHECK(results.size() == 4);\n+    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n+    BOOST_CHECK(results[1].nTime == 1333333333);\n+    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n+    BOOST_CHECK(results[3].nTime == 1333333336);\n+    BOOST_CHECK(results[3].strComment.empty());\n+    BOOST_CHECK(results[4].nTime == 1333333330);\n+    BOOST_CHECK(results[4].strComment.empty());\n+    BOOST_CHECK(results[5].nTime == 1333333334);\n+    BOOST_CHECK(6 == vpwtx[1]->nOrderPos);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5ce4a6ce2bec9811af158e52012e8afba94a00ab",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 1,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -291,6 +291,31 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     return true;\n }\n \n+CWallet::TxItems\n+CWallet::OrderedTxItems(std::string strAccount)\n+{\n+    CWalletDB walletdb(strWalletFile);\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-order multimap.\n+    TxItems txOrdered;\n+\n+    // Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry\n+    // would make this much faster for applications that do this a lot.\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txOrdered.insert(make_pair(wtx->nOrderPos, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    walletdb.ListAccountCreditDebit(strAccount, acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    return txOrdered;\n+}\n+\n void CWallet::WalletUpdateSpent(const CTransaction &tx)\n {\n     // Anytime a signature is successfully verified, it's proof the outpoint is spent.\n@@ -336,7 +361,55 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         wtx.BindWallet(this);\n         bool fInsertedNew = ret.second;\n         if (fInsertedNew)\n+        {\n             wtx.nTimeReceived = GetAdjustedTime();\n+            wtx.nOrderPos = nOrderPosNext++;\n+\n+            wtx.nTimeSmart = wtx.nTimeReceived;\n+            if (wtxIn.hashBlock != 0)\n+            {\n+                if (mapBlockIndex.count(wtxIn.hashBlock))\n+                {\n+                    unsigned int latestNow = wtx.nTimeReceived;\n+                    unsigned int latestEntry = 0;\n+                    {\n+                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                        int64 latestTolerated = latestNow + 300;\n+                        TxItems txOrdered = OrderedTxItems();\n+                        for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        {\n+                            CWalletTx *const pwtx = (*it).second.first;\n+                            if (pwtx == &wtx)\n+                                continue;\n+                            CAccountingEntry *const pacentry = (*it).second.second;\n+                            int64 nSmartTime;\n+                            if (pwtx)\n+                            {\n+                                nSmartTime = pwtx->nTimeSmart;\n+                                if (!nSmartTime)\n+                                    nSmartTime = pwtx->nTimeReceived;\n+                            }\n+                            else\n+                                nSmartTime = pacentry->nTime;\n+                            if (nSmartTime <= latestTolerated)\n+                            {\n+                                latestEntry = nSmartTime;\n+                                if (nSmartTime > latestNow)\n+                                    latestNow = nSmartTime;\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    unsigned int& blocktime = mapBlockIndex[wtxIn.hashBlock]->nTime;\n+                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+                }\n+                else\n+                    printf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                           wtxIn.GetHash().ToString().substr(0,10).c_str(),\n+                           wtxIn.hashBlock.ToString().c_str());\n+            }\n+        }\n \n         bool fUpdated = false;\n         if (!fInsertedNew)\n@@ -485,7 +558,8 @@ bool CWallet::IsChange(const CTxOut& txout) const\n \n int64 CWalletTx::GetTxTime() const\n {\n-    return nTimeReceived;\n+    int64 n = nTimeSmart;\n+    return n ? n : nTimeReceived;\n }\n \n int CWalletTx::GetRequestCount() const"
      },
      {
        "sha": "69badaf10dfec7c2603206e3be0759b138275933",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 94,
        "deletions": 1,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -5,12 +5,19 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n \n+class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n class CWalletDB;\n@@ -103,6 +110,7 @@ class CWallet : public CCryptoKeyStore\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+    int64 nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n     std::map<CTxDestination, std::string> mapAddressBook;\n@@ -136,6 +144,10 @@ class CWallet : public CCryptoKeyStore\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64, TxPair > TxItems;\n+    TxItems OrderedTxItems(std::string strAccount = \"\");\n+\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n@@ -304,6 +316,32 @@ class CReserveKey\n };\n \n \n+typedef std::map<std::string, std::string> mapValue_t;\n+\n+\n+static\n+void\n+ReadOrderPos(int64& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (!mapValue.count(\"n\"))\n+    {\n+        nOrderPos = -1; // TODO: calculate elsewhere\n+        return;\n+    }\n+    nOrderPos = atoi64(mapValue[\"n\"].c_str());\n+}\n+\n+\n+static\n+void\n+WriteOrderPos(const int64& nOrderPos, mapValue_t& mapValue)\n+{\n+    if (nOrderPos == -1)\n+        return;\n+    mapValue[\"n\"] = i64tostr(nOrderPos);\n+}\n+\n+\n /** A transaction with a bunch of additional info that only the owner cares about. \n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n@@ -314,13 +352,15 @@ class CWalletTx : public CMerkleTx\n \n public:\n     std::vector<CMerkleTx> vtxPrev;\n-    std::map<std::string, std::string> mapValue;\n+    mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n+    unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n+    int64 nOrderPos;  // position in ordered transaction list\n \n     // memory only\n     mutable bool fDebitCached;\n@@ -360,6 +400,7 @@ class CWalletTx : public CMerkleTx\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n         nTimeReceived = 0;\n+        nTimeSmart = 0;\n         fFromMe = false;\n         strFromAccount.clear();\n         vfSpent.clear();\n@@ -371,6 +412,7 @@ class CWalletTx : public CMerkleTx\n         nCreditCached = 0;\n         nAvailableCreditCached = 0;\n         nChangeCached = 0;\n+        nOrderPos = -1;\n     }\n \n     IMPLEMENT_SERIALIZE\n@@ -392,6 +434,11 @@ class CWalletTx : public CMerkleTx\n                     fSpent = true;\n             }\n             pthis->mapValue[\"spent\"] = str;\n+\n+            WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n+\n+            if (nTimeSmart)\n+                pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n@@ -412,11 +459,17 @@ class CWalletTx : public CMerkleTx\n                     pthis->vfSpent.push_back(c != '0');\n             else\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n+\n+            ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n+\n+            pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n         }\n \n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n+        pthis->mapValue.erase(\"n\");\n+        pthis->mapValue.erase(\"timesmart\");\n     )\n \n     // marks certain txout's as spent\n@@ -705,6 +758,9 @@ class CAccountingEntry\n     int64 nTime;\n     std::string strOtherAccount;\n     std::string strComment;\n+    mapValue_t mapValue;\n+    int64 nOrderPos;  // position in ordered transaction list\n+    uint64 nEntryNo;\n \n     CAccountingEntry()\n     {\n@@ -718,18 +774,55 @@ class CAccountingEntry\n         strAccount.clear();\n         strOtherAccount.clear();\n         strComment.clear();\n+        nOrderPos = -1;\n     }\n \n     IMPLEMENT_SERIALIZE\n     (\n+        CAccountingEntry& me = *const_cast<CAccountingEntry*>(this);\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n         // Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);\n         READWRITE(nTime);\n         READWRITE(strOtherAccount);\n+\n+        if (!fRead)\n+        {\n+            WriteOrderPos(nOrderPos, me.mapValue);\n+\n+            if (!(mapValue.empty() && _ssExtra.empty()))\n+            {\n+                CDataStream ss(nType, nVersion);\n+                ss.insert(ss.begin(), '\\0');\n+                ss << mapValue;\n+                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n+                me.strComment.append(ss.str());\n+            }\n+        }\n+\n         READWRITE(strComment);\n+\n+        size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n+        if (fRead)\n+        {\n+            me.mapValue.clear();\n+            if (std::string::npos != nSepPos)\n+            {\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                ss >> me.mapValue;\n+                me._ssExtra = std::vector<char>(ss.begin(), ss.end());\n+            }\n+            ReadOrderPos(me.nOrderPos, me.mapValue);\n+        }\n+        if (std::string::npos != nSepPos)\n+            me.strComment.erase(nSepPos);\n+\n+        me.mapValue.erase(\"n\");\n     )\n+\n+private:\n+    std::vector<char> _ssExtra;\n };\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);"
      },
      {
        "sha": "164b68e11f674bbf6843c71888333266646a1d38",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 1,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -42,9 +42,14 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n     return Write(make_pair(string(\"acc\"), strAccount), account);\n }\n \n+bool CWalletDB::WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry)\n+{\n+    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n+}\n+\n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n {\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n+    return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n@@ -95,19 +100,94 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n             break;\n \n         ssValue >> acentry;\n+        ssKey >> acentry.nEntryNo;\n         entries.push_back(acentry);\n     }\n \n     pcursor->close();\n }\n \n \n+int\n+CWalletDB::ReorderTransactions(CWallet* pwallet)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    // Old wallets didn't have any defined order for transactions\n+    // Probably a bad idea to change the output of this\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef multimap<int64, TxPair > TxItems;\n+    TxItems txByTime;\n+\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    ListAccountCreditDebit(\"\", acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    int64& nOrderPosNext = pwallet->nOrderPosNext;\n+    nOrderPosNext = 0;\n+    std::vector<int64> nOrderPosOffsets;\n+    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+    {\n+        CWalletTx *const pwtx = (*it).second.first;\n+        CAccountingEntry *const pacentry = (*it).second.second;\n+        int64& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+        if (nOrderPos == -1)\n+        {\n+            nOrderPos = nOrderPosNext++;\n+            nOrderPosOffsets.push_back(nOrderPos);\n+\n+            if (pacentry)\n+                // Have to write accounting regardless, since we don't keep it in memory\n+                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+        else\n+        {\n+            int64 nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64& nOffsetStart, nOrderPosOffsets)\n+            {\n+                if (nOrderPos >= nOffsetStart)\n+                    ++nOrderPosOff;\n+            }\n+            nOrderPos += nOrderPosOff;\n+            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+\n+            if (!nOrderPosOff)\n+                continue;\n+\n+            // Since we're changing the order, write it back\n+            if (pwtx)\n+            {\n+                if (!WriteTx(pwtx->GetHash(), *pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+    }\n+\n+    return DB_LOAD_OK;\n+}\n+\n+\n int CWalletDB::LoadWallet(CWallet* pwallet)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     int nFileVersion = 0;\n     vector<uint256> vWalletUpgrade;\n     bool fIsEncrypted = false;\n+    bool fAnyUnordered = false;\n \n     //// todo: shouldn't we catch exceptions and try to recover and continue?\n     {\n@@ -183,6 +263,9 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                     vWalletUpgrade.push_back(hash);\n                 }\n \n+                if (wtx.nOrderPos == -1)\n+                    fAnyUnordered = true;\n+\n                 //// debug print\n                 //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n                 //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n@@ -199,6 +282,14 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 ssKey >> nNumber;\n                 if (nNumber > nAccountingEntryNumber)\n                     nAccountingEntryNumber = nNumber;\n+\n+                if (!fAnyUnordered)\n+                {\n+                    CAccountingEntry acentry;\n+                    ssValue >> acentry;\n+                    if (acentry.nOrderPos == -1)\n+                        fAnyUnordered = true;\n+                }\n             }\n             else if (strType == \"key\" || strType == \"wkey\")\n             {\n@@ -318,6 +409,10 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n     if (nFileVersion < CLIENT_VERSION) // Update\n         WriteVersion(CLIENT_VERSION);\n \n+    if (fAnyUnordered)\n+        return ReorderTransactions(pwallet);\n+\n+    // If you add anything else here... be sure to do it if ReorderTransactions returns DB_LOAD_OK too!\n     return DB_LOAD_OK;\n }\n "
      },
      {
        "sha": "187be65a978361d3334de9e6241ef0ac7625ef20",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f2e1161daf722b80d3ca6d5af8e44db968d96b/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "patch": "@@ -170,10 +170,14 @@ class CWalletDB : public CDB\n \n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+private:\n+    bool WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry);\n+public:\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     int64 GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n+    int ReorderTransactions(CWallet*);\n     int LoadWallet(CWallet* pwallet);\n };\n "
      }
    ]
  },
  {
    "sha": "2c63ef9156288b3cc72668fdb6ce44ec3a440076",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzYzZWY5MTU2Mjg4YjNjYzcyNjY4ZmRiNmNlNDRlYzNhNDQwMDc2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T18:52:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:53:19Z"
      },
      "message": "JSON-RPC method: prioritisetransaction <txid> <priority delta> <priority tx fee>\n\nAccepts the transaction into mined blocks at a higher (or lower) priority",
      "tree": {
        "sha": "da84d52343131d59387a96f7c0144c5e5a02e7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da84d52343131d59387a96f7c0144c5e5a02e7cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c63ef9156288b3cc72668fdb6ce44ec3a440076",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c63ef9156288b3cc72668fdb6ce44ec3a440076",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c63ef9156288b3cc72668fdb6ce44ec3a440076",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c63ef9156288b3cc72668fdb6ce44ec3a440076/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c23b6fd6887707c18d8a8e9c82047413d038b4b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c23b6fd6887707c18d8a8e9c82047413d038b4b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c23b6fd6887707c18d8a8e9c82047413d038b4b6"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 48,
      "deletions": 2
    },
    "files": [
      {
        "sha": "00c54cb6e48e3287a6b2816da2963187aeb790f9",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c63ef9156288b3cc72668fdb6ce44ec3a440076/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c63ef9156288b3cc72668fdb6ce44ec3a440076/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=2c63ef9156288b3cc72668fdb6ce44ec3a440076",
        "patch": "@@ -1810,6 +1810,20 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n+\n+Value prioritisetransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 3)\n+        throw runtime_error(\n+            \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n+            \"Accepts the transaction into mined blocks at a higher (or lower) priority\");\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    return PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), params[2].get_int64());\n+}\n+\n+\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -2130,6 +2144,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"settxfee\",               &settxfee,               false },\n     { \"getmemorypool\",          &getmemorypool,          true },\n     { \"listsinceblock\",         &listsinceblock,         false },\n+    { \"prioritisetransaction\",  &prioritisetransaction,  true },\n     { \"dumpprivkey\",            &dumpprivkey,            false },\n     { \"importprivkey\",          &importprivkey,          false },\n     { \"listunspent\",            &listunspent,            false },\n@@ -3027,6 +3042,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2]);\n+    if (strMethod == \"prioritisetransaction\"  && n > 1) ConvertTo<double>(params[1]);\n+    if (strMethod == \"prioritisetransaction\"  && n > 2) ConvertTo<boost::int64_t>(params[2]);\n \n     return params;\n }"
      },
      {
        "sha": "465961eb696db499b4fc82bce0a34d88556a6d10",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c63ef9156288b3cc72668fdb6ce44ec3a440076/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c63ef9156288b3cc72668fdb6ce44ec3a440076/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2c63ef9156288b3cc72668fdb6ce44ec3a440076",
        "patch": "@@ -3349,6 +3349,23 @@ class COrphan\n };\n \n \n+bool PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, int64 nFeeDelta)\n+{\n+    if (!mempool.mapTx.count(hash))\n+    {\n+        printf(\"PrioritiseTransaction: cannot find %s\\n\", strHash.c_str());\n+        return false;\n+    }\n+\n+    CTransaction &txn = mempool.mapTx[hash];\n+    txn.dPriorityDelta += dPriorityDelta;\n+    txn.nFeeDelta += nFeeDelta;\n+    printf(\"PrioritiseTransaction: %s priority += %f, fee += %\"PRI64d\"\\n\", strHash.c_str(), dPriorityDelta, nFeeDelta);\n+\n+    return true;\n+}\n+\n+\n uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n@@ -3488,10 +3505,12 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             // Priority is sum(valuein * age) / txsize\n             unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n             dPriority /= nTxSize;\n+            dPriority += tx.dPriorityDelta;\n \n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n             // incentive to create smaller transactions.\n+            nTotalIn += tx.nFeeDelta;\n             double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n \n             if (porphan)\n@@ -3534,10 +3553,10 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                 continue;\n \n             // Skip free transactions if we're past the minimum block size:\n-            if (fSortedByFee && (dFeePerKb < nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n+            if (fSortedByFee && (tx.dPriorityDelta <= 0) && (tx.nFeeDelta <= 0) && (dFeePerKb < nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n \n-            // Prioritize by fee once past the priority size or we run out of high-priority\n+            // Prioritise by fee once past the priority size or we run out of high-priority\n             // transactions:\n             if (!fSortedByFee &&\n                 ((nBlockSize + nTxSize >= nBlockPrioritySize) || (dPriority < COIN * 144 / 250)))"
      },
      {
        "sha": "7bbb8bb3e5764f727f747b7d45d19dfb3741c6ed",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c63ef9156288b3cc72668fdb6ce44ec3a440076/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c63ef9156288b3cc72668fdb6ce44ec3a440076/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2c63ef9156288b3cc72668fdb6ce44ec3a440076",
        "patch": "@@ -93,6 +93,7 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n bool LoadExternalBlockFile(FILE* fileIn);\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n+bool PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, int64 nFeeDelta);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n@@ -397,6 +398,10 @@ class CTransaction\n     mutable int nDoS;\n     bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n \n+    double dPriorityDelta;\n+    int64 nFeeDelta;\n+\n+\n     CTransaction()\n     {\n         SetNull();\n@@ -418,6 +423,8 @@ class CTransaction\n         vout.clear();\n         nLockTime = 0;\n         nDoS = 0;  // Denial-of-service prevention\n+        dPriorityDelta = 0;\n+        nFeeDelta = 0;\n     }\n \n     bool IsNull() const\n@@ -541,6 +548,9 @@ class CTransaction\n \n     int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n     {\n+        if (dPriorityDelta > 0 || nFeeDelta > 0)\n+            return 0;\n+\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n         int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n "
      }
    ]
  },
  {
    "sha": "1c4bc89a14b9f3963093cc66d2082787c20590c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzRiYzg5YTE0YjlmMzk2MzA5M2NjNjZkMjA4Mjc4N2MyMDU5MGMx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:54:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:54:39Z"
      },
      "message": "Merge branch 'rpc_priotxn' into next",
      "tree": {
        "sha": "376ff89de7fd06acadb2a2e394032d01e6894f13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/376ff89de7fd06acadb2a2e394032d01e6894f13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c4bc89a14b9f3963093cc66d2082787c20590c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4bc89a14b9f3963093cc66d2082787c20590c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4bc89a14b9f3963093cc66d2082787c20590c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4bc89a14b9f3963093cc66d2082787c20590c1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f2e1161daf722b80d3ca6d5af8e44db968d96b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f2e1161daf722b80d3ca6d5af8e44db968d96b"
      },
      {
        "sha": "2c63ef9156288b3cc72668fdb6ce44ec3a440076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c63ef9156288b3cc72668fdb6ce44ec3a440076",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c63ef9156288b3cc72668fdb6ce44ec3a440076"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 48,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4efd54df463f271723344577a73caa5f59c70527",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c4bc89a14b9f3963093cc66d2082787c20590c1/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c4bc89a14b9f3963093cc66d2082787c20590c1/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1c4bc89a14b9f3963093cc66d2082787c20590c1",
        "patch": "@@ -1809,6 +1809,20 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n+\n+Value prioritisetransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 3)\n+        throw runtime_error(\n+            \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n+            \"Accepts the transaction into mined blocks at a higher (or lower) priority\");\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    return PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), params[2].get_int64());\n+}\n+\n+\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -2233,6 +2247,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"settxfee\",               &settxfee,               false },\n     { \"getblocktemplate\",       &getblocktemplate,       true },\n     { \"listsinceblock\",         &listsinceblock,         false },\n+    { \"prioritisetransaction\",  &prioritisetransaction,  true },\n     { \"dumpprivkey\",            &dumpprivkey,            false },\n     { \"importprivkey\",          &importprivkey,          false },\n     { \"listunspent\",            &listunspent,            false },\n@@ -3132,6 +3147,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2]);\n+    if (strMethod == \"prioritisetransaction\"  && n > 1) ConvertTo<double>(params[1]);\n+    if (strMethod == \"prioritisetransaction\"  && n > 2) ConvertTo<boost::int64_t>(params[2]);\n \n     return params;\n }"
      },
      {
        "sha": "9647c05ebce7856e9973d1aeee985bb02dee152c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c4bc89a14b9f3963093cc66d2082787c20590c1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c4bc89a14b9f3963093cc66d2082787c20590c1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1c4bc89a14b9f3963093cc66d2082787c20590c1",
        "patch": "@@ -3396,6 +3396,23 @@ class COrphan\n };\n \n \n+bool PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, int64 nFeeDelta)\n+{\n+    if (!mempool.mapTx.count(hash))\n+    {\n+        printf(\"PrioritiseTransaction: cannot find %s\\n\", strHash.c_str());\n+        return false;\n+    }\n+\n+    CTransaction &txn = mempool.mapTx[hash];\n+    txn.dPriorityDelta += dPriorityDelta;\n+    txn.nFeeDelta += nFeeDelta;\n+    printf(\"PrioritiseTransaction: %s priority += %f, fee += %\"PRI64d\"\\n\", strHash.c_str(), dPriorityDelta, nFeeDelta);\n+\n+    return true;\n+}\n+\n+\n uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n@@ -3535,10 +3552,12 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             // Priority is sum(valuein * age) / txsize\n             unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n             dPriority /= nTxSize;\n+            dPriority += tx.dPriorityDelta;\n \n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n             // incentive to create smaller transactions.\n+            nTotalIn += tx.nFeeDelta;\n             double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n \n             if (porphan)\n@@ -3581,10 +3600,10 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                 continue;\n \n             // Skip free transactions if we're past the minimum block size:\n-            if (fSortedByFee && (dFeePerKb < nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n+            if (fSortedByFee && (tx.dPriorityDelta <= 0) && (tx.nFeeDelta <= 0) && (dFeePerKb < nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n \n-            // Prioritize by fee once past the priority size or we run out of high-priority\n+            // Prioritise by fee once past the priority size or we run out of high-priority\n             // transactions:\n             if (!fSortedByFee &&\n                 ((nBlockSize + nTxSize >= nBlockPrioritySize) || (dPriority < COIN * 144 / 250)))"
      },
      {
        "sha": "bcf020cf8e803f4b74d9e8c15179e8e29e3086aa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c4bc89a14b9f3963093cc66d2082787c20590c1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c4bc89a14b9f3963093cc66d2082787c20590c1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1c4bc89a14b9f3963093cc66d2082787c20590c1",
        "patch": "@@ -98,6 +98,7 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n bool LoadExternalBlockFile(FILE* fileIn);\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n+bool PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, int64 nFeeDelta);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n@@ -402,6 +403,10 @@ class CTransaction\n     mutable int nDoS;\n     bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n \n+    double dPriorityDelta;\n+    int64 nFeeDelta;\n+\n+\n     CTransaction()\n     {\n         SetNull();\n@@ -423,6 +428,8 @@ class CTransaction\n         vout.clear();\n         nLockTime = 0;\n         nDoS = 0;  // Denial-of-service prevention\n+        dPriorityDelta = 0;\n+        nFeeDelta = 0;\n     }\n \n     bool IsNull() const\n@@ -546,6 +553,9 @@ class CTransaction\n \n     int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n     {\n+        if (dPriorityDelta > 0 || nFeeDelta > 0)\n+            return 0;\n+\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n         int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n "
      }
    ]
  },
  {
    "sha": "4a57037c0b19f3aa95444a90795d27e6d9592038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTU3MDM3YzBiMTlmM2FhOTU0NDRhOTA3OTVkMjdlNmQ5NTkyMDM4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:59:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T05:59:39Z"
      },
      "message": "Merge branch 'minedeps' into next\n\nConflicts:\n\tsrc/main.cpp",
      "tree": {
        "sha": "17bd89b129a561249d2ceb10a3be9470fca64386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17bd89b129a561249d2ceb10a3be9470fca64386"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a57037c0b19f3aa95444a90795d27e6d9592038",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a57037c0b19f3aa95444a90795d27e6d9592038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a57037c0b19f3aa95444a90795d27e6d9592038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a57037c0b19f3aa95444a90795d27e6d9592038/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4bc89a14b9f3963093cc66d2082787c20590c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4bc89a14b9f3963093cc66d2082787c20590c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4bc89a14b9f3963093cc66d2082787c20590c1"
      },
      {
        "sha": "27b24244c4d1f97690d5908e3412ac5306920281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b24244c4d1f97690d5908e3412ac5306920281",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27b24244c4d1f97690d5908e3412ac5306920281"
      }
    ],
    "stats": {
      "total": 302,
      "additions": 205,
      "deletions": 97
    },
    "files": [
      {
        "sha": "24c510dd897bfba27f83dc0a4868ea730a5c7d10",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 97,
        "changes": 302,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a57037c0b19f3aa95444a90795d27e6d9592038/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a57037c0b19f3aa95444a90795d27e6d9592038/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4a57037c0b19f3aa95444a90795d27e6d9592038",
        "patch": "@@ -3371,28 +3371,151 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n     }\n }\n \n-// Some explaining would be appreciated\n-class COrphan\n+// CTxInfo represents a logical transaction to potentially be included in blocks\n+// It stores extra metadata such as the subjective priority of a transaction at the time of building the block\n+// When there are unconfirmed transactions that depend on other unconfirmed transactions, these \"child\" transactions' CTxInfo object factors in its \"parents\" to its priority and effective size; this way, the \"child\" can cover the \"cost\" of its \"parents\", and the \"parents\" are included into the block as part of the \"child\"\n+\n+class CTxInfo;\n+typedef std::map<uint256, CTxInfo> mapInfo_t;\n+\n+class CTxInfo\n {\n public:\n+    mapInfo_t *pmapInfoById;\n     CTransaction* ptx;\n+    uint256 hash;\n+private:\n     set<uint256> setDependsOn;\n+public:\n+    set<uint256> setDependents;\n     double dPriority;\n-    double dFeePerKb;\n+    uint64 nTxFee;\n+    bool fInvalid;\n+    unsigned int nSize;\n+    unsigned int nEffectiveSizeCached;\n \n-    COrphan(CTransaction* ptxIn)\n+    CTxInfo()\n     {\n-        ptx = ptxIn;\n-        dPriority = dFeePerKb = 0;\n+        pmapInfoById = NULL;\n+        ptx = NULL;\n+        hash = 0;\n+        dPriority = 0;\n+        nTxFee = 0;\n+        fInvalid = false;\n+        nSize = 0;\n+        nEffectiveSizeCached = 0;\n     }\n \n     void print() const\n     {\n-        printf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n-               ptx->GetHash().ToString().substr(0,10).c_str(), dPriority, dFeePerKb);\n+        printf(\"CTxInfo(hash=%s, dPriority=%.1f, nTxFee=%\"PRI64u\")\\n\",\n+               ptx->GetHash().ToString().substr(0,10).c_str(), dPriority, nTxFee);\n         BOOST_FOREACH(uint256 hash, setDependsOn)\n             printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n     }\n+\n+    void addDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.insert(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    void rmDependsOn(const uint256& hashPrev)\n+    {\n+        setDependsOn.erase(hashPrev);\n+        nEffectiveSizeCached = 0;\n+    }\n+\n+    // effectiveSize handles inheriting the fInvalid flag as a side effect\n+    unsigned int\n+    effectiveSize()\n+    {\n+        if (fInvalid)\n+            return -1;\n+\n+        if (nEffectiveSizeCached)\n+            return nEffectiveSizeCached;\n+\n+        assert(pmapInfoById);\n+\n+        if (!nSize)\n+            nSize = ::GetSerializeSize(*ptx, SER_NETWORK, PROTOCOL_VERSION);\n+        unsigned int nEffectiveSize = nSize;\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            nEffectiveSize += depinfo.effectiveSize();\n+\n+            if (depinfo.fInvalid)\n+            {\n+                fInvalid = true;\n+                return -1;\n+            }\n+        }\n+        nEffectiveSizeCached = nEffectiveSize;\n+        return nEffectiveSize;\n+    }\n+\n+    double\n+    getPriority()\n+    {\n+        // Priority is sum(valuein * age) / txsize\n+        return dPriority / effectiveSize() + ptx->dPriorityDelta;\n+    }\n+\n+    double\n+    getFeePerKB()\n+    {\n+        return double(nTxFee) / (double(effectiveSize()) / 1000);\n+    }\n+\n+    unsigned int\n+    GetLegacySigOpCount()\n+    {\n+        assert(pmapInfoById);\n+\n+        unsigned int n = ptx->GetLegacySigOpCount();\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            n += depinfo.GetLegacySigOpCount();\n+        }\n+        return n;\n+    }\n+\n+    bool\n+    DoInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoolTmp, CBlockIndex*pindexPrev, std::vector<CTxInfo*>& vAdded, unsigned int& nTxSigOps)\n+    {\n+        CTransaction& tx = *ptx;\n+\n+        if (mapTestPoolTmp.count(hash))\n+            // Already included in block template\n+            return true;\n+\n+        assert(pmapInfoById);\n+\n+        BOOST_FOREACH(const uint256& dephash, setDependsOn)\n+        {\n+            CTxInfo& depinfo = (*pmapInfoById)[dephash];\n+            if (!depinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n+                return false;\n+        }\n+\n+        MapPrevTx mapInputs;\n+        bool fInvalid;\n+        if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            return false;\n+\n+        nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+\n+        if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n+            return false;\n+\n+        mapTestPoolTmp[hash] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n+        vAdded.push_back(this);\n+\n+        return true;\n+    }\n };\n \n \n@@ -3417,7 +3540,7 @@ uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n // We want to sort transactions by priority and fee, so:\n-typedef boost::tuple<double, double, CTransaction*> TxPriority;\n+typedef CTxInfo* TxPriority;\n class TxPriorityCompare\n {\n     bool byFee;\n@@ -3427,15 +3550,15 @@ class TxPriorityCompare\n     {\n         if (byFee)\n         {\n-            if (a.get<1>() == b.get<1>())\n-                return a.get<0>() < b.get<0>();\n-            return a.get<1>() < b.get<1>();\n+            if (a->getFeePerKB() == b->getFeePerKB())\n+                return a->getPriority() < b->getPriority();\n+            return a->getFeePerKB() < b->getFeePerKB();\n         }\n         else\n         {\n-            if (a.get<0>() == b.get<0>())\n-                return a.get<1>() < b.get<1>();\n-            return a.get<0>() < b.get<0>();\n+            if (a->getPriority() == b->getPriority())\n+                return a->getFeePerKB() < b->getFeePerKB();\n+            return a->getPriority() < b->getPriority();\n         }\n     }\n };\n@@ -3493,80 +3616,68 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         CTxDB txdb(\"r\");\n \n         // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n+        mapInfo_t mapInfoById;\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n+\n         for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n         {\n             CTransaction& tx = (*mi).second;\n             if (tx.IsCoinBase() || !tx.IsFinal())\n                 continue;\n \n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n+            const uint256& hash = tx.GetHash();\n+            CTxInfo& txinfo = mapInfoById[hash];\n+            txinfo.hash = hash;\n+            txinfo.pmapInfoById = &mapInfoById;\n+            txinfo.ptx = &tx;\n+\n+            double& dPriority = txinfo.dPriority;\n+            uint64& nTxFee = txinfo.nTxFee;\n             int64 nTotalIn = 0;\n-            bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n                 // Read prev transaction\n                 CTransaction txPrev;\n                 CTxIndex txindex;\n-                if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n+                int64 nValueIn;\n+                int nConf;\n+                if (txPrev.ReadFromDisk(txdb, txin.prevout, txindex))\n                 {\n-                    // This should never happen; all transactions in the memory\n-                    // pool should connect to either transactions in the chain\n-                    // or other transactions in the memory pool.\n-                    if (!mempool.mapTx.count(txin.prevout.hash))\n-                    {\n-                        printf(\"ERROR: mempool transaction missing input\\n\");\n-                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n-                        fMissingInputs = true;\n-                        if (porphan)\n-                            vOrphan.pop_back();\n-                        break;\n-                    }\n-\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].vout[txin.prevout.n].nValue;\n-                    continue;\n+                    // Input is confirmed\n+                    nConf = txindex.GetDepthInMainChain();\n+                    nValueIn = txPrev.vout[txin.prevout.n].nValue;\n+                    dPriority += (double)nValueIn * nConf;\n+                }\n+                else\n+                if (mempool.mapTx.count(txin.prevout.hash))\n+                {\n+                    // Input is still unconfirmed\n+                    const uint256& hashPrev = txin.prevout.hash;\n+                    nValueIn = mempool.mapTx[hashPrev].vout[txin.prevout.n].nValue;\n+                    txinfo.addDependsOn(hashPrev);\n+                    mapInfoById[hashPrev].setDependents.insert(hash);\n+                    nConf = 0;\n+                }\n+                else\n+                {\n+                    // We don't know where the input is\n+                    // In this case, it's impossible to include this transaction in a block, so mark it invalid and move on\n+                    txinfo.fInvalid = true;\n+                    printf(\"priority %s invalid input %s\", txinfo.hash.ToString().substr(0,10).c_str(), txin.prevout.hash.ToString().substr(0,10).c_str());\n+                    goto nexttxn;\n                 }\n-                int64 nValueIn = txPrev.vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n-\n-                int nConf = txindex.GetDepthInMainChain();\n-                dPriority += (double)nValueIn * nConf;\n             }\n-            if (fMissingInputs) continue;\n \n-            // Priority is sum(valuein * age) / txsize\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            dPriority /= nTxSize;\n-            dPriority += tx.dPriorityDelta;\n+            nTxFee = nTotalIn - tx.GetValueOut();\n+            nTxFee += tx.nFeeDelta;\n \n-            // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n-            // client code rounds up the size to the nearest 1K. That's good, because it gives an\n-            // incentive to create smaller transactions.\n-            nTotalIn += tx.nFeeDelta;\n-            double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n+            vecPriority.push_back(&txinfo);\n \n-            if (porphan)\n-            {\n-                porphan->dPriority = dPriority;\n-                porphan->dFeePerKb = dFeePerKb;\n-            }\n-            else\n-                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &(*mi).second));\n+nexttxn:    (void)1;\n         }\n \n         // Collect transactions into block\n@@ -3582,20 +3693,24 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         while (!vecPriority.empty())\n         {\n             // Take highest priority transaction off the priority queue:\n-            double dPriority = vecPriority.front().get<0>();\n-            double dFeePerKb = vecPriority.front().get<1>();\n-            CTransaction& tx = *(vecPriority.front().get<2>());\n-\n+            CTxInfo& txinfo = *(vecPriority.front());\n             std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             vecPriority.pop_back();\n \n+            if (txinfo.fInvalid)\n+                continue;\n+\n+            CTransaction& tx = *txinfo.ptx;\n+            double dPriority = txinfo.getPriority();\n+            double dFeePerKb = txinfo.getFeePerKB();\n+\n             // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+            unsigned int nTxSize = txinfo.effectiveSize();\n             if (nBlockSize + nTxSize >= nBlockMaxSize)\n                 continue;\n \n             // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = tx.GetLegacySigOpCount();\n+            unsigned int nTxSigOps = txinfo.GetLegacySigOpCount();\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n@@ -3613,55 +3728,48 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            // Connecting shouldn't fail due to dependency on other memory pool transactions\n-            // because we're already processing them in order of dependency\n             map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n-            MapPrevTx mapInputs;\n-            bool fInvalid;\n-            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n+            std::vector<CTxInfo*> vAdded;\n+            if (!txinfo.DoInputs(txdb, mapTestPoolTmp, pindexPrev, vAdded, nTxSigOps))\n                 continue;\n \n-            int64 nTxFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();\n-\n-            nTxSigOps += tx.GetP2SHSigOpCount(mapInputs);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, false, true))\n-                continue;\n-            mapTestPoolTmp[tx.GetHash()] = CTxIndex(CDiskTxPos(1,1,1), tx.vout.size());\n             swap(mapTestPool, mapTestPoolTmp);\n \n             // Added\n-            pblock->vtx.push_back(tx);\n             nBlockSize += nTxSize;\n-            ++nBlockTx;\n+            nBlockTx += vAdded.size();\n             nBlockSigOps += nTxSigOps;\n-            nFees += nTxFees;\n \n             if (fDebug && GetBoolArg(\"-printpriority\"))\n             {\n                 printf(\"priority %.1f feeperkb %.1f txid %s\\n\",\n                        dPriority, dFeePerKb, tx.GetHash().ToString().c_str());\n             }\n \n-            // Add transactions that depend on this one to the priority queue\n-            uint256 hash = tx.GetHash();\n-            if (mapDependers.count(hash))\n+            bool fResort = false;\n+            BOOST_FOREACH(CTxInfo* ptxinfo, vAdded)\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n+                pblock->vtx.push_back(*ptxinfo->ptx);\n+                nFees += ptxinfo->nTxFee;\n+\n+                ptxinfo->fInvalid = true;\n+                if (!ptxinfo->setDependents.empty())\n                 {\n-                    if (!porphan->setDependsOn.empty())\n+                    fResort = true;\n+                    BOOST_FOREACH(const uint256& dhash, ptxinfo->setDependents)\n                     {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                        {\n-                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->dFeePerKb, porphan->ptx));\n-                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-                        }\n+                        CTxInfo& dtxinfo = mapInfoById[dhash];\n+                        dtxinfo.rmDependsOn(ptxinfo->hash);\n+                        fResort = true;\n                     }\n                 }\n             }\n+            if (fResort)\n+                // Re-sort the priority queue to pick up on improved standing\n+                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n         }\n \n         nLastBlockTx = nBlockTx;"
      }
    ]
  }
]