[
  {
    "sha": "ffff0d04425a616c14fc4a562e8ef93d286705f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmZmMGQwNDQyNWE2MTZjMTRmYzRhNTYyZThlZjkzZDI4NjcwNWY4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-31T12:57:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-31T12:56:17Z"
      },
      "message": "refactor: Switch serialize to uint8_t (1/n)",
      "tree": {
        "sha": "1fe09f283467aa165a518290a90213b11b4a74ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fe09f283467aa165a518290a90213b11b4a74ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffff0d04425a616c14fc4a562e8ef93d286705f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgP4AwAxmPPrfWp8nJBXMb1nV1UPOyaho6d0S+kad6wMV4kHJ/7bWLTAcj7ofS0\n6UGWIZFCMo0Sn1dZ+QRuWZUI/I+Y+FNqeKz2bu38RJa/Fvz860wSDaBtyK1jdzs0\nuG9udkK92hBBKkT1TzEiLq2LVS21Xnit5wo8UFGk8PGWw72FPa8+ZrtXZL00nK3p\nL15OqidKa8k8qk5c23Oa9SiC/1i9TjwUhMUWUcjC6dfikcF8EcvKWBPdUS61sph5\nbAPblJWfGitPmZFkixcM/r+zVt76RtZupoOG31YLVn14X90LBNICQBy9t7EmnO2c\nfIHCaDVzWP4tVm4nYiKexYPmw5xLCJY+bJbdd6cwbOcSPgP0TGuZ1f+GZDd/ducA\nmOmAW9gHqhTmXU9uzTZv7hMq8GH3NLhrP7JofDtqjNnBUZ3abT8AjueCB8vqzDh8\n0HRp96/F4fkS8nMG4fK4vfpEiIoSFYblIGb7sDCy68fy4FVGNX7LuDeBvaeeN0J3\newAbgd99\n=psQw\n-----END PGP SIGNATURE-----",
        "payload": "tree 1fe09f283467aa165a518290a90213b11b4a74ef\nparent 8c6df2b4ca1da716e2c834f0c3d18345c73c8c2c\nauthor MarcoFalke <falke.marco@gmail.com> 1622465852 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1622465777 +0200\n\nrefactor: Switch serialize to uint8_t (1/n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff0d04425a616c14fc4a562e8ef93d286705f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffff0d04425a616c14fc4a562e8ef93d286705f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffff0d04425a616c14fc4a562e8ef93d286705f8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c6df2b4ca1da716e2c834f0c3d18345c73c8c2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c6df2b4ca1da716e2c834f0c3d18345c73c8c2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c6df2b4ca1da716e2c834f0c3d18345c73c8c2c"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 45,
      "deletions": 49
    },
    "files": [
      {
        "sha": "14b412a038563ce1f52d75bafdf74ccaf7dd80a9",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -36,7 +36,7 @@ int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src, const std:\n \n int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? uint8_t{'N'} : uint8_t{'K'}) << nBucket << GetKey()).GetCheapHash();\n     return hash1 % ADDRMAN_BUCKET_SIZE;\n }\n \n@@ -652,7 +652,7 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n     int length = ftell(filestr);\n     LogPrintf(\"Opened asmap file %s (%d bytes) from disk\\n\", path, length);\n     fseek(filestr, 0, SEEK_SET);\n-    char cur_byte;\n+    uint8_t cur_byte;\n     for (int i = 0; i < length; ++i) {\n         file >> cur_byte;\n         for (int bit = 0; bit < 8; ++bit) {"
      },
      {
        "sha": "52936508baf33c9175598d31d870fa6adf89b9f7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -3048,7 +3048,7 @@ void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Spa\n     ser_writedata64(f, now.count());\n     f.write(msg_type.data(), msg_type.length());\n     for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n-        f << '\\0';\n+        f << uint8_t{'\\0'};\n     }\n     uint32_t size = data.size();\n     ser_writedata32(f, size);"
      },
      {
        "sha": "edf10440c654ad105c78124f7fabb1ec707254e0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -226,12 +226,8 @@ template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]\n template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }\n template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }\n \n-template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }\n-\n-\n-\n-\n+template <typename Stream> inline void Serialize(Stream& s, bool a) { uint8_t f = a; ser_writedata8(s, f); }\n+template <typename Stream> inline void Unserialize(Stream& s, bool& a) { uint8_t f = ser_readdata8(s); a = f; }\n \n \n /**"
      },
      {
        "sha": "b6f5938892c67c648097ad5fa5ccccc5ad6b5bd5",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     for (const bool obfuscate : {false, true}) {\n         fs::path ph = m_args.GetDataDirBase() / (obfuscate ? \"dbwrapper_obfuscate_true\" : \"dbwrapper_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n-        char key = 'k';\n+        uint8_t key{'k'};\n         uint256 in = InsecureRand256();\n         uint256 res;\n \n@@ -88,21 +88,21 @@ BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n         BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString());\n \n         //Simulate last block file number - \"l\"\n-        char key_last_blockfile_number = 'l';\n+        uint8_t key_last_blockfile_number{'l'};\n         uint32_t lastblockfilenumber = InsecureRand32();\n         BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n         BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n         BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);\n \n         //Simulate Is Reindexing - \"R\"\n-        char key_IsReindexing = 'R';\n+        uint8_t key_IsReindexing{'R'};\n         bool isInReindexing = InsecureRandBool();\n         BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n         BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n         BOOST_CHECK_EQUAL(isInReindexing, res_bool);\n \n         //Simulate last block hash up to which UXTO covers - 'B'\n-        char key_lastblockhash_uxto = 'B';\n+        uint8_t key_lastblockhash_uxto{'B'};\n         uint256 lastblock_hash = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n         BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n@@ -129,11 +129,11 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         fs::path ph = m_args.GetDataDirBase() / (obfuscate ? \"dbwrapper_batch_obfuscate_true\" : \"dbwrapper_batch_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n-        char key = 'i';\n+        uint8_t key{'i'};\n         uint256 in = InsecureRand256();\n-        char key2 = 'j';\n+        uint8_t key2{'j'};\n         uint256 in2 = InsecureRand256();\n-        char key3 = 'k';\n+        uint8_t key3{'k'};\n         uint256 in3 = InsecureRand256();\n \n         uint256 res;\n@@ -166,10 +166,10 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n-        char key = 'j';\n+        uint8_t key{'j'};\n         uint256 in = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key, in));\n-        char key2 = 'k';\n+        uint8_t key2{'k'};\n         uint256 in2 = InsecureRand256();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n@@ -178,7 +178,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n \n-        char key_res;\n+        uint8_t key_res;\n         uint256 val_res;\n \n         BOOST_REQUIRE(it->GetKey(key_res));\n@@ -207,7 +207,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n     std::unique_ptr<CDBWrapper> dbw = std::make_unique<CDBWrapper>(ph, (1 << 10), false, false, false);\n-    char key = 'k';\n+    uint8_t key{'k'};\n     uint256 in = InsecureRand256();\n     uint256 res;\n \n@@ -248,7 +248,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n     std::unique_ptr<CDBWrapper> dbw = std::make_unique<CDBWrapper>(ph, (1 << 10), false, false, false);\n-    char key = 'k';\n+    uint8_t key{'k'};\n     uint256 in = InsecureRand256();\n     uint256 res;\n \n@@ -334,15 +334,15 @@ struct StringContentsSerializer {\n     void Serialize(Stream& s) const\n     {\n         for (size_t i = 0; i < str.size(); i++) {\n-            s << str[i];\n+            s << uint8_t(str[i]);\n         }\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n         str.clear();\n-        char c = 0;\n+        uint8_t c{0};\n         while (true) {\n             try {\n                 s >> c;"
      },
      {
        "sha": "4b55e3bc264bc05cd96e23efb0bb3c4bc37be6bb",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -24,7 +24,7 @@ class CSerializeMethodsTestSingle\n     CTransactionRef txval;\n public:\n     CSerializeMethodsTestSingle() = default;\n-    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, const CTransactionRef& txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(txvalin)\n+    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const uint8_t* charstrvalin, const CTransactionRef& txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(txvalin)\n     {\n         memcpy(charstrval, charstrvalin, sizeof(charstrval));\n     }\n@@ -70,8 +70,8 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n-    // Bool is serialized as char\n-    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+    // Bool is serialized as uint8_t\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(bool(0), 0));\n \n     // Sanity-check GetSerializeSize and c++ type matching\n     BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1U);\n@@ -263,7 +263,7 @@ BOOST_AUTO_TEST_CASE(class_methods)\n     int intval(100);\n     bool boolval(true);\n     std::string stringval(\"testing\");\n-    const char charstrval[16] = \"testing charstr\";\n+    const uint8_t charstrval[16]{\"testing charstr\"};\n     CMutableTransaction txval;\n     CTransactionRef tx_ref{MakeTransactionRef(txval)};\n     CSerializeMethodsTestSingle methodtest1(intval, boolval, stringval, charstrval, tx_ref);"
      },
      {
        "sha": "762f71feb10a7102a1ecb3685185750accd7519f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -16,22 +16,22 @@\n \n #include <stdint.h>\n \n-static const char DB_COIN = 'C';\n-static const char DB_COINS = 'c';\n-static const char DB_BLOCK_FILES = 'f';\n-static const char DB_BLOCK_INDEX = 'b';\n+static constexpr uint8_t DB_COIN{'C'};\n+static constexpr uint8_t DB_COINS{'c'};\n+static constexpr uint8_t DB_BLOCK_FILES{'f'};\n+static constexpr uint8_t DB_BLOCK_INDEX{'b'};\n \n-static const char DB_BEST_BLOCK = 'B';\n-static const char DB_HEAD_BLOCKS = 'H';\n-static const char DB_FLAG = 'F';\n-static const char DB_REINDEX_FLAG = 'R';\n-static const char DB_LAST_BLOCK = 'l';\n+static constexpr uint8_t DB_BEST_BLOCK{'B'};\n+static constexpr uint8_t DB_HEAD_BLOCKS{'H'};\n+static constexpr uint8_t DB_FLAG{'F'};\n+static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n+static constexpr uint8_t DB_LAST_BLOCK{'l'};\n \n namespace {\n \n struct CoinEntry {\n     COutPoint* outpoint;\n-    char key;\n+    uint8_t key;\n     explicit CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}\n \n     SERIALIZE_METHODS(CoinEntry, obj) { READWRITE(obj.key, obj.outpoint->hash, VARINT(obj.outpoint->n)); }\n@@ -143,7 +143,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n \n size_t CCoinsViewDB::EstimateSize() const\n {\n-    return m_db->EstimateSize(DB_COIN, (char)(DB_COIN+1));\n+    return m_db->EstimateSize(DB_COIN, uint8_t(DB_COIN + 1));\n }\n \n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n@@ -155,7 +155,7 @@ bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n     if (fReindexing)\n-        return Write(DB_REINDEX_FLAG, '1');\n+        return Write(DB_REINDEX_FLAG, uint8_t{'1'});\n     else\n         return Erase(DB_REINDEX_FLAG);\n }\n@@ -235,14 +235,14 @@ bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockF\n }\n \n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n-    return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+    return Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n }\n \n bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n-    char ch;\n+    uint8_t ch;\n     if (!Read(std::make_pair(DB_FLAG, name), ch))\n         return false;\n-    fValue = ch == '1';\n+    fValue = ch == uint8_t{'1'};\n     return true;\n }\n \n@@ -255,7 +255,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams,\n     // Load m_block_index\n     while (pcursor->Valid()) {\n         if (ShutdownRequested()) return false;\n-        std::pair<char, uint256> key;\n+        std::pair<uint8_t, uint256> key;\n         if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n             CDiskBlockIndex diskindex;\n             if (pcursor->GetValue(diskindex)) {"
      },
      {
        "sha": "131faefe0b2a54dffe869d7fe32eeef8bebdfe34",
        "filename": "src/wallet/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/wallet/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/wallet/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/transaction.h?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -204,8 +204,8 @@ class CWalletTx\n             mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        std::vector<char> dummy_vector1; //!< Used to be vMerkleBranch\n-        std::vector<char> dummy_vector2; //!< Used to be vtxPrev\n+        std::vector<uint8_t> dummy_vector1; //!< Used to be vMerkleBranch\n+        std::vector<uint8_t> dummy_vector2; //!< Used to be vtxPrev\n         bool dummy_bool = false; //!< Used to be fSpent\n         uint256 serializedHash = isAbandoned() ? ABANDON_HASH : m_confirm.hashBlock;\n         int serializedIndex = isAbandoned() || isConflicted() ? -1 : m_confirm.nIndex;"
      },
      {
        "sha": "c06b319b0b71ba1ffb6d3e563377cd06b7b7f1d5",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffff0d04425a616c14fc4a562e8ef93d286705f8/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=ffff0d04425a616c14fc4a562e8ef93d286705f8",
        "patch": "@@ -155,7 +155,7 @@ bool WalletBatch::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMet\n     if (!WriteIC(std::make_pair(DBKeys::WATCHMETA, dest), keyMeta)) {\n         return false;\n     }\n-    return WriteIC(std::make_pair(DBKeys::WATCHS, dest), '1');\n+    return WriteIC(std::make_pair(DBKeys::WATCHS, dest), uint8_t{'1'});\n }\n \n bool WalletBatch::EraseWatchOnly(const CScript &dest)\n@@ -308,8 +308,8 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 {\n                     if (!ssValue.empty())\n                     {\n-                        char fTmp;\n-                        char fUnused;\n+                        uint8_t fTmp;\n+                        uint8_t fUnused;\n                         std::string unused_string;\n                         ssValue >> fTmp >> fUnused >> unused_string;\n                         strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n@@ -336,7 +336,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             wss.nWatchKeys++;\n             CScript script;\n             ssKey >> script;\n-            char fYes;\n+            uint8_t fYes;\n             ssValue >> fYes;\n             if (fYes == '1') {\n                 pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);"
      }
    ]
  }
]