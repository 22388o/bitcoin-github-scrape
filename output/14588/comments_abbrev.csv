gwillen,2018-10-27T02:11:36Z,"@achow101: As original author of most of this code, you should look at this and make sure I have not done anything crazy (and that you agree that by and large my changes are improvements.)",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-433582913,433582913,
gwillen,2018-10-27T02:13:44Z,"Arguably, we may want to call PartiallySignedTransaction::IsSane as the first step in every PSBT RPC, so we can give a thoughtful error message if it fails (or at least _an_ error message.)",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-433583038,433583038,
DrahtBot,2018-10-27T05:47:58Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14380](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14380.html) (fix assert crash when specified change outp",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-433593505,433593505,
gwillen,2018-10-29T18:40:14Z,"@achow101 I think this probably supersedes #14197? It has 14197's effect as a side-effect, but having done so, that also allows removing all the code to handle having both types of utxos at the same time (since the non_witness_utxo is now sufficient.)\n\nIf you agree, I would like to steal your test from 14197 though. :-)",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-434031065,434031065,
achow101,2018-10-30T04:21:35Z,@gwillen Go ahead.,https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-434167157,434167157,
gwillen,2018-10-30T08:17:51Z,"Ok: Fixed @sipa's issues, stole @achow101's test, also added a regression test for #14473, verified that it fails on master and passes here.\n\nPlease take another look! :-)",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-434209977,434209977,
gwillen,2018-11-01T19:16:37Z,"It looks like #14197 got merged -- I just rebased over it, which effectively erases it on this branch since it does the same thing as this PR. (It does have an assert that I didn't include in mine -- I could if desired.)",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-435154245,435154245,
achow101,2018-11-02T18:17:52Z,utACK e13fea975d5e4ae961faba36379a1cdaf9e50c1c,https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-435465909,435465909,
meshcollider,2018-11-09T08:05:26Z,utACK https://github.com/bitcoin/bitcoin/pull/14588/commits/e13fea975d5e4ae961faba36379a1cdaf9e50c1c,https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-437281285,437281285,
gmaxwell,2018-11-20T03:33:41Z,Backport me?,https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-440125732,440125732,
sipa,2018-11-22T01:08:46Z,"I've marked it for backport, but this may not be trivial as some of the code it builds upon has changed since 0.17?",https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-440875840,440875840,
fanquake,2018-11-30T14:29:11Z,This will be backported in #14780.,https://github.com/bitcoin/bitcoin/pull/14588#issuecomment-443219832,443219832,
sipa,2018-10-27T02:18:12Z,"I think the `SignPSBTInput` call here was necessary to perform finalization (constructing the actual scriptSig/witness; there is no guarantee that the previous step actually did this, for example if it was a combiner that didn't understand the script).",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r228698340,228698340,src/rpc/rawtransaction.cpp
sipa,2018-10-27T02:21:09Z,"Will this sighash_type value get serialized into the PSBT? If so, I believe that's incorrect; if no sighash type is specified in the PSBT file, signers can choose their own, but the choice of one signer shouldn't affect the type used by future/other signers.",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r228698392,228698392,src/wallet/rpcwallet.cpp
achow101,2018-10-27T03:50:12Z,Agree with @sipa. `SignPSBTInput` is what does the finalization.,https://github.com/bitcoin/bitcoin/pull/14588#discussion_r228700264,228700264,src/rpc/rawtransaction.cpp
gwillen,2018-10-29T18:38:43Z,"Ahh, I see. Ok, will fix, thanks.",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r229050787,229050787,src/wallet/rpcwallet.cpp
gwillen,2018-10-29T18:39:45Z,"Aha, thanks, not sure how I misunderstood that so badly, it makes much more sense to me now. I will change it back and add a comment.",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r229051127,229051127,src/rpc/rawtransaction.cpp
sipa,2018-11-02T19:36:38Z,Why not `int sighash_type = SIGHASH_ALL` directly?,https://github.com/bitcoin/bitcoin/pull/14588#discussion_r230485800,230485800,src/wallet/rpcwallet.h
gwillen,2018-11-10T03:24:09Z,"Well, I wouldn't want to do that without #including script/interpreter.h for the definition of SIGHASH_ALL. (As it turns out, it works without doing that, but that means it's counting on other files to #include specific things in a specific order, which is gross and wrong.) And I didn't want to add a dependency to a header file just for a constant.\n\nBut it seems like everything in the universe",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r232439744,232439744,src/wallet/rpcwallet.h
sipa,2018-11-10T03:25:57Z,"Oh, I see. I was just wondering if there was a reason - seems there is. No need to hold this PR up for.",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r232439787,232439787,src/wallet/rpcwallet.h
Sjors,2018-12-05T08:31:53Z,"For posterity, can you explain what the ""rehashing"" problem was and why it's not actually a problem / why this didn't solve it?",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r238969376,238969376,src/wallet/test/psbt_wallet_tests.cpp
Sjors,2018-12-05T08:37:34Z,This is the kind of thing that makes me want to shill for linters (or better use of the type system) :-) cc @practicalswift ,https://github.com/bitcoin/bitcoin/pull/14588#discussion_r238970947,238970947,src/rpc/rawtransaction.cpp
gwillen,2018-12-05T10:05:02Z,"The explanation I received was that the comment was a cut-and-paste from elsewhere and didn't ever actually apply here.\n\nThe underlying issue is that calling GetHash on a CMutableTransaction repeatedly is a waste of effort, since it will not cache the transaction hash but recompute it every time. So one is well-advised to copy a CMutableTransaction to a CTransaction if one is done modifying it",https://github.com/bitcoin/bitcoin/pull/14588#discussion_r239000160,239000160,src/wallet/test/psbt_wallet_tests.cpp
