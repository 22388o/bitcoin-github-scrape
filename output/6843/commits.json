[
  {
    "sha": "99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk2M2I5MzhmZmI0YWQzN2Y0YTlkMjc1OTk4YmYxYTlkYzExZTY0",
    "commit": {
      "author": {
        "name": "Mitchell Cash",
        "email": "mitchell.cash@gmail.com",
        "date": "2015-10-17T10:10:45Z"
      },
      "committer": {
        "name": "Mitchell Cash",
        "email": "mitchell.cash@gmail.com",
        "date": "2015-10-17T20:25:43Z"
      },
      "message": "Correct spelling mistakes in doc folder\n\n- OSX \u2014> OS X\n- XCode \u2014> Xcode\n- github \u2014> GitHub\n- homebrew \u2014> Homebrew\n- gitian \u2014> Gitian\n- Other miscellaneous obvious spelling fixes and whitespace removal",
      "tree": {
        "sha": "8d14d5301951a96d682b404e0ea0b247fd0eded1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d14d5301951a96d682b404e0ea0b247fd0eded1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/comments",
    "author": {
      "login": "MitchellCash",
      "id": 8009243,
      "node_id": "MDQ6VXNlcjgwMDkyNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8009243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MitchellCash",
      "html_url": "https://github.com/MitchellCash",
      "followers_url": "https://api.github.com/users/MitchellCash/followers",
      "following_url": "https://api.github.com/users/MitchellCash/following{/other_user}",
      "gists_url": "https://api.github.com/users/MitchellCash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MitchellCash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MitchellCash/subscriptions",
      "organizations_url": "https://api.github.com/users/MitchellCash/orgs",
      "repos_url": "https://api.github.com/users/MitchellCash/repos",
      "events_url": "https://api.github.com/users/MitchellCash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MitchellCash/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MitchellCash",
      "id": 8009243,
      "node_id": "MDQ6VXNlcjgwMDkyNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8009243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MitchellCash",
      "html_url": "https://github.com/MitchellCash",
      "followers_url": "https://api.github.com/users/MitchellCash/followers",
      "following_url": "https://api.github.com/users/MitchellCash/following{/other_user}",
      "gists_url": "https://api.github.com/users/MitchellCash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MitchellCash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MitchellCash/subscriptions",
      "organizations_url": "https://api.github.com/users/MitchellCash/orgs",
      "repos_url": "https://api.github.com/users/MitchellCash/repos",
      "events_url": "https://api.github.com/users/MitchellCash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MitchellCash/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 99,
      "deletions": 103
    },
    "files": [
      {
        "sha": "08fd724355b6099dd7747b33beadd26ea0ddf667",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -7,7 +7,7 @@ Setup\n \n Running\n ---------------------\n-The following are some helpful notes on how to run Bitcoin on your native platform. \n+The following are some helpful notes on how to run Bitcoin on your native platform.\n \n ### Unix\n \n@@ -26,7 +26,7 @@ Unpack the files into a directory and run:\n \n Unpack the files into a directory, and then run bitcoin-qt.exe.\n \n-### OSX\n+### OS X\n \n Drag Bitcoin-Qt to your applications folder, and then run Bitcoin-Qt.\n \n@@ -41,7 +41,7 @@ Building\n ---------------------\n The following are developer notes on how to build Bitcoin on your native platform. They are not complete guides, but include notes on the necessary libraries, compile flags, etc.\n \n-- [OSX Build Notes](build-osx.md)\n+- [OS X Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n - [Gitian Building Guide](gitian-building.md)\n "
      },
      {
        "sha": "f589bfc676f5c313e68403cd1948915fd852f23b",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,12 +1,12 @@\n-Deterministic OSX Dmg Notes.\n+Deterministic OS X Dmg Notes.\n \n-Working OSX DMGs are created in Linux by combining a recent clang,\n+Working OS X DMGs are created in Linux by combining a recent clang,\n the Apple's binutils (ld, ar, etc), and DMG authoring tools.\n \n Apple uses clang extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use\n of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for OSX. A pre-compiled version of 3.2 is used because it was not\n+when building for OS X. A pre-compiled version of 3.2 is used because it was not\n available in the Precise repositories at the time this work was started. In the\n future, it can be switched to use system packages instead.\n \n@@ -29,18 +29,18 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+To obtain it, register for a developer account, then download the Xcode 6.1.1 dmg:\n https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n \n This file is several gigabytes in size, but only a single directory inside is\n needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n+To create a tarball suitable for Gitian input, mount the dmg in OS X, then create it with:\n   $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n-The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n which are created using these tools. The build process has been designed to\n avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n fully deterministic and may be freely redistributed.\n@@ -64,20 +64,20 @@ Ideally, the creation could be fixed and genisoimage would no longer be necessar\n \n Background images and other features can be added to DMG files by inserting a\n .DS_Store before creation. The easiest way to create this file is to build a\n-DMG without one, move it to a device running OSX, customize the layout, then\n+DMG without one, move it to a device running OS X, customize the layout, then\n grab the .DS_Store file for later use. That is the approach taken here.\n \n-As of OSX Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n+As of OS X Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n requirement in order to satisfy the new Gatekeeper requirements. Because this\n private key cannot be shared, we'll have to be a bit creative in order for the\n build process to remain somewhat deterministic. Here's how it works:\n \n-- Builders use gitian to create an unsigned release. This outputs an unsigned\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned\n   dmg which users may choose to bless and run. It also outputs an unsigned app\n   structure in the form of a tarball, which also contains all of the tools\n   that have been previously (deterministically) built in order to create a\n   final dmg.\n - The Apple keyholder uses this unsigned app to create a detached signature,\n   using the script that is also included there.\n-- Builders feed the unsigned app + detached signature back into gitian. It\n+- Builders feed the unsigned app + detached signature back into Gitian. It\n   uses the pre-built tools to recombine the pieces into a deterministic dmg."
      },
      {
        "sha": "d923301467a7f0ae394accd19cd7362feff3120a",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -38,7 +38,7 @@ Do not use `pkg_add boost`! The boost version installed thus is compiled using t\n \n     test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n     ...\n-    Segmentation fault (core dumped) \n+    Segmentation fault (core dumped)\n \n This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n \n@@ -57,7 +57,7 @@ tar -xjf boost_1_59_0.tar.bz2\n # Boost 1.59 needs two small patches for OpenBSD\n cd boost_1_59_0\n # Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp \n+patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n # https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n@@ -92,7 +92,7 @@ tar -xzf db-4.8.30.NC.tar.gz\n # Build the library and install to specified prefix\n cd db-4.8.30.NC/build_unix/\n #  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp \n+../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n make install\n ```\n \n@@ -160,4 +160,3 @@ version installed by OpenBSD 5.7:\n - https://llvm.org/bugs/show_bug.cgi?id=9758\n \n There is no known workaround for this.\n-"
      },
      {
        "sha": "69c401b751ee9ef8538c9191993b8a9a3ea7e35d",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,6 +1,6 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build bitcoind (headless client) for OSX.\n+This guide will show you how to build bitcoind (headless client) for OS X.\n \n Notes\n -----\n@@ -13,8 +13,8 @@ built-in one is located in `/Applications/Utilities`.\n Preparation\n -----------\n \n-You need to install XCode with all the options checked so that the compiler\n-and everything is available in /usr not just /Developer. XCode should be\n+You need to install Xcode with all the options checked so that the compiler\n+and everything is available in /usr not just /Developer. Xcode should be\n available on your OS X installation media, but if not, you can get the\n current version from https://developer.apple.com/xcode/. If you install\n Xcode 4.3 or later, you'll need to install its command line tools. This can\n@@ -38,7 +38,7 @@ NOTE: Building with Qt4 is still supported, however, could result in a broken UI\n \n ### Building `bitcoind`\n \n-1. Clone the github tree to get the source code and go into the directory.\n+1. Clone the GitHub tree to get the source code and go into the directory.\n \n         git clone https://github.com/bitcoin/bitcoin.git\n         cd bitcoin\n@@ -62,7 +62,7 @@ Use Qt Creator as IDE\n You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n \n-1. Make sure you installed everything through homebrew mentioned above \n+1. Make sure you installed everything through Homebrew mentioned above\n 2. Do a proper ./configure --with-gui=qt5 --enable-debug\n 3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n 4. Enter \"bitcoin-qt\" as project name, enter src/qt as location"
      },
      {
        "sha": "4189d221878bee2d58ff9c6cf2327d31a0d53dff",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -57,7 +57,7 @@ As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this cas\n \n To describe a class use the same construct above the class definition:\n ```c++\n-/** \n+/**\n  * Alerts are for notifying old versions if they become too obsolete and\n  * need to upgrade. The message is displayed in the status bar.\n  * @see GetWarnings()"
      },
      {
        "sha": "55a5c28258c67704fb926e0ad71d448440babdaa",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -7,7 +7,7 @@ As such, DNS seeds must be run by entities which have some minimum\n level of trust within the Bitcoin community.\n \n Other implementations of Bitcoin software may also use the same\n-seeds and may be more exposed. In light of this exposure, this \n+seeds and may be more exposed. In light of this exposure, this\n document establishes some basic expectations for operating dnsseeds.\n \n 0. A DNS seed operating organization or person is expected to follow good"
      },
      {
        "sha": "00fdce82e81a1886f2ac3f8846c8e4c2900d0c92",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,7 +1,7 @@\n Gitian building\n ================\n \n-*Setup instructions for a gitian build of Bitcoin using a Debian VM or physical system.*\n+*Setup instructions for a Gitian build of Bitcoin using a Debian VM or physical system.*\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n@@ -13,7 +13,7 @@ Multiple developers build the source code by following a specific descriptor\n These results are compared and only if they match, the build is accepted and uploaded\n to bitcoin.org.\n \n-More independent gitian builders are needed, which is why this guide exists. \n+More independent Gitian builders are needed, which is why this guide exists.\n It is preferred you follow these steps yourself instead of using someone else's\n VM image to avoid 'contaminating' the build.\n \n@@ -22,9 +22,9 @@ Table of Contents\n \n - [Create a new VirtualBox VM](#create-a-new-virtualbox-vm)\n - [Connecting to the VM](#connecting-to-the-vm)\n-- [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n-- [Installing gitian](#installing-gitian)\n-- [Setting up the gitian image](#setting-up-the-gitian-image)\n+- [Setting up Debian for Gitian building](#setting-up-debian-for-gitian-building)\n+- [Installing Gitian](#installing-gitian)\n+- [Setting up the Gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -43,7 +43,7 @@ Any kind of virtualization can be used, for example:\n - [KVM](http://www.linux-kvm.org/page/Main_Page)\n - [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n \n-You can also install gitian on actual hardware instead of using virtualization.\n+You can also install Gitian on actual hardware instead of using virtualization.\n \n Create a new VirtualBox VM\n ---------------------------\n@@ -60,18 +60,18 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n ![](gitian-building/create_vm_hard_disk.png)\n \n - Hard Disk: Create a virtual hard disk now\n-    \n+\n ![](gitian-building/create_vm_hard_disk_file_type.png)\n \n-- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image) \n+- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image)\n \n ![](gitian-building/create_vm_storage_physical_hard_disk.png)\n-    \n-- Storage on physical hard disk: Dynamically Allocated \n-    \n+\n+- Storage on physical hard disk: Dynamically Allocated\n+\n ![](gitian-building/create_vm_file_location_size.png)\n \n-- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n+- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side\n - Click `Create`\n \n Get the [Debian 8.x net installer](http://cdimage.debian.org/debian-cd/8.2.0/amd64/iso-cd/debian-8.2.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n@@ -81,7 +81,7 @@ Unixy OSes by entering the following in a terminal:\n     echo \"d393d17ac6b3113c81186e545c416a00f28ed6e05774284bb5e8f0df39fcbcb9  debian-8.2.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n-After creating the VM, we need to configure it. \n+After creating the VM, we need to configure it.\n \n - Click the `Settings` button, then go to the `Network` tab. Adapter 1 should be attached to `NAT`.\n \n@@ -115,8 +115,8 @@ This section will explain how to install Debian on the newly created VM.\n \n ![](gitian-building/debian_install_1_boot_menu.png)\n \n-**Note**: Navigating in the Debian installer: \n-To keep a setting at the default and proceed, just press `Enter`. \n+**Note**: Navigating in the Debian installer:\n+To keep a setting at the default and proceed, just press `Enter`.\n To select a different button, press `Tab`.\n \n - Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n@@ -126,23 +126,23 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_4_configure_keyboard.png)\n \n - The VM will detect network settings using DHCP, this should all proceed automatically\n-- Configure the network: \n+- Configure the network:\n   - Hostname `debian`.\n   - Leave domain name empty.\n \n ![](gitian-building/debian_install_5_configure_the_network.png)\n \n-- Choose a root password and enter it twice (remember it for later) \n+- Choose a root password and enter it twice (remember it for later)\n \n ![](gitian-building/debian_install_6a_set_up_root_password.png)\n \n-- Name the new user `debian` (the full name doesn't matter, you can leave it empty) \n+- Name the new user `debian` (the full name doesn't matter, you can leave it empty)\n - Set the account username as `debian`\n \n ![](gitian-building/debian_install_7_set_up_user_fullname.png)\n ![](gitian-building/debian_install_8_set_up_username.png)\n \n-- Choose a user password and enter it twice (remember it for later) \n+- Choose a user password and enter it twice (remember it for later)\n \n ![](gitian-building/debian_install_9_user_password.png)\n \n@@ -152,11 +152,11 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_10_configure_clock.png)\n \n - Disk setup\n-  - Partitioning method: Guided - Use the entire disk \n-  \n+  - Partitioning method: Guided - Use the entire disk\n+\n ![](gitian-building/debian_install_11_partition_disks.png)\n \n-  - Select disk to partition: SCSI1 (0,0,0) \n+  - Select disk to partition: SCSI1 (0,0,0)\n \n ![](gitian-building/debian_install_12_choose_disk.png)\n \n@@ -166,7 +166,7 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_15_write_changes.png)\n \n - The base system will be installed, this will take a minute or so\n-- Choose a mirror (any will do) \n+- Choose a mirror (any will do)\n \n ![](gitian-building/debian_install_16_choose_a_mirror.png)\n \n@@ -201,7 +201,7 @@ After Installation\n The next step in the guide involves logging in as root via SSH.\n SSH login for root users is disabled by default, so we'll enable that now.\n \n-Login to the VM using username `root` and the root password you choose earlier.\n+Login to the VM using username `root` and the root password you chose earlier.\n You'll be presented with a screen similar to this.\n \n ![](gitian-building/debian_root_login.png)\n@@ -243,7 +243,7 @@ For example, to connect as `root` from a Linux command prompt use\n \n Replace `root` with `debian` to log in as user.\n \n-Setting up Debian for gitian building\n+Setting up Debian for Gitian building\n --------------------------------------\n \n In this section we will be setting up the Debian installation for Gitian building.\n@@ -260,7 +260,7 @@ Then set up LXC and the rest with the following, which is a complex jumble of se\n \n ```bash\n # the version of lxc-start in Debian 7.4 needs to run as root, so make sure\n-# that the build script can exectute it without providing a password\n+# that the build script can execute it without providing a password\n echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-start\" > /etc/sudoers.d/gitian-lxc\n # add cgroup for LXC\n echo \"cgroup  /sys/fs/cgroup  cgroup  defaults  0   0\" >> /etc/fstab\n@@ -280,7 +280,7 @@ reboot\n At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n section only need to be performed once.\n \n-Installing gitian\n+Installing Gitian\n ------------------\n \n Re-login as the user `debian` that was created during installation.\n@@ -300,14 +300,14 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian.\n+Clone the git repositories for bitcoin and Gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n ```\n \n-Setting up the gitian image\n+Setting up the Gitian image\n -------------------------\n \n Gitian needs a virtual image of the operating system to build in.\n@@ -333,14 +333,14 @@ Getting and building the inputs\n Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change)\n in the bitcoin repository under 'Fetch and build inputs' to install sources which require\n manual intervention. Also optionally follow the next step: 'Seed the Gitian sources cache\n-and offline git repositories' which will fetch the remaining files required for building \n+and offline git repositories' which will fetch the remaining files required for building\n offline.\n \n Building Bitcoin\n ----------------\n \n-To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perform\n-gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n+To build Bitcoin (for Linux, OS X and Windows) just follow the steps under 'perform\n+Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n@@ -380,7 +380,7 @@ Building an alternative repository\n -----------------------------------\n \n If you want to do a test build of a pull on GitHub it can be useful to point\n-the gitian builder at an alternative repository, using the same descriptors\n+the Gitian builder at an alternative repository, using the same descriptors\n and inputs.\n \n For example:\n@@ -395,9 +395,9 @@ COMMIT=2014_03_windows_unicode_path\n Building fully offline\n -----------------------\n \n-For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository \n+For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository\n and the bitcoin git repository with the desired tag must both be available locally, and then gbuild must be\n-told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or \n+told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or\n manually disabling gitian-builder's use of apt-get to update the VM build environment.\n \n To configure apt-cacher-ng as an offline cacher, you will need to first populate its cache with the relevant\n@@ -417,7 +417,7 @@ LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root \\\n   -e DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n   $( sed -ne '/^packages:/,/[^-] .*/ {/^- .*/{s/\"//g;s/- //;p}}' ../bitcoin/contrib/gitian-descriptors/*|sort|uniq )\n LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root apt-get -q -y purge grub\n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade \n+LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n ```\n \n And then set offline mode for apt-cacher-ng:\n@@ -431,7 +431,7 @@ Offlinemode: 1\n service apt-cacher-ng restart\n ```\n \n-Then when building, override the remote URLs that gbuild would otherwise pull from the gitian descriptors::\n+Then when building, override the remote URLs that gbuild would otherwise pull from the Gitian descriptors::\n ```bash\n \n cd /some/root/path/\n@@ -461,7 +461,7 @@ in `gitian.sigs` to your signing machine and do\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your\n-gitian build.\n+Gitian build.\n \n Uploading signatures\n ---------------------"
      },
      {
        "sha": "d24c2d1dbf49cbf7108df1e99d3261215ae253be",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -29,20 +29,20 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set, \n-it will use a special cookie file for authentication. The cookie is generated with random \n+If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set,\n+it will use a special cookie file for authentication. The cookie is generated with random\n content when the daemon starts, and deleted when it exits. Read access to this file\n-controls who can access it through RPC. \n+controls who can access it through RPC.\n \n-By default the cookie is stored in the data directory, but it's location can be overridden \n+By default the cookie is stored in the data directory, but it's location can be overridden\n with the option '-rpccookiefile'.\n \n This allows for running bitcoind without having to do any manual configuration.\n \n-`conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as\n relative to the data directory. `wallet` *only* supports relative paths.\n \n-For an example configuration file that describes the configuration settings, \n+For an example configuration file that describes the configuration settings,\n see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n@@ -93,13 +93,12 @@ use old versions of Upstart and do not supply the start-stop-daemon utility.\n \n Copy bitcoind.init to /etc/init.d/bitcoind. Test by running `service bitcoind start`.\n \n-Using this script, you can adjust the path and flags to the bitcoind program by \n-setting the BITCOIND and FLAGS environment variables in the file \n+Using this script, you can adjust the path and flags to the bitcoind program by\n+setting the BITCOIND and FLAGS environment variables in the file\n /etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n 5. Auto-respawn\n -----------------------------------\n \n Auto respawning is currently only configured for Upstart and systemd.\n Reasonable defaults have been chosen but YMMV.\n-"
      },
      {
        "sha": "e9b2d75a760ce734d789dd7d3452310dabeca2cb",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -181,7 +181,7 @@ configured specifically to process scriptPubKey and not scriptSig scripts.\n \n - Removed bitrpc.py from contrib\n \n-Addition of ZMQ-based Notifcations\n+Addition of ZMQ-based Notifications\n ==================================\n \n Bitcoind can now (optionally) asynchronously notify clients through a"
      },
      {
        "sha": "9a2362cb8506884c43a3791c92fe94e8bd2d4f01",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -6,7 +6,7 @@ Release Process\n \n * * *\n \n-###First time / New builders \n+###First time / New builders\n Check out the source code in the following directory hierarchy.\n \n \tcd /path/to/your/toplevel/build\n@@ -34,17 +34,17 @@ Check out the source code in the following directory hierarchy.\n \n * * *\n \n-###Setup and perform gitian builds\n+###Setup and perform Gitian builds\n+\n+ Setup Gitian descriptors:\n \n- Setup gitian descriptors:\n-  \n \tpushd ./bitcoin\n-\texport SIGNER=(your gitian key, ie bluematt, sipa, etc)\n+\texport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n \texport VERSION=(new version, e.g. 0.8.0)\n \tgit checkout v${VERSION}\n \tpopd\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures.\n+  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n \n \tpushd ./gitian.sigs\n \tgit pull\n@@ -56,35 +56,35 @@ Check out the source code in the following directory hierarchy.\n \tgit pull\n \n ###Fetch and create inputs: (first time, or when dependency versions change)\n- \n+\n \tmkdir -p inputs\n \twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n \twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n- Register and download the Apple SDK: see [OSX readme](README_osx.txt) for details.\n- \n+ Register and download the Apple SDK: see [OS X readme](README_osx.txt) for details.\n+\n  https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n- \n+\n  Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n- \n+\n \ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache and offline git repositories\n \n-By default, gitian will fetch source files as needed. To cache them ahead of time:\n+By default, Gitian will fetch source files as needed. To cache them ahead of time:\n \n \tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n-NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs. For example: \n+NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n ```\n-./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n ```\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n ###Build (and optionally verify) Bitcoin Core for Linux, Windows, and OS X:\n-  \n+\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n@@ -108,8 +108,8 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n   1. source tarball (bitcoin-${VERSION}.tar.gz)\n   2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n   3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OSX unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your gitian key)/\n+  4. OS X unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n+  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/\n \n ###Next steps:\n \n@@ -123,12 +123,12 @@ Commit your signature to gitian.sigs:\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n \n-  Wait for Windows/OSX detached signatures:\n+  Wait for Windows/OS X detached signatures:\n \n-\tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n+\tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n \tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-  Create (and optionally verify) the signed OSX binary:\n+  Create (and optionally verify) the signed OS X binary:\n \n \tpushd ./gitian-builder\n \t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n@@ -147,7 +147,7 @@ Commit your signature to gitian.sigs:\n \tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n \tpopd\n \n-Commit your signature for the signed OSX/Windows binaries:\n+Commit your signature for the signed OS X/Windows binaries:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-osx-signed/${SIGNER}"
      },
      {
        "sha": "594897f89670716ad845596dccd5cc7ff6253586",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -15,15 +15,15 @@ outgoing connections be anonymized, but more is possible.\n \n \t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n \t                server will be used to try to reach .onion addresses as well.\n-\t\n+\n \t-onion=ip:port  Set the proxy server to use for tor hidden services. You do not\n \t                need to set this if it's the same as -proxy. You can use -noonion\n \t                to explicitly disable access to hidden service.\n-\t\n+\n \t-listen         When using -proxy, listening is disabled by default. If you want\n \t                to run a hidden service (see next section), you'll need to enable\n \t                it explicitly.\n-\t\n+\n \t-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n \t-addnode=X      of IP addresses or hostnames in these parameters. It requires\n \t-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n@@ -55,10 +55,10 @@ your bitcoind's P2P listen port (8333 by default).\n \t                preference for your node to advertize itself with, for connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n \t                Tor proxy typically runs).\n-\t\n+\n \t-listen         You'll need to enable listening for incoming connections, as this\n \t                is off by default behind a proxy.\n-\t\n+\n \t-discover       When -externalip is specified, no attempt is made to discover local\n \t                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n \t                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n@@ -87,4 +87,3 @@ If you only want to use Tor to reach onion addresses, but not use it as a proxy\n for normal IPv4/IPv6 communication, use:\n \n \t./bitcoin -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n-"
      },
      {
        "sha": "6389c5acedf7929598892c879efc1855e8ae096e",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,7 +1,7 @@\n Translations\n ============\n \n-The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool. \n+The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface."
      },
      {
        "sha": "936a6112c65f83956a0dc8260d96f65b56b847ec",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,7 +1,7 @@\n Translation Strings Policy\n ===========================\n \n-This document provides guidelines for internationalization of the Bitcoin Core software. \n+This document provides guidelines for internationalization of the Bitcoin Core software.\n \n How to translate?\n ------------------\n@@ -107,4 +107,3 @@ The second example reduces the number of pluralized words that translators have\n During a string freeze (often before a major release), no translation strings are to be added, modified or removed.\n \n This can be checked by executing `make translate` in the `src` directory, then verifying that `bitcoin_en.ts` remains unchanged.\n-"
      },
      {
        "sha": "902d1124c766de4e51ffc14f37a84e88f0624b1c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -2,7 +2,7 @@\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n-providing various message-oriented semantics such as publish/subcribe,\n+providing various message-oriented semantics such as publish/subscribe,\n request/reply, and push/pull.\n \n The Bitcoin Core daemon can be configured to act as a trusted \"border"
      }
    ]
  }
]