[
  {
    "sha": "d8761995dabcd1e13861d1487712b32a57313fda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODc2MTk5NWRhYmNkMWUxMzg2MWQxNDg3NzEyYjMyYTU3MzEzZmRh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T16:55:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T23:25:25Z"
      },
      "message": "GetMinFee takes a mode parameter (GMF_{BLOCK,RELAY,SEND}) instead of fForRelay",
      "tree": {
        "sha": "86c34a2d373dd816cd13d48d21a1505d5c227737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86c34a2d373dd816cd13d48d21a1505d5c227737"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8761995dabcd1e13861d1487712b32a57313fda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8761995dabcd1e13861d1487712b32a57313fda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8761995dabcd1e13861d1487712b32a57313fda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8761995dabcd1e13861d1487712b32a57313fda/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7eb151ad0ed441d6fd598551059a9bbfb09e99e"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "807279a55366f78dd03dcbeaa45369778d7e6309",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8761995dabcd1e13861d1487712b32a57313fda/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8761995dabcd1e13861d1487712b32a57313fda/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d8761995dabcd1e13861d1487712b32a57313fda",
        "patch": "@@ -419,7 +419,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         }\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < GetMinFee(1000, true, true))\n+        if (nFees < GetMinFee(1000, true, GMF_RELAY))\n             return error(\"AcceptToMemoryPool() : not enough fees\");\n \n         // Continuously rate-limit free transactions\n@@ -2757,7 +2757,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, true);\n+            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n \n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency"
      },
      {
        "sha": "a699331884daf33563f44a826673364b5610b889",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8761995dabcd1e13861d1487712b32a57313fda/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8761995dabcd1e13861d1487712b32a57313fda/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d8761995dabcd1e13861d1487712b32a57313fda",
        "patch": "@@ -387,6 +387,13 @@ class CTxOut\n \n \n \n+enum GetMinFee_mode\n+{\n+    GMF_BLOCK,\n+    GMF_RELAY,\n+    GMF_SEND,\n+};\n+\n //\n // The basic transaction that is broadcasted on the network and contained in\n // blocks.  A transaction can contain multiple inputs and outputs.\n@@ -523,10 +530,10 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, bool fForRelay=false) const\n+    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n     {\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n-        int64 nBaseFee = fForRelay ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n+        int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n         unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;"
      },
      {
        "sha": "2c5aa03aad0a223824d8a44a8008ef09dd37c640",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8761995dabcd1e13861d1487712b32a57313fda/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8761995dabcd1e13861d1487712b32a57313fda/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d8761995dabcd1e13861d1487712b32a57313fda",
        "patch": "@@ -931,6 +931,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 int64 nChange = nValueIn - nValue - nFeeRet;\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n+                // NOTE: this depends on the exact behaviour of GetMinFee\n                 if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n                 {\n                     int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n@@ -984,7 +985,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                 bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);"
      }
    ]
  }
]