jtimon,2015-08-19T22:56:58Z,"Apart from the nits, I think always using nHeight is more general as discussed in http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html (there are other advantages described there [for example, it will be simpler to do the equivalent of #5966 in the future if we use nHeight from the start]).\n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-132817410,132817410,
theuni,2015-08-19T23:36:10Z,"@jtimon I'd rather not get into that here. I added the commits such that we could drop 3872ccf..end, then debate the function part later. Looks like I should've started with that.\n\nI'll drop those, so this becomes a relatively simple move into chainparams.\n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-132826086,132826086,
jtimon,2015-08-20T01:26:51Z,"Yes, I don't want to debate the concrete activation mechanism here either. It's better to that that in the ml thread.\n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-132844595,132844595,
theuni,2015-08-20T21:30:51Z,"I've trimmed this down to remove the controversial parts, basically only code movement remains. \n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-133184754,133184754,
dcousens,2015-08-20T22:10:25Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-133193743,133193743,
sipa,2015-08-25T23:44:42Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-134771871,134771871,
jtimon,2015-08-26T23:30:12Z,"Untested ACK, but I would be really happy if #6591 could be merged before this is.\n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-135204900,135204900,
jtimon,2015-09-03T00:15:57Z,"Please, reviewers, consider the alternative in #6625, I promise it won't take much longer if you have already reviewed this.\n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-137278709,137278709,
jtimon,2015-09-14T20:11:46Z,Close in favor of #6672 ?\n,https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-140192646,140192646,
jtimon,2015-10-20T16:11:17Z,"This needs rebase, but the almost-equivalent #6625 is rebased on top of master and reopened.\n",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-149618748,149618748,
jtimon,2016-03-16T18:51:37Z,"I'm still generally in favor of this. I think the sooner these preparations are done, the sooner it we can stop worrying about them interfering with other changes, or the necessary preparations becoming bigger because new changes are using these constants somewhere else (something that has happened several times after the last rebase of this PR as documented with the required rebases in #6625 and ",https://github.com/bitcoin/bitcoin/pull/6526#issuecomment-197485176,197485176,
jonasschnelli,2015-08-06T06:59:02Z,Not sure about that.\nThe `wtx.GetTxTime()` can response with the stored smartTime and maybe there are cases where not-yet-broadcasted transactions might end up in a `return false;` and therefore are not added tho the in-memory wtx map.\n\nI'm also not so sure if the `CheckTransaction()` call makes sense when reading already stored wtx from the disk. A simple check could help to make sure we don't,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r36385958,36385958,src/wallet/walletdb.cpp
jtimon,2015-08-19T22:32:54Z,Please don't add yet another non-generic option. See https://github.com/jtimon/bitcoin/commit/acc108a61edcccc6832fd6c1b932b762052f1b0d\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37476946,37476946,src/chainparamsbase.cpp
jtimon,2015-08-19T22:34:51Z,We may need to expose Consensus::Params in libconsensus' C API and thus it cannot have methods.\nSee https://github.com/jtimon/bitcoin/commit/c4cfb5e098d23e017f98aad93698350bb91960b4 \n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37477136,37477136,src/consensus/params.h
jtimon,2015-08-19T22:36:35Z,This class should't be needed: CChainParams::consensus is not const (even though CChainParams::GetConsensus() returns a const reference). See #6382.\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37477267,37477267,src/consensus/params.h
jtimon,2015-08-19T22:39:18Z,Another option is to just pass Consensus::Params. It seems more future-proof to me. \n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37477531,37477531,src/main.cpp
jtimon,2015-08-19T22:41:28Z,"Having the chainparams variable already (which should eventually beome a parameter of the function), I would just directly use chainparams.GetConsensus() instead of defining a new variable.\n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37477711,37477711,src/main.cpp
jtimon,2015-08-19T22:44:23Z,Good one.\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37477981,37477981,src/merkleblock.cpp
jtimon,2015-08-19T22:45:52Z,We can also just turn this into a number instead.\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37478075,37478075,src/policy/policy.h
jtimon,2015-08-19T22:53:59Z,consensus/consensus.h is going to be destroyed before I was able to move a single function declaration into it...Sniff sniff\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37478681,37478681,src/consensus/consensus.h
theuni,2015-08-19T23:24:04Z,"Ok. There's no use for this, I only added it because the others are there. I'll kill it.\n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37480916,37480916,src/chainparamsbase.cpp
theuni,2015-08-19T23:27:54Z,"Point taken. That's a bit too simplistic though, since we're going to have to provide parameters. I'll play around with it.\n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37481173,37481173,src/consensus/params.h
theuni,2015-08-19T23:29:18Z,sounds good.\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37481263,37481263,src/main.cpp
theuni,2015-08-19T23:29:46Z,ok\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37481289,37481289,src/main.cpp
jtimon,2015-08-20T01:22:19Z,"Well, in https://github.com/jtimon/bitcoin/commit/c4cfb5e098d23e017f98aad93698350bb91960b4 the methods are just functions in consensus/consensus.h that take Consensus::Params as one of their parameters (similar to the libconsensus-ready GetBlockSubsidy()).\n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37487612,37487612,src/consensus/params.h
theuni,2015-08-20T01:55:27Z,"But that means that either:\n- The function will be the same for all chains\n- MaxBlockSize will have to do a switch/case on the params and behave appropriately\n\nThe first way is out, since it means that (for ex) testnet and mainnet must share behavior for parameters\nThe second way gets ugly as additional chains are added.\n\nI added them as virtuals so that each chain can specify its own behav",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37488948,37488948,src/consensus/params.h
jtimon,2015-08-20T02:16:26Z,"In https://github.com/jtimon/bitcoin/commit/c4cfb5e098d23e017f98aad93698350bb91960b4 the functions are equal for all chains (just like any other consensus function), but the values they take in Consensus::Params are different. You don't need polymorphism for this: you can add as many attributes as you need in Consensus::Params (even bool ones) and sets their values appropriately.\nFor example, \n\",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37489729,37489729,src/consensus/params.h
dcousens,2015-08-20T22:06:44Z,Is it though?  Introducing complex parameters like that make this function harder to test in isolation.\n,https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37586820,37586820,src/main.cpp
jtimon,2015-08-20T23:24:49Z,"Many other libconsensus-required functions will take Consensus::Params as a parameter anyway, see #6024 for example. \n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37592558,37592558,src/main.cpp
theuni,2015-08-20T23:54:08Z,"I left this as nMaxTxSize for now because it helps with testing (sometimes you want to test a transaction and ignore the size constraint, so you set it to -1). We could always change this to params later if needed.\n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37594280,37594280,src/main.cpp
jtimon,2015-08-21T00:13:53Z,"Ok, it's fine with me. Was just a suggestion but I didn't really had a strong opinion here.\n",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r37595441,37595441,src/main.cpp
jtimon,2015-08-26T21:06:04Z,"...unless we merge something like #6009 first or we keep the new functions (something like https://github.com/jtimon/bitcoin/commit/c59f170fd15688499f7f6291e2ef0cf18a43fcc0#diff-cbe22f30d7e480617350ef6ceca97d0cR12 ) here.\nIt took very long to create this consensus/consensus.h little step forward, it seems wasteful to remove all those includes (when most of them will have to be reintroduced later)",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r38034853,38034853,src/consensus/consensus.h
jtimon,2015-09-05T14:40:52Z,"@dcousens \n\n> Why not just pass consensusParams as you have done for the other two functions?\n> Might as well be consistent.\n\nThis is my preference as well. Specially given that almost the other Consensus functions are going to take Consensus::Params as well, see https://github.com/bitcoin/bitcoin/pull/6591/files#diff-cbe22f30d7e480617350ef6ceca97d0cR25\n\nI would also use `std::numeric_limit",https://github.com/bitcoin/bitcoin/pull/6526#discussion_r38811359,38811359,src/main.cpp
