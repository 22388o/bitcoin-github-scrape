jrick,2015-05-19T16:27:24Z,More details about the bug are posted here: https://bitcointalk.org/index.php?topic=1065504.0\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103579244,103579244,
sdaftuar,2015-05-19T16:42:03Z,"Also reported in #5712.  FYI I don't think this is possible to hit on testnet even if it were to be reset, because the starting difficulty is high enough to prevent overflow.  Would be nice to fix this for regtest though...\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103585201,103585201,
davecgh,2015-05-19T16:44:37Z,Correct.  It can only be hit on regtest.\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103585927,103585927,
jrick,2015-05-19T16:46:08Z,"You're right, testnet3 shares the same pow limit as mainnet.  I'll edit my commit message to match.\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103586683,103586683,
jrick,2015-05-19T17:06:36Z,Fixed the protected members by declaring all other `base_uint` classes to be friends of any `base_uint<BITS>`.\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103594466,103594466,
jonasschnelli,2015-05-20T09:43:09Z,@jrick: wouldn't it make sense to provide a RPC test (maybe `qa/rpc-tests/reorg-overflow.py` or so) where you could prove your implementation? The test should fail on current master and succeed with master+this PR on top.\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103826182,103826182,
jrick,2015-05-20T14:20:48Z,"@jonasschnelli agree that exercising this with a test would be good to have.  I can try my hand at the RPC test at it if no one else picks it up, but I am not familiar with python.\n\nDon't want to sidetrack the discussion, but writing tests in a different language that contributors might not know seems like a strange decision.  Testing everything over RPC instead of calling the functions directly",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103903522,103903522,
jonasschnelli,2015-05-20T14:30:55Z,@jrick: no need to expose internals over RPC. If you PR solves a real world problems (which this PR does IMO) you should be able to automate the steps-to-produce-the-error-you-solve by creating a RPC test. You don't need to know python. Just copy'n'paste from other tests and adapt your scenario. :)\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-103905924,103905924,
jrick,2015-05-20T21:46:26Z,Added RPC tests.\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-104048519,104048519,
jonasschnelli,2015-05-21T08:47:32Z,Tested (regtest only!). ACK.\nChanges look sane to me but i'm not sure if the changes in `src/pow.cpp` should go over chainparams (or something similar) so that this PR only affects regtest. \n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-104183920,104183920,
laanwj,2015-05-21T10:46:48Z,"> Changes look sane to me but i'm not sure if the changes in src/pow.cpp should go over chainparams (or something similar) so that this PR only affects regtest. \n\nI'm also wary of this, if this is a problem that affects only testing code (regtest), it's unnecessary risk to change mainnet consensus code for it.\n\nRemind me: Why does it retarget difficulty on regtest at all? From what I've always",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-104223021,104223021,
jrick,2015-05-21T14:37:50Z,"I can't speak for regtest, but @davecgh and I hit this issue while I was patching in support for btcd's simnet so I could do some testing against one of our private test networks.  The difficulty retarget is needed in this case, or block generation timings on our network would not be as realistic as we need.\n\nIn the past, whenever we've talked about simnet in #bitcoin-dev, we've been told ""that ",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-104300457,104300457,
davecgh,2015-05-21T15:53:34Z,"I would also suggest that having a test for the retarget code which does not rely on special casing or branches specific to the network makes the most sense and is the least risky approach.\n\nThis code path is currently uncovered by the test code.  The block tester tool does not generate enough blocks to hit the retarget interval, and I haven't seen any test cases anywhere which otherwise cover i",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-104328522,104328522,
jrick,2015-05-21T17:03:26Z,"It's probably better for the rpc tests to calculate the exact expected retarget difficulty, instead of simply checking that the change was within the expected bounds.\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-104356136,104356136,
sipa,2015-06-14T14:04:01Z,"Regtest does retarget just like mainnet, the only difference is that it starts off at a much lower difficulty.\n\nGiven that part of the purpose of that regtest is covering code to be used by mainnet, I think it's important that they do use the same code. I'm not very keen on changing the code for mainnet, though - even if it shouldn't make any difference, so I don't really know what the best solu",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-111828786,111828786,
jtimon,2015-08-29T00:38:27Z,"NACK, I would prefer regtest not to ever retarget as @laanwj suggests.\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-135922359,135922359,
jgarzik,2015-09-15T17:54:17Z,Leaning towards closing.  Seems unlikely to be merged anytime soon given current comments.\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-140481339,140481339,
dcousens,2015-09-16T07:03:03Z,"[Weak] NACK.\n\nIf it isn't an issue,  IMHO,  don't bother adding the code to calculate it,  however, it would be nice to document and assert that assumption.\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-140649508,140649508,
sipa,2015-09-16T11:59:54Z,Well regtest currently cannot deal with retargets. I believe that's a\nsignificant limitation and reduces the usefulness of regtest (but bringing\nit back ideally means using the same code for both).\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-140720330,140720330,
davecgh,2015-09-16T14:13:01Z,"As previously mentioned, it is in fact an issue on regtest.  Retargets are not possible on regtest currently (and they used to be before commit df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c).  Unfortunately, there is currently no test coverage which exercise the retarget code and is why this was able to go through.\n\nRepeating what I said above, I would also suggest that having a test for the retarget",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-140753408,140753408,
laanwj,2015-10-19T10:43:53Z,"As retargetting never worked on regtest I'd prefer it to be disabled completely, as from what I've gathered, people don't really expect the difficulty on regtest to ramp up.\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149182235,149182235,
sipa,2015-10-19T11:15:23Z,"In that case I think we should add a boolean to Consensus::Params called\nfNoRetargetting, that disables the logic entirely. Currently we just can't\ncreate regtest chains longer than 2016 blocks...\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149187376,149187376,
btcdrak,2015-10-19T11:21:45Z,"@sipa I agree, that would be a much clearer solution. I know the versionbits integration tests are going to need the ability to generate more than 2016 blocks on regtestnet (afaik). refs #6816 \n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149188300,149188300,
CodeShark,2015-10-19T11:24:32Z,"@sipa @btcdrak Regarding your fNoRetargetting, indeed! I had to force CheckProofOfWork to return true to actually run tests on #6816\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149188683,149188683,
btcdrak,2015-10-19T11:30:36Z,"@CodeShark maybe you should just fix it in your PR, or should there be a separate PR?\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149189564,149189564,
davecgh,2015-10-19T13:26:03Z,@laanwj: It is not true that retargetting never worked on regtest.  It worked prior to commit df9eb5e.\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149212476,149212476,
morcos,2015-10-19T14:09:49Z,"For the record, I was in favor of this pull, but not strongly enough to continue advocating for it.\n",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149224114,149224114,
jonasschnelli,2015-10-19T14:12:22Z,I also ACKed this PR. If only the mainnet effects would be reduced by moving/encapsulating the changes from the PR in `CalculateNextWorkRequired()` somehow towards `chainparams.cpp` ...\n,https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149224775,149224775,
jtimon,2015-10-19T17:37:24Z,"> This code path is currently uncovered by the test code.\n\nActually there's currently some unittest for CalculateNextWorkRequired(), see https://github.com/bitcoin/bitcoin/blob/master/src/test/pow_tests.cpp.\nIn fact, testing was the reason why CalculateNextWorkRequired() was separated from GetNextWorkRequired() in the first place (see https://github.com/bitcoin/bitcoin/commit/34e5015cd21e27c1bf",https://github.com/bitcoin/bitcoin/pull/6162#issuecomment-149292178,149292178,
jonasschnelli,2015-05-21T08:39:19Z,"This test should be disabled in `rpc-tests.sh` because it mines serval hundred blocks and it's therefore not ideal for travis/CI (timeouts,etc.).\n",https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30782721,30782721,qa/pull-tester/rpc-tests.sh
jrick,2015-05-21T14:39:43Z,"What is the command to run all RPC tests, including those disabled for the pull tester?\n",https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30808425,30808425,qa/pull-tester/rpc-tests.sh
jonasschnelli,2015-05-21T15:08:58Z,You can't.\nBut there is a PR in this direction #6097\n,https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30811609,30811609,qa/pull-tester/rpc-tests.sh
jrick,2015-05-21T15:19:57Z,"Should retarget-overflow.py not appear in rpc-tests.sh at all, or be commented out like forknotify.py?\n",https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30812760,30812760,qa/pull-tester/rpc-tests.sh
jonasschnelli,2015-05-21T15:55:57Z,IMO best practice (for the current state) is to add your test commented out in `rpc-tests.sh`.\n,https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30816754,30816754,qa/pull-tester/rpc-tests.sh
jrick,2015-05-21T16:00:40Z,done\n,https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30817234,30817234,qa/pull-tester/rpc-tests.sh
sipa,2015-05-21T16:09:22Z,"The rule for regtest is just to start with a much lower difficulty than\nmainnet, but otherwise is identical in retargetting.\n\nIt's unfortunate that we would need larger integer support for just the\nregtest.\n\nAs regtest mining beyond the retargetting interval hasn't worked for a\nwhile, could we not just change its logic instead, and disable retargetting\nentirely? That seems closer to what p",https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30818040,30818040,qa/pull-tester/rpc-tests.sh
sipa,2015-05-21T16:19:52Z,"Ignore my suggestion to disable retarget on regtest, as testing retarget on\nmainnet itself is not feasible.\n\nCan we easily redefine it to not require larger arithmetic?\n\nIf not, switching everything to 512 and adding tests for it like this PR\ndoes is probably the best option, as it's the only way to make sure the\ncode under test is the same as the one affecting mainnet.\n",https://github.com/bitcoin/bitcoin/pull/6162#discussion_r30819025,30819025,qa/pull-tester/rpc-tests.sh
