[
  {
    "sha": "db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjVhZDVlODNkMDMxMGEzZWI5Yjg5NzgyNmRkNTlhMjE1YmY4N2Vh",
    "commit": {
      "author": {
        "name": "Josh Rickmar",
        "email": "jrick@conformal.com",
        "date": "2015-05-19T04:36:17Z"
      },
      "committer": {
        "name": "Josh Rickmar",
        "email": "jrick@conformal.com",
        "date": "2015-05-20T20:51:21Z"
      },
      "message": "Use 512-bit arithmetic for difficulty retarget calculation.\n\nThis prevents an integer overflow during the difficulty retarget\ncalculation, and fixes a consensus-changing bug introduced by\ndf9eb5e14fa8072bc8a82b59e712c2ba36f13f4c.  While it is not possible to\nhit this consensus bug on mainnet or testnet3 due to the higher\nproof-of-work limits, it is easily hit on regtest after generating\n2016 blocks, forcing the retarget.",
      "tree": {
        "sha": "bfb665c500a06caef0f80c7be5c992625f5a49ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfb665c500a06caef0f80c7be5c992625f5a49ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/comments",
    "author": {
      "login": "jrick",
      "id": 1420313,
      "node_id": "MDQ6VXNlcjE0MjAzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1420313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrick",
      "html_url": "https://github.com/jrick",
      "followers_url": "https://api.github.com/users/jrick/followers",
      "following_url": "https://api.github.com/users/jrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrick/subscriptions",
      "organizations_url": "https://api.github.com/users/jrick/orgs",
      "repos_url": "https://api.github.com/users/jrick/repos",
      "events_url": "https://api.github.com/users/jrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jrick",
      "id": 1420313,
      "node_id": "MDQ6VXNlcjE0MjAzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1420313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrick",
      "html_url": "https://github.com/jrick",
      "followers_url": "https://api.github.com/users/jrick/followers",
      "following_url": "https://api.github.com/users/jrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrick/subscriptions",
      "organizations_url": "https://api.github.com/users/jrick/orgs",
      "repos_url": "https://api.github.com/users/jrick/repos",
      "events_url": "https://api.github.com/users/jrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d862c2739b96005fdf0e2a4df347e7291956fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d862c2739b96005fdf0e2a4df347e7291956fc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d862c2739b96005fdf0e2a4df347e7291956fc1"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1078abdbc7f772ddd0c2f29d0e6d1a89d93a732e",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
        "patch": "@@ -199,6 +199,11 @@ template void base_uint<256>::SetHex(const char*);\n template void base_uint<256>::SetHex(const std::string&);\n template unsigned int base_uint<256>::bits() const;\n \n+// Instantiations for base_uint<512>\n+template base_uint<512>& base_uint<512>::operator*=(unsigned int);\n+template base_uint<512>& base_uint<512>::operator/=(const base_uint<512>& b);\n+template int base_uint<512>::CompareTo(const base_uint<512>&) const;\n+\n // This implementation directly uses shifts instead of going\n // through an intermediate MPI representation.\n arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)"
      },
      {
        "sha": "8c75dc32f2a76985c421a76722775e1853dff25f",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_ARITH_UINT256_H\n #define BITCOIN_ARITH_UINT256_H\n \n+#include <algorithm>\n #include <assert.h>\n #include <cstring>\n #include <stdexcept>\n@@ -24,6 +25,9 @@ class uint_error : public std::runtime_error {\n template<unsigned int BITS>\n class base_uint\n {\n+    template <unsigned int B>\n+    friend class base_uint;\n+\n protected:\n     enum { WIDTH=BITS/32 };\n     uint32_t pn[WIDTH];\n@@ -41,6 +45,15 @@ class base_uint\n             pn[i] = b.pn[i];\n     }\n \n+    template<unsigned int B>\n+    static base_uint from_other_size(const base_uint<B>& b)\n+    {\n+        base_uint ret;\n+        for (int i = 0; i < std::min((int)WIDTH, (int)b.WIDTH); i++)\n+            ret.pn[i] = b.pn[i];\n+        return ret;\n+    }\n+\n     base_uint& operator=(const base_uint& b)\n     {\n         for (int i = 0; i < WIDTH; i++)\n@@ -284,6 +297,12 @@ class arith_uint256 : public base_uint<256> {\n     friend arith_uint256 UintToArith256(const uint256 &);\n };\n \n+class arith_uint512 : public base_uint<512> {\n+public:\n+    arith_uint512() {}\n+    arith_uint512(const base_uint<512>& b) : base_uint<512>(b) {}\n+};\n+\n uint256 ArithToUint256(const arith_uint256 &);\n arith_uint256 UintToArith256(const uint256 &);\n "
      },
      {
        "sha": "dd95a120e1706d520282cbebe8555395c63e3969",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db5ad5e83d0310a3eb9b897826dd59a215bf87ea/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
        "patch": "@@ -62,15 +62,19 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n     // Retarget\n     const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n+    const arith_uint512 bnPowLimit512 = arith_uint512::from_other_size(bnPowLimit);\n     arith_uint256 bnNew;\n     arith_uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n     bnOld = bnNew;\n-    bnNew *= nActualTimespan;\n-    bnNew /= params.nPowTargetTimespan;\n+    arith_uint512 bnNew512 = arith_uint512::from_other_size(bnNew);\n+    bnNew512 *= nActualTimespan;\n+    bnNew512 /= params.nPowTargetTimespan;\n \n-    if (bnNew > bnPowLimit)\n-        bnNew = bnPowLimit;\n+    if (bnNew512 > bnPowLimit512)\n+        bnNew512 = bnPowLimit512;\n+\n+    bnNew = arith_uint256::from_other_size(bnNew512);\n \n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");"
      }
    ]
  },
  {
    "sha": "bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmEwZjM4ZjFkYzI4ZWM5ZmY0ZGViZDg2M2VhMzhmOWI3NDNiNzk3",
    "commit": {
      "author": {
        "name": "Josh Rickmar",
        "email": "jrick@conformal.com",
        "date": "2015-05-20T20:50:20Z"
      },
      "committer": {
        "name": "Josh Rickmar",
        "email": "jrick@conformal.com",
        "date": "2015-05-21T15:59:30Z"
      },
      "message": "Add RPC tests to ensure no retarget overflow.",
      "tree": {
        "sha": "71c4ec2c19ce4ebc0cd549207dae72fd7c2c23ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71c4ec2c19ce4ebc0cd549207dae72fd7c2c23ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/comments",
    "author": {
      "login": "jrick",
      "id": 1420313,
      "node_id": "MDQ6VXNlcjE0MjAzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1420313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrick",
      "html_url": "https://github.com/jrick",
      "followers_url": "https://api.github.com/users/jrick/followers",
      "following_url": "https://api.github.com/users/jrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrick/subscriptions",
      "organizations_url": "https://api.github.com/users/jrick/orgs",
      "repos_url": "https://api.github.com/users/jrick/repos",
      "events_url": "https://api.github.com/users/jrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jrick",
      "id": 1420313,
      "node_id": "MDQ6VXNlcjE0MjAzMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1420313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrick",
      "html_url": "https://github.com/jrick",
      "followers_url": "https://api.github.com/users/jrick/followers",
      "following_url": "https://api.github.com/users/jrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrick/subscriptions",
      "organizations_url": "https://api.github.com/users/jrick/orgs",
      "repos_url": "https://api.github.com/users/jrick/repos",
      "events_url": "https://api.github.com/users/jrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db5ad5e83d0310a3eb9b897826dd59a215bf87ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db5ad5e83d0310a3eb9b897826dd59a215bf87ea"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 109,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f788ac83853c02c0a53f9ad6588cb19c6400f8d",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
        "patch": "@@ -35,6 +35,7 @@ testScripts=(\n     'invalidblockrequest.py'\n     'rawtransactions.py'\n #    'forknotify.py'\n+#    'retarget-overflow.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n     for (( i = 0; i < ${#testScripts[@]}; i++ ))"
      },
      {
        "sha": "60550b007319052368cee6a51593268068d6ef74",
        "filename": "qa/rpc-tests/mininode.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/qa/rpc-tests/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/qa/rpc-tests/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mininode.py?ref=bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
        "patch": "@@ -110,6 +110,20 @@ def uint256_from_compact(c):\n     return v\n \n \n+def compact_from_uint256(v):\n+    nbytes = (v.bit_length() + 7) / 8;\n+    c = 0\n+    if nbytes <= 3:\n+        c = (v & 0xFFFFFFFF) << (8 * (3 - nbytes))\n+    else:\n+        c = v >> 8 * (nbytes - 3)\n+    if c & 0x00800000:\n+        c >>= 8\n+        nbytes += 1\n+    c |= nbytes << 24\n+    return c\n+\n+\n def deser_vector(f, c):\n     nit = struct.unpack(\"<B\", f.read(1))[0]\n     if nit == 253:"
      },
      {
        "sha": "5bc10d4d32efd262eb9ea0fcba14562d4c5bf1dc",
        "filename": "qa/rpc-tests/retarget-overflow.py",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/qa/rpc-tests/retarget-overflow.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa0f38f1dc28ec9ff4debd863ea38f9b743b797/qa/rpc-tests/retarget-overflow.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/retarget-overflow.py?ref=bfa0f38f1dc28ec9ff4debd863ea38f9b743b797",
        "patch": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test that the difficulty retarget calculation cannot overflow\n+# a 256-bit unsigned integer.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+from mininode import compact_from_uint256, uint256_from_compact\n+\n+class RetargetOverflowTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+\n+        connect_nodes_bi(self.nodes,0,1)\n+\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        # Generate a single block to leave IBD.  Without this, calls to\n+        # getblocktemplate will fail.\n+        self.nodes[0].generate(1)\n+\n+        # Fetch the first hash target.  This test is only valid for the\n+        # regression test network, since the POW limits for main and\n+        # testnet are too low to expose the overflow.\n+        gbtResp = self.nodes[0].getblocktemplate()\n+        prevTargetStr = gbtResp[\"target\"]\n+        assert_equal(prevTargetStr, \"7fffff0000000000000000000000000000000000000000000000000000000000\")\n+        prevTarget = int(prevTargetStr, 16)\n+        \n+        # For 10 minute blocks and a target of 2 weeks between difficulty\n+        # retargets, the first retarget will occur at block 2016\n+        # (60 mins/hr * 24 hrs/day * 7 days/wk * 2 wks / 10 mins/block = 2016 blocks).\n+        # Generate one less than this, and then verify that the next\n+        # difficulty is within the expected bounds (indicating that the\n+        # calculation did not ovewflow).\n+        #\n+        # One block has already been generated above to leave IBD, so only\n+        # generate 2014 more.\n+        #\n+        # Use multiple calls to avoid RPC timeout in slow test environments.\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(14)  # now at height 2015\n+\n+        # Fetch the next target difficulty for block 2016.\n+        gbtResp = self.nodes[0].getblocktemplate()\n+        retargetDifficultyStr = gbtResp[\"target\"]\n+        retargetDifficulty = int(retargetDifficultyStr, 16)\n+\n+        # A difficutly retarget should result in the next difficulty in\n+        # the range [previous/4, previous*4].  However, since this is the\n+        # first retarget, and the difficulty can never exceed the networks's\n+        # POW limit, the next difficulty must be in [previous/4, compact(powLimit)].\n+        minimum = uint256_from_compact(compact_from_uint256(prevTarget / 4))\n+        maximum = uint256_from_compact(compact_from_uint256(prevTarget))\n+        if retargetDifficulty < minimum or retargetDifficulty > maximum:\n+            raise AssertionError(\"Retarget difficulty %s outside expected range (possible overflow detected)\"%(retargetDifficultyStr))\n+        prevTarget = retargetDifficulty\n+\n+        # Test a second retarget for block 4032.  While the first retarget\n+        # likely kept the same difficulty due to the very early regtest\n+        # genesis block timestamp, resulting in a very long timespan between\n+        # retargets, the next retarget should use the timestamp in block 2016\n+        # and have a very short timespan.\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(500)\n+        self.nodes[0].generate(16) # now at height 4031\n+        \n+        gbtResp = self.nodes[0].getblocktemplate()\n+        retargetDifficultyStr = gbtResp[\"target\"]\n+        retargetDifficulty = int(retargetDifficultyStr, 16)\n+\n+        minimum = uint256_from_compact(compact_from_uint256(prevTarget / 4))\n+        maximum = uint256_from_compact(compact_from_uint256(prevTarget))\n+        if retargetDifficulty < minimum or retargetDifficulty > maximum:\n+            raise AssertionError(\"Retarget difficulty %s outside expected range (possible overflow detected)\"%(retargetDifficultyStr))\n+\n+if __name__ == '__main__':\n+    RetargetOverflowTest().main()"
      }
    ]
  }
]