[
  {
    "sha": "9e697172542e2b01517e4025df2c23d0ed5447f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTY5NzE3MjU0MmUyYjAxNTE3ZTQwMjVkZjJjMjNkMGVkNTQ0N2Y0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-07T21:31:12Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-07T21:31:12Z"
      },
      "message": "Make wallet descendant searching more efficient",
      "tree": {
        "sha": "9a9db75e37ffc2c0ba0fd51e22a5646ed00e190f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9db75e37ffc2c0ba0fd51e22a5646ed00e190f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e697172542e2b01517e4025df2c23d0ed5447f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e697172542e2b01517e4025df2c23d0ed5447f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e697172542e2b01517e4025df2c23d0ed5447f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e697172542e2b01517e4025df2c23d0ed5447f4/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f61766b37beb2fecbe3915a72a814cbdb107be0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f61766b37beb2fecbe3915a72a814cbdb107be0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f61766b37beb2fecbe3915a72a814cbdb107be0a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "448c9badaf7231478df392b0ac50739f69cbc48a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e697172542e2b01517e4025df2c23d0ed5447f4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e697172542e2b01517e4025df2c23d0ed5447f4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9e697172542e2b01517e4025df2c23d0ed5447f4",
        "patch": "@@ -784,14 +784,14 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     // Do not flush the wallet here for performance reasons\n     CWalletDB walletdb(strWalletFile, \"r+\", false);\n \n-    std::deque<uint256> todo;\n+    std::set<uint256> todo;\n     std::set<uint256> done;\n \n-    todo.push_back(hashTx);\n+    todo.insert(hashTx);\n \n     while (!todo.empty()) {\n-        uint256 now = todo.front();\n-        todo.pop_front();\n+        uint256 now = *todo.begin();\n+        todo.erase(now);\n         done.insert(now);\n         assert(mapWallet.count(now));\n         CWalletTx& wtx = mapWallet[now];\n@@ -807,7 +807,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));\n             while (iter != mapTxSpends.end() && iter->first.hash == now) {\n                  if (!done.count(iter->second)) {\n-                     todo.push_back(iter->second);\n+                     todo.insert(iter->second);\n                  }\n                  iter++;\n             }"
      }
    ]
  },
  {
    "sha": "01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWUwNmQxZmEzNjVjZWRiN2Y1ZDVlMTdlNmJkZjBiNTI2ZTcwMGM1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-07T21:31:27Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-13T13:42:04Z"
      },
      "message": "Add new rpc call: abandontransaction\n\nUnconfirmed transactions that are not in your mempool either due to eviction or other means may be unlikely to be mined.  abandontransaction gives the wallet a way to no longer consider as spent the coins that are inputs to such a transaction.  All dependent transactions in the wallet will also be marked as abandoned.",
      "tree": {
        "sha": "000ae132fa41b0a142377b7b1193a63398caace0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/000ae132fa41b0a142377b7b1193a63398caace0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e697172542e2b01517e4025df2c23d0ed5447f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e697172542e2b01517e4025df2c23d0ed5447f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e697172542e2b01517e4025df2c23d0ed5447f4"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 125,
      "deletions": 12
    },
    "files": [
      {
        "sha": "43104b6651718721c1a8e3a119509482e3849398",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "patch": "@@ -346,6 +346,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false },\n     { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false },\n     { \"wallet\",             \"gettransaction\",         &gettransaction,         false },\n+    { \"wallet\",             \"abandontransaction\",     &abandontransaction,     false },\n     { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false },\n     { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false },\n     { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },"
      },
      {
        "sha": "babf7c8d2e1f2aa380b622bf084f60f156cd6cad",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "patch": "@@ -221,6 +221,7 @@ extern UniValue listaddressgroupings(const UniValue& params, bool fHelp);\n extern UniValue listaccounts(const UniValue& params, bool fHelp);\n extern UniValue listsinceblock(const UniValue& params, bool fHelp);\n extern UniValue gettransaction(const UniValue& params, bool fHelp);\n+extern UniValue abandontransaction(const UniValue& params, bool fHelp);\n extern UniValue backupwallet(const UniValue& params, bool fHelp);\n extern UniValue keypoolrefill(const UniValue& params, bool fHelp);\n extern UniValue walletpassphrase(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "9e7d9cc98a95bc0d440dabc2be5dc242f02545e0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "patch": "@@ -1764,6 +1764,40 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     return entry;\n }\n \n+UniValue abandontransaction(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"abandontransaction \\\"txid\\\"\\n\"\n+            \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n+            \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n+            \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n+            \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n+            \"It has no effect on transactions which are already conflicted or abandoned.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+            + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    if (!pwalletMain->AbandonTransaction(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n+\n+    return NullUniValue;\n+}\n+\n \n UniValue backupwallet(const UniValue& params, bool fHelp)\n {"
      },
      {
        "sha": "68e3b2fe5895ad3bd24d0fe492a9dc652c228317",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 11,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "patch": "@@ -48,6 +48,8 @@ bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n  */\n CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);\n \n+const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n+\n /** @defgroup mapWallet\n  *\n  * @{\n@@ -455,8 +457,11 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     {\n         const uint256& wtxid = it->second;\n         std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n-        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= 0)\n-            return true; // Spent\n+        if (mit != mapWallet.end()) {\n+            int depth = mit->second.GetDepthInMainChain();\n+            if (depth > 0  || (depth == 0 && !mit->second.isAbandoned()))\n+                return true; // Spent\n+        }\n     }\n     return false;\n }\n@@ -610,7 +615,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n             if (mapWallet.count(txin.prevout.hash)) {\n                 CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n-                if (prevtx.nIndex == -1 && !prevtx.hashBlock.IsNull()) {\n+                if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n                     MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n                 }\n             }\n@@ -631,7 +636,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n             wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n             wtx.nTimeSmart = wtx.nTimeReceived;\n-            if (!wtxIn.hashBlock.IsNull())\n+            if (!wtxIn.hashUnset())\n             {\n                 if (mapBlockIndex.count(wtxIn.hashBlock))\n                 {\n@@ -681,7 +686,13 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         if (!fInsertedNew)\n         {\n             // Merge\n-            if (!wtxIn.hashBlock.IsNull() && wtxIn.hashBlock != wtx.hashBlock)\n+            if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n+            {\n+                wtx.hashBlock = wtxIn.hashBlock;\n+                fUpdated = true;\n+            }\n+            // If no longer abandoned, update\n+            if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n             {\n                 wtx.hashBlock = wtxIn.hashBlock;\n                 fUpdated = true;\n@@ -768,6 +779,63 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+bool CWallet::AbandonTransaction(const uint256& hashTx)\n+{\n+    LOCK2(cs_main, cs_wallet);\n+\n+    // Do not flush the wallet here for performance reasons\n+    CWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+    std::set<uint256> todo;\n+    std::set<uint256> done;\n+\n+    // Can't mark abandoned if confirmed or in mempool\n+    assert(mapWallet.count(hashTx));\n+    CWalletTx& origtx = mapWallet[hashTx];\n+    if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) {\n+        return false;\n+    }\n+\n+    todo.insert(hashTx);\n+\n+    while (!todo.empty()) {\n+        uint256 now = *todo.begin();\n+        todo.erase(now);\n+        done.insert(now);\n+        assert(mapWallet.count(now));\n+        CWalletTx& wtx = mapWallet[now];\n+        int currentconfirm = wtx.GetDepthInMainChain();\n+        // If the orig tx was not in block, none of its spends can be\n+        assert(currentconfirm <= 0);\n+        // if (currentconfirm < 0) {Tx and spends are already conflicted, no need to abandon}\n+        if (currentconfirm == 0 && !wtx.isAbandoned()) {\n+            // If the orig tx was not in block/mempool, none of its spends can be in mempool\n+            assert(!wtx.InMempool());\n+            wtx.nIndex = -1;\n+            wtx.setAbandoned();\n+            wtx.MarkDirty();\n+            wtx.WriteToDisk(&walletdb);\n+            // Iterate over all its outputs, and mark transactions in the wallet that spend them abandoned too\n+            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(hashTx, 0));\n+            while (iter != mapTxSpends.end() && iter->first.hash == now) {\n+                if (!done.count(iter->second)) {\n+                    todo.insert(iter->second);\n+                }\n+                iter++;\n+            }\n+            // If a transaction changes 'conflicted' state, that changes the balance\n+            // available of the outputs it spends. So force those to be recomputed\n+            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            {\n+                if (mapWallet.count(txin.prevout.hash))\n+                    mapWallet[txin.prevout.hash].MarkDirty();\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n {\n     LOCK2(cs_main, cs_wallet);\n@@ -976,7 +1044,7 @@ int CWalletTx::GetRequestCount() const\n         if (IsCoinBase())\n         {\n             // Generated block\n-            if (!hashBlock.IsNull())\n+            if (!hashUnset())\n             {\n                 map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                 if (mi != pwallet->mapRequestCount.end())\n@@ -992,7 +1060,7 @@ int CWalletTx::GetRequestCount() const\n                 nRequests = (*mi).second;\n \n                 // How about the block it's in?\n-                if (nRequests == 0 && !hashBlock.IsNull())\n+                if (nRequests == 0 && !hashUnset())\n                 {\n                     map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                     if (mi != pwallet->mapRequestCount.end())\n@@ -1166,7 +1234,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth == 0) {\n+        if (!wtx.IsCoinBase() && (nDepth == 0 && !wtx.isAbandoned())) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         }\n     }\n@@ -1186,7 +1254,7 @@ bool CWalletTx::RelayWalletTransaction()\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase())\n     {\n-        if (GetDepthInMainChain() == 0) {\n+        if (GetDepthInMainChain() == 0 && !isAbandoned()) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             RelayTransaction((CTransaction)*this);\n             return true;\n@@ -2927,8 +2995,9 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n \n int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n {\n-    if (hashBlock.IsNull())\n+    if (hashUnset())\n         return 0;\n+\n     AssertLockHeld(cs_main);\n \n     // Find the block it claims to be in\n@@ -2956,4 +3025,3 @@ bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n     CValidationState state;\n     return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee);\n }\n-"
      },
      {
        "sha": "1ab173badbe6cac0a68f5579c84c35d684840c0d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "patch": "@@ -155,6 +155,10 @@ struct COutputEntry\n /** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction\n {\n+private:\n+  /** Constant used in hashBlock to indicate tx has been abandoned */\n+    static const uint256 ABANDON_HASH;\n+\n public:\n     uint256 hashBlock;\n \n@@ -206,6 +210,9 @@ class CMerkleTx : public CTransaction\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n+    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n+    void setAbandoned() { hashBlock = ABANDON_HASH; }\n };\n \n /** \n@@ -486,7 +493,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n     void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n \n-\n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n public:\n@@ -783,6 +789,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetBroadcastTransactions() const { return fBroadcastTransactions; }\n     /** Set whether this wallet broadcasts transactions. */\n     void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n+\n+    /* Mark a transaction (and it in-wallet descendants) as abandoned so its inputs may be respent. */\n+    bool AbandonTransaction(const uint256& hashTx);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "df0e2226d998483d247c0245170f6b8ff6433b1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjBlMjIyNmQ5OTg0ODNkMjQ3YzAyNDUxNzBmNmI4ZmY2NDMzYjFk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-08T16:39:24Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-13T13:42:04Z"
      },
      "message": "Add RPC test for abandoned and conflicted transactions.",
      "tree": {
        "sha": "b480928a6a8e4e8726f2e71d43a15eff83618cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b480928a6a8e4e8726f2e71d43a15eff83618cf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df0e2226d998483d247c0245170f6b8ff6433b1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0e2226d998483d247c0245170f6b8ff6433b1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df0e2226d998483d247c0245170f6b8ff6433b1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0e2226d998483d247c0245170f6b8ff6433b1d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01e06d1fa365cedb7f5d5e17e6bdf0b526e700c5"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 154,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e7173fda080fec4644ca64f76fada5525cef9fd4",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0e2226d998483d247c0245170f6b8ff6433b1d/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0e2226d998483d247c0245170f6b8ff6433b1d/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=df0e2226d998483d247c0245170f6b8ff6433b1d",
        "patch": "@@ -105,6 +105,7 @@\n     'prioritise_transaction.py',\n     'invalidblockrequest.py',\n     'invalidtxrequest.py',\n+    'abandonconflict.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "38028df07902ceeb81d935105ca3f4a8a8fa339d",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "added",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0e2226d998483d247c0245170f6b8ff6433b1d/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0e2226d998483d247c0245170f6b8ff6433b1d/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=df0e2226d998483d247c0245170f6b8ff6433b1d",
        "patch": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class AbandonConflictTest(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.00001\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\",\"-logtimemicros\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        self.nodes[1].generate(100)\n+        sync_blocks(self.nodes)\n+        balance = self.nodes[0].getbalance()\n+        txA = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        txB = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        txC = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        sync_mempools(self.nodes)\n+        self.nodes[1].generate(1)\n+\n+        sync_blocks(self.nodes)\n+        newbalance = self.nodes[0].getbalance()\n+        assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost\n+        balance = newbalance\n+\n+        url = urlparse.urlparse(self.nodes[1].url)\n+        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n+\n+        # Identify the 10btc outputs\n+        nA = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txA, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+        nB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txB, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+        nC = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txC, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+\n+        inputs =[]\n+        # spend 10btc outputs from txA and txB\n+        inputs.append({\"txid\":txA, \"vout\":nA})\n+        inputs.append({\"txid\":txB, \"vout\":nB})\n+        outputs = {}\n+\n+        outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n+        outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n+        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n+        # Identify the 14.99998btc output\n+        nAB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txAB1, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"14.99998\"))\n+\n+        #Create a child tx spending AB1 and C\n+        inputs = []\n+        inputs.append({\"txid\":txAB1, \"vout\":nAB})\n+        inputs.append({\"txid\":txC, \"vout\":nC})\n+        outputs = {}\n+        outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n+        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n+\n+        # In mempool txs from self should increase balance from change\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance - Decimal(\"30\") + Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n+        # TODO: redo with eviction\n+        # Note had to make sure tx did not have AllowFree priority\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n+\n+        # Verify txs no longer in mempool\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+\n+        # Not in mempool txs from self should only reduce balance\n+        # inputs are still spent, but change not received\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance - Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Abandon original transaction and verify inputs are available again\n+        # including that the child tx was also abandoned\n+        self.nodes[0].abandontransaction(txAB1)\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance + Decimal(\"30\"))\n+        balance = newbalance\n+\n+        # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.00001\"])\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+        assert(self.nodes[0].getbalance() == balance)\n+\n+        # But if its received again then it is unabandoned\n+        # And since now in mempool, the change is available\n+        # But its child tx remains abandoned\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance - Decimal(\"20\") + Decimal(\"14.99998\"))\n+        balance = newbalance\n+\n+        # Send child tx again so its unabandoned\n+        self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance - Decimal(\"10\") - Decimal(\"14.99998\") + Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Remove using high relay fee again\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n+        assert(len(self.nodes[0].getrawmempool()) == 0)\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance - Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Create a double spend of AB1 by spending again from only A's 10 output\n+        # Mine double spend from node 1\n+        inputs =[]\n+        inputs.append({\"txid\":txA, \"vout\":nA})\n+        outputs = {}\n+        outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signed = self.nodes[0].signrawtransaction(tx)\n+        self.nodes[1].sendrawtransaction(signed[\"hex\"])\n+        self.nodes[1].generate(1)\n+\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted\n+        newbalance = self.nodes[0].getbalance()\n+        assert(newbalance == balance + Decimal(\"20\"))\n+        balance = newbalance\n+\n+        # There is currently a minor bug around this and so this test doesn't work.  See Issue #7315\n+        # Invalidate the block with the double spend and B's 10 BTC output should no longer be available\n+        # Don't think C's should either\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        newbalance = self.nodes[0].getbalance()\n+        #assert(newbalance == balance - Decimal(\"10\"))\n+        print \"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\"\n+        print \"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\"\n+        print balance , \" -> \" , newbalance , \" ?\"\n+\n+if __name__ == '__main__':\n+    AbandonConflictTest().main()"
      }
    ]
  },
  {
    "sha": "d11fc1695c0453ef22a633e516726f82717dd1d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTFmYzE2OTVjMDQ1M2VmMjJhNjMzZTUxNjcyNmY4MjcxN2RkMWQ5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-01-11T10:15:41Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-01-13T13:42:04Z"
      },
      "message": "[Wallet] Call notification signal when a transaction is abandoned",
      "tree": {
        "sha": "56479d5ebf380ad758cc34ab9d1fb6f5469e2e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56479d5ebf380ad758cc34ab9d1fb6f5469e2e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d11fc1695c0453ef22a633e516726f82717dd1d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d11fc1695c0453ef22a633e516726f82717dd1d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d11fc1695c0453ef22a633e516726f82717dd1d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d11fc1695c0453ef22a633e516726f82717dd1d9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df0e2226d998483d247c0245170f6b8ff6433b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0e2226d998483d247c0245170f6b8ff6433b1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df0e2226d998483d247c0245170f6b8ff6433b1d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "78371ee30a86ff26bbf7319c09755eb0c9774c88",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d11fc1695c0453ef22a633e516726f82717dd1d9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d11fc1695c0453ef22a633e516726f82717dd1d9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d11fc1695c0453ef22a633e516726f82717dd1d9",
        "patch": "@@ -815,6 +815,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             wtx.setAbandoned();\n             wtx.MarkDirty();\n             wtx.WriteToDisk(&walletdb);\n+            NotifyTransactionChanged(this, wtx.GetHash(), CT_UPDATED);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them abandoned too\n             TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(hashTx, 0));\n             while (iter != mapTxSpends.end() && iter->first.hash == now) {"
      }
    ]
  }
]