[
  {
    "sha": "8053e5cdade87550f0381d51feab81dedfec6c46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDUzZTVjZGFkZTg3NTUwZjAzODFkNTFmZWFiODFkZWRmZWM2YzQ2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-08T12:58:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-08T13:32:33Z"
      },
      "message": "Remove -mempoolreplacement to prevent needless block prop slowness.\n\nAt this point there is no reasonable excuse to disable opt-in RBF,\nand, unlike when this option was added, there are now significant\nissues created when disabling it (in the form of compact block\nreconstruction failures). Further, it breaks a lot of modern wallet\nbehavior.",
      "tree": {
        "sha": "82c7cf378a2f045cd0998b6be99777f153884734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82c7cf378a2f045cd0998b6be99777f153884734"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8053e5cdade87550f0381d51feab81dedfec6c46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8053e5cdade87550f0381d51feab81dedfec6c46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8053e5cdade87550f0381d51feab81dedfec6c46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8053e5cdade87550f0381d51feab81dedfec6c46/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d2ccf0ce9ca1571c650a69319fb9c1e0b626ecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2ccf0ce9ca1571c650a69319fb9c1e0b626ecb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2ccf0ce9ca1571c650a69319fb9c1e0b626ecb"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 5,
      "deletions": 41
    },
    "files": [
      {
        "sha": "1e8443b1d34106fc7cffaa79982d8a721f07e910",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8053e5cdade87550f0381d51feab81dedfec6c46/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8053e5cdade87550f0381d51feab81dedfec6c46/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=8053e5cdade87550f0381d51feab81dedfec6c46",
        "patch": "@@ -488,9 +488,6 @@ Relay and mine data carrier transactions (default: 1)\n Maximum size of data in data carrier transactions we relay and mine\n (default: 83)\n .HP\n-\\fB\\-mempoolreplacement\\fR\n-.IP\n-Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP"
      },
      {
        "sha": "2a79b6cb4640ffe31f8776237285251311639377",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8053e5cdade87550f0381d51feab81dedfec6c46/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8053e5cdade87550f0381d51feab81dedfec6c46/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=8053e5cdade87550f0381d51feab81dedfec6c46",
        "patch": "@@ -488,10 +488,6 @@ Relay and mine data carrier transactions (default: 1)\n Maximum size of data in data carrier transactions we relay and mine\n (default: 83)\n .HP\n-\\fB\\-mempoolreplacement\\fR\n-.IP\n-Enable transaction replacement in the memory pool (default: 1)\n-.HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n Fees (in BTC/kB) smaller than this are considered zero fee for relaying,"
      },
      {
        "sha": "34f8f9b33ded265fe6ed4b123f1d4278a9846b1f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8053e5cdade87550f0381d51feab81dedfec6c46/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8053e5cdade87550f0381d51feab81dedfec6c46/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8053e5cdade87550f0381d51feab81dedfec6c46",
        "patch": "@@ -524,7 +524,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-mempoolreplacement\", strprintf(\"Enable transaction replacement in the memory pool (default: %u)\", DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n@@ -1176,15 +1175,6 @@ bool AppInitParameterInteraction()\n \n     nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n-    fEnableReplacement = gArgs.GetBoolArg(\"-mempoolreplacement\", DEFAULT_ENABLE_REPLACEMENT);\n-    if ((!fEnableReplacement) && gArgs.IsArgSet(\"-mempoolreplacement\")) {\n-        // Minimal effort at forwards compatibility\n-        std::string strReplacementModeList = gArgs.GetArg(\"-mempoolreplacement\", \"\");  // default is impossible\n-        std::vector<std::string> vstrReplacementModes;\n-        boost::split(vstrReplacementModes, strReplacementModeList, boost::is_any_of(\",\"));\n-        fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n-    }\n-\n     return true;\n }\n "
      },
      {
        "sha": "3026df34fe346c281303fbf2d53fb501f9a651aa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8053e5cdade87550f0381d51feab81dedfec6c46/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8053e5cdade87550f0381d51feab81dedfec6c46/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8053e5cdade87550f0381d51feab81dedfec6c46",
        "patch": "@@ -111,7 +111,6 @@ bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n-bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n uint256 hashAssumeValid;\n arith_uint256 nMinimumChainWork;\n@@ -486,15 +485,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 // unconfirmed ancestors anyway; doing otherwise is hopelessly\n                 // insecure.\n                 bool fReplacementOptOut = true;\n-                if (fEnableReplacement)\n+                for (const CTxIn &_txin : ptxConflicting->vin)\n                 {\n-                    for (const CTxIn &_txin : ptxConflicting->vin)\n+                    if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE)\n                     {\n-                        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE)\n-                        {\n-                            fReplacementOptOut = false;\n-                            break;\n-                        }\n+                        fReplacementOptOut = false;\n+                        break;\n                     }\n                 }\n                 if (fReplacementOptOut) {"
      },
      {
        "sha": "638229952d5d04848d7c1feefb5c7a7e8079fe1a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8053e5cdade87550f0381d51feab81dedfec6c46/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8053e5cdade87550f0381d51feab81dedfec6c46/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8053e5cdade87550f0381d51feab81dedfec6c46",
        "patch": "@@ -116,8 +116,6 @@ static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n-/** Default for -mempoolreplacement */\n-static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n /** Default for using fee filter */\n static const bool DEFAULT_FEEFILTER = true;\n \n@@ -160,7 +158,6 @@ extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n-extern bool fEnableReplacement;\n \n /** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n extern uint256 hashAssumeValid;"
      },
      {
        "sha": "1496c5d95898b080cdbbaa6c7643b3e2e3fe1799",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8053e5cdade87550f0381d51feab81dedfec6c46/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8053e5cdade87550f0381d51feab81dedfec6c46/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=8053e5cdade87550f0381d51feab81dedfec6c46",
        "patch": "@@ -64,7 +64,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 2\n+        self.num_nodes = 1\n         self.extra_args = [\n             [\n                 \"-maxorphantx=1000\",\n@@ -74,9 +74,6 @@ def set_test_params(self):\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n             ],\n-            [\n-                \"-mempoolreplacement=0\",\n-            ],\n         ]\n \n     def skip_test_if_missing_module(self):\n@@ -148,16 +145,12 @@ def test_simple_doublespend(self):\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n-        # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, 0)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9 * COIN), CScript([b'b' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n-        # Replacement still disabled even with \"enough fee\"\n-        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, 0)\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n@@ -168,11 +161,6 @@ def test_simple_doublespend(self):\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n-        # Second node is running mempoolreplacement=0, will not replace originally-seen txn\n-        mempool = self.nodes[1].getrawmempool()\n-        assert tx1a_txid in mempool\n-        assert tx1b_txid not in mempool\n-\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n "
      }
    ]
  }
]