[
  {
    "sha": "11dbd1a46532b02c3e16758bcda9aba396ccec6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWRiZDFhNDY1MzJiMDJjM2UxNjc1OGJjZGE5YWJhMzk2Y2NlYzZh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-11-07T03:47:02Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-10-29T02:06:48Z"
      },
      "message": "util: Support prepending configs in ReadConfigStream",
      "tree": {
        "sha": "17c3b67208827b07eb1b8ec84ad17cf5348c6d5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17c3b67208827b07eb1b8ec84ad17cf5348c6d5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11dbd1a46532b02c3e16758bcda9aba396ccec6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11dbd1a46532b02c3e16758bcda9aba396ccec6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11dbd1a46532b02c3e16758bcda9aba396ccec6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11dbd1a46532b02c3e16758bcda9aba396ccec6a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c1090c882ea15ba4d10a2f7f320f3c0eb490ebd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c1090c882ea15ba4d10a2f7f320f3c0eb490ebd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c1090c882ea15ba4d10a2f7f320f3c0eb490ebd"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 25,
      "deletions": 7
    },
    "files": [
      {
        "sha": "71cdeac477fd94cb1161b263173451df6b88278b",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11dbd1a46532b02c3e16758bcda9aba396ccec6a/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11dbd1a46532b02c3e16758bcda9aba396ccec6a/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=11dbd1a46532b02c3e16758bcda9aba396ccec6a",
        "patch": "@@ -280,11 +280,13 @@ class ArgsManagerHelper {\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n+ *\n+ * If offsets is provided, options are being prepended.\n  */\n \n NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned int flags,\n                                       std::map<std::string, std::vector<std::string>>& args,\n-                                      std::string& error)\n+                                      std::string& error, std::map<std::string, size_t>* offsets)\n {\n     assert(key[0] == '-');\n \n@@ -298,7 +300,16 @@ NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned\n         key.erase(option_index, 2);\n         if (flags & ArgsManager::ALLOW_BOOL) {\n             if (InterpretBool(val)) {\n-                args[key].clear();\n+                auto& opt_values = args[key];\n+                if (offsets) {\n+                    // only clear entries created by this config file\n+                    if (offsets->count(key)) {\n+                        opt_values.erase(opt_values.begin(), opt_values.begin() + offsets->at(key));\n+                        offsets->erase(key);\n+                    }\n+                } else {\n+                    opt_values.clear();\n+                }\n                 return true;\n             }\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n@@ -309,7 +320,13 @@ NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned\n             return false;\n         }\n     }\n-    args[key].push_back(val);\n+    auto& opt_values = args[key];\n+    if (offsets) {\n+        opt_values.insert(opt_values.begin() + (*offsets)[key], val);\n+        ++(*offsets)[key];\n+    } else {\n+        opt_values.push_back(val);\n+    }\n     return true;\n }\n \n@@ -410,7 +427,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n \n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!InterpretOption(key, val, flags, m_override_args, error, nullptr)) {\n                 return false;\n             }\n         } else {\n@@ -852,18 +869,19 @@ static bool GetConfigOptions(std::istream& stream, const std::string& filepath,\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys, bool prepend)\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n     if (!GetConfigOptions(stream, filepath, error, options, m_config_sections)) {\n         return false;\n     }\n+    std::map<std::string, size_t> offsets;\n     for (const std::pair<std::string, std::string>& option : options) {\n         const std::string strKey = std::string(\"-\") + option.first;\n         const unsigned int flags = FlagsOfKnownArg(strKey);\n         if (flags) {\n-            if (!InterpretOption(strKey, option.second, flags, m_config_args, error)) {\n+            if (!InterpretOption(strKey, option.second, flags, m_config_args, error, prepend ? &offsets : nullptr)) {\n                 return false;\n             }\n         } else {"
      },
      {
        "sha": "a1f19c8556243c6d8563b789e1ce1ae8f5b73f27",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11dbd1a46532b02c3e16758bcda9aba396ccec6a/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11dbd1a46532b02c3e16758bcda9aba396ccec6a/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=11dbd1a46532b02c3e16758bcda9aba396ccec6a",
        "patch": "@@ -164,7 +164,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false, bool prepend = false);\n \n public:\n     ArgsManager();"
      }
    ]
  },
  {
    "sha": "bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWY4ZThlZmY2MTc0NzJjZTcyMzZkNjFiNWZkM2YyOTUyZmFhN2Nh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-11-07T07:38:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-10-29T02:06:48Z"
      },
      "message": "util: SelectBaseParams in ReadConfigFiles, before getting final datadir",
      "tree": {
        "sha": "d8f6cf4bef022dae997bb222d5ad4ee006a3905d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8f6cf4bef022dae997bb222d5ad4ee006a3905d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef8e8eff617472ce7236d61b5fd3f2952faa7ca/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11dbd1a46532b02c3e16758bcda9aba396ccec6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11dbd1a46532b02c3e16758bcda9aba396ccec6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11dbd1a46532b02c3e16758bcda9aba396ccec6a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6209734b7131a0ec44964c9b54e3537967c0a74e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bef8e8eff617472ce7236d61b5fd3f2952faa7ca/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bef8e8eff617472ce7236d61b5fd3f2952faa7ca/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
        "patch": "@@ -134,13 +134,6 @@ static int AppInitRPC(int argc, char* argv[])\n         tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n-    // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n-    try {\n-        SelectBaseParams(gArgs.GetChainName());\n-    } catch (const std::exception& e) {\n-        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n-        return EXIT_FAILURE;\n-    }\n     return CONTINUE_EXECUTION;\n }\n "
      },
      {
        "sha": "1522cd990c2da3f852148e86ded1d8359d033a1e",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bef8e8eff617472ce7236d61b5fd3f2952faa7ca/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bef8e8eff617472ce7236d61b5fd3f2952faa7ca/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
        "patch": "@@ -968,6 +968,14 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         }\n     }\n \n+    // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    try {\n+        SelectBaseParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        error = e.what();\n+        return false;\n+    }\n+\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!CheckDataDirOption()) {"
      }
    ]
  },
  {
    "sha": "33df12917faa29473fc18850a811ac5b1ecee330",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2RmMTI5MTdmYWEyOTQ3M2ZjMTg4NTBhODExYWM1YjFlY2VlMzMw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-11-07T07:44:20Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-10-29T02:06:48Z"
      },
      "message": "util: ReadConfigFiles flag to make everything network-specific",
      "tree": {
        "sha": "993c4e29aaad7facf9cd458f464ba5e5624e21bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/993c4e29aaad7facf9cd458f464ba5e5624e21bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33df12917faa29473fc18850a811ac5b1ecee330",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33df12917faa29473fc18850a811ac5b1ecee330",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33df12917faa29473fc18850a811ac5b1ecee330",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33df12917faa29473fc18850a811ac5b1ecee330/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef8e8eff617472ce7236d61b5fd3f2952faa7ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bef8e8eff617472ce7236d61b5fd3f2952faa7ca"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "65d82e4a2484eefcdf72d55a9d936bc40b871755",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33df12917faa29473fc18850a811ac5b1ecee330/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33df12917faa29473fc18850a811ac5b1ecee330/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=33df12917faa29473fc18850a811ac5b1ecee330",
        "patch": "@@ -869,7 +869,7 @@ static bool GetConfigOptions(std::istream& stream, const std::string& filepath,\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys, bool prepend)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys, bool prepend, bool make_net_specific)\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n@@ -878,7 +878,12 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     }\n     std::map<std::string, size_t> offsets;\n     for (const std::pair<std::string, std::string>& option : options) {\n-        const std::string strKey = std::string(\"-\") + option.first;\n+        std::string strKey = std::string(\"-\") + option.first;\n+\n+        if (make_net_specific) {\n+            strKey = ArgsManagerHelper::NetworkArg(*this, strKey);\n+        }\n+\n         const unsigned int flags = FlagsOfKnownArg(strKey);\n         if (flags) {\n             if (!InterpretOption(strKey, option.second, flags, m_config_args, error, prepend ? &offsets : nullptr)) {"
      },
      {
        "sha": "68989b04671847c528abe1423fc0a6225025f327",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33df12917faa29473fc18850a811ac5b1ecee330/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33df12917faa29473fc18850a811ac5b1ecee330/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=33df12917faa29473fc18850a811ac5b1ecee330",
        "patch": "@@ -164,7 +164,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false, bool prepend = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false, bool prepend = false, bool make_net_specific = false);\n \n public:\n     ArgsManager();"
      }
    ]
  },
  {
    "sha": "956a76cc852493fdf117f2293bacf4b717d38d38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTZhNzZjYzg1MjQ5M2ZkZjExN2YyMjkzYmFjZjRiNzE3ZDM4ZDM4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-02-11T04:28:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-10-29T02:07:32Z"
      },
      "message": "Add new bitcoin_rw.conf file that is used for settings modified by this software itself",
      "tree": {
        "sha": "17ee922b1abf43f5314d9494b33802fe69a9ab3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17ee922b1abf43f5314d9494b33802fe69a9ab3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/956a76cc852493fdf117f2293bacf4b717d38d38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/956a76cc852493fdf117f2293bacf4b717d38d38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/956a76cc852493fdf117f2293bacf4b717d38d38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/956a76cc852493fdf117f2293bacf4b717d38d38/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33df12917faa29473fc18850a811ac5b1ecee330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33df12917faa29473fc18850a811ac5b1ecee330",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33df12917faa29473fc18850a811ac5b1ecee330"
      }
    ],
    "stats": {
      "total": 423,
      "additions": 423,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e5463986a8bcaba13219877da5f06d500fc71fc7",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -51,6 +51,7 @@ Subdirectory       | File(s)               | Description\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, a wallet resides in the data directory\n `./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n `./`               | `bitcoin.conf`        | Contains [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`; can be specified by `-conf` option\n+`./`               | `bitcoin_rw.conf`     | Contains [configuration settings](bitcoin-conf.md) modified by `bitcoind` or `bitcoin-qt`; can be specified by `-confrw` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option\n `./`               | `fee_estimates.dat`   | Stores statistics used to estimate minimum transaction fees and priorities required for confirmation"
      },
      {
        "sha": "d24e082851ce46a7afa0092fab562f1745fe776a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -45,6 +45,7 @@ static void SetupCliArgs()\n \n     gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-confrw=<file>\", strprintf(\"Specify read/write configuration file. Relative paths will be prefixed by the network-specific datadir location. (default: %s)\", BITCOIN_RW_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();"
      },
      {
        "sha": "a32041204c6d7e1cbf4c29187151eb0e7878f0a8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -368,6 +368,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet, RPC and relay whitelisted inbound peers are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-confrw=<file>\", strprintf(\"Specify read/write configuration file. Relative paths will be prefixed by the network-specific datadir location. (default: %s)\", BITCOIN_RW_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -1244,6 +1245,15 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n     }\n \n+    fs::path rwconfig_file_path = GetRWConfigFile(gArgs.GetArg(\"-confrw\", BITCOIN_RW_CONF_FILENAME));\n+    if (fs::exists(rwconfig_file_path)) {\n+        LogPrintf(\"R/W Config file: %s\\n\", rwconfig_file_path.string());\n+    } else if (gArgs.IsArgSet(\"-confrw\")) {\n+        InitWarning(strprintf(_(\"The specified R/W config file %s does not exist\\n\").translated, rwconfig_file_path.string()));\n+    } else {\n+        LogPrintf(\"R/W Config file: %s (not found, skipping)\\n\", rwconfig_file_path.string());\n+    }\n+\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path."
      },
      {
        "sha": "c9721013022df624b8459a70707ed43ca9fb3f55",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -185,6 +185,9 @@ void OptionsModel::Reset()\n     QString dataDir = GUIUtil::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n+    // Remove rw config file\n+    gArgs.EraseRWConfigFile();\n+\n     // Remove all entries from our QSettings object\n     settings.clear();\n "
      },
      {
        "sha": "4d92dfab5ddb16ef30cc13c45c1d1d0b303271d8",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -5,6 +5,7 @@\n #include <qt/test/apptests.h>\n \n #include <chainparams.h>\n+#include <interfaces/node.h>\n #include <key.h>\n #include <qt/bitcoin.h>\n #include <qt/bitcoingui.h>\n@@ -66,6 +67,15 @@ void AppTests::appTests()\n     ECC_Stop(); // Already started by the common test setup, so stop it to avoid interference\n     LogInstance().DisconnectTestLogger();\n \n+    {\n+        // Need to ensure datadir is setup so resetting settings can delete the non-existent bitcoin_rw.conf\n+        auto node = interfaces::MakeNode();\n+        std::string error;\n+        if (!node->readConfigFiles(error)) {\n+            QWARN(\"Error in readConfigFiles\");\n+        }\n+    }\n+\n     m_app.parameterSetup();\n     m_app.createOptionsModel(true /* reset settings */);\n     QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));"
      },
      {
        "sha": "7e17d4b5331114f8677b3551fd3e4a7531828c6e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -1828,4 +1828,157 @@ BOOST_AUTO_TEST_CASE(test_tracked_vector)\n     BOOST_CHECK_EQUAL(v8[2].copies, 0);\n }\n \n+static std::string CheckModifyRWConfigFile(std::map<std::string, std::string>& settings_to_change, const std::string& current_config_file)\n+{\n+    std::istringstream stream_in(current_config_file);\n+    std::ostringstream stream_out;\n+    try {\n+        ModifyRWConfigStream(stream_in, stream_out, settings_to_change);\n+    } catch (...) {\n+        settings_to_change.clear();\n+        throw;\n+    }\n+    settings_to_change.clear();\n+    return stream_out.str();\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_ModifyRWConfigFile)\n+{\n+    std::map<std::string, std::string> cs;\n+\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\"), \"a=b\");\n+\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\"), \"a=c\");\n+    BOOST_CHECK(cs.empty());\n+\n+    // Multi-char name/value\n+    cs[\"ab\"] = \"cd\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"ab=bc\"), \"ab=cd\");\n+\n+    // Preserved final newline\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\"), \"a=b\\n\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\"), \"a=c\\n\");\n+\n+    // Preserved final tab\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t\"), \"a=b\\t\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t\"), \"a=c\\t\");\n+\n+    // Preserved final space\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b \"), \"a=b \");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b \"), \"a=c \");\n+\n+    // Preserved final crnl\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\r\\n\"), \"a=b\\r\\n\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\r\\n\"), \"a=c\\r\\n\");\n+\n+    // Empty file\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"\"), \"a=c\\n\");\n+\n+    // Ignore k=v in comment\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"#a=b\"), \"#a=b\\na=c\\n\");\n+\n+    // Preserved comment\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t# c\"), \"a=b\\t# c\");\n+\n+    // Commented out commented value\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t# c\"), \"a=c\\n#a=b\\t# c\");\n+\n+    // Preserved whitespace before name\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \" \\t \\ta=b\"), \" \\t \\ta=b\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \" \\t \\ta=b\"), \" \\t \\ta=c\");\n+\n+    // Preserved whitespace after name\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a \\t \\t=b\"), \"a \\t \\t=b\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a \\t \\t=b\"), \"a \\t \\t=c\");\n+\n+    // Preserved whitespace before value\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a= \\t \\tb\"), \"a= \\t \\tb\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a= \\t \\tb\"), \"a= \\t \\tc\");\n+\n+    // Modifying value between others\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=bc\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=x\\nd=e\");\n+\n+    // Blank key/value\n+    cs[\"ab\"] = \"\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=\\nd=e\");\n+    cs[\"\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=bc\\nd=e\\n=x\\n\");\n+\n+    // Blank line in source\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\nab=bc\\n\\nd=e\"), \"a=b\\n\\nab=bc\\n\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\nab=bc\\n\\nd=e\"), \"a=b\\n\\nab=x\\n\\nd=e\");\n+\n+    // Duplicate keys in the source\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nf=x\\nab=zx\\nd=e\"), \"a=b\\nab=bc\\nf=x\\nab=zx\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nf=x\\nab=zx\\nd=e\"), \"a=b\\nab=x\\nf=x\\nab=zx\\nd=e\");\n+\n+    // Comment out entire file if invalid input line\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nGARBAGE\\nd=e\"), \"[INVALID]\\n# Error parsing line 3: GARBAGE\\n#a=b\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nGARBAGE\\nd=e\"), \"ab=x\\n[INVALID]\\n# Error parsing line 3: GARBAGE\\n#a=b\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nGARBAGE\\nd=e\\n\"), \"ab=x\\n[INVALID]\\n# Error parsing line 3: GARBAGE\\n#a=b\\n#ab=bc\\n#GARBAGE\\n#d=e\\n\");\n+\n+    // Whitespace inside values\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=b\\t \\t c\\nd=e\"), \"a=b\\nab=b\\t \\t c\\nd=e\");\n+    cs[\"ab\"] = \"x \\t \\tx\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=b\\t \\t c\\nd=e\"), \"a=b\\nab=x \\t \\tx\\nd=e\");\n+\n+    // Newline inside name/value\n+    cs[\"a\"] = \"x\\nx\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"x\\rx\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\\nb\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\\rb\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+\n+    // Whitespace leading/trailing name/value\n+    cs[\"a\"] = \" x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"\\tx\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\" a\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"\\ta\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"x \";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"x\\t\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a \"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\\t\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+\n+    // Ignore groups\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nd=e\"), \"a=b\\n[group]\\nab=bc\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nd=e\"), \"a=b\\nab=x\\n[group]\\nab=bc\\nd=e\");\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\t [group] \\t#c\\nab=bc\\nd=e\"), \"a=b\\n\\t [group] \\t#c\\nab=bc\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\t [group] \\t#c\\nab=bc\\nd=e\"), \"a=b\\nab=x\\n\\t [group] \\t#c\\nab=bc\\nd=e\");\n+\n+    // Comment out entire file if invalid input line, even after a group\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nGARBAGE\\nd=e\"), \"[INVALID]\\n# Error parsing line 4: GARBAGE\\n#a=b\\n#[group]\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nGARBAGE\\nd=e\"), \"ab=x\\n[INVALID]\\n# Error parsing line 4: GARBAGE\\n#a=b\\n#[group]\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "be3b32df864edb49d754d4c944c7a2df68b6c281",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 234,
        "deletions": 0,
        "changes": 234,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -62,12 +62,15 @@\n #include <malloc.h>\n #endif\n \n+#include <string>\n #include <thread>\n+#include <unordered_set>\n \n // Application startup time (used for uptime calculation)\n const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_RW_CONF_FILENAME = \"bitcoin_rw.conf\";\n \n ArgsManager gArgs;\n \n@@ -814,6 +817,11 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n+fs::path GetRWConfigFile(const std::string& confPath)\n+{\n+    return AbsPathForConfigVal(fs::path(confPath));\n+}\n+\n static std::string TrimString(const std::string& str, const std::string& pattern)\n {\n     std::string::size_type front = str.find_first_not_of(pattern);\n@@ -987,6 +995,19 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\"));\n         return false;\n     }\n+\n+    const std::string rwconf_path_str = GetArg(\"-confrw\", BITCOIN_RW_CONF_FILENAME);\n+    LOCK(csPathCached);  // HACK for lock ordering\n+    LOCK(cs_args);\n+    rwconf_path = GetRWConfigFile(rwconf_path_str);\n+    fs::ifstream rwconf_stream(rwconf_path);\n+    if (rwconf_stream.good()) {\n+        // confrw gets prepended before conf settings, and is always network-specific (it's in the network-specific datadir)\n+        if (!ReadConfigStream(rwconf_stream, rwconf_path_str, error, ignore_invalid_keys, true, true)) {\n+            return false;\n+        }\n+    }\n+\n     return true;\n }\n \n@@ -1007,6 +1028,219 @@ std::string ArgsManager::GetChainName() const\n     return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    bool getline_with_eol(std::istream& stream, std::string& result)\n+    {\n+        int current_char;\n+        current_char = stream.get();\n+        if (current_char == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        result.clear();\n+        result.push_back(char(current_char));\n+        while (current_char != '\\n') {\n+            current_char = stream.get();\n+            if (current_char == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            result.push_back(char(current_char));\n+        }\n+        return true;\n+    }\n+\n+    const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& setting_pair : settings_to_change) {\n+            const std::string& key = setting_pair.first;\n+            const std::string& val = setting_pair.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+} // namespace\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true;\n+    std::map<std::string, std::string>::const_iterator iterCS;\n+    size_t lineno = 0;\n+    while (getline_with_eol(stream_in, s)) {\n+        ++lineno;\n+\n+        have_eof_nl = (!s.empty()) && (*s.rbegin() == '\\n');\n+        n = s.find('#');\n+        const bool has_comment = (n != std::string::npos);\n+        if (!has_comment) {\n+            n = s.size();\n+        }\n+        if (n > 0) {\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 != std::string::npos) {\n+                n = n2 + 1;\n+            }\n+        }\n+        n2 = s.find_first_not_of(ws_chars);\n+        if (n2 == std::string::npos || n2 >= n) {\n+            // Blank or comment-only line\n+            stream_out << s;\n+            continue;\n+        }\n+        lineend = s.substr(n);\n+        linebegin = s.substr(0, n2);\n+        s = s.substr(n2, n - n2);\n+\n+        // It is impossible for s to be empty here, due to the blank line check above\n+        if (*s.begin() == '[' && *s.rbegin() == ']') {\n+            // We don't use sections, so we could possibly just write out the rest of the file - but we need to check for unparsable lines, so we just set a flag to ignore settings from here on\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            inside_group = true;\n+            key.clear();\n+\n+            stream_out << linebegin << s << lineend;\n+            continue;\n+        }\n+\n+        n = s.find('=');\n+        if (n == std::string::npos) {\n+            // Bad line; this causes boost to throw an exception when parsing, so we comment out the entire file\n+            stream_in.seekg(0, std::ios_base::beg);\n+            stream_out.seekp(0, std::ios_base::beg);\n+            if (!(stream_in.good() && stream_out.good())) {\n+                throw std::ios_base::failure(\"Failed to rewind (to comment out existing file)\");\n+            }\n+            // First, write out all the settings we intend to set\n+            setFound.clear();\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            // We then define a category to ensure new settings get added before the invalid stuff\n+            stream_out << \"[INVALID]\\n\";\n+            // Then, describe the problem in a comment\n+            stream_out << \"# Error parsing line \" << lineno << \": \" << s << \"\\n\";\n+            // Finally, dump the rest of the file commented out\n+            while (getline_with_eol(stream_in, s)) {\n+                stream_out << \"#\" << s;\n+            }\n+            return;\n+        }\n+\n+        if (!inside_group) {\n+            // We don't support/use groups, so once we're inside key is always null to avoid setting anything\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 == std::string::npos) {\n+                n2 = n - 1;\n+            } else {\n+                ++n2;\n+            }\n+            key = s.substr(0, n2);\n+        }\n+        if ((!key.empty()) && (iterCS = settings_to_change.find(key)) != settings_to_change.end() && setFound.find(key) == setFound.end()) {\n+            // This is the key we want to change\n+            const std::string& val = iterCS->second;\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            if (has_comment) {\n+                // Rather than change a commented line, comment it out entirely (the existing comment may relate to the value) and replace it\n+                stream_out << key << \"=\" << val << \"\\n\";\n+                linebegin.insert(linebegin.begin(), '#');\n+            } else {\n+                // Just modify the value in-line otherwise\n+                n2 = s.find_first_not_of(ws_chars, n + 1);\n+                if (n2 == std::string::npos) {\n+                    n2 = n + 1;\n+                }\n+                s = s.substr(0, n2) + val;\n+            }\n+        }\n+        stream_out << linebegin << s << lineend;\n+    }\n+    if (setFound.size() < settings_to_change.size()) {\n+        if (!have_eof_nl) {\n+            stream_out << \"\\n\";\n+        }\n+        ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+    }\n+}\n+\n+void ArgsManager::ModifyRWConfigFile(const std::map<std::string, std::string>& settings_to_change)\n+{\n+    LOCK(cs_args);\n+    assert(!rwconf_path.empty());\n+    fs::path rwconf_new_path = rwconf_path;\n+    rwconf_new_path += \".new\";\n+    const std::string new_path_str = rwconf_new_path.string();\n+    try {\n+        std::remove(new_path_str.c_str());\n+        fs::ofstream streamRWConfigOut(rwconf_new_path, std::ios_base::out | std::ios_base::trunc);\n+        if (fs::exists(rwconf_path)) {\n+            fs::ifstream streamRWConfig(rwconf_path);\n+            ::ModifyRWConfigStream(streamRWConfig, streamRWConfigOut, settings_to_change);\n+        } else {\n+            std::istringstream streamIn;\n+            ::ModifyRWConfigStream(streamIn, streamRWConfigOut, settings_to_change);\n+        }\n+    } catch (...) {\n+        std::remove(new_path_str.c_str());\n+        throw;\n+    }\n+    if (!RenameOver(rwconf_new_path, rwconf_path)) {\n+        std::remove(new_path_str.c_str());\n+        throw std::ios_base::failure(strprintf(\"Failed to replace %s\", new_path_str));\n+    }\n+}\n+\n+void ArgsManager::ModifyRWConfigFile(const std::string& setting_to_change, const std::string& new_value)\n+{\n+    std::map<std::string, std::string> settings_to_change;\n+    settings_to_change[setting_to_change] = new_value;\n+    ModifyRWConfigFile(settings_to_change);\n+}\n+\n+void ArgsManager::EraseRWConfigFile()\n+{\n+    LOCK(cs_args);\n+    assert(!rwconf_path.empty());\n+    if (!fs::exists(rwconf_path)) {\n+        return;\n+    }\n+    fs::path rwconf_reset_path = rwconf_path;\n+    rwconf_reset_path += \".reset\";\n+    if (!RenameOver(rwconf_path, rwconf_reset_path)) {\n+        const std::string path_str = rwconf_path.string();\n+        if (std::remove(path_str.c_str())) {\n+            throw std::ios_base::failure(strprintf(\"Failed to remove %s\", path_str));\n+        }\n+    }\n+}\n+\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "455f006c917b1a0f57a268fca97518968ef52349",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/956a76cc852493fdf117f2293bacf4b717d38d38/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/956a76cc852493fdf117f2293bacf4b717d38d38/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=956a76cc852493fdf117f2293bacf4b717d38d38",
        "patch": "@@ -39,6 +39,7 @@\n int64_t GetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_RW_CONF_FILENAME;\n \n void SetupEnvironment();\n bool SetupNetworking();\n@@ -76,6 +77,7 @@ bool CheckDataDirOption();\n /** Tests only */\n void ClearDatadirCache();\n fs::path GetConfigFile(const std::string& confPath);\n+fs::path GetRWConfigFile(const std::string& confPath);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n@@ -127,6 +129,8 @@ struct SectionInfo\n     int m_line;\n };\n \n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change);\n+\n class ArgsManager\n {\n public:\n@@ -166,6 +170,9 @@ class ArgsManager\n \n     NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false, bool prepend = false, bool make_net_specific = false);\n \n+private:\n+    fs::path rwconf_path GUARDED_BY(cs_args);\n+\n public:\n     ArgsManager();\n \n@@ -177,6 +184,10 @@ class ArgsManager\n     NODISCARD bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     NODISCARD bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n+    void ModifyRWConfigFile(const std::map<std::string, std::string>& settings_to_change);\n+    void ModifyRWConfigFile(const std::string& setting_to_change, const std::string& new_value);\n+    void EraseRWConfigFile();\n+\n     /**\n      * Log warnings for options in m_section_only_args when\n      * they are specified in the default section but not overridden"
      }
    ]
  },
  {
    "sha": "31acbd16ecaecad03827c1d6bf8a61360212c089",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWFjYmQxNmVjYWVjYWQwMzgyN2MxZDZiZjhhNjEzNjAyMTJjMDg5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-14T08:57:58Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T09:44:40Z"
      },
      "message": "Add havePruned() to Node interface",
      "tree": {
        "sha": "6a794509d9eb96caa5aabcf5211b7bdfca69086b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a794509d9eb96caa5aabcf5211b7bdfca69086b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31acbd16ecaecad03827c1d6bf8a61360212c089",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl24CggACgkQV/+b28ww\nEAlUYw/7B64GeFU1Fh78jboDFwSf95L/He/Xe70W4JHkNK0g8cP93ODhkvH/0f4b\nPHirExzqBccdYtmFlG19UAOpLzRSk9qj3j18dYlbE4KaIDserrN8p+jx3eBuoSxa\nBLIZ54P2WYahaDKL4J6CYe2SA/DbbZFw2lqNs4udrHDI/xGzWj1kCiWehk3XX5iB\n2c5HEkgOQwN0k2i1gbrLchTgsT0L7tNMgC9oherBmnZ0w1DTDX2WXSOPWNiBI2US\nReXClnofC6FQBVzyJTUFyE+s8koIoMoSm2xw2KdhAt7f6NNf60RmSOOwmqMZtk4w\nCgEXcFDGjPQEvRRigSZm09ulHpbe9qncWVc4Qpy/i5sMVW3c1lRqDb47NLj3JICI\nvaj0JLQ1jqwaEHcsuJlnvrI7UHRe6oyrt4k7EaPP+/GRLK6LUy+Zn5PBKpcxhUh2\ngGlM4JrcPjJ4AsaW0nrVaTvVZydnqkfnF7QsqfSjEnysKV3EKcFVlw3+Re7fAtZD\nwb25GTZrYbxF7PKDopHk//Wb6hVhDznTDOWcE0HjIUAbzAid1cCdv3KA/7vsUiTa\nJbi2xwMpjfI8L4I9qxMv7gbp6TTDpzhgtC/l2GmXgnciTJ1OZjhB7DsQfMIwH7U9\nK7sZsmJy58Ov647uKzgvXnAm+D4CmOiL6btC8x/+tge+cw2S2zU=\n=WLur\n-----END PGP SIGNATURE-----",
        "payload": "tree 6a794509d9eb96caa5aabcf5211b7bdfca69086b\nparent 956a76cc852493fdf117f2293bacf4b717d38d38\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571043478 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1572342280 +0100\n\nAdd havePruned() to Node interface\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31acbd16ecaecad03827c1d6bf8a61360212c089",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31acbd16ecaecad03827c1d6bf8a61360212c089",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31acbd16ecaecad03827c1d6bf8a61360212c089/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "956a76cc852493fdf117f2293bacf4b717d38d38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/956a76cc852493fdf117f2293bacf4b717d38d38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/956a76cc852493fdf117f2293bacf4b717d38d38"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd2e9b5980b532c2439dad48e09a0ce3f71c9b2f",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31acbd16ecaecad03827c1d6bf8a61360212c089/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31acbd16ecaecad03827c1d6bf8a61360212c089/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=31acbd16ecaecad03827c1d6bf8a61360212c089",
        "patch": "@@ -197,6 +197,11 @@ class NodeImpl : public Node\n         }\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n+    bool havePruned() override\n+    {\n+        LOCK(cs_main);\n+        return ::fHavePruned;\n+    }\n     bool isInitialBlockDownload() override { return ::ChainstateActive().IsInitialBlockDownload(); }\n     bool getReindex() override { return ::fReindex; }\n     bool getImporting() override { return ::fImporting; }"
      },
      {
        "sha": "bd114ee89dddf62513fb1eda3d81bf0a07f380cb",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31acbd16ecaecad03827c1d6bf8a61360212c089/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31acbd16ecaecad03827c1d6bf8a61360212c089/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=31acbd16ecaecad03827c1d6bf8a61360212c089",
        "patch": "@@ -152,6 +152,9 @@ class Node\n     //! Get verification progress.\n     virtual double getVerificationProgress() = 0;\n \n+    //! Check if any block has been pruned.\n+    virtual bool havePruned() = 0;\n+\n     //! Is initial block download.\n     virtual bool isInitialBlockDownload() = 0;\n "
      }
    ]
  },
  {
    "sha": "14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGRlMmVlZThhMjM3MmE2ZWViOTgxODMxNDljNmRkZDFjOGI0Nzc2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-14T09:09:37Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T09:44:40Z"
      },
      "message": "[gui] settings: remove command line override label\n\naddOverriddenOption becomes an empty function to keep the diff simple, due to the many if statements without brackets. It will be removed in the next commit.",
      "tree": {
        "sha": "11294cd178e60e2cada40a2a91311d1d602eb19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11294cd178e60e2cada40a2a91311d1d602eb19c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl24CggACgkQV/+b28ww\nEAnc8RAAxsnn9IktqXSyGRFLWAO4f1tX7fJ7fDZ+e1YtHMNK1h1FdCDppnBW543p\n9IBO1UdNh0gY3GiSwwTXMjAa6lP9fo9njB4CbJwu69BWsWXKa6bRkbr6wmD1a7/v\npSdUqZKGDqxbMBjkW1/afDe2UVAb6iOKs+qOeseMPH6DhMfEPWLOsrUGnKxx0YUM\nPvqrsBymTjTUu/bqUVP8zqD6xI/2S2OSMKSZyCoaSBQ2p6k72T3/+QKJvsOJfisG\nyACZedcOrDWU/KtdjJtHwmb2sL8lhmrhdVLxf2BqF8GRxy9LzHAMp1p87A0g/OQs\nCTzcQuAh+Z0JTdQCWUxFXbHPj/z4l9r5jEw2brtmK6xFOHtzHuln5lv4rpDXXyF2\nTokXFUF5DWt2RW2M957uvchk+CtXFAa8k/xI7MD9mRrjNO5/2+hZJ9dzjK41FkpH\n5qCrYmUX0wp20C9wTWnv/rkz+olW67trn+ekUpeBi0c6MP+25pOvKFKbxeYdGybl\nwTIBp005aN6fCm3+mw5jpRA9w42BTEppHfwRbB2UNq+qlX3pTOt23xL2mRYMXWrA\nq+LJOu66gOiRUS0SFi1UHRoCdzSLHUa7jQl1Bf24NbPQYptbePQaDrTEf56yJGLt\nD0zCUdm5kLrJE4SM9p54O//tu0TUWtHoXP31pA6hkIEPbo7FZ7o=\n=Mz04\n-----END PGP SIGNATURE-----",
        "payload": "tree 11294cd178e60e2cada40a2a91311d1d602eb19c\nparent 31acbd16ecaecad03827c1d6bf8a61360212c089\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571044177 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1572342280 +0100\n\n[gui] settings: remove command line override label\n\naddOverriddenOption becomes an empty function to keep the diff simple, due to the many if statements without brackets. It will be removed in the next commit.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31acbd16ecaecad03827c1d6bf8a61360212c089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31acbd16ecaecad03827c1d6bf8a61360212c089",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31acbd16ecaecad03827c1d6bf8a61360212c089"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 0,
      "deletions": 60
    },
    "files": [
      {
        "sha": "abb56bd292efe3404635c152e9725f5d34289695",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
        "patch": "@@ -706,52 +706,6 @@\n      </widget>\n     </widget>\n    </item>\n-   <item>\n-    <widget class=\"QFrame\" name=\"frame\">\n-     <layout class=\"QVBoxLayout\" name=\"verticalLayout_Bottom\">\n-      <item>\n-       <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Bottom\">\n-        <item>\n-         <widget class=\"QLabel\" name=\"overriddenByCommandLineInfoLabel\">\n-          <property name=\"text\">\n-           <string>Options set in this dialog are overridden by the command line or in the configuration file:</string>\n-          </property>\n-          <property name=\"textFormat\">\n-           <enum>Qt::PlainText</enum>\n-          </property>\n-         </widget>\n-        </item>\n-        <item>\n-         <spacer name=\"horizontalSpacer_Bottom\">\n-          <property name=\"orientation\">\n-           <enum>Qt::Horizontal</enum>\n-          </property>\n-          <property name=\"sizeHint\" stdset=\"0\">\n-           <size>\n-            <width>40</width>\n-            <height>20</height>\n-           </size>\n-          </property>\n-         </spacer>\n-        </item>\n-       </layout>\n-      </item>\n-      <item>\n-       <widget class=\"QLabel\" name=\"overriddenByCommandLineLabel\">\n-        <property name=\"text\">\n-         <string/>\n-        </property>\n-        <property name=\"textFormat\">\n-         <enum>Qt::PlainText</enum>\n-        </property>\n-        <property name=\"wordWrap\">\n-         <bool>true</bool>\n-        </property>\n-       </widget>\n-      </item>\n-     </layout>\n-    </widget>\n-   </item>\n    <item>\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Buttons\">\n      <item>"
      },
      {
        "sha": "5f13444485399a6ab0a959aae973fa3b6cbd8d2b",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
        "patch": "@@ -154,15 +154,6 @@ void OptionsDialog::setModel(OptionsModel *_model)\n         if (_model->isRestartRequired())\n             showRestartWarning(true);\n \n-        // Prune values are in GB to be consistent with intro.cpp\n-        static constexpr uint64_t nMinDiskSpace = (MIN_DISK_SPACE_FOR_BLOCK_FILES / GB_BYTES) + (MIN_DISK_SPACE_FOR_BLOCK_FILES % GB_BYTES) ? 1 : 0;\n-        ui->pruneSize->setRange(nMinDiskSpace, std::numeric_limits<int>::max());\n-\n-        QString strLabel = _model->getOverriddenByCommandLine();\n-        if (strLabel.isEmpty())\n-            strLabel = tr(\"none\");\n-        ui->overriddenByCommandLineLabel->setText(strLabel);\n-\n         mapper->setModel(_model);\n         setMapper();\n         mapper->toFirst();"
      },
      {
        "sha": "99474c2e64d5886a5b3cea5d7a0de005db8f0a69",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
        "patch": "@@ -34,7 +34,6 @@ OptionsModel::OptionsModel(interfaces::Node& node, QObject *parent, bool resetSe\n \n void OptionsModel::addOverriddenOption(const std::string &option)\n {\n-    strOverriddenByCommandLine += QString::fromStdString(option) + \"=\" + QString::fromStdString(gArgs.GetArg(option, \"\")) + \" \";\n }\n \n // Writes all missing QSettings with their default values\n@@ -251,7 +250,6 @@ void OptionsModel::SetPrune(bool prune, bool force)\n         return;\n     }\n     if (!m_node.softSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n     }\n }\n "
      },
      {
        "sha": "f1d4c4a620e168b1f86e85f0a363bfaf62186184",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14de2eee8a2372a6eeb98183149c6ddd1c8b4776/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
        "patch": "@@ -70,7 +70,6 @@ class OptionsModel : public QAbstractListModel\n     int getDisplayUnit() const { return nDisplayUnit; }\n     QString getThirdPartyTxUrls() const { return strThirdPartyTxUrls; }\n     bool getCoinControlFeatures() const { return fCoinControlFeatures; }\n-    const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n \n     /* Explicit setters */\n     void SetPrune(bool prune, bool force = false);\n@@ -91,8 +90,6 @@ class OptionsModel : public QAbstractListModel\n     int nDisplayUnit;\n     QString strThirdPartyTxUrls;\n     bool fCoinControlFeatures;\n-    /* settings that were overridden by command-line */\n-    QString strOverriddenByCommandLine;\n \n     // Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);"
      }
    ]
  },
  {
    "sha": "b372aa546d3425254630d55938efa6ba9cd3f7f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzcyYWE1NDZkMzQyNTI1NDYzMGQ1NTkzOGVmYTZiYTljZDNmN2Yw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T13:43:38Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T13:44:04Z"
      },
      "message": "[wallet] move constants to walletconstants.h",
      "tree": {
        "sha": "3e3111d234d633a263364855b9b8700c85455387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e3111d234d633a263364855b9b8700c85455387"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b372aa546d3425254630d55938efa6ba9cd3f7f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b372aa546d3425254630d55938efa6ba9cd3f7f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b372aa546d3425254630d55938efa6ba9cd3f7f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b372aa546d3425254630d55938efa6ba9cd3f7f0/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14de2eee8a2372a6eeb98183149c6ddd1c8b4776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14de2eee8a2372a6eeb98183149c6ddd1c8b4776"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 49,
      "deletions": 40
    },
    "files": [
      {
        "sha": "de98f20066e8f5439963e78092745e1b4aa990a3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 40,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b372aa546d3425254630d55938efa6ba9cd3f7f0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b372aa546d3425254630d55938efa6ba9cd3f7f0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b372aa546d3425254630d55938efa6ba9cd3f7f0",
        "patch": "@@ -20,6 +20,7 @@\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletconstants.h>\n #include <wallet/walletutil.h>\n \n #include <algorithm>\n@@ -49,48 +50,8 @@ std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings);\n \n-enum class WalletCreationStatus {\n-    SUCCESS,\n-    CREATION_FAILED,\n-    ENCRYPTION_FAILED\n-};\n-\n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n-//! Default for -keypool\n-static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n-//! -paytxfee default\n-constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n-//! -fallbackfee default\n-static const CAmount DEFAULT_FALLBACK_FEE = 0;\n-//! -discardfee default\n-static const CAmount DEFAULT_DISCARD_FEE = 10000;\n-//! -mintxfee default\n-static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n-//! minimum recommended increment for BIP 125 replacement txs\n-static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n-//! Default for -spendzeroconfchange\n-static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n-//! Default for -walletrejectlongchains\n-static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n-//! Default for -avoidpartialspends\n-static const bool DEFAULT_AVOIDPARTIALSPENDS = false;\n-//! -txconfirmtarget default\n-static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n-//! -walletrbf default\n-static const bool DEFAULT_WALLET_RBF = false;\n-static const bool DEFAULT_WALLETBROADCAST = true;\n-static const bool DEFAULT_DISABLE_WALLET = false;\n-//! -maxtxfee default\n-constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n-//! Discourage users to set fees higher than this amount (in satoshis) per kB\n-constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n-//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n-constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n-\n-//! Pre-calculated constants for input size estimation in *virtual size*\n-static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n-\n class CCoinControl;\n class COutput;\n class CScript;"
      },
      {
        "sha": "171073ebb8e0e6ae73bbd374a321e23336fc2bbf",
        "filename": "src/wallet/walletconstants.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b372aa546d3425254630d55938efa6ba9cd3f7f0/src/wallet/walletconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b372aa546d3425254630d55938efa6ba9cd3f7f0/src/wallet/walletconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletconstants.h?ref=b372aa546d3425254630d55938efa6ba9cd3f7f0",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_WALLETCONSTANTS_H\n+#define BITCOIN_WALLET_WALLETCONSTANTS_H\n+\n+enum class WalletCreationStatus {\n+    SUCCESS,\n+    CREATION_FAILED,\n+    ENCRYPTION_FAILED\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+//! -paytxfee default\n+constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n+//! -fallbackfee default\n+static const CAmount DEFAULT_FALLBACK_FEE = 0;\n+//! -discardfee default\n+static const CAmount DEFAULT_DISCARD_FEE = 10000;\n+//! -mintxfee default\n+static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+//! minimum recommended increment for BIP 125 replacement txs\n+static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n+//! Default for -spendzeroconfchange\n+static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n+//! Default for -walletrejectlongchains\n+static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n+//! Default for -avoidpartialspends\n+static const bool DEFAULT_AVOIDPARTIALSPENDS = false;\n+//! -txconfirmtarget default\n+static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n+//! -walletrbf default\n+static const bool DEFAULT_WALLET_RBF = false;\n+static const bool DEFAULT_WALLETBROADCAST = true;\n+static const bool DEFAULT_DISABLE_WALLET = false;\n+//! -maxtxfee default\n+constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n+//! Discourage users to set fees higher than this amount (in satoshis) per kB\n+constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n+//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n+constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n+\n+//! Pre-calculated constants for input size estimation in *virtual size*\n+static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n+\n+#endif // BITCOIN_WALLET_WALLETCONSTANTS_H\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDMzZTFmMzM0MTRkNjliMWEyMGQ2NzRiMDliYjZmYjVkYjU5ZDIz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-14T09:11:13Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T13:44:04Z"
      },
      "message": "[qt] move QSettings to bitcoin_rw.conf where possible\n\nWhen QT launches, move the following QSettings to\nbitcoin_rw.conf:\n\n-lang (language)\n-dbcache (nDatabaseCache)\n-par (nThreadsScriptVerif)\n-prune (bPrune,nPruneSize)\n-spendzeroconfchange (bSpendZeroConfChange)\n-upnp (fUseUPnP)\n-listen (fListen)\n-proxy (fUseProxy)\n-onion (fUseSeparateProxyTor)\n\nDisabling pruning in the GUI now sets prune=1 if the chain is pruned, otherwise prune=0.",
      "tree": {
        "sha": "9a8035009fd830cbadbe9776290fdfd656fdd946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a8035009fd830cbadbe9776290fdfd656fdd946"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b372aa546d3425254630d55938efa6ba9cd3f7f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b372aa546d3425254630d55938efa6ba9cd3f7f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b372aa546d3425254630d55938efa6ba9cd3f7f0"
      }
    ],
    "stats": {
      "total": 321,
      "additions": 212,
      "deletions": 109
    },
    "files": [
      {
        "sha": "6334fce74067039191ebb34e0059b1e9224a1733",
        "filename": "doc/release-notes-12833.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/doc/release-notes-12833.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/doc/release-notes-12833.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-12833.md?ref=3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "patch": "@@ -0,0 +1,4 @@\n+GUI settings shared with daemon\n+------------------------------\n+\n+- The following GUI settings now also affect `bitcoind`: `-lang`, `-dbcache`, `-par`, `-prune`, `-spendzeroconfchange`, `-upnp`, `-listen`, `-proxy`, `-onion`. They are stored in `bitcoin_rw.conf`."
      },
      {
        "sha": "21676630bfb11c93a80848d9dcb9bbbc840c75d9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "patch": "@@ -790,7 +790,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n     }\n \n-    if (gArgs.IsArgSet(\"-proxy\")) {\n+    if (gArgs.GetArg(\"-proxy\", \"\") != \"\") {\n         // to protect privacy, do not listen by default if a default proxy server is specified\n         if (gArgs.SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);"
      },
      {
        "sha": "1fe1eca2e3765d7d351456aa8574fb7da15816b0",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "patch": "@@ -65,11 +65,12 @@ Q_DECLARE_METATYPE(uint256)\n \n static QString GetLangTerritory()\n {\n-    QSettings settings;\n     // Get desired locale (e.g. \"de_DE\")\n     // 1) System default language\n     QString lang_territory = QLocale::system().name();\n-    // 2) Language from QSettings\n+    // 2) Language from QSettings (DEPRECATED)\n+    // This method is called before QSetting \"language\" is migrated to config file.\n+    QSettings settings;\n     QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n     if(!lang_territory_qsettings.isEmpty())\n         lang_territory = lang_territory_qsettings;"
      },
      {
        "sha": "ccfe317d2a07f2fad97c5760514ccc78659c13e4",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 203,
        "deletions": 105,
        "changes": 308,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "patch": "@@ -14,6 +14,7 @@\n \n #include <interfaces/node.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/walletconstants.h>\n #include <net.h>\n #include <netbase.h>\n #include <txdb.h> // for -dbcache defaults\n@@ -32,10 +33,6 @@ OptionsModel::OptionsModel(interfaces::Node& node, QObject *parent, bool resetSe\n     Init(resetSettings);\n }\n \n-void OptionsModel::addOverriddenOption(const std::string &option)\n-{\n-}\n-\n // Writes all missing QSettings with their default values\n void OptionsModel::Init(bool resetSettings)\n {\n@@ -78,80 +75,13 @@ void OptionsModel::Init(bool resetSettings)\n         settings.setValue(\"fCoinControlFeatures\", false);\n     fCoinControlFeatures = settings.value(\"fCoinControlFeatures\", false).toBool();\n \n-    // These are shared with the core or have a command-line parameter\n-    // and we want command-line parameters to overwrite the GUI settings.\n-    //\n+    // These are shared with the core.\n     // If setting doesn't exist create it with defaults.\n-    //\n-    // If gArgs.SoftSetArg() or gArgs.SoftSetBoolArg() return false we were overridden\n-    // by command-line and show this in the UI.\n \n     // Main\n-    if (!settings.contains(\"bPrune\"))\n-        settings.setValue(\"bPrune\", false);\n-    if (!settings.contains(\"nPruneSize\"))\n-        settings.setValue(\"nPruneSize\", 2);\n-    SetPrune(settings.value(\"bPrune\").toBool());\n-\n-    if (!settings.contains(\"nDatabaseCache\"))\n-        settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n-    if (!m_node.softSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n-        addOverriddenOption(\"-dbcache\");\n-\n-    if (!settings.contains(\"nThreadsScriptVerif\"))\n-        settings.setValue(\"nThreadsScriptVerif\", DEFAULT_SCRIPTCHECK_THREADS);\n-    if (!m_node.softSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n-        addOverriddenOption(\"-par\");\n \n     if (!settings.contains(\"strDataDir\"))\n         settings.setValue(\"strDataDir\", GUIUtil::getDefaultDataDirectory());\n-\n-    // Wallet\n-#ifdef ENABLE_WALLET\n-    if (!settings.contains(\"bSpendZeroConfChange\"))\n-        settings.setValue(\"bSpendZeroConfChange\", true);\n-    if (!m_node.softSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n-        addOverriddenOption(\"-spendzeroconfchange\");\n-#endif\n-\n-    // Network\n-    if (!settings.contains(\"fUseUPnP\"))\n-        settings.setValue(\"fUseUPnP\", DEFAULT_UPNP);\n-    if (!m_node.softSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n-        addOverriddenOption(\"-upnp\");\n-\n-    if (!settings.contains(\"fListen\"))\n-        settings.setValue(\"fListen\", DEFAULT_LISTEN);\n-    if (!m_node.softSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n-        addOverriddenOption(\"-listen\");\n-\n-    if (!settings.contains(\"fUseProxy\"))\n-        settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\"))\n-        settings.setValue(\"addrProxy\", GetDefaultProxyAddress());\n-    // Only try to set -proxy, if user has enabled fUseProxy\n-    if (settings.value(\"fUseProxy\").toBool() && !m_node.softSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n-        addOverriddenOption(\"-proxy\");\n-    else if(!settings.value(\"fUseProxy\").toBool() && !gArgs.GetArg(\"-proxy\", \"\").empty())\n-        addOverriddenOption(\"-proxy\");\n-\n-    if (!settings.contains(\"fUseSeparateProxyTor\"))\n-        settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\"))\n-        settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n-    // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n-    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !m_node.softSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n-        addOverriddenOption(\"-onion\");\n-    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.GetArg(\"-onion\", \"\").empty())\n-        addOverriddenOption(\"-onion\");\n-\n-    // Display\n-    if (!settings.contains(\"language\"))\n-        settings.setValue(\"language\", \"\");\n-    if (!m_node.softSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n-        addOverriddenOption(\"-lang\");\n-\n-    language = settings.value(\"language\").toString();\n }\n \n /** Helper function to copy contents from one QSettings to another.\n@@ -249,13 +179,12 @@ void OptionsModel::SetPrune(bool prune, bool force)\n         m_node.forceSetArg(\"-prune\", prune_val);\n         return;\n     }\n-    if (!m_node.softSetArg(\"-prune\", prune_val)) {\n-    }\n }\n \n // read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n+    int64_t prune = -1;\n     if(role == Qt::EditRole)\n     {\n         QSettings settings;\n@@ -269,7 +198,7 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return fMinimizeToTray;\n         case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+            return gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP);\n #else\n             return false;\n #endif\n@@ -278,42 +207,51 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n \n         // default proxy\n         case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n+            return gArgs.GetArg(\"-proxy\", \"\") != \"\";\n         case ProxyIP:\n             return GetProxySetting(settings, \"addrProxy\").ip;\n         case ProxyPort:\n             return GetProxySetting(settings, \"addrProxy\").port;\n \n         // separate Tor proxy\n         case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n+            return gArgs.GetArg(\"-onion\", \"\") != \"\";\n         case ProxyIPTor:\n             return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n         case ProxyPortTor:\n             return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n \n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n+            return gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n #endif\n         case DisplayUnit:\n             return nDisplayUnit;\n         case ThirdPartyTxUrls:\n             return strThirdPartyTxUrls;\n         case Language:\n-            return settings.value(\"language\");\n+            return QString::fromStdString(gArgs.GetArg(\"-lang\", \"\"));\n         case CoinControlFeatures:\n             return fCoinControlFeatures;\n         case Prune:\n-            return settings.value(\"bPrune\");\n+            prune = gArgs.GetArg(\"-prune\", 0);\n+            // prune=0  is the default, prune=1 is set if the chain has actually been pruned\n+            return !(prune == 0 || prune == 1);\n         case PruneSize:\n-            return settings.value(\"nPruneSize\");\n+            prune = gArgs.GetArg(\"-prune\", 0);\n+            if (prune == 0 || prune == 1) {\n+              // When automatic pruning is disabled, fall back to settings in order to remember the last used value\n+              return settings.value(\"nPruneSize\");\n+            } else {\n+              return qlonglong(prune / 1000);\n+            }\n         case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n+            // (int64_t) is required for QT4\n+            return (qlonglong)gArgs.GetArg(\"-dbcache\", (qint64)nDefaultDbCache);\n         case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n+            return (qlonglong)gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n         case Listen:\n-            return settings.value(\"fListen\");\n+            return gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n         default:\n             return QVariant();\n         }\n@@ -325,6 +263,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n     bool successful = true; /* set to false on parse error */\n+    uint64_t prune = 0; // in GB\n+    uint64_t nPruneSizeMiB = 0;\n     if(role == Qt::EditRole)\n     {\n         QSettings settings;\n@@ -342,8 +282,11 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             fMinimizeToTray = value.toBool();\n             settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n             break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n+        case MapPortUPnP:\n+            if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP) != value) {\n+                gArgs.ModifyRWConfigFile(\"upnp\", value.toBool() ? \"1\" : \"0\");\n+                gArgs.ForceSetArg(\"-upnp\", value.toBool() ? \"1\" : \"0\");\n+            }\n             m_node.mapPort(value.toBool());\n             break;\n         case MinimizeOnClose:\n@@ -353,8 +296,16 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n \n         // default proxy\n         case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n+            if (value.toBool() ^ (gArgs.GetArg(\"-proxy\", \"\") != \"\")) {\n+                if (value.toBool()) {\n+                    // Turn on proxy\n+                    gArgs.ModifyRWConfigFile(\"proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+                    gArgs.ForceSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+                } else {\n+                    // Turn off proxy\n+                    gArgs.ModifyRWConfigFile(\"proxy\", \"\");\n+                    gArgs.ForceSetArg(\"-proxy\", \"\");\n+                }\n                 setRestartRequired(true);\n             }\n             break;\n@@ -363,6 +314,10 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             if (!ip_port.is_set || ip_port.ip != value.toString()) {\n                 ip_port.ip = value.toString();\n                 SetProxySetting(settings, \"addrProxy\", ip_port);\n+                if (gArgs.GetArg(\"-proxy\", \"\") != \"\") {\n+                    gArgs.ModifyRWConfigFile(\"proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+                    gArgs.ForceSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+                }\n                 setRestartRequired(true);\n             }\n         }\n@@ -372,15 +327,27 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             if (!ip_port.is_set || ip_port.port != value.toString()) {\n                 ip_port.port = value.toString();\n                 SetProxySetting(settings, \"addrProxy\", ip_port);\n+                if (gArgs.GetArg(\"-proxy\", \"\") != \"\") {\n+                    gArgs.ModifyRWConfigFile(\"proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+                    gArgs.ForceSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+                }\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n         // separate Tor proxy\n         case ProxyUseTor:\n-            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n-                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n+            if (value.toBool() ^ (gArgs.GetArg(\"-onion\", \"\") != \"\")) {\n+                if (value.toBool()) {\n+                    // Turn on proxy\n+                    gArgs.ModifyRWConfigFile(\"onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString());\n+                    gArgs.ForceSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString());\n+                } else {\n+                    // Turn off proxy\n+                    gArgs.ModifyRWConfigFile(\"onion\", \"\");\n+                    gArgs.ForceSetArg(\"-onion\", \"\");\n+                }\n                 setRestartRequired(true);\n             }\n             break;\n@@ -389,6 +356,10 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             if (!ip_port.is_set || ip_port.ip != value.toString()) {\n                 ip_port.ip = value.toString();\n                 SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+                if (gArgs.GetArg(\"-onion\", \"\") != \"\") {\n+                    gArgs.ModifyRWConfigFile(\"onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString());\n+                    gArgs.ForceSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString());\n+                }\n                 setRestartRequired(true);\n             }\n         }\n@@ -398,15 +369,20 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             if (!ip_port.is_set || ip_port.port != value.toString()) {\n                 ip_port.port = value.toString();\n                 SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+                if (gArgs.GetArg(\"-onion\", \"\") != \"\") {\n+                    gArgs.ModifyRWConfigFile(\"onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString());\n+                    gArgs.ForceSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString());\n+                }\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n-            if (settings.value(\"bSpendZeroConfChange\") != value) {\n-                settings.setValue(\"bSpendZeroConfChange\", value);\n+            if (gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE) != value) {\n+                gArgs.ModifyRWConfigFile(\"spendzeroconfchange\", value.toBool() ? \"1\" : \"0\");\n+                gArgs.ForceSetArg(\"-spendzeroconfchange\", value.toBool() ? \"1\" : \"0\");\n                 setRestartRequired(true);\n             }\n             break;\n@@ -422,8 +398,9 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case Language:\n-            if (settings.value(\"language\") != value) {\n-                settings.setValue(\"language\", value);\n+            if (gArgs.GetArg(\"-lang\", \"\") != value.toString().toStdString()) {\n+                gArgs.ModifyRWConfigFile(\"lang\", value.toString().toStdString());\n+                gArgs.ForceSetArg(\"-lang\", value.toString().toStdString());\n                 setRestartRequired(true);\n             }\n             break;\n@@ -433,32 +410,61 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n         case Prune:\n-            if (settings.value(\"bPrune\") != value) {\n-                settings.setValue(\"bPrune\", value);\n-                setRestartRequired(true);\n+            if (value.toBool()) {\n+              // When user enables pruning, store the prune size:\n+              nPruneSizeMiB = settings.value(\"nPruneSize\").toInt() * 1000;\n+              gArgs.ModifyRWConfigFile(\"prune\", std::to_string(nPruneSizeMiB));\n+              gArgs.ForceSetArg(\"-prune\", std::to_string(nPruneSizeMiB));\n+            } else {\n+              // When user disables pruning, set prune=1 and store last used prune\n+              // size in settings.\n+              nPruneSizeMiB = gArgs.GetArg(\"-prune\", (qint64)nDefaultDbCache);\n+              settings.setValue(\"nPruneSize\", qint64(nPruneSizeMiB / 1000));\n+              // Check if the chain has actually been pruned\n+              if (m_node.havePruned()) {\n+                  gArgs.ModifyRWConfigFile(\"prune\", \"1\");\n+                  gArgs.ForceSetArg(\"-prune\", \"1\");\n+              } else {\n+                  // This permits indexes like -txindex\n+                  gArgs.ModifyRWConfigFile(\"prune\", \"0\");\n+                  gArgs.ForceSetArg(\"-prune\", \"0\");\n+              }\n             }\n+            setRestartRequired(true);\n             break;\n         case PruneSize:\n-            if (settings.value(\"nPruneSize\") != value) {\n+            // Convert prune size to MiB:\n+            prune = gArgs.GetArg(\"-prune\", 0);\n+            nPruneSizeMiB = value.toInt() * 1000;\n+            if (uint64_t(gArgs.GetArg(\"-prune\", 0)) != nPruneSizeMiB) {\n+                // Don't update rw_conf is prune is disabled:\n+                if (!(prune == 0 || prune == 1)) {\n+                  gArgs.ModifyRWConfigFile(\"prune\", std::to_string(nPruneSizeMiB));\n+                  gArgs.ForceSetArg(\"-prune\", std::to_string(nPruneSizeMiB));\n+                  setRestartRequired(true);\n+                }\n+                // Always update the setting, in case user toggles Prune:\n                 settings.setValue(\"nPruneSize\", value);\n-                setRestartRequired(true);\n             }\n             break;\n         case DatabaseCache:\n-            if (settings.value(\"nDatabaseCache\") != value) {\n-                settings.setValue(\"nDatabaseCache\", value);\n+            if (gArgs.GetArg(\"-dbcache\", (qint64)nDefaultDbCache) != value.toLongLong()) {\n+                gArgs.ModifyRWConfigFile(\"dbcache\", value.toString().toStdString());\n+                gArgs.ForceSetArg(\"-dbcache\", value.toString().toStdString());\n                 setRestartRequired(true);\n             }\n             break;\n         case ThreadsScriptVerif:\n-            if (settings.value(\"nThreadsScriptVerif\") != value) {\n-                settings.setValue(\"nThreadsScriptVerif\", value);\n+            if (gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS) != value.toLongLong()) {\n+                gArgs.ModifyRWConfigFile(\"par\", value.toString().toStdString());\n+                gArgs.ForceSetArg(\"-par\", value.toString().toStdString());\n                 setRestartRequired(true);\n             }\n             break;\n         case Listen:\n-            if (settings.value(\"fListen\") != value) {\n-                settings.setValue(\"fListen\", value);\n+            if (gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN) != value) {\n+                gArgs.ModifyRWConfigFile(\"listen\", value.toBool() ? \"1\" : \"0\");\n+                gArgs.ForceSetArg(\"-listen\", value.toBool() ? \"1\" : \"0\");\n                 setRestartRequired(true);\n             }\n             break;\n@@ -525,4 +531,96 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Move the following QSettings to bitcoin_rw.conf, unless they are already set:\n+    if (!gArgs.IsArgSet(\"-lang\")) {\n+        QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n+        if (!lang_territory_qsettings.isEmpty()) {\n+            gArgs.ModifyRWConfigFile(\"lang\", lang_territory_qsettings.toStdString());\n+            // This is currently too late in the initialization process, so\n+            // GetLangTerritory() also checks QSettings.\n+            gArgs.ForceSetArg(\"-lang\", lang_territory_qsettings.toStdString());\n+            settings.remove(\"language\");\n+        }\n+    }\n+\n+    if (!gArgs.IsArgSet(\"-prune\")) {\n+        if (settings.contains(\"bPrune\") && settings.value(\"bPrune\").toBool()) {\n+            const uint64_t nPruneSizeMiB = settings.value(\"nPruneSize\").toInt() * 1000;\n+            gArgs.ModifyRWConfigFile(\"prune\", std::to_string(nPruneSizeMiB));\n+            gArgs.ForceSetArg(\"-prune\", std::to_string(nPruneSizeMiB));\n+            settings.remove(\"bPrune\");\n+            // Do not remove nPruneSize, because we need track this when the user\n+            // toggles the prune setting.\n+        }\n+    }\n+\n+    if (!gArgs.IsArgSet(\"-dbcache\")) {\n+        if (settings.contains(\"nDatabaseCache\") && settings.value(\"nDatabaseCache\") != (qint64)nDefaultDbCache) {\n+            gArgs.ModifyRWConfigFile(\"dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString());\n+            gArgs.ForceSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString());\n+            settings.remove(\"nDatabaseCache\");\n+        }\n+    }\n+\n+    if (!gArgs.IsArgSet(\"-par\")) {\n+        if (settings.contains(\"nThreadsScriptVerif\") && settings.value(\"nThreadsScriptVerif\") != DEFAULT_SCRIPTCHECK_THREADS) {\n+            gArgs.ModifyRWConfigFile(\"par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString());\n+            gArgs.ForceSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString());\n+            settings.remove(\"nThreadsScriptVerif\");\n+        }\n+    }\n+\n+    if (!gArgs.IsArgSet(\"-spendzeroconfchange\")) {\n+        const bool bSpendZeroConfChange = settings.value(\"bSpendZeroConfChange\").toBool();\n+        if (settings.contains(\"bSpendZeroConfChange\") && bSpendZeroConfChange != DEFAULT_SPEND_ZEROCONF_CHANGE) {\n+            gArgs.ModifyRWConfigFile(\"spendzeroconfchange\", bSpendZeroConfChange ? \"1\" : \"0\");\n+            gArgs.ForceSetArg(\"-spendzeroconfchange\", bSpendZeroConfChange ? \"1\" : \"0\");\n+            settings.remove(\"bSpendZeroConfChange\");\n+        }\n+    }\n+\n+    if (!gArgs.IsArgSet(\"-upnp\")) {\n+        const bool upnp = settings.value(\"fUseUPnP\").toBool();\n+        if (settings.contains(\"fUseUPnP\") && upnp != DEFAULT_UPNP) {\n+            gArgs.ModifyRWConfigFile(\"upnp\", upnp ? \"1\" : \"0\");\n+            gArgs.ForceSetArg(\"-upnp\", upnp ? \"1\" : \"0\");\n+            settings.remove(\"fUseUPnP\");\n+        }\n+    }\n+\n+    if (!gArgs.IsArgSet(\"-listen\")) {\n+        const bool listen = settings.value(\"fListen\").toBool();\n+        if (settings.contains(\"fListen\") && listen != DEFAULT_LISTEN) {\n+            gArgs.ModifyRWConfigFile(\"listen\", listen ? \"1\" : \"0\");\n+            gArgs.ForceSetArg(\"-listen\", listen ? \"1\" : \"0\");\n+            settings.remove(\"fListen\");\n+        }\n+    }\n+\n+    if (gArgs.GetArg(\"-proxy\", \"\") == \"\") {\n+        // If proxy is enabled for the GUI (fUseProxy), set -proxy\n+        // based on addrProxy.\n+        const bool fUseProxy = settings.value(\"fUseProxy\").toBool();\n+        if (settings.contains(\"fUseProxy\") && fUseProxy) {\n+            QString address_proxy = settings.value(\"addrProxy\", \"\").toString();\n+\n+            gArgs.ModifyRWConfigFile(\"proxy\", address_proxy.toStdString());\n+            gArgs.ForceSetArg(\"-proxy\", address_proxy.toStdString());\n+            settings.remove(\"fUseProxy\");\n+        }\n+    }\n+\n+    if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n+        // If Tor is enabled for the GUI (fUseSeparateProxyTor), set -onion\n+        // based on addrSeparateProxyTor.\n+        const bool fUseSeparateProxyTor = settings.value(\"fUseSeparateProxyTor\").toBool();\n+        if (settings.contains(\"fUseSeparateProxyTor\") && fUseSeparateProxyTor) {\n+            QString address_tor = settings.value(\"addrSeparateProxyTor\", \"\").toString();\n+\n+            gArgs.ModifyRWConfigFile(\"onion\", address_tor.toStdString());\n+            gArgs.ForceSetArg(\"-onion\", address_tor.toStdString());\n+            settings.remove(\"fUseSeparateProxyTor\");\n+        }\n+    }\n }"
      },
      {
        "sha": "10608060b5ae69075d23b653c16bf43296234e29",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d33e1f33414d69b1a20d674b09bb6fb5db59d23/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "patch": "@@ -272,7 +272,7 @@ class ArgsManager\n     bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n     // Forces an arg setting. Called by SoftSetArg() if the arg hasn't already\n-    // been set. Also called directly in testing.\n+    // been set. Also used in testing and when migrating from QTSettings.\n     void ForceSetArg(const std::string& strArg, const std::string& strValue);\n \n     /**"
      }
    ]
  },
  {
    "sha": "b9504728d40dcf3bd96ea65aba1fec7db91e57cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTUwNDcyOGQ0MGRjZjNiZDk2ZWE2NWFiYTFmZWM3ZGI5MWU1N2Nj",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-14T16:37:53Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T13:44:04Z"
      },
      "message": "[doc] clarify control flow in AppTests",
      "tree": {
        "sha": "3a143586d55ae26ce30b3a6ba671bc100a9cba62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a143586d55ae26ce30b3a6ba671bc100a9cba62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9504728d40dcf3bd96ea65aba1fec7db91e57cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9504728d40dcf3bd96ea65aba1fec7db91e57cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9504728d40dcf3bd96ea65aba1fec7db91e57cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9504728d40dcf3bd96ea65aba1fec7db91e57cc/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d33e1f33414d69b1a20d674b09bb6fb5db59d23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d33e1f33414d69b1a20d674b09bb6fb5db59d23"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "03d726072daa8abb32248d4e06f7686fdfbbc897",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9504728d40dcf3bd96ea65aba1fec7db91e57cc/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9504728d40dcf3bd96ea65aba1fec7db91e57cc/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=b9504728d40dcf3bd96ea65aba1fec7db91e57cc",
        "patch": "@@ -81,6 +81,7 @@ void AppTests::appTests()\n     QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));\n     m_app.setupPlatformStyle();\n     m_app.createWindow(style.data());\n+    // Call AppTests::guiTests() once application window is shown, then wait for callback\n     connect(&m_app, &BitcoinApplication::windowShown, this, &AppTests::guiTests);\n     expectCallback(\"guiTests\");\n     m_app.baseInitialize();\n@@ -98,6 +99,7 @@ void AppTests::appTests()\n void AppTests::guiTests(BitcoinGUI* window)\n {\n     HandleCallback callback{\"guiTests\", *this};\n+    // Call AppTests::consoleTests() once console is shown, then wait for callback\n     connect(window, &BitcoinGUI::consoleShown, this, &AppTests::consoleTests);\n     expectCallback(\"consoleTests\");\n     QAction* action = window->findChild<QAction*>(\"openRPCConsoleAction\");"
      },
      {
        "sha": "1296881c362d91d23ca692d4941b4358b9644f80",
        "filename": "src/qt/test/apptests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9504728d40dcf3bd96ea65aba1fec7db91e57cc/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9504728d40dcf3bd96ea65aba1fec7db91e57cc/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=b9504728d40dcf3bd96ea65aba1fec7db91e57cc",
        "patch": "@@ -18,6 +18,7 @@ class AppTests : public QObject\n {\n     Q_OBJECT\n public:\n+    //! Entry point for AppTests\n     explicit AppTests(BitcoinApplication& app) : m_app(app) {}\n \n private Q_SLOTS:"
      }
    ]
  }
]