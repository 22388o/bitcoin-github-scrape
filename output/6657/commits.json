[
  {
    "sha": "abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmRhZjgyMmRjZjkzYTQ5Y2Q0NjhmYmNkNDFiYzNhNTVlZTZlMjli",
    "commit": {
      "author": {
        "name": "Joseph W. Becher",
        "email": "drazisil@users.noreply.github.com",
        "date": "2015-08-17T20:02:34Z"
      },
      "committer": {
        "name": "Joseph W. Becher",
        "email": "drazisil@users.noreply.github.com",
        "date": "2015-08-17T20:02:34Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nupdate from origin",
      "tree": {
        "sha": "fdbab63e06f1470af0f2f3b68b81f62b28f23064",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdbab63e06f1470af0f2f3b68b81f62b28f23064"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/comments",
    "author": {
      "login": "drazisil",
      "id": 190986,
      "node_id": "MDQ6VXNlcjE5MDk4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/190986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drazisil",
      "html_url": "https://github.com/drazisil",
      "followers_url": "https://api.github.com/users/drazisil/followers",
      "following_url": "https://api.github.com/users/drazisil/following{/other_user}",
      "gists_url": "https://api.github.com/users/drazisil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drazisil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drazisil/subscriptions",
      "organizations_url": "https://api.github.com/users/drazisil/orgs",
      "repos_url": "https://api.github.com/users/drazisil/repos",
      "events_url": "https://api.github.com/users/drazisil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drazisil/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "drazisil",
      "id": 190986,
      "node_id": "MDQ6VXNlcjE5MDk4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/190986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drazisil",
      "html_url": "https://github.com/drazisil",
      "followers_url": "https://api.github.com/users/drazisil/followers",
      "following_url": "https://api.github.com/users/drazisil/following{/other_user}",
      "gists_url": "https://api.github.com/users/drazisil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drazisil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drazisil/subscriptions",
      "organizations_url": "https://api.github.com/users/drazisil/orgs",
      "repos_url": "https://api.github.com/users/drazisil/repos",
      "events_url": "https://api.github.com/users/drazisil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drazisil/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a"
      },
      {
        "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f"
      }
    ],
    "stats": {
      "total": 5281,
      "additions": 3675,
      "deletions": 1606
    },
    "files": [
      {
        "sha": "121e10bd379c1df7fa857ce60b8c49f8fc2494da",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 48,
        "deletions": 17,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -106,30 +106,31 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n-  CPPFLAGS=$QT_INCLUDES\n+  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n+      _BITCOIN_QT_FIND_STATIC_PLUGINS\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n-      fi\n-      if test x$use_pkgconfig = xyes; then\n-        PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n+      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+          [[#include <QtCore>]],[[\n+          #if QT_VERSION >= 0x050400\n+          choke;\n+          #endif\n+          ]])],\n+        [bitcoin_cv_need_acc_widget=yes],\n+        [bitcoin_cv_need_acc_widget=no])\n+      ])\n+      if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n+        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n       fi\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n-        PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n-        if test x$use_pkgconfig = xyes; then\n-          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n-        fi\n         AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n         AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n@@ -138,10 +139,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   else\n     if test x$TARGET_OS = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n-      fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([\n          Q_IMPORT_PLUGIN(qcncodecs)\n          Q_IMPORT_PLUGIN(qjpcodecs)\n@@ -281,6 +278,39 @@ AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n \n+dnl Internal. Find paths necessary for linking qt static plugins\n+dnl Inputs: bitcoin_qt_got_major_vers. 4 or 5.\n+dnl Inputs: qt_plugin_path. optional.\n+dnl Outputs: QT_LIBS is appended\n+AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n+      if test x$qt_plugin_path != x; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+        if test -d \"$qt_plugin_path/accessible\"; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+      fi\n+     m4_ifdef([PKG_CHECK_MODULES],[\n+     if test x$use_pkgconfig = xyes; then\n+       PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n+       if test x$TARGET_OS = xlinux; then\n+         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+         if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+         fi\n+       elif test x$TARGET_OS = xdarwin; then\n+         PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n+       fi\n+     fi\n+     ])\n+  else\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+    fi\n+  fi\n+])\n+\n dnl Internal. Find Qt libraries using pkg-config.\n dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to check\n dnl         first.\n@@ -382,7 +412,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([pcre16] ,[main],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))"
      },
      {
        "sha": "a524bded6fa3e386d958305c971858f7639fbebe",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -680,19 +680,26 @@ else\n   fi\n fi\n \n-AC_CHECK_LIB([crypto],[RAND_egd],[],[\n-  AC_ARG_WITH([libressl],\n-    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n-    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n-    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n-  )\n-])\n-\n CFLAGS_TEMP=\"$CFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n+\n+AC_MSG_CHECKING(for a supported OpenSSL version)\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+  #include <openssl/rand.h>\n+  ]],\n+  [[RAND_egd(NULL);]])],\n+  [AC_MSG_RESULT(yes)],\n+  [\n+    AC_ARG_WITH([libressl],\n+    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n+    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n+    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n+    )]\n+)\n+\n CFLAGS=\"$CFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n "
      },
      {
        "sha": "125594312bd8cf9d4fde61f3c4aa291ef2c88a9a",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,9 +1,6 @@\n Wallet Tools\n ---------------------\n \n-### [BitRPC](/contrib/bitrpc) ###\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n ### [SpendFrom](/contrib/spendfrom) ###\n \n Use the raw transactions API to send coins received on a particular"
      },
      {
        "sha": "f5ef2f0405a941e2c9ca8c4c1178a5a97a9d590e",
        "filename": "contrib/bitrpc/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/contrib/bitrpc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/contrib/bitrpc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/README.md?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -1,8 +0,0 @@\n-### BitRPC\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n-### Looking for Wallet Tools?\n-BitRPC.py is able to do the exact same thing as `walletchangepass.py` and `walletunlock.py`. Their respective commands in BitRPC.py are:\n-\n-\tbitrpc.py walletpassphrasechange\n-\tbitrpc.py walletpassphrase\n\\ No newline at end of file"
      },
      {
        "sha": "c3ce9d793625fc0b1318a9baf77b7f428cbe2062",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "removed",
        "additions": 0,
        "deletions": 335,
        "changes": 335,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -1,335 +0,0 @@\n-from jsonrpc import ServiceProxy\n-import sys\n-import string\n-import getpass\n-\n-# ===== BEGIN USER SETTINGS =====\n-# if you do not set these you will be prompted for a password for every command\n-rpcuser = \"\"\n-rpcpass = \"\"\n-# ====== END USER SETTINGS ======\n-\n-\n-if rpcpass == \"\":\n-    access = ServiceProxy(\"http://127.0.0.1:8332\")\n-else:\n-    access = ServiceProxy(\"http://\"+rpcuser+\":\"+rpcpass+\"@127.0.0.1:8332\")\n-cmd = sys.argv[1].lower()\n-\n-if cmd == \"backupwallet\":\n-    try:\n-        path = raw_input(\"Enter destination path/filename: \")\n-        print access.backupwallet(path)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"encryptwallet\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Repeat passphrase: \")\n-        if pwd == pwd2:\n-            access.encryptwallet(pwd)\n-            print \"\\n---Wallet encrypted. Server stopping, restart to run with encrypted wallet---\\n\"\n-        else:\n-            print \"\\n---Passphrases do not match---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccount\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address: \")\n-        print access.getaccount(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccountaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaccountaddress(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaddressesbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaddressesbyaccount(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getbalance\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getbalance(acct, mc)\n-        except:\n-            print access.getbalance()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockbycount\":\n-    try:\n-        height = raw_input(\"Height: \")\n-        print access.getblockbycount(height)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockcount\":\n-    try:\n-        print access.getblockcount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblocknumber\":\n-    try:\n-        print access.getblocknumber()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getconnectioncount\":\n-    try:\n-        print access.getconnectioncount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getdifficulty\":\n-    try:\n-        print access.getdifficulty()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getgenerate\":\n-    try:\n-        print access.getgenerate()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gethashespersec\":\n-    try:\n-        print access.gethashespersec()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getinfo\":\n-    try:\n-        print access.getinfo()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getnewaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        try:\n-            print access.getnewaddress(acct)\n-        except:\n-            print access.getnewaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaccount(acct, mc)\n-        except:\n-            print access.getreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaddress\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaddress(addr, mc)\n-        except:\n-            print access.getreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gettransaction\":\n-    try:\n-        txid = raw_input(\"Enter a transaction ID: \")\n-        print access.gettransaction(txid)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getwork\":\n-    try:\n-        data = raw_input(\"Data (optional): \")\n-        try:\n-            print access.gettransaction(data)\n-        except:\n-            print access.gettransaction()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"help\":\n-    try:\n-        cmd = raw_input(\"Command (optional): \")\n-        try:\n-            print access.help(cmd)\n-        except:\n-            print access.help()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listaccounts\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.listaccounts(mc)\n-        except:\n-            print access.listaccounts()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaccount\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaccount(mc, incemp)\n-        except:\n-            print access.listreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaddress\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaddress(mc, incemp)\n-        except:\n-            print access.listreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listtransactions\":\n-    try:\n-        acct = raw_input(\"Account (optional): \")\n-        count = raw_input(\"Number of transactions (optional): \")\n-        frm = raw_input(\"Skip (optional):\")\n-        try:\n-            print access.listtransactions(acct, count, frm)\n-        except:\n-            print access.listtransactions()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"move\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.move(frm, to, amt, mc, comment)\n-        except:\n-            print access.move(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendfrom\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendfrom(frm, to, amt, mc, comment, commentto)\n-        except:\n-            print access.sendfrom(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendmany\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.sendmany(frm,to,mc,comment)\n-        except:\n-            print access.sendmany(frm,to)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendtoaddress\":\n-    try:\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        amt = raw_input(\"Amount:\")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendtoaddress(to,amt,comment,commentto)\n-        except:\n-            print access.sendtoaddress(to,amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setaccount\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        acct = raw_input(\"Account:\")\n-        print access.setaccount(addr,acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setgenerate\":\n-    try:\n-        gen= raw_input(\"Generate? (true/false): \")\n-        cpus = raw_input(\"Max processors/cores (-1 for unlimited, optional):\")\n-        try:\n-            print access.setgenerate(gen, cpus)\n-        except:\n-            print access.setgenerate(gen)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"settxfee\":\n-    try:\n-        amt = raw_input(\"Amount:\")\n-        print access.settxfee(amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"stop\":\n-    try:\n-        print access.stop()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"validateaddress\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        print access.validateaddress(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrase\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter wallet passphrase: \")\n-        access.walletpassphrase(pwd, 60)\n-        print \"\\n---Wallet unlocked---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrasechange\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter old wallet passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Enter new wallet passphrase: \")\n-        access.walletpassphrasechange(pwd, pwd2)\n-        print\n-        print \"\\n---Passphrase changed---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-else:\n-    print \"Command not found or not supported\""
      },
      {
        "sha": "b6d6a097d6ddb59362fcd260354da01f9efd3e8d",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,5 +1,8 @@\n #!/usr/bin/env python\n-\n+'''\n+Run this scrip every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n+#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n+'''\n import os\n import sys\n import subprocess\n@@ -18,14 +21,12 @@ def content_hash(filename):\n     data = i.tostring()\n     return hashlib.sha256(data).hexdigest()\n \n-#optimize png, remove various color profiles, remove ancillary chunks (alla) and text chunks (text)\n-#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n-\n pngcrush = 'pngcrush'\n git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"src/qt/res/images\"]\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\"]\n basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n totalSaveBytes = 0\n+noHashChange = True\n \n outputArray = []\n for folder in folders:\n@@ -68,6 +69,7 @@ def content_hash(filename):\n     oldHash = fileDict['sha256Old']\n     newHash = fileDict['sha256New']\n     totalSaveBytes += fileDict['osize'] - fileDict['psize']\n+    noHashChange = noHashChange and (oldHash == newHash)\n     print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n     \n-print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\"\n+print \"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\""
      },
      {
        "sha": "cba2fbd1513e34582732732188da8f36507d5563",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 109,
        "deletions": 34,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,62 +1,139 @@\n PACKAGE=qt\n-$(package)_version=5.2.1\n-$(package)_download_path=http://download.qt-project.org/official_releases/qt/5.2/$($(package)_version)/single\n-$(package)_file_name=$(package)-everywhere-opensource-src-$($(package)_version).tar.gz\n-$(package)_sha256_hash=84e924181d4ad6db00239d87250cc89868484a14841f77fb85ab1f1dbdcd7da1\n+$(package)_version=5.5.0\n+$(package)_download_path=http://download.qt.io/official_releases/qt/5.5/$($(package)_version)/submodules\n+$(package)_suffix=opensource-src-$($(package)_version).tar.gz\n+$(package)_file_name=qtbase-$($(package)_suffix)\n+$(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561\n $(package)_dependencies=openssl\n $(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch qt5-tablet-osx.patch qt5-yosemite.patch\n+$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch\n+\n+$(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n+$(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n+\n+$(package)_qttools_file_name=qttools-$($(package)_suffix)\n+$(package)_qttools_sha256_hash=d9e06bd19ecc86afba5e95d45a906d1bc1ad579aa70001e36143c1aaf695bdd6\n+\n+$(package)_extra_sources  = $($(package)_qttranslations_file_name)\n+$(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_debug   = -debug\n-$(package)_config_opts += -opensource -confirm-license -no-audio-backend -no-sql-tds -no-glib -no-icu\n-$(package)_config_opts += -no-cups -no-iconv -no-gif -no-audio-backend -no-freetype\n-$(package)_config_opts += -no-sql-sqlite -no-nis -no-cups -no-iconv -no-pch\n-$(package)_config_opts += -no-gif -no-feature-style-plastique\n-$(package)_config_opts += -no-qml-debug -no-pch -no-nis -nomake examples -nomake tests\n-$(package)_config_opts += -no-feature-style-cde -no-feature-style-s60 -no-feature-style-motif\n-$(package)_config_opts += -no-feature-style-windowsmobile -no-feature-style-windowsce\n-$(package)_config_opts += -no-feature-style-cleanlooks\n-$(package)_config_opts += -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds -no-sql-mysql\n-$(package)_config_opts += -no-sql-odbc -no-sql-psql -no-sql-sqlite -no-sql-sqlite2\n-$(package)_config_opts += -skip qtsvg -skip qtwebkit -skip qtwebkit-examples -skip qtserialport\n-$(package)_config_opts += -skip qtdeclarative -skip qtmultimedia -skip qtimageformats -skip qtx11extras\n-$(package)_config_opts += -skip qtlocation -skip qtsensors -skip qtquick1 -skip qtxmlpatterns\n-$(package)_config_opts += -skip qtquickcontrols -skip qtactiveqt -skip qtconnectivity -skip qtmacextras\n-$(package)_config_opts += -skip qtwinextras -skip qtxmlpatterns -skip qtscript -skip qtdoc\n-\n-$(package)_config_opts += -prefix $(host_prefix) -bindir $(build_prefix)/bin\n-$(package)_config_opts += -no-c++11 -openssl-linked  -v -static -silent -pkg-config\n-$(package)_config_opts += -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre\n+$(package)_config_opts += -opensource -confirm-license\n+$(package)_config_opts += -no-audio-backend\n+$(package)_config_opts += -no-glib\n+$(package)_config_opts += -no-icu\n+$(package)_config_opts += -no-cups\n+$(package)_config_opts += -no-iconv\n+$(package)_config_opts += -no-gif\n+$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-nis\n+$(package)_config_opts += -no-pch\n+$(package)_config_opts += -no-qml-debug\n+$(package)_config_opts += -nomake examples\n+$(package)_config_opts += -nomake tests\n+$(package)_config_opts += -no-feature-style-windowsmobile\n+$(package)_config_opts += -no-feature-style-windowsce\n+$(package)_config_opts += -no-sql-db2\n+$(package)_config_opts += -no-sql-ibase\n+$(package)_config_opts += -no-sql-oci\n+$(package)_config_opts += -no-sql-tds\n+$(package)_config_opts += -no-sql-mysql\n+$(package)_config_opts += -no-sql-odbc\n+$(package)_config_opts += -no-sql-psql\n+$(package)_config_opts += -no-sql-sqlite\n+$(package)_config_opts += -no-sql-sqlite2\n+$(package)_config_opts += -prefix $(host_prefix)\n+$(package)_config_opts += -hostprefix $(build_prefix)\n+$(package)_config_opts += -bindir $(build_prefix)/bin\n+$(package)_config_opts += -no-c++11\n+$(package)_config_opts += -openssl-linked\n+$(package)_config_opts += -v\n+$(package)_config_opts += -static\n+$(package)_config_opts += -silent\n+$(package)_config_opts += -pkg-config\n+$(package)_config_opts += -qt-libpng\n+$(package)_config_opts += -qt-libjpeg\n+$(package)_config_opts += -qt-zlib\n+$(package)_config_opts += -qt-pcre\n+$(package)_config_opts += -no-pulseaudio\n+$(package)_config_opts += -no-openvg\n+$(package)_config_opts += -no-xrender\n+$(package)_config_opts += -no-alsa\n+$(package)_config_opts += -no-mtdev\n+$(package)_config_opts += -no-gstreamer\n+$(package)_config_opts += -no-mitshm\n+$(package)_config_opts += -no-kms\n+$(package)_config_opts += -no-reduce-relocations\n+$(package)_config_opts += -no-egl\n+$(package)_config_opts += -no-eglfs\n+$(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-xinput2\n+$(package)_config_opts += -no-libudev\n+$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -reduce-exports\n+$(package)_config_opts += -optimized-qmake\n \n ifneq ($(build_os),darwin)\n-$(package)_config_opts_darwin = -xplatform macx-clang-linux -device-option MAC_SDK_PATH=$(OSX_SDK) -device-option CROSS_COMPILE=\"$(host)-\"\n-$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION) -device-option MAC_TARGET=$(host) -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n+$(package)_config_opts_darwin = -xplatform macx-clang-linux\n+$(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n+$(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n+$(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n+$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n+$(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n+$(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon -qt-xcb  -no-eglfs -no-linuxfb -system-freetype -no-sm -fontconfig -no-xinput2 -no-libudev -no-egl -no-opengl\n+$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux += -qt-xcb\n+$(package)_config_opts_linux += -system-freetype\n+$(package)_config_opts_linux += -no-sm\n+$(package)_config_opts_linux += -fontconfig\n+$(package)_config_opts_linux += -no-opengl\n $(package)_config_opts_arm_linux  = -platform linux-g++ -xplatform $(host)\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_build_env  = QT_RCC_TEST=1\n endef\n \n+define $(package)_fetch_cmds\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_qttranslations_file_name),$($(package)_qttranslations_file_name),$($(package)_qttranslations_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_qttools_file_name),$($(package)_qttools_file_name),$($(package)_qttools_sha256_hash))\n+endef\n+\n+define $(package)_extract_cmds\n+  mkdir -p $($(package)_extract_dir) && \\\n+  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  mkdir qtbase && \\\n+  tar --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n+  mkdir qttranslations && \\\n+  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttranslations_file_name) -C qttranslations && \\\n+  mkdir qttools && \\\n+  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n+endef\n+\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old \"/XIproto.h/d\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n+  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n+  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp &&\\\n+  sed -i.old \"s/PCIDLIST_ABSOLUTE/const ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n+  sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch && \\\n-  patch -d qtbase -p1 < $($(package)_patch_dir)/qt5-yosemite.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n@@ -69,7 +146,6 @@ define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n-  export CPATH=$(host_prefix)/include && \\\n   ./configure $($(package)_config_opts) && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n@@ -78,7 +154,6 @@ define $(package)_config_cmds\n endef\n \n define $(package)_build_cmds\n-  export CPATH=$(host_prefix)/include && \\\n   $(MAKE) -C src $(addprefix sub-,$($(package)_qt_libs)) && \\\n   $(MAKE) -C ../qttools/src/linguist/lrelease && \\\n   $(MAKE) -C ../qttranslations\n@@ -94,6 +169,6 @@ define $(package)_stage_cmds\n endef\n \n define $(package)_postprocess_cmds\n-  rm -rf mkspecs/ lib/cmake/ && \\\n-  rm lib/libQt5Bootstrap.a lib/lib*.la lib/*.prl plugins/*/*.prl\n+  rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n+  rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n endef"
      },
      {
        "sha": "ae469ea94bff0e7d3b833a836f6c56e02c12db6a",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 23,
        "deletions": 9,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,14 +1,15 @@\n---- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:06:42.705930685 +0000\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:08:41.281926351 +0000\n-@@ -103,7 +103,6 @@\n+--- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:08:41.281926351 +0000\n+@@ -94,8 +94,6 @@\n \n  DEFINES += $$QMAKE_DEFINES_XCB\n  LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n+-QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n \n  CONFIG += qpa/genericunixfontdatabase\n \n-@@ -118,7 +117,8 @@\n+@@ -104,7 +102,8 @@\n  contains(QT_CONFIG, xcb-qt) {\n      DEFINES += XCB_USE_RENDER\n      XCB_DIR = ../../../3rdparty/xcb\n@@ -17,15 +18,28 @@\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n      LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n  } else {\n-     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms\n --- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n-@@ -8,7 +8,7 @@\n+@@ -8,7 +8,8 @@\n \n  XCB_DIR = ../../../../3rdparty/xcb\n \n -INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n-+QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n++QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n \n- # ignore compiler warnings in 3rdparty code\n- QMAKE_CFLAGS_STATIC_LIB+=-w\n+ QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n+ QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:02:59.530038830 -0400\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:01:22.106037459 -0400\n+@@ -11,3 +11,9 @@\n+     qxcbmain.cpp\n+ OTHER_FILES += xcb.json README\n+\n++contains(QT_CONFIG, xcb-qt) {\n++    DEFINES += XCB_USE_RENDER\n++    XCB_DIR = ../../../3rdparty/xcb\n++    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++}"
      },
      {
        "sha": "a6d0070cca6489848394febfa8a1b6e36925ba6c",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,5 +1,6 @@\n MAKEFILE_GENERATOR = UNIX\n CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n+DEFINES += QT_NO_PRINTER QT_NO_PRINTDIALOG\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)\n@@ -10,8 +11,10 @@ QMAKE_XCODE_VERSION=4.3\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n-QMAKE_MAC_SDK.macosx.path = $$QMAKE_MAC_SDK_PATH\n+QMAKE_MAC_SDK.macosx.path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n+QMAKE_MAC_SDK.macosx.version = $${MAC_SDK_VERSION}\n+QMAKE_MAC_SDK.macosx.platform_path = /phony\n QMAKE_CFLAGS += -target $${MAC_TARGET}\n QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n QMAKE_CXXFLAGS += $$QMAKE_CFLAGS"
      },
      {
        "sha": "975366e61229c891974f60f91a74e8c9f7a62d5a",
        "filename": "depends/patches/qt/mingw-uuidof.patch",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/patches/qt/mingw-uuidof.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/depends/patches/qt/mingw-uuidof.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mingw-uuidof.patch?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,44 @@\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:40:20.956781548 -0400\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:29:32.052772416 -0400\n+@@ -69,7 +69,7 @@\n+ #include <stdlib.h>\n+ #include <stdio.h>\n+ #include <windowsx.h>\n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ #  include <comdef.h>\n+ #endif\n+ \n+@@ -762,7 +762,7 @@\n+                           HWND_MESSAGE, NULL, (HINSTANCE)GetModuleHandle(0), NULL);\n+ }\n+ \n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ // Re-engineered from the inline function _com_error::ErrorMessage().\n+ // We cannot use it directly since it uses swprintf_s(), which is not\n+ // present in the MSVCRT.DLL found on Windows XP (QTBUG-35617).\n+@@ -781,7 +781,7 @@\n+          return QStringLiteral(\"IDispatch error #\") + QString::number(wCode);\n+      return QStringLiteral(\"Unknown error 0x0\") + QString::number(comError.Error(), 16);\n+ }\n+-#endif // !Q_OS_WINCE\n++#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ \n+ /*!\n+     \\brief Common COM error strings.\n+@@ -846,12 +846,12 @@\n+     default:\n+         break;\n+     }\n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+     _com_error error(hr);\n+     result += QByteArrayLiteral(\" (\");\n+     result += errorMessageFromComError(error);\n+     result += ')';\n+-#endif // !Q_OS_WINCE\n++#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+     return result;\n+ }\n+ "
      },
      {
        "sha": "7deabf8d4e04262c3870e9adbc6eb4b4a185d29f",
        "filename": "depends/patches/qt/qt5-tablet-osx.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/depends/patches/qt/qt5-tablet-osx.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/depends/patches/qt/qt5-tablet-osx.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt5-tablet-osx.patch?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -1,20 +0,0 @@\n---- old/qtbase/src/widgets/kernel/qwidgetwindow.cpp\t2014-09-05 20:45:18.717570370 -0400\n-+++ new/qtbase/src/widgets/kernel/qwidgetwindow.cpp\t2014-09-05 20:52:38.653576561 -0400\n-@@ -57,7 +57,7 @@\n- Q_WIDGETS_EXPORT extern bool qt_tab_all_widgets();\n- \n- QWidget *qt_button_down = 0; // widget got last button-down\n--static QWidget *qt_tablet_target = 0;\n-+static QPointer<QWidget> qt_tablet_target = 0;\n- \n- // popup control\n- QWidget *qt_popup_down = 0; // popup that contains the pressed widget\n-@@ -96,8 +96,6 @@\n- \n- QWidgetWindow::~QWidgetWindow()\n- {\n--    if (m_widget == qt_tablet_target)\n--        qt_tablet_target = 0;\n- }\n- \n- #ifndef QT_NO_ACCESSIBILITY"
      },
      {
        "sha": "d569d34d47f2ddd9372c2e45487a58f0fedbf739",
        "filename": "depends/patches/qt/qt5-yosemite.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/depends/patches/qt/qt5-yosemite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/depends/patches/qt/qt5-yosemite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt5-yosemite.patch?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -1,52 +0,0 @@\n-The following patch was taken from upstream:\n-https://qt.gitorious.org/qt/qtbase/commit/70e4428b6f1c6a4bad112203f67ee7d22107616c.patch\n-\n-The first hunk was removed because it conflicts with 5.2.1, and is not currently needed.\n-\n-From 70e4428b6f1c6a4bad112203f67ee7d22107616c Mon Sep 17 00:00:00 2001\n-From: Gabriel de Dietrich <gabriel.dedietrich@digia.com>\n-Date: Tue, 3 Jun 2014 14:20:20 +0200\n-Subject: [PATCH] Cocoa: Adapt to Xcode 6 clang version sudden pickiness\n-MIME-Version: 1.0\n-Content-Type: text/plain; charset=UTF-8\n-Content-Transfer-Encoding: 8bit\n-\n-Yes, that means OS X Yosemite fix.\n-\n-Change-Id: I236f7af7b803de24ff0895e04c9a9253b5cfdb3b\n-Reviewed-by: Morten Johan S\u00f8rvig <morten.sorvig@digia.com>\n----\n- .../platforms/cocoa/qcocoaaccessibilityelement.mm  |    2 +-\n- .../platforms/cocoa/qcocoaapplicationdelegate.mm   |    2 +-\n- src/plugins/platforms/cocoa/qcocoamenuloader.mm    |    2 +-\n- 3 files changed, 3 insertions(+), 3 deletions(-)\n-\n-diff --git a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-index f841184..548c6a2 100644\n---- a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-+++ b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-@@ -124,7 +124,7 @@ static void cleanupCocoaApplicationDelegate()\n-     [dockMenu release];\n-     [qtMenuLoader release];\n-     if (reflectionDelegate) {\n--        [NSApp setDelegate:reflectionDelegate];\n-+        [[NSApplication sharedApplication] setDelegate:reflectionDelegate];\n-         [reflectionDelegate release];\n-     }\n-     [[NSNotificationCenter defaultCenter] removeObserver:self];\n-diff --git a/src/plugins/platforms/cocoa/qcocoamenuloader.mm b/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-index 60bc3b5..9340e94 100644\n---- a/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-+++ b/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-@@ -174,7 +174,7 @@ QT_END_NAMESPACE\n- - (void)removeActionsFromAppMenu\n- {\n-     for (NSMenuItem *item in [appMenu itemArray])\n--        [item setTag:nil];\n-+        [item setTag:0];\n- }\n- \n- - (void)dealloc\n--- \n-1.7.1\n-"
      },
      {
        "sha": "bf669235e38a2c97a8cce1de70f32c7baf89ba91",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -77,6 +77,20 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n }\n ```\n \n+####Memory pool\n+`GET /rest/mempool/info.json`\n+\n+Returns various information about the TX mempool.\n+Only supports JSON as output format.\n+* size : (numeric) the number of transactions in the TX mempool\n+* bytes : (numeric) size of the TX mempool in bytes\n+* usage : (numeric) total TX mempool memory usage\n+\n+`GET /rest/mempool/contents.json`\n+\n+Returns transactions in the TX mempool.\n+Only supports JSON as output format.\n+\n Risks\n -------------\n Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "b5a033dd79ad7f572113e4ccf1e931448ad8e7a8",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 46,
        "deletions": 25,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,37 +10,58 @@ The following is a list of assets used in the bitcoin source and their proper at\n * Site: [https://github.com/stephenhutchings/typicons.font](https://github.com/stephenhutchings/typicons.font)\n \n ### Assets Used\n-\tsrc/qt/res/icons/add.png, src/qt/res/icons/address-book.png,\n-\tsrc/qt/res/icons/configure.png, src/qt/res/icons/connect4.png,\n-    src/qt/res/icons/debugwindow.png, src/qt/res/icons/edit.png,\n-    src/qt/res/icons/exitcopy.png, src/qt/res/icons/editpaste.png,\n-    src/qt/res/icons/export.png, src/qt/res/icons/eye.png,\n-    src/qt/res/icons/filesave.png, src/qt/res/icons/history.png,\n-    src/qt/res/icons/info.png, src/qt/res/icons/key.png,\n-    src/qt/res/icons/lock_*.png, src/qt/res/icons/open.png,\n-    src/qt/res/icons/overview.png, src/qt/res/icons/quit.png,\n-    src/qt/res/icons/receive.png, src/qt/res/icons/remove.png,\n-    src/qt/res/icons/send.png, src/qt/res/icons/synced.png,\n-    src/qt/res/icons/transaction*.png, src/qt/res/icons/tx_output.png,\n+    src/qt/res/icons/add.png\n+    src/qt/res/icons/address-book.png,\n+    src/qt/res/icons/configure.png\n+    src/qt/res/icons/debugwindow.png\n+    src/qt/res/icons/edit.png,\n+    src/qt/res/icons/exitcopy.png\n+    src/qt/res/icons/editpaste.png,\n+    src/qt/res/icons/export.png\n+    src/qt/res/icons/eye.png,\n+    src/qt/res/icons/filesave.png\n+    src/qt/res/icons/history.png,\n+    src/qt/res/icons/info.png\n+    src/qt/res/icons/key.png,\n+    src/qt/res/icons/lock_*.png\n+    src/qt/res/icons/open.png,\n+    src/qt/res/icons/overview.png\n+    src/qt/res/icons/quit.png,\n+    src/qt/res/icons/receive.png\n+    src/qt/res/icons/remove.png,\n+    src/qt/res/icons/send.png\n+    src/qt/res/icons/synced.png,\n+    src/qt/res/icons/transaction*.png\n+    src/qt/res/icons/tx_output.png,\n     src/qt/res/icons/warning.png\n \n-Jonas Schnelli\n+Other\n -----------------------\n \n ### Info\n-* Designer: Jonas Schnelli\n-* Bitcoin Icon: (based on the original bitcoin logo from Bitboy)\n+* Designer: Jonas Schnelli, Bitboy, Stephen Hutchings, Marco Falke\n+* Bitcoin Icon: Based on the original bitcoin logo from Bitboy\n+* Network connection icon: Inspired by flow-merge.svg from Stephen Hutchings\n * Some icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used\n-    src/qt/res/icons/about.png, src/qt/res/icons/about_qt.png,\n-    src/qt/res/icons/bitcoin.icns, src/qt/res/icons/bitcoin.ico,\n-    src/qt/res/icons/bitcoin.png, src/qt/res/icons/clock*.png,\n-    src/qt/res/icons/connect[0-3].png, src/qt/res/icons/eye_minus.png,\n-    src/qt/res/icons/eye_plus.png, src/qt/res/icons/verify.png,\n-    src/qt/res/icons/tx_inout.png, src/qt/res/icons/tx_input.png,\n-    src/qt/res/src/verify.svg, src/qt/res/src/bitcoin.svg,\n-    src/qt/res/src/clock*.svg, src/qt/res/src/connect*.svg,\n-    src/qt/res/src/mine.svg, src/qt/res/src/qt.svg, src/qt/res/src/tx*.svg,\n-    src/qt/res/src/verify.svg,\n+    src/qt/res/icons/about.png\n+    src/qt/res/icons/about_qt.png,\n+    src/qt/res/icons/bitcoin.icns\n+    src/qt/res/icons/bitcoin.ico,\n+    src/qt/res/icons/bitcoin.png\n+    src/qt/res/icons/clock*.png,\n+    src/qt/res/icons/connect*.png\n+    src/qt/res/icons/eye_minus.png,\n+    src/qt/res/icons/eye_plus.png\n+    src/qt/res/icons/verify.png,\n+    src/qt/res/icons/tx_inout.png\n+    src/qt/res/icons/tx_input.png,\n+    src/qt/res/src/bitcoin.svg,\n+    src/qt/res/src/clock*.svg\n+    src/qt/res/src/connect*.svg,\n+    src/qt/res/src/mine.svg\n+    src/qt/res/src/qt.svg\n+    src/qt/res/src/tx*.svg,\n+    src/qt/res/src/verify.svg"
      },
      {
        "sha": "c083bcb038c941d18244fbeca3f07e1cedb28b83",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,12 +1,17 @@\n-Used in 0.8.0\n----------------------\n-* wallet.dat: personal wallet (BDB) with keys and transactions\n-* peers.dat: peer IP address database (custom format); since 0.7.0\n+\n+* banlist.dat: stores the IPs/Subnets of banned nodes\n+* bitcoin.conf: contains configuration settings for bitcoind or bitcoin-qt\n+* bitcoind.pid: stores the process id of bitcoind while running\n * blocks/blk000??.dat: block data (custom, 128 MiB per file); since 0.8.0\n * blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n * blocks/index/*; block index (LevelDB); since 0.8.0\n * chainstate/*; block chain state database (LevelDB); since 0.8.0\n * database/*: BDB database environment; only used for wallet since 0.8.0\n+* db.log: wallet database log file\n+* debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n+* fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* peers.dat: peer IP address database (custom format); since 0.7.0\n+* wallet.dat: personal wallet (BDB) with keys and transactions\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "ed9ce721542d4399d645e81f4e38f11b16382b60",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 23,
        "deletions": 20,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -29,28 +29,32 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with \"-daemon\" flag, and no rpcpassword is set, it will\n-print a randomly generated suitable password to stderr.  You can also\n-generate one from the shell yourself like this:\n+If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set, \n+it will use a special cookie file for authentication. The cookie is generated with random \n+content when the daemon starts, and deleted when it exits. Read access to this file\n+controls who can access it through RPC. \n \n-bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'\n+By default the cookie is stored in the data directory, but it's location can be overridden \n+with the option '-rpccookiefile'.\n \n-Once you have a password in hand, set rpcpassword= in /etc/bitcoin/bitcoin.conf\n+This allows for running bitcoind without having to do any manual configuration.\n+\n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n+relative to the data directory. `wallet` *only* supports relative paths.\n \n For an example configuration file that describes the configuration settings, \n-see contrib/debian/examples/bitcoin.conf.\n+see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n ---------------------------------\n \n All three configurations assume several paths that might need to be adjusted.\n \n-Binary:              /usr/bin/bitcoind\n-Configuration file:  /etc/bitcoin/bitcoin.conf\n-Data directory:      /var/lib/bitcoind\n-PID file:            /var/run/bitcoind/bitcoind.pid (OpenRC and Upstart)\n-                     /var/lib/bitcoind/bitcoind.pid (systemd)\n-Lock file:           /var/lock/subsys/bitcoind (CentOS)\n+Binary:              `/usr/bin/bitcoind`  \n+Configuration file:  `/etc/bitcoin/bitcoin.conf`  \n+Data directory:      `/var/lib/bitcoind`  \n+PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/var/lib/bitcoind/bitcoind.pid` (systemd)  \n+Lock file:           `/var/lock/subsys/bitcoind` (CentOS)  \n \n The configuration file, PID directory (if applicable) and data directory\n should all be owned by the bitcoin user and group.  It is advised for security\n@@ -65,29 +69,29 @@ can then be controlled by group membership.\n \n Installing this .service file consists of just copying it to\n /usr/lib/systemd/system directory, followed by the command\n-\"systemctl daemon-reload\" in order to update running systemd configuration.\n+`systemctl daemon-reload` in order to update running systemd configuration.\n \n-To test, run \"systemctl start bitcoind\" and to enable for system startup run\n-\"systemctl enable bitcoind\"\n+To test, run `systemctl start bitcoind` and to enable for system startup run\n+`systemctl enable bitcoind`\n \n 4b) OpenRC\n \n Rename bitcoind.openrc to bitcoind and drop it in /etc/init.d.  Double\n check ownership and permissions and make it executable.  Test it with\n-\"/etc/init.d/bitcoind start\" and configure it to run on startup with\n-\"rc-update add bitcoind\"\n+`/etc/init.d/bitcoind start` and configure it to run on startup with\n+`rc-update add bitcoind`\n \n 4c) Upstart (for Debian/Ubuntu based distributions)\n \n-Drop bitcoind.conf in /etc/init.  Test by running \"service bitcoind start\"\n+Drop bitcoind.conf in /etc/init.  Test by running `service bitcoind start`\n it will automatically start on reboot.\n \n NOTE: This script is incompatible with CentOS 5 and Amazon Linux 2014 as they\n use old versions of Upstart and do not supply the start-stop-daemon utility.\n \n 4d) CentOS\n \n-Copy bitcoind.init to /etc/init.d/bitcoind. Test by running \"service bitcoind start\".\n+Copy bitcoind.init to /etc/init.d/bitcoind. Test by running `service bitcoind start`.\n \n Using this script, you can adjust the path and flags to the bitcoind program by \n setting the BITCOIND and FLAGS environment variables in the file \n@@ -99,4 +103,3 @@ setting the BITCOIND and FLAGS environment variables in the file\n Auto respawning is currently only configured for Upstart and systemd.\n Reasonable defaults have been chosen but YMMV.\n \n-"
      },
      {
        "sha": "9caac4f7aea9fe97025638aa0372c1fec282be06",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -19,10 +19,21 @@ https://www.torproject.org/docs/tor-manual.html.en\n \n This allows running bitcoind without having to do any manual configuration.\n \n-Example header\n-----------------------\n+Low-level RPC API changes\n+--------------------------\n \n-Example content.\n+- Monetary amounts can be provided as strings. This means that for example the\n+  argument to sendtoaddress can be \"0.0001\" instead of 0.0001. This can be an\n+  advantage if a JSON library insists on using a lossy floating point type for\n+  numbers, which would be dangerous for monetary amounts.\n+\n+Option parsing behavior\n+-----------------------\n+\n+Command line options are now parsed strictly in the order in which they are\n+specified. It used to be the case that `-X -noX` ends up, unintuitively, with X\n+set, as `-X` had precedence over `-noX`. This is no longer the case. Like for\n+other software, the last specified value for an option will hold.\n \n 0.12.0 Change log\n =================\n@@ -52,3 +63,5 @@ git merge commit are mentioned.\n \n ### Miscellaneous\n \n+- Removed bitrpc.py from contrib\n+"
      },
      {
        "sha": "28e49fb7ea64838f81a72424217e755a62e865c8",
        "filename": "doc/release-notes/release-notes-0.11.0.md",
        "status": "added",
        "additions": 505,
        "deletions": 0,
        "changes": 505,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/release-notes/release-notes-0.11.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/doc/release-notes/release-notes-0.11.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.11.0.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,505 @@\n+Bitcoin Core version 0.11.0 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n+\n+This is a new major version release, bringing both new features and\n+bug fixes.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Important information\n+======================\n+\n+Transaction flooding\n+---------------------\n+\n+At the time of this release, the P2P network is being flooded with low-fee\n+transactions. This causes a ballooning of the mempool size.\n+\n+If this growth of the mempool causes problematic memory use on your node, it is\n+possible to change a few configuration options to work around this. The growth\n+of the mempool can be monitored with the RPC command `getmempoolinfo`.\n+\n+One is to increase the minimum transaction relay fee `minrelaytxfee`, which\n+defaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be\n+rejected, and thus fewer transactions entering the mempool.\n+\n+The other is to restrict the relaying of free transactions with\n+`limitfreerelay`. This option sets the number of kB/minute at which\n+free transactions (with enough priority) will be accepted. It defaults to 15.\n+Reducing this number reduces the speed at which the mempool can grow due\n+to free transactions.\n+\n+For example, add the following to `bitcoin.conf`:\n+\n+    minrelaytxfee=0.00005 \n+    limitfreerelay=5\n+\n+More robust solutions are being worked on for a follow-up release.\n+\n+Notable changes\n+===============\n+\n+Block file pruning\n+----------------------\n+\n+This release supports running a fully validating node without maintaining a copy \n+of the raw block and undo data on disk. To recap, there are four types of data \n+related to the blockchain in the bitcoin system: the raw blocks as received over \n+the network (blk???.dat), the undo data (rev???.dat), the block index and the \n+UTXO set (both LevelDB databases). The databases are built from the raw data.\n+\n+Block pruning allows Bitcoin Core to delete the raw block and undo data once \n+it's been validated and used to build the databases. At that point, the raw data \n+is used only to relay blocks to other nodes, to handle reorganizations, to look \n+up old transactions (if -txindex is enabled or via the RPC/REST interfaces), or \n+for rescanning the wallet. The block index continues to hold the metadata about \n+all blocks in the blockchain.\n+\n+The user specifies how much space to allot for block & undo files. The minimum \n+allowed is 550MB. Note that this is in addition to whatever is required for the \n+block index and UTXO databases. The minimum was chosen so that Bitcoin Core will \n+be able to maintain at least 288 blocks on disk (two days worth of blocks at 10 \n+minutes per block). In rare instances it is possible that the amount of space \n+used will exceed the pruning target in order to keep the required last 288 \n+blocks on disk.\n+\n+Block pruning works during initial sync in the same way as during steady state, \n+by deleting block files \"as you go\" whenever disk space is allocated. Thus, if \n+the user specifies 550MB, once that level is reached the program will begin \n+deleting the oldest block and undo files, while continuing to download the \n+blockchain.\n+\n+For now, block pruning disables block relay.  In the future, nodes with block \n+pruning will at a minimum relay \"new\" blocks, meaning blocks that extend their \n+active chain. \n+\n+Block pruning is currently incompatible with running a wallet due to the fact \n+that block data is used for rescanning the wallet and importing keys or \n+addresses (which require a rescan.) However, running the wallet with block \n+pruning will be supported in the near future, subject to those limitations.\n+\n+Block pruning is also incompatible with -txindex and will automatically disable \n+it.\n+\n+Once you have pruned blocks, going back to unpruned state requires \n+re-downloading the entire blockchain. To do this, re-start the node with \n+-reindex. Note also that any problem that would cause a user to reindex (e.g., \n+disk corruption) will cause a pruned node to redownload the entire blockchain. \n+Finally, note that when a pruned node reindexes, it will delete any blk???.dat \n+and rev???.dat files in the data directory prior to restarting the download.\n+\n+To enable block pruning on the command line:\n+\n+- `-prune=N`: where N is the number of MB to allot for raw block & undo data.\n+\n+Modified RPC calls:\n+\n+- `getblockchaininfo` now includes whether we are in pruned mode or not.\n+- `getblock` will check if the block's data has been pruned and if so, return an \n+error.\n+- `getrawtransaction` will no longer be able to locate a transaction that has a \n+UTXO but where its block file has been pruned. \n+\n+Pruning is disabled by default.\n+\n+Big endian support\n+--------------------\n+\n+Experimental support for big-endian CPU architectures was added in this\n+release. All little-endian specific code was replaced with endian-neutral\n+constructs. This has been tested on at least MIPS and PPC hosts. The build\n+system will automatically detect the endianness of the target.\n+\n+Memory usage optimization\n+--------------------------\n+\n+There have been many changes in this release to reduce the default memory usage\n+of a node, among which:\n+\n+- Accurate UTXO cache size accounting (#6102); this makes the option `-dbcache`\n+  precise where this grossly underestimated memory usage before\n+- Reduce size of per-peer data structure (#6064 and others); this increases the\n+  number of connections that can be supported with the same amount of memory\n+- Reduce the number of threads (#5964, #5679); lowers the amount of (esp.\n+  virtual) memory needed\n+\n+Fee estimation changes\n+----------------------\n+\n+This release improves the algorithm used for fee estimation.  Previously, -1\n+was returned when there was insufficient data to give an estimate.  Now, -1\n+will also be returned when there is no fee or priority high enough for the\n+desired confirmation target. In those cases, it can help to ask for an estimate\n+for a higher target number of blocks. It is not uncommon for there to be no\n+fee or priority high enough to be reliably (85%) included in the next block and\n+for this reason, the default for `-txconfirmtarget=n` has changed from 1 to 2.\n+\n+Privacy: Disable wallet transaction broadcast\n+----------------------------------------------\n+\n+This release adds an option `-walletbroadcast=0` to prevent automatic\n+transaction broadcast and rebroadcast (#5951). This option allows separating\n+transaction submission from the node functionality.\n+\n+Making use of this, third-party scripts can be written to take care of\n+transaction (re)broadcast:\n+\n+- Send the transaction as normal, either through RPC or the GUI\n+- Retrieve the transaction data through RPC using `gettransaction` (NOT\n+  `getrawtransaction`). The `hex` field of the result will contain the raw\n+  hexadecimal representation of the transaction\n+- The transaction can then be broadcasted through arbitrary mechanisms\n+  supported by the script\n+\n+One such application is selective Tor usage, where the node runs on the normal\n+internet but transactions are broadcasted over Tor.\n+\n+For an example script see [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n+\n+Privacy: Stream isolation for Tor\n+----------------------------------\n+\n+This release adds functionality to create a new circuit for every peer\n+connection, when the software is used with Tor. The new option,\n+`-proxyrandomize`, is on by default.\n+\n+When enabled, every outgoing connection will (potentially) go through a\n+different exit node. That significantly reduces the chance to get unlucky and\n+pick a single exit node that is either malicious, or widely banned from the P2P\n+network. This improves connection reliability as well as privacy, especially\n+for the initial connections.\n+\n+**Important note:** If a non-Tor SOCKS5 proxy is configured that supports\n+authentication, but doesn't require it, this change may cause that proxy to reject\n+connections. A user and password is sent where they weren't before. This setup\n+is exceedingly rare, but in this case `-proxyrandomize=0` can be passed to\n+disable the behavior.\n+\n+0.11.0 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### RPC and REST\n+- #5461 `5f7279a` signrawtransaction: validate private key\n+- #5444 `103f66b` Add /rest/headers/<count>/<hash>.<ext>\n+- #4964 `95ecc0a` Add scriptPubKey field to validateaddress RPC call\n+- #5476 `c986972` Add time offset into getpeerinfo output\n+- #5540 `84eba47` Add unconfirmed and immature balances to getwalletinfo\n+- #5599 `40e96a3` Get rid of the internal miner's hashmeter\n+- #5711 `87ecfb0` Push down RPC locks\n+- #5754 `1c4e3f9` fix getblocktemplate lock issue\n+- #5756 `5d901d8` Fix getblocktemplate_proposals test by mining one block\n+- #5548 `d48ce48` Add /rest/chaininfos\n+- #5992 `4c4f1b4` Push down RPC reqWallet flag\n+- #6036 `585b5db` Show zero value txouts in listunspent\n+- #5199 `6364408` Add RPC call `gettxoutproof` to generate and verify merkle blocks\n+- #5418 `16341cc` Report missing inputs in sendrawtransaction\n+- #5937 `40f5e8d` show script verification errors in signrawtransaction result\n+- #5420 `1fd2d39` getutxos REST command (based on Bip64)\n+- #6193 `42746b0` [REST] remove json input for getutxos, limit to query max. 15 outpoints\n+- #6226 `5901596` json: fail read_string if string contains trailing garbage\n+\n+### Configuration and command-line options\n+- #5636 `a353ad4` Add option `-allowselfsignedrootcertificate` to allow self signed root certs (for testing payment requests)\n+- #5900 `3e8a1f2` Add a consistency check `-checkblockindex` for the block chain data structures\n+- #5951 `7efc9cf` Make it possible to disable wallet transaction broadcast (using `-walletbroadcast=0`)\n+- #5911 `b6ea3bc` privacy: Stream isolation for Tor (on by default, use `-proxyrandomize=0` to disable)\n+- #5863 `c271304` Add autoprune functionality (`-prune=<size>`)\n+- #6153 `0bcf04f` Parameter interaction: disable upnp if -proxy set\n+- #6274 `4d9c7fe` Add option `-alerts` to opt out of alert system\n+\n+### Block and transaction handling\n+- #5367 `dcc1304` Do all block index writes in a batch\n+- #5253 `203632d` Check against MANDATORY flags prior to accepting to mempool\n+- #5459 `4406c3e` Reject headers that build on an invalid parent\n+- #5481 `055f3ae` Apply AreSane() checks to the fees from the network\n+- #5580 `40d65eb` Preemptively catch a few potential bugs\n+- #5349 `f55c5e9` Implement test for merkle tree malleability in CPartialMerkleTree\n+- #5564 `a89b837` clarify obscure uses of EvalScript()\n+- #5521 `8e4578a` Reject non-final txs even in testnet/regtest\n+- #5707 `6af674e` Change hardcoded character constants to descriptive named constants for db keys\n+- #5286 `fcf646c` Change the default maximum OP_RETURN size to 80 bytes\n+- #5710 `175d86e` Add more information to errors in ReadBlockFromDisk\n+- #5948 `b36f1ce` Use GetAncestor to compute new target\n+- #5959 `a0bfc69` Add additional block index consistency checks\n+- #6058 `7e0e7f8` autoprune minor post-merge improvements\n+- #5159 `2cc1372` New fee estimation code\n+- #6102 `6fb90d8` Implement accurate UTXO cache size accounting\n+- #6129 `2a82298` Bug fix for clearing fCheckForPruning\n+- #5947 `e9af4e6` Alert if it is very likely we are getting a bad chain\n+- #6203 `c00ae64` Remove P2SH coinbase flag, no longer interesting\n+- #5985 `37b4e42` Fix removing of orphan transactions\n+- #6221 `6cb70ca` Prune: Support noncontiguous block files\n+- #6256 `fce474c` Use best header chain timestamps to detect partitioning\n+- #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n+\n+### P2P protocol and network code\n+- #5507 `844ace9` Prevent DOS attacks on in-flight data structures\n+- #5770 `32a8b6a` Sanitize command strings before logging them\n+- #5859 `dd4ffce` Add correct bool combiner for net signals\n+- #5876 `8e4fd0c` Add a NODE_GETUTXO service bit and document NODE_NETWORK\n+- #6028 `b9311fb` Move nLastTry from CAddress to CAddrInfo\n+- #5662 `5048465` Change download logic to allow calling getdata on inbound peers\n+- #5971 `18d2832` replace absolute sleep with conditional wait\n+- #5918 `7bf5d5e` Use equivalent PoW for non-main-chain requests\n+- #6059 `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n+- #6080 `31c0bf1` Add jonasschnellis dns seeder\n+- #5976 `9f7809f` Reduce download timeouts as blocks arrive\n+- #6172 `b4bbad1` Ignore getheaders requests when not synced\n+- #5875 `304892f` Be stricter in processing unrequested blocks\n+- #6333 `41bbc85` Hardcoded seeds update June 2015\n+\n+### Validation\n+- #5143 `48e1765` Implement BIP62 rule 6\n+- #5713 `41e6e4c` Implement BIP66\n+\n+### Build system\n+- #5501 `c76c9d2` Add mips, mipsel and aarch64 to depends platforms\n+- #5334 `cf87536` libbitcoinconsensus: Add pkg-config support\n+- #5514 `ed11d53` Fix 'make distcheck'\n+- #5505 `a99ef7d` Build winshutdownmonitor.cpp on Windows only\n+- #5582 `e8a6639` Osx toolchain update\n+- #5684 `ab64022` osx: bump build sdk to 10.9\n+- #5695 `23ef5b7` depends: latest config.guess and config.sub\n+- #5509 `31dedb4` Fixes when compiling in c++11 mode\n+- #5819 `f8e68f7` release: use static libstdc++ and disable reduced exports by default\n+- #5510 `7c3fbc3` Big endian support\n+- #5149 `c7abfa5` Add script to verify all merge commits are signed\n+- #6082 `7abbb7e` qt: disable qt tests when one of the checks for the gui fails\n+- #6244 `0401aa2` configure: Detect (and reject) LibreSSL\n+- #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures\n+- #6285 `ef1d506` Fix scheduler build with some boost versions.\n+- #6280 `25c2216` depends: fix Boost 1.55 build on GCC 5\n+- #6303 `b711599` gitian: add a gitian-win-signer descriptor\n+- #6246 `8ea6d37` Fix build on FreeBSD\n+- #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n+- #6354 `bdf0d94` Gitian windows signing normalization\n+\n+### Wallet\n+- #2340 `811c71d` Discourage fee sniping with nLockTime\n+- #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n+- #5508 `9a5cabf` Add RandAddSeedPerfmon to MakeNewKey\n+- #4805 `8204e19` Do not flush the wallet in AddToWalletIfInvolvingMe(..)\n+- #5319 `93b7544` Clean up wallet encryption code\n+- #5831 `df5c246` Subtract fee from amount\n+- #6076 `6c97fd1` wallet: fix boost::get usage with boost 1.58\n+- #5511 `23c998d` Sort pending wallet transactions before reaccepting\n+- #6126 `26e08a1` Change default nTxConfirmTarget to 2\n+- #6183 `75a4d51` Fix off-by-one error w/ nLockTime in the wallet\n+- #6276 `c9fd907` Fix getbalance * 0\n+\n+### GUI\n+- #5219 `f3af0c8` New icons\n+- #5228 `bb3c75b` HiDPI (retina) support for splash screen\n+- #5258 `73cbf0a` The RPC Console should be a QWidget to make window more independent\n+- #5488 `851dfc7` Light blue icon color for regtest\n+- #5547 `a39aa74` New icon for the debug window\n+- #5493 `e515309` Adopt style colour for button icons\n+- #5557 `70477a0` On close of splashscreen interrupt verifyDB\n+- #5559 `83be8fd` Make the command-line-args dialog better\n+- #5144 `c5380a9` Elaborate on signverify message dialog warning\n+- #5489 `d1aa3c6` Optimize PNG files\n+- #5649 `e0cd2f5` Use text-color icons for system tray Send/Receive menu entries\n+- #5651 `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde\n+- #5626 `ab0d798` Fix icon sizes and column width\n+- #5683 `c7b22aa` add new osx dmg background picture\n+- #5620 `7823598` Payment request expiration bug fix\n+- #5729 `9c4a5a5` Allow unit changes for read-only BitcoinAmountField\n+- #5753 `0f44672` Add bitcoin logo to about screen\n+- #5629 `a956586` Prevent amount overflow problem with payment requests\n+- #5830 `215475a` Don't save geometry for options and about/help window\n+- #5793 `d26f0b2` Honor current network when creating autostart link\n+- #5847 `f238add` Startup script for centos, with documentation\n+- #5915 `5bd3a92` Fix a static qt5 crash when using certain versions of libxcb\n+- #5898 `bb56781` Fix rpc console font size to flexible metrics\n+- #5467 `bc8535b` Payment request / server work - part 2\n+- #6161 `180c164` Remove movable option for toolbar\n+- #6160 `0d862c2` Overviewpage: make sure warning icons gets colored\n+\n+### Tests\n+- #5453 `2f2d337` Add ability to run single test manually to RPC tests\n+- #5421 `886eb57` Test unexecuted OP_CODESEPARATOR\n+- #5530 `565b300` Additional rpc tests\n+- #5611 `37b185c` Fix spurious windows test failures after 012598880c\n+- #5613 `2eda47b` Fix smartfees test for change to relay policy\n+- #5612 `e3f5727` Fix zapwallettxes test\n+- #5642 `30a5b5f` Prepare paymentservertests for new unit tests\n+- #5784 `e3a3cd7` Fix usage of NegateSignatureS in script_tests\n+- #5813 `ee9f2bf` Add unit tests for next difficulty calculations\n+- #5855 `d7989c0` Travis: run unit tests in different orders\n+- #5852 `cdae53e` Reinitialize state in between individual unit tests.\n+- #5883 `164d7b6` tests: add a BasicTestingSetup and apply to all tests\n+- #5940 `446bb70` Regression test for ResendWalletTransactions\n+- #6052 `cf7adad` fix and enable bip32 unit test\n+- #6039 `734f80a` tests: Error when setgenerate is used on regtest\n+- #6074 `948beaf` Correct the PUSHDATA4 minimal encoding test in script_invalid.json\n+- #6032 `e08886d` Stop nodes after RPC tests, even with --nocleanup\n+- #6075 `df1609f` Add additional script edge condition tests\n+- #5981 `da38dc6` Python P2P testing \n+- #5958 `9ef00c3` Add multisig rpc tests\n+- #6112 `fec5c0e` Add more script edge condition tests\n+\n+### Miscellaneous\n+- #5457, #5506, #5952, #6047 Update libsecp256k1\n+- #5437 `84857e8` Add missing CAutoFile::IsNull() check in main\n+- #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where possible\n+- #5654, #5764 Adding jonasschnelli's GPG key\n+- #5477 `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated\n+- #5679 `beff11a` Get rid of DetectShutdownThread\n+- #5787 `9bd8c9b` Add fanquake PGP key\n+- #5366 `47a79bb` No longer check osx compatibility in RenameThread\n+- #5689 `07f4386` openssl: abstract out OPENSSL_cleanse\n+- #5708 `8b298ca` Add list of implemented BIPs\n+- #5809 `46bfbe7` Add bitcoin-cli man page\n+- #5839 `86eb461` keys: remove libsecp256k1 verification until it's actually supported\n+- #5749 `d734d87` Help messages correctly formatted (79 chars)\n+- #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was corrupted\n+- #5849 `41259ca` contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables\n+- #5950 `41113e3` Fix locale fallback and guard tests against invalid locale settings\n+- #5965 `7c6bfb1` Add git-subtree-check.sh script\n+- #6033 `1623f6e` FreeBSD, OpenBSD thread renaming\n+- #6064 `b46e7c2` Several changes to mruset\n+- #6104 `3e2559c` Show an init message while activating best chain\n+- #6125 `351f73e` Clean up parsing of bool command line args\n+- #5964 `b4c219b` Lightweight task scheduler\n+- #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app\n+- #6168 `b3024f0` contrib/linearize: Support linearization of testnet blocks\n+- #6098 `7708fcd` Update Windows resource files (and add one for bitcoin-tx)\n+- #6159 `e1412d3` Catch errors on datadir lock and pidfile delete\n+- #6186 `182686c` Fix two problems in CSubnet parsing\n+- #6174 `df992b9` doc: add translation strings policy\n+- #6210 `dfdb6dd` build: disable optional use of gmp in internal secp256k1 build\n+- #6264 `94cd705` Remove translation for -help-debug options\n+- #6286 `3902c15` Remove berkeley-db4 workaround in MacOSX build docs\n+- #6319 `3f8fcc9` doc: update mailing list address\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 21E14\n+- Adam Weiss\n+- Alex Morcos\n+- ayeowch\n+- azeteki\n+- Ben Holden-Crowther\n+- bikinibabe\n+- BitcoinPRReadingGroup\n+- Blake Jakopovic\n+- BtcDrak\n+- charlescharles\n+- Chris Arnesen\n+- Ciemon\n+- CohibAA\n+- Corinne Dashjr\n+- Cory Fields\n+- Cozz Lovan\n+- Daira Hopwood\n+- Daniel Kraft\n+- Dave Collins\n+- David A. Harding\n+- dexX7\n+- Earlz\n+- Eric Lombrozo\n+- Eric R. Schulz\n+- Everett Forth\n+- Flavien Charlon\n+- fsb4000\n+- Gavin Andresen\n+- Gregory Maxwell\n+- Heath\n+- Ivan Pustogarov\n+- Jacob Welsh\n+- Jameson Lopp\n+- Jason Lewicki\n+- Jeff Garzik\n+- Jonas Schnelli\n+- Jonathan Brown\n+- Jorge Tim\u00f3n\n+- joshr\n+- jtimon\n+- Julian Yap\n+- Luca Venturini\n+- Luke Dashjr\n+- Manuel Araoz\n+- MarcoFalke\n+- Matt Bogosian\n+- Matt Corallo\n+- Micha\n+- Michael Ford\n+- Mike Hearn\n+- mrbandrews\n+- Nicolas Benoit\n+- paveljanik\n+- Pavel Jan\u00edk\n+- Pavel Vasin\n+- Peter Todd\n+- Philip Kaufmann\n+- Pieter Wuille\n+- pstratem\n+- randy-waterhouse\n+- rion\n+- Rob Van Mieghem\n+- Ross Nicoll\n+- Ruben de Vries\n+- sandakersmann\n+- Shaul Kfir\n+- Shawn Wilkinson\n+- sinetek\n+- Suhas Daftuar\n+- svost\n+- Thomas Zander\n+- Tom Harding\n+- UdjinM6\n+- Vitalii Demianets\n+- Wladimir J. van der Laan\n+\n+And all those who contributed additional code review and/or security research:\n+\n+- Sergio Demian Lerner\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+"
      },
      {
        "sha": "fc2978921862f627a507e21e557ee73f5cc9eee3",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 4,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -13,14 +13,15 @@ class RawTransactionsTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n \n         self.is_network_split=False\n         self.sync_all()\n@@ -31,11 +32,20 @@ def run_test(self):\n \n         self.nodes[2].generate(1)\n         self.sync_all()\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(121)\n         self.sync_all()\n+\n+        watchonly_address = self.nodes[0].getnewaddress()\n+        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_amount = 200\n+        self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n+        watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10);\n+\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -428,11 +438,12 @@ def run_test(self):\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n \n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n         self.is_network_split=False\n         self.sync_all()\n \n@@ -541,5 +552,45 @@ def run_test(self):\n         assert_equal(len(dec_tx['vout']), 2) # one change output added\n \n \n+        ##################################################\n+        # test a fundrawtransaction using only watchonly #\n+        ##################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 1)\n+        assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n+\n+        assert_equal(\"fee\" in result.keys(), True)\n+        assert_greater_than(result[\"changepos\"], -1)\n+\n+        ###############################################################\n+        # test fundrawtransaction using the entirety of watched funds #\n+        ###############################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 2)\n+        assert(res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid)\n+\n+        assert_greater_than(result[\"fee\"], 0)\n+        assert_greater_than(result[\"changepos\"], -1)\n+        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n+\n+        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        assert(not signedtx[\"complete\"])\n+        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        assert(signedtx[\"complete\"])\n+        self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "b30a6bc9d1c6debfb92c8bf8ed65b76a05538ecc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -93,6 +93,16 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n+        multisig = self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n+        txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n+        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n+                           {\"txid\":txid, \"account\" : \"watchonly\"} )\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()\n "
      },
      {
        "sha": "83c03eeb782896901d99adced0f3e9d16a9d78ac",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 76,
        "deletions": 11,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -40,6 +40,11 @@\n    it's missing an intermediate block.\n    Node1 should reorg to this longer chain.\n \n+4b.Send 288 more blocks on the longer chain.\n+   Node0 should process all but the last block (too far ahead in height).\n+   Send all headers to Node1, and then send the last block in that chain.\n+   Node1 should accept the block because it's coming from a whitelisted peer.\n+\n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n    the shorter chain.\n@@ -59,6 +64,8 @@ def __init__(self):\n         NodeConnCB.__init__(self)\n         self.create_callback_map()\n         self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n \n     def add_connection(self, conn):\n         self.connection = conn\n@@ -82,6 +89,24 @@ def wait_for_verack(self):\n     def send_message(self, message):\n         self.connection.send_message(message)\n \n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        received_pong = False\n+        sleep_time = 0.05\n+        while not received_pong and timeout > 0:\n+            time.sleep(sleep_time)\n+            timeout -= sleep_time\n+            with mininode_lock:\n+                if self.last_pong.nonce == self.ping_counter:\n+                    received_pong = True\n+        self.ping_counter += 1\n+        return received_pong\n+\n+\n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\",\n@@ -126,13 +151,15 @@ def run_test(self):\n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n+        block_time = time.time() + 1\n         for i in xrange(2):\n-            blocks_h2.append(create_block(tips[i], create_coinbase(), time.time()+1))\n+            blocks_h2.append(create_block(tips[i], create_coinbase(), block_time))\n             blocks_h2[i].solve()\n+            block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        time.sleep(1)\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         print \"First height 2 block accepted by both nodes\"\n@@ -145,7 +172,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        time.sleep(1)  # Give time to process the block\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -164,7 +191,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        time.sleep(1)\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():\n@@ -182,6 +209,45 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(), 3)\n         print \"Successfully reorged to length 3 chain from whitelisted peer\"\n \n+        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node0.  Node1 should process the tip if\n+        # we give it the headers chain leading to the tip.\n+        tips = blocks_h3\n+        headers_message = msg_headers()\n+        all_blocks = []   # node0's blocks\n+        for j in xrange(2):\n+            for i in xrange(288):\n+                next_block = create_block(tips[j].sha256, create_coinbase(), tips[j].nTime+1)\n+                next_block.solve()\n+                if j==0:\n+                    test_node.send_message(msg_block(next_block))\n+                    all_blocks.append(next_block)\n+                else:\n+                    headers_message.headers.append(CBlockHeader(next_block))\n+                tips[j] = next_block\n+\n+        time.sleep(2)\n+        for x in all_blocks:\n+            try:\n+                self.nodes[0].getblock(x.hash)\n+                if x == all_blocks[287]:\n+                    raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n+            except:\n+                if x == all_blocks[287]:\n+                    print \"Unrequested block too far-ahead not processed\"\n+                else:\n+                    raise AssertionError(\"Unrequested block with more work should have been accepted\")\n+\n+        headers_message.headers.pop() # Ensure the last block is unrequested\n+        white_node.send_message(headers_message) # Send headers leading to tip\n+        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n+        try:\n+            white_node.sync_with_ping()\n+            self.nodes[1].getblock(tips[1].hash)\n+            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+        except:\n+            raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n+\n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n@@ -192,7 +258,7 @@ def run_test(self):\n         # the node processes it and incorrectly advances the tip).\n         # But this would be caught later on, when we verify that an inv triggers\n         # a getdata request for this block.\n-        time.sleep(1)\n+        test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         print \"Unrequested block that would complete more-work chain was ignored\"\n \n@@ -204,21 +270,20 @@ def run_test(self):\n             test_node.last_getdata = None\n             test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n \n-        time.sleep(1)\n+        test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_getdata\n \n-        # Check that the getdata is for the right block\n-        assert_equal(len(getdata.inv), 1)\n+        # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n         print \"Inv at tip triggered getdata for unprocessed block\"\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        time.sleep(1)\n-        assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from non-whitelisted peer\"\n+        test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "2da521950779779ddd83304d12f9c998c7e5806b",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -14,6 +14,7 @@\n import binascii\n import json\n import StringIO\n+import decimal\n \n try:\n     import http.client as httplib\n@@ -243,7 +244,7 @@ def run_test(self):\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str)\n+        json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n \n@@ -291,6 +292,19 @@ def run_test(self):\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         self.sync_all()\n \n+        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['size'], 3)\n+        # the size of the memory pool should be greater than 3x ~100 bytes\n+        assert_greater_than(json_obj['bytes'], 300)\n+\n+        # check that there are our submitted transactions in the TX memory pool\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        for tx in txs:\n+            assert_equal(tx in json_obj, True)\n+\n         # now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "ffa9226a32f249c5bd0166503d3cc873c4d21698",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 50,
        "deletions": 48,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -27,6 +27,20 @@\n \n global mininode_lock\n \n+def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+    attempt = 0\n+    elapsed = 0\n+\n+    while attempt < attempts and elapsed < timeout:\n+        with mininode_lock:\n+            if predicate():\n+                return True\n+        attempt += 1\n+        elapsed += 0.05\n+        time.sleep(0.05)\n+\n+    return False\n+\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n@@ -43,6 +57,10 @@ def __init__(self, block_store, tx_store):\n         # a response\n         self.pingMap = {} \n         self.lastInv = []\n+        self.closed = False\n+\n+    def on_close(self, conn):\n+        self.closed = True\n \n     def add_connection(self, conn):\n         self.conn = conn\n@@ -122,8 +140,8 @@ def send_mempool(self):\n #    or false, then only the last tx is tested against outcome.)\n \n class TestInstance(object):\n-    def __init__(self, objects=[], sync_every_block=True, sync_every_tx=False):\n-        self.blocks_and_transactions = objects\n+    def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n+        self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n \n@@ -132,61 +150,48 @@ class TestManager(object):\n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen\n         self.connections    = []\n+        self.test_nodes     = []\n         self.block_store    = BlockStore(datadir)\n         self.tx_store       = TxStore(datadir)\n         self.ping_counter   = 1\n \n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), \n-                        nodes[i], TestNode(self.block_store, self.tx_store)))\n+            test_node = TestNode(self.block_store, self.tx_store)\n+            self.test_nodes.append(test_node)\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n             # Make sure the TestNode (callback class) has a reference to its\n             # associated NodeConn\n-            self.connections[-1].cb.add_connection(self.connections[-1])\n+            test_node.add_connection(self.connections[-1])\n+\n+    def wait_for_disconnections(self):\n+        def disconnected():\n+            return all(node.closed for node in self.test_nodes)\n+        return wait_until(disconnected, timeout=10)\n \n     def wait_for_verack(self):\n-        sleep_time = 0.05\n-        max_tries = 10 / sleep_time  # Wait at most 10 seconds\n-        while max_tries > 0:\n-            done = True\n-            with mininode_lock:\n-                for c in self.connections:\n-                    if c.cb.verack_received is False:\n-                        done = False\n-                        break\n-            if done:\n-                break\n-            time.sleep(sleep_time)\n+        def veracked():\n+            return all(node.verack_received for node in self.test_nodes)\n+        return wait_until(veracked, timeout=10)\n \n     def wait_for_pings(self, counter):\n-        received_pongs = False\n-        while received_pongs is not True:\n-            time.sleep(0.05)\n-            received_pongs = True\n-            with mininode_lock:\n-                for c in self.connections:\n-                    if c.cb.received_ping_response(counter) is not True:\n-                        received_pongs = False\n-                        break\n+        def received_pongs():\n+            return all(node.received_ping_response(counter) for node in self.test_nodes)\n+        return wait_until(received_pongs)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n     # then send get_headers to find out the tip of each node, and synchronize\n     # the response by using a ping (and waiting for pong with same nonce).\n     def sync_blocks(self, blockhash, num_blocks):\n-        # Wait for nodes to request block (50ms sleep * 20 tries * num_blocks)\n-        max_tries = 20*num_blocks\n-        while max_tries > 0:\n-            with mininode_lock:\n-                results = [ blockhash in c.cb.block_request_map and\n-                            c.cb.block_request_map[blockhash] for c in self.connections ]\n-            if False not in results:\n-                break\n-            time.sleep(0.05)\n-            max_tries -= 1\n+        def blocks_requested():\n+            return all(\n+                blockhash in node.block_request_map and node.block_request_map[blockhash]\n+                for node in self.test_nodes\n+            )\n \n         # --> error if not requested\n-        if max_tries == 0:\n+        if not wait_until(blocks_requested, attempts=20*num_blocks):\n             # print [ c.cb.block_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested block\")\n         # --> Answer request (we did this inline!)\n@@ -202,18 +207,14 @@ def sync_blocks(self, blockhash, num_blocks):\n     # Analogous to sync_block (see above)\n     def sync_transaction(self, txhash, num_events):\n         # Wait for nodes to request transaction (50ms sleep * 20 tries * num_events)\n-        max_tries = 20*num_events\n-        while max_tries > 0:\n-            with mininode_lock:\n-                results = [ txhash in c.cb.tx_request_map and\n-                            c.cb.tx_request_map[txhash] for c in self.connections ]\n-            if False not in results:\n-                break\n-            time.sleep(0.05)\n-            max_tries -= 1\n+        def transaction_requested():\n+            return all(\n+                txhash in node.tx_request_map and node.tx_request_map[txhash]\n+                for node in self.test_nodes\n+            )\n \n         # --> error if not requested\n-        if max_tries == 0:\n+        if not wait_until(transaction_requested, attempts=20*num_events):\n             # print [ c.cb.tx_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested transaction\")\n         # --> Answer request (we did this inline!)\n@@ -336,6 +337,7 @@ def run(self):\n             print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n             test_number += 1\n \n+        [ c.disconnect_node() for c in self.connections ]\n+        self.wait_for_disconnections()\n         self.block_store.close()\n         self.tx_store.close()\n-        [ c.disconnect_node() for c in self.connections ]"
      },
      {
        "sha": "f9ec6f429bac5f3a11203c58e26b01eb36d08568",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 49,
        "deletions": 17,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,11 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Exercise the wallet.  Ported from wallet.sh.  \n+# Exercise the wallet.  Ported from wallet.sh.\n # Does the following:\n #   a) creates 3 nodes, with an empty chain (no blocks).\n #   b) node0 mines a block\n-#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n+#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none.\n #   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n #   e) node0 mines a block, collects the fee on the second transaction\n #   f) node1 mines 100 blocks, to mature node0's just-mined block\n@@ -75,14 +75,14 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 21)\n \n         # Node0 should have two unspent outputs.\n-        # Create a couple of transactions to send them to node2, submit them through \n-        # node1, and make sure both node0 and node2 pick them up properly: \n+        # Create a couple of transactions to send them to node2, submit them through\n+        # node1, and make sure both node0 and node2 pick them up properly:\n         node0utxos = self.nodes[0].listunspent(1)\n         assert_equal(len(node0utxos), 2)\n \n         # create both transactions\n         txns_to_send = []\n-        for utxo in node0utxos: \n+        for utxo in node0utxos:\n             inputs = []\n             outputs = {}\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n@@ -149,35 +149,35 @@ def run_test (self):\n         sync_mempools(self.nodes)\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n-        \n+\n         #check if we can list zero value tx as available coins\n         #1. create rawtx\n-        #2. hex-changed one output to 0.0 \n+        #2. hex-changed one output to 0.0\n         #3. sign and send\n         #4. check if recipient (node0) can list the zero value tx\n         usp = self.nodes[1].listunspent()\n         inputs = [{\"txid\":usp[0]['txid'], \"vout\":usp[0]['vout']}]\n         outputs = {self.nodes[1].getnewaddress(): 49.998, self.nodes[0].getnewaddress(): 11.11}\n-        \n+\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n         signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         sendResp = self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n-        \n+\n         self.sync_all()\n         self.nodes[1].generate(1) #mine a block\n         self.sync_all()\n-        \n+\n         unspentTxs = self.nodes[0].listunspent() #zero value tx must be in listunspents output\n         found = False\n         for uTx in unspentTxs:\n             if uTx['txid'] == zeroValueTxid:\n                 found = True\n                 assert_equal(uTx['amount'], Decimal('0.00000000'));\n         assert(found)\n-        \n+\n         #do some -walletbroadcast tests\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -192,17 +192,17 @@ def run_test (self):\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n-        \n+\n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n-        \n+\n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n-        \n+\n         #restart the nodes with -walletbroadcast=1\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -211,12 +211,44 @@ def run_test (self):\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         sync_blocks(self.nodes)\n-        \n+\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n-        \n+\n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n         assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n-        \n+\n+        #send a tx with value in a string (PR#6380 +)\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-2.00000000'))\n+\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"0.0001\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #check if JSON parser can handle scientific notation in strings\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1e-4\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #this should fail\n+        errorString = \"\"\n+        try:\n+            txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"Invalid amount\" in errorString, True);\n+\n+        errorString = \"\"\n+        try:\n+            self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"not an integer\" in errorString, True);\n+\n+\n if __name__ == '__main__':\n     WalletTest ().main ()"
      },
      {
        "sha": "748f2b14d53a6276e775c3f47a85020d30f6d99e",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -185,13 +185,13 @@ BITCOIN_QT_H = \\\n   qt/paymentrequestplus.h \\\n   qt/paymentserver.h \\\n   qt/peertablemodel.h \\\n+  qt/platformstyle.h \\\n   qt/qvalidatedlineedit.h \\\n   qt/qvaluecombobox.h \\\n   qt/receivecoinsdialog.h \\\n   qt/receiverequestdialog.h \\\n   qt/recentrequeststablemodel.h \\\n   qt/rpcconsole.h \\\n-  qt/scicon.h \\\n   qt/sendcoinsdialog.h \\\n   qt/sendcoinsentry.h \\\n   qt/signverifymessagedialog.h \\\n@@ -273,10 +273,10 @@ BITCOIN_QT_CPP = \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\\n   qt/peertablemodel.cpp \\\n+  qt/platformstyle.cpp \\\n   qt/qvalidatedlineedit.cpp \\\n   qt/qvaluecombobox.cpp \\\n   qt/rpcconsole.cpp \\\n-  qt/scicon.cpp \\\n   qt/splashscreen.cpp \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp"
      },
      {
        "sha": "82891989598f7ea83152121d7b1a5567b69232d2",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -15,6 +15,8 @@ EXTRA_DIST += \\\n \ttest/data/tx394b54bb.hex \\\n \ttest/data/txcreate1.hex \\\n \ttest/data/txcreate2.hex \\\n+\ttest/data/txcreatedata1.hex \\\n+\ttest/data/txcreatedata2.hex \\\n \ttest/data/txcreatesign.hex\n \n JSON_TEST_FILES = \\\n@@ -73,6 +75,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "91e54a9178e4546669dcc059b3a42ec8a4764131",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,6 +11,7 @@\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n #include <algorithm>"
      },
      {
        "sha": "b46918198448b1487e500a49dfceea3bec4b434e",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"tinyformat.h\"\n \n+const std::string CURRENCY_UNIT = \"BTC\";\n+\n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n@@ -27,5 +29,5 @@ CAmount CFeeRate::GetFee(size_t nSize) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n+    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "90e6b5aa8ed577868a15da0ad50fbbcdcfc42f79",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -16,6 +16,8 @@ typedef int64_t CAmount;\n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n+extern const std::string CURRENCY_UNIT;\n+\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin"
      },
      {
        "sha": "90014b9496a8f887cdeee0017edaa3c5aba03d5d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -146,14 +146,21 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0], &vchData[Size]);\n+        if (vchData.size() == Size) {\n+            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            ret.Decode(&vchData[0]);\n+        }\n         return ret;\n     }\n \n     CBitcoinExtKeyBase(const K &key) {\n         SetKey(key);\n     }\n \n+    CBitcoinExtKeyBase(const std::string& strBase58c) {\n+        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n+    }\n+\n     CBitcoinExtKeyBase() {}\n };\n "
      },
      {
        "sha": "97a073174d1084094f312a9e67f0674f3d17ad15",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -70,6 +70,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n         strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n             _(\"This command requires JSON registers:\") +\n@@ -143,13 +144,14 @@ static void RegisterLoad(const string& strInput)\n         valStr.insert(valStr.size(), buf, bread);\n     }\n \n-    if (ferror(f)) {\n+    int error = ferror(f);\n+    fclose(f);\n+\n+    if (error) {\n         string strErr = \"Error reading file \" + filename;\n         throw runtime_error(strErr);\n     }\n \n-    fclose(f);\n-\n     // evaluate as JSON buffer register\n     RegisterSetJson(key, valStr);\n }\n@@ -230,6 +232,35 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n     tx.vout.push_back(txout);\n }\n \n+static void MutateTxAddOutData(CMutableTransaction& tx, const string& strInput)\n+{\n+    CAmount value = 0;\n+\n+    // separate [VALUE:]DATA in string\n+    size_t pos = strInput.find(':');\n+\n+    if (pos==0)\n+        throw runtime_error(\"TX output value not specified\");\n+\n+    if (pos != string::npos) {\n+        // extract and validate VALUE\n+        string strValue = strInput.substr(0, pos);\n+        if (!ParseMoney(strValue, value))\n+            throw runtime_error(\"invalid TX output value\");\n+    }\n+\n+    // extract and validate DATA\n+    string strData = strInput.substr(pos + 1, string::npos);\n+\n+    if (!IsHex(strData))\n+        throw runtime_error(\"invalid TX output data\");\n+\n+    std::vector<unsigned char> data = ParseHex(strData);\n+\n+    CTxOut txout(value, CScript() << OP_RETURN << data);\n+    tx.vout.push_back(txout);\n+}\n+\n static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n {\n     // separate VALUE:SCRIPT in string\n@@ -469,6 +500,8 @@ static void MutateTx(CMutableTransaction& tx, const string& command,\n         MutateTxDelOutput(tx, commandVal);\n     else if (command == \"outaddr\")\n         MutateTxAddOutAddr(tx, commandVal);\n+    else if (command == \"outdata\")\n+        MutateTxAddOutData(tx, commandVal);\n     else if (command == \"outscript\")\n         MutateTxAddOutScript(tx, commandVal);\n "
      },
      {
        "sha": "39bb301f4419b1f1a3c8e594eee36919a60c8613",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"rpcserver.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"noui.h\"\n #include \"scheduler.h\"\n #include \"util.h\""
      },
      {
        "sha": "de87206592c35b928834ee2f4d637d3e150d9a25",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -8,6 +8,7 @@\n #include \"hash.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"random.h\"\n #include \"streams.h\"\n \n #include <math.h>\n@@ -121,6 +122,12 @@ void CBloomFilter::clear()\n     isEmpty = true;\n }\n \n+void CBloomFilter::reset(unsigned int nNewTweak)\n+{\n+    clear();\n+    nTweak = nNewTweak;\n+}\n+\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n@@ -209,15 +216,17 @@ void CBloomFilter::UpdateEmptyFull()\n     isEmpty = empty;\n }\n \n-CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate, unsigned int nTweak) :\n-    b1(nElements * 2, fpRate, nTweak), b2(nElements * 2, fpRate, nTweak)\n+CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate) :\n+    b1(nElements * 2, fpRate, 0), b2(nElements * 2, fpRate, 0)\n {\n     // Implemented using two bloom filters of 2 * nElements each.\n     // We fill them up, and clear them, staggered, every nElements\n     // inserted, so at least one always contains the last nElements\n     // inserted.\n-    nBloomSize = nElements * 2;\n     nInsertions = 0;\n+    nBloomSize = nElements * 2;\n+\n+    reset();\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -234,6 +243,12 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n+void CRollingBloomFilter::insert(const uint256& hash)\n+{\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    insert(data);\n+}\n+\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (nInsertions < nBloomSize / 2) {\n@@ -242,9 +257,16 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return b1.contains(vKey);\n }\n \n-void CRollingBloomFilter::clear()\n+bool CRollingBloomFilter::contains(const uint256& hash) const\n+{\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    return contains(data);\n+}\n+\n+void CRollingBloomFilter::reset()\n {\n-    b1.clear();\n-    b2.clear();\n+    unsigned int nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n+    b1.reset(nNewTweak);\n+    b2.reset(nNewTweak);\n     nInsertions = 0;\n }"
      },
      {
        "sha": "a4dba8cb4f7187251d43dfab96e0435fbf98c481",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -89,6 +89,7 @@ class CBloomFilter\n     bool contains(const uint256& hash) const;\n \n     void clear();\n+    void reset(unsigned int nNewTweak);\n \n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n@@ -103,20 +104,29 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method\n+ * reset() is provided, which also changes nTweak to decrease the impact of\n+ * false-positives.\n  *\n  * contains(item) will always return true if item was one of the last N things\n  * insert()'ed ... but may also return true for items that were not inserted.\n  */\n class CRollingBloomFilter\n {\n public:\n-    CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+    // A random bloom filter calls GetRand() at creation time.\n+    // Don't create global CRollingBloomFilter objects, as they may be\n+    // constructed before the randomizer is properly initialized.\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate);\n \n     void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const uint256& hash) const;\n \n-    void clear();\n+    void reset();\n \n private:\n     unsigned int nBloomSize;"
      },
      {
        "sha": "623104690a16b81174dd09e45a555f6ce8d713c9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n@@ -48,10 +48,10 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutput\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n-static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n@@ -91,7 +91,7 @@ class CMainParams : public CChainParams {\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n \n-        genesis = CreateGenesisBlock();\n+        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -164,9 +164,10 @@ class CTestNetParams : public CChainParams {\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 414098458);\n+        genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -216,16 +217,19 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n-        consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n         nPruneAfterHeight = 1000;\n \n+        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n "
      },
      {
        "sha": "a9822eed89b60e90669d9003f6f61a508b5fc4e9",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "bc965f9e19dfa0a509801bab11bf632a210809b6",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -14,6 +14,8 @@ class CCoinControl\n     CTxDestination destChange;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n+    //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n+    bool fAllowWatchOnly;\n \n     CCoinControl()\n     {\n@@ -24,6 +26,7 @@ class CCoinControl\n     {\n         destChange = CNoDestination();\n         fAllowOtherInputs = false;\n+        fAllowWatchOnly = false;\n         setSelected.clear();\n     }\n "
      },
      {
        "sha": "d6051edc385dc899c168d2420b3ee608c9378d5b",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -28,25 +28,29 @@ class CValidationState {\n     } mode;\n     int nDoS;\n     std::string strRejectReason;\n-    unsigned char chRejectCode;\n+    unsigned int chRejectCode;\n     bool corruptionPossible;\n+    std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n-             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n+             unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n+             bool corruptionIn=false,\n+             const std::string &strDebugMessageIn=\"\") {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n         corruptionPossible = corruptionIn;\n+        strDebugMessage = strDebugMessageIn;\n         if (mode == MODE_ERROR)\n             return ret;\n         nDoS += level;\n         mode = MODE_INVALID;\n         return ret;\n     }\n     bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+                 unsigned int _chRejectCode=0, const std::string &_strRejectReason=\"\",\n+                 const std::string &_strDebugMessage=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason, false, _strDebugMessage);\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)\n@@ -73,8 +77,9 @@ class CValidationState {\n     bool CorruptionPossible() const {\n         return corruptionPossible;\n     }\n-    unsigned char GetRejectCode() const { return chRejectCode; }\n+    unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n+    std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "085e04fdfd7d5bcc9bcf570dcb2b829462f59c1d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 22,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,6 +11,8 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n@@ -23,11 +25,14 @@\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif\n@@ -309,7 +314,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n@@ -337,16 +342,17 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n@@ -367,7 +373,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, proxy, prune\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -383,7 +389,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n@@ -436,6 +443,9 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        }\n     }\n \n     return strUsage;\n@@ -668,6 +678,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n     if (mapArgs.count(\"-bind\")) {\n@@ -739,7 +752,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     \n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n+    int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n     int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n     nWhiteConnections = std::max(nUserWhiteConnections, 0);\n@@ -941,8 +954,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n+    if (fPrintToDebugLog)\n+        OpenDebugLog();\n+\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n@@ -1005,6 +1020,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     RegisterNodeSignals(GetNodeSignals());\n \n+    // format user agent, check total size\n+    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>());\n+    if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n+        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n+            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n+    }\n+\n     if (mapArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {\n@@ -1215,6 +1237,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n                         MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", 288));\n                 }\n+\n+                {\n+                    LOCK(cs_main);\n+                    CBlockIndex* tip = chainActive.Tip();\n+                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                \"This may be due to your computer's date and time being set incorrectly. \"\n+                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                        break;\n+                    }\n+                }\n+\n                 if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n                               GetArg(\"-checkblocks\", 288))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n@@ -1265,15 +1299,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.ReadFeeEstimates(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // if prune mode, unset NODE_NETWORK and prune block files\n-    if (fPruneMode) {\n-        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n-        nLocalServices &= ~NODE_NETWORK;\n-        if (!fReindex) {\n-            PruneAndFlush();\n-        }\n-    }\n-\n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n     if (fDisableWallet) {\n@@ -1427,7 +1452,21 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif // !ENABLE_WALLET\n-    // ********************************************************* Step 9: import blocks\n+\n+    // ********************************************************* Step 9: data directory maintenance\n+\n+    // if pruning, unset the service bit and perform the initial blockstore prune\n+    // after any wallet rescanning has taken place.\n+    if (fPruneMode) {\n+        uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n+        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n+        nLocalServices &= ~NODE_NETWORK;\n+        if (!fReindex) {\n+            PruneAndFlush();\n+        }\n+    }\n+\n+    // ********************************************************* Step 10: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n@@ -1451,7 +1490,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             MilliSleep(10);\n     }\n \n-    // ********************************************************* Step 10: start node\n+    // ********************************************************* Step 11: start node\n \n     if (!CheckDiskSpace())\n         return false;"
      },
      {
        "sha": "cf49ba83ade40e9c77e454dff13aa2ee39afb167",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 6,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -6,23 +6,30 @@\n #include \"keystore.h\"\n \n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n \n-bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool CKeyStore::AddKey(const CKey &key) {\n+    return AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n+bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n-    if (!GetKey(address, key))\n+    if (!GetKey(address, key)) {\n+        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+        if (it != mapWatchKeys.end()) {\n+            vchPubKeyOut = it->second;\n+            return true;\n+        }\n         return false;\n+    }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CKeyStore::AddKey(const CKey &key) {\n-    return AddKeyPubKey(key, key.GetPubKey());\n-}\n-\n bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n@@ -58,17 +65,39 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    //TODO: Use Solver to extract this?\n+    CScript::const_iterator pc = dest.begin();\n+    opcodetype opcode;\n+    std::vector<unsigned char> vch;\n+    if (!dest.GetOp(pc, opcode, vch) || vch.size() < 33 || vch.size() > 65)\n+        return false;\n+    pubKeyOut = CPubKey(vch);\n+    if (!pubKeyOut.IsFullyValid())\n+        return false;\n+    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n+        return false;\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n     return true;\n }\n \n bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys.erase(pubKey.GetID());\n     return true;\n }\n "
      },
      {
        "sha": "b917bf20b4c1d4bce2e8ca9cab2afa729ae4ff2e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -32,7 +32,7 @@ class CKeyStore\n     virtual bool HaveKey(const CKeyID &address) const =0;\n     virtual bool GetKey(const CKeyID &address, CKey& keyOut) const =0;\n     virtual void GetKeys(std::set<CKeyID> &setAddress) const =0;\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const =0;\n \n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n@@ -47,6 +47,7 @@ class CKeyStore\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n+typedef std::map<CKeyID, CPubKey> WatchKeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n typedef std::set<CScript> WatchOnlySet;\n \n@@ -55,11 +56,13 @@ class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     bool HaveKey(const CKeyID &address) const\n     {\n         bool result;"
      },
      {
        "sha": "26cacf95ae91909642f2babf208d8fc468d5d11b",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -58,7 +58,8 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            HandleError(result);\n         }\n         TryCreateDirectory(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());"
      },
      {
        "sha": "9f42819a0added66aaa3ef379bae414e70b9b568",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 167,
        "deletions": 101,
        "changes": 268,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -13,17 +13,25 @@\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"hash.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/script.h\"\n+#include \"script/sigcache.h\"\n+#include \"script/standard.h\"\n+#include \"tinyformat.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <sstream>\n@@ -75,9 +83,9 @@ struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions;\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n-void EraseOrphansFor(NodeId peer);\n+map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);;\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);;\n+void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n@@ -154,6 +162,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is reset. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    boost::scoped_ptr<CRollingBloomFilter> recentRejects;\n+    uint256 hashRecentRejectsChainTip;\n+\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n@@ -527,7 +558,7 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n+bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n@@ -557,7 +588,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n     return true;\n }\n \n-void static EraseOrphanTx(uint256 hash)\n+void static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n@@ -591,7 +622,7 @@ void EraseOrphansFor(NodeId peer)\n }\n \n \n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     unsigned int nEvicted = 0;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n@@ -665,54 +696,45 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n     return true;\n@@ -747,6 +769,14 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n+/** Convert CValidationState to a human-readable message for logging */\n+static std::string FormatStateMessage(const CValidationState &state)\n+{\n+    return strprintf(\"%s%s (code %i)\",\n+        state.GetRejectReason(),\n+        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage(),\n+        state.GetRejectCode());\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n@@ -756,31 +786,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         *pfMissingInputs = false;\n \n     if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n+        return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n-        return state.DoS(100, error(\"AcceptToMemoryPool: coinbase as individual tx\"),\n-                         REJECT_INVALID, \"coinbase\");\n+        return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n     if (!CheckFinalTx(tx))\n-        return state.DoS(0, error(\"AcceptToMemoryPool: non-final\"),\n-                         REJECT_NONSTANDARD, \"non-final\");\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n-        return false;\n+        return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n     {\n@@ -791,7 +817,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         if (pool.mapNextTx.count(outpoint))\n         {\n             // Disable replacement feature for now\n-            return false;\n+            return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n         }\n     }\n     }\n@@ -808,7 +834,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // do we already have it?\n         if (view.HaveCoins(hash))\n-            return false;\n+            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n@@ -817,14 +843,13 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n-                return false;\n+                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n             }\n         }\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -837,7 +862,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n+            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n@@ -847,10 +872,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+                strprintf(\"%d > %d\", nSigOps, MAX_STANDARD_TX_SIGOPS));\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -862,9 +885,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                strprintf(\"%d < %d\", nFees, txMinFee));\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n         if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n@@ -889,23 +911,20 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n-                         hash.ToString(),\n-                         nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n+            return state.Invalid(false,\n+                REJECT_HIGHFEE, \"absurdly-high-fee\",\n+                strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n-        }\n+            return false;\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -918,7 +937,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // can be exploited as a DoS attack.\n         if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n         {\n-            return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n+            return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n+                __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n         // Store transaction in memory\n@@ -1003,7 +1023,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n // CBlock and CBlockIndex\n //\n \n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1196,9 +1216,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()));\n+    CBlockIndex *tip = chainActive.Tip();\n+    assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0),\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()));\n+      tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n+      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n \n@@ -1207,7 +1229,8 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n+            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n                 Misbehaving(it->second, nDoS);\n@@ -1257,7 +1280,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return false;\n     }\n     return true;\n }\n@@ -1275,7 +1298,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n \n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n@@ -1288,33 +1311,29 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n             // If prev is coinbase, check that it's matured\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+                    return state.Invalid(false,\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n }// namespace Consensus\n@@ -1485,7 +1504,7 @@ static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const CO\n     return fClean;\n }\n \n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -1760,7 +1779,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n+                return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n+                    tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);\n         }\n \n@@ -2042,7 +2062,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *pblock) {\n+bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2174,7 +2194,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n+static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2243,7 +2263,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     const CChainParams& chainParams = Params();\n@@ -2587,7 +2607,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n+                tx.GetHash().ToString(),\n+                FormatStateMessage(state));\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2714,7 +2736,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     return true;\n }\n \n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n@@ -2726,16 +2748,23 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     // Try to process all requested blocks that we don't have, but only\n     // process an unrequested block if it's new and has enough work to\n-    // advance our tip.\n+    // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n     bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    // Blocks that are too out-of-order needlessly limit the effectiveness of\n+    // pruning, because pruning will not delete block files that contain any\n+    // blocks which are too close in height to the tip.  Apply this test\n+    // regardless of whether pruning is enabled; it should generally be safe to\n+    // not process unrequested blocks.\n+    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n+        if (fTooFarAhead) return true;      // Block height is too high\n     }\n \n     if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n@@ -2784,7 +2813,7 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n     bool checked = CheckBlock(*pblock, state);\n@@ -3233,6 +3262,7 @@ void UnloadBlockIndex()\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n+    recentRejects.reset(NULL);\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;\n@@ -3253,6 +3283,10 @@ bool LoadBlockIndex()\n bool InitBlockIndex() {\n     const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n+\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -3383,7 +3417,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {\n@@ -3649,16 +3683,27 @@ std::string GetWarnings(const std::string& strFor)\n //\n \n \n-bool static AlreadyHave(const CInv& inv)\n+bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     switch (inv.type)\n     {\n     case MSG_TX:\n         {\n-            bool txInMap = false;\n-            txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n-                pcoinsTip->HaveCoins(inv.hash);\n+            assert(recentRejects);\n+            if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n+            {\n+                // If the chain tip has changed previously rejected transactions\n+                // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+                // or a double-spend. Reset the rejects filter and give those\n+                // txs a second chance.\n+                hashRecentRejectsChainTip = chainActive.Tip()->GetBlockHash();\n+                recentRejects->reset();\n+            }\n+\n+            return recentRejects->contains(inv.hash) ||\n+                   mempool.exists(inv.hash) ||\n+                   mapOrphanTransactions.count(inv.hash) ||\n+                   pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n@@ -3844,7 +3889,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, 256);\n+            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n             pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n         }\n         if (!vRecv.empty())\n@@ -4258,6 +4303,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        assert(recentRejects);\n+                        recentRejects->insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n                 }\n@@ -4275,20 +4322,34 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());\n+            }\n+            if (pfrom->fWhitelisted) {\n+                // Always relay transactions received from whitelisted peers, even\n+                // if they were rejected from the mempool, allowing the node to\n+                // function as a gateway for nodes hidden behind it.\n+                //\n+                // FIXME: This includes invalid transactions, which means a\n+                // whitelisted peer could get us banned! We may want to change\n+                // that.\n+                RelayTransaction(tx);\n+            }\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {\n-            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n+            LogPrint(\"mempoolrej\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n-                state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n+                FormatStateMessage(state));\n+            if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n+                pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                                   state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n@@ -4360,10 +4421,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->AddInventoryKnown(inv);\n \n         CValidationState state;\n-        // Process all blocks from whitelisted peers, even if not requested.\n-        ProcessNewBlock(state, pfrom, &block, pfrom->fWhitelisted, NULL);\n+        // Process all blocks from whitelisted peers, even if not requested,\n+        // unless we're still syncing with the network.\n+        // Such an unrequested block may still be processed, subject to the\n+        // conditions in AcceptBlock().\n+        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {\n@@ -4778,7 +4844,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             {\n                 // Periodically clear addrKnown to allow refresh broadcasts\n                 if (nLastRebroadcast)\n-                    pnode->addrKnown.clear();\n+                    pnode->addrKnown.reset();\n \n                 // Rebroadcast our address\n                 AdvertizeLocal(pnode);"
      },
      {
        "sha": "e3479b4b3b552866d93c550d4ad628b6aaa6a6f5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,18 +12,10 @@\n \n #include \"amount.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"coins.h\"\n #include \"net.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"script/sigcache.h\"\n-#include \"script/standard.h\"\n+#include \"script/script_error.h\"\n #include \"sync.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -41,6 +33,7 @@ class CBlockTreeDB;\n class CBloomFilter;\n class CInv;\n class CScriptCheck;\n+class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n \n@@ -149,7 +142,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -186,7 +179,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -342,7 +335,7 @@ class CScriptCheck\n \n \n /** Functions for disk access for blocks */\n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n@@ -353,7 +346,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n  *  will be true if no problems were found. Otherwise, the return value will be false in case\n  *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n@@ -370,7 +363,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n \n \n@@ -462,4 +455,16 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n+/** Reject codes greater or equal to this can be returned by AcceptToMemPool\n+ * for transactions, to signal internal conditions. They cannot and should not\n+ * be sent over the P2P network.\n+ */\n+static const unsigned int REJECT_INTERNAL = 0x100;\n+/** Too high fee. Can not be triggered by P2P transactions */\n+static const unsigned int REJECT_HIGHFEE = 0x100;\n+/** Transaction is already known (either in mempool or blockchain) */\n+static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n+/** Transaction conflicts with a transaction already known */\n+static const unsigned int REJECT_CONFLICT = 0x102;\n+\n #endif // BITCOIN_MAIN_H"
      },
      {
        "sha": "4172266067440e21771742cb540559627c83ca68",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -6,7 +6,9 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n+#include \"coins.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n@@ -15,7 +17,9 @@\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/standard.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n@@ -80,13 +84,19 @@ class TxPriorityCompare\n     }\n };\n \n-void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    int64_t nOldTime = pblock->nTime;\n+    int64_t nNewTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+\n+    if (nOldTime < nNewTime)\n+        pblock->nTime = nNewTime;\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)\n         pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+\n+    return nNewTime - nOldTime;\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -342,7 +352,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -399,7 +409,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n+static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -517,7 +527,9 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                     break;\n \n                 // Update nTime every few seconds\n-                UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+                if (UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev) < 0)\n+                    break; // Recreate the block if the clock has run backwards,\n+                           // so that we can use the correct time.\n                 if (chainparams.GetConsensus().fPowAllowMinDifficultyBlocks)\n                 {\n                     // Changing pblock->nTime can change work required on testnet:"
      },
      {
        "sha": "7e0e58d54013c91654d2e50677b0cf157de871f9",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -29,7 +29,7 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "e4ead3c92e432bea07f38aa57e5ea9abec9ece10",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,10 +12,12 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"crypto/common.h\"\n+#include \"hash.h\"\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\"\n-#include \"crypto/common.h\"\n+#include \"utilstrencodings.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -78,9 +80,10 @@ static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n-int nMaxConnections = 125;\n+int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n+std::string strSubVersion;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -443,7 +446,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight, true);\n+                nLocalHostNonce, strSubVersion, nBestHeight, true);\n }\n \n \n@@ -2058,7 +2061,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n-    addrKnown(5000, 0.001, insecure_rand()),\n+    addrKnown(5000, 0.001),\n     setInventoryKnown(SendBufferSize() / 1000)\n {\n     nServices = 0;\n@@ -2183,8 +2186,10 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n         Fuzz(GetArg(\"-fuzzmessagestest\", 10));\n \n     if (ssSend.size() == 0)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_vSend);\n         return;\n-\n+    }\n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n     WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);"
      },
      {
        "sha": "efa2e29bb517ab20968032118912a9fb166ff7af",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"bloom.h\"\n #include \"compat.h\"\n-#include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"mruset.h\"\n #include \"netbase.h\"\n@@ -17,7 +16,6 @@\n #include \"streams.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n \n #include <deque>\n #include <stdint.h>\n@@ -31,7 +29,6 @@\n #include <boost/signals2/signal.hpp>\n \n class CAddrMan;\n-class CBlockIndex;\n class CScheduler;\n class CNode;\n \n@@ -49,6 +46,8 @@ static const unsigned int MAX_INV_SZ = 50000;\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n+/** Maximum length of strSubVer in `version` message */\n+static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -59,6 +58,8 @@ static const bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+/** The maximum number of peer connections to maintain. */\n+static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n@@ -169,6 +170,9 @@ extern CCriticalSection cs_vAddedNodes;\n extern NodeId nLastNodeId;\n extern CCriticalSection cs_nLastNodeId;\n \n+/** Subversion as sent to the P2P network in `version` messages */\n+extern std::string strSubVersion;\n+\n struct LocalServiceInfo {\n     int nScore;\n     int nPort;"
      },
      {
        "sha": "cdee541d2f27027e8c5d3a150649dc9c88f6c5aa",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -249,7 +249,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n-    LogPrint(\"estimatefee\", \"adding to %s\\n\", dataTypeString);\n+    LogPrint(\"estimatefee\", \"adding to %s\", dataTypeString);\n     return bucketindex;\n }\n \n@@ -390,8 +390,9 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n         mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n     }\n     else {\n-        LogPrint(\"estimatefee\", \"not adding\\n\");\n+        LogPrint(\"estimatefee\", \"not adding\");\n     }\n+    LogPrint(\"estimatefee\", \"\\n\");\n }\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)"
      },
      {
        "sha": "8bd158644604fc3c09b296701fdc1118f1e49c10",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -14,14 +14,14 @@\n #include \"csvmodelwriter.h\"\n #include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n \n #include <QIcon>\n #include <QMenu>\n #include <QMessageBox>\n #include <QSortFilterProxyModel>\n \n-AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n+AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::AddressBookPage),\n     model(0),\n@@ -30,17 +30,17 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->newAddress->setIcon(QIcon());\n-    ui->copyAddress->setIcon(QIcon());\n-    ui->deleteAddress->setIcon(QIcon());\n-    ui->exportButton->setIcon(QIcon());\n-#else\n-    ui->newAddress->setIcon(SingleColorIcon(\":/icons/add\"));\n-    ui->copyAddress->setIcon(SingleColorIcon(\":/icons/editcopy\"));\n-    ui->deleteAddress->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->exportButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->newAddress->setIcon(QIcon());\n+        ui->copyAddress->setIcon(QIcon());\n+        ui->deleteAddress->setIcon(QIcon());\n+        ui->exportButton->setIcon(QIcon());\n+    } else {\n+        ui->newAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/add\"));\n+        ui->copyAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/editcopy\"));\n+        ui->deleteAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->exportButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n \n     switch(mode)\n     {"
      },
      {
        "sha": "92e6cab9acbc9372f4c3ec7953d9bc6b454ced1c",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,6 +9,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class AddressBookPage;\n@@ -39,7 +40,7 @@ class AddressBookPage : public QDialog\n         ForEditing  /**< Open address book for editing */\n     };\n \n-    explicit AddressBookPage(Mode mode, Tabs tab, QWidget *parent);\n+    explicit AddressBookPage(const PlatformStyle *platformStyle, Mode mode, Tabs tab, QWidget *parent);\n     ~AddressBookPage();\n \n     void setModel(AddressTableModel *model);"
      },
      {
        "sha": "1da2d3e34411669f4c6127d62fbb6246324f8895",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -8,12 +8,14 @@\n \n #include \"bitcoingui.h\"\n \n+#include \"chainparams.h\"\n #include \"clientmodel.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n #include \"networkstyle.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n #include \"winshutdownmonitor.h\"\n@@ -24,7 +26,6 @@\n #endif\n \n #include \"init.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\"\n@@ -59,7 +60,9 @@ Q_IMPORT_PLUGIN(qtwcodecs)\n Q_IMPORT_PLUGIN(qkrcodecs)\n Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n #else\n+#if QT_VERSION < 0x050400\n Q_IMPORT_PLUGIN(AccessibleFactory)\n+#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)\n@@ -239,6 +242,7 @@ public Q_SLOTS:\n     WalletModel *walletModel;\n #endif\n     int returnValue;\n+    const PlatformStyle *platformStyle;\n \n     void startThread();\n };\n@@ -308,6 +312,22 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     returnValue(0)\n {\n     setQuitOnLastWindowClosed(false);\n+\n+    // UI per-platform customization\n+    // This must be done inside the BitcoinApplication constructor, or after it, because\n+    // PlatformStyle::instantiate requires a QApplication\n+#if defined(Q_OS_MAC)\n+    std::string platformName = \"macosx\";\n+#elif defined(Q_OS_WIN)\n+    std::string platformName = \"windows\";\n+#else\n+    std::string platformName = \"other\";\n+#endif\n+    platformName = GetArg(\"-uiplatform\", platformName);\n+    platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n+    if (!platformStyle) // Fall back to \"other\" if specified name not found\n+        platformStyle = PlatformStyle::instantiate(\"other\");\n+    assert(platformStyle);\n }\n \n BitcoinApplication::~BitcoinApplication()\n@@ -328,6 +348,8 @@ BitcoinApplication::~BitcoinApplication()\n #endif\n     delete optionsModel;\n     optionsModel = 0;\n+    delete platformStyle;\n+    platformStyle = 0;\n }\n \n #ifdef ENABLE_WALLET\n@@ -344,7 +366,7 @@ void BitcoinApplication::createOptionsModel()\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(networkStyle, 0);\n+    window = new BitcoinGUI(platformStyle, networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n@@ -419,6 +441,8 @@ void BitcoinApplication::initializeResult(int retval)\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n+        // Log this only after AppInit2 finishes, as then logging setup is guaranteed complete\n+        qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n         PaymentServer::LoadRootCAs();\n         paymentServer->setOptionsModel(optionsModel);\n@@ -430,7 +454,7 @@ void BitcoinApplication::initializeResult(int retval)\n #ifdef ENABLE_WALLET\n         if(pwalletMain)\n         {\n-            walletModel = new WalletModel(pwalletMain, optionsModel);\n+            walletModel = new WalletModel(platformStyle, pwalletMain, optionsModel);\n \n             window->addWallet(BitcoinGUI::DEFAULT_WALLET, walletModel);\n             window->setCurrentWallet(BitcoinGUI::DEFAULT_WALLET);"
      },
      {
        "sha": "1d3f7762ab77daf6d8346e73564a4013b1356d46",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 34,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -13,8 +13,8 @@\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"rpcconsole.h\"\n-#include \"scicon.h\"\n #include \"utilitydialog.h\"\n \n #ifdef ENABLE_WALLET\n@@ -60,7 +60,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     walletFrame(0),\n@@ -98,7 +98,8 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     notificator(0),\n     rpcConsole(0),\n     prevBlocks(0),\n-    spinnerFrame(0)\n+    spinnerFrame(0),\n+    platformStyle(platformStyle)\n {\n     GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n \n@@ -130,12 +131,12 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     setUnifiedTitleAndToolBarOnMac(true);\n #endif\n \n-    rpcConsole = new RPCConsole(0);\n+    rpcConsole = new RPCConsole(platformStyle, 0);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n         /** Create wallet frame and make it the central widget */\n-        walletFrame = new WalletFrame(this);\n+        walletFrame = new WalletFrame(platformStyle, this);\n         setCentralWidget(walletFrame);\n     } else\n #endif // ENABLE_WALLET\n@@ -175,7 +176,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     QHBoxLayout *frameBlocksLayout = new QHBoxLayout(frameBlocks);\n     frameBlocksLayout->setContentsMargins(3,0,3,0);\n     frameBlocksLayout->setSpacing(3);\n-    unitDisplayControl = new UnitDisplayStatusBarControl();\n+    unitDisplayControl = new UnitDisplayStatusBarControl(platformStyle);\n     labelEncryptionIcon = new QLabel();\n     labelConnectionsIcon = new QLabel();\n     labelBlocksIcon = new QLabel();\n@@ -247,36 +248,36 @@ void BitcoinGUI::createActions()\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n-    overviewAction = new QAction(SingleColorIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n+    overviewAction = new QAction(platformStyle->SingleColorIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n     overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n     overviewAction->setToolTip(overviewAction->statusTip());\n     overviewAction->setCheckable(true);\n     overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n     tabGroup->addAction(overviewAction);\n \n-    sendCoinsAction = new QAction(SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n+    sendCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n     sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n     sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n     sendCoinsAction->setCheckable(true);\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n-    sendCoinsMenuAction = new QAction(TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n+    sendCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n     sendCoinsMenuAction->setStatusTip(sendCoinsAction->statusTip());\n     sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n \n-    receiveCoinsAction = new QAction(SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n+    receiveCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n     receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoin: URIs)\"));\n     receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n-    receiveCoinsMenuAction = new QAction(TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n+    receiveCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n     receiveCoinsMenuAction->setStatusTip(receiveCoinsAction->statusTip());\n     receiveCoinsMenuAction->setToolTip(receiveCoinsMenuAction->statusTip());\n \n-    historyAction = new QAction(SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n+    historyAction = new QAction(platformStyle->SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n     historyAction->setStatusTip(tr(\"Browse transaction history\"));\n     historyAction->setToolTip(historyAction->statusTip());\n     historyAction->setCheckable(true);\n@@ -300,46 +301,46 @@ void BitcoinGUI::createActions()\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n #endif // ENABLE_WALLET\n \n-    quitAction = new QAction(TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n+    quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    aboutAction = new QAction(TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n+    aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n     aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n-    aboutQtAction = new QAction(TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n+    aboutQtAction = new QAction(platformStyle->TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n     aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n-    optionsAction = new QAction(TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n+    optionsAction = new QAction(platformStyle->TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin Core\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    toggleHideAction = new QAction(TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n-    encryptWalletAction = new QAction(TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n+    encryptWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n-    backupWalletAction = new QAction(TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n+    backupWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n-    changePassphraseAction = new QAction(TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n+    changePassphraseAction = new QAction(platformStyle->TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n     changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n-    signMessageAction = new QAction(TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n-    verifyMessageAction = new QAction(TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n \n-    openRPCConsoleAction = new QAction(TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n+    openRPCConsoleAction = new QAction(platformStyle->TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n \n-    usedSendingAddressesAction = new QAction(TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n+    usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n-    usedReceivingAddressesAction = new QAction(TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n+    usedReceivingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n     usedReceivingAddressesAction->setStatusTip(tr(\"Show the list of used receiving addresses and labels\"));\n \n-    openAction = new QAction(TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n+    openAction = new QAction(platformStyle->TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n-    showHelpMessageAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n@@ -650,7 +651,7 @@ void BitcoinGUI::setNumConnections(int count)\n     case 7: case 8: case 9: icon = \":/icons/connect_3\"; break;\n     default: icon = \":/icons/connect_4\"; break;\n     }\n-    labelConnectionsIcon->setPixmap(SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+    labelConnectionsIcon->setPixmap(platformStyle->SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n@@ -691,7 +692,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n     if(secs < 90*60)\n     {\n         tooltip = tr(\"Up to date\") + QString(\".<br>\") + tooltip;\n-        labelBlocksIcon->setPixmap(SingleColorIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n+        labelBlocksIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n #ifdef ENABLE_WALLET\n         if(walletFrame)\n@@ -737,7 +738,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;\n         if(count != prevBlocks)\n         {\n-            labelBlocksIcon->setPixmap(SingleColorIcon(QString(\n+            labelBlocksIcon->setPixmap(platformStyle->SingleColorIcon(QString(\n                 \":/movies/spinner-%1\").arg(spinnerFrame, 3, 10, QChar('0')))\n                 .pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n             spinnerFrame = (spinnerFrame + 1) % SPINNER_FRAMES;\n@@ -931,15 +932,15 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         break;\n     case WalletModel::Unlocked:\n         labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(SingleColorIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+        labelEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n         break;\n     case WalletModel::Locked:\n         labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+        labelEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n@@ -1041,7 +1042,7 @@ void BitcoinGUI::unsubscribeFromCoreSignals()\n     uiInterface.ThreadSafeMessageBox.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n }\n \n-UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n+UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :\n     optionsModel(0),\n     menu(0)\n {\n@@ -1056,7 +1057,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     }\n     setMinimumSize(max_width, 0);\n     setAlignment(Qt::AlignRight | Qt::AlignVCenter);\n-    setStyleSheet(QString(\"QLabel { color : %1 }\").arg(SingleColor().name()));\n+    setStyleSheet(QString(\"QLabel { color : %1 }\").arg(platformStyle->SingleColor().name()));\n }\n \n /** So that it responds to button clicks */"
      },
      {
        "sha": "dd0d4bb0e20fab93a325b4c4ce0535c093ca41a2",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -22,6 +22,7 @@ class ClientModel;\n class NetworkStyle;\n class Notificator;\n class OptionsModel;\n+class PlatformStyle;\n class RPCConsole;\n class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n@@ -47,7 +48,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const QString DEFAULT_WALLET;\n \n-    explicit BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent = 0);\n+    explicit BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -117,6 +118,8 @@ class BitcoinGUI : public QMainWindow\n     int prevBlocks;\n     int spinnerFrame;\n \n+    const PlatformStyle *platformStyle;\n+\n     /** Create the main UI actions. */\n     void createActions();\n     /** Create the menu bar and sub-menus. */\n@@ -215,7 +218,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     Q_OBJECT\n \n public:\n-    explicit UnitDisplayStatusBarControl();\n+    explicit UnitDisplayStatusBarControl(const PlatformStyle *platformStyle);\n     /** Lets the control know about the Options Model (and its signals) */\n     void setOptionsModel(OptionsModel *optionsModel);\n "
      },
      {
        "sha": "97d6711560e5ccadd5dda367a827ff6cd4254f6b",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,7 +11,6 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n-#include \"main.h\"\n #include \"net.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -182,6 +181,11 @@ QString ClientModel::formatFullVersion() const\n     return QString::fromStdString(FormatFullVersion());\n }\n \n+QString ClientModel::formatSubVersion() const\n+{\n+    return QString::fromStdString(strSubVersion);\n+}\n+\n QString ClientModel::formatBuildDate() const\n {\n     return QString::fromStdString(CLIENT_DATE);"
      },
      {
        "sha": "ca2da3dde07694f24b4e6bfc3110d810b8112a62",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -63,6 +63,7 @@ class ClientModel : public QObject\n     QString getStatusBarWarnings() const;\n \n     QString formatFullVersion() const;\n+    QString formatSubVersion() const;\n     QString formatBuildDate() const;\n     bool isReleaseVersion() const;\n     QString clientName() const;"
      },
      {
        "sha": "51008ad2deb51c3803b4ec1baf666d84cc5a3288",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,12 +9,13 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n+#include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -34,10 +35,11 @@ QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n-CoinControlDialog::CoinControlDialog(QWidget *parent) :\n+CoinControlDialog::CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::CoinControlDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n@@ -279,7 +281,7 @@ void CoinControlDialog::lockCoin()\n     COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->lockCoin(outpt);\n     contextMenuItem->setDisabled(true);\n-    contextMenuItem->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n+    contextMenuItem->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n     updateLabelLocked();\n }\n \n@@ -790,7 +792,7 @@ void CoinControlDialog::updateView()\n                 COutPoint outpt(txhash, out.i);\n                 coinControl->UnSelect(outpt); // just to be sure\n                 itemOutput->setDisabled(true);\n-                itemOutput->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n+                itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox"
      },
      {
        "sha": "8ff1eac7093002afe59e7cae58c280b6b011b1f6",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -16,6 +16,7 @@\n #include <QString>\n #include <QTreeWidgetItem>\n \n+class PlatformStyle;\n class WalletModel;\n \n class CCoinControl;\n@@ -32,7 +33,7 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(QWidget *parent = 0);\n+    explicit CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~CoinControlDialog();\n \n     void setModel(WalletModel *model);\n@@ -57,6 +58,8 @@ class CoinControlDialog : public QDialog\n     QAction *lockAction;\n     QAction *unlockAction;\n \n+    const PlatformStyle *platformStyle;\n+\n     QString strPad(QString, int, QString);\n     void sortView(int, Qt::SortOrder);\n     void updateView();"
      },
      {
        "sha": "22c67b804084e41cb696c3f845cc1fbe5608e602",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 188,
        "deletions": 1,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>560</width>\n-    <height>400</height>\n+    <height>440</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -297,6 +297,193 @@\n          </item>\n         </layout>\n        </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyActiveNets\">\n+           <property name=\"text\">\n+            <string>Used for reaching peers via:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv4\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv4Label\">\n+           <property name=\"text\">\n+            <string>IPv4</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv6\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv6Label\">\n+           <property name=\"text\">\n+            <string>IPv6</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachTor\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachTorLabel\">\n+           <property name=\"text\">\n+            <string>Tor</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_2_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"connectSocksTor\">\n+         <property name=\"toolTip\">\n+          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyIpTorLabel\">\n+           <property name=\"text\">\n+            <string>Proxy &amp;IP:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyIpTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QValidatedLineEdit\" name=\"proxyIpTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyPortTorLabel\">\n+           <property name=\"text\">\n+            <string>&amp;Port:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyPortTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"proxyPortTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Port of the proxy (e.g. 9050)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_4_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Network\">\n          <property name=\"orientation\">"
      },
      {
        "sha": "e8d9a958ad38ee966382c4b018840b0622a67fae",
        "filename": "src/qt/forms/rpcconsole.ui",
        "status": "modified",
        "additions": 47,
        "deletions": 21,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/forms/rpcconsole.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/forms/rpcconsole.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/rpcconsole.ui?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -87,6 +87,32 @@\n         </widget>\n        </item>\n        <item row=\"3\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"labelClientUserAgent\">\n+         <property name=\"text\">\n+          <string>User Agent</string>\n+         </property>\n+         <property name=\"indent\">\n+          <number>10</number>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"3\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"clientUserAgent\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n+         </property>\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"4\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_14\">\n          <property name=\"text\">\n           <string>Using OpenSSL version</string>\n@@ -96,7 +122,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"3\" column=\"1\">\n+       <item row=\"4\" column=\"1\">\n         <widget class=\"QLabel\" name=\"openSSLVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -112,7 +138,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"0\">\n+       <item row=\"5\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_berkeleyDBVersion\">\n          <property name=\"text\">\n           <string>Using BerkeleyDB version</string>\n@@ -122,7 +148,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"1\">\n+       <item row=\"5\" column=\"1\">\n         <widget class=\"QLabel\" name=\"berkeleyDBVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -138,14 +164,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"0\">\n+       <item row=\"6\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_12\">\n          <property name=\"text\">\n           <string>Build date</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"1\">\n+       <item row=\"6\" column=\"1\">\n         <widget class=\"QLabel\" name=\"buildDate\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -161,14 +187,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"0\">\n+       <item row=\"7\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_13\">\n          <property name=\"text\">\n           <string>Startup time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"1\">\n+       <item row=\"7\" column=\"1\">\n         <widget class=\"QLabel\" name=\"startupTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -184,7 +210,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"7\" column=\"0\">\n+       <item row=\"8\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_11\">\n          <property name=\"font\">\n           <font>\n@@ -197,14 +223,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"0\">\n+       <item row=\"9\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_8\">\n          <property name=\"text\">\n           <string>Name</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"1\">\n+       <item row=\"9\" column=\"1\">\n         <widget class=\"QLabel\" name=\"networkName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -220,14 +246,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"0\">\n+       <item row=\"10\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_7\">\n          <property name=\"text\">\n           <string>Number of connections</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"1\">\n+       <item row=\"10\" column=\"1\">\n         <widget class=\"QLabel\" name=\"numberOfConnections\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -243,7 +269,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"10\" column=\"0\">\n+       <item row=\"11\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_10\">\n          <property name=\"font\">\n           <font>\n@@ -256,14 +282,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"11\" column=\"0\">\n+       <item row=\"12\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_3\">\n          <property name=\"text\">\n           <string>Current number of blocks</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"11\" column=\"1\">\n+       <item row=\"12\" column=\"1\">\n         <widget class=\"QLabel\" name=\"numberOfBlocks\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -279,14 +305,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"0\">\n+       <item row=\"13\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_2\">\n          <property name=\"text\">\n           <string>Last block time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"1\">\n+       <item row=\"13\" column=\"1\">\n         <widget class=\"QLabel\" name=\"lastBlockTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -302,7 +328,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"13\" column=\"0\">\n+       <item row=\"14\" column=\"0\">\n         <spacer name=\"verticalSpacer_2\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>\n@@ -315,7 +341,7 @@\n          </property>\n         </spacer>\n        </item>\n-       <item row=\"14\" column=\"0\">\n+       <item row=\"15\" column=\"0\">\n         <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n          <property name=\"font\">\n           <font>\n@@ -328,7 +354,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"15\" column=\"0\">\n+       <item row=\"16\" column=\"0\">\n         <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n          <property name=\"toolTip\">\n           <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n@@ -341,7 +367,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"16\" column=\"0\">\n+       <item row=\"17\" column=\"0\">\n         <spacer name=\"verticalSpacer\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "550dbacf930e819a864067a770b452dd27031c37",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "4ab87e0f32b04b098653a7b66070debe3a7ab2ef",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -6,7 +6,6 @@\n #include \"ui_intro.h\"\n \n #include \"guiutil.h\"\n-#include \"scicon.h\"\n \n #include \"util.h\"\n \n@@ -168,7 +167,7 @@ void Intro::pickDataDirectory()\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;\n         intro.setDataDirectory(dataDir);\n-        intro.setWindowIcon(SingleColorIcon(\":icons/bitcoin\"));\n+        intro.setWindowIcon(QIcon(\":icons/bitcoin\"));\n \n         while(true)\n         {"
      },
      {
        "sha": "4541c75886b6f7c797900182dec08dde7f91a722",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -5,7 +5,6 @@\n #include \"networkstyle.h\"\n \n #include \"guiconstants.h\"\n-#include \"scicon.h\"\n \n #include <QApplication>\n "
      },
      {
        "sha": "f57c1203f67764d305b235c743b5043636ff3b58",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 6,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -13,7 +13,7 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n \n-#include \"main.h\" // for MAX_SCRIPTCHECK_THREADS\n+#include \"main.h\" // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n \n@@ -35,7 +35,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui(new Ui::OptionsDialog),\n     model(0),\n     mapper(0),\n-    fProxyIpValid(true)\n+    fProxyIpsValid(true)\n {\n     ui->setupUi(this);\n \n@@ -54,10 +54,18 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->proxyPort->setEnabled(false);\n     ui->proxyPort->setValidator(new QIntValidator(1, 65535, this));\n \n+    ui->proxyIpTor->setEnabled(false);\n+    ui->proxyPortTor->setEnabled(false);\n+    ui->proxyPortTor->setValidator(new QIntValidator(1, 65535, this));\n+\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n \n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n+\n     ui->proxyIp->installEventFilter(this);\n+    ui->proxyIpTor->installEventFilter(this);\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -110,7 +118,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     mapper->setSubmitPolicy(QDataWidgetMapper::ManualSubmit);\n     mapper->setOrientation(Qt::Vertical);\n \n-    /* setup/change UI elements when proxy IP is invalid/valid */\n+    /* setup/change UI elements when proxy IPs are invalid/valid */\n     connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n }\n \n@@ -137,6 +145,8 @@ void OptionsDialog::setModel(OptionsModel *model)\n         mapper->setModel(model);\n         setMapper();\n         mapper->toFirst();\n+\n+        updateDefaultProxyNets();\n     }\n \n     /* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */\n@@ -149,6 +159,7 @@ void OptionsDialog::setModel(OptionsModel *model)\n     /* Network */\n     connect(ui->allowIncoming, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n     connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    connect(ui->connectSocksTor, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n     /* Display */\n     connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning()));\n     connect(ui->thirdPartyTxUrls, SIGNAL(textChanged(const QString &)), this, SLOT(showRestartWarning()));\n@@ -173,6 +184,10 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->proxyIp, OptionsModel::ProxyIP);\n     mapper->addMapping(ui->proxyPort, OptionsModel::ProxyPort);\n \n+    mapper->addMapping(ui->connectSocksTor, OptionsModel::ProxyUseTor);\n+    mapper->addMapping(ui->proxyIpTor, OptionsModel::ProxyIPTor);\n+    mapper->addMapping(ui->proxyPortTor, OptionsModel::ProxyPortTor);\n+\n     /* Window */\n #ifndef Q_OS_MAC\n     mapper->addMapping(ui->minimizeToTray, OptionsModel::MinimizeToTray);\n@@ -188,7 +203,7 @@ void OptionsDialog::setMapper()\n void OptionsDialog::enableOkButton()\n {\n     /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n-    if(fProxyIpValid)\n+    if(fProxyIpsValid)\n         setOkButtonState(true);\n }\n \n@@ -224,6 +239,7 @@ void OptionsDialog::on_okButton_clicked()\n {\n     mapper->submit();\n     accept();\n+    updateDefaultProxyNets();\n }\n \n void OptionsDialog::on_cancelButton_clicked()\n@@ -257,11 +273,10 @@ void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPo\n {\n     Q_UNUSED(nProxyPort);\n \n-    const std::string strAddrProxy = pUiProxyIp->text().toStdString();\n     CService addrProxy;\n \n     /* Check for a valid IPv4 / IPv6 address */\n-    if (!(fProxyIpValid = LookupNumeric(strAddrProxy.c_str(), addrProxy)))\n+    if (!(fProxyIpsValid = LookupNumeric(pUiProxyIp->text().toStdString().c_str(), addrProxy)))\n     {\n         disableOkButton();\n         pUiProxyIp->setValid(false);\n@@ -275,6 +290,28 @@ void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPo\n     }\n }\n \n+void OptionsDialog::updateDefaultProxyNets()\n+{\n+    proxyType proxy;\n+    std::string strProxy;\n+    QString strDefaultProxyGUI;\n+\n+    GetProxy(NET_IPV4, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv4->setChecked(true) : ui->proxyReachIPv4->setChecked(false);\n+\n+    GetProxy(NET_IPV6, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv6->setChecked(true) : ui->proxyReachIPv6->setChecked(false);\n+\n+    GetProxy(NET_TOR, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);\n+}\n+\n bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n {\n     if(event->type() == QEvent::FocusOut)\n@@ -283,6 +320,10 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n         {\n             Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n+        else if(object == ui->proxyIpTor)\n+        {\n+            Q_EMIT proxyIpChecks(ui->proxyIpTor, ui->proxyPortTor->text().toInt());\n+        }\n     }\n     return QDialog::eventFilter(object, event);\n }"
      },
      {
        "sha": "348489c599a35b5272b241cf5874ace71e6d8c23",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -47,6 +47,8 @@ private Q_SLOTS:\n     void showRestartWarning(bool fPersistent = false);\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    /* query the networks, for which the default proxy is used */\n+    void updateDefaultProxyNets();\n \n Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n@@ -55,7 +57,7 @@ private Q_SLOTS:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     QDataWidgetMapper *mapper;\n-    bool fProxyIpValid;\n+    bool fProxyIpsValid;\n };\n \n #endif // BITCOIN_QT_OPTIONSDIALOG_H"
      },
      {
        "sha": "65e490570e7eb9987d1c5b3e254c07b7fd0ba4f3",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 1,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -13,7 +13,7 @@\n \n #include \"amount.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n \n@@ -117,6 +117,16 @@ void OptionsModel::Init()\n     else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n         addOverriddenOption(\"-proxy\");\n \n+    if (!settings.contains(\"fUseSeparateProxyTor\"))\n+        settings.setValue(\"fUseSeparateProxyTor\", false);\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+        addOverriddenOption(\"-onion\");\n+    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !GetArg(\"-onion\", \"\").empty())\n+        addOverriddenOption(\"-onion\");\n+\n     // Display\n     if (!settings.contains(\"language\"))\n         settings.setValue(\"language\", \"\");\n@@ -178,6 +188,20 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return strlIpPort.at(1);\n         }\n \n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            return settings.value(\"fUseSeparateProxyTor\", false);\n+        case ProxyIPTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n+        }\n+        case ProxyPortTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n+        }\n+\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             return settings.value(\"bSpendZeroConfChange\");\n@@ -259,6 +283,39 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n         }\n         break;\n+\n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n+                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ProxyIPTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+        case ProxyPortTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             if (settings.value(\"bSpendZeroConfChange\") != value) {"
      },
      {
        "sha": "8448cad8de298143b3727655e1c61ae418cb66e5",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -34,6 +34,9 @@ class OptionsModel : public QAbstractListModel\n         ProxyUse,               // bool\n         ProxyIP,                // QString\n         ProxyPort,              // int\n+        ProxyUseTor,            // bool\n+        ProxyIPTor,             // QString\n+        ProxyPortTor,           // int\n         DisplayUnit,            // BitcoinUnits::Unit\n         ThirdPartyTxUrls,       // QString\n         Language,               // QString"
      },
      {
        "sha": "a56c80ac6326ce9aaf6d90dd816e0628ab6955f0",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,7 +10,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactiontablemodel.h\"\n #include \"walletmodel.h\"\n@@ -25,7 +25,9 @@ class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n public:\n-    TxViewDelegate(): QAbstractItemDelegate(), unit(BitcoinUnits::BTC)\n+    TxViewDelegate(const PlatformStyle *platformStyle):\n+        QAbstractItemDelegate(), unit(BitcoinUnits::BTC),\n+        platformStyle(platformStyle)\n     {\n \n     }\n@@ -43,7 +45,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n         int halfheight = (mainRect.height() - 2*ypad)/2;\n         QRect amountRect(mainRect.left() + xspace, mainRect.top()+ypad, mainRect.width() - xspace, halfheight);\n         QRect addressRect(mainRect.left() + xspace, mainRect.top()+ypad+halfheight, mainRect.width() - xspace, halfheight);\n-        icon = SingleColorIcon(icon, SingleColor());\n+        icon = platformStyle->SingleColorIcon(icon);\n         icon.paint(painter, decorationRect);\n \n         QDateTime date = index.data(TransactionTableModel::DateRole).toDateTime();\n@@ -101,11 +103,12 @@ class TxViewDelegate : public QAbstractItemDelegate\n     }\n \n     int unit;\n+    const PlatformStyle *platformStyle;\n \n };\n #include \"overviewpage.moc\"\n \n-OverviewPage::OverviewPage(QWidget *parent) :\n+OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::OverviewPage),\n     clientModel(0),\n@@ -116,13 +119,13 @@ OverviewPage::OverviewPage(QWidget *parent) :\n     currentWatchOnlyBalance(-1),\n     currentWatchUnconfBalance(-1),\n     currentWatchImmatureBalance(-1),\n-    txdelegate(new TxViewDelegate()),\n+    txdelegate(new TxViewDelegate(platformStyle)),\n     filter(0)\n {\n     ui->setupUi(this);\n \n     // use a SingleColorIcon for the \"out of sync warning\" icon\n-    QIcon icon = SingleColorIcon(\":/icons/warning\");\n+    QIcon icon = platformStyle->SingleColorIcon(\":/icons/warning\");\n     icon.addPixmap(icon.pixmap(QSize(64,64), QIcon::Normal), QIcon::Disabled); // also set the disabled icon because we are using a disabled QPushButton to work around missing HiDPI support of QLabel (https://bugreports.qt.io/browse/QTBUG-42503)\n     ui->labelTransactionsStatus->setIcon(icon);\n     ui->labelWalletStatus->setIcon(icon);"
      },
      {
        "sha": "4139eb35d369fe543e7d34716d5bdf4fbe0b2930",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,6 +12,7 @@\n class ClientModel;\n class TransactionFilterProxy;\n class TxViewDelegate;\n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -28,7 +29,7 @@ class OverviewPage : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit OverviewPage(QWidget *parent = 0);\n+    explicit OverviewPage(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~OverviewPage();\n \n     void setClientModel(ClientModel *clientModel);"
      },
      {
        "sha": "0827d99125efc833fba12b161e8bb8a1c0ead24a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "5f149ea8735a8f8ba0033d67c4995e690677697d",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_PEERTABLEMODEL_H\n #define BITCOIN_QT_PEERTABLEMODEL_H\n \n-#include \"main.h\"\n+#include \"main.h\" // For CNodeStateStats\n #include \"net.h\"\n \n #include <QAbstractTableModel>"
      },
      {
        "sha": "11cbc7a47c06fd9ab0e06c73d14aa3bac3e9abfa",
        "filename": "src/qt/platformstyle.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"platformstyle.h\"\n+\n+#include \"guiconstants.h\"\n+\n+#include <QApplication>\n+#include <QColor>\n+#include <QIcon>\n+#include <QImage>\n+#include <QPalette>\n+#include <QPixmap>\n+\n+static const struct {\n+    const char *platformId;\n+    /** Show images on push buttons */\n+    const bool imagesOnButtons;\n+    /** Colorize single-color icons */\n+    const bool colorizeIcons;\n+    /** Extra padding/spacing in transactionview */\n+    const bool useExtraSpacing;\n+} platform_styles[] = {\n+    {\"macosx\", false, false, true},\n+    {\"windows\", true, false, false},\n+    /* Other: linux, unix, ... */\n+    {\"other\", true, true, false}\n+};\n+static const unsigned platform_styles_count = sizeof(platform_styles)/sizeof(*platform_styles);\n+\n+namespace {\n+/* Local functions for colorizing single-color images */\n+\n+void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n+{\n+    img = img.convertToFormat(QImage::Format_ARGB32);\n+    for (int x = img.width(); x--; )\n+    {\n+        for (int y = img.height(); y--; )\n+        {\n+            const QRgb rgb = img.pixel(x, y);\n+            img.setPixel(x, y, qRgba(colorbase.red(), colorbase.green(), colorbase.blue(), qAlpha(rgb)));\n+        }\n+    }\n+}\n+\n+QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n+{\n+    QIcon new_ico;\n+    QSize sz;\n+    Q_FOREACH(sz, ico.availableSizes())\n+    {\n+        QImage img(ico.pixmap(sz).toImage());\n+        MakeSingleColorImage(img, colorbase);\n+        new_ico.addPixmap(QPixmap::fromImage(img));\n+    }\n+    return new_ico;\n+}\n+\n+QImage ColorizeImage(const QString& filename, const QColor& colorbase)\n+{\n+    QImage img(filename);\n+    MakeSingleColorImage(img, colorbase);\n+    return img;\n+}\n+\n+QIcon ColorizeIcon(const QString& filename, const QColor& colorbase)\n+{\n+    return QIcon(QPixmap::fromImage(ColorizeImage(filename, colorbase)));\n+}\n+\n+}\n+\n+\n+PlatformStyle::PlatformStyle(const QString &name, bool imagesOnButtons, bool colorizeIcons, bool useExtraSpacing):\n+    name(name),\n+    imagesOnButtons(imagesOnButtons),\n+    colorizeIcons(colorizeIcons),\n+    useExtraSpacing(useExtraSpacing),\n+    singleColor(0,0,0),\n+    textColor(0,0,0)\n+{\n+    // Determine icon highlighting color\n+    if (colorizeIcons) {\n+        const QColor colorHighlightBg(QApplication::palette().color(QPalette::Highlight));\n+        const QColor colorHighlightFg(QApplication::palette().color(QPalette::HighlightedText));\n+        const QColor colorText(QApplication::palette().color(QPalette::WindowText));\n+        const int colorTextLightness = colorText.lightness();\n+        QColor colorbase;\n+        if (abs(colorHighlightBg.lightness() - colorTextLightness) < abs(colorHighlightFg.lightness() - colorTextLightness))\n+            colorbase = colorHighlightBg;\n+        else\n+            colorbase = colorHighlightFg;\n+        singleColor = colorbase;\n+    }\n+    // Determine text color\n+    textColor = QColor(QApplication::palette().color(QPalette::WindowText));\n+}\n+\n+QImage PlatformStyle::SingleColorImage(const QString& filename) const\n+{\n+    if (!colorizeIcons)\n+        return QImage(filename);\n+    return ColorizeImage(filename, SingleColor());\n+}\n+\n+QIcon PlatformStyle::SingleColorIcon(const QString& filename) const\n+{\n+    if (!colorizeIcons)\n+        return QIcon(filename);\n+    return ColorizeIcon(filename, SingleColor());\n+}\n+\n+QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const\n+{\n+    if (!colorizeIcons)\n+        return icon;\n+    return ColorizeIcon(icon, SingleColor());\n+}\n+\n+QIcon PlatformStyle::TextColorIcon(const QString& filename) const\n+{\n+    return ColorizeIcon(filename, TextColor());\n+}\n+\n+QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const\n+{\n+    return ColorizeIcon(icon, TextColor());\n+}\n+\n+const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)\n+{\n+    for (unsigned x=0; x<platform_styles_count; ++x)\n+    {\n+        if (platformId == platform_styles[x].platformId)\n+        {\n+            return new PlatformStyle(\n+                    platform_styles[x].platformId,\n+                    platform_styles[x].imagesOnButtons,\n+                    platform_styles[x].colorizeIcons,\n+                    platform_styles[x].useExtraSpacing);\n+        }\n+    }\n+    return 0;\n+}\n+"
      },
      {
        "sha": "4e763e760ea26a90457468106161978721ab259f",
        "filename": "src/qt/platformstyle.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/platformstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/platformstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_PLATFORMSTYLE_H\n+#define BITCOIN_QT_PLATFORMSTYLE_H\n+\n+#include <QIcon>\n+#include <QPixmap>\n+#include <QString>\n+\n+/* Coin network-specific GUI style information */\n+class PlatformStyle\n+{\n+public:\n+    /** Get style associated with provided platform name, or 0 if not known */\n+    static const PlatformStyle *instantiate(const QString &platformId);\n+\n+    const QString &getName() const { return name; }\n+\n+    bool getImagesOnButtons() const { return imagesOnButtons; }\n+    bool getUseExtraSpacing() const { return useExtraSpacing; }\n+\n+    QColor TextColor() const { return textColor; }\n+    QColor SingleColor() const { return singleColor; }\n+\n+    /** Colorize an image (given filename) with the icon color */\n+    QImage SingleColorImage(const QString& filename) const;\n+\n+    /** Colorize an icon (given filename) with the icon color */\n+    QIcon SingleColorIcon(const QString& filename) const;\n+\n+    /** Colorize an icon (given object) with the icon color */\n+    QIcon SingleColorIcon(const QIcon& icon) const;\n+\n+    /** Colorize an icon (given filename) with the text color */\n+    QIcon TextColorIcon(const QString& filename) const;\n+\n+    /** Colorize an icon (given object) with the text color */\n+    QIcon TextColorIcon(const QIcon& icon) const;\n+\n+private:\n+    PlatformStyle(const QString &name, bool imagesOnButtons, bool colorizeIcons, bool useExtraSpacing);\n+\n+    QString name;\n+    bool imagesOnButtons;\n+    bool colorizeIcons;\n+    bool useExtraSpacing;\n+    QColor singleColor;\n+    QColor textColor;\n+    /* ... more to come later */\n+};\n+\n+#endif // BITCOIN_QT_PLATFORMSTYLE_H\n+"
      },
      {
        "sha": "7fb68cc32a20995962a3482f9b9e69158f69d18b",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,9 +10,9 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"receiverequestdialog.h\"\n #include \"recentrequeststablemodel.h\"\n-#include \"scicon.h\"\n #include \"walletmodel.h\"\n \n #include <QAction>\n@@ -22,24 +22,25 @@\n #include <QScrollBar>\n #include <QTextDocument>\n \n-ReceiveCoinsDialog::ReceiveCoinsDialog(QWidget *parent) :\n+ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::ReceiveCoinsDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->clearButton->setIcon(QIcon());\n-    ui->receiveButton->setIcon(QIcon());\n-    ui->showRequestButton->setIcon(QIcon());\n-    ui->removeRequestButton->setIcon(QIcon());\n-#else\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->receiveButton->setIcon(SingleColorIcon(\":/icons/receiving_addresses\"));\n-    ui->showRequestButton->setIcon(SingleColorIcon(\":/icons/edit\"));\n-    ui->removeRequestButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->clearButton->setIcon(QIcon());\n+        ui->receiveButton->setIcon(QIcon());\n+        ui->showRequestButton->setIcon(QIcon());\n+        ui->removeRequestButton->setIcon(QIcon());\n+    } else {\n+        ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->receiveButton->setIcon(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"));\n+        ui->showRequestButton->setIcon(platformStyle->SingleColorIcon(\":/icons/edit\"));\n+        ui->removeRequestButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    }\n \n     // context menu actions\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n@@ -132,7 +133,7 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n     if(ui->reuseAddress->isChecked())\n     {\n         /* Choose existing receiving address */\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if(dlg.exec())\n         {"
      },
      {
        "sha": "eaaf129a91d5d34522832da4ed2b09c1e24f6d9d",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -16,6 +16,7 @@\n #include <QVariant>\n \n class OptionsModel;\n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -39,7 +40,7 @@ class ReceiveCoinsDialog : public QDialog\n         MINIMUM_COLUMN_WIDTH = 130\n     };\n \n-    explicit ReceiveCoinsDialog(QWidget *parent = 0);\n+    explicit ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~ReceiveCoinsDialog();\n \n     void setModel(WalletModel *model);\n@@ -57,6 +58,8 @@ public Q_SLOTS:\n     GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n     WalletModel *model;\n     QMenu *contextMenu;\n+    const PlatformStyle *platformStyle;\n+\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n "
      },
      {
        "sha": "c40abfd3a6cd48491191814e8f82c1654e4de8cc",
        "filename": "src/qt/res/icons/about_qt.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/about_qt.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/about_qt.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about_qt.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "162204d1bba6540656b47aae41a09d902e13d5b4",
        "filename": "src/qt/res/icons/clock1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock1.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "8f4263a31cc8e628b5b52b590db6475284b5efd4",
        "filename": "src/qt/res/icons/clock2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock2.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "7f11a7566c15c2ff7d7d50cf53edb1f5c93faf00",
        "filename": "src/qt/res/icons/clock3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock3.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "fdd1a0fce34353183a7af42f4039489cf2779a0b",
        "filename": "src/qt/res/icons/clock4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock4.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "7d6556c6cf731934684a92468e5a24b5bd3a2480",
        "filename": "src/qt/res/icons/clock5.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock5.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/clock5.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock5.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "ef708d81fb24ad0272de7cc4afcca7caf18aef13",
        "filename": "src/qt/res/icons/connect0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect0.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "ed358e6f8ef40b106cba3201859108a98a8d384f",
        "filename": "src/qt/res/icons/connect1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect1.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "3bbb0d395c5cbbc226007dcdcf7318575cf842f1",
        "filename": "src/qt/res/icons/connect2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect2.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "0db99ad8d30458c3641d931213b9c4b564293ce6",
        "filename": "src/qt/res/icons/connect3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect3.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "9dd19fc2bd6596a8e339fee18d09c087d8f8e4de",
        "filename": "src/qt/res/icons/connect4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/connect4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect4.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "72c44565ec3bf56248c47549a182420386e96082",
        "filename": "src/qt/res/icons/transaction0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/transaction0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/transaction0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction0.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "6bc5ac78952b42e9c340c8888d382c775671ca35",
        "filename": "src/qt/res/icons/warning.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/warning.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/icons/warning.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/warning.png?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b"
      },
      {
        "sha": "2a3d84c2d048549c16ba86e9d57fb81fac04119b",
        "filename": "src/qt/res/src/clock_1.svg",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_1.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_1.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_1.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,5 +9,7 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<path\r\n+\td=\"M 478.3,253.4 297.6,184.6 c 0,0 0,78.8 0,118.2 0,117.5 -0.4,118.1 118.2,118.1 39.4,0 118.2,0 118.2,0 z\"\r\n+\tid=\"polygon7\" />\r\n </svg>\r"
      },
      {
        "sha": "2de8d467b754ecf316ca61209ecbc9a8248212ac",
        "filename": "src/qt/res/src/clock_2.svg",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_2.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_2.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_2.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,6 +9,5 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<polygon points=\"465.2,601.6 534,420.9 478.3,253.4 297.6,184.6 297.6,420.9 297.6,657.3 \"/>\r\n </svg>\r"
      },
      {
        "sha": "b691043e3e72bb24707030759b4da32e1fe2e224",
        "filename": "src/qt/res/src/clock_3.svg",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_3.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_3.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_3.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,7 +9,7 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"117,588.5 297.6,657.3 297.6,420.9 61.3,420.9 \"/>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<path\r\n+\td=\"M 465.2,601.6 534,420.9 478.3,253.4 297.6,184.6 c 0,0 0,78.8 0,118.2 0,117.7 0.4,118.1 -118.1,118.1 -39.4,0 -118.2,0 -118.2,0 l 55.7,167.6 180.6,68.8 z\"\r\n+\tid=\"polygon7\" />\r\n </svg>\r"
      },
      {
        "sha": "ea311f31e826a5c321a99c0c0f58f9610b37207f",
        "filename": "src/qt/res/src/clock_4.svg",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_4.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/clock_4.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_4.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,18 +1,23 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 841.9\" enable-background=\"new 0 0 841.9 841.9\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M297.6,677.3c-68.5,0-132.9-26.7-181.3-75.1S41.3,489.4,41.3,420.9s26.7-132.9,75.1-181.3c48.4-48.4,112.8-75.1,181.3-75.1\r\n-\t\ts132.9,26.7,181.3,75.1c48.4,48.4,75.1,112.8,75.1,181.3s-26.7,132.9-75.1,181.3S366.1,677.3,297.6,677.3z M297.6,204.6\r\n-\t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n-\t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n-</g>\r\n-<polygon points=\"130.1,240.3 61.3,420.9 297.6,420.9 297.6,184.6 \"/>\r\n-<polygon points=\"117,588.5 297.6,657.3 297.6,420.9 61.3,420.9 \"/>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n-<path fill=\"#FFFFFF\" d=\"M293.5,452.6h99.6c14.9,0,24.8-9.9,24.8-24.8S408,403,393.1,403h-74.8V278.2c0-14.9-9.9-24.8-24.8-24.8\r\n-\tc-14.9,0-24.8,9.9-24.8,24.8v149.6C268.7,440.2,278.7,452.6,293.5,452.6z\"/>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   xml:space=\"preserve\"\n+   enable-background=\"new 0 0 841.9 841.9\"\n+   viewBox=\"0 0 841.9 841.9\"\n+   y=\"0px\"\n+   x=\"0px\"\n+   id=\"Ebene_1\"\n+   version=\"1.1\"><metadata\n+     id=\"metadata15\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs13\" /><g\n+     id=\"g3\"><path\n+       id=\"path5\"\n+       d=\"M297.6,677.3c-68.5,0-132.9-26.7-181.3-75.1S41.3,489.4,41.3,420.9s26.7-132.9,75.1-181.3c48.4-48.4,112.8-75.1,181.3-75.1   s132.9,26.7,181.3,75.1c48.4,48.4,75.1,112.8,75.1,181.3s-26.7,132.9-75.1,181.3S366.1,677.3,297.6,677.3z M297.6,204.6   c-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4   c57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\" /></g><path\n+     id=\"polygon7\"\n+     d=\"M 297.6 184.6 L 130.1 240.3 L 61.3 420.9 L 117 588.5 L 297.6 657.3 L 465.2 601.6 L 534 420.9 L 478.3 253.4 L 297.6 184.6 z M 293.5 253.4 C 308.4 253.4 318.3 263.3 318.3 278.2 L 318.3 403 L 393.1 403 C 408 403 417.9 412.9 417.9 427.8 C 417.9 442.7 408 452.6 393.1 452.6 L 293.5 452.6 C 278.7 452.6 268.7 440.2 268.7 427.8 L 268.7 278.2 C 268.7 263.3 278.6 253.4 293.5 253.4 z \" /></svg>\n\\ No newline at end of file"
      },
      {
        "sha": "7d2afac6227a87b1d4fa8abb65d66d4b3681b067",
        "filename": "src/qt/res/src/connect-0.svg",
        "status": "modified",
        "additions": 66,
        "deletions": 11,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-0.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-0.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-0.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,11 +1,66 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0\r\n-\tc-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z M7.8,15.8c-0.5,0-1-0.2-1.4-0.6c-0.8-0.8-0.8-2,0-2.8\r\n-\tc3.1-3.1,8.2-3.1,11.3,0c0.8,0.8,0.8,2,0,2.8c-0.8,0.8-2,0.8-2.8,0c-1.6-1.6-4.1-1.6-5.7,0C8.8,15.6,8.3,15.8,7.8,15.8z\"/>\r\n-<path fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M20.5,11.5c-0.5,0-1-0.2-1.4-0.6C15.2,7,8.8,7,4.9,10.9\r\n-\tc-0.8,0.8-2,0.8-2.8,0c-0.8-0.8-0.8-2,0-2.8c5.5-5.5,14.3-5.5,19.8,0c0.8,0.8,0.8,2,0,2.8C21.5,11.3,21,11.5,20.5,11.5z\"/>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4293\"\n+             d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          <g\n+             style=\"fill:#969696;fill-opacity:1\"\n+             id=\"g4295\">\n+            <path\n+               id=\"path4297\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+            <path\n+               id=\"path4299\"\n+               d=\"m -57.35,106.1 c -1.93,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,0.5 -0.45,1 -1,1 l -4.85,0 3.17,3 1.68,0 c 2.21,0 4,-1.8 4,-4 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.56,-3.5 -3.5,-3.5 z m 0,1 c 1.38,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,1.6 -1.35,3 -3,3 l -1.81,0 -2.04,-1 3.85,0 c 1.11,0 2,-0.9 2,-2 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.13,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          </g>\n+          <path\n+             id=\"path4301\"\n+             d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.36,-3 z m 0,1 1.84,0 2.19,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+        </g>\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4165\"\n+       d=\"m 12,8.77 c -0.84,0 -1.66,0.341 -2.254,0.937 -0.599,0.593 -0.942,1.403 -0.945,2.253 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.66 -0.95,-2.253 C 13.66,9.111 12.84,8.77 12,8.77 Z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "d17928c97d01edba81c078ccd3756d4721df8697",
        "filename": "src/qt/res/src/connect-1.svg",
        "status": "modified",
        "additions": 69,
        "deletions": 21,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-1.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-1.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-1.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,21 +1,69 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M12,11c1.9,0,3.6,0.7,4.9,2c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C14.6,13.5,13.3,13,12,13\r\n-\t\tc-1.3,0-2.6,0.5-3.5,1.5c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C8.4,11.7,10.1,11,12,11 M12,17\r\n-\t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7s-0.1,0.5-0.3,0.7C12.5,18.9,12.3,19,12,19c-0.3,0-0.5-0.1-0.7-0.3\r\n-\t\tC11.1,18.5,11,18.3,11,18c0-0.3,0.1-0.5,0.3-0.7C11.5,17.1,11.7,17,12,17 M12,10c-2,0-4.1,0.8-5.7,2.3c-0.8,0.8-0.8,2,0,2.8\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C10,14.4,11,14,12,14c1,0,2,0.4,2.8,1.2c0.4,0.4,0.9,0.6,1.4,0.6s1-0.2,1.4-0.6\r\n-\t\tc0.8-0.8,0.8-2,0-2.8C16.1,10.8,14,10,12,10L12,10z M12,16c-0.5,0-1,0.2-1.4,0.6c-0.8,0.8-0.8,2.1,0,2.8C11,19.8,11.5,20,12,20\r\n-\t\tc0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C13,16.2,12.5,16,12,16L12,16z\"/>\r\n-</g>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4210\"\n+     transform=\"translate(0,0.25)\">\n+    <g\n+       id=\"g4142\"\n+       transform=\"matrix(0,-1,-1,0,23.96,23.75)\">\n+      <g\n+         id=\"g4213\"\n+         transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+        <g\n+           id=\"g4289\"\n+           transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+          <g\n+             id=\"g4291\">\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+               id=\"path4293\" />\n+            <g\n+               id=\"g4295\">\n+              <path\n+                 style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+                 d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+                 id=\"path4297\" />\n+              <path\n+                 id=\"path4145\"\n+                 d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+                 style=\"\" />\n+            </g>\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.34,-3 z m 0,1 2.02,0 2.01,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+               id=\"path4301\" />\n+          </g>\n+        </g>\n+      </g>\n+      <path\n+         id=\"path4173\"\n+         d=\"m 12,8.764 c -0.84,0 -1.67,0.336 -2.264,0.931 a 0.6001,0.6001 0 0 0 -0,0 C 9.138,10.29 8.802,11.11 8.801,11.96 c 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.67 -0.94,-2.265 C 13.67,9.1 12.84,8.764 12,8.764 Z\"\n+         style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+    </g>\n+  </g>\n+</svg>"
      },
      {
        "sha": "841ca6071dd6fac2803e7fc6d0142fda08c8f3d6",
        "filename": "src/qt/res/src/connect-2.svg",
        "status": "modified",
        "additions": 59,
        "deletions": 22,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-2.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-2.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-2.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,22 +1,59 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z\"/>\r\n-<g>\r\n-\t<path d=\"M12,11c1.9,0,3.6,0.7,4.9,2c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C14.6,13.5,13.3,13,12,13\r\n-\t\tc-1.3,0-2.6,0.5-3.5,1.5c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C8.4,11.7,10.1,11,12,11 M12,17\r\n-\t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7s-0.1,0.5-0.3,0.7C12.5,18.9,12.3,19,12,19c-0.3,0-0.5-0.1-0.7-0.3\r\n-\t\tC11.1,18.5,11,18.3,11,18c0-0.3,0.1-0.5,0.3-0.7C11.5,17.1,11.7,17,12,17 M12,10c-2,0-4.1,0.8-5.7,2.3c-0.8,0.8-0.8,2,0,2.8\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C10,14.4,11,14,12,14c1,0,2,0.4,2.8,1.2c0.4,0.4,0.9,0.6,1.4,0.6s1-0.2,1.4-0.6\r\n-\t\tc0.8-0.8,0.8-2,0-2.8C16.1,10.8,14,10,12,10L12,10z M12,16c-0.5,0-1,0.2-1.4,0.6c-0.8,0.8-0.8,2.1,0,2.8C11,19.8,11.5,20,12,20\r\n-\t\tc0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C13,16.2,12.5,16,12,16L12,16z\"/>\r\n-</g>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4210\"\n+     transform=\"matrix(0,1,-1,0,130.6,-35.86)\">\n+    <g\n+       id=\"g4289\"\n+       transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+      <g\n+         id=\"g4291\">\n+        <path\n+           style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+           d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+           id=\"path4293\" />\n+        <g\n+           id=\"g4295\">\n+          <path\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+             d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+             id=\"path4297\" />\n+          <path\n+             id=\"path4142\"\n+             d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\" />\n+        </g>\n+        <path\n+           id=\"path4148\"\n+           d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\" />\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4170\"\n+       d=\"m 47.86,115.4 c -0.84,0 -1.65,0.4 -2.24,1 -0.64,0.5 -0.96,1.3 -0.96,2.2 0,0.9 0.32,1.7 0.96,2.2 0.59,0.6 1.4,1 2.24,1 0.84,0 1.65,-0.4 2.24,-1 0.64,-0.5 0.96,-1.3 0.96,-2.2 0,-0.9 -0.32,-1.7 -0.96,-2.2 -0.59,-0.6 -1.4,-1 -2.24,-1 z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "b06e67daf87e10c51009ef4d240726a81093aca5",
        "filename": "src/qt/res/src/connect-3.svg",
        "status": "modified",
        "additions": 72,
        "deletions": 16,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-3.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-3.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-3.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,16 +1,72 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z\"/>\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z M7.8,15.8\r\n-\tc-0.5,0-1-0.2-1.4-0.6c-0.8-0.8-0.8-2,0-2.8c3.1-3.1,8.2-3.1,11.3,0c0.8,0.8,0.8,2,0,2.8c-0.8,0.8-2,0.8-2.8,0\r\n-\tc-1.6-1.6-4.1-1.6-5.7,0C8.8,15.6,8.3,15.8,7.8,15.8z\"/>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     transform=\"translate(0.2636,0.29)\"\n+     id=\"g4160\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(0,1,-1,0,130.3,-36.15)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4147\"\n+             d=\"m -64.85,116.2 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 c 0.48,0 0.9,0.4 0.9,0.9 l 0,2.4 c -1.18,0.6 -2,1.8 -2,3.2 0,2 1.64,3.6 3.6,3.6 1.97,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-2.3 -1.86,-4.1 -4.1,-4.1 z\"\n+             style=\"\" />\n+          <g\n+             id=\"g4295\">\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               id=\"path4297\" />\n+            <path\n+               id=\"path4145\"\n+               d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+          </g>\n+          <path\n+             id=\"path4149\"\n+             d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\"\n+             style=\"\" />\n+        </g>\n+      </g>\n+    </g>\n+    <g\n+       transform=\"matrix(0,1,1,0,-106.3,-36.15)\"\n+       id=\"g4142\">\n+      <g\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\"\n+         id=\"g4144\" />\n+    </g>\n+  </g>\n+  <path\n+     id=\"path4170\"\n+     d=\"m 15.2,12 c 0,-0.84 -0.4,-1.65 -1,-2.242 -0.5,-0.64 -1.3,-0.96 -2.2,-0.96 -0.9,0 -1.7,0.32 -2.2,0.96 -0.6,0.592 -1,1.402 -1,2.242 0,0.84 0.4,1.65 1,2.24 0.5,0.64 1.3,0.96 2.2,0.96 0.9,0 1.7,-0.32 2.2,-0.96 0.6,-0.59 1,-1.4 1,-2.24 z\"\n+     style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+</svg>"
      },
      {
        "sha": "0abc7955fdbda15c9adcbc277bb45f80f930b55b",
        "filename": "src/qt/res/src/connect-4.svg",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-4.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/connect-4.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-4.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\"\n+       id=\"g4210\">\n+      <g\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\"\n+         id=\"g4289\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4153\"\n+             d=\"m -64.85,116.2 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 c 0.48,0 0.9,0.4 0.9,0.9 l 0,2.4 c -1.18,0.6 -2,1.8 -2,3.2 0,2 1.64,3.6 3.6,3.6 1.97,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-2.3 -1.86,-4.1 -4.1,-4.1 z\"\n+             style=\"\" />\n+          <g\n+             id=\"g4295\">\n+            <path\n+               id=\"path4149\"\n+               d=\"m -67.35,106 c -2,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,2.2 1.84,4.1 4.1,4.1 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 c -0.49,0 -0.9,-0.4 -0.9,-0.9 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.61,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+            <path\n+               id=\"path4147\"\n+               d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+          </g>\n+          <path\n+             id=\"path4155\"\n+             d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\"\n+             style=\"\" />\n+        </g>\n+      </g>\n+    </g>\n+  </g>\n+  <path\n+     id=\"path4170\"\n+     d=\"m 15.2,12 c 0,-0.84 -0.4,-1.65 -1,-2.24 C 13.7,9.12 12.9,8.8 12,8.8 c -0.9,0 -1.7,0.32 -2.2,0.96 -0.6,0.59 -1,1.4 -1,2.24 0,0.84 0.4,1.65 1,2.24 0.5,0.64 1.3,0.96 2.2,0.96 0.9,0 1.7,-0.32 2.2,-0.96 0.6,-0.59 1,-1.4 1,-2.24 z\"\n+     style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+</svg>"
      },
      {
        "sha": "373c91f0c6cff01572c38aac5276788c39f4a047",
        "filename": "src/qt/res/src/qt.svg",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/qt.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/qt.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/qt.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,25 +1,26 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 595.3\" enable-background=\"new 0 0 841.9 595.3\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M182.8,310c0-74.4,0-148.8,0-220.7c0-19.8,5-39.7,19.8-54.6c12.4-12.4,27.3-17.4,44.6-19.8c37.2-5,74.4,2.5,109.1,7.4\r\n-\t\tC428.4,34.7,497.8,44.6,569.8,57c27.3,5,57,9.9,84.3,12.4c7.4,0,5,5,5,9.9c0,91.8,0,181.1,0,272.8c0,32.2,0,64.5,0,99.2\r\n-\t\tc0,14.9-5,29.8-12.4,44.6c-9.9,14.9-22.3,22.3-39.7,27.3c-69.4,12.4-138.9,22.3-208.3,34.7c-57,9.9-114.1,19.8-171.1,29.8\r\n-\t\tc-2.5,0-5,0-7.4-2.5c-12.4-14.9-22.3-24.8-32.2-34.7c-2.5-2.5-2.5-7.4-2.5-9.9c0-71.9,0-143.9,0-215.8\r\n-\t\tC182.8,320,182.8,315,182.8,310z M430.9,436.5c9.9-7.4,19.8-12.4,29.8-19.8c14.9-14.9,24.8-32.2,29.8-54.6\r\n-\t\tc12.4-54.6,14.9-111.6,0-166.2c-12.4-47.1-42.2-74.4-84.3-79.4c-37.2-2.5-67,7.4-86.8,39.7c-7.4,14.9-12.4,29.8-14.9,44.6\r\n-\t\tc-9.9,39.7-9.9,81.9-5,121.5c2.5,22.3,7.4,44.6,17.4,67c12.4,24.8,29.8,42.2,54.6,49.6c2.5,0,5,2.5,5,5c5,12.4,7.4,22.3,12.4,34.7\r\n-\t\ts17.4,19.8,32.2,22.3c14.9,2.5,27.3,2.5,42.2,0c2.5,0,2.5-2.5,2.5-2.5c0-9.9,0-22.3,0-32.2C438.3,461.3,433.3,456.4,430.9,436.5z\r\n-\t\t M505.3,191c0,12.4,0,22.3,0,34.7c0,2.5,2.5,2.5,5,2.5c5,0,7.4,0,12.4,0c0,2.5,0,5,0,9.9c0,44.6,0,86.8,0,131.5\r\n-\t\tc0,7.4,0,17.4,2.5,24.8c2.5,12.4,12.4,22.3,24.8,24.8c19.8,5,37.2-2.5,54.6-9.9l2.5-2.5c0-9.9,0-19.8,0-29.8\r\n-\t\tc-7.4,2.5-14.9,5-22.3,5s-12.4-2.5-14.9-9.9c0-5-2.5-9.9-2.5-14.9c0-39.7,0-79.4,0-119.1c0-2.5,0-5,0-7.4c9.9,0,19.8,0,29.8,2.5\r\n-\t\tc5,0,7.4-2.5,7.4-7.4c0-7.4,0-14.9,0-22.3c0-5-2.5-7.4-7.4-7.4c-7.4,0-14.9-2.5-22.3-2.5c-5,0-7.4-2.5-7.4-7.4\r\n-\t\tc0-14.9,0-29.8,0-42.2c0-5-2.5-5-5-7.4c-5,0-12.4,0-17.4-2.5s-7.4,0-9.9,7.4c-2.5,17.4-7.4,32.2-12.4,49.6\r\n-\t\tC520.2,191,512.7,191,505.3,191z\"/>\r\n-\t<path d=\"M443.3,277.8c-2.5,27.3-5,57-9.9,84.3c0,7.4-5,17.4-9.9,24.8c-12.4,17.4-32.2,14.9-44.6-2.5c-9.9-14.9-12.4-32.2-14.9-49.6\r\n-\t\tc-5-42.2-5-81.9,0-124c5-12.4,7.4-24.8,14.9-37.2c12.4-17.4,34.7-17.4,47.1-2.5c2.5,5,7.4,9.9,7.4,14.9c2.5,9.9,5,19.8,7.4,32.2\r\n-\t\tc2.5,9.9,2.5,22.3,2.5,34.7C440.8,260.4,440.8,270.4,443.3,277.8L443.3,277.8z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.1\"\n+   id=\"Ebene_1\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   viewBox=\"0 0 609.4 609.4\"\n+   enable-background=\"new 0 0 841.9 595.3\"\n+   xml:space=\"preserve\"\n+   width=\"609.4\"\n+   height=\"609.4\"><metadata\n+     id=\"metadata13\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs11\" /><g\n+     id=\"g4151\"\n+     transform=\"matrix(2.553,0,0,2.553,-2149,281.5)\"><path\n+       id=\"path26\"\n+       transform=\"matrix(0.3917,0,0,0.3917,841.8,-110.3)\"\n+       d=\"M 153.7 16.9 C 115 16.44 69.7 31.67 67.96 86.81 L 67.96 550.7 L 105 592.4 L 495.9 526.7 C 521.4 522.1 541.9 490.2 541.9 455.9 L 541.9 77.77 L 183.4 18.97 C 179.4 18.3 161.4 17 157.5 16.99 C 156.2 16.94 155 16.91 153.7 16.9 z M 273.5 124.1 C 278.1 124.1 282.7 124.3 287.3 124.9 L 287.3 125 C 320 128.8 343.7 144.2 359.3 170.9 C 374.6 197.1 382 234.6 382 284 C 382 329.2 376.4 364.7 365.4 390.7 C 354.2 417.2 337.1 434.6 313.4 442.8 C 315.9 455 319.5 463.2 324.1 467.5 C 326.9 469.8 330.7 471.4 335.3 471.9 L 335.6 471.9 L 336.3 471.9 L 341.5 471.9 C 343.5 471.9 344.5 472.4 348.3 471.9 L 348.3 507.9 L 332 510.2 C 327.2 510.7 322.6 510.9 318.2 510.9 C 303.9 510.9 292.4 507.6 283.5 500.5 C 272 491.3 263.6 473.4 258.2 447.1 C 233.2 441.8 213.5 425.9 200 399.1 C 186.5 372.1 179.3 332.2 179.3 280.4 C 179.3 224.5 189 183.2 207.7 157 C 223.8 134.9 245.7 124.1 273.5 124.1 z M 424.4 143.5 L 455.1 146.9 L 455.1 202.2 L 488.2 204.8 L 488.2 239.5 L 455.1 237.8 L 455.1 364.7 C 455.1 375.6 457.6 382.8 460.2 386.1 C 460.2 388.9 465.3 390.4 467.8 390.4 L 470.4 390.4 C 478 389.9 485.7 387.9 493.4 384.1 L 493.4 415.7 C 478 422.1 465.3 425.7 450 426.9 C 450 427.2 447.4 427.2 444.8 427.2 C 432.1 427.2 424.4 423.6 416.8 416.5 C 409.1 408.1 404 394.5 404 376.1 L 404 235.6 L 390.2 234.8 L 390.2 197.6 L 411.7 199.1 L 424.4 143.5 z M 284.5 166.4 C 272.5 166.4 263.3 173.3 256.9 187.3 C 250.1 202.5 246.7 233.9 246.7 281.7 C 246.7 327.6 250.1 360.3 256.9 379.5 C 263.3 397.8 273 406.8 285.8 406.8 L 287.3 406.8 C 300.1 406 309.5 397.1 316.2 380.5 C 322.6 363.9 325.6 331.5 325.6 283 C 325.6 239.4 322.6 209.5 316.2 193 C 309.8 176.4 300.1 167.5 287.3 166.4 L 284.5 166.4 z \"\n+       style=\"fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none\" /></g></svg>\n\\ No newline at end of file"
      },
      {
        "sha": "e7fcd8214cba6dae14eb74c149db6699d4131274",
        "filename": "src/qt/res/src/transaction0.svg",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/transaction0.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/res/src/transaction0.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/transaction0.svg?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.1\"\n+   id=\"svg4142\"\n+   viewBox=\"0 0 128 127.9\"\n+   height=\"36.12mm\"\n+   width=\"36.12mm\">\n+  <defs\n+     id=\"defs4144\" />\n+  <metadata\n+     id=\"metadata4147\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <g\n+     id=\"layer1\"\n+     transform=\"translate(-284.4,-501.6)\">\n+    <path\n+       id=\"path4792\"\n+       d=\"m 348.8,513.8 c -12.7,-0.7 -24.9,9.1 -27,21.7 -3.8,8.8 7.2,13.7 13.7,9.2 3.1,-7.5 9.4,-17.9 18.9,-11.6 9.7,6.1 2.1,17.6 -3,24.1 -6.1,7.8 -11.4,14.8 -8.9,23 5.4,17.7 10.8,3.7 12.8,-0.1 4.3,-8.2 6,-8.8 11.5,-16.1 6.4,-8.6 11.6,-19.9 7.7,-30.8 -2.8,-11.5 -13.9,-19.9 -25.7,-19.4 z m -0.7,84.7 c -11.4,2.4 -9.1,19.5 2.7,17.1 11.8,-2.4 8.7,-19.5 -2.7,-17.1 z\"\n+       style=\"fill:#000000\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "35729bbb8b4b2933e6fe8ddebb4e15b4ccc41493",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -8,9 +8,8 @@\n #include \"clientmodel.h\"\n #include \"guiutil.h\"\n #include \"peertablemodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n \n-#include \"main.h\"\n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n #include \"rpcclient.h\"\n@@ -201,21 +200,22 @@ void RPCExecutor::request(const QString &command)\n     }\n }\n \n-RPCConsole::RPCConsole(QWidget *parent) :\n+RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::RPCConsole),\n     clientModel(0),\n     historyPtr(0),\n     cachedNodeid(-1),\n-    contextMenu(0)\n+    contextMenu(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n     GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n \n-#ifndef Q_OS_MAC\n-    ui->openDebugLogfileButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    if (platformStyle->getImagesOnButtons()) {\n+        ui->openDebugLogfileButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n+    ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n@@ -330,10 +330,10 @@ void RPCConsole::setClientModel(ClientModel *model)\n \n         // Provide initial values\n         ui->clientVersion->setText(model->formatFullVersion());\n+        ui->clientUserAgent->setText(model->formatSubVersion());\n         ui->clientName->setText(model->clientName());\n         ui->buildDate->setText(model->formatBuildDate());\n         ui->startupTime->setText(model->formatClientStartupTime());\n-\n         ui->networkName->setText(QString::fromStdString(Params().NetworkIDString()));\n     }\n }\n@@ -364,7 +364,7 @@ void RPCConsole::clear()\n         ui->messagesWidget->document()->addResource(\n                     QTextDocument::ImageResource,\n                     QUrl(ICON_MAPPING[i].url),\n-                    SingleColorImage(ICON_MAPPING[i].source, SingleColor()).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n+                    platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n     }\n \n     // Set default style sheet"
      },
      {
        "sha": "b94efee84ab1f5a0831fe3246cce255c25f2e5a7",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -13,6 +13,7 @@\n #include <QWidget>\n \n class ClientModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class RPCConsole;\n@@ -29,7 +30,7 @@ class RPCConsole: public QWidget\n     Q_OBJECT\n \n public:\n-    explicit RPCConsole(QWidget *parent);\n+    explicit RPCConsole(const PlatformStyle *platformStyle, QWidget *parent);\n     ~RPCConsole();\n \n     void setClientModel(ClientModel *model);\n@@ -106,6 +107,7 @@ public Q_SLOTS:\n     int historyPtr;\n     NodeId cachedNodeid;\n     QMenu *contextMenu;\n+    const PlatformStyle *platformStyle;\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "c493b5569e03c9fae22f5acb6b7b689361227c6d",
        "filename": "src/qt/scicon.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 98,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/qt/scicon.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/qt/scicon.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/scicon.cpp?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -1,98 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"scicon.h\"\n-\n-#include <QApplication>\n-#include <QColor>\n-#include <QIcon>\n-#include <QImage>\n-#include <QPalette>\n-#include <QPixmap>\n-\n-namespace {\n-\n-void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n-{\n-    img = img.convertToFormat(QImage::Format_ARGB32);\n-    for (int x = img.width(); x--; )\n-    {\n-        for (int y = img.height(); y--; )\n-        {\n-            const QRgb rgb = img.pixel(x, y);\n-            img.setPixel(x, y, qRgba(colorbase.red(), colorbase.green(), colorbase.blue(), qAlpha(rgb)));\n-        }\n-    }\n-}\n-\n-}\n-\n-QImage SingleColorImage(const QString& filename, const QColor& colorbase)\n-{\n-    QImage img(filename);\n-#if !defined(WIN32) && !defined(MAC_OSX)\n-    MakeSingleColorImage(img, colorbase);\n-#endif\n-    return img;\n-}\n-\n-QIcon SingleColorIcon(const QIcon& ico, const QColor& colorbase)\n-{\n-#if defined(WIN32) || defined(MAC_OSX)\n-    return ico;\n-#else\n-    QIcon new_ico;\n-    QSize sz;\n-    Q_FOREACH(sz, ico.availableSizes())\n-    {\n-        QImage img(ico.pixmap(sz).toImage());\n-        MakeSingleColorImage(img, colorbase);\n-        new_ico.addPixmap(QPixmap::fromImage(img));\n-    }\n-    return new_ico;\n-#endif\n-}\n-\n-QIcon SingleColorIcon(const QString& filename, const QColor& colorbase)\n-{\n-    return QIcon(QPixmap::fromImage(SingleColorImage(filename, colorbase)));\n-}\n-\n-QColor SingleColor()\n-{\n-#if defined(WIN32) || defined(MAC_OSX)\n-    return QColor(0,0,0);\n-#else\n-    const QColor colorHighlightBg(QApplication::palette().color(QPalette::Highlight));\n-    const QColor colorHighlightFg(QApplication::palette().color(QPalette::HighlightedText));\n-    const QColor colorText(QApplication::palette().color(QPalette::WindowText));\n-    const int colorTextLightness = colorText.lightness();\n-    QColor colorbase;\n-    if (abs(colorHighlightBg.lightness() - colorTextLightness) < abs(colorHighlightFg.lightness() - colorTextLightness))\n-        colorbase = colorHighlightBg;\n-    else\n-        colorbase = colorHighlightFg;\n-    return colorbase;\n-#endif\n-}\n-\n-QIcon SingleColorIcon(const QString& filename)\n-{\n-    return SingleColorIcon(filename, SingleColor());\n-}\n-\n-static QColor TextColor()\n-{\n-    return QColor(QApplication::palette().color(QPalette::WindowText));\n-}\n-\n-QIcon TextColorIcon(const QString& filename)\n-{\n-    return SingleColorIcon(filename, TextColor());\n-}\n-\n-QIcon TextColorIcon(const QIcon& ico)\n-{\n-    return SingleColorIcon(ico, TextColor());\n-}"
      },
      {
        "sha": "1388069ddb4c2a8fd9ccb2102aecaf93f77281d0",
        "filename": "src/qt/scicon.h",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/qt/scicon.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/qt/scicon.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/scicon.h?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -1,24 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_QT_SCICON_H\n-#define BITCOIN_QT_SCICON_H\n-\n-#include <QtCore>\n-\n-QT_BEGIN_NAMESPACE\n-class QColor;\n-class QIcon;\n-class QString;\n-QT_END_NAMESPACE\n-\n-QImage SingleColorImage(const QString& filename, const QColor&);\n-QIcon SingleColorIcon(const QIcon&, const QColor&);\n-QIcon SingleColorIcon(const QString& filename, const QColor&);\n-QColor SingleColor();\n-QIcon SingleColorIcon(const QString& filename);\n-QIcon TextColorIcon(const QIcon&);\n-QIcon TextColorIcon(const QString& filename);\n-\n-#endif // BITCOIN_QT_SCICON_H"
      },
      {
        "sha": "60a3fc128e708ba16e9f3a6f58728ce466fae549",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,40 +11,42 @@\n #include \"coincontroldialog.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"sendcoinsentry.h\"\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n+#include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n #include <QMessageBox>\n #include <QScrollBar>\n #include <QSettings>\n #include <QTextDocument>\n \n-SendCoinsDialog::SendCoinsDialog(QWidget *parent) :\n+SendCoinsDialog::SendCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SendCoinsDialog),\n     clientModel(0),\n     model(0),\n     fNewRecipientAllowed(true),\n-    fFeeMinimized(true)\n+    fFeeMinimized(true),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->addButton->setIcon(QIcon());\n-    ui->clearButton->setIcon(QIcon());\n-    ui->sendButton->setIcon(QIcon());\n-#else\n-    ui->addButton->setIcon(SingleColorIcon(\":/icons/add\"));\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->sendButton->setIcon(SingleColorIcon(\":/icons/send\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->addButton->setIcon(QIcon());\n+        ui->clearButton->setIcon(QIcon());\n+        ui->sendButton->setIcon(QIcon());\n+    } else {\n+        ui->addButton->setIcon(platformStyle->SingleColorIcon(\":/icons/add\"));\n+        ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->sendButton->setIcon(platformStyle->SingleColorIcon(\":/icons/send\"));\n+    }\n \n     GUIUtil::setupAddressWidget(ui->lineEditCoinControlChange, this);\n \n@@ -363,7 +365,7 @@ void SendCoinsDialog::accept()\n \n SendCoinsEntry *SendCoinsDialog::addEntry()\n {\n-    SendCoinsEntry *entry = new SendCoinsEntry(this);\n+    SendCoinsEntry *entry = new SendCoinsEntry(platformStyle, this);\n     entry->setModel(model);\n     ui->entries->addWidget(entry);\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n@@ -710,7 +712,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n // Coin Control: button inputs -> show actual coin control dialog\n void SendCoinsDialog::coinControlButtonClicked()\n {\n-    CoinControlDialog dlg;\n+    CoinControlDialog dlg(platformStyle);\n     dlg.setModel(model);\n     dlg.exec();\n     coinControlUpdateLabels();\n@@ -752,10 +754,9 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            CPubKey pubkey;\n             CKeyID keyid;\n             addr.GetKeyID(keyid);\n-            if (!model->getPubKey(keyid, pubkey)) // Unknown change address\n+            if (!model->havePrivKey(keyid)) // Unknown change address\n             {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n             }"
      },
      {
        "sha": "391905ffcd7ac06d657f9af90a9efa5c56987d7c",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,6 +12,7 @@\n \n class ClientModel;\n class OptionsModel;\n+class PlatformStyle;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n \n@@ -31,7 +32,7 @@ class SendCoinsDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit SendCoinsDialog(QWidget *parent = 0);\n+    explicit SendCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~SendCoinsDialog();\n \n     void setClientModel(ClientModel *clientModel);\n@@ -60,6 +61,7 @@ public Q_SLOTS:\n     WalletModel *model;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;\n+    const PlatformStyle *platformStyle;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n     // of a message and message flags for use in Q_EMIT message()."
      },
      {
        "sha": "44aa8ad1af22a7aad4e42dfd51969eefef5c84ff",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,30 +9,30 @@\n #include \"addresstablemodel.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"walletmodel.h\"\n \n #include <QApplication>\n #include <QClipboard>\n \n-SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n+SendCoinsEntry::SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *parent) :\n     QStackedWidget(parent),\n     ui(new Ui::SendCoinsEntry),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-    ui->addressBookButton->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->pasteButton->setIcon(SingleColorIcon(\":/icons/editpaste\"));\n-    ui->deleteButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->deleteButton_is->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->deleteButton_s->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->pasteButton->setIcon(platformStyle->SingleColorIcon(\":/icons/editpaste\"));\n+    ui->deleteButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n     setCurrentWidget(ui->SendCoins);\n \n-#ifdef Q_OS_MAC\n-    ui->payToLayout->setSpacing(4);\n-#endif\n+    if (platformStyle->getUseExtraSpacing())\n+        ui->payToLayout->setSpacing(4);\n #if QT_VERSION >= 0x040700\n     ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n #endif\n@@ -65,7 +65,7 @@ void SendCoinsEntry::on_addressBookButton_clicked()\n {\n     if(!model)\n         return;\n-    AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n+    AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n     dlg.setModel(model->getAddressTableModel());\n     if(dlg.exec())\n     {"
      },
      {
        "sha": "107ab70158c504e7674ed07eeaecae813490f38b",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,6 +10,7 @@\n #include <QStackedWidget>\n \n class WalletModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class SendCoinsEntry;\n@@ -25,7 +26,7 @@ class SendCoinsEntry : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit SendCoinsEntry(QWidget *parent = 0);\n+    explicit SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~SendCoinsEntry();\n \n     void setModel(WalletModel *model);\n@@ -64,6 +65,7 @@ private Q_SLOTS:\n     SendCoinsRecipient recipient;\n     Ui::SendCoinsEntry *ui;\n     WalletModel *model;\n+    const PlatformStyle *platformStyle;\n \n     bool updateLabel(const QString &address);\n };"
      },
      {
        "sha": "60e8e36ebe7548867b1c5eb45ac47153f5371580",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"addressbookpage.h\"\n #include \"guiutil.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n@@ -20,21 +20,22 @@\n \n #include <QClipboard>\n \n-SignVerifyMessageDialog::SignVerifyMessageDialog(QWidget *parent) :\n+SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SignVerifyMessageDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-    ui->addressBookButton_SM->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->pasteButton_SM->setIcon(SingleColorIcon(\":/icons/editpaste\"));\n-    ui->copySignatureButton_SM->setIcon(SingleColorIcon(\":/icons/editcopy\"));\n-    ui->signMessageButton_SM->setIcon(SingleColorIcon(\":/icons/edit\"));\n-    ui->clearButton_SM->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->addressBookButton_VM->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->verifyMessageButton_VM->setIcon(SingleColorIcon(\":/icons/transaction_0\"));\n-    ui->clearButton_VM->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->pasteButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/editpaste\"));\n+    ui->copySignatureButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/editcopy\"));\n+    ui->signMessageButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/edit\"));\n+    ui->clearButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/transaction_0\"));\n+    ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n #if QT_VERSION >= 0x040700\n     ui->signatureOut_SM->setPlaceholderText(tr(\"Click \\\"Sign Message\\\" to generate signature\"));\n@@ -94,7 +95,7 @@ void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()\n {\n     if (model && model->getAddressTableModel())\n     {\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if (dlg.exec())\n         {\n@@ -148,12 +149,12 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->messageIn_SM->document()->toPlainText().toStdString();\n \n     std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!key.SignCompact(ss.GetHash(), vchSig))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n@@ -185,7 +186,7 @@ void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()\n {\n     if (model && model->getAddressTableModel())\n     {\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if (dlg.exec())\n         {\n@@ -223,12 +224,12 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->messageIn_VM->document()->toPlainText().toStdString();\n \n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n     {\n         ui->signatureIn_VM->setValid(false);\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");"
      },
      {
        "sha": "d651d5049b5035dfcfee0e96b1d54148a6e43357",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QDialog>\n \n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -18,7 +19,7 @@ class SignVerifyMessageDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit SignVerifyMessageDialog(QWidget *parent);\n+    explicit SignVerifyMessageDialog(const PlatformStyle *platformStyle, QWidget *parent);\n     ~SignVerifyMessageDialog();\n \n     void setModel(WalletModel *model);\n@@ -34,6 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n private:\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n+    const PlatformStyle *platformStyle;\n \n private Q_SLOTS:\n     /* sign message */"
      },
      {
        "sha": "801c6c62d2b609e2be86fb28f85ae271685893a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -165,7 +165,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n         if (fAllFromMe)\n         {\n-            if(fAllFromMe == ISMINE_WATCH_ONLY)\n+            if(fAllFromMe & ISMINE_WATCH_ONLY)\n                 strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n \n             //\n@@ -190,7 +190,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                         if(toSelf == ISMINE_SPENDABLE)\n                             strHTML += \" (own address)\";\n-                        else if(toSelf == ISMINE_WATCH_ONLY)\n+                        else if(toSelf & ISMINE_WATCH_ONLY)\n                             strHTML += \" (watch-only)\";\n                         strHTML += \"<br>\";\n                     }"
      },
      {
        "sha": "d8623daf5dba05171a2ec5f32f3aba705d4847ec",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -56,7 +56,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                sub.involvesWatchAddress = mine == ISMINE_WATCH_ONLY;\n+                sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n@@ -86,15 +86,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n "
      },
      {
        "sha": "98ad1a44b68fac46ac109e223a49d9dbc23bafe2",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactiondesc.h\"\n #include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n@@ -25,6 +25,8 @@\n #include <QIcon>\n #include <QList>\n \n+#include <boost/foreach.hpp>\n+\n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n         Qt::AlignLeft|Qt::AlignVCenter, /* status */\n@@ -220,12 +222,13 @@ class TransactionTablePriv\n     }\n };\n \n-TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *parent):\n+TransactionTableModel::TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent):\n         QAbstractTableModel(parent),\n         wallet(wallet),\n         walletModel(parent),\n         priv(new TransactionTablePriv(wallet, this)),\n-        fProcessingQueuedTransactions(false)\n+        fProcessingQueuedTransactions(false),\n+        platformStyle(platformStyle)\n {\n     columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Label\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet();\n@@ -519,7 +522,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case Qt::DecorationRole:\n     {\n         QIcon icon = qvariant_cast<QIcon>(index.data(RawDecorationRole));\n-        return TextColorIcon(icon);\n+        return platformStyle->TextColorIcon(icon);\n     }\n     case Qt::DisplayRole:\n         switch(index.column())"
      },
      {
        "sha": "2089f703a66af616145a9e73e1c8d129d7466449",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,6 +10,7 @@\n #include <QAbstractTableModel>\n #include <QStringList>\n \n+class PlatformStyle;\n class TransactionRecord;\n class TransactionTablePriv;\n class WalletModel;\n@@ -23,7 +24,7 @@ class TransactionTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit TransactionTableModel(CWallet* wallet, WalletModel *parent = 0);\n+    explicit TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent = 0);\n     ~TransactionTableModel();\n \n     enum ColumnIndex {\n@@ -82,6 +83,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QStringList columns;\n     TransactionTablePriv *priv;\n     bool fProcessingQueuedTransactions;\n+    const PlatformStyle *platformStyle;\n \n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();"
      },
      {
        "sha": "54e5a82720336cf47346f3eed8f34a8914fc8915",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 31,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,7 +10,7 @@\n #include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactiondescdialog.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactionrecord.h\"\n@@ -35,7 +35,7 @@\n #include <QUrl>\n #include <QVBoxLayout>\n \n-TransactionView::TransactionView(QWidget *parent) :\n+TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent), model(0), transactionProxyModel(0),\n     transactionView(0)\n {\n@@ -44,27 +44,28 @@ TransactionView::TransactionView(QWidget *parent) :\n \n     QHBoxLayout *hlayout = new QHBoxLayout();\n     hlayout->setContentsMargins(0,0,0,0);\n-#ifdef Q_OS_MAC\n-    hlayout->setSpacing(5);\n-    hlayout->addSpacing(26);\n-#else\n-    hlayout->setSpacing(0);\n-    hlayout->addSpacing(23);\n-#endif\n+\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->setSpacing(5);\n+        hlayout->addSpacing(26);\n+    } else {\n+        hlayout->setSpacing(0);\n+        hlayout->addSpacing(23);\n+    }\n \n     watchOnlyWidget = new QComboBox(this);\n     watchOnlyWidget->setFixedWidth(24);\n     watchOnlyWidget->addItem(\"\", TransactionFilterProxy::WatchOnlyFilter_All);\n-    watchOnlyWidget->addItem(SingleColorIcon(\":/icons/eye_plus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_Yes);\n-    watchOnlyWidget->addItem(SingleColorIcon(\":/icons/eye_minus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_No);\n+    watchOnlyWidget->addItem(platformStyle->SingleColorIcon(\":/icons/eye_plus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_Yes);\n+    watchOnlyWidget->addItem(platformStyle->SingleColorIcon(\":/icons/eye_minus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_No);\n     hlayout->addWidget(watchOnlyWidget);\n \n     dateWidget = new QComboBox(this);\n-#ifdef Q_OS_MAC\n-    dateWidget->setFixedWidth(121);\n-#else\n-    dateWidget->setFixedWidth(120);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        dateWidget->setFixedWidth(121);\n+    } else {\n+        dateWidget->setFixedWidth(120);\n+    }\n     dateWidget->addItem(tr(\"All\"), All);\n     dateWidget->addItem(tr(\"Today\"), Today);\n     dateWidget->addItem(tr(\"This week\"), ThisWeek);\n@@ -75,11 +76,11 @@ TransactionView::TransactionView(QWidget *parent) :\n     hlayout->addWidget(dateWidget);\n \n     typeWidget = new QComboBox(this);\n-#ifdef Q_OS_MAC\n-    typeWidget->setFixedWidth(121);\n-#else\n-    typeWidget->setFixedWidth(120);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        typeWidget->setFixedWidth(121);\n+    } else {\n+        typeWidget->setFixedWidth(120);\n+    }\n \n     typeWidget->addItem(tr(\"All\"), TransactionFilterProxy::ALL_TYPES);\n     typeWidget->addItem(tr(\"Received with\"), TransactionFilterProxy::TYPE(TransactionRecord::RecvWithAddress) |\n@@ -102,11 +103,11 @@ TransactionView::TransactionView(QWidget *parent) :\n #if QT_VERSION >= 0x040700\n     amountWidget->setPlaceholderText(tr(\"Min amount\"));\n #endif\n-#ifdef Q_OS_MAC\n-    amountWidget->setFixedWidth(97);\n-#else\n-    amountWidget->setFixedWidth(100);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        amountWidget->setFixedWidth(97);\n+    } else {\n+        amountWidget->setFixedWidth(100);\n+    }\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n@@ -121,11 +122,11 @@ TransactionView::TransactionView(QWidget *parent) :\n     vlayout->setSpacing(0);\n     int width = view->verticalScrollBar()->sizeHint().width();\n     // Cover scroll bar width with spacing\n-#ifdef Q_OS_MAC\n-    hlayout->addSpacing(width+2);\n-#else\n-    hlayout->addSpacing(width);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->addSpacing(width+2);\n+    } else {\n+        hlayout->addSpacing(width);\n+    }\n     // Always show scroll bar\n     view->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);\n     view->setTabKeyNavigation(false);"
      },
      {
        "sha": "ac157fb98d86cbbe5199c1daba02241ea11b5b2d",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,6 +10,7 @@\n #include <QWidget>\n #include <QKeyEvent>\n \n+class PlatformStyle;\n class TransactionFilterProxy;\n class WalletModel;\n \n@@ -32,7 +33,7 @@ class TransactionView : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit TransactionView(QWidget *parent = 0);\n+    explicit TransactionView(const PlatformStyle *platformStyle, QWidget *parent = 0);\n \n     void setModel(WalletModel *model);\n "
      },
      {
        "sha": "ba8c28464d7f5654b61dd2f790b915cd60a9dee9",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,9 +12,10 @@\n #include <QHBoxLayout>\n #include <QLabel>\n \n-WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n+WalletFrame::WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui) :\n     QFrame(_gui),\n-    gui(_gui)\n+    gui(_gui),\n+    platformStyle(platformStyle)\n {\n     // Leave HBox hook for adding a list view later\n     QHBoxLayout *walletFrameLayout = new QHBoxLayout(this);\n@@ -42,7 +43,7 @@ bool WalletFrame::addWallet(const QString& name, WalletModel *walletModel)\n     if (!gui || !clientModel || !walletModel || mapWalletViews.count(name) > 0)\n         return false;\n \n-    WalletView *walletView = new WalletView(this);\n+    WalletView *walletView = new WalletView(platformStyle, this);\n     walletView->setBitcoinGUI(gui);\n     walletView->setClientModel(clientModel);\n     walletView->setWalletModel(walletModel);"
      },
      {
        "sha": "9a56e97f9cfe9eb5c0e557d5189fda98c0949622",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -10,6 +10,7 @@\n \n class BitcoinGUI;\n class ClientModel;\n+class PlatformStyle;\n class SendCoinsRecipient;\n class WalletModel;\n class WalletView;\n@@ -23,7 +24,7 @@ class WalletFrame : public QFrame\n     Q_OBJECT\n \n public:\n-    explicit WalletFrame(BitcoinGUI *_gui = 0);\n+    explicit WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui = 0);\n     ~WalletFrame();\n \n     void setClientModel(ClientModel *clientModel);\n@@ -45,6 +46,8 @@ class WalletFrame : public QFrame\n \n     bool bOutOfSync;\n \n+    const PlatformStyle *platformStyle;\n+\n     WalletView *currentWalletView();\n \n public Q_SLOTS:"
      },
      {
        "sha": "5c21db8bdf4d7ce39d519531b7a1dd62df18a55d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -25,7 +25,9 @@\n #include <QSet>\n #include <QTimer>\n \n-WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n+#include <boost/foreach.hpp>\n+\n+WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n@@ -37,7 +39,7 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n     fForceCheckBalanceChanged = false;\n \n     addressTableModel = new AddressTableModel(wallet, this);\n-    transactionTableModel = new TransactionTableModel(wallet, this);\n+    transactionTableModel = new TransactionTableModel(platformStyle, wallet, this);\n     recentRequestsTableModel = new RecentRequestsTableModel(wallet, this);\n \n     // This timer will be fired repeatedly to update the balance\n@@ -554,6 +556,11 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return wallet->GetPubKey(address, vchPubKeyOut);\n }\n \n+bool WalletModel::havePrivKey(const CKeyID &address) const\n+{\n+    return wallet->HaveKey(address);\n+}\n+\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {"
      },
      {
        "sha": "a5e877d81f6aa589199eca07d49405bc115b95a6",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -17,6 +17,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PlatformStyle;\n class RecentRequestsTableModel;\n class TransactionTableModel;\n class WalletModelTransaction;\n@@ -100,7 +101,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n+    explicit WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n     ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins\n@@ -186,6 +187,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    bool havePrivKey(const CKeyID &address) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;"
      },
      {
        "sha": "fa96f62e033e17bfe76fd64bd76cb352a0e64c0f",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,8 +11,8 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n #include \"overviewpage.h\"\n+#include \"platformstyle.h\"\n #include \"receivecoinsdialog.h\"\n-#include \"scicon.h\"\n #include \"sendcoinsdialog.h\"\n #include \"signverifymessagedialog.h\"\n #include \"transactiontablemodel.h\"\n@@ -29,31 +29,32 @@\n #include <QPushButton>\n #include <QVBoxLayout>\n \n-WalletView::WalletView(QWidget *parent):\n+WalletView::WalletView(const PlatformStyle *platformStyle, QWidget *parent):\n     QStackedWidget(parent),\n     clientModel(0),\n-    walletModel(0)\n+    walletModel(0),\n+    platformStyle(platformStyle)\n {\n     // Create tabs\n-    overviewPage = new OverviewPage();\n+    overviewPage = new OverviewPage(platformStyle);\n \n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n     QHBoxLayout *hbox_buttons = new QHBoxLayout();\n-    transactionView = new TransactionView(this);\n+    transactionView = new TransactionView(platformStyle, this);\n     vbox->addWidget(transactionView);\n     QPushButton *exportButton = new QPushButton(tr(\"&Export\"), this);\n     exportButton->setToolTip(tr(\"Export the data in the current tab to a file\"));\n-#ifndef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    exportButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n+    if (platformStyle->getImagesOnButtons()) {\n+        exportButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n     hbox_buttons->addStretch();\n     hbox_buttons->addWidget(exportButton);\n     vbox->addLayout(hbox_buttons);\n     transactionsPage->setLayout(vbox);\n \n-    receiveCoinsPage = new ReceiveCoinsDialog();\n-    sendCoinsPage = new SendCoinsDialog();\n+    receiveCoinsPage = new ReceiveCoinsDialog(platformStyle);\n+    sendCoinsPage = new SendCoinsDialog(platformStyle);\n \n     addWidget(overviewPage);\n     addWidget(transactionsPage);\n@@ -182,7 +183,7 @@ void WalletView::gotoSendCoinsPage(QString addr)\n void WalletView::gotoSignMessageTab(QString addr)\n {\n     // calls show() in showTab_SM()\n-    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n+    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(platformStyle, this);\n     signVerifyMessageDialog->setAttribute(Qt::WA_DeleteOnClose);\n     signVerifyMessageDialog->setModel(walletModel);\n     signVerifyMessageDialog->showTab_SM(true);\n@@ -194,7 +195,7 @@ void WalletView::gotoSignMessageTab(QString addr)\n void WalletView::gotoVerifyMessageTab(QString addr)\n {\n     // calls show() in showTab_VM()\n-    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n+    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(platformStyle, this);\n     signVerifyMessageDialog->setAttribute(Qt::WA_DeleteOnClose);\n     signVerifyMessageDialog->setModel(walletModel);\n     signVerifyMessageDialog->showTab_VM(true);\n@@ -272,7 +273,7 @@ void WalletView::usedSendingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n+    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n     dlg->setAttribute(Qt::WA_DeleteOnClose);\n     dlg->setModel(walletModel->getAddressTableModel());\n     dlg->show();\n@@ -282,7 +283,7 @@ void WalletView::usedReceivingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n+    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n     dlg->setAttribute(Qt::WA_DeleteOnClose);\n     dlg->setModel(walletModel->getAddressTableModel());\n     dlg->show();"
      },
      {
        "sha": "f97cf1ee807778c01eed5c8176a287190be191cd",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,6 +12,7 @@\n class BitcoinGUI;\n class ClientModel;\n class OverviewPage;\n+class PlatformStyle;\n class ReceiveCoinsDialog;\n class SendCoinsDialog;\n class SendCoinsRecipient;\n@@ -34,7 +35,7 @@ class WalletView : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit WalletView(QWidget *parent);\n+    explicit WalletView(const PlatformStyle *platformStyle, QWidget *parent);\n     ~WalletView();\n \n     void setBitcoinGUI(BitcoinGUI *gui);\n@@ -64,6 +65,7 @@ class WalletView : public QStackedWidget\n     TransactionView *transactionView;\n \n     QProgressDialog *progressDialog;\n+    const PlatformStyle *platformStyle;\n \n public Q_SLOTS:\n     /** Switch to overview (home) page */"
      },
      {
        "sha": "74d27e73bbd9aa9d12156d38c9e49151f381d64c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"main.h\"\n@@ -64,6 +65,8 @@ class RestErr\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+extern UniValue mempoolInfoToJSON();\n+extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n@@ -292,6 +295,58 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n+static bool rest_mempool_info(AcceptedConnection* conn,\n+                              const std::string& strURIPart,\n+                              const std::string& strRequest,\n+                              const std::map<std::string, std::string>& mapHeaders,\n+                              bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolInfoObject = mempoolInfoToJSON();\n+\n+        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n+static bool rest_mempool_contents(AcceptedConnection* conn,\n+                                  const std::string& strURIPart,\n+                                  const std::string& strRequest,\n+                                  const std::map<std::string, std::string>& mapHeaders,\n+                                  bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolObject = mempoolToJSON(true);\n+\n+        string strJSON = mempoolObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n static bool rest_tx(AcceptedConnection* conn,\n                     const std::string& strURIPart,\n                     const std::string& strRequest,\n@@ -552,6 +607,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n+      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/contents\", rest_mempool_contents},\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n };"
      },
      {
        "sha": "e6751de96bae527391a963a6c76d06eee924cb0c",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 45,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -3,13 +3,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"amount.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n+#include \"streams.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n \n@@ -168,45 +175,8 @@ UniValue getdifficulty(const UniValue& params, bool fHelp)\n     return GetDifficulty();\n }\n \n-\n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue mempoolToJSON(bool fVerbose = false)\n {\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getrawmempool ( verbose )\\n\"\n-            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult: (for verbose = false):\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in bitcoins\\n\"\n-            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n-            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n-            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n-            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n-            \"       ... ]\\n\"\n-            \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"true\")\n-            + HelpExampleRpc(\"getrawmempool\", \"true\")\n-        );\n-\n-    LOCK(cs_main);\n-\n-    bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n-\n     if (fVerbose)\n     {\n         LOCK(mempool.cs);\n@@ -254,6 +224,47 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n     }\n }\n \n+UniValue getrawmempool(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"getrawmempool ( verbose )\\n\"\n+            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"\\nResult: (for verbose = false):\\n\"\n+            \"[                     (json array of string)\\n\"\n+            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nResult: (for verbose = true):\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n+            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n+            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n+            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n+            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n+            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+            \"       ... ]\\n\"\n+            \"  }, ...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"getrawmempool\", \"true\")\n+            + HelpExampleRpc(\"getrawmempool\", \"true\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    bool fVerbose = false;\n+    if (params.size() > 0)\n+        fVerbose = params[0].get_bool();\n+\n+    return mempoolToJSON(fVerbose);\n+}\n+\n UniValue getblockhash(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -455,7 +466,7 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in btc\\n\"\n+            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n             \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n             \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n@@ -750,6 +761,16 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n     return res;\n }\n \n+UniValue mempoolInfoToJSON()\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n+    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n+    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+\n+    return ret;\n+}\n+\n UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -767,12 +788,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n \n-    UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-\n-    return ret;\n+    return mempoolInfoToJSON();\n }\n \n UniValue invalidateblock(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "0c8e6d6d669a4993b73355ee0cfda27694275ae0",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -87,6 +87,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n     { \"importaddress\", 2 },\n+    { \"importaddress\", 3 },\n+    { \"importpubkey\", 2 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "b7d4ff58fce496e9a84f99594e6633d5cbe08b54",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -14,7 +15,9 @@\n #include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "6d10d1ce158f572b29cab801535de99b4fc91bad",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -12,6 +12,7 @@\n #include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n@@ -59,8 +60,8 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc/kb\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "56ec59171d820e1c691ce35a1cd32ee97e2254f3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"rpcserver.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"net.h\"\n@@ -12,6 +13,7 @@\n #include \"sync.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/foreach.hpp>\n@@ -421,7 +423,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n@@ -441,8 +443,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",\n-        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n+    obj.push_back(Pair(\"subversion\",    strSubVersion));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      },
      {
        "sha": "9eeca5b7d922d03f3c43f219c8f9f0d894530288",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 19,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"chain.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n@@ -18,7 +20,9 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #endif\n@@ -145,7 +149,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n@@ -314,8 +318,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,...}\\n\"\n-            \"\\nCreate a transaction spending the given inputs and sending to the given addresses.\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...}\\n\"\n+            \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n+            \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n             \"Note that the transaction's inputs are not signed, and\\n\"\n             \"it is not stored in the wallet or transmitted to the network.\\n\"\n@@ -324,23 +329,25 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"1. \\\"transactions\\\"        (string, required) A json array of json objects\\n\"\n             \"     [\\n\"\n             \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",  (string, required) The transaction id\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",    (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n        (numeric, required) The output number\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n+            \"2. \\\"outputs\\\"             (string, required) a json object with outputs\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the btc amount\\n\"\n-            \"      ,...\\n\"\n+            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the \" + CURRENCY_UNIT + \" amount\\n\"\n+            \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n+            \"      ...\\n\"\n             \"    }\\n\"\n-\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n \n             \"\\nExamples\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n     LOCK(cs_main);\n@@ -371,19 +378,27 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     set<CBitcoinAddress> setAddress;\n     vector<string> addrList = sendTo.getKeys();\n     BOOST_FOREACH(const string& name_, addrList) {\n-        CBitcoinAddress address(name_);\n-        if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n-        if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n-        setAddress.insert(address);\n+        if (name_ == \"data\") {\n+            std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n+\n+            CTxOut out(0, CScript() << OP_RETURN << data);\n+            rawTx.vout.push_back(out);\n+        } else {\n+            CBitcoinAddress address(name_);\n+            if (!address.IsValid())\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n-        CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        CAmount nAmount = AmountFromValue(sendTo[name_]);\n+            if (setAddress.count(address))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n+            setAddress.insert(address);\n \n-        CTxOut out(nAmount, scriptPubKey);\n-        rawTx.vout.push_back(out);\n+            CScript scriptPubKey = GetScriptForDestination(address.Get());\n+            CAmount nAmount = AmountFromValue(sendTo[name_]);\n+\n+            CTxOut out(nAmount, scriptPubKey);\n+            rawTx.vout.push_back(out);\n+        }\n     }\n \n     return EncodeHexTx(rawTx);\n@@ -418,7 +433,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\""
      },
      {
        "sha": "4088f374f83157e390c17a2c2556cbc14dc4dd93",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,7 +11,6 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n@@ -121,8 +120,8 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isReal() && !value.isNum())\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n+    if (!value.isNum() && !value.isStr())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n@@ -133,7 +132,12 @@ CAmount AmountFromValue(const UniValue& value)\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n-    return UniValue(UniValue::VREAL, FormatMoney(amount));\n+    bool sign = amount < 0;\n+    int64_t n_abs = (sign ? -amount : amount);\n+    int64_t quotient = n_abs / COIN;\n+    int64_t remainder = n_abs % COIN;\n+    return UniValue(UniValue::VNUM,\n+            strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n }\n \n uint256 ParseHashV(const UniValue& v, string strName)\n@@ -359,6 +363,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },\n     { \"wallet\",             \"importwallet\",           &importwallet,           true  },\n     { \"wallet\",             \"importaddress\",          &importaddress,          true  },\n+    { \"wallet\",             \"importpubkey\",           &importpubkey,           true  },\n     { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true  },\n     { \"wallet\",             \"listaccounts\",           &listaccounts,           false },\n     { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false },\n@@ -748,14 +753,14 @@ void StopRPCThreads()\n     {\n         acceptor->cancel(ec);\n         if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling acceptor\", __func__, ec.message());\n+            LogPrintf(\"%s: Warning: %s when cancelling acceptor\\n\", __func__, ec.message());\n     }\n     rpc_acceptors.clear();\n     BOOST_FOREACH(const PAIRTYPE(std::string, boost::shared_ptr<deadline_timer>) &timer, deadlineTimers)\n     {\n         timer.second->cancel(ec);\n         if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling timer\", __func__, ec.message());\n+            LogPrintf(\"%s: Warning: %s when cancelling timer\\n\", __func__, ec.message());\n     }\n     deadlineTimers.clear();\n "
      },
      {
        "sha": "3a71fd510f0690aac97d3dabefe9da3393e439c5",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -161,6 +161,7 @@ extern UniValue clearbanned(const UniValue& params, bool fHelp);\n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n+extern UniValue importpubkey(const UniValue& params, bool fHelp);\n extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n extern UniValue importwallet(const UniValue& params, bool fHelp);\n "
      },
      {
        "sha": "1d5aac7b3484f625ca166adfa0cc7ceb2b23169d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -286,6 +286,11 @@ CScript GetScriptForDestination(const CTxDestination& dest)\n     return script;\n }\n \n+CScript GetScriptForRawPubKey(const CPubKey& pubKey)\n+{\n+    return CScript() << std::vector<unsigned char>(pubKey.begin(), pubKey.end()) << OP_CHECKSIG;\n+}\n+\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n {\n     CScript script;"
      },
      {
        "sha": "9e17dac700b10a9f1b4a5b75b2e750c68ad4cbbb",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -73,6 +73,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      },
      {
        "sha": "705647e4a55c70f9a7fa059486d2f9a49d3fdaf5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -101,7 +101,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n \n /** Wrapper around boost::unique_lock<Mutex> */\n template <typename Mutex>\n-class CMutexLock\n+class SCOPED_LOCKABLE CMutexLock\n {\n private:\n     boost::unique_lock<Mutex> lock;\n@@ -129,15 +129,15 @@ class CMutexLock\n     }\n \n public:\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n+    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n     {\n         if (!pmutexIn) return;\n \n@@ -148,7 +148,7 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CMutexLock()\n+    ~CMutexLock() UNLOCK_FUNCTION()\n     {\n         if (lock.owns_lock())\n             LeaveCritical();"
      },
      {
        "sha": "da296a046144ef5c28295c3ec0bca10a3efa3b25",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -2,12 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n // Unit tests for denial-of-service detection/prevention code\n-//\n-\n-\n \n+#include \"chainparams.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "e36112bd4fd12211236ee03a86617d1182cff682",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -18,4 +18,16 @@ uint256_tests.cpp.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n\\ No newline at end of file\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run  test_bitcoin --help   for the full list.\n+"
      },
      {
        "sha": "dd3c51d09b36d3b4879c866d97cac11bfdb37e81",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -2,17 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n // Unit tests for alert system\n-//\n \n #include \"alert.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"data/alertTests.raw.h\"\n-\n-#include \"main.h\"\n+#include \"main.h\" // For PartitionCheck\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n@@ -165,8 +162,8 @@ BOOST_AUTO_TEST_CASE(AlertNotify)\n     SetMockTime(11);\n     const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n \n-    boost::filesystem::path temp = GetTempPath() / \"alertnotify.txt\";\n-    boost::filesystem::remove(temp);\n+    boost::filesystem::path temp = GetTempPath() /\n+        boost::filesystem::unique_path(\"alertnotify-%%%%.txt\");\n \n     mapArgs[\"-alertnotify\"] = std::string(\"echo %s >> \") + temp.string();\n "
      },
      {
        "sha": "69084213a2d4464dd018dcd518487996c7f97046",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -88,12 +88,23 @@ void RunTest(const TestVector &test) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);\n+\n         // Test private key\n         CBitcoinExtKey b58key; b58key.SetKey(key);\n         BOOST_CHECK(b58key.ToString() == derive.prv);\n+\n+        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n+        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n+        assert(checkKey == key); //ensure a base58 decoded key also matches\n+\n         // Test public key\n         CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n         BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n+\n+        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n+        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n+        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+\n         // Derive new keys\n         CExtKey keyNew;\n         BOOST_CHECK(key.Derive(keyNew, derive.nChild));"
      },
      {
        "sha": "6b30d6aa8ae7a0ca65303b7cc92333f0aa75f494",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -469,7 +469,7 @@ static std::vector<unsigned char> RandomData()\n BOOST_AUTO_TEST_CASE(rolling_bloom)\n {\n     // last-100-entry, 1% false positive:\n-    CRollingBloomFilter rb1(100, 0.01, 0);\n+    CRollingBloomFilter rb1(100, 0.01);\n \n     // Overfill:\n     static const int DATASIZE=399;\n@@ -500,7 +500,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 175);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n-    rb1.clear();\n+    rb1.reset();\n     BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n \n     // Now roll through data, make sure last 100 entries\n@@ -527,7 +527,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 100);\n \n     // last-1000-entry, 0.01% false positive:\n-    CRollingBloomFilter rb2(1000, 0.001, 0);\n+    CRollingBloomFilter rb2(1000, 0.001);\n     for (int i = 0; i < DATASIZE; i++) {\n         rb2.insert(data[i]);\n     }"
      },
      {
        "sha": "f7e24706170d49aca8b73cb664818e9776c90a99",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,7 +4,8 @@\n \n #include \"clientversion.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckBlock\n+#include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\"\n "
      },
      {
        "sha": "3bf80ca4348a23074f76b71a944a63bac00e4753",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -56,5 +56,35 @@\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n     \"output_cmp\": \"txcreatesign.hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outdata=4:badhexdata\"],\n+    \"return_code\": 1\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outdata=badhexdata\"],\n+    \"return_code\": 1\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n+     \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n+    \"output_cmp\": \"txcreatedata1.hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n+     \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n+    \"output_cmp\": \"txcreatedata2.hex\"\n   }\n ]"
      },
      {
        "sha": "eccc7604e6f811da521420f7d3b3079b8e4a84df",
        "filename": "src/test/data/txcreatedata1.hex",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/data/txcreatedata1.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/data/txcreatedata1.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata1.hex?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1 @@\n+01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000ffffffff0280a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac0084d71700000000526a4c4f54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e00000000"
      },
      {
        "sha": "3c7644c297bf580bcb267a8ad5cdc53be8d69644",
        "filename": "src/test/data/txcreatedata2.hex",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/data/txcreatedata2.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/data/txcreatedata2.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata2.hex?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1 @@\n+01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000ffffffff0280a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac0000000000000000526a4c4f54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e00000000"
      },
      {
        "sha": "eb61a2884d9f909f9e648bb74c04dd414814c729",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -60,18 +60,18 @@ BOOST_AUTO_TEST_CASE(boolarg)\n     BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -foo should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -foo should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -foo should win\n+    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n     BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n+    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+\n     // New 0.6 feature: treat -- same as -:\n     ResetArgs(\"--foo=1\");\n     BOOST_CHECK(GetBoolArg(\"-foo\", false));\n@@ -150,9 +150,9 @@ BOOST_AUTO_TEST_CASE(boolargno)\n     BOOST_CHECK(GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-foo --nofoo\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo -foo\"); // foo always wins:\n     BOOST_CHECK(GetBoolArg(\"-foo\", true));"
      },
      {
        "sha": "2439689d7ff1396c37fe993574cb9d6cd51a5893",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "ad79a558c269cf6052460a69152901d6abb1eab8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -2,12 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "b6eb39bc3868e1eee720f07d7ef6df4baa785cbe",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -2,8 +2,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"pow.h\"\n+#include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "a65572e6f685a0b56df691e33cfcf46ddc4f5f39",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -110,6 +110,24 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n+{\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n+    // Allow more than one data transaction output\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n+    // Key not \"data\" (bad address)\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), runtime_error);\n+\n+    // Bad hex encoding of data output\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345\\\"}\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345g\\\"}\"), runtime_error);\n+\n+    // Data 81 bytes long\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081\\\"}\"));\n+}\n+\n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n {\n     BOOST_CHECK(ValueFromAmount(0LL).write() == \"0.00000000\");\n@@ -120,6 +138,29 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK(ValueFromAmount(100000000LL).write() == \"1.00000000\");\n     BOOST_CHECK(ValueFromAmount(2099999999999990LL).write() == \"20999999.99999990\");\n     BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(0).write(), \"0.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount((COIN/10000)*123456789).write(), \"12345.67890000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN).write(), \"-1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN/10).write(), \"-0.10000000\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000000).write(), \"100000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000000).write(), \"10000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000000).write(), \"1000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000).write(), \"100000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000).write(), \"10000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000).write(), \"1000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100).write(), \"100.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10).write(), \"10.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN).write(), \"1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10).write(), \"0.10000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100).write(), \"0.01000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000).write(), \"0.00100000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000).write(), \"0.00010000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000).write(), \"0.00001000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000000).write(), \"0.00000100\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000000).write(), \"0.00000010\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000000).write(), \"0.00000001\");\n }\n \n static UniValue ValueFromString(const std::string &str)"
      },
      {
        "sha": "52f41be8aec02e4b87a4d78fc961ff47bfced435",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -27,8 +27,6 @@ BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {\n-    LOCK(pwalletMain->cs_wallet);\n-\n     rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n \n     // old, 65-byte-long:\n@@ -68,25 +66,28 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n {\n     // Test RPC calls for various wallet statistics\n     UniValue r;\n-\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    CPubKey demoPubkey;\n+    CBitcoinAddress demoAddress;\n     UniValue retValue;\n     string strAccount = \"walletDemoAccount\";\n-    string strPurpose = \"receive\";\n-    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-        CWalletDB walletdb(pwalletMain->strWalletFile);\n-        CAccount account;\n-        account.vchPubKey = demoPubkey;\n-        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-        walletdb.WriteAccount(strAccount, account);\n-    });\n-\n-    CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n-\n+    CBitcoinAddress setaccountDemoAddress;\n+    {\n+        LOCK(pwalletMain->cs_wallet);\n+\n+        demoPubkey = pwalletMain->GenerateNewKey();\n+        demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+        string strPurpose = \"receive\";\n+        BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+            CWalletDB walletdb(pwalletMain->strWalletFile);\n+            CAccount account;\n+            account.vchPubKey = demoPubkey;\n+            pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+            walletdb.WriteAccount(strAccount, account);\n+        });\n+\n+        CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n+        setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+    }\n     /*********************************\n      * \t\t\tsetaccount\n      *********************************/"
      },
      {
        "sha": "37c046935f614533b8483ce04b402922766c555e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -8,11 +8,11 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)"
      },
      {
        "sha": "4b964615628cdcc9e06321ab2e6ab413e817ed7b",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -4,13 +4,16 @@\n \n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n-#include \"main.h\"\n+#include \"hash.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n+#include \"streams.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <iostream>"
      },
      {
        "sha": "a904e3862fe78393b8ac7b7c5257f4319dad38a9",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"chain.h\"\n #include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "8d81275a6fefa471460110ecde632a6a6f246b2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 3,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -6,8 +6,13 @@\n \n #include \"test_bitcoin.h\"\n \n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -27,20 +32,22 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup()\n+BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(network);\n+        noui_connect();\n }\n+\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup()\n+TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n@@ -86,6 +93,51 @@ TestingSetup::~TestingSetup()\n         boost::filesystem::remove_all(pathTemp);\n }\n \n+TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+{\n+    // Generate a 100-block chain:\n+    coinbaseKey.MakeNewKey(true);\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    {\n+        std::vector<CMutableTransaction> noTxns;\n+        CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n+        coinbaseTxns.push_back(b.vtx[0]);\n+    }\n+}\n+\n+//\n+// Create a new block with just given transactions, coinbase paying to\n+// scriptPubKey, and try to add it to the current chain.\n+//\n+CBlock\n+TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n+{\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+        block.vtx.push_back(tx);\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+\n+    CValidationState state;\n+    ProcessNewBlock(state, NULL, &block, true, NULL);\n+\n+    CBlock result = block;\n+    delete pblocktemplate;\n+    return result;\n+}\n+\n+TestChain100Setup::~TestChain100Setup()\n+{\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "b9314d0611be20b8394e1800d57c4991e3c88bd6",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -1,6 +1,8 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n+#include \"chainparamsbase.h\"\n+#include \"key.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n@@ -10,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup();\n+    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -23,8 +25,30 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup();\n+    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n \n+class CBlock;\n+struct CMutableTransaction;\n+class CScript;\n+\n+//\n+// Testing fixture that pre-creates a\n+// 100-block REGTEST-mode block chain\n+//\n+struct TestChain100Setup : public TestingSetup {\n+    TestChain100Setup();\n+\n+    // Create a new block with just given transactions, coinbase paying to\n+    // scriptPubKey, and try to add it to the current chain.\n+    CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n+                                 const CScript& scriptPubKey);\n+\n+    ~TestChain100Setup();\n+\n+    std::vector<CTransaction> coinbaseTxns; // For convenience, coinbase transactions\n+    CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n+};\n+\n #endif"
      },
      {
        "sha": "e70ebddc2f6865aada490792ebb77625eb52e904",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -11,10 +11,11 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "edad18644ec3f2ef9b4ec57d3b6bd290c83d572c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n+#include \"txmempool.h\"\n+#include \"random.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n+\n+static bool\n+ToMemPool(CMutableTransaction& tx)\n+{\n+    LOCK(cs_main);\n+\n+    CValidationState state;\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+{\n+    // Make sure skipping validation of transctions that were\n+    // validated going into the memory pool does not allow\n+    // double-spends in blocks to pass validation when they should not.\n+\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Create a double-spend of mature coinbase txn:\n+    std::vector<CMutableTransaction> spends;\n+    spends.resize(2);\n+    for (int i = 0; i < 2; i++)\n+    {\n+        spends[i].vin.resize(1);\n+        spends[i].vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+        spends[i].vin[0].prevout.n = 0;\n+        spends[i].vout.resize(1);\n+        spends[i].vout[0].nValue = 11*CENT;\n+        spends[i].vout[0].scriptPubKey = scriptPubKey;\n+\n+        // Sign:\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spends[i].vin[0].scriptSig << vchSig;\n+    }\n+\n+    CBlock block;\n+\n+    // Test 1: block with both of those transactions should be rejected.\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+\n+    // Test 2: ... and should be rejected if spend1 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[0]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Test 3: ... and should be rejected if spend2 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Final sanity test: first spend in mempool, second in block, that's OK:\n+    std::vector<CMutableTransaction> oneSpend;\n+    oneSpend.push_back(spends[0]);\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    // spends[1] should have been removed from the mempool when the\n+    // block with spends[0] is accepted:\n+    BOOST_CHECK_EQUAL(mempool.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "67cb9b9623257c93018b5ce8feec7a3e6fa33b59",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n \n     double vd = -7.21;\n     UniValue v7(vd);\n-    BOOST_CHECK(v7.isReal());\n+    BOOST_CHECK(v7.isNum());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n     string vs(\"yawn\");\n@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n     BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n \n     BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK(v.isReal());\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n \n     BOOST_CHECK(v.setInt((int)1023));\n@@ -272,7 +272,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"distance\"] = UniValue::VNUM;\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n-    objTypes[\"temperature\"] = UniValue::VREAL;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      },
      {
        "sha": "21ecd652388584e0b4292fa4430fff6013b70e7b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txdb.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "c921dae45d35f1993454d14ee71ca5a2d93a246c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -348,7 +348,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\\n\");\n         return false;\n     }\n     return true;\n@@ -367,7 +367,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         minerPolicyEstimator->Read(filein);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\\n\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "1d49a2cfc9e65680535e43a07b9dfdfb4cbf244a",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -86,7 +86,7 @@ bool UniValue::setFloat(double val)\n     oss << std::setprecision(16) << val;\n \n     bool ret = setNumStr(oss.str());\n-    typ = VREAL;\n+    typ = VNUM;\n     return ret;\n }\n \n@@ -210,7 +210,6 @@ const char *uvTypeName(UniValue::VType t)\n     case UniValue::VARR: return \"array\";\n     case UniValue::VSTR: return \"string\";\n     case UniValue::VNUM: return \"number\";\n-    case UniValue::VREAL: return \"number\";\n     }\n \n     // not reached\n@@ -280,7 +279,7 @@ int64_t UniValue::get_int64() const\n \n double UniValue::get_real() const\n {\n-    if (typ != VREAL && typ != VNUM)\n+    if (typ != VNUM)\n         throw std::runtime_error(\"JSON value is not a number as expected\");\n     double retval;\n     if (!ParseDouble(getValStr(), &retval))"
      },
      {
        "sha": "4742b56f3d566d50d7588b035f38fb886f762f2d",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -16,7 +16,7 @@\n \n class UniValue {\n public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VREAL, VBOOL, };\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n \n     UniValue() { typ = VNULL; }\n     UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n@@ -78,7 +78,6 @@ class UniValue {\n     bool isBool() const { return (typ == VBOOL); }\n     bool isStr() const { return (typ == VSTR); }\n     bool isNum() const { return (typ == VNUM); }\n-    bool isReal() const { return (typ == VREAL); }\n     bool isArray() const { return (typ == VARR); }\n     bool isObject() const { return (typ == VOBJ); }\n "
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -61,13 +61,6 @@ string UniValue::write(unsigned int prettyIndent,\n     case VSTR:\n         s += \"\\\"\" + json_escape(val) + \"\\\"\";\n         break;\n-    case VREAL:\n-        {\n-            std::stringstream ss;\n-            ss << std::showpoint << std::fixed << std::setprecision(8) << get_real();\n-            s += ss.str();\n-        }\n-        break;\n     case VNUM:\n         s += val;\n         break;"
      },
      {
        "sha": "a7ec740de8c86922540b2a2d170a788ad79bdf8e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 55,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -114,7 +114,7 @@ CTranslationInterface translationInterface;\n \n /** Init OpenSSL library multithreading support */\n static CCriticalSection** ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line)\n+void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (mode & CRYPTO_LOCK) {\n         ENTER_CRITICAL_SECTION(*ppmutexOpenSSL[i]);\n@@ -175,23 +175,51 @@ instance_of_cinit;\n  */\n \n static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n+\n /**\n- * We use boost::call_once() to make sure these are initialized\n- * in a thread-safe manner the first time called:\n+ * We use boost::call_once() to make sure mutexDebugLog and\n+ * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n+ *\n+ * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n+ * are leaked on exit. This is ugly, but will be cleaned up by\n+ * the OS/libc. When the shutdown sequence is fully audited and\n+ * tested, explicit destruction of these objects can be implemented.\n  */\n static FILE* fileout = NULL;\n static boost::mutex* mutexDebugLog = NULL;\n+static list<string> *vMsgsBeforeOpenLog;\n+\n+static int FileWriteStr(const std::string &str, FILE *fp)\n+{\n+    return fwrite(str.data(), 1, str.size(), fp);\n+}\n \n static void DebugPrintInit()\n {\n-    assert(fileout == NULL);\n     assert(mutexDebugLog == NULL);\n+    mutexDebugLog = new boost::mutex();\n+    vMsgsBeforeOpenLog = new list<string>;\n+}\n+\n+void OpenDebugLog()\n+{\n+    boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n+    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n+    assert(fileout == NULL);\n+    assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) setbuf(fileout, NULL); // unbuffered\n \n-    mutexDebugLog = new boost::mutex();\n+    // dump buffered messages from before we opened the log\n+    while (!vMsgsBeforeOpenLog->empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+        vMsgsBeforeOpenLog->pop_front();\n+    }\n+\n+    delete vMsgsBeforeOpenLog;\n+    vMsgsBeforeOpenLog = NULL;\n }\n \n bool LogAcceptCategory(const char* category)\n@@ -223,59 +251,85 @@ bool LogAcceptCategory(const char* category)\n     return true;\n }\n \n+/**\n+ * fStartedNewLine is a state variable held by the calling context that will\n+ * suppress printing of the timestamp when multiple calls are made that don't\n+ * end in a newline. Initialize it to true, and hold it, in the calling context.\n+ */\n+static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine)\n+{\n+    string strStamped;\n+\n+    if (!fLogTimestamps)\n+        return str;\n+\n+    if (*fStartedNewLine)\n+        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n+    else\n+        strStamped = str;\n+\n+    if (!str.empty() && str[str.size()-1] == '\\n')\n+        *fStartedNewLine = true;\n+    else\n+        *fStartedNewLine = false;\n+\n+    return strStamped;\n+}\n+\n int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n+    static bool fStartedNewLine = true;\n     if (fPrintToConsole)\n     {\n         // print to console\n         ret = fwrite(str.data(), 1, str.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog && AreBaseParamsConfigured())\n+    else if (fPrintToDebugLog)\n     {\n-        static bool fStartedNewLine = true;\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-\n-        if (fileout == NULL)\n-            return ret;\n-\n         boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        // reopen the log file, if requested\n-        if (fReopenDebugLog) {\n-            fReopenDebugLog = false;\n-            boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-            if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n-                setbuf(fileout, NULL); // unbuffered\n-        }\n+        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n \n-        // Debug print useful for profiling\n-        if (fLogTimestamps && fStartedNewLine)\n-            ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n-        if (!str.empty() && str[str.size()-1] == '\\n')\n-            fStartedNewLine = true;\n+        // buffer if we haven't opened the log yet\n+        if (fileout == NULL) {\n+            assert(vMsgsBeforeOpenLog);\n+            ret = strTimestamped.length();\n+            vMsgsBeforeOpenLog->push_back(strTimestamped);\n+        }\n         else\n-            fStartedNewLine = false;\n-\n-        ret = fwrite(str.data(), 1, str.size(), fileout);\n+        {\n+            // reopen the log file, if requested\n+            if (fReopenDebugLog) {\n+                fReopenDebugLog = false;\n+                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                    setbuf(fileout, NULL); // unbuffered\n+            }\n+\n+            ret = FileWriteStr(strTimestamped, fileout);\n+        }\n     }\n-\n     return ret;\n }\n \n-static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)\n+/** Interpret string as boolean, for argument parsing */\n+static bool InterpretBool(const std::string& strValue)\n+{\n+    if (strValue.empty())\n+        return true;\n+    return (atoi(strValue) != 0);\n+}\n+\n+/** Turn -noX into -X=0 */\n+static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n {\n-    // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n-    if (name.find(\"-no\") == 0)\n+    if (strKey.length()>3 && strKey[0]=='-' && strKey[1]=='n' && strKey[2]=='o')\n     {\n-        std::string positive(\"-\");\n-        positive.append(name.begin()+3, name.end());\n-        if (mapSettingsRet.count(positive) == 0)\n-        {\n-            bool value = !GetBoolArg(name, false);\n-            mapSettingsRet[positive] = (value ? \"1\" : \"0\");\n-        }\n+        strKey = \"-\" + strKey.substr(3);\n+        strValue = InterpretBool(strValue) ? \"0\" : \"1\";\n     }\n }\n \n@@ -307,17 +361,11 @@ void ParseParameters(int argc, const char* const argv[])\n         // If both --foo and -foo are set, the last takes effect.\n         if (str.length() > 1 && str[1] == '-')\n             str = str.substr(1);\n+        InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n         mapMultiArgs[str].push_back(strValue);\n     }\n-\n-    // New 0.6 features:\n-    BOOST_FOREACH(const PAIRTYPE(string,string)& entry, mapArgs)\n-    {\n-        // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n-        InterpretNegativeSetting(entry.first, mapArgs);\n-    }\n }\n \n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n@@ -337,11 +385,7 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault)\n bool GetBoolArg(const std::string& strArg, bool fDefault)\n {\n     if (mapArgs.count(strArg))\n-    {\n-        if (mapArgs[strArg].empty())\n-            return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n-    }\n+        return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n@@ -492,13 +536,11 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n     {\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         string strKey = string(\"-\") + it->string_key;\n+        string strValue = it->value[0];\n+        InterpretNegativeSetting(strKey, strValue);\n         if (mapSettingsRet.count(strKey) == 0)\n-        {\n-            mapSettingsRet[strKey] = it->value[0];\n-            // interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)\n-            InterpretNegativeSetting(strKey, mapSettingsRet);\n-        }\n-        mapMultiSettingsRet[strKey].push_back(it->value[0]);\n+            mapSettingsRet[strKey] = strValue;\n+        mapMultiSettingsRet[strKey].push_back(strValue);\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();"
      },
      {
        "sha": "afc9a378bbaf82db7da0c1fcf40f5447c5fcda1b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -125,6 +125,7 @@ void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n+void OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n "
      },
      {
        "sha": "1f7a2cae2ced7a2e70314c6367b53ffeae8ac81f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -464,11 +464,12 @@ bool ParseDouble(const std::string& str, double *out)\n         return false;\n     if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n         return false;\n-    char *endp = NULL;\n-    errno = 0; // strtod will not set errno if valid\n-    double n = strtod(str.c_str(), &endp);\n-    if(out) *out = n;\n-    return endp && *endp == 0 && !errno;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n }\n \n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)"
      },
      {
        "sha": "c86ad9758e42c9cf3025d3571d055c2e2767c9e6",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -186,7 +186,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         }\n         if (keyPass && keyFail)\n         {\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\");\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n             assert(false);\n         }\n         if (keyFail || !keyPass)\n@@ -255,14 +255,16 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n     {\n         LOCK(cs_KeyStore);\n         if (!IsCrypted())\n-            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n+            return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n \n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             vchPubKeyOut = (*mi).second.first;\n             return true;\n         }\n+        // Check for watch-only pubkeys\n+        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n     }\n     return false;\n }"
      },
      {
        "sha": "8d557979c01a7f542315fd74dd9d0d3952d59faf",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 107,
        "deletions": 31,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"chain.h\"\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -21,6 +22,8 @@\n \n #include \"univalue/univalue.h\"\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n \n void EnsureWalletIsUnlocked();\n@@ -146,46 +149,124 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel);\n+void ImportScript(const CScript& script, const string& strLabel, bool isRedeemScript)\n+{\n+    if (!isRedeemScript && ::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+\n+    pwalletMain->MarkDirty();\n+\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+\n+    if (isRedeemScript) {\n+        if (!pwalletMain->HaveCScript(script) && !pwalletMain->AddCScript(script))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+        ImportAddress(CBitcoinAddress(CScriptID(script)), strLabel);\n+    }\n+}\n+\n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n+{\n+    CScript script = GetScriptForDestination(address.Get());\n+    ImportScript(script, strLabel, false);\n+    // add to address book or update label\n+    if (address.IsValid())\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+}\n+\n UniValue importaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan )\\n\"\n-            \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n+            \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"          (string, required) The address\\n\"\n+            \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"If you have the full public key, you should call importpublickey instead of this.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nImport an address with rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n+            \"\\nImport a script with rescan\\n\"\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\" \\\"testing\\\" false\") +\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\" \\\"testing\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n+            + HelpExampleRpc(\"importaddress\", \"\\\"myscript\\\", \\\"testing\\\", false\")\n         );\n \n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing addresses is disabled in pruned mode\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    // Whether to perform rescan after import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\n+    // Whether to import a p2sh version, too\n+    bool fP2SH = false;\n+    if (params.size() > 3)\n+        fP2SH = params[3].get_bool();\n \n-    CScript script;\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n-        script = GetScriptForDestination(address.Get());\n+        if (fP2SH)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n+        ImportAddress(address, strLabel);\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n-        script = CScript(data.begin(), data.end());\n+        ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }\n \n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+UniValue importpubkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n+            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n+            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nImport a public key with rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n+            \"\\nImport using a label without rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n+        );\n+\n+    if (fPruneMode)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Importing public keys is disabled in pruned mode\");\n+\n     string strLabel = \"\";\n     if (params.size() > 1)\n         strLabel = params[1].get_str();\n@@ -195,33 +276,28 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n-    {\n-        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-\n-        // add to address book or update label\n-        if (address.IsValid())\n-            pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n-\n-        // Don't throw error in case an address is already there\n-        if (pwalletMain->HaveWatchOnly(script))\n-            return NullUniValue;\n+    if (!IsHex(params[0].get_str()))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    CPubKey pubKey(data.begin(), data.end());\n+    if (!pubKey.IsFullyValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n \n-        pwalletMain->MarkDirty();\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-        if (!pwalletMain->AddWatchOnly(script))\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+    ImportAddress(CBitcoinAddress(pubKey.GetID()), strLabel);\n+    ImportScript(GetScriptForRawPubKey(pubKey), strLabel, false);\n \n-        if (fRescan)\n-        {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-            pwalletMain->ReacceptWalletTransactions();\n-        }\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n     }\n \n     return NullUniValue;\n }\n \n+\n UniValue importwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))"
      },
      {
        "sha": "bd16da76145d64bfca029b4efe5f04bcb23007e5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 31,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"amount.h\"\n #include \"base58.h\"\n+#include \"chain.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -389,7 +390,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n-            \"2. \\\"amount\\\"      (numeric, required) The amount in btc to send. eg 0.1\\n\"\n+            \"2. \\\"amount\\\"      (numeric, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n             \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n@@ -451,7 +452,7 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             \"  [\\n\"\n             \"    [\\n\"\n             \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n-            \"      amount,                 (numeric) The amount in btc\\n\"\n+            \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n@@ -476,7 +477,6 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                LOCK(pwalletMain->cs_wallet);\n                 if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n                     addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n             }\n@@ -556,7 +556,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount   (numeric) The total amount in btc received at this address.\\n\"\n+            \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n@@ -614,7 +614,7 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nAmount received by the default account with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"\\\"\") +\n@@ -707,7 +707,7 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe total amount in the wallet\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n@@ -793,14 +793,15 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n-            \"3. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n-            \"4. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n+            \"3. amount            (numeric) Quantity of \" + CURRENCY_UNIT + \" to move between accounts.\\n\"\n+            \"4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n+            \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false           (boolean) true if successfull.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nMove 0.01 btc from the default account to the account named tabby\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n             + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +\n-            \"\\nMove 0.01 btc timotei to akiko with a comment and funds have 6 confirmations\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" timotei to akiko with a comment and funds have 6 confirmations\\n\"\n             + HelpExampleCli(\"move\", \"\\\"timotei\\\" \\\"akiko\\\" 0.01 6 \\\"happy birthday!\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n@@ -867,7 +868,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n-            \"3. amount                (numeric, required) The amount in btc. (transaction fee is added on top).\\n\"\n+            \"3. amount                (numeric, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n@@ -877,7 +878,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"        (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nSend 0.01 btc from the default account to the address, must have at least 1 confirmation\\n\"\n+            \"\\nSend 0.01 \" + CURRENCY_UNIT + \" from the default account to the address, must have at least 1 confirmation\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n             \"\\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"tabby\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01 6 \\\"donation\\\" \\\"seans outpost\\\"\") +\n@@ -932,7 +933,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n+            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in \" + CURRENCY_UNIT + \" is the value\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n@@ -1233,7 +1234,7 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n             \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n-            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n+            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n@@ -1405,11 +1406,11 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                                transaction between accounts, and not associated with an address,\\n\"\n             \"                                                transaction id or block. 'send' and 'receive' transactions are \\n\"\n             \"                                                associated with an address, transaction id and block details\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the \\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n             \"                                         'receive' category of transactions.\\n\"\n@@ -1600,10 +1601,10 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n@@ -1686,7 +1687,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"2. \\\"includeWatchonly\\\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in btc\\n\"\n+            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"confirmations\\\" : n,     (numeric) The number of confirmations\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",  (string) The block hash\\n\"\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n@@ -1699,7 +1700,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n-            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n+            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n             \"    }\\n\"\n             \"    ,...\\n\"\n@@ -2165,7 +2166,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric, required) The transaction fee in BTC/kB rounded to the nearest 0.00000001\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2194,14 +2195,14 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2278,7 +2279,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n@@ -2367,15 +2368,20 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" includeWatching\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n                             \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                             \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n+                            \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n+                            \"Note that all inputs selected must be of standard form and P2SH scripts must be\"\n+                            \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n+                            \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"1. \\\"hexstring\\\"     (string, required) The hex string of the raw transaction\\n\"\n+                            \"2. includeWatching (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2394,18 +2400,22 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction origTx;\n     if (!DecodeHexTx(origTx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n+    bool includeWatching = false;\n+    if (params.size() > 1)\n+        includeWatching = true;\n+\n     CMutableTransaction tx(origTx);\n     CAmount nFee;\n     string strFailReason;\n     int nChangePos = -1;\n-    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason))\n+    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason, includeWatching))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "c3b1172201e45dc3273ec43b4d792c9ee52507da",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,15 +7,21 @@\n \n #include \"base58.h\"\n #include \"checkpoints.h\"\n+#include \"chain.h\"\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n@@ -106,6 +112,9 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     // check if we need to remove from watch-only\n     CScript script;\n     script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(pubkey);\n     if (HaveWatchOnly(script))\n         RemoveWatchOnly(script);\n \n@@ -1521,7 +1530,9 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth,\n+                                                 ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n+                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO)));\n             }\n         }\n     }\n@@ -1737,7 +1748,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1750,6 +1761,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n \n     CCoinControl coinControl;\n     coinControl.fAllowOtherInputs = true;\n+    coinControl.fAllowWatchOnly = includeWatching;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n \n@@ -2103,7 +2115,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             if (!wtxNew.AcceptToMemoryPool(false))\n             {\n                 // This must not fail. The transaction has already been signed and recorded.\n-                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n                 return false;\n             }\n             wtxNew.RelayWalletTransaction();"
      },
      {
        "sha": "bd30b67b09f182acf4fb85500fb61447c95141db",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,10 +7,7 @@\n #define BITCOIN_WALLET_WALLET_H\n \n #include \"amount.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n+#include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"utilstrencodings.h\"\n@@ -630,7 +627,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      },
      {
        "sha": "d27b1531e3e620090e658433beba90cbb7b0656c",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,6 +9,7 @@\n #include \"keystore.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -40,7 +41,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_ONLY;\n+            return ISMINE_WATCH_UNSOLVABLE;\n         return ISMINE_NO;\n     }\n \n@@ -85,7 +86,10 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey))\n-        return ISMINE_WATCH_ONLY;\n+    if (keystore.HaveWatchOnly(scriptPubKey)) {\n+        // TODO: This could be optimized some by doing some work after the above solver\n+        CScript scriptSig;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+    }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "9f45f76c6b8c394c4ca36e7c1a180e02cec5ac45",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -6,18 +6,23 @@\n #ifndef BITCOIN_WALLET_WALLET_ISMINE_H\n #define BITCOIN_WALLET_WALLET_ISMINE_H\n \n-#include \"key.h\"\n #include \"script/standard.h\"\n \n+#include <stdint.h>\n+\n class CKeyStore;\n class CScript;\n \n /** IsMine() return codes */\n enum isminetype\n {\n     ISMINE_NO = 0,\n-    ISMINE_WATCH_ONLY = 1,\n-    ISMINE_SPENDABLE = 2,\n+    //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_UNSOLVABLE = 1,\n+    //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_SOLVABLE = 2,\n+    ISMINE_WATCH_ONLY = ISMINE_WATCH_SOLVABLE | ISMINE_WATCH_UNSOLVABLE,\n+    ISMINE_SPENDABLE = 4,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };\n /** used for bitflags of isminetype */"
      },
      {
        "sha": "c1eb1845814996179a0e4b49bda4c97385d86def",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      },
      {
        "sha": "270f826aed4467e959aee8b90439ec32b85a91ae",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=abdaf822dcf93a49cd468fbcd41bc3a55ee6e29b",
        "patch": "@@ -9,7 +9,6 @@\n #include \"amount.h\"\n #include \"wallet/db.h\"\n #include \"key.h\"\n-#include \"keystore.h\"\n \n #include <list>\n #include <stdint.h>"
      }
    ]
  }
]