[
  {
    "sha": "0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDI0YjljN2VkY2M0YmE1NTdjMzllODk5NjQxOGMyY2QyY2RiNjU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T12:23:48Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T07:38:52Z"
      },
      "message": "[MOVEONLY] move CAffectedKeysVisitor",
      "tree": {
        "sha": "a140e43ac961ad033a79da6440da25319c63c7a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a140e43ac961ad033a79da6440da25319c63c7a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVZowACgkQHrd2uwPH\nki2GnBAAuAz7Uwq4/bw4NM16D3d7QEp0xUvIRhaE/5PrxtrNlxhrGX5cIi/wBe8U\nmSRJ5ZkDko3HwCr2TxzSKl87Bwtfmc430T02/7Op+W8Uj25gtgES8vHpBlRLr/D9\nJ6XsdxW5zkvgpxCUW4Erkj4E8JsU7WucHma4xhKu9lxT4wBIJx86/0yVruL1oNte\nIRHGp5yKMGg4Pkeb12xoY4fYyrIipgTJaw5qVumi6IQLH18XFqfIQJLjloaouxfF\nK/ORpVWR7o23c0JH/4ZgPa9J5k9gBhlL/cHhy2EsHeMwEkChc1pNP1EoddL/jMVo\nmL2q0WDDWstqoLRwnBvOhKubHvll8Rv5qqwaltr6bJ/REPRs0kGBTH2T50urUNT1\nbg5gJP4oU2zJGnlC5K2ZSPTtCvKR4vUYK9BAMPqME/hmeXKpXQTOpTxaKjDNIOJj\nIZ1m4bQPkx7sM18oSinfgN2SQ380zI9a0BLfViiYHH49AgeSzJb9nR+zfcfwTsrO\nF+v/cMUtAWr6Zswv0TZ6mm9sKFn4KIk/fpdoLTOjRrYWV0/GNlzlsroJEqFkXomH\n1D/3p8xNKuLN8ZwmNhMOCLq8KRKva3trf8E68VaCrSHDk0xy5zEtsP917JvbyawU\nEpYM7msvXz5EwzbIASqMJzUyg27nxHuGvrinVafDE7BLO+QR+kc=\n=e/jD\n-----END PGP SIGNATURE-----",
        "payload": "tree a140e43ac961ad033a79da6440da25319c63c7a9\nparent 94e52273f30fc9f3f1a7b58778ed21781bb2a744\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1492691028 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494574732 +0200\n\n[MOVEONLY] move CAffectedKeysVisitor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0024b9c7edcc4ba557c39e8996418c2cd2cdb658/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e52273f30fc9f3f1a7b58778ed21781bb2a744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e52273f30fc9f3f1a7b58778ed21781bb2a744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e52273f30fc9f3f1a7b58778ed21781bb2a744"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "a15f516425614fec40347e9104d8e9ea8fa84b89",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0024b9c7edcc4ba557c39e8996418c2cd2cdb658/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0024b9c7edcc4ba557c39e8996418c2cd2cdb658/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
        "patch": "@@ -78,6 +78,38 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n+class CAffectedKeysVisitor : public boost::static_visitor<void> {\n+private:\n+    const CKeyStore &keystore;\n+    std::vector<CKeyID> &vKeys;\n+\n+public:\n+    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n+\n+    void Process(const CScript &script) {\n+        txnouttype type;\n+        std::vector<CTxDestination> vDest;\n+        int nRequired;\n+        if (ExtractDestinations(script, type, vDest, nRequired)) {\n+            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+                boost::apply_visitor(*this, dest);\n+        }\n+    }\n+\n+    void operator()(const CKeyID &keyId) {\n+        if (keystore.HaveKey(keyId))\n+            vKeys.push_back(keyId);\n+    }\n+\n+    void operator()(const CScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId, script))\n+            Process(script);\n+    }\n+\n+    void operator()(const CNoDestination &none) {}\n+};\n+\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n@@ -3386,38 +3418,6 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n \n /** @} */ // end of Actions\n \n-class CAffectedKeysVisitor : public boost::static_visitor<void> {\n-private:\n-    const CKeyStore &keystore;\n-    std::vector<CKeyID> &vKeys;\n-\n-public:\n-    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n-\n-    void Process(const CScript &script) {\n-        txnouttype type;\n-        std::vector<CTxDestination> vDest;\n-        int nRequired;\n-        if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            BOOST_FOREACH(const CTxDestination &dest, vDest)\n-                boost::apply_visitor(*this, dest);\n-        }\n-    }\n-\n-    void operator()(const CKeyID &keyId) {\n-        if (keystore.HaveKey(keyId))\n-            vKeys.push_back(keyId);\n-    }\n-\n-    void operator()(const CScriptID &scriptId) {\n-        CScript script;\n-        if (keystore.GetCScript(scriptId, script))\n-            Process(script);\n-    }\n-\n-    void operator()(const CNoDestination &none) {}\n-};\n-\n void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();"
      }
    ]
  },
  {
    "sha": "2a203b73fd2d7b016cd5f55977135a15a982414d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTIwM2I3M2ZkMmQ3YjAxNmNkNWY1NTk3NzEzNWExNWE5ODI0MTRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T13:32:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:38Z"
      },
      "message": "Add basic HD wallet restore functionality",
      "tree": {
        "sha": "35ad1c42849485c787494b9fe2a4d43e75cc96d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35ad1c42849485c787494b9fe2a4d43e75cc96d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a203b73fd2d7b016cd5f55977135a15a982414d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYMACgkQHrd2uwPH\nki06gw//VCWEeEhkm5iEyH8UGAgjHzL9lX0aSQgrlWvmbr+muvMJzidY+ddfu89W\nKbfKhA6ABZgw5k19gYf4u7jaQtq/XiRwAUXhzh901uihp1AXsBUPFkfLeYFk8+A1\nqI7zkM+/ZdUvbi7c6esFrC9Ndd9bSZXQ4bxthn7DbGh4qw5QajHJUVF22UkldqTo\nQ5B5FKpo5O+dW+4ENFNPjV66xczYlhmlTZ1f+K1/oFDiNSOMJRbCuta+8cZ3FgOR\nDpWt/GsEyAiXzMvMFqZBn4tKsBEHyH1jd7zAboLPXnOZyrgRvjK37m1pM0vsQcAz\nOQggoEteCbDtV/vjLkoc9EqoUn8bvotAKpD6R76jxUwUE7KrHc0jGhXxX1X+Tk4J\n+fIY7rz0gPO6KWq/wPsqyN1E3sykUQj9tlg6Dic8i1w6XNfDyuZ1BNnHIu3RXSNw\nKNRZa8uXEP5nDip6q03ZITVbICdTVluWDhk+1WaQNqrwQ/jOAEPkMzBjl/xIv7k5\nj5juNMbZ9BS0UZ6wPnE5ZjVCHEJAilvS9IygsBfFLCZAug4M4f+8Azjqg9Z/3edg\nUJElT7+YZA6hiXBWwKXvLfhv6XiIvINEL0TdcIa2D1Z/LQh88E5VMGBkUP1gxr45\nz90NUXaDSHqBGj7xlb+lLkM501F+Xb1W/x26aX5aeGXoch5TsPw=\n=9dFc\n-----END PGP SIGNATURE-----",
        "payload": "tree 35ad1c42849485c787494b9fe2a4d43e75cc96d6\nparent 0024b9c7edcc4ba557c39e8996418c2cd2cdb658\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1492695122 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577538 +0200\n\nAdd basic HD wallet restore functionality\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a203b73fd2d7b016cd5f55977135a15a982414d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a203b73fd2d7b016cd5f55977135a15a982414d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a203b73fd2d7b016cd5f55977135a15a982414d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0024b9c7edcc4ba557c39e8996418c2cd2cdb658",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0024b9c7edcc4ba557c39e8996418c2cd2cdb658"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 167,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b486bc4be37de15a4c5b141e0c34e7905a556a97",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 1,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a203b73fd2d7b016cd5f55977135a15a982414d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a203b73fd2d7b016cd5f55977135a15a982414d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2a203b73fd2d7b016cd5f55977135a15a982414d",
        "patch": "@@ -1002,6 +1002,26 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::set<CKeyID> keyPool;\n+            GetAllReserveKeys(keyPool);\n+            // loop though all outputs\n+            for(const CTxOut& txout: tx.vout) {\n+                // extract addresses and check if they match with an unused keypool key\n+                std::vector<CKeyID> vAffected;\n+                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n+                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                    if (keyPool.count(keyid)) {\n+                        LogPrintf(\"%s: Detected a used Keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+                        MarkReserveKeysAsUsed(keyid);\n+                    }\n+                }\n+            }\n+\n             CWalletTx wtx(this, ptx);\n \n             // Get merkle branch if transaction was found in a block\n@@ -3349,14 +3369,62 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    LOCK(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    auto it = std::begin(setKeyPool);\n+\n+    bool foundInternal = false;\n+    int64_t foundIndex = -1;\n+    for (const int64_t& id : setKeyPool) {\n+        CKeyPool keypool;\n+        if (!walletdb.ReadPool(id, keypool))\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+\n+        if (keypool.vchPubKey.GetID() == keyId) {\n+            foundInternal = keypool.fInternal;\n+            foundIndex = id;\n+            if (!keypool.fInternal) {\n+                SetAddressBook(keyId, \"\", \"receive\");\n+            }\n+            break;\n+        }\n+    }\n+\n+    // mark all keys up to the found key as used\n+    if (foundIndex >= 0) {\n+        while (it != std::end(setKeyPool)) {\n+            const int64_t& id = *(it);\n+            if (id <= foundIndex) {\n+                CKeyPool keypool;\n+                if (!walletdb.ReadPool(id, keypool))\n+                    throw std::runtime_error(std::string(__func__) + \": read failed\");\n+\n+                // only mark keys on the corresponding chain\n+                if (keypool.fInternal == foundInternal) {\n+                    KeepKey(id);\n+                    it = setKeyPool.erase(it);\n+                    continue;\n+                }\n+            }\n+            ++it;\n+        }\n+    }\n+\n+    if (IsHDEnabled() && !TopUpKeyPool()) {\n+        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+    }\n+}\n+\n void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n \n     CWalletDB walletdb(*dbw);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    for(const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n@@ -3725,6 +3793,19 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // HD Restore: Make sure we always have a reasonable keypool size if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        if (walletInstance->IsCrypted()) {\n+            InitWarning(_(\"Your are using an encrypted HD wallet. In case you recover a HD wallet, you may miss incomming or outgoing funds.\"));\n+        }\n+        else {\n+            if (GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE) < HD_RESTORE_KEYPOOL_SIZE_MIN ) {\n+                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. In case you recover a HD wallet, you may miss incomming or outgoing funds.\"));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+\n+    }\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!GetBoolArg(\"-rescan\", false))\n     {"
      },
      {
        "sha": "657805774711bc9cb6d73124152d453f72dedde0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a203b73fd2d7b016cd5f55977135a15a982414d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a203b73fd2d7b016cd5f55977135a15a982414d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2a203b73fd2d7b016cd5f55977135a15a982414d",
        "patch": "@@ -40,6 +40,7 @@ extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n+static const unsigned int HD_RESTORE_KEYPOOL_SIZE_MIN = 20;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default\n@@ -961,6 +962,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+    void MarkReserveKeysAsUsed(const CKeyID& keyId);\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();"
      },
      {
        "sha": "d6a2d5b81353f34de6611bce6d7d5b051882dd70",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a203b73fd2d7b016cd5f55977135a15a982414d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a203b73fd2d7b016cd5f55977135a15a982414d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2a203b73fd2d7b016cd5f55977135a15a982414d",
        "patch": "@@ -53,6 +53,7 @@\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n+    'wallet-hd-restore.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n     'p2p-fullblocktest.py',"
      },
      {
        "sha": "58d64f62f21237839c0c4c7a7308e53a4bbf3dcc",
        "filename": "test/functional/wallet-hd-restore.py",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a203b73fd2d7b016cd5f55977135a15a982414d/test/functional/wallet-hd-restore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a203b73fd2d7b016cd5f55977135a15a982414d/test/functional/wallet-hd-restore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd-restore.py?ref=2a203b73fd2d7b016cd5f55977135a15a982414d",
        "patch": "@@ -0,0 +1,82 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Hierarchical Deterministic wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    start_nodes,\n+    start_node,\n+    assert_equal,\n+    connect_nodes_bi,\n+    assert_start_raises_init_error,\n+    sync_blocks\n+)\n+import os\n+import shutil\n+\n+\n+class WalletHDRestoreTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=100']]\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.is_network_split = False\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+    def run_test (self):\n+        tmpdir = self.options.tmpdir\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        connect_nodes_bi(self.nodes,0,1)\n+        for _ in range(10):\n+            addr = self.nodes[1].getnewaddress()\n+            \n+        self.nodes[0].generate(101)\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/11'\")\n+        \n+        rawch = self.nodes[1].getrawchangeaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        n0addr = self.nodes[0].getnewaddress()\n+        txdata = self.nodes[0].createrawtransaction([], {rawch : 2.0, n0addr: 3.0})\n+\n+        txdata_f = self.nodes[0].fundrawtransaction(txdata)\n+        txdata_s = self.nodes[0].signrawtransaction(txdata_f['hex'])\n+        txid = self.nodes[0].sendrawtransaction(txdata_s['hex'])\n+\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 3)\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+        \n+        self.stop_node(1)\n+        shutil.rmtree(tmpdir + \"/node1/regtest\")\n+        os.mkdir(tmpdir + \"/node1/regtest\")\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[0].generate(1)\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.sync_all()\n+        assert_equal(self.nodes[1].getbalance(), 3) #make sure we have reconstructed the transaction\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+        \n+        #now check if we have marked all keys up to the used keypool key as used\n+        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/12'\")\n+        \n+        #make sure the key on the internal chain is also marked as used\n+        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getrawchangeaddress())['hdkeypath'], \"m/0'/1'/1'\")\n+        \n+\n+\n+if __name__ == '__main__':\n+    WalletHDRestoreTest().main ()"
      }
    ]
  },
  {
    "sha": "68d600b8da67f55e37eb8b4be462154564fe98af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGQ2MDBiOGRhNjdmNTVlMzdlYjhiNGJlNDYyMTU0NTY0ZmU5OGFm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-10T17:24:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:44Z"
      },
      "message": "Add option to pause block requests (is/setBlockRequestsPaused())",
      "tree": {
        "sha": "3a83e136620fb539f303c7bf68f612f14b66120f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a83e136620fb539f303c7bf68f612f14b66120f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68d600b8da67f55e37eb8b4be462154564fe98af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYgACgkQHrd2uwPH\nki2Qlw//ekt88iu7VQuLjoDoFg2O0BVTOWIa2lyYykO7w1TyGKbbN+LXI7L1EzpJ\nVYWLqecomSrJGezctdS3RTqUgWOop2Q3LnCyPorXbfM3oMd/GlEH1peV3u+Y7XwN\nffrnMYeOiPFPAlkz8EWztm9ba3FKTq+Ad4PHQ3ztNPPJDtE7bfJ1vCgn86x2e9Z+\nG+89hxL5onjnWdXrTg2jSpwak1zIOFPtRWxRzhpQA+hklnkmCcsz+yRw18P59kp8\nDNfskQjG5d5i0bKP5U4arOMFX419WnfrLdxUJYiI7ljbklIMu90jMh8ROMeWKY0+\nfhj/yXkxANI2r9YNtjizV5h41OAOjiyJEdnKc4m60im5CfoNgrzuQpPX9NCfdlSn\nIrxAp78+rSuaEFcGLvLJhPEMXLKHCEnNLIn/Yp2lpLE6L7rX5ta+53LU0E/eoNa6\nrZFIhkg+RsuWUYx8HMgcaI6aQyeUXTuToxgaWX5+4L4IXl9O7X+Wyo1z2ITWwOil\n2xO2VB/UtcsiqYIs1CdCJMMUQXaKE+HvF6gHUfsDaOqbWynQopoQ+rmlypt3c4YL\ncPy/uXntGGVaye1oFzPPLuofLgKRHO2jJzhafQVwGfoqXB4J9aViAS51AFcC94/i\nlrWyhGgDQ01jXMOCU/wiHlGOQB7SwPlnaEYvp1Xc2lgBhWjiX0g=\n=F7j3\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a83e136620fb539f303c7bf68f612f14b66120f\nparent 2a203b73fd2d7b016cd5f55977135a15a982414d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1484069096 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577544 +0200\n\nAdd option to pause block requests (is/setBlockRequestsPaused())\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d600b8da67f55e37eb8b4be462154564fe98af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68d600b8da67f55e37eb8b4be462154564fe98af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d600b8da67f55e37eb8b4be462154564fe98af/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a203b73fd2d7b016cd5f55977135a15a982414d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a203b73fd2d7b016cd5f55977135a15a982414d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a203b73fd2d7b016cd5f55977135a15a982414d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e06c04e1bb2fc3e61274064fca33d19894929da0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68d600b8da67f55e37eb8b4be462154564fe98af/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68d600b8da67f55e37eb8b4be462154564fe98af/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=68d600b8da67f55e37eb8b4be462154564fe98af",
        "patch": "@@ -480,6 +480,9 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    if (isBlockRequestsPaused())\n+        return;\n+\n     if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork) {\n         // This peer has nothing interesting.\n         return;"
      },
      {
        "sha": "31c8d529e94d5a0a5536c53a5a63a7cee640912e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68d600b8da67f55e37eb8b4be462154564fe98af/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68d600b8da67f55e37eb8b4be462154564fe98af/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=68d600b8da67f55e37eb8b4be462154564fe98af",
        "patch": "@@ -91,6 +91,10 @@ CScript COINBASE_FLAGS;\n \n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n+/** if enable, blocks will not be requested automatically */\n+static const bool DEFAULT_BLOCK_REQUESTS_PAUSED = false;\n+std::atomic<bool> fPauseBlockRequests(DEFAULT_BLOCK_REQUESTS_PAUSED);\n+\n // Internal stuff\n namespace {\n \n@@ -4296,6 +4300,14 @@ void DumpMempool(void)\n     }\n }\n \n+bool isBlockRequestsPaused() {\n+    return fPauseBlockRequests;\n+}\n+\n+void setBlockRequestsPaused(bool state) {\n+    fPauseBlockRequests = state;\n+}\n+\n //! Guess how far we are in the verification process at the given block index\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n     if (pindex == NULL)"
      },
      {
        "sha": "6b13cf8eebfbda7b1670ec5d76619f4f934ac92e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68d600b8da67f55e37eb8b4be462154564fe98af/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68d600b8da67f55e37eb8b4be462154564fe98af/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=68d600b8da67f55e37eb8b4be462154564fe98af",
        "patch": "@@ -286,6 +286,13 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n \n+/**\n+ * Pausing block requests will allow to temporary pause the verification process.\n+ * Pausing won't prevent ActivateBestChain from connecting blocks (that are in flight or already on disk)\n+ */\n+bool isBlockRequestsPaused();\n+void setBlockRequestsPaused(bool state);\n+\n /**\n  * Prune block and undo files (blk???.dat and undo???.dat) so that the disk space used is less than a user-defined target.\n  * The user sets the target (in MB) on the command line or in config file.  This will be run on startup and whenever new"
      }
    ]
  },
  {
    "sha": "1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTAyNzJhM2FmZDRmY2I5ZmEyZjViNDE5NmY5YTRiYTZiMzZmOWU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T12:39:59Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:44Z"
      },
      "message": "Add option to pause tip updates (is/setTipUpdatesPaused())",
      "tree": {
        "sha": "93d5c96936e47f6a4799d1bf88751dba3a7e5515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93d5c96936e47f6a4799d1bf88751dba3a7e5515"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYgACgkQHrd2uwPH\nki0YzQ//Y3XkycGwaUDOn4ymrNGgGcfJSvPRpIDYW8LjJmDsTj4BOq9uqioOXvDr\njNwDTFVMXathiUhzcVqmWBLco4+p+i0hH5yop/eZn+5JQdMF9CL7Dae8oeEyd69P\n/HT4gUifrBP7Man2Su/DQRnZ0R5740q1d3K2fCj6T31zYspdVi+KyZUGEKrs2Mps\ncH4A6x8RX/qaPQKxs92uRtDSJN42Gfef3Kd+lsrGGWacKk0xP3u/n3nTBXH407hT\n0BRS2UJyZXUuFGNvtNjPZgq8Yoj+Ah+g5RVNf73nDko8fQaXtB1eGI4njIP7uPzZ\nzFw9fbtJTTHha0aeY6ERnbGYeW/Wh5tk3p16SeEfdnjagLflZjm37hkd5Yu7YhXs\nmqz0uQPHI7cqypcyYWj7uc/R3qbQhgytlSaz1t6FrVOqbzOOccq6pWsUWZn0LGIT\npBE4cyiYT84cqT08PHE8d2Kn5q0ZWiyJyqkriNfx+bLvHFk/yrycMvldp1RZe2NK\nIbmNdb6w/bT0w9QW3h/PULscF2FQg56qG6aj88ZqjBgXu+r8n4mxvZQjs/FRR8DT\nTMgGTxGxoVmoqSAYynro5PiqbsJaKSeXDh/AxgNmHMTnyHJeaFeqUtg9F+NnB3wg\nB1otxag6odjYEW53SLKhlFRwnEo4Jj2vgy19xIikraluwfJlZsE=\n=A/j4\n-----END PGP SIGNATURE-----",
        "payload": "tree 93d5c96936e47f6a4799d1bf88751dba3a7e5515\nparent 68d600b8da67f55e37eb8b4be462154564fe98af\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493815199 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577544 +0200\n\nAdd option to pause tip updates (is/setTipUpdatesPaused())\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68d600b8da67f55e37eb8b4be462154564fe98af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d600b8da67f55e37eb8b4be462154564fe98af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68d600b8da67f55e37eb8b4be462154564fe98af"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2ff9ea1defedbb330eae799eb6af72b1897e1efe",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
        "patch": "@@ -95,6 +95,10 @@ const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n static const bool DEFAULT_BLOCK_REQUESTS_PAUSED = false;\n std::atomic<bool> fPauseBlockRequests(DEFAULT_BLOCK_REQUESTS_PAUSED);\n \n+/** if enable, ActiveBestChain will ignore/refuse to do tip updates */\n+static const bool DEFAULT_TIP_UPDATE_PAUSED = false;\n+std::atomic<bool> fPauseTipUpdates(DEFAULT_TIP_UPDATE_PAUSED);\n+\n // Internal stuff\n namespace {\n \n@@ -2484,6 +2488,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n \n+    if (isTipUpdatesPaused()) {\n+        LogPrintf(\"%s: ignore ActivateBestChain, tip update are disabled\\n\", std::string(__func__));\n+\n+        // we will abort with a return value of true to not trigger error routines/shutdown\n+        return true;\n+    }\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     do {\n@@ -4308,6 +4318,14 @@ void setBlockRequestsPaused(bool state) {\n     fPauseBlockRequests = state;\n }\n \n+bool isTipUpdatesPaused() {\n+    return fPauseTipUpdates;\n+}\n+\n+void setTipUpdatesPaused(bool state) {\n+    fPauseTipUpdates = state;\n+}\n+\n //! Guess how far we are in the verification process at the given block index\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n     if (pindex == NULL)"
      },
      {
        "sha": "882a351687c146f1c81f98871ecca511d34fb84d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
        "patch": "@@ -293,6 +293,13 @@ double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n bool isBlockRequestsPaused();\n void setBlockRequestsPaused(bool state);\n \n+/**\n+ * Pausing tip updates will temporary pause connecting new blocks\n+ * Pausing won't prevent the net logic from requesing downloading more blocks (up to BLOCK_DOWNLOAD_WINDOW)\n+ */\n+bool isTipUpdatesPaused();\n+void setTipUpdatesPaused(bool state);\n+\n /**\n  * Prune block and undo files (blk???.dat and undo???.dat) so that the disk space used is less than a user-defined target.\n  * The user sets the target (in MB) on the command line or in config file.  This will be run on startup and whenever new"
      }
    ]
  },
  {
    "sha": "5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTEwY2QzMzRhNzFiZTA2NGQyZTgyYmIyZDMzY2QzMWUzNjE3YmNk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-02T16:44:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:44Z"
      },
      "message": "Add request-halt flag to BlockConnected signal",
      "tree": {
        "sha": "be98923b8fb15dd70beb3b5a9a065c6c517cd2a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be98923b8fb15dd70beb3b5a9a065c6c517cd2a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYgACgkQHrd2uwPH\nki13XA/2OJgf9cqzIuwrlrrmGzqRfIggfby54HFzju4zqDrwcw+YBriVpzxLaiRD\njD86Ig39UMcgMjWRhZDT5xth9cwu6Y1VCnDFKoXKjGL4NMbXGdyJmZckjaUTJWMF\n2JRdCmn62M81Ir+1yZIsvngidC5gGnI4sEFu6/wcaBH9AfqKd0k5npvZoEMkHjfi\n5qPEwDH3VJhg7KywGWIawc/N6n1I7mFuzdhSViHu23MJeVFNWLKriqnEc/z7mhGu\nkTLwo/2AvwkKU8JBAqc+bJDYKAbR6de9MkrppkqaAPm254rpHFCpdT94CjbZy7n5\nMkDrg539R32B4SzmMlO661E55LjxrSQqsyDkTGHV7wbIGXDAZninyuSwblI59prw\nP9YkO0VpxWMrp1AgWJzR4d5stMWyXbRFKJa5I8sErYVxx4nCPkf7J9ywzETP52xZ\nZ6HHcL5/zxjuk9jpCUZzPPbjoQyTOGgSk7iWBMEnVXHJEfHhsn6MoEro+IcwhE5z\nDOTkwQjS2O9pAS9Y+mb9T3kFHgDCsyO7VPpbIJVqhPNFaIkuY+wvCgiPP7ul+F7J\nk4E39nqcwikSFTnCH4pcEeubucL7J1QCblfyWwlyg3FvaELJS6KFXxvC+BUAcPQg\nsheorVbK45lQahSK64cDZvXCaafsKIr9yl+B0RH/1qC4FGasuw==\n=hctz\n-----END PGP SIGNATURE-----",
        "payload": "tree be98923b8fb15dd70beb3b5a9a065c6c517cd2a0\nparent 1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493743486 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577544 +0200\n\nAdd request-halt flag to BlockConnected signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0272a3afd4fcb9fa2f5b4196f9a4ba6b36f9e8"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "8dfd56f161ceeb647e6d1d0bede9dc76647e0191",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -747,7 +747,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanI\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n }\n \n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) {\n     LOCK(cs_main);\n \n     std::vector<uint256> vOrphanErase;"
      },
      {
        "sha": "be3ed7c8fcb41e75fadcfad19f844b6a71d35b78",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -30,7 +30,7 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;"
      },
      {
        "sha": "80516c392e5727a9c6211625fd17b4246ee2834d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -2529,9 +2529,10 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n \n+            bool requestPause = false;\n             for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                 assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs);\n+                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs, requestPause);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      },
      {
        "sha": "6041a4a7236cdee0176b6a2c8bfaf2cdb6156caf",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -15,7 +15,7 @@ CMainSignals& GetMainSignals()\n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3, _4));\n     g_signals.BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -32,7 +32,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3, _4));\n     g_signals.BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));"
      },
      {
        "sha": "cc92e1c14161c29afbc2c5163e8b9bba4bf235d4",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -34,7 +34,7 @@ class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted, bool &requestPause) {}\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -56,7 +56,7 @@ struct CMainSignals {\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &, bool &requestPause)> BlockConnected;\n     /** Notifies listeners of a block being disconnected */\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "ebb737e864184d3d4520641ad6dd6177edd2141f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -1171,7 +1171,6 @@ void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     SyncTransaction(ptx);\n }\n \n-void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK2(cs_main, cs_wallet);\n     // TODO: Temporarily ensure that mempool removals are notified before\n     // connected transactions.  This shouldn't matter, but the abandoned\n@@ -1186,6 +1185,7 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n     }\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n         SyncTransaction(pblock->vtx[i], pindex, i);\n+void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) {\n     }\n }\n "
      },
      {
        "sha": "206b9d31ff7b281b50cb0e9a4e26f23041be1dc8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -904,7 +904,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);"
      },
      {
        "sha": "6c10b32bc02c9fc0535d1c83930dac364aa663ca",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -165,7 +165,7 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n-void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block"
      },
      {
        "sha": "d5adbe141641a289a5f56a86087829b701bcd695",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10cd334a71be064d2e82bb2d33cd31e3617bcd/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "patch": "@@ -26,7 +26,7 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n "
      }
    ]
  },
  {
    "sha": "5b70a2289e96f0ce8c49678e613845572d8203bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjcwYTIyODllOTZmMGNlOGM0OTY3OGU2MTM4NDU1NzJkODIwM2Jj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T13:17:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:45Z"
      },
      "message": "Wallet: allow to eventually pause verification if keypool requires more key to respect the gap limit",
      "tree": {
        "sha": "b7c43767a5d35ef165c0de9c29391a66a04b1171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c43767a5d35ef165c0de9c29391a66a04b1171"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b70a2289e96f0ce8c49678e613845572d8203bc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYkACgkQHrd2uwPH\nki0KuQ/8CjIbrAVvcM6Uc5a7QxXjvNaNEq/VnVyprV3VEO5cf09zcK2WnrNvFeny\nsNM0wEF0ULnZFsaDmw3I69xIxnkISTEJk2QxSejV6Pmxe2t4c78xjucwNYVZJO41\ntX5V1uGHreFZxI0pt6s9oxsPWLf/wGJwzK1gMPFdbr650GFBMkc676xbRqWqzSkq\nzPVc2SN+NVqSb4R7qeIoXi+FrlRwAqyjFmVC42R9Lt6mKU029YiyGzeL7Kr24sFb\nAYE5ZztoTW6ctymXw9K65bDdTS/c2PZ7NObNfoKxuOuYz5JUCRwVKq1uFajLnEYe\n15Az6Dh9D0NgHvle5x4x4dHUMSB/oCJQEv9WzILexgFg/OJWkg/Jef18UrPLq+XY\nkCZiZQXPwrAG//5FfL1JEU1wC5paOTJn6H4wqvINtXaPA39Gw6BKoP+dtOOGia3X\nybiAeMDsdoapdnJaeLaQneoUiUKce9lhOo2h8V8zBeE9mfNFQdJWisGsa8uUY22g\nbQaGDAt7lo+2DrcJ1gjO/BC+s+BUOcG2z//QkZi7BsUDU4peKS3oQKfBhVyAM/VP\n/IopZdTagGuJLIZ9dmW42bo9F6b/zbNeuVmoWGwM/pn4lYTyXU2Ml84iQ1RERq+y\nyube68+hmSsijdh/juZgJeifH7uJlbzWPsOJLLT8kruYgPt33ls=\n=Q4fs\n-----END PGP SIGNATURE-----",
        "payload": "tree b7c43767a5d35ef165c0de9c29391a66a04b1171\nparent 5a10cd334a71be064d2e82bb2d33cd31e3617bcd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493817447 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577545 +0200\n\nWallet: allow to eventually pause verification if keypool requires more key to respect the gap limit\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b70a2289e96f0ce8c49678e613845572d8203bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b70a2289e96f0ce8c49678e613845572d8203bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b70a2289e96f0ce8c49678e613845572d8203bc/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10cd334a71be064d2e82bb2d33cd31e3617bcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a10cd334a71be064d2e82bb2d33cd31e3617bcd"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 37,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ad6f59ff7d822a138b40f3a15646a4647b6927dd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 15,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b70a2289e96f0ce8c49678e613845572d8203bc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b70a2289e96f0ce8c49678e613845572d8203bc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b70a2289e96f0ce8c49678e613845572d8203bc",
        "patch": "@@ -390,6 +390,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n+    if (fSyncPausedUntilKeypoolExt) return;\n     CWalletDB walletdb(*dbw);\n     walletdb.WriteBestBlock(loc);\n }\n@@ -1167,29 +1168,41 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n }\n \n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+    if (fSyncPausedUntilKeypoolExt) return;\n     LOCK2(cs_main, cs_wallet);\n     SyncTransaction(ptx);\n }\n \n-    LOCK2(cs_main, cs_wallet);\n-    // TODO: Temporarily ensure that mempool removals are notified before\n-    // connected transactions.  This shouldn't matter, but the abandoned\n-    // state of transactions in our wallet is currently cleared when we\n-    // receive another notification and there is a race condition where\n-    // notification of a connected conflict might cause an outside process\n-    // to abandon a transaction and then have it inadvertently cleared by\n-    // the notification that the conflicted transaction was evicted.\n-\n-    for (const CTransactionRef& ptx : vtxConflicted) {\n-        SyncTransaction(ptx);\n-    }\n-    for (size_t i = 0; i < pblock->vtx.size(); i++) {\n-        SyncTransaction(pblock->vtx[i], pindex, i);\n void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) {\n+    if (fSyncPausedUntilKeypoolExt) {\n+        requestPause = true;\n+        return;\n+    }\n+\n+    {\n+        LOCK2(cs_main, cs_wallet);\n+        // TODO: Temporarily ensure that mempool removals are notified before\n+        // connected transactions.  This shouldn't matter, but the abandoned\n+        // state of transactions in our wallet is currently cleared when we\n+        // receive another notification and there is a race condition where\n+        // notification of a connected conflict might cause an outside process\n+        // to abandon a transaction and then have it inadvertently cleared by\n+        // the notification that the conflicted transaction was evicted.\n+\n+        for (const CTransactionRef& ptx : vtxConflicted) {\n+            SyncTransaction(ptx);\n+        }\n+        for (size_t i = 0; i < pblock->vtx.size(); i++) {\n+            SyncTransaction(pblock->vtx[i], pindex, i);\n+        }\n+        if (fSyncPausedUntilKeypoolExt) {\n+            requestPause = true;\n+        }\n     }\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n+    if (fSyncPausedUntilKeypoolExt) return;\n     LOCK2(cs_main, cs_wallet);\n \n     for (const CTransactionRef& ptx : pblock->vtx) {\n@@ -3413,7 +3426,8 @@ void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n     }\n \n     if (IsHDEnabled() && !TopUpKeyPool()) {\n-        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        fSyncPausedUntilKeypoolExt = true;\n+        LogPrintf(\"%s: Topping up keypool failed (locked wallet), pausing transaction processing\\n\", __func__);\n     }\n }\n "
      },
      {
        "sha": "d697f021066b963494e1e8c645c348ab4726e89f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b70a2289e96f0ce8c49678e613845572d8203bc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b70a2289e96f0ce8c49678e613845572d8203bc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5b70a2289e96f0ce8c49678e613845572d8203bc",
        "patch": "@@ -654,6 +654,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::atomic<bool> fAbortRescan;\n     std::atomic<bool> fScanningWallet;\n \n+    /**\n+     * fSyncPausedUntilKeypoolExt allows to temporarily pause the transaction syncing process until\n+     * the keypool has been refilled (manual topup may be required for encrypted and locked wallets).\n+     * Not doing so may result in missing transactions in case of a HD recovery (or shared HD wallet).\n+     */\n+    std::atomic<bool> fSyncPausedUntilKeypoolExt;\n+\n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n      * all coins from coinControl are selected; Never select unconfirmed coins\n@@ -793,6 +800,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nRelockTime = 0;\n         fAbortRescan = false;\n         fScanningWallet = false;\n+        fSyncPausedUntilKeypoolExt = false;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;"
      }
    ]
  },
  {
    "sha": "2a8f1f6856f82bb17a92f61cca70c42ab7054150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYThmMWY2ODU2ZjgyYmIxN2E5MmY2MWNjYTcwYzQyYWI3MDU0MTUw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T14:03:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:45Z"
      },
      "message": "Ensure we pause wallet sync when the keypool requires extension",
      "tree": {
        "sha": "d6edb1b2c36f764d01416a6d525d6e730c7d47cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6edb1b2c36f764d01416a6d525d6e730c7d47cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a8f1f6856f82bb17a92f61cca70c42ab7054150",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYkACgkQHrd2uwPH\nki3neRAArhYZvKZaOxkb3/QAwDy0FAp85RYc/TgBM/ijso5EkOEJvkDrcjCkVdeL\n5UOog4ucHYFLsHxLVx6svLM/U4lji+2CNOWFW+v4hWvXc2i0Vop8KhRBEVP4iFU4\nsYi7hg6o0535Itb9e3JCCu2okj8yBuuzLS0D+sh+yzQarBVzm3EY1rCNlMKa8O17\nFLCQbUt7UQCsIRhsg4bfYaM8JgKsuYTCLQuXwqVZy18edtNKIttBYOMLnp0unXjS\nexjCZs98p/I0uXxGRlmJg2ABkkCuxUdyFV/3aX92IzPe0xrT3ytZ3PdhCVHtdSTZ\njQTLk9HDNFJRucvapUOoalOF3SzQvBEMIEkSSt/4q8o6IRps0XFZ3tP2Z2Z7Gh2M\nNv1iK5EM48Em73Wff1pou7GPzxp/OnMwbNjJTkAp1porrFPMPOGiMUYA8C5aZtZB\naeTbCx43IO45XUgz0i+N50BHICsZv1e/rpDBFenHEhH3vXr5GG5BggXoKYaTczfx\nvP0D+FgjJfZ5sp1CXEVeiYJG6qQjFfMlZseeKRq2BZDp4e26tlvskU5bCSqSvtZh\nUCcVbqglIQ7GGrmo+EJN5n3y9tp9z9JJhFT9jWbrNw4HClpn6bQAFXDCHnbQCyhy\nHIqodwrdhUwMRDG/58Va3O/TUfrLAYlUiNhpl0HYmQJhUE2YLsE=\n=wimr\n-----END PGP SIGNATURE-----",
        "payload": "tree d6edb1b2c36f764d01416a6d525d6e730c7d47cc\nparent 5b70a2289e96f0ce8c49678e613845572d8203bc\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493820204 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577545 +0200\n\nEnsure we pause wallet sync when the keypool requires extension\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8f1f6856f82bb17a92f61cca70c42ab7054150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a8f1f6856f82bb17a92f61cca70c42ab7054150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8f1f6856f82bb17a92f61cca70c42ab7054150/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b70a2289e96f0ce8c49678e613845572d8203bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b70a2289e96f0ce8c49678e613845572d8203bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b70a2289e96f0ce8c49678e613845572d8203bc"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 81,
      "deletions": 0
    },
    "files": [
      {
        "sha": "411b0d15b0194241cd15ceb806310335dde7589e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2a8f1f6856f82bb17a92f61cca70c42ab7054150",
        "patch": "@@ -2533,6 +2533,14 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                 assert(trace.pblock && trace.pindex);\n                 GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs, requestPause);\n+                if (requestPause) {\n+                    // in case we are in pruned mode, we have to halt verification and block requests\n+                    // to ensure the signal listener can keep up with the updates\n+                    if (fPruneMode) {\n+                        setBlockRequestsPaused(true);\n+                        setTipUpdatesPaused(true);\n+                    }\n+                }\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n@@ -4316,6 +4324,7 @@ bool isBlockRequestsPaused() {\n }\n \n void setBlockRequestsPaused(bool state) {\n+    LogPrintf(\"%s Block Requests\\n\", (state ? \"Pause\" : \"Resume\"));\n     fPauseBlockRequests = state;\n }\n \n@@ -4324,6 +4333,7 @@ bool isTipUpdatesPaused() {\n }\n \n void setTipUpdatesPaused(bool state) {\n+    LogPrintf(\"%s Tip Updates\\n\", (state ? \"Pause\" : \"Resume\"));\n     fPauseTipUpdates = state;\n }\n "
      },
      {
        "sha": "e17508d36cbf2327b80dac0ce2fecf75c9d7a0d8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2a8f1f6856f82bb17a92f61cca70c42ab7054150",
        "patch": "@@ -2046,6 +2046,9 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     pwallet->TopUpKeyPool();\n \n+    // give a hint to the wallet in case we have paused sync (we may have fall bellow the hd gap limit)\n+    pwallet->EventuallyRescanAfterKeypoolTopUp();\n+\n     int64_t nSleepTime = request.params[1].get_int64();\n     pwallet->nRelockTime = GetTime() + nSleepTime;\n     RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), boost::bind(LockWallet, pwallet), nSleepTime);"
      },
      {
        "sha": "a48402ea8a6b548756158654841eef7feea93818",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2a8f1f6856f82bb17a92f61cca70c42ab7054150",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"fs.h\"\n+#include \"init.h\" //for StartShutdown()\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n@@ -1415,6 +1416,57 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.masterKeyID.IsNull();\n }\n \n+void CWallet::EventuallyRescanAfterKeypoolTopUp() {\n+    if (fSyncPausedUntilKeypoolExt) {\n+\n+        // for now, enable block requests and tip updates via the states\n+        // this will only be sufficient as long as only a single wallet adjusts these stats\n+        // switch to counters (instead of a single boolean state) could solve this\n+        ::setBlockRequestsPaused(false);\n+        ::setTipUpdatesPaused(false);\n+\n+        // disabled the per-wallet pause\n+        fSyncPausedUntilKeypoolExt = false;\n+\n+        const CChainParams& chainparams = Params();\n+        CValidationState state;\n+        if (!ActivateBestChain(state, chainparams)) {\n+            LogPrintf(\"Failed to connect best block\");\n+            StartShutdown();\n+        }\n+\n+        CBlockIndex *pindexRescan = chainActive.Genesis();\n+        CWalletDB walletdb(*dbw);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+\n+        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+        {\n+            //We can't rescan beyond non-pruned blocks, stop and throw an error\n+            //this might happen if a user uses a old wallet within a pruned node\n+            // or if he ran -disablewallet for a longer time, then decided to re-enable\n+            if (fPruneMode)\n+            {\n+                CBlockIndex *block = chainActive.Tip();\n+                while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n+                    block = block->pprev;\n+\n+                if (pindexRescan != block) {\n+                    const static std::string pruneError = \"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\";\n+                    uiInterface.ThreadSafeMessageBox(pruneError, \"\", CClientUIInterface::MSG_ERROR);\n+                    StartShutdown();\n+                    throw std::runtime_error(pruneError);\n+                }\n+            }\n+            if (pindexRescan) {\n+                LogPrintf(\"Rescanning from height: %d\\n\", pindexRescan->nHeight);\n+            }\n+            ScanForWalletTransactions(pindexRescan, true);\n+        }\n+    }\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -1533,6 +1585,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n \n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = pindexStart;\n+    CBlockIndex* pindex_prev = NULL;\n     {\n         LOCK2(cs_main, cs_wallet);\n         fAbortRescan = false;\n@@ -1560,6 +1613,11 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n+                if (fSyncPausedUntilKeypoolExt) {\n+                    LogPrintf(\"Aborting rescanning at block %d. Please extend the keypool first.\\n\", (pindex ? pindex->nHeight: 0));\n+                    return pindex_prev;\n+                }\n+                pindex_prev = pindex;\n                 if (!ret) {\n                     ret = pindex;\n                 }\n@@ -3429,6 +3487,14 @@ void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n         fSyncPausedUntilKeypoolExt = true;\n         LogPrintf(\"%s: Topping up keypool failed (locked wallet), pausing transaction processing\\n\", __func__);\n     }\n+\n+    size_t extKeypoolSize = KeypoolCountExternalKeys();\n+    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n+\n+        // if the remaining keypool size is below the gap limit, refuse to cintinue with the sync\n+        fSyncPausedUntilKeypoolExt = true;\n+        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+    }\n }\n \n void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const"
      },
      {
        "sha": "3df0283bf038b62c71a6031a85285913d5e22579",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a8f1f6856f82bb17a92f61cca70c42ab7054150/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2a8f1f6856f82bb17a92f61cca70c42ab7054150",
        "patch": "@@ -1115,6 +1115,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    void EventuallyRescanAfterKeypoolTopUp();\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "09de1cbe5c159f3be82624580870c4c8e3c35a2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWRlMWNiZTVjMTU5ZjNiZTgyNjI0NTgwODcwYzRjOGUzYzM1YTJm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T14:51:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:45Z"
      },
      "message": "Extend wallet hd restore functional test",
      "tree": {
        "sha": "e4df181508c58035d0bd5649306bac4f9df0ef32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4df181508c58035d0bd5649306bac4f9df0ef32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09de1cbe5c159f3be82624580870c4c8e3c35a2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYkACgkQHrd2uwPH\nki3IvA/+JMf6sfvrqibmxl4U4AQTIoTM+HlHqB6OJIpmLoi0hR+chVRsT2dk7+7V\nMAYvuJ3L3RWSl6CygSeTkOF0pbYwHAzxSj8DrGmvXGlRSq/CXXr+tA/1TVVOEMRc\nqdjtoLUBoB6xYuzJm3bEbJscfzUeQqiIg2UsZSUiG1MvmgW2TiVCuktQAJxHOWra\nu1MmncqGTJATuwvFoFCHxC+3c0kXCIWHneJOakOYayL+gbuk8O2/aQ1siK29excA\nJ2wHOeV3mB25sIh8BdqfD6tgV6pC0vbG0y47AArxxe1y0VZ3ZsLTGyNtftXEv7Bp\nK0BPO3blOCzox9rvG9ht1AGGZBrBjCRJg9HZ2aNQp5oDZuwakJOX3NpVX3WDjHS5\nJmfuW4hA/iVxPSlC1TM3UCLPc8Ew6lFpQip3Je2wumOD/gouAoReBCCwrd/TlPfy\nWkrFVU75FntkEaPwgCMlvx0UKYrXksWGeWw9PCgWT+IowZZ0qca5Gz4En4gSVTiU\nrd3NuQNZGsLwcLXbqTH/t5mCxABFfqK+4ZUub6FRzx2fB+lSuRX24OfweRRyEfQb\ndihu392D8I/aAWsIoDLQd4UKi2ez14WVxbHoFBkWbsSoDgTm2zGI3euHBDLvU4rC\nZsGqxSp9I0+9WFabOJ9fDl2W49pomqb/FI8JVkSKQO/UT8+p4jU=\n=X3+V\n-----END PGP SIGNATURE-----",
        "payload": "tree e4df181508c58035d0bd5649306bac4f9df0ef32\nparent 2a8f1f6856f82bb17a92f61cca70c42ab7054150\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493823111 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577545 +0200\n\nExtend wallet hd restore functional test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09de1cbe5c159f3be82624580870c4c8e3c35a2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09de1cbe5c159f3be82624580870c4c8e3c35a2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09de1cbe5c159f3be82624580870c4c8e3c35a2f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a8f1f6856f82bb17a92f61cca70c42ab7054150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a8f1f6856f82bb17a92f61cca70c42ab7054150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a8f1f6856f82bb17a92f61cca70c42ab7054150"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 96,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4bb5b979e38450af732785380e12434514384e9f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09de1cbe5c159f3be82624580870c4c8e3c35a2f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09de1cbe5c159f3be82624580870c4c8e3c35a2f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=09de1cbe5c159f3be82624580870c4c8e3c35a2f",
        "patch": "@@ -54,6 +54,7 @@\n     # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'wallet-hd-restore.py',\n+    'wallet-hd-restore.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n     'p2p-fullblocktest.py',"
      },
      {
        "sha": "fbeabca87dd859c70dbc2c631bdc48a114614399",
        "filename": "test/functional/wallet-hd-restore.py",
        "status": "modified",
        "additions": 95,
        "deletions": 15,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09de1cbe5c159f3be82624580870c4c8e3c35a2f/test/functional/wallet-hd-restore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09de1cbe5c159f3be82624580870c4c8e3c35a2f/test/functional/wallet-hd-restore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd-restore.py?ref=09de1cbe5c159f3be82624580870c4c8e3c35a2f",
        "patch": "@@ -5,17 +5,10 @@\n \"\"\"Test Hierarchical Deterministic wallet function.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    start_nodes,\n-    start_node,\n-    assert_equal,\n-    connect_nodes_bi,\n-    assert_start_raises_init_error,\n-    sync_blocks\n-)\n+from test_framework.util import *\n import os\n import shutil\n-\n+from pprint import pprint\n \n class WalletHDRestoreTest(BitcoinTestFramework):\n \n@@ -32,17 +25,42 @@ def setup_network(self):\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n+\n+        print(\"Initialize wallet including backups of unencrypted and encrypted wallet\")\n+        # stop and backup original wallet (only keypool has been initialized)\n         self.stop_node(1)\n         shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+\n+        # start again and encrypt wallet\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1].encryptwallet('test')\n+        bitcoind_processes[1].wait()\n+        # node will be stopped during encryption, now do a backup\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.enc.bak\") \n+\n+        # start the node with encrypted wallet, get address in new pool at pos 50 (over the gap limit)\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        for _ in range(50):\n+            addr_enc_oldpool = self.nodes[1].getnewaddress()\n+\n+        # now make sure we retrive an address in the extended pool\n+        self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(80):\n+            addr_enc_extpool = self.nodes[1].getnewaddress()\n+\n+        # stop and load initial backup of the unencrypted wallet\n+        self.stop_node(1)\n+        os.remove(tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n         connect_nodes_bi(self.nodes,0,1)\n         for _ in range(10):\n             addr = self.nodes[1].getnewaddress()\n-            \n+\n         self.nodes[0].generate(101)\n         addr = self.nodes[1].getnewaddress()\n         assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/11'\")\n-        \n+\n         rawch = self.nodes[1].getrawchangeaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 1)\n         n0addr = self.nodes[0].getnewaddress()\n@@ -58,7 +76,8 @@ def run_test (self):\n \n         assert_equal(self.nodes[1].getbalance(), 3)\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n-        \n+\n+        print(\"Testing with unencrypted wallet\")\n         self.stop_node(1)\n         shutil.rmtree(tmpdir + \"/node1/regtest\")\n         os.mkdir(tmpdir + \"/node1/regtest\")\n@@ -69,14 +88,75 @@ def run_test (self):\n         self.sync_all()\n         assert_equal(self.nodes[1].getbalance(), 3) #make sure we have reconstructed the transaction\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n-        \n+\n         #now check if we have marked all keys up to the used keypool key as used\n         assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/12'\")\n-        \n+\n         #make sure the key on the internal chain is also marked as used\n         assert_equal(self.nodes[1].validateaddress(self.nodes[1].getrawchangeaddress())['hdkeypath'], \"m/0'/1'/1'\")\n-        \n \n+        # continue send funds (one in the main keypool over the gap limit, the other in the extended pool space)\n+        txid = self.nodes[0].sendtoaddress(addr_enc_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        stop_height = self.nodes[0].getblockchaininfo()['blocks']\n+        txid = self.nodes[0].sendtoaddress(addr_enc_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        #########################################################\n+        #########################################################\n+\n+        print(\"Testing with encrypted wallet\")\n+        # Try with the encrypted wallet (non pruning)\n+        self.stop_node(1)\n+        shutil.rmtree(tmpdir + \"/node1/regtest\")\n+        os.mkdir(tmpdir + \"/node1/regtest\")\n+        shutil.copyfile(tmpdir + \"/hd.enc.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, ['-usehd=1', '-keypool=100'])\n+        connect_nodes_bi(self.nodes,0,1)\n+\n+        # Sync must be possible, though the wallet bestblock should lack behind\n+        self.sync_all()\n+\n+        # The balance should cover everything expect the very last tx of 5 BTC\n+        assert_equal(self.nodes[1].getbalance(), 13)\n+\n+        # unlock the wallet, the sync can continue then\n+        self.nodes[1].walletpassphrase(\"test\", 100)\n+        self.sync_all() #sync is now possible\n+\n+        # we should now have restored all funds\n+        assert_equal(self.nodes[1].getbalance(), 18) # all funds recovered\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+\n+        #########################################################\n+        #########################################################\n+\n+        print(\"Testing with encrypted wallet in prune mode\")\n+        # Now try with the encrypted wallet in prune mode\n+        self.stop_node(1)\n+        shutil.rmtree(tmpdir + \"/node1/regtest\")\n+        os.mkdir(tmpdir + \"/node1/regtest\")\n+        shutil.copyfile(tmpdir + \"/hd.enc.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, ['-usehd=1', '-keypool=100', '-prune=550'])\n+        connect_nodes_bi(self.nodes,0,1)\n+\n+        # now we should only be capable to sync up to the second last block (pruned mode, sync will be paused)\n+        assert_equal(self.nodes[1].waitforblockheight(stop_height, 10 * 1000)['height'], stop_height) #must be possible\n+\n+        # This must timeout now, we can't sync up to stop_height+1 (== most recent block)\n+        # Sync must be paused at this point\n+        assert_equal(self.nodes[1].waitforblockheight(stop_height+1, 3 * 1000)['height'], stop_height)\n+\n+        # The balance should cover everything expect the very last tx of 5 BTC\n+        assert_equal(self.nodes[1].getbalance(), 13)\n+\n+        # unlock the wallet, the sync can continue then\n+        self.nodes[1].walletpassphrase(\"test\", 100)\n+        self.sync_all() #sync is now possible\n+\n+        # we should now have restored all funds\n+        assert_equal(self.nodes[1].getbalance(), 18)\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n if __name__ == '__main__':\n     WalletHDRestoreTest().main ()"
      }
    ]
  },
  {
    "sha": "46060c261c0edc7ef13bbee7575801c98534f440",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjA2MGMyNjFjMGVkYzdlZjEzYmJlZTc1NzU4MDFjOTg1MzRmNDQw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T15:07:06Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:46Z"
      },
      "message": "Make sure we check the keypool min size during startup and when retriving a key",
      "tree": {
        "sha": "c5502d262ec335f81d505d101fd7f42113a2cde9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5502d262ec335f81d505d101fd7f42113a2cde9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46060c261c0edc7ef13bbee7575801c98534f440",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYoACgkQHrd2uwPH\nki1f8A//Y6xdJ1SSXBaKyIK1oJabHaS//DeWwZpukV6a/dD19j/6SriJ/ZtvbjvY\nghOI7BLQrzPc8IMcefoQmFaS86YzKAgbpzPjDV7KMCi1YmFGDIigzJ2hKhSyLbkp\nqSNWvqCrgmdRkg8iRrIgLYev8JMorDEV5fI12COf2Z/zhLC6gena3TmwgYEWT4IV\nnUVmc2L5UC+BwdNcEAYtZ2HZY/Mo5GNrAFmDTj23P1/d8dLlr348V5Bm3FQbexbH\nlqKQ/dJIz5RTOb6+NiBm6BGjtoWPt1H+OzT8yW0UGWRLZSrQxMlrQtJ/7yg8svdq\nImMBcSsoRgTO7RzNgMv7ZBiQU5HB1GNmBGkUiMj0zq/Kzook7ltKg1d4t18ho5RY\nq/+77vntIj6qAuWYgNQVGznDTtPvNAkhymMnkxOE175IgHwjX2xofUnB1jkNtbiB\nig0oYjHQPkVWzxzW1q7plCHjEXtc0nY3PUNidrzv4FfPlqbhcFArav9bjnlTRdDl\nxjXk/fjIhzITvSLVToHK56O2nE5r51jj4lf4Ue4O6KdAGcMpYV4uqNG+l5aioCVN\nW4+1pKl7btRsPAX/3SOSxsGeZAXynhCpZQkk7gKCnsuONMA+7bkcBcOR39r9Plo/\nlZU7za+zT/SSQgKTFCtptHFwfNXl0kixgjQ9SXo8axvKknSVLr4=\n=uoYy\n-----END PGP SIGNATURE-----",
        "payload": "tree c5502d262ec335f81d505d101fd7f42113a2cde9\nparent 09de1cbe5c159f3be82624580870c4c8e3c35a2f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493824026 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577546 +0200\n\nMake sure we check the keypool min size during startup and when retriving a key\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46060c261c0edc7ef13bbee7575801c98534f440",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46060c261c0edc7ef13bbee7575801c98534f440",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46060c261c0edc7ef13bbee7575801c98534f440/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09de1cbe5c159f3be82624580870c4c8e3c35a2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09de1cbe5c159f3be82624580870c4c8e3c35a2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09de1cbe5c159f3be82624580870c4c8e3c35a2f"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ef8b689fdbb86aa611d5d55719b5a5f1b1eacdac",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46060c261c0edc7ef13bbee7575801c98534f440/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46060c261c0edc7ef13bbee7575801c98534f440/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=46060c261c0edc7ef13bbee7575801c98534f440",
        "patch": "@@ -3175,6 +3175,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n                 setKeyPool.erase(id);\n                 assert(keypool.vchPubKey.IsValid());\n                 LogPrintf(\"keypool reserve %d\\n\", nIndex);\n+                CheckKeypoolMinSize();\n                 return;\n             }\n         }\n@@ -3440,6 +3441,18 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+bool CWallet::CheckKeypoolMinSize() {\n+    LOCK(cs_wallet);\n+    size_t extKeypoolSize = KeypoolCountExternalKeys();\n+    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n+        // if the remaining keypool size is below the gap limit, refuse to continue with the sync\n+        fSyncPausedUntilKeypoolExt = true;\n+        LogPrintf(\"%s: Keypool ran below min size, pause wallet sync\\n\", __func__);\n+        return false;\n+    }\n+    return true;\n+}\n+\n void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n {\n     LOCK(cs_wallet);\n@@ -3488,13 +3501,7 @@ void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n         LogPrintf(\"%s: Topping up keypool failed (locked wallet), pausing transaction processing\\n\", __func__);\n     }\n \n-    size_t extKeypoolSize = KeypoolCountExternalKeys();\n-    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n-\n-        // if the remaining keypool size is below the gap limit, refuse to cintinue with the sync\n-        fSyncPausedUntilKeypoolExt = true;\n-        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n-    }\n+    CheckKeypoolMinSize();\n }\n \n void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n@@ -3879,12 +3886,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             InitWarning(_(\"Your are using an encrypted HD wallet. In case you recover a HD wallet, you may miss incomming or outgoing funds.\"));\n         }\n         else {\n-            if (GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE) < HD_RESTORE_KEYPOOL_SIZE_MIN ) {\n-                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. In case you recover a HD wallet, you may miss incomming or outgoing funds.\"));\n-            }\n             walletInstance->TopUpKeyPool();\n         }\n-\n+        if (!walletInstance->CheckKeypoolMinSize()) {\n+            InitWarning(_(\"Your keypool size is below the required limit for HD rescans. Wallet synchronisation is now paused until you have refilled the keypool.\"));\n+        }\n     }\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!GetBoolArg(\"-rescan\", false))"
      },
      {
        "sha": "28153d01bb16c8c76d3de0a29a3218c965545bb6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46060c261c0edc7ef13bbee7575801c98534f440/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46060c261c0edc7ef13bbee7575801c98534f440/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=46060c261c0edc7ef13bbee7575801c98534f440",
        "patch": "@@ -970,6 +970,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+    bool CheckKeypoolMinSize();\n     void MarkReserveKeysAsUsed(const CKeyID& keyId);\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n "
      }
    ]
  },
  {
    "sha": "bd9e1e8f89e8470eecb57338e355a9519da66cd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDllMWU4Zjg5ZTg0NzBlZWNiNTczMzhlMzU1YTk1MTlkYTY2Y2Q5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T15:26:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:46Z"
      },
      "message": "SetSoftArg the keypool always to the minimum gap limit if HD is enabled",
      "tree": {
        "sha": "6aec9c152c732ca1991daed6504e07c3c0d16850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6aec9c152c732ca1991daed6504e07c3c0d16850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd9e1e8f89e8470eecb57338e355a9519da66cd9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYoACgkQHrd2uwPH\nki1BTw/+NGsUP59SBt8AhUYDGalaoGhFi2KgTj5pYoiOtFkQklkJBsMFDGX3fOzZ\n2RveLHRUMWOh83pScCqCIJ6PQ3Nu7OkveYw7o6Q42ruZjBFxou9johxyxhbKKMN1\ndtC6Lu2yjrz45HTvEEEcqfy0MYIZ368KDflg2i2NA/2/pM7ZvN9latY9h/STuRZn\nFrvWSUheAxMtWaAliCdH0/D2CJcGXc4kiJeXiRzRbDWz1rvBw5St8VUo6uqXaFYs\nC4jEt4WSuTb31lOK5P5Aq3JsvjBdGwsLE/lQQDmahdrvtTJDlA72xXibnAkVtLzn\n0ACyqsb/efAXr1eEU5aQCL/NW+fsIfuIhhACn1xfjSWdv/wZZxtF0G85v1GkWuEG\n/GbWepJpKrHPZcOlGpfUvOaz1qE9OarYOgry6nxEHV+1zevBlqg+wLR8aoWCv5va\nzqxvYPQikG4X3D0nYA7HFuup+X9FMTJcB+ofANnqqh9EqjZujWiHOT/TAjfq+L/L\nWxKdMNmPqKuyoQgEar9u/D7TosgCz+3F6nsYPo2t/rI5O5Ph4wQAEqNyNsDWWRZg\n2k8haedDsJiATX8EC9wSLax7bKrbUAdHIrs4KAweonoCbMlym9ZWh7Sx5+pW4p5Y\nYtWnDY7wgW2A2Px6obZnBDP2ROG/dvadPn6OmACvzf07OBaNl0I=\n=rgYT\n-----END PGP SIGNATURE-----",
        "payload": "tree 6aec9c152c732ca1991daed6504e07c3c0d16850\nparent 46060c261c0edc7ef13bbee7575801c98534f440\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493825196 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577546 +0200\n\nSetSoftArg the keypool always to the minimum gap limit if HD is enabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd9e1e8f89e8470eecb57338e355a9519da66cd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd9e1e8f89e8470eecb57338e355a9519da66cd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd9e1e8f89e8470eecb57338e355a9519da66cd9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46060c261c0edc7ef13bbee7575801c98534f440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46060c261c0edc7ef13bbee7575801c98534f440",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46060c261c0edc7ef13bbee7575801c98534f440"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 21,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ac3b84de5aef9563ea008b90ae6b3e6203670395",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -2047,6 +2047,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     pwallet->TopUpKeyPool();\n \n     // give a hint to the wallet in case we have paused sync (we may have fall bellow the hd gap limit)\n+    // this runs synchronous, at least during the resync, we can be sure the keypool can be topped up\n     pwallet->EventuallyRescanAfterKeypoolTopUp();\n \n     int64_t nSleepTime = request.params[1].get_int64();"
      },
      {
        "sha": "3f68fb57017c3f40e53c21b6b5b9047428282c7d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -3444,7 +3444,7 @@ void CReserveKey::ReturnKey()\n bool CWallet::CheckKeypoolMinSize() {\n     LOCK(cs_wallet);\n     size_t extKeypoolSize = KeypoolCountExternalKeys();\n-    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n+    if (!GetBoolArg(\"-hdignoregaplimit\", DEFAULT_IGNORE_HD_MIN_KEYPOOL_SIZE) && IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n         // if the remaining keypool size is below the gap limit, refuse to continue with the sync\n         fSyncPausedUntilKeypoolExt = true;\n         LogPrintf(\"%s: Keypool ran below min size, pause wallet sync\\n\", __func__);\n@@ -3762,6 +3762,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n         strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n+        strUsage += HelpMessageOpt(\"-hdignoregaplimit\", strprintf(_(\"Ignores the minimum keypool-size warning for HD restore (default: %u)\"), DEFAULT_IGNORE_HD_MIN_KEYPOOL_SIZE));\n     }\n \n     return strUsage;\n@@ -3882,13 +3883,14 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     // HD Restore: Make sure we always have a reasonable keypool size if HD is enabled\n     if (walletInstance->IsHDEnabled()) {\n-        if (walletInstance->IsCrypted()) {\n-            InitWarning(_(\"Your are using an encrypted HD wallet. In case you recover a HD wallet, you may miss incomming or outgoing funds.\"));\n+        if (GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE) < HD_RESTORE_KEYPOOL_SIZE_MIN && !GetBoolArg(\"-hdignoregaplimit\", DEFAULT_IGNORE_HD_MIN_KEYPOOL_SIZE)) {\n+            LogPrintf(\"Parameter Interaction: set keypool to required minimum for encrypted wallets (%d)\\n\", HD_RESTORE_KEYPOOL_SIZE_MIN);\n+            SoftSetArg(\"-keypool\", std::to_string(HD_RESTORE_KEYPOOL_SIZE_MIN));\n         }\n         else {\n             walletInstance->TopUpKeyPool();\n         }\n-        if (!walletInstance->CheckKeypoolMinSize()) {\n+        if (!walletInstance->CheckKeypoolMinSize() && !GetBoolArg(\"-hdignoregaplimit\", DEFAULT_IGNORE_HD_MIN_KEYPOOL_SIZE)) {\n             InitWarning(_(\"Your keypool size is below the required limit for HD rescans. Wallet synchronisation is now paused until you have refilled the keypool.\"));\n         }\n     }"
      },
      {
        "sha": "ca93a7829f1da9823dd819ce587a0992bb9fa289",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -66,6 +66,8 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n //! if set, all keys will be derived by using BIP32\n static const bool DEFAULT_USE_HD_WALLET = true;\n \n+static const bool DEFAULT_IGNORE_HD_MIN_KEYPOOL_SIZE = false;\n+\n extern const char * DEFAULT_WALLET_DAT;\n \n class CBlockIndex;"
      },
      {
        "sha": "1a22e026dee5cd880ff931b265a4b7bb9b8adc3b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -285,7 +285,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-hdignoregaplimit\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 bitcoind_processes[i] = subprocess.Popen(args)"
      },
      {
        "sha": "88f0e6f66a28bc22ddc01ed7f6ccdc4d7e2f3c2a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -234,7 +234,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n+    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-hdignoregaplimit\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")"
      },
      {
        "sha": "5dfdd66b1a7e034db43629be108ee70345584642",
        "filename": "test/functional/wallet-hd-restore.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/wallet-hd-restore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/wallet-hd-restore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd-restore.py?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -16,7 +16,7 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=100']]\n+        self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-hdignoregaplimit=0']]\n \n     def setup_network(self):\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n@@ -111,7 +111,7 @@ def run_test (self):\n         shutil.rmtree(tmpdir + \"/node1/regtest\")\n         os.mkdir(tmpdir + \"/node1/regtest\")\n         shutil.copyfile(tmpdir + \"/hd.enc.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = start_node(1, self.options.tmpdir, ['-usehd=1', '-keypool=100'])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, ['-usehd=1', '-keypool=100', '-hdignoregaplimit=0'])\n         connect_nodes_bi(self.nodes,0,1)\n \n         # Sync must be possible, though the wallet bestblock should lack behind\n@@ -137,7 +137,7 @@ def run_test (self):\n         shutil.rmtree(tmpdir + \"/node1/regtest\")\n         os.mkdir(tmpdir + \"/node1/regtest\")\n         shutil.copyfile(tmpdir + \"/hd.enc.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = start_node(1, self.options.tmpdir, ['-usehd=1', '-keypool=100', '-prune=550'])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, ['-usehd=1', '-keypool=100', '-prune=550', '-hdignoregaplimit=0'])\n         connect_nodes_bi(self.nodes,0,1)\n \n         # now we should only be capable to sync up to the second last block (pruned mode, sync will be paused)"
      },
      {
        "sha": "e824f605529967df7e8cd913edada9ec3b883c2d",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd9e1e8f89e8470eecb57338e355a9519da66cd9/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "patch": "@@ -74,10 +74,12 @@ def run_test (self):\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n+        # we need to delete the complete regtest directory\n+        # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n+        shutil.rmtree(tmpdir + \"/node1/regtest\")\n+        os.mkdir(tmpdir + \"/node1/regtest\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -87,7 +89,9 @@ def run_test (self):\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_+1)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n-\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+        \n         # Needs rescan\n         self.stop_node(1)\n         self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])"
      }
    ]
  },
  {
    "sha": "4cbc21689c359fee67e877355c04f808b2f749d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2JjMjE2ODljMzU5ZmVlNjdlODc3MzU1YzA0ZjgwOGIyZjc0OWQ2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-04T13:47:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-12T08:25:46Z"
      },
      "message": "Make sure we pause immediately if we receive a pause-request over the BlockConnected signal",
      "tree": {
        "sha": "4b106e80501f1adc46089109e49261c5b5c0eee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b106e80501f1adc46089109e49261c5b5c0eee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cbc21689c359fee67e877355c04f808b2f749d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkVcYoACgkQHrd2uwPH\nki3aKRAAnBUScT4Jfs51ca4E3ScE0/LardJCsyerphOnnXAMXZF/ATkU4C7HiE3W\noh6sHZgX1xQLvKEgvjiQGOi8wvWnAW1zOWfXpg6lECoTKKMGTg4IXD0QJAlZ2vO4\nqswCD7+N/ExefbNp6V1sqIDdG2e5FtswsQhMO8Sx+brfS0brBDqOo//S3jX2HtRk\nL2miXGN17RC4zSTpLd1u4Ymo3m+SzgCzJeaQ6rbplDXaBVgoNKInYan0pKIK7XxZ\nBFSNxHn0RU5LPKLw3QTtVpxrKJqLrQJKS3KyUCrYXxCQOFuyd1KCxhd2mmfpq0gw\nOCdZWEQqqCowrc27vMNtCSriuFowNzmIbmKof21kgZReK9ZM2zpgUCPnqWncrB/8\nLf4exwY1VH1ujiPy8KUFNktX5AXM7V2cze3aWCtPgrSLtI4O07cSS4rOmQa/LoKM\nuVupV5eTX9zrixINuKd8q5TayEKW7nHsgXBhRFLm5pTAswQgu+HCzqPsE/d5Cuvu\n5wVGTjUAPVxDM9fEXnJVsqUsLQ0s8D40CB9NDSh3Wm4ETUDG0yqUe42hSdijN6Wq\nDE+xsayTQ6noGalkz8482M50nO41NKZ80DGomXQkRVnHdGw5Eq1psPaUIxBtsEo0\nZ785KhViSJzLrshayNQyNU6euuO8cSF2PXiCDyArC9imCp640E4=\n=n+Rc\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b106e80501f1adc46089109e49261c5b5c0eee8\nparent bd9e1e8f89e8470eecb57338e355a9519da66cd9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1493905644 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1494577546 +0200\n\nMake sure we pause immediately if we receive a pause-request over the BlockConnected signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbc21689c359fee67e877355c04f808b2f749d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbc21689c359fee67e877355c04f808b2f749d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbc21689c359fee67e877355c04f808b2f749d6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd9e1e8f89e8470eecb57338e355a9519da66cd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd9e1e8f89e8470eecb57338e355a9519da66cd9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "49be5f7419f4a519c618850cc8aa90cfa8343bc9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cbc21689c359fee67e877355c04f808b2f749d6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cbc21689c359fee67e877355c04f808b2f749d6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4cbc21689c359fee67e877355c04f808b2f749d6",
        "patch": "@@ -2554,7 +2554,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n         }\n-    } while (pindexNewTip != pindexMostWork);\n+    } while (pindexNewTip != pindexMostWork && !isTipUpdatesPaused());\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay."
      }
    ]
  }
]