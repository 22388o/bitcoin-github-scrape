[
  {
    "sha": "be20ea310f34203f7569df9e8f093dc043a32b76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTIwZWEzMTBmMzQyMDNmNzU2OWRmOWU4ZjA5M2RjMDQzYTMyYjc2",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-09T17:13:03Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-09T17:13:03Z"
      },
      "message": "Add an extra thread for scheduler",
      "tree": {
        "sha": "6461de4a30bede2c5af5b0b8f496f93d3fdf3eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6461de4a30bede2c5af5b0b8f496f93d3fdf3eab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be20ea310f34203f7569df9e8f093dc043a32b76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be20ea310f34203f7569df9e8f093dc043a32b76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be20ea310f34203f7569df9e8f093dc043a32b76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be20ea310f34203f7569df9e8f093dc043a32b76/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "29769bd2fd1c6490d6f9f33268a9f77100485c91",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be20ea310f34203f7569df9e8f093dc043a32b76/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be20ea310f34203f7569df9e8f093dc043a32b76/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=be20ea310f34203f7569df9e8f093dc043a32b76",
        "patch": "@@ -1307,9 +1307,10 @@ bool AppInitMain(NodeContext& node)\n     assert(!node.scheduler);\n     node.scheduler = MakeUnique<CScheduler>();\n \n-    // Start the lightweight task scheduler thread\n+    // Start two lightweight task scheduler threads\n     CScheduler::Function serviceLoop = [&node]{ node.scheduler->serviceQueue(); };\n-    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler1\", serviceLoop));\n+    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler2\", serviceLoop));\n \n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{"
      }
    ]
  },
  {
    "sha": "8919f79f127eaba195c638752fed2bb3a1a99252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTE5Zjc5ZjEyN2VhYmExOTVjNjM4NzUyZmVkMmJiM2ExYTk5MjUy",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-09T17:13:54Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-09T20:31:58Z"
      },
      "message": "Move Tor to the scheduler\n\nUse only one thread for Tor callbacks so that\ncallbacks block at most one scheduler thread.",
      "tree": {
        "sha": "61fa46ac4d2c8d6207f195a970729004c3728bf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61fa46ac4d2c8d6207f195a970729004c3728bf7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8919f79f127eaba195c638752fed2bb3a1a99252",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8919f79f127eaba195c638752fed2bb3a1a99252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8919f79f127eaba195c638752fed2bb3a1a99252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8919f79f127eaba195c638752fed2bb3a1a99252/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be20ea310f34203f7569df9e8f093dc043a32b76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be20ea310f34203f7569df9e8f093dc043a32b76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be20ea310f34203f7569df9e8f093dc043a32b76"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 11,
      "deletions": 20
    },
    "files": [
      {
        "sha": "2f19552e51620a9dd3bbbc2f7fe32296efe1d919",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8919f79f127eaba195c638752fed2bb3a1a99252/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8919f79f127eaba195c638752fed2bb3a1a99252/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=8919f79f127eaba195c638752fed2bb3a1a99252",
        "patch": "@@ -444,10 +444,8 @@ Threads\n \n - [SchedulerThread (`b-scheduler`)](https://doxygen.bitcoincore.org/class_c_scheduler.html#a14d2800815da93577858ea078aed1fba)\n   : Does asynchronous background tasks like dumping wallet contents, dumping\n-  addrman and running asynchronous validationinterface callbacks.\n-\n-- [TorControlThread (`b-torcontrol`)](https://doxygen.bitcoincore.org/torcontrol_8cpp.html#a4faed3692d57a0d7bdbecf3b37f72de0)\n-  : Libevent thread for tor connections.\n+  addrman, running asynchronous validationinterface callbacks and maintaining\n+  tor connections.\n \n - Net threads:\n "
      },
      {
        "sha": "8ccd0f358875821506952bddc18b8f8d05980139",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8919f79f127eaba195c638752fed2bb3a1a99252/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8919f79f127eaba195c638752fed2bb3a1a99252/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8919f79f127eaba195c638752fed2bb3a1a99252",
        "patch": "@@ -212,14 +212,13 @@ void Shutdown(NodeContext& node)\n         node.connman->StopNodes();\n     }\n \n-    StopTorControl();\n-\n     // After everything has been shut down, but before things get flushed, stop the\n     // CScheduler/checkqueue threadGroup\n     if (node.scheduler) node.scheduler->stop();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n \n+    StopTorControl();\n     // After the threads that potentially access these pointers have been stopped,\n     // destruct and reset all to nullptr.\n     node.peer_logic.reset();\n@@ -1864,8 +1863,10 @@ bool AppInitMain(NodeContext& node)\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n-    if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl();\n+    if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n+        std::chrono::system_clock::time_point no_time = std::chrono::system_clock::time_point::min();\n+        node.scheduler->schedule([&] { StartTorControl(); }, no_time);\n+    }\n \n     Discover();\n "
      },
      {
        "sha": "752b9e80866b216dd94819c5956ec4114cba83c7",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8919f79f127eaba195c638752fed2bb3a1a99252/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8919f79f127eaba195c638752fed2bb3a1a99252/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=8919f79f127eaba195c638752fed2bb3a1a99252",
        "patch": "@@ -727,16 +727,8 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n     self->Reconnect();\n }\n \n-/****** Thread ********/\n-static struct event_base *gBase;\n-static std::thread torControlThread;\n \n-static void TorControlThread()\n-{\n-    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n-\n-    event_base_dispatch(gBase);\n-}\n+static struct event_base *gBase;\n \n void StartTorControl()\n {\n@@ -752,13 +744,14 @@ void StartTorControl()\n         return;\n     }\n \n-    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n+    event_base_dispatch(gBase);\n }\n \n void InterruptTorControl()\n {\n     if (gBase) {\n-        LogPrintf(\"tor: Thread interrupt\\n\");\n+        LogPrintf(\"tor: interrupt\\n\");\n         event_base_once(gBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n             event_base_loopbreak(gBase);\n         }, nullptr, nullptr);\n@@ -768,7 +761,6 @@ void InterruptTorControl()\n void StopTorControl()\n {\n     if (gBase) {\n-        torControlThread.join();\n         event_base_free(gBase);\n         gBase = nullptr;\n     }"
      }
    ]
  },
  {
    "sha": "e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzEwMmNlZDFlMjcwZGRmNWQ3NTcxY2IzYjYzMWRiOWFmM2E4ZmU5",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-09T17:26:17Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-05-09T20:32:00Z"
      },
      "message": "Use scheduler for connecting to added nodes",
      "tree": {
        "sha": "b6abe02e1da64239a45ea2b59fad42764fcbd9e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6abe02e1da64239a45ea2b59fad42764fcbd9e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8919f79f127eaba195c638752fed2bb3a1a99252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8919f79f127eaba195c638752fed2bb3a1a99252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8919f79f127eaba195c638752fed2bb3a1a99252"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 40,
      "deletions": 35
    },
    "files": [
      {
        "sha": "aaf442da1fbfbe2c61b1417fcca1b7920386869f",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
        "patch": "@@ -444,8 +444,8 @@ Threads\n \n - [SchedulerThread (`b-scheduler`)](https://doxygen.bitcoincore.org/class_c_scheduler.html#a14d2800815da93577858ea078aed1fba)\n   : Does asynchronous background tasks like dumping wallet contents, dumping\n-  addrman, running asynchronous validationinterface callbacks and maintaining\n-  tor connections.\n+  addrman, running asynchronous validationinterface callbacks, maintaining\n+  tor connections and opening added connections.\n \n - Net threads:\n \n@@ -462,9 +462,6 @@ Threads\n   - [ThreadSocketHandler (`b-net`)](https://doxygen.bitcoincore.org/class_c_connman.html#a765597cbfe99c083d8fa3d61bb464e34)\n     : Sends/Receives data from peers on port 8333.\n \n-  - [ThreadOpenAddedConnections (`b-addcon`)](https://doxygen.bitcoincore.org/class_c_connman.html#a0b787caf95e52a346a2b31a580d60a62)\n-    : Opens network connections to added nodes.\n-\n   - [ThreadOpenConnections (`b-opencon`)](https://doxygen.bitcoincore.org/class_c_connman.html#a55e9feafc3bab78e5c9d408c207faa45)\n     : Initiates new connections to peers.\n "
      },
      {
        "sha": "17df0091d52d87013568ab09fde56aaf249eda55",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 28,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
        "patch": "@@ -1947,31 +1947,40 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     return ret;\n }\n \n-void CConnman::ThreadOpenAddedConnections()\n-{\n-    while (true)\n-    {\n-        CSemaphoreGrant grant(*semAddnode);\n-        std::vector<AddedNodeInfo> vInfo = GetAddedNodeInfo();\n-        bool tried = false;\n-        for (const AddedNodeInfo& info : vInfo) {\n-            if (!info.fConnected) {\n-                if (!grant.TryAcquire()) {\n-                    // If we've used up our semaphore and need a new one, let's not wait here since while we are waiting\n-                    // the addednodeinfo state might change.\n-                    break;\n-                }\n-                tried = true;\n-                CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, true);\n-                if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n-                    return;\n-            }\n+void CConnman::OpenAddedConnections(CScheduler& scheduler)\n+{\n+    if (added_connection_queue.empty()) {\n+        // New round of connecting to added nodes.\n+        added_connection_queue = GetAddedNodeInfo();\n+\n+        // Add delay between rounds.\n+        std::chrono::milliseconds long_delay;\n+        if (connection_was_attempted) {\n+            // If during last round there was an attempt to connect to an added\n+            // node, wait 60 seconds before next round.\n+            connection_was_attempted = false;\n+            long_delay = std::chrono::seconds{60};\n+        } else {\n+            // If there was no attempt, wait 2 seconds.\n+            long_delay = std::chrono::seconds{2};\n         }\n-        // Retry every 60 seconds if a connection was attempted, otherwise two seconds\n-        if (!interruptNet.sleep_for(std::chrono::seconds(tried ? 60 : 2)))\n-            return;\n+        scheduler.scheduleFromNow([&] { OpenAddedConnections(scheduler); }, long_delay);\n+    }\n+\n+    CSemaphoreGrant grant(*semAddnode);\n+    const AddedNodeInfo& info = added_connection_queue.back();\n+    added_connection_queue.pop_back();\n+    if (!info.fConnected && !grant.TryAcquire()) {\n+        // If we've used up our semaphore and need a new one, let's not wait here since while we are waiting\n+        // the addednodeinfo state might change.\n+        connection_was_attempted = true;\n+        CAddress addr(CService(), NODE_NONE);\n+        OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, true);\n     }\n+\n+    // Wait before attempting to connect to the next node.\n+    const std::chrono::milliseconds short_delay = std::chrono::milliseconds{500};\n+    scheduler.scheduleFromNow([&] { OpenAddedConnections(scheduler); }, short_delay);\n }\n \n // if successful, this moves the passed grant to the constructed node\n@@ -2324,9 +2333,6 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     else\n         threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n \n-    // Initiate outbound connections from -addnode\n-    threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n-\n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n@@ -2392,8 +2398,6 @@ void CConnman::StopThreads()\n         threadMessageHandler.join();\n     if (threadOpenConnections.joinable())\n         threadOpenConnections.join();\n-    if (threadOpenAddedConnections.joinable())\n-        threadOpenAddedConnections.join();\n     if (threadDNSAddressSeed.joinable())\n         threadDNSAddressSeed.join();\n     if (threadSocketHandler.joinable())"
      },
      {
        "sha": "c54579d9e6706b913fe6c39a4ad04ee80c4384e9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3102ced1e270ddf5d7571cb3b631db9af3a8fe9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e3102ced1e270ddf5d7571cb3b631db9af3a8fe9",
        "patch": "@@ -338,7 +338,7 @@ class CConnman\n     bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n     bool InitBinds(const std::vector<CService>& binds, const std::vector<NetWhitebindPermissions>& whiteBinds);\n-    void ThreadOpenAddedConnections();\n+    void OpenAddedConnections(CScheduler& scheduler);\n     void AddOneShot(const std::string& strDest);\n     void ProcessOneShot();\n     void ThreadOpenConnections(std::vector<std::string> connect);\n@@ -414,6 +414,11 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n+    // Keep track of the current round of opening connections\n+    // to added nodes.\n+    std::vector<AddedNodeInfo> added_connection_queue;\n+    bool connection_was_attempted{false};\n+\n     /**\n      * Services this instance offers.\n      *\n@@ -462,7 +467,6 @@ class CConnman\n \n     std::thread threadDNSAddressSeed;\n     std::thread threadSocketHandler;\n-    std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n "
      }
    ]
  }
]