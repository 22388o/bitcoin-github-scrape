[
  {
    "sha": "eb0b56b19017ab5c16c745e6da39c53126924ed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjBiNTZiMTkwMTdhYjVjMTZjNzQ1ZTZkYTM5YzUzMTI2OTI0ZWQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-08-01T20:57:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-08-08T23:43:23Z"
      },
      "message": "Simplify serialize.h's exception handling\n\nRemove the 'state' and 'exceptmask' from serialize.h's stream implementations,\nas well as related methods.\n\nAs exceptmask always included 'failbit', and setstate was always called with\nbits = failbit, all it did was immediately raise an exception. Get rid of\nthose variables, and replace the setstate with direct exception throwing\n(which also removes some dead code).\n\nAs a result, good() is never reached after a failure (there are only 2\ncalls, one of which is in tests), and can just be replaced by !eof().\n\nfail(), clear(n) and exceptions() are just never called. Delete them.",
      "tree": {
        "sha": "3d59b76170293cebb37b57fd7669faf7f333623c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d59b76170293cebb37b57fd7669faf7f333623c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb0b56b19017ab5c16c745e6da39c53126924ed6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb0b56b19017ab5c16c745e6da39c53126924ed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb0b56b19017ab5c16c745e6da39c53126924ed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb0b56b19017ab5c16c745e6da39c53126924ed6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de89257fc516a68c89da0c70858c9c2b86a701f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de89257fc516a68c89da0c70858c9c2b86a701f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de89257fc516a68c89da0c70858c9c2b86a701f7"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 8,
      "deletions": 59
    },
    "files": [
      {
        "sha": "3add3491c8a58ac7adbf79ba19866ae153585ae3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb0b56b19017ab5c16c745e6da39c53126924ed6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb0b56b19017ab5c16c745e6da39c53126924ed6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb0b56b19017ab5c16c745e6da39c53126924ed6",
        "patch": "@@ -3228,7 +3228,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             }\n         }\n         uint64_t nRewind = blkdat.GetPos();\n-        while (blkdat.good() && !blkdat.eof()) {\n+        while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n \n             blkdat.SetPos(nRewind);"
      },
      {
        "sha": "748a2a0d4e928d64170e0cf84cb582fc9a8c24ee",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 6,
        "deletions": 57,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb0b56b19017ab5c16c745e6da39c53126924ed6/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb0b56b19017ab5c16c745e6da39c53126924ed6/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=eb0b56b19017ab5c16c745e6da39c53126924ed6",
        "patch": "@@ -870,8 +870,6 @@ class CDataStream\n     typedef CSerializeData vector_type;\n     vector_type vch;\n     unsigned int nReadPos;\n-    short state;\n-    short exceptmask;\n public:\n     int nType;\n     int nVersion;\n@@ -923,8 +921,6 @@ class CDataStream\n         nReadPos = 0;\n         nType = nTypeIn;\n         nVersion = nVersionIn;\n-        state = 0;\n-        exceptmask = std::ios::badbit | std::ios::failbit;\n     }\n \n     CDataStream& operator+=(const CDataStream& b)\n@@ -1047,19 +1043,7 @@ class CDataStream\n     //\n     // Stream subset\n     //\n-    void setstate(short bits, const char* psz)\n-    {\n-        state |= bits;\n-        if (state & exceptmask)\n-            throw std::ios_base::failure(psz);\n-    }\n-\n     bool eof() const             { return size() == 0; }\n-    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }\n-    bool good() const            { return !eof() && (state == 0); }\n-    void clear(short n)          { state = n; }  // name conflict with vector clear()\n-    short exceptions()           { return exceptmask; }\n-    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, \"CDataStream\"); return prev; }\n     CDataStream* rdbuf()         { return this; }\n     int in_avail()               { return size(); }\n \n@@ -1079,9 +1063,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                setstate(std::ios::failbit, \"CDataStream::read() : end of data\");\n-                memset(pch, 0, nSize);\n-                nSize = vch.size() - nReadPos;\n+                throw std::ios_base::failure(\"CDataStream::read() : end of data\");\n             }\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n@@ -1101,7 +1083,7 @@ class CDataStream\n         if (nReadPosNext >= vch.size())\n         {\n             if (nReadPosNext > vch.size())\n-                setstate(std::ios::failbit, \"CDataStream::ignore() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::ignore() : end of data\");\n             nReadPos = 0;\n             vch.clear();\n             return (*this);\n@@ -1174,8 +1156,6 @@ class CAutoFile\n {\n protected:\n     FILE* file;\n-    short state;\n-    short exceptmask;\n public:\n     int nType;\n     int nVersion;\n@@ -1185,8 +1165,6 @@ class CAutoFile\n         file = filenew;\n         nType = nTypeIn;\n         nVersion = nVersionIn;\n-        state = 0;\n-        exceptmask = std::ios::badbit | std::ios::failbit;\n     }\n \n     ~CAutoFile()\n@@ -1213,19 +1191,6 @@ class CAutoFile\n     //\n     // Stream subset\n     //\n-    void setstate(short bits, const char* psz)\n-    {\n-        state |= bits;\n-        if (state & exceptmask)\n-            throw std::ios_base::failure(psz);\n-    }\n-\n-    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }\n-    bool good() const            { return state == 0; }\n-    void clear(short n = 0)      { state = n; }\n-    short exceptions()           { return exceptmask; }\n-    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, \"CAutoFile\"); return prev; }\n-\n     void SetType(int n)          { nType = n; }\n     int GetType()                { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n@@ -1238,7 +1203,7 @@ class CAutoFile\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            setstate(std::ios::failbit, feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n         return (*this);\n     }\n \n@@ -1247,7 +1212,7 @@ class CAutoFile\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            setstate(std::ios::failbit, \"CAutoFile::write : write failed\");\n+            throw std::ios_base::failure(\"CAutoFile::write : write failed\");\n         return (*this);\n     }\n \n@@ -1292,16 +1257,7 @@ class CBufferedFile\n     uint64_t nRewind;     // how many bytes we guarantee to rewind\n     std::vector<char> vchBuf; // the buffer\n \n-    short state;\n-    short exceptmask;\n-\n protected:\n-    void setstate(short bits, const char *psz) {\n-        state |= bits;\n-        if (state & exceptmask)\n-            throw std::ios_base::failure(psz);\n-    }\n-\n     // read data from the source to fill the buffer\n     bool Fill() {\n         unsigned int pos = nSrcPos % vchBuf.size();\n@@ -1313,8 +1269,7 @@ class CBufferedFile\n             return false;\n         size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n         if (read == 0) {\n-            setstate(std::ios_base::failbit, feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n-            return false;\n+            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n         } else {\n             nSrcPos += read;\n             return true;\n@@ -1327,12 +1282,7 @@ class CBufferedFile\n \n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n         src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n-        state(0), exceptmask(std::ios_base::badbit | std::ios_base::failbit), nType(nTypeIn), nVersion(nVersionIn) {\n-    }\n-\n-    // check whether no error occurred\n-    bool good() const {\n-        return state == 0;\n+        nType(nTypeIn), nVersion(nVersionIn) {\n     }\n \n     // check whether we're at the end of the source file\n@@ -1391,7 +1341,6 @@ class CBufferedFile\n         nLongPos = ftell(src);\n         nSrcPos = nLongPos;\n         nReadPos = nLongPos;\n-        state = 0;\n         return true;\n     }\n "
      },
      {
        "sha": "e3066a51ab9833c9744ec95df64bf35f73776cf5",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb0b56b19017ab5c16c745e6da39c53126924ed6/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb0b56b19017ab5c16c745e6da39c53126924ed6/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=eb0b56b19017ab5c16c745e6da39c53126924ed6",
        "patch": "@@ -83,7 +83,7 @@ struct ReadAlerts\n         std::vector<unsigned char> vch(alert_tests::alertTests, alert_tests::alertTests + sizeof(alert_tests::alertTests));\n         CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n         try {\n-            while (stream.good())\n+            while (!stream.eof())\n             {\n                 CAlert alert;\n                 stream >> alert;"
      }
    ]
  }
]