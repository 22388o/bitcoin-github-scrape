laanwj,2014-08-06T13:26:05Z,Looks good to me. Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51333395,51333395,
jgarzik,2014-08-08T18:03:31Z,ut ACK once memset() comment resolved.\n,https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51636855,51636855,
theuni,2014-08-08T18:23:16Z,"+1 on removing state. Looks like the memset was just used to sanitize the return buffer in the case of a failed read. Anything that relied on that would be quite broken already, but it's worth double-checking if @sipa didn't already.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51639473,51639473,
jgarzik,2014-08-08T18:26:09Z,"@theuni Nod, it looked like ""secure erase"" style exit, warranting further review to ensure we are not accidentally leaking some data on error.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51639839,51639839,
sipa,2014-08-08T23:47:43Z,"Commented on @jgarzik's comments elsewhere (but they seem to have disappeared from the PR discussion).\n- The memset was unreachable code, as it occurs after a setstate that already always throws an exception.\n- Failure on short read is perfectly reasonable IMHO, as it will inevitably lead to failed deserialization.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51669612,51669612,
jgarzik,2014-08-08T23:57:58Z,"@sipa Failure on short read presumes binary, which is not the case if e.g. you are reading text files.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51670088,51670088,
sipa,2014-08-08T23:59:15Z,... our serialization has no text file format.\n,https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51670137,51670137,
jgarzik,2014-08-09T00:20:52Z,"@sipa It is CAutoFile being modified.  That is ""RAII wrapper for FILE_"" and is used outside the network wire protocol and core serialization of data structures.  Both [1] and [2] want to read text files, and using an RAII wrapper for FILE_ is the logical choice.\n\n[1] https://github.com/bitcoin/bitcoin/blob/master/src/bitcoin-tx.cpp#L126\n[2] https://github.com/jgarzik/bitcoin/blob/2014_ext_servi",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51671035,51671035,
sipa,2014-08-09T10:53:54Z,"In that case we should probably separate the RAII wrapper part from\nserialize.h, and just have an additional FIlE\* wrapper for serialization\nthere.\n\nStill, I think those textfile usages are probably better served with native\nc++ file streams rather than using FILE*...\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51683618,51683618,
BitcoinPullTester,2014-08-09T16:01:04Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4618_eb0b56b19017ab5c16c745e6da39c53126924ed6/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51690797,51690797,
laanwj,2014-08-11T13:14:33Z,I'd feel better if that crazy CAutoFile wrapper was phased out eventually. Let's at least not use it for any new things not related to serialization.\n\nTo read and write from text files I'd suggest the use of `ofstream`/`ifstream` as this would be consistent with code to handle text files already in `rpcdump.cpp`.\n,https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-51777819,51777819,
sipa,2014-08-17T12:26:37Z,@jgarzik You consider the memset() issue resolved?\n,https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52420564,52420564,
jgarzik,2014-08-19T02:16:17Z,"@sipa Well, strictly speaking, you are correct.  It is dead code, since at least 0.1.5.\n\nIt seems reasonable to examine the intent behind this, though.  The intent appears to be:\n- If we want more data than is available (overrun), clear the caller-provided buffer.\n\nNaively, a _working_ memset() in this location would seem to be wise security practice, and thus, a minor security bug.  If you t",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52582316,52582316,
sipa,2014-08-19T02:26:41Z,"the intent was emulating c++'s stream interface, which has this\nconfigurable set of exception flags.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52582887,52582887,
jgarzik,2014-08-19T02:30:15Z,"The intent of the memset(), specifically.\n\nACK if you move the memset() before exception throw.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52583106,52583106,
laanwj,2014-08-19T10:12:05Z,The memset makes little sense to me. `pch` points to caller-allocated memory. It's up to the caller to securely erase the passed-in memory before deallocating it - irrespective of whether it ended with an error. Secure erasing the caller's memory is not the responsibility of the serialization system. If it was local state that would otherwise linger around I could understand.\n,https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52614031,52614031,
sipa,2014-08-19T10:25:17Z,"I think the original purpose wasn't security either, but just preventing any short read from returning meaningful data, causing a fast fail if someone would rely on the return value. That's already made impossible by the exception being thrown in the alternative (and so far, always guaranteed) case, what also explains why it's done after the throw.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52615228,52615228,
jgarzik,2014-08-19T14:52:03Z,"@laanwj That logic does not sound applicable/realistic here:  The caller is automatically generated from serialization macros.\n\nRE responsibility, it is good practice to avoid returning garbage when we know it's garbage.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52645682,52645682,
jgarzik,2014-08-20T23:54:20Z,"Well, this is no worse than what we have now...   ut ACK, and this memset() issue can be split from this PR.\n",https://github.com/bitcoin/bitcoin/pull/4618#issuecomment-52861401,52861401,
