[
  {
    "sha": "b184127db2f10c70637ce61ba678efcab0f08a88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTg0MTI3ZGIyZjEwYzcwNjM3Y2U2MWJhNjc4ZWZjYWIwZjA4YTg4",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-20T17:55:22Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-20T17:55:22Z"
      },
      "message": "[doc][trivial] no retargeting in regtest mode",
      "tree": {
        "sha": "6087d7a6115b8d4e2cbe601a1999c694edd2b2e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6087d7a6115b8d4e2cbe601a1999c694edd2b2e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b184127db2f10c70637ce61ba678efcab0f08a88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b184127db2f10c70637ce61ba678efcab0f08a88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b184127db2f10c70637ce61ba678efcab0f08a88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b184127db2f10c70637ce61ba678efcab0f08a88/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b262eb2d80bfa27ae8501078ce47bc1407e9c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b262eb2d80bfa27ae8501078ce47bc1407e9c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b262eb2d80bfa27ae8501078ce47bc1407e9c55"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e6bb8d495bc6d60f7ed8b31c63873b8e845a2668",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b184127db2f10c70637ce61ba678efcab0f08a88/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b184127db2f10c70637ce61ba678efcab0f08a88/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=b184127db2f10c70637ce61ba678efcab0f08a88",
        "patch": "@@ -32,7 +32,7 @@ def create_block(hashprev, coinbase, nTime=None):\n     else:\n         block.nTime = nTime\n     block.hashPrevBlock = hashprev\n-    block.nBits = 0x207fffff # Will break after a difficulty adjustment...\n+    block.nBits = 0x207fffff # difficulty retargeting is disabled in REGTEST chainparams\n     block.vtx.append(coinbase)\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.calc_sha256()\n@@ -86,7 +86,7 @@ def serialize_script_num(value):\n # otherwise an anyone-can-spend output.\n def create_coinbase(height, pubkey = None):\n     coinbase = CTransaction()\n-    coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), \n+    coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff),\n                 ser_string(serialize_script_num(height)), 0xffffffff))\n     coinbaseoutput = CTxOut()\n     coinbaseoutput.nValue = 50 * COIN"
      }
    ]
  },
  {
    "sha": "cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWI4YmU1YWRmZDU3Y2MzZWNkMTJiOGRjMDljOWNmYTgwOTg5NWQ5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-20T18:10:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-20T18:10:12Z"
      },
      "message": "[tests] Fix flake8 warnings in blocktools.py",
      "tree": {
        "sha": "8a96d6ff1b0977c75049fc2edee74308e6543784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a96d6ff1b0977c75049fc2edee74308e6543784"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b184127db2f10c70637ce61ba678efcab0f08a88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b184127db2f10c70637ce61ba678efcab0f08a88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b184127db2f10c70637ce61ba678efcab0f08a88"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 38,
      "deletions": 21
    },
    "files": [
      {
        "sha": "20862412146164d4e672cc0f307587a330a9e772",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 38,
        "deletions": 21,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
        "patch": "@@ -10,7 +10,24 @@\n     script_to_p2sh_p2wsh,\n     script_to_p2wsh,\n )\n-from .mininode import *\n+from .messages import (\n+    CBlock,\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    FromHex,\n+    ToHex,\n+    bytes_to_hex_str,\n+    hash256,\n+    hex_str_to_bytes,\n+    ser_string,\n+    ser_uint256,\n+    sha256,\n+    uint256_from_str,\n+)\n from .script import (\n     CScript,\n     OP_0,\n@@ -24,15 +41,15 @@\n from .util import assert_equal\n \n # Create a block (with regtest difficulty)\n-def create_block(hashprev, coinbase, nTime=None):\n+def create_block(hashprev, coinbase, ntime=None):\n     block = CBlock()\n-    if nTime is None:\n+    if ntime is None:\n         import time\n-        block.nTime = int(time.time()+600)\n+        block.nTime = int(time.time() + 600)\n     else:\n-        block.nTime = nTime\n+        block.nTime = ntime\n     block.hashPrevBlock = hashprev\n-    block.nBits = 0x207fffff # difficulty retargeting is disabled in REGTEST chainparams\n+    block.nBits = 0x207fffff  # difficulty retargeting is disabled in REGTEST chainparams\n     block.vtx.append(coinbase)\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.calc_sha256()\n@@ -43,7 +60,7 @@ def create_block(hashprev, coinbase, nTime=None):\n \n \n def get_witness_script(witness_root, witness_nonce):\n-    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(witness_nonce)))\n+    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n     output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n     return CScript([OP_RETURN, output_data])\n \n@@ -84,52 +101,52 @@ def serialize_script_num(value):\n # Create a coinbase transaction, assuming no miner fees.\n # If pubkey is passed in, the coinbase output will be a P2PK output;\n # otherwise an anyone-can-spend output.\n-def create_coinbase(height, pubkey = None):\n+def create_coinbase(height, pubkey=None):\n     coinbase = CTransaction()\n     coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff),\n-                ser_string(serialize_script_num(height)), 0xffffffff))\n+                        ser_string(serialize_script_num(height)), 0xffffffff))\n     coinbaseoutput = CTxOut()\n     coinbaseoutput.nValue = 50 * COIN\n-    halvings = int(height/150) # regtest\n+    halvings = int(height / 150)  # regtest\n     coinbaseoutput.nValue >>= halvings\n-    if (pubkey != None):\n+    if (pubkey is not None):\n         coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n     else:\n         coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n-    coinbase.vout = [ coinbaseoutput ]\n+    coinbase.vout = [coinbaseoutput]\n     coinbase.calc_sha256()\n     return coinbase\n \n # Create a transaction.\n-# If the scriptPubKey is not specified, make it anyone-can-spend.\n-def create_transaction(prevtx, n, sig, value, scriptPubKey=CScript()):\n+# If the script_pub_key is not specified, make it anyone-can-spend.\n+def create_transaction(prevtx, n, sig, value, script_pub_key=CScript()):\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))\n     tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n-    tx.vout.append(CTxOut(value, scriptPubKey))\n+    tx.vout.append(CTxOut(value, script_pub_key))\n     tx.calc_sha256()\n     return tx\n \n-def get_legacy_sigopcount_block(block, fAccurate=True):\n+def get_legacy_sigopcount_block(block, accurate=True):\n     count = 0\n     for tx in block.vtx:\n-        count += get_legacy_sigopcount_tx(tx, fAccurate)\n+        count += get_legacy_sigopcount_tx(tx, accurate)\n     return count\n \n-def get_legacy_sigopcount_tx(tx, fAccurate=True):\n+def get_legacy_sigopcount_tx(tx, accurate=True):\n     count = 0\n     for i in tx.vout:\n-        count += i.scriptPubKey.GetSigOpCount(fAccurate)\n+        count += i.scriptPubKey.GetSigOpCount(accurate)\n     for j in tx.vin:\n         # scriptSig might be of type bytes, so convert to CScript for the moment\n-        count += CScript(j.scriptSig).GetSigOpCount(fAccurate)\n+        count += CScript(j.scriptSig).GetSigOpCount(accurate)\n     return count\n \n # Create a scriptPubKey corresponding to either a P2WPKH output for the\n # given pubkey, or a P2WSH output of a 1-of-1 multisig for the given\n # pubkey. Returns the hex encoding of the scriptPubKey.\n def witness_script(use_p2wsh, pubkey):\n-    if (use_p2wsh == False):\n+    if not use_p2wsh:\n         # P2WPKH instead\n         pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n         pkscript = CScript([OP_0, pubkeyhash])"
      }
    ]
  },
  {
    "sha": "4d355bfb2bad72f9d33212de6f3483e0ce6493ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDM1NWJmYjJiYWQ3MmY5ZDMzMjEyZGU2ZjM0ODNlMGNlNjQ5M2Fl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-20T18:16:57Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-20T18:16:57Z"
      },
      "message": "[tests] tidy up blocktools.py\n\nMoves function comments to docstrings, and moves the module-level\nconstant to the top of the file.",
      "tree": {
        "sha": "7b5ccc90afc765d1286acefab865296683486d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b5ccc90afc765d1286acefab865296683486d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d355bfb2bad72f9d33212de6f3483e0ce6493ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d355bfb2bad72f9d33212de6f3483e0ce6493ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d355bfb2bad72f9d33212de6f3483e0ce6493ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d355bfb2bad72f9d33212de6f3483e0ce6493ae/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cab8be5adfd57cc3ecd12b8dc09c9cfa809895d9"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 29,
      "deletions": 24
    },
    "files": [
      {
        "sha": "5c2b1815e551784cda213f0fe51cdbe506f701cd",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 29,
        "deletions": 24,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d355bfb2bad72f9d33212de6f3483e0ce6493ae/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d355bfb2bad72f9d33212de6f3483e0ce6493ae/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=4d355bfb2bad72f9d33212de6f3483e0ce6493ae",
        "patch": "@@ -40,8 +40,11 @@\n )\n from .util import assert_equal\n \n-# Create a block (with regtest difficulty)\n+# From BIP141\n+WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n+\n def create_block(hashprev, coinbase, ntime=None):\n+    \"\"\"Create a block (with regtest difficulty).\"\"\"\n     block = CBlock()\n     if ntime is None:\n         import time\n@@ -55,19 +58,16 @@ def create_block(hashprev, coinbase, ntime=None):\n     block.calc_sha256()\n     return block\n \n-# From BIP141\n-WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n-\n-\n def get_witness_script(witness_root, witness_nonce):\n     witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n     output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n     return CScript([OP_RETURN, output_data])\n \n-\n-# According to BIP141, blocks with witness rules active must commit to the\n-# hash of all in-block transactions including witness.\n def add_witness_commitment(block, nonce=0):\n+    \"\"\"Add a witness commitment to the block's coinbase transaction.\n+\n+    According to BIP141, blocks with witness rules active must commit to the\n+    hash of all in-block transactions including witness.\"\"\"\n     # First calculate the merkle root of the block's\n     # transactions, with witnesses.\n     witness_nonce = nonce\n@@ -82,7 +82,6 @@ def add_witness_commitment(block, nonce=0):\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.rehash()\n \n-\n def serialize_script_num(value):\n     r = bytearray(0)\n     if value == 0:\n@@ -98,10 +97,11 @@ def serialize_script_num(value):\n         r[-1] |= 0x80\n     return r\n \n-# Create a coinbase transaction, assuming no miner fees.\n-# If pubkey is passed in, the coinbase output will be a P2PK output;\n-# otherwise an anyone-can-spend output.\n def create_coinbase(height, pubkey=None):\n+    \"\"\"Create a coinbase transaction, assuming no miner fees.\n+\n+    If pubkey is passed in, the coinbase output will be a P2PK output;\n+    otherwise an anyone-can-spend output.\"\"\"\n     coinbase = CTransaction()\n     coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff),\n                         ser_string(serialize_script_num(height)), 0xffffffff))\n@@ -117,9 +117,10 @@ def create_coinbase(height, pubkey=None):\n     coinbase.calc_sha256()\n     return coinbase\n \n-# Create a transaction.\n-# If the script_pub_key is not specified, make it anyone-can-spend.\n def create_transaction(prevtx, n, sig, value, script_pub_key=CScript()):\n+    \"\"\"Create a transaction.\n+\n+    If the script_pub_key is not specified, make it anyone-can-spend.\"\"\"\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))\n     tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n@@ -142,10 +143,12 @@ def get_legacy_sigopcount_tx(tx, accurate=True):\n         count += CScript(j.scriptSig).GetSigOpCount(accurate)\n     return count\n \n-# Create a scriptPubKey corresponding to either a P2WPKH output for the\n-# given pubkey, or a P2WSH output of a 1-of-1 multisig for the given\n-# pubkey. Returns the hex encoding of the scriptPubKey.\n def witness_script(use_p2wsh, pubkey):\n+    \"\"\"Create a scriptPubKey for a pay-to-wtiness TxOut.\n+\n+    This is either a P2WPKH output for the given pubkey, or a P2WSH output of a\n+    1-of-1 multisig for the given pubkey. Returns the hex encoding of the\n+    scriptPubKey.\"\"\"\n     if not use_p2wsh:\n         # P2WPKH instead\n         pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n@@ -157,9 +160,10 @@ def witness_script(use_p2wsh, pubkey):\n         pkscript = CScript([OP_0, scripthash])\n     return bytes_to_hex_str(pkscript)\n \n-# Return a transaction (in hex) that spends the given utxo to a segwit output,\n-# optionally wrapping the segwit output using P2SH.\n def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n+    \"\"\"Return a transaction (in hex) that spends the given utxo to a segwit output.\n+\n+    Optionally wrap the segwit output using P2SH.\"\"\"\n     if use_p2wsh:\n         program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n         addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n@@ -169,12 +173,13 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n         assert_equal(node.getaddressinfo(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n     return node.createrawtransaction([utxo], {addr: amount})\n \n-# Create a transaction spending a given utxo to a segwit output corresponding\n-# to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n-# encode_p2sh determines whether to wrap in P2SH.\n-# sign=True will have the given node sign the transaction.\n-# insert_redeem_script will be added to the scriptSig, if given.\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n+    \"\"\"Create a transaction spending a given utxo to a segwit output.\n+\n+    The output corresponds to the given pubkey: use_p2wsh determines whether to\n+    use P2WPKH or P2WSH; encode_p2sh determines whether to wrap in P2SH.\n+    sign=True will have the given node sign the transaction.\n+    insert_redeem_script will be added to the scriptSig, if given.\"\"\"\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransactionwithwallet(tx_to_witness)"
      }
    ]
  }
]