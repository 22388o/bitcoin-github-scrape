[
  {
    "sha": "76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmE5YWFjZDNmYjc1ZDVlMDg1NGU1M2JiMzM3NmYyYWI2MDNhNTYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T23:43:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-21T21:17:18Z"
      },
      "message": "Move compressor utility functions out of class",
      "tree": {
        "sha": "098a1a72743a8453e78b7020fb74cdb1f4d3b038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/098a1a72743a8453e78b7020fb74cdb1f4d3b038"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2405ce1df043f778b8efb9205009500cbc17313a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2405ce1df043f778b8efb9205009500cbc17313a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2405ce1df043f778b8efb9205009500cbc17313a"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 33,
      "deletions": 36
    },
    "files": [
      {
        "sha": "da639a01af40d840a51557a05d0846d6a6c16e02",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 11,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
        "patch": "@@ -9,7 +9,15 @@\n #include <pubkey.h>\n #include <script/standard.h>\n \n-bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n+/*\n+ * These check for scripts for which a special case with a shorter encoding is defined.\n+ * They are implemented separately from the CScript test, as these test for exact byte\n+ * sequence correspondences, and are more strict. For example, IsToPubKey also verifies\n+ * whether the public key is valid (as invalid ones cannot be represented in compressed\n+ * form).\n+ */\n+\n+static bool IsToKeyID(const CScript& script, CKeyID &hash)\n {\n     if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160\n                             && script[2] == 20 && script[23] == OP_EQUALVERIFY\n@@ -20,7 +28,7 @@ bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n     return false;\n }\n \n-bool CScriptCompressor::IsToScriptID(CScriptID &hash) const\n+static bool IsToScriptID(const CScript& script, CScriptID &hash)\n {\n     if (script.size() == 23 && script[0] == OP_HASH160 && script[1] == 20\n                             && script[22] == OP_EQUAL) {\n@@ -30,7 +38,7 @@ bool CScriptCompressor::IsToScriptID(CScriptID &hash) const\n     return false;\n }\n \n-bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const\n+static bool IsToPubKey(const CScript& script, CPubKey &pubkey)\n {\n     if (script.size() == 35 && script[0] == 33 && script[34] == OP_CHECKSIG\n                             && (script[1] == 0x02 || script[1] == 0x03)) {\n@@ -45,24 +53,24 @@ bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const\n     return false;\n }\n \n-bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const\n+bool CompressScript(const CScript& script, std::vector<unsigned char> &out)\n {\n     CKeyID keyID;\n-    if (IsToKeyID(keyID)) {\n+    if (IsToKeyID(script, keyID)) {\n         out.resize(21);\n         out[0] = 0x00;\n         memcpy(&out[1], &keyID, 20);\n         return true;\n     }\n     CScriptID scriptID;\n-    if (IsToScriptID(scriptID)) {\n+    if (IsToScriptID(script, scriptID)) {\n         out.resize(21);\n         out[0] = 0x01;\n         memcpy(&out[1], &scriptID, 20);\n         return true;\n     }\n     CPubKey pubkey;\n-    if (IsToPubKey(pubkey)) {\n+    if (IsToPubKey(script, pubkey)) {\n         out.resize(33);\n         memcpy(&out[1], &pubkey[1], 32);\n         if (pubkey[0] == 0x02 || pubkey[0] == 0x03) {\n@@ -76,7 +84,7 @@ bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const\n     return false;\n }\n \n-unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const\n+unsigned int GetSpecialScriptSize(unsigned int nSize)\n {\n     if (nSize == 0 || nSize == 1)\n         return 20;\n@@ -85,7 +93,7 @@ unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const\n     return 0;\n }\n \n-bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigned char> &in)\n+bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &in)\n {\n     switch(nSize) {\n     case 0x00:\n@@ -139,7 +147,7 @@ bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigne\n // * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n // (this is decodable, as d is in [1-9] and e is in [0-9])\n \n-uint64_t CTxOutCompressor::CompressAmount(uint64_t n)\n+uint64_t CompressAmount(uint64_t n)\n {\n     if (n == 0)\n         return 0;\n@@ -158,7 +166,7 @@ uint64_t CTxOutCompressor::CompressAmount(uint64_t n)\n     }\n }\n \n-uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)\n+uint64_t DecompressAmount(uint64_t x)\n {\n     // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n     if (x == 0)"
      },
      {
        "sha": "561c8e66d0d3740dcb458df0b7e0de4033a2ee6e",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 10,
        "deletions": 21,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
        "patch": "@@ -14,6 +14,13 @@ class CKeyID;\n class CPubKey;\n class CScriptID;\n \n+bool CompressScript(const CScript& script, std::vector<unsigned char> &out);\n+unsigned int GetSpecialScriptSize(unsigned int nSize);\n+bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &out);\n+\n+uint64_t CompressAmount(uint64_t nAmount);\n+uint64_t DecompressAmount(uint64_t nAmount);\n+\n /** Compact serializer for scripts.\n  *\n  *  It detects common cases and encodes them much more efficiently.\n@@ -37,28 +44,13 @@ class CScriptCompressor\n     static const unsigned int nSpecialScripts = 6;\n \n     CScript &script;\n-protected:\n-    /**\n-     * These check for scripts for which a special case with a shorter encoding is defined.\n-     * They are implemented separately from the CScript test, as these test for exact byte\n-     * sequence correspondences, and are more strict. For example, IsToPubKey also verifies\n-     * whether the public key is valid (as invalid ones cannot be represented in compressed\n-     * form).\n-     */\n-    bool IsToKeyID(CKeyID &hash) const;\n-    bool IsToScriptID(CScriptID &hash) const;\n-    bool IsToPubKey(CPubKey &pubkey) const;\n-\n-    bool Compress(std::vector<unsigned char> &out) const;\n-    unsigned int GetSpecialSize(unsigned int nSize) const;\n-    bool Decompress(unsigned int nSize, const std::vector<unsigned char> &out);\n public:\n     explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n         std::vector<unsigned char> compr;\n-        if (Compress(compr)) {\n+        if (CompressScript(script, compr)) {\n             s << CFlatData(compr);\n             return;\n         }\n@@ -72,9 +64,9 @@ class CScriptCompressor\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialSize(nSize), 0x00);\n+            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n             s >> CFlatData(vch);\n-            Decompress(nSize, vch);\n+            DecompressScript(script, nSize, vch);\n             return;\n         }\n         nSize -= nSpecialScripts;\n@@ -96,9 +88,6 @@ class CTxOutCompressor\n     CTxOut &txout;\n \n public:\n-    static uint64_t CompressAmount(uint64_t nAmount);\n-    static uint64_t DecompressAmount(uint64_t nAmount);\n-\n     explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n \n     ADD_SERIALIZE_METHODS;"
      },
      {
        "sha": "127cc154df5f04da54a6ac1d7fc8f49b9971f3d3",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76a9aacd3fb75d5e0854e53bb3376f2ab603a561/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=76a9aacd3fb75d5e0854e53bb3376f2ab603a561",
        "patch": "@@ -25,16 +25,16 @@\n BOOST_FIXTURE_TEST_SUITE(compress_tests, BasicTestingSetup)\n \n bool static TestEncode(uint64_t in) {\n-    return in == CTxOutCompressor::DecompressAmount(CTxOutCompressor::CompressAmount(in));\n+    return in == DecompressAmount(CompressAmount(in));\n }\n \n bool static TestDecode(uint64_t in) {\n-    return in == CTxOutCompressor::CompressAmount(CTxOutCompressor::DecompressAmount(in));\n+    return in == CompressAmount(DecompressAmount(in));\n }\n \n bool static TestPair(uint64_t dec, uint64_t enc) {\n-    return CTxOutCompressor::CompressAmount(dec) == enc &&\n-           CTxOutCompressor::DecompressAmount(enc) == dec;\n+    return CompressAmount(dec) == enc &&\n+           DecompressAmount(enc) == dec;\n }\n \n BOOST_AUTO_TEST_CASE(compress_amounts)"
      }
    ]
  }
]