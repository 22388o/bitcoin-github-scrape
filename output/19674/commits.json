[
  {
    "sha": "dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWM3YTExMWJkZDNiMDIzM2Q5NGNmNjhkYWU3YThiZmM2YWM5YzY0",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-02T23:10:56Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-06T16:39:33Z"
      },
      "message": "refactor: test: use _ variable for unused loop counters\n\nsubstitutes \"for x in range(N):\" by \"for _ in range(N):\"\nindicates to the reader that a block is just repeated N times, and\nthat the loop counter is not used in the body",
      "tree": {
        "sha": "c3ae6f8e52eade778dff7c9ad679a919db22778b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3ae6f8e52eade778dff7c9ad679a919db22778b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82127d27c9001eee3eb28df67ce2e6eace620423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82127d27c9001eee3eb28df67ce2e6eace620423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82127d27c9001eee3eb28df67ce2e6eace620423"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 83,
      "deletions": 83
    },
    "files": [
      {
        "sha": "34e49993295c145b3a100e1d8f9501516f66c41c",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -166,7 +166,7 @@ def run_test(self):\n \n         height = self.nodes[0].getblockcount()\n \n-        for i in range(10):\n+        for _ in range(10):\n             # Use the mininode and blocktools functionality to manually build a block\n             # Calling the generate() rpc is easier, but this allows us to exactly\n             # control the blocks and transactions."
      },
      {
        "sha": "f19ee12f959993eaa3a2d875afdbc9bd6c2e9159",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -123,7 +123,7 @@ def run_test(self):\n         height += 1\n \n         # Bury the block 100 deep so the coinbase output is spendable\n-        for i in range(100):\n+        for _ in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.blocks.append(block)\n@@ -149,7 +149,7 @@ def run_test(self):\n         height += 1\n \n         # Bury the assumed valid block 2100 deep\n-        for i in range(2100):\n+        for _ in range(2100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.nVersion = 4\n             block.solve()"
      },
      {
        "sha": "1253c45418c629236fee271ab7d1cb9b19407b46",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -141,7 +141,7 @@ def test_sequence_lock_confirmed_inputs(self):\n         # some of those inputs to be sequence locked (and randomly choose\n         # between height/time locking). Small random chance of making the locks\n         # all pass.\n-        for i in range(400):\n+        for _ in range(400):\n             # Randomly choose up to 10 inputs\n             num_inputs = random.randint(1, 10)\n             random.shuffle(utxos)\n@@ -260,7 +260,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Use prioritisetransaction to lower the effective feerate to 0\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n         cur_time = int(time.time())\n-        for i in range(10):\n+        for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.nodes[0].generate(1)\n             cur_time += 600"
      },
      {
        "sha": "c74761869b52a9afd00dc0e8202c4e1f22a5ff74",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -125,7 +125,7 @@ def run_test(self):\n \n         # collect spendable outputs now to avoid cluttering the code later on\n         out = []\n-        for i in range(NUM_OUTPUTS_TO_COLLECT):\n+        for _ in range(NUM_OUTPUTS_TO_COLLECT):\n             out.append(self.get_spendable_output())\n \n         # Start by building a couple of blocks on top (which output is spent is"
      },
      {
        "sha": "dfb3683143e12442ca646870b724070bc6a12b5b",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -161,7 +161,7 @@ def skip_test_if_missing_module(self):\n \n     def generate_blocks(self, number):\n         test_blocks = []\n-        for i in range(number):\n+        for _ in range(number):\n             block = self.create_test_block([])\n             test_blocks.append(block)\n             self.last_block_time += 600\n@@ -209,22 +209,22 @@ def run_test(self):\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n         bip68inputs = []\n-        for i in range(16):\n+        for _ in range(16):\n             bip68inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n \n         # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112basicinputs = []\n-        for j in range(2):\n+        for _ in range(2):\n             inputs = []\n-            for i in range(16):\n+            for _ in range(16):\n                 inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n             bip112basicinputs.append(inputs)\n \n         # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112diverseinputs = []\n-        for j in range(2):\n+        for _ in range(2):\n             inputs = []\n-            for i in range(16):\n+            for _ in range(16):\n                 inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n             bip112diverseinputs.append(inputs)\n "
      },
      {
        "sha": "7a2e35c0959f0267db9d8622a284a6fdbb2b3f67",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -195,7 +195,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n         while len(utxo_list) >= 2 and num_transactions < count:\n             tx = CTransaction()\n             input_amount = 0\n-            for i in range(2):\n+            for _ in range(2):\n                 utxo = utxo_list.pop()\n                 tx.vin.append(CTxIn(COutPoint(int(utxo['txid'], 16), utxo['vout'])))\n                 input_amount += int(utxo['amount'] * COIN)\n@@ -205,7 +205,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 # Sanity check -- if we chose inputs that are too small, skip\n                 continue\n \n-            for i in range(3):\n+            for _ in range(3):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool"
      },
      {
        "sha": "702a1d99953fb2791eee5f83c727cf4dabf3493c",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -176,9 +176,9 @@ def transact_and_mine(self, numblocks, mining_node):\n         # We shuffle our confirmed txout set before each set of transactions\n         # small_txpuzzle_randfee will use the transactions that have inputs already in the chain when possible\n         # resorting to tx's that depend on the mempool when those run out\n-        for i in range(numblocks):\n+        for _ in range(numblocks):\n             random.shuffle(self.confutxo)\n-            for j in range(random.randrange(100 - 50, 100 + 50)):\n+            for _ in range(random.randrange(100 - 50, 100 + 50)):\n                 from_index = random.randint(1, 2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n@@ -243,7 +243,7 @@ def run_test(self):\n         self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n-        for i in range(2):\n+        for _ in range(2):\n             self.log.info(\"Creating transactions and mining them with a block size that can't keep up\")\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])"
      },
      {
        "sha": "0dc2839191be156db19d2c17782a2910eefb1cc7",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -104,7 +104,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[0].getpeerinfo()), 3)\n         # At most a couple more tries should succeed (depending on how long\n         # the test has been running so far).\n-        for i in range(3):\n+        for _ in range(3):\n             p2p_conns[0].send_message(getdata_request)\n         p2p_conns[0].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)"
      },
      {
        "sha": "02fa88f7c89e971ca3b8b283e1af2496cacd6573",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -147,7 +147,7 @@ def create_chain_with_staleblocks(self):\n         # Create stale blocks in manageable sized chunks\n         self.log.info(\"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\")\n \n-        for j in range(12):\n+        for _ in range(12):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             disconnect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "1b531ad51d82d62c98b041b7177db499751cbc6d",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -376,7 +376,7 @@ def test_too_many_replacements(self):\n         split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n \n         outputs = []\n-        for i in range(MAX_REPLACEMENT_LIMIT+1):\n+        for _ in range(MAX_REPLACEMENT_LIMIT+1):\n             outputs.append(CTxOut(split_value, CScript([1])))\n \n         splitting_tx = CTransaction()"
      },
      {
        "sha": "0842972779121817619572391cc9d96839080f21",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -126,11 +126,11 @@ def run_test(self):\n             assert_equal(bip173_ms_addr, script_to_p2wsh(multiscript))\n             p2sh_ids.append([])\n             wit_ids.append([])\n-            for v in range(2):\n+            for _ in range(2):\n                 p2sh_ids[i].append([])\n                 wit_ids[i].append([])\n \n-        for i in range(5):\n+        for _ in range(5):\n             for n in range(3):\n                 for v in range(2):\n                     wit_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], False, Decimal(\"49.999\")))"
      },
      {
        "sha": "e956fe07d2675ba093c3ae854bee0b6222ad9e2b",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -31,7 +31,7 @@ def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n         for (txid, vout) in zip(parent_txids, vouts):\n             inputs.append({'txid' : txid, 'vout' : vout})\n         outputs = {}\n-        for i in range(num_outputs):\n+        for _ in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs, 0, True)\n         signedtx = node.signrawtransactionwithwallet(rawtx)"
      },
      {
        "sha": "98dac30ace8637937877fd34145e8f738eda73e3",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -48,7 +48,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         send_value = satoshi_round((value - fee)/num_outputs)\n         inputs = [ {'txid' : parent_txid, 'vout' : vout} ]\n         outputs = {}\n-        for i in range(num_outputs):\n+        for _ in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signedtx = node.signrawtransactionwithwallet(rawtx)\n@@ -70,7 +70,7 @@ def run_test(self):\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n         witness_chain = []\n-        for i in range(MAX_ANCESTORS):\n+        for _ in range(MAX_ANCESTORS):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, 0, value, fee, 1)\n             value = sent_value\n             chain.append(txid)\n@@ -245,7 +245,7 @@ def run_test(self):\n \n         # Sign and send up to MAX_DESCENDANT transactions chained off the parent tx\n         chain = [] # save sent txs for the purpose of checking node1's mempool later (see below)\n-        for i in range(MAX_DESCENDANTS - 1):\n+        for _ in range(MAX_DESCENDANTS - 1):\n             utxo = transaction_package.pop(0)\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n             chain.append(txid)\n@@ -312,7 +312,7 @@ def run_test(self):\n         send_value = satoshi_round((value - fee)/2)\n         inputs = [ {'txid' : txid, 'vout' : vout} ]\n         outputs = {}\n-        for i in range(2):\n+        for _ in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n@@ -326,7 +326,7 @@ def run_test(self):\n         # Create tx2-7\n         vout = 1\n         txid = tx0_id\n-        for i in range(6):\n+        for _ in range(6):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n             vout = 0\n             value = sent_value"
      },
      {
        "sha": "85c4d6d5707a10dc1c5c3a2c827011a1b8890cd1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -62,7 +62,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         self.log.debug(\"Send 5 transactions from node2 (to its own address)\")\n         tx_creation_time_lower = int(time.time())\n-        for i in range(5):\n+        for _ in range(5):\n             last_txid = self.nodes[2].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"10\"))\n         node2_balance = self.nodes[2].getbalance()\n         self.sync_all()"
      },
      {
        "sha": "8baf974a0a7c9260127090c12ad9532d7c3debae",
        "filename": "test/functional/mempool_updatefromblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_updatefromblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/mempool_updatefromblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_updatefromblock.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -73,7 +73,7 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n                 n_outputs = size - tx_count\n                 output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n                 outputs = {}\n-                for n in range(0, n_outputs):\n+                for _ in range(n_outputs):\n                     outputs[self.nodes[0].getnewaddress()] = output_value\n             else:\n                 output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))"
      },
      {
        "sha": "71457ba988ca340bd550ac9e9104ae9232285977",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -125,7 +125,7 @@ def make_utxos(self):\n         out_value = total_value // 10\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(block.vtx[0].sha256, 0), b''))\n-        for i in range(10):\n+        for _ in range(10):\n             tx.vout.append(CTxOut(out_value, CScript([OP_TRUE])))\n         tx.rehash()\n \n@@ -266,7 +266,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         address = node.getnewaddress()\n \n         segwit_tx_generated = False\n-        for i in range(num_transactions):\n+        for _ in range(num_transactions):\n             txid = node.sendtoaddress(address, 0.1)\n             hex_tx = node.gettransaction(txid)[\"hex\"]\n             tx = FromHex(CTransaction(), hex_tx)\n@@ -418,7 +418,7 @@ def test_compactblock_requests(self, test_node, segwit=True):\n     def build_block_with_transactions(self, node, utxo, num_transactions):\n         block = self.build_block_on_tip(node)\n \n-        for i in range(num_transactions):\n+        for _ in range(num_transactions):\n             tx = CTransaction()\n             tx.vin.append(CTxIn(COutPoint(utxo[0], utxo[1]), b''))\n             tx.vout.append(CTxOut(utxo[2] - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n@@ -627,7 +627,7 @@ def test_compactblocks_not_at_tip(self, test_node):\n         # Test that requesting old compactblocks doesn't work.\n         MAX_CMPCTBLOCK_DEPTH = 5\n         new_blocks = []\n-        for i in range(MAX_CMPCTBLOCK_DEPTH + 1):\n+        for _ in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n             wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)"
      },
      {
        "sha": "0b51d8f4bb85e0ff63d602a14b6ee6ad527a3066",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -19,7 +19,7 @@ def hashToHex(hash):\n \n # Wait up to 60 secs to see if the testnode has received all the expected invs\n def allInvsMatch(invsExpected, testnode):\n-    for x in range(60):\n+    for _ in range(60):\n         with mininode_lock:\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n                 return True\n@@ -91,7 +91,7 @@ def test_feefilter(self):\n         # Test that invs are received by test connection for all txs at\n         # feerate of .2 sat/byte\n         node1.settxfee(Decimal(\"0.00000200\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         assert allInvsMatch(txids, conn)\n         conn.clear_invs()\n \n@@ -100,14 +100,14 @@ def test_feefilter(self):\n \n         # Test that txs are still being received by test connection (paying .15 sat/byte)\n         node1.settxfee(Decimal(\"0.00000150\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         assert allInvsMatch(txids, conn)\n         conn.clear_invs()\n \n         # Change tx fee rate to .1 sat/byte and test they are no longer received\n         # by the test connection\n         node1.settxfee(Decimal(\"0.00000100\"))\n-        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         self.sync_mempools()  # must be sure node 0 has received all txs\n \n         # Send one transaction from node0 that should be received, so that we\n@@ -124,7 +124,7 @@ def test_feefilter(self):\n \n         # Remove fee filter and check that txs are received again\n         conn.send_and_ping(msg_feefilter(0))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         assert allInvsMatch(txids, conn)\n         conn.clear_invs()\n "
      },
      {
        "sha": "d70c32d8f30f3193b65bf28c9a7c8136c33faa44",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -942,7 +942,7 @@ def test_witness_block_size(self):\n         parent_tx = CTransaction()\n         parent_tx.vin.append(CTxIn(prevout, b\"\"))\n         child_value = int(value / NUM_OUTPUTS)\n-        for i in range(NUM_OUTPUTS):\n+        for _ in range(NUM_OUTPUTS):\n             parent_tx.vout.append(CTxOut(child_value, script_pubkey))\n         parent_tx.vout[0].nValue -= 50000\n         assert parent_tx.vout[0].nValue > 0\n@@ -952,7 +952,7 @@ def test_witness_block_size(self):\n         for i in range(NUM_OUTPUTS):\n             child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n         child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n-        for i in range(NUM_OUTPUTS):\n+        for _ in range(NUM_OUTPUTS):\n             child_tx.wit.vtxinwit.append(CTxInWitness())\n             child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a' * 195] * (2 * NUM_DROPS) + [witness_program]\n         child_tx.rehash()\n@@ -1199,7 +1199,7 @@ def test_witness_input_length(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         value = self.utxo[0].nValue\n-        for i in range(10):\n+        for _ in range(10):\n             tx.vout.append(CTxOut(int(value / 10), script_pubkey))\n         tx.vout[0].nValue -= 1000\n         assert tx.vout[0].nValue >= 0\n@@ -1372,7 +1372,7 @@ def test_segwit_versions(self):\n             tx = CTransaction()\n             tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n             split_value = (self.utxo[0].nValue - 4000) // NUM_SEGWIT_VERSIONS\n-            for i in range(NUM_SEGWIT_VERSIONS):\n+            for _ in range(NUM_SEGWIT_VERSIONS):\n                 tx.vout.append(CTxOut(split_value, CScript([OP_TRUE])))\n             tx.rehash()\n             block = self.build_next_block()\n@@ -1646,7 +1646,7 @@ def test_signature_version_1(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n         split_value = prev_utxo.nValue // NUM_SIGHASH_TESTS\n-        for i in range(NUM_SIGHASH_TESTS):\n+        for _ in range(NUM_SIGHASH_TESTS):\n             tx.vout.append(CTxOut(split_value, script_pubkey))\n         tx.wit.vtxinwit.append(CTxInWitness())\n         sign_p2pk_witness_input(witness_program, tx, 0, SIGHASH_ALL, prev_utxo.nValue, key)\n@@ -1676,7 +1676,7 @@ def test_signature_version_1(self):\n                 tx.wit.vtxinwit.append(CTxInWitness())\n                 total_value += temp_utxos[i].nValue\n             split_value = total_value // num_outputs\n-            for i in range(num_outputs):\n+            for _ in range(num_outputs):\n                 tx.vout.append(CTxOut(split_value, script_pubkey))\n             for i in range(num_inputs):\n                 # Now try to sign each input, using a random hashtype.\n@@ -1974,7 +1974,7 @@ def test_witness_sigops(self):\n         split_value = self.utxo[0].nValue // outputs\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n-        for i in range(outputs):\n+        for _ in range(outputs):\n             tx.vout.append(CTxOut(split_value, script_pubkey))\n         tx.vout[-2].scriptPubKey = script_pubkey_toomany\n         tx.vout[-1].scriptPubKey = script_pubkey_justright\n@@ -2060,7 +2060,7 @@ def serialize_with_bogus_witness(tx):\n                 if (len(tx.wit.vtxinwit) != len(tx.vin)):\n                     # vtxinwit must have the same length as vin\n                     tx.wit.vtxinwit = tx.wit.vtxinwit[:len(tx.vin)]\n-                    for i in range(len(tx.wit.vtxinwit), len(tx.vin)):\n+                    for _ in range(len(tx.wit.vtxinwit), len(tx.vin)):\n                         tx.wit.vtxinwit.append(CTxInWitness())\n                 r += tx.wit.serialize()\n             r += struct.pack(\"<I\", tx.nLockTime)"
      },
      {
        "sha": "126a46bd5378be2c5d308c3e6031149aa7920471",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -328,7 +328,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             for j in range(2):\n                 self.log.debug(\"Part 2.{}.{}: starting...\".format(i, j))\n                 blocks = []\n-                for b in range(i + 1):\n+                for _ in range(i + 1):\n                     blocks.append(create_block(tip, create_coinbase(height), block_time))\n                     blocks[-1].solve()\n                     tip = blocks[-1].sha256\n@@ -443,7 +443,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         # Create 2 blocks.  Send the blocks, then send the headers.\n         blocks = []\n-        for b in range(2):\n+        for _ in range(2):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -461,7 +461,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         # This time, direct fetch should work\n         blocks = []\n-        for b in range(3):\n+        for _ in range(3):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -482,7 +482,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         blocks = []\n \n         # Create extra blocks for later\n-        for b in range(20):\n+        for _ in range(20):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -529,7 +529,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n             test_node.last_message.pop(\"getdata\", None)\n             blocks = []\n             # Create two more blocks.\n-            for j in range(2):\n+            for _ in range(2):\n                 blocks.append(create_block(tip, create_coinbase(height), block_time))\n                 blocks[-1].solve()\n                 tip = blocks[-1].sha256\n@@ -550,7 +550,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # Now we test that if we repeatedly don't send connecting headers, we\n         # don't go into an infinite loop trying to get them to connect.\n         MAX_UNCONNECTING_HEADERS = 10\n-        for j in range(MAX_UNCONNECTING_HEADERS + 1):\n+        for _ in range(MAX_UNCONNECTING_HEADERS + 1):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256"
      },
      {
        "sha": "3ea1c6e5e7f2c273527c77019e5506c9c6129ced",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -162,7 +162,7 @@ def run_test(self):\n         # Setup the p2p connections\n         self.peers = []\n         for node in self.nodes:\n-            for i in range(NUM_INBOUND):\n+            for _ in range(NUM_INBOUND):\n                 self.peers.append(node.add_p2p_connection(TestP2PConn()))\n \n         self.log.info(\"Nodes are setup with {} incoming connections each\".format(NUM_INBOUND))"
      },
      {
        "sha": "2a0971b808933ad33a33811139e550940f9ce5f4",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -554,7 +554,7 @@ def test_many_inputs_fee(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        for i in range(0,20):\n+        for _ in range(20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -582,7 +582,7 @@ def test_many_inputs_send(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        for i in range(0,20):\n+        for _ in range(20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.nodes[0].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "08ff0fba50f5ffe44df41dfe2daea0e1e7113495",
        "filename": "test/functional/rpc_generateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/rpc_generateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/rpc_generateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generateblock.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -55,7 +55,7 @@ def run_test(self):\n         node.generatetoaddress(110, address)\n \n         # Generate some extra mempool transactions to verify they don't get mined\n-        for i in range(10):\n+        for _ in range(10):\n             node.sendtoaddress(address, 0.001)\n \n         self.log.info('Generate block with txid')"
      },
      {
        "sha": "f7f23bc8f42c53028d1eef818bb2bcf39dc2c0a5",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -430,7 +430,7 @@ def test_psbt_input_keys(psbt_input, keys):\n         # Check that joining shuffles the inputs and outputs\n         # 10 attempts should be enough to get a shuffled join\n         shuffled = False\n-        for i in range(0, 10):\n+        for _ in range(10):\n             shuffled_joined = self.nodes[0].joinpsbts([psbt, psbt2])\n             shuffled |= joined != shuffled_joined\n             if shuffled:"
      },
      {
        "sha": "da956a94ded6aef05743cb45c1823e10f37c27a5",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -111,7 +111,7 @@ def deser_uint256(f):\n \n def ser_uint256(u):\n     rs = b\"\"\n-    for i in range(8):\n+    for _ in range(8):\n         rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n         u >>= 32\n     return rs\n@@ -134,7 +134,7 @@ def uint256_from_compact(c):\n def deser_vector(f, c):\n     nit = deser_compact_size(f)\n     r = []\n-    for i in range(nit):\n+    for _ in range(nit):\n         t = c()\n         t.deserialize(f)\n         r.append(t)\n@@ -157,7 +157,7 @@ def ser_vector(l, ser_function_name=None):\n def deser_uint256_vector(f):\n     nit = deser_compact_size(f)\n     r = []\n-    for i in range(nit):\n+    for _ in range(nit):\n         t = deser_uint256(f)\n         r.append(t)\n     return r\n@@ -173,7 +173,7 @@ def ser_uint256_vector(l):\n def deser_string_vector(f):\n     nit = deser_compact_size(f)\n     r = []\n-    for i in range(nit):\n+    for _ in range(nit):\n         t = deser_string(f)\n         r.append(t)\n     return r\n@@ -467,7 +467,7 @@ def deserialize(self, f):\n         else:\n             self.vout = deser_vector(f, CTxOut)\n         if flags != 0:\n-            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n+            self.wit.vtxinwit = [CTxInWitness() for _ in range(len(self.vin))]\n             self.wit.deserialize(f)\n         else:\n             self.wit = CTxWitness()\n@@ -500,7 +500,7 @@ def serialize_with_witness(self):\n             if (len(self.wit.vtxinwit) != len(self.vin)):\n                 # vtxinwit must have the same length as vin\n                 self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n-                for i in range(len(self.wit.vtxinwit), len(self.vin)):\n+                for _ in range(len(self.wit.vtxinwit), len(self.vin)):\n                     self.wit.vtxinwit.append(CTxInWitness())\n             r += self.wit.serialize()\n         r += struct.pack(\"<I\", self.nLockTime)\n@@ -735,7 +735,7 @@ def deserialize(self, f):\n         self.header.deserialize(f)\n         self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n         self.shortids_length = deser_compact_size(f)\n-        for i in range(self.shortids_length):\n+        for _ in range(self.shortids_length):\n             # shortids are defined to be 6 bytes in the spec, so append\n             # two zero bytes and read it in as an 8-byte number\n             self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n@@ -852,7 +852,7 @@ def __init__(self, blockhash=0, indexes = None):\n     def deserialize(self, f):\n         self.blockhash = deser_uint256(f)\n         indexes_length = deser_compact_size(f)\n-        for i in range(indexes_length):\n+        for _ in range(indexes_length):\n             self.indexes.append(deser_compact_size(f))\n \n     def serialize(self):"
      },
      {
        "sha": "5e35ba0fcee4e2dd693a5eff692929e6dfbd4fe4",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -646,7 +646,7 @@ def LegacySignatureHash(script, txTo, inIdx, hashtype):\n \n         tmp = txtmp.vout[outIdx]\n         txtmp.vout = []\n-        for i in range(outIdx):\n+        for _ in range(outIdx):\n             txtmp.vout.append(CTxOut(-1))\n         txtmp.vout.append(tmp)\n "
      },
      {
        "sha": "3362b412098cbaccf75f30368eee2de6a369a5c1",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -529,7 +529,7 @@ def create_confirmed_utxos(fee, node, count):\n     addr2 = node.getnewaddress()\n     if iterations <= 0:\n         return utxos\n-    for i in range(iterations):\n+    for _ in range(iterations):\n         t = utxos.pop()\n         inputs = []\n         inputs.append({\"txid\": t[\"txid\"], \"vout\": t[\"vout\"]})\n@@ -556,15 +556,15 @@ def gen_return_txouts():\n     # So we have big transactions (and therefore can't fit very many into each block)\n     # create one script_pubkey\n     script_pubkey = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n-    for i in range(512):\n+    for _ in range(512):\n         script_pubkey = script_pubkey + \"01\"\n     # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n     txouts = []\n     from .messages import CTxOut\n     txout = CTxOut()\n     txout.nValue = 0\n     txout.scriptPubKey = hex_str_to_bytes(script_pubkey)\n-    for k in range(128):\n+    for _ in range(128):\n         txouts.append(txout)\n     return txouts\n "
      },
      {
        "sha": "47663553356376a9b99f692c46876118de492859",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -129,7 +129,7 @@ def run_test(self):\n \n         self.log.info(\"Creating transactions\")\n         # Five rounds of sending each other transactions.\n-        for i in range(5):\n+        for _ in range(5):\n             self.do_one_round()\n \n         self.log.info(\"Backing up\")\n@@ -142,7 +142,7 @@ def run_test(self):\n         self.nodes[2].dumpwallet(os.path.join(self.nodes[2].datadir, 'wallet.dump'))\n \n         self.log.info(\"More transactions\")\n-        for i in range(5):\n+        for _ in range(5):\n             self.do_one_round()\n \n         # Generate 101 more blocks, so any fees paid mature"
      },
      {
        "sha": "d9a8b58a84d8855a6baad5ce497707d12d7d5099",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -569,7 +569,7 @@ def run_test(self):\n         # So we should be able to generate exactly chainlimit txs for each original output\n         sending_addr = self.nodes[1].getnewaddress()\n         txid_list = []\n-        for i in range(chainlimit * 2):\n+        for _ in range(chainlimit * 2):\n             txid_list.append(self.nodes[0].sendtoaddress(sending_addr, Decimal('0.0001')))\n         assert_equal(self.nodes[0].getmempoolinfo()['size'], chainlimit * 2)\n         assert_equal(len(txid_list), chainlimit * 2)"
      },
      {
        "sha": "0ef78b0e1c08d95e86550e1b540ddf0314c32f7e",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -62,7 +62,7 @@ def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         peer_node.generate(110)\n         self.sync_all()\n-        for i in range(25):\n+        for _ in range(25):\n             peer_node.sendtoaddress(rbf_node_address, 0.001)\n         self.sync_all()\n         peer_node.generate(1)"
      },
      {
        "sha": "ed9159726a8f2ce9e14cf17d4fcc2e1930a379ef",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -45,7 +45,7 @@ def test_anti_fee_sniping(self):\n \n     def test_tx_size_too_large(self):\n         # More than 10kB of outputs, so that we hit -maxtxfee with a high feerate\n-        outputs = {self.nodes[0].getnewaddress(address_type='bech32'): 0.000025 for i in range(400)}\n+        outputs = {self.nodes[0].getnewaddress(address_type='bech32'): 0.000025 for _ in range(400)}\n         raw_tx = self.nodes[0].createrawtransaction(inputs=[], outputs=outputs)\n \n         for fee_setting in ['-minrelaytxfee=0.01', '-mintxfee=0.01', '-paytxfee=0.01']:"
      },
      {
        "sha": "9c63e8f7d36bdd1d196968f6bd3a4ba2a988de44",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -107,7 +107,7 @@ def run_test(self):\n         assert_equal(info2['desc'], info3['desc'])\n \n         self.log.info(\"Test that getnewaddress still works after keypool is exhausted in an encrypted wallet\")\n-        for i in range(0, 500):\n+        for _ in range(500):\n             send_wrpc.getnewaddress()\n \n         self.log.info(\"Test that unlock is needed when deriving only hardened keys in an encrypted wallet\")\n@@ -120,7 +120,7 @@ def run_test(self):\n         }])\n         send_wrpc.walletlock()\n         # Exhaust keypool of 100\n-        for i in range(0, 100):\n+        for _ in range(100):\n             send_wrpc.getnewaddress(address_type='bech32')\n         # This should now error\n         assert_raises_rpc_error(-12, \"Keypool ran out, please call keypoolrefill first\", send_wrpc.getnewaddress, '', 'bech32')"
      },
      {
        "sha": "06f01ef1913f8c4a576f3d5dbdd65681a5958c8f",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         test_addr_count = 10\n         addrs = []\n         for address_type in ['legacy', 'p2sh-segwit', 'bech32']:\n-            for i in range(0, test_addr_count):\n+            for _ in range(test_addr_count):\n                 addr = self.nodes[0].getnewaddress(address_type=address_type)\n                 vaddr = self.nodes[0].getaddressinfo(addr)  # required to get hd keypath\n                 addrs.append(vaddr)"
      },
      {
        "sha": "b6fe2951271d0dea3922ab49fdc971150396ad08",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -27,8 +27,8 @@ def run_test(self):\n         self.nodes[0].generate(110)\n \n         # Get some addresses from the two nodes\n-        addr1 = [self.nodes[1].getnewaddress() for i in range(3)]\n-        addr2 = [self.nodes[2].getnewaddress() for i in range(3)]\n+        addr1 = [self.nodes[1].getnewaddress() for _ in range(3)]\n+        addr2 = [self.nodes[2].getnewaddress() for _ in range(3)]\n         addrs = addr1 + addr2\n \n         # Send 1 + 0.5 coin to each address\n@@ -71,7 +71,7 @@ def run_test(self):\n \n         # Fill node2's wallet with 10000 outputs corresponding to the same\n         # scriptPubKey\n-        for i in range(5):\n+        for _ in range(5):\n             raw_tx = self.nodes[0].createrawtransaction([{\"txid\":\"0\"*64, \"vout\":0}], [{addr2[0]: 0.05}])\n             tx = FromHex(CTransaction(), raw_tx)\n             tx.vin = []"
      },
      {
        "sha": "cff59bd1c15d1c5d1dcb25b7442ec38d1fd7d96b",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -118,7 +118,7 @@ def run_test(self):\n         if not self.options.descriptors:\n             for label in labels:\n                 addresses = []\n-                for x in range(10):\n+                for _ in range(10):\n                     addresses.append(node.getnewaddress())\n                 multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n                 label.add_address(multisig_address)"
      },
      {
        "sha": "1872545cdbc746cfb5dba765b33cd715c517610a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=dac7a111bdd3b0233d94cf68dae7a8bfc6ac9c64",
        "patch": "@@ -26,7 +26,7 @@\n got_loading_error = False\n def test_load_unload(node, name):\n     global got_loading_error\n-    for i in range(10):\n+    for _ in range(10):\n         if got_loading_error:\n             return\n         try:"
      }
    ]
  }
]