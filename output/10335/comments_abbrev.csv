dcousens,2017-05-04T01:09:09Z,"> Alternative solutions welcome.\n\n`return 0`? (aka, do nothing)\nI assume we are already mixing `/dev/urandom` elsewhere though - if not, ACK",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299076599,299076599,
sipa,2017-05-04T01:16:16Z,"> Alternative solutions welcome.\n\nHow about not using `getentropy` on Linux? It's a BSD compatibility function. The Really Good (TM) solution is using `SYS_getrandom`, but if that's not available, just fallback to using `/dev/urandom` directly.\n\n> I assume we are already mixing /dev/urandom elsewhere though.\n\nNo. `getrandom` / `getentropy` replace the need for /dev/urandom.",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299077355,299077355,
theuni,2017-05-04T01:32:28Z,Just had a quick chat about this on IRC. I'll fix this up as discussed.,https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299078948,299078948,
laanwj,2017-05-04T08:16:10Z,"Huh? we should never be using getentropy() on Linux, that's why the getrandom() syscall is called directly. What is going wrong here exactly?\n\nEdit: ok after discussion on IRC understand, `getentropy` is detected on newer versions of glibc, causing that to be used. That should be avoided, the [SYS_getrandom path](https://github.com/bitcoin/bitcoin/blob/master/src/random.cpp#L142) should always",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299122860,299122860,
theuni,2017-05-04T18:05:27Z,"Updated as discussed with @sipa on IRC.\n\n@laanwj: specifically, the problem is building against a newer glibc, and older linux kernel headers for compatibility. So getentropy() is defined, but the syscall isn't. That's what I ran into here.\n\nWould you like to explicitly disable getentropy for linux on the build side as well?",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299264078,299264078,
sipa,2017-05-04T18:11:13Z,"@theuni This commit simplifies the fallback logic a bit: https://github.com/sipa/bitcoin/commit/0abac37a1b3481ed7ab9ea2d0f7b32d819ea9964\n\nBoth this PR or just disabling `getentropy` on Linux are fine solutions to me.",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299265604,299265604,
laanwj,2017-05-05T10:02:31Z,"> Would you like to explicitly disable getentropy for linux on the build side as well?\n\nI don't see why we'd need it. I made the syscall-based path for Linux to avoid having to rely on any function provided by glibc (e.g. to require a certain glibc version) for kernel randomness. But I don't care deeply, as long as it works...",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-299427603,299427603,
ryanofsky,2017-05-10T21:12:42Z,"utACK e596faf8efa211b3b17a555beba81a34dc68d55d. Unclear from discussion above whether there is agreement to continue allowing fallback to getentropy on linux, though IMO it makes the code cleaner to fall straight through all the available calls like this PR does (despite the need for the weak symbol workaround).\n\nsipa's simplification https://github.com/sipa/bitcoin/commit/0abac37a1b3481ed7ab9",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-300614182,300614182,
laanwj,2017-06-24T14:09:12Z,@theuni can you comment on @sipa's implementation?,https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-310840651,310840651,
theuni,2017-07-17T16:56:01Z,"Looking at this again with fresh eyes, I think the most straightforward is to only enable getentropy for openbsd, where we know what it's doing:\n```c++\n#elif defined(HAVE_GETENTROPY) && defined(__OpenBSD__) \n```\nThen we can drop all of the compat stuff. Sound reasonable?",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-315813780,315813780,
laanwj,2017-07-17T17:02:37Z,"Yes, sounds good to me.",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-315815819,315815819,
theuni,2017-07-17T17:15:38Z,"Ok, closing this and opening a new PR as this no long has anything to do with back-compat.",https://github.com/bitcoin/bitcoin/pull/10335#issuecomment-315819629,315819629,
