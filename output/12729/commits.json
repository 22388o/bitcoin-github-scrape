[
  {
    "sha": "1e46d8ae897aded3367a2dd63a76991882d170fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ2ZDhhZTg5N2FkZWQzMzY3YTJkZDYzYTc2OTkxODgyZDE3MGZh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-19T19:57:11Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-05T16:19:35Z"
      },
      "message": "Get rid of ambiguous OutputType::NONE value\n\nBased on suggestion by Pieter Wuille <pieter.wuille@gmail.com> at\nhttps://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357982763\n\nAfter #12119, the NONE output type was overloaded to refer to either an output\ntype that couldn't be parsed, or to an automatic change output mode.  This\nchange drops the NONE enum and uses a simple bool indicate parse failure, and a\nnew CHANGE_AUTO enum to refer the change output type.\n\nThis change is almost a pure refactoring except it makes RPCs reject empty\nstring (\"\") address types instead of treating them like they were unset. This\nsimplifies the parsing code a little bit and could prevent RPC usage mistakes.\nIt's noted in the release notes.",
      "tree": {
        "sha": "b3738f95b2c05a6e712576a9c6d08a128391fe65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3738f95b2c05a6e712576a9c6d08a128391fe65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e46d8ae897aded3367a2dd63a76991882d170fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46d8ae897aded3367a2dd63a76991882d170fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e46d8ae897aded3367a2dd63a76991882d170fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46d8ae897aded3367a2dd63a76991882d170fa/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0c6a7b0e47e03f848dc992d37fe209dd9c6975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0c6a7b0e47e03f848dc992d37fe209dd9c6975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0c6a7b0e47e03f848dc992d37fe209dd9c6975"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 41,
      "deletions": 31
    },
    "files": [
      {
        "sha": "3f2845662854f39a9910d32fb6aacebb2c5f88d2",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -104,6 +104,11 @@ Low-level RPC changes\n   now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n   with any `-wallet=<path>` options, there is no change in behavior, and the\n   name of any wallet is just its `<path>` string.\n+- Passing an empty string (`\"\"`) as the `address_type` parameter to\n+  `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n+  `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n+  to using the default address type. It is still possible to pass null or leave\n+  the parameter unset to use the default address type.\n \n ### Logging\n "
      },
      {
        "sha": "275dba0b150456b84283765d44c7254517c659df",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -648,7 +648,7 @@ void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRec\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::NONE ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n+        const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n         walletModel->wallet().learnRelatedScripts(newKey, change_type);\n         CTxDestination dest = GetDestinationForKey(newKey, change_type);\n         std::string label = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant).toStdString();"
      },
      {
        "sha": "f669921750aa7668ece1858a2c7d5858fab8e7fe",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -164,8 +164,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[1].isNull()) {\n-        output_type = ParseOutputType(request.params[1].get_str(), pwallet->m_default_address_type);\n-        if (output_type == OutputType::NONE) {\n+        if (!ParseOutputType(request.params[1].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n         }\n     }\n@@ -259,10 +258,9 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n     }\n \n-    OutputType output_type = pwallet->m_default_change_type != OutputType::NONE ? pwallet->m_default_change_type : pwallet->m_default_address_type;\n+    OutputType output_type = pwallet->m_default_change_type != OutputType::CHANGE_AUTO ? pwallet->m_default_change_type : pwallet->m_default_address_type;\n     if (!request.params[0].isNull()) {\n-        output_type = ParseOutputType(request.params[0].get_str(), output_type);\n-        if (output_type == OutputType::NONE) {\n+        if (!ParseOutputType(request.params[0].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }\n     }\n@@ -1226,8 +1224,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n     OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[3].isNull()) {\n-        output_type = ParseOutputType(request.params[3].get_str(), output_type);\n-        if (output_type == OutputType::NONE) {\n+        if (!ParseOutputType(request.params[3].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n         }\n     }\n@@ -3180,8 +3177,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             if (options.exists(\"changeAddress\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both changeAddress and address_type options\");\n             }\n-            coinControl.m_change_type = ParseOutputType(options[\"change_type\"].get_str(), pwallet->m_default_change_type);\n-            if (coinControl.m_change_type == OutputType::NONE) {\n+            coinControl.m_change_type = pwallet->m_default_change_type;\n+            if (!ParseOutputType(options[\"change_type\"].get_str(), *coinControl.m_change_type)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown change type '%s'\", options[\"change_type\"].get_str()));\n             }\n         }"
      },
      {
        "sha": "965eb067ccea2ea624726d478f8e01647f1bdce5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -2648,7 +2648,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend)\n {\n     // If -changetype is specified, always use that change type.\n-    if (change_type != OutputType::NONE) {\n+    if (change_type != OutputType::CHANGE_AUTO) {\n         return change_type;\n     }\n \n@@ -4022,16 +4022,12 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n     }\n \n-    walletInstance->m_default_address_type = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), DEFAULT_ADDRESS_TYPE);\n-    if (walletInstance->m_default_address_type == OutputType::NONE) {\n+    if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n         InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n     }\n \n-    // If changetype is set in config file or parameter, check that it's valid.\n-    // Default to OutputType::NONE if not set.\n-    walletInstance->m_default_change_type = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), OutputType::NONE);\n-    if (walletInstance->m_default_change_type == OutputType::NONE && !gArgs.GetArg(\"-changetype\", \"\").empty()) {\n+    if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n         InitError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n         return nullptr;\n     }\n@@ -4219,19 +4215,19 @@ static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n \n-OutputType ParseOutputType(const std::string& type, OutputType default_type)\n+bool ParseOutputType(const std::string& type, OutputType& output_type)\n {\n-    if (type.empty()) {\n-        return default_type;\n-    } else if (type == OUTPUT_TYPE_STRING_LEGACY) {\n-        return OutputType::LEGACY;\n+    if (type == OUTPUT_TYPE_STRING_LEGACY) {\n+        output_type = OutputType::LEGACY;\n+        return true;\n     } else if (type == OUTPUT_TYPE_STRING_P2SH_SEGWIT) {\n-        return OutputType::P2SH_SEGWIT;\n+        output_type = OutputType::P2SH_SEGWIT;\n+        return true;\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n-        return OutputType::BECH32;\n-    } else {\n-        return OutputType::NONE;\n+        output_type = OutputType::BECH32;\n+        return true;\n     }\n+    return false;\n }\n \n const std::string& FormatOutputType(OutputType type)"
      },
      {
        "sha": "1d85fbcea1168c3a2ac3f3da99e1f2c64bc512a4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -99,15 +99,24 @@ enum WalletFeature\n };\n \n enum class OutputType {\n-    NONE,\n     LEGACY,\n     P2SH_SEGWIT,\n     BECH32,\n+\n+    /**\n+     * Special output type for change outputs only. Automatically choose type\n+     * based on address type setting and the types other of non-change outputs\n+     * (see -changetype option documentation and implementation in\n+     * CWallet::TransactionChangeType for details).\n+     */\n+    CHANGE_AUTO,\n };\n \n //! Default for -addresstype\n constexpr OutputType DEFAULT_ADDRESS_TYPE{OutputType::P2SH_SEGWIT};\n \n+//! Default for -changetype\n+constexpr OutputType DEFAULT_CHANGE_TYPE{OutputType::CHANGE_AUTO};\n \n /** A key pool entry */\n class CKeyPool\n@@ -988,7 +997,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static CFeeRate fallbackFee;\n     static CFeeRate m_discard_rate;\n     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};\n-    OutputType m_default_change_type{OutputType::NONE}; // Default to OutputType::NONE if not set by -changetype\n+    OutputType m_default_change_type{DEFAULT_CHANGE_TYPE};\n \n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n@@ -1232,7 +1241,7 @@ class CAccount\n     }\n };\n \n-OutputType ParseOutputType(const std::string& str, OutputType default_type);\n+bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      },
      {
        "sha": "0f09c3c5521de4c4a9ed56588bd2e80f64263db3",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -224,7 +224,7 @@ def run_test(self):\n         outputs = { self.nodes[0].getnewaddress() : Decimal(4.0) }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': None})\n-        assert_raises_rpc_error(-5, \"Unknown change type\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': ''})\n+        assert_raises_rpc_error(-5, \"Unknown change type ''\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': ''})\n         rawtx = self.nodes[2].fundrawtransaction(rawtx, {'change_type': 'bech32'})\n         dec_tx = self.nodes[2].decoderawtransaction(rawtx['hex'])\n         assert_equal('witness_v0_keyhash', dec_tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])"
      },
      {
        "sha": "7658d7838344019bd051baa8211fde2f5f86da89",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46d8ae897aded3367a2dd63a76991882d170fa/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46d8ae897aded3367a2dd63a76991882d170fa/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=1e46d8ae897aded3367a2dd63a76991882d170fa",
        "patch": "@@ -280,7 +280,10 @@ def run_test(self):\n         self.log.info('getrawchangeaddress defaults to addresstype if -changetype is not set and argument is absent')\n         self.test_address(3, self.nodes[3].getrawchangeaddress(), multisig=False, typ='bech32')\n \n-        self.log.info('getrawchangeaddress fails with invalid changetype argument')\n+        self.log.info('test invalid address type arguments')\n+        assert_raises_rpc_error(-5, \"Unknown address type ''\", self.nodes[3].addmultisigaddress, 2, [compressed_1, compressed_2], None, '')\n+        assert_raises_rpc_error(-5, \"Unknown address type ''\", self.nodes[3].getnewaddress, None, '')\n+        assert_raises_rpc_error(-5, \"Unknown address type ''\", self.nodes[3].getrawchangeaddress, '')\n         assert_raises_rpc_error(-5, \"Unknown address type 'bech23'\", self.nodes[3].getrawchangeaddress, 'bech23')\n \n         self.log.info(\"Nodes with changetype=p2sh-segwit never use a P2WPKH change output\")"
      }
    ]
  }
]