promag,2018-03-20T22:21:27Z,"> It is still possible to pass null\n\nOnly with named parameters.\n\n> or leave the parameter unset to use the default address type\n\nHow about explicit setting like `-changetype=auto` and `{ ""change_type"": ""auto"" }` or alike? It would allow a specific `-changetype` and `auto` change type for RPC.",https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374777135,374777135,
ryanofsky,2018-03-20T22:32:21Z,">> It is still possible to pass null\n\n> Only with named parameters.\n\nNot sure what this is referring to. The checks are all for `isNull()`. Let me know if you would like me to rephrase the release notes in some way though.\n\n> How about explicit setting like -changetype=auto\n\nGood idea for another PR, but for now I'm just trying to do a code cleanup.",https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374779824,374779824,
promag,2018-03-21T00:09:47Z,"> Good idea for another PR, but for now I'm just trying to do a code cleanup.\n\nSounds good.\n\nRegarding the null/omit thing, and considering the following:\n```\n# bitcoin.conf\naddresstype=bech32\nchangetype=bech32\n```\nIMO we could allow empty string as it enables to:\n - launch and use software default address type overriding `bitcoin.conf`:\n```sh\nbitcoind -addresstype=\n```",https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374799567,374799567,
sipa,2018-03-21T22:50:57Z,utACK 30a961ba74abf1eaadbe887473493b2361170254,https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-375121630,375121630,
MarcoFalke,2018-04-06T17:01:14Z,@ryanofsky Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-379314651,379314651,
MarcoFalke,2018-04-07T15:46:46Z,"Concept ACK eaaf9b4 (downgrading my utACK, since I am going to re-review from scratch)",https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-379478859,379478859,
MarcoFalke,2018-04-07T19:25:59Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-379493210,379493210,
ryanofsky,2018-04-10T10:33:22Z,"> Needs rebase\n\nDropped second commit to avoid need for rebase: eaaf9b46768ad1cfcb445f9118e8bc701e73e427 -> 1e46d8ae897aded3367a2dd63a76991882d170fa ([pr/nonone.7](https://github.com/ryanofsky/bitcoin/commits/pr/nonone.7) -> [pr/nonone.8](https://github.com/ryanofsky/bitcoin/commits/pr/nonone.8))",https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-380052981,380052981,
sipa,2018-05-03T00:01:02Z,reutACK 1e46d8ae897aded3367a2dd63a76991882d170fa,https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-386157102,386157102,
MarcoFalke,2018-03-19T20:55:09Z,Mind adding a test for an empty string?,https://github.com/bitcoin/bitcoin/pull/12729#discussion_r175582282,175582282,src/wallet/rpcwallet.cpp
ryanofsky,2018-03-20T18:39:45Z,"> Mind adding a test for an empty string?\n\nAdded tests in 3454f7bf3b4f1ae041c549dbe9e1e9fae3a8b4aa",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r175880666,175880666,src/wallet/rpcwallet.cpp
sipa,2018-03-21T01:37:29Z,"Perhaps it would be good to support explicitly selecting the auto behaviour (with a ""auto"" string, only available for change?)\n\nOtherwise it's hard to override a config file setting that set it to something else e.g.",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r175969481,175969481,src/wallet/wallet.cpp
sipa,2018-03-21T01:38:45Z,"This expression to determine the change type seems to be repeated pattern (at least twice, maybe that's all). Do you think it's worth it to abstract it out into a `CWallet` method?",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r175969618,175969618,src/qt/paymentserver.cpp
promag,2018-03-21T14:05:55Z,"FYI https://github.com/bitcoin/bitcoin/pull/12729#issuecomment-374779824:\n\n> > How about explicit setting like -changetype=auto\n> \n> Good idea for another PR, but for now I'm just trying to do a code cleanup.",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r176092359,176092359,src/wallet/wallet.cpp
ryanofsky,2018-03-21T18:38:33Z,"> This expression to determine the change type seems to be repeated pattern (at least twice, maybe that's all). Do you think it's worth it to abstract it out into a CWallet method?\n\n~~~Added in 30a961ba74abf1eaadbe887473493b2361170254~~~\n\nEDIT: Dropped this for now to simplify the PR and avoid a conflict. Will include the change in followup PR (see description).",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r176196001,176196001,src/qt/paymentserver.cpp
sipa,2018-03-21T20:30:47Z,"Oh, I missed that. Sounds reasonable.",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r176227879,176227879,src/wallet/wallet.cpp
MarcoFalke,2018-03-22T18:06:43Z,"nit: Is there any difference between ""addmultisigaddress"" and ""addmultisigaddress""?",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r176519952,176519952,doc/release-notes.md
MarcoFalke,2018-03-22T18:21:04Z,"Why is this assignment needed? Either `ParseOutputType` in the next line succeeds and overwrites the value or it fails and we get thrown out of this function.\n\nI think you can safely remove this line.",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r176524815,176524815,src/wallet/rpcwallet.cpp
ryanofsky,2018-04-05T17:16:48Z,"> nit: Is there any difference between ""addmultisigaddress"" and ""addmultisigaddress""?\n\nTypo, fixed in 9141e95de9f6c0a466f6ae13269d0acae764aadd",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r179537037,179537037,doc/release-notes.md
ryanofsky,2018-04-05T17:17:06Z,"> Why is this assignment needed?\n\nThe optional value is dereferenced in the next line (`*coinControl.m_change_type`), and this only works if the option is set. Dereferencing an unset option is bad, similar to dereferencing a null pointer (http://en.cppreference.com/w/cpp/utility/optional/operator%2A).",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r179537113,179537113,src/wallet/rpcwallet.cpp
MarcoFalke,2018-04-07T14:45:12Z,"Ah, thanks. So the assignment is needed, but the value doesn't matter.",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r179918430,179918430,src/wallet/rpcwallet.cpp
promag,2018-05-02T21:55:13Z,"Right, also got confused because forgot that `CCoinControl::m_change_type` is `boost::optional<OutputType>`.\n\nNit, to avoid the *assignment is needed, but the value doesn't matter* detail:\n```cpp\nOutputType change_type;\nif (!ParseOutputType(options[""change_type""].get_str(), change_type) {\n    ...\n}\ncoinControl.m_change_type = change_type;\n```\nOtherwise a comment above could hel",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r185650479,185650479,src/wallet/rpcwallet.cpp
sipa,2018-05-02T23:51:52Z,"@ryanofsky I think it's perfectly legal to dereference a pointer to an uninitialized value, as long as you don't read it? This is different from dereferencing a null pointer, which is always undefined.\n\nNo problem with initializing it, though.",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r185670552,185670552,src/wallet/rpcwallet.cpp
promag,2018-05-03T00:21:18Z,"@sipa the following\n```\n  boost::optional<std::string> s;\n  *s = ""hello"";\n```\ngives\n```\nAssertion failed: (this->is_initialized()), function get, file /usr/local/include/boost/optional/optional.hpp, line 1191.\n```",https://github.com/bitcoin/bitcoin/pull/12729#discussion_r185674569,185674569,src/wallet/rpcwallet.cpp
