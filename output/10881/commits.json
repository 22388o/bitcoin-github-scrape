[
  {
    "sha": "8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDY0ZjdhYmU2ZTZjOTkzNjlmYjliZGU4MTkwZTc2NmY1ZmExZGMy",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-07-19T07:12:38Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-07-19T07:12:38Z"
      },
      "message": "trivial: fix various pyflakes/vulture warnings",
      "tree": {
        "sha": "96da737217772fa93aac749c97a52f5888713315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96da737217772fa93aac749c97a52f5888713315"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8d6a3fb43a2433ef46aaf95511650e3888f730",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8d6a3fb43a2433ef46aaf95511650e3888f730"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 22,
      "deletions": 40
    },
    "files": [
      {
        "sha": "6968b46f7370e903ad36014393e10151d20b20ac",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -387,7 +387,7 @@ def test_version2_relay(self):\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n         tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n-        tx_id = self.nodes[1].sendrawtransaction(tx_signed)\n+        self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':\n     BIP68Test().main()"
      },
      {
        "sha": "ac24469eb436e1844be204d08ee27002c95d43d7",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -168,7 +168,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n-    txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n+    rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n "
      },
      {
        "sha": "0d61f1d591e5492828c8d8c9b0e13cb0a1ce3300",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -312,7 +312,6 @@ def run_test(self):\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n-        listunspent = self.nodes[2].listunspent()\n         inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)"
      },
      {
        "sha": "13e1bdecd37e0fdf985ea3c71025b15f0677e14b",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -161,7 +161,6 @@ def run_test(self):\n                 variant.check()\n \n         # Create new transactions sending to each address.\n-        fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.sent_amount = 10 - (2 * i + 1) / 8.0\n             variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)"
      },
      {
        "sha": "ce81c4d64f43a5ab4f0270c6ef862746dd936e12",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 6,
        "deletions": 17,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -21,16 +21,9 @@ def run_test (self):\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n-        # keyword definition\n-        PRIV_KEY = 'privkey'\n-        PUB_KEY = 'pubkey'\n-        ADDRESS_KEY = 'address'\n-        SCRIPT_KEY = 'script'\n-\n-\n         node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        node0_address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        node0_address3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n \n         #Check only one address\n         assert_equal(node0_address1['ismine'], True)\n@@ -227,10 +220,9 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh\")\n         result = self.nodes[1].importmulti([{\n@@ -255,10 +247,9 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh with respective redeem script\")\n         result = self.nodes[1].importmulti([{\n@@ -283,10 +274,9 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -311,10 +301,9 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n-        transaction = self.nodes[1].gettransaction(transactionid)\n \n         self.log.info(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{"
      },
      {
        "sha": "0829c9c0a54f2fc08197df1bc6e3dcba64c1730b",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -19,12 +19,12 @@ def run_test(self):\n         self.nodes[0].generate(101)\n \n         self.sync_all()\n-        \n+\n         # address\n         address1 = self.nodes[0].getnewaddress()\n         # pubkey\n         address2 = self.nodes[0].getnewaddress()\n-        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n         # privkey\n         address3 = self.nodes[0].getnewaddress()\n         address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n@@ -77,13 +77,13 @@ def run_test(self):\n \n         #Import with affiliated address with no rescan\n         self.nodes[1].importaddress(address2, \"add2\", False)\n-        result2 = self.nodes[1].importprunedfunds(rawtxn2, proof2)\n+        self.nodes[1].importprunedfunds(rawtxn2, proof2)\n         balance2 = self.nodes[1].getbalance(\"add2\", 0, True)\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n         self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n-        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3)\n+        self.nodes[1].importprunedfunds(rawtxn3, proof3)\n         balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))\n         balance3 = self.nodes[1].getbalance(\"*\", 0, True)"
      },
      {
        "sha": "560b6d8f27db45354fc28b8d65f7b2a1aca59243",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -36,7 +36,7 @@ def __init__(self):\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n@@ -110,7 +110,7 @@ def run_test(self):\n         self.nodes[0].generate(VB_PERIOD)\n         self.stop_nodes()\n         # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n "
      },
      {
        "sha": "f6d45172da583cab391b091de50a44df3f8bff94",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -63,7 +63,7 @@ def run_test(self):\n         addr2Obj = self.nodes[2].validateaddress(addr2)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+        assert self.nodes[2].validateaddress(mSigObj)\n \n         #use balance deltas instead of absolute values\n         bal = self.nodes[2].getbalance()\n@@ -87,7 +87,7 @@ def run_test(self):\n         addr3Obj = self.nodes[2].validateaddress(addr3)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+        assert self.nodes[2].validateaddress(mSigObj)\n \n         txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)"
      },
      {
        "sha": "4f33bb58b9cdc5832f9f90dfe01931ad4af09632",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -270,7 +270,7 @@ def test_replacement_feeperkb(self):\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n-        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n         # Higher fee, but the fee per KB is much lower, so the replacement is\n         # rejected.\n@@ -331,7 +331,7 @@ def test_new_unconfirmed_inputs(self):\n         tx1.vin = [CTxIn(confirmed_utxo)]\n         tx1.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1_hex = txToHex(tx1)\n-        tx1_txid = self.nodes[0].sendrawtransaction(tx1_hex, True)\n+        self.nodes[0].sendrawtransaction(tx1_hex, True)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)]\n@@ -499,7 +499,7 @@ def test_prioritised_transactions(self):\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx2a_hex = txToHex(tx2a)\n-        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+        self.nodes[0].sendrawtransaction(tx2a_hex, True)\n \n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()"
      },
      {
        "sha": "84de69d0808a1a8577dc903e1e088fcd8d99b032",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -71,9 +71,6 @@\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n \n-def ripemd160(s):\n-    return hashlib.new('ripemd160', s).digest()\n-\n def hash256(s):\n     return sha256(sha256(s))\n "
      },
      {
        "sha": "ae497741f10bb6170f4fc541e9b9bf6c4f25e435",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -14,8 +14,7 @@\n import sys\n bchr = chr\n bord = ord\n-if sys.version > '3':\n-    long = int\n+if sys.version_info.major == 3:\n     bchr = lambda x: bytes([x])\n     bord = lambda x: x\n "
      },
      {
        "sha": "5cd559e4a3cb74796b60b719fc9d82a82214b133",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -141,7 +141,7 @@ def run(self):\n                 thread = threading.Thread(None, conn.handle)\n                 thread.daemon = True\n                 thread.start()\n-    \n+\n     def start(self):\n         assert(not self.running)\n         self.running = True\n@@ -156,4 +156,3 @@ def stop(self):\n         s.connect(self.conf.addr)\n         s.close()\n         self.thread.join()\n-"
      },
      {
        "sha": "40225ad55d0e167d770504ba8dcde1fb3f29e484",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8064f7abe6e6c99369fb9bde8190e766f5fa1dc2/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=8064f7abe6e6c99369fb9bde8190e766f5fa1dc2",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n-        sendResp = self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n+        self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n \n         self.sync_all()\n         self.nodes[1].generate(1) #mine a block"
      }
    ]
  }
]